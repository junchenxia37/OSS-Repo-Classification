[{"name": ".github", "description": null, "language": null, "license": null, "readme": "# .github", "release_dates": []}, {"name": "abi", "description": "NEAR contract schema and tooling", "language": null, "license": null, "readme": "<div align=\"center\">\n\n  <h1><code>NEAR ABI</code></h1>\n\n  <p>\n    <strong>ABI schema format and tooling to define interface to NEAR smart contracts.</strong>\n  </p>\n</div>\n\n\u26a0\ufe0f **Warning: Format and tooling are not final and changes are likely to happen.**\n\n> What is an ABI?\n\nAn ABI (Application Binary Interface) traditionally defines the interface between two binary program modules. In the context of the NEAR ABI, this JSON schema defines the interface to the Wasm binary (smart contract) on the NEAR network, including parameter and result formats used through the NEAR runtime.\n\n> Why do we need ABI?\n\n- Human-readable format to easy indicate how to interact with the contract\n- Standard interface definition cross-language\n  - Ability to be used with any combination of contract SDK and client libraries\n- Tooling built using the ABI to be able to generate code to interact with any contract easily\n\n## Usage\n\n### Rust\nEnsure you have [cargo-near](https://github.com/near/cargo-near) installed\n\nTo generate an ABI for a contract within the directory containing contract's Cargo.toml\n\n```console\n$ cargo near abi\n```\n\nEnsure that the project you are generating an ABI for depends on a version of `near-sdk` of `4.1.0` or later and has the `abi` feature enabled.\n\n```toml\nnear-sdk = { version = \"4.1.0\", features = [\"abi\"] }\n```\n\n### TypeScript\nEnsure you have a [near-sdk-js](https://github.com/near/near-sdk-js) (version 0.7.0 or later) contract\n\nTo generate an ABI for a contract within the directory containing contract's package.json\n\n```console\n$ npx near-sdk-js build --generateABI path/to/contract.ts\n```\n\nThe ABI will be put in `build/contract-abi.json`\n\n## Supported tools:\n\n### ABI generation\n- [near-sdk-rs](https://github.com/near/near-sdk-rs) (version `4.1.0` and above) and [cargo-near](https://github.com/near/cargo-near) (version `0.3.0` and above): `cargo-near` is a [cargo](https://doc.rust-lang.org/cargo/) extention that is used to build the contract and generate the ABI from a `near-sdk-rs` contract.\n- [near-sdk-js](https://github.com/near/near-sdk-js) (version `0.7.0` and above): invoke `near-sdk-js build` with `--generateABI` to generate the ABI from a TypeScript contract (pure JavaScript is not supported yet).\n\n### ABI clients\n- [near-abi-client-rs](https://github.com/near/near-abi-client-rs): Generates glue code to interact with contracts through RPC using [workspaces-rs](https://github.com/near/workspaces-rs).\n- [near-sdk-abi](https://github.com/near/near-sdk-abi): Generates [near-sdk-rs](https://github.com/near/near-sdk-rs) glue code to make cross-contract calls within other contracts.\n- [near-api-js](https://github.com/near/near-api-js): integration with NAJ is coming soon, stay tuned.\n\n### Utility Libraries\n- [near-abi-rs](https://github.com/near/near-abi-rs): Common Rust types used across Rust ABI crates.\n- [near-abi-js](https://github.com/near/near-abi-js): Common types used across JavaScript ABI libraries.\n", "release_dates": []}, {"name": "abi-example", "description": "Extract embedded ABI from a NEAR smart contract", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<!-- markdownlint-disable MD014 -->\n\n# NEAR ABI Example\n\nBuild a NEAR smart contract with ABI embedded, and inspect it on-chain.\n\n## Requirements\n\n- [`cargo-near`](https://github.com/near/cargo-near) for building the smart contract.\n\n  ```console\n  $ cargo install cargo-near\n  ```\n\n- [`near-cli`](https://github.com/near/near-cli) for deploying the smart contract.\n\n  ```console\n  $ npm install -g near-cli\n  ```\n\n## Usage\n\n- Clone and download the dependencies.\n\n  ```console\n  $ git clone https://github.com/near/abi-example\n  $ cd abi-example\n  $ npm install\n  ```\n\n- Next, we need to build and deploy a contract with ABI embedded.\n\n  - Build the contract\n\n    `$ cargo near build --release --embed-abi --doc --out-dir ./res`\n\n    <img width=\"461\" alt=\"demo\" src=\"https://github.com/near/abi-example/raw/master/demo.png\">\n\n    This would export the compiled contract to the `res` directory, with its ABI embedded within.\n\n  - Deploy the contract.\n\n    ```console\n    $ NEAR_ENV=testnet near dev-deploy ./res/adder.wasm\n    Starting deployment. Account id: dev-1661966288541-80307357536154, node: https://rpc.testnet.near.org, file: ./res/adder.wasm\n    Transaction Id FqZPhkJ2YzFkrUXFpUetwmwtzgm9P7QMLyMtGZQhRx5u\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://explorer.testnet.near.org/transactions/FqZPhkJ2YzFkrUXFpUetwmwtzgm9P7QMLyMtGZQhRx5u\n    Done deploying to dev-1661966288541-80307357536154\n    ```\n\n- Next, inspect the ABI for the on-chain contract. (the returns JSON adhering to [this schema](https://github.com/near/near-abi-js/blob/d468185a012c77428cf07757292104fdd3e1ea0c/lib/index.d.ts))\n\n  - Quick inspection\n\n    ```console\n    $ NEAR_ENV=testnet node inspect.js dev-1661966288541-80307357536154\n    {\n      schema_version: '0.3.0',\n      metadata: {\n        name: 'adder',\n        version: '0.1.0',\n        authors: [ 'Near Inc <hello@nearprotocol.com>' ],\n        build: { compiler: 'rustc 1.64.0', builder: 'cargo-near 0.3.0' }\n      },\n      body: {\n        functions: [\n          ...\n    ```\n\n  - Export the ABI as compact JSON (see [res/adder_abi.json](https://github.com/near/abi-example/blob/master/res/adder_abi.json) for a full output)\n\n    ```console\n    $ NEAR_ENV=testnet node inspect.js dev-1661966288541-80307357536154 --json --compact\n    {\"schema_version\":\"0.3.0\",\"metadata\":{\"name\":\"adder\",\"version\":\"0.1.0\",\"authors\":[\"Near Inc <hello@nearprotocol.com>\"],\"build\":{\"compiler\":\"rustc 1.64.0\",\"builder\":\"cargo-near 0.3.0\"}},\"body\":{\"functions\":[{ ...\n    ```\n\n  - Export the raw, compressed ABI (should be the same as the file in `./res/adder_abi.zst`), you can test this with:\n\n    ```console\n    $ NEAR_ENV=testnet node inspect.js dev-1661966288541-80307357536154 --raw > contract_abi.zst\n    $ diff -s contract_abi.zst ./res/adder_abi.zst\n    Files contract_abi.zst and res/adder_abi.zst are identical\n    ```\n\n  See `node inspect.js --help` for a complete list of options.\n\n- You can also install it globally if you find it useful.\n\n  ```console\n  $ npm link\n  ```\n\n  Afterwards, you can use the `near-inspect` command anywhere instead of `node inspect.js`.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as below, without any additional terms or conditions.\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": []}, {"name": "abomonation", "description": "A mortifying serialization library for Rust", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Abomonation\nA mortifying serialization library for Rust\n\nAbomonation (spelling intentional) is a serialization library for Rust based on the very simple idea that if someone presents data for serialization it will copy those exact bits, and then follow any pointers and copy those bits, and so on. When deserializing it recovers the exact bits, and then corrects pointers to aim at the serialized forms of the chased data.\n\n**Warning**: Abomonation should not be used on any data you care strongly about, or from any computer you value the data on. The `encode` and `decode` methods do things that may be undefined behavior, and you shouldn't stand for that. Specifically, `encode` exposes padding bytes to `memcpy`, and `decode` doesn't much respect alignment.\n\nPlease consult the [abomonation documentation](https://frankmcsherry.github.com/abomonation) for more specific information.\n\nHere is an example of using Abomonation. It is very easy to use. Frighteningly easy.\n\n```rust\nextern crate abomonation;\nuse abomonation::{encode, decode};\n\n// create some test data out of abomonation-approved types\nlet vector = (0..256u64).map(|i| (i, format!(\"{}\", i))).collect();\n\n// encode vector into a Vec<u8>\nlet mut bytes = Vec::new();\nunsafe { encode(&vector, &mut bytes); }\n\n// unsafely decode a &Vec<(u64, String)> from binary data (maybe your utf8 are lies!).\nif let Some((result, remaining) = unsafe { decode::<Vec<(u64, String)>>(&mut bytes) } {\n    assert!(result == &vector);\n    assert!(remaining.len() == 0);\n}\n```\n\nWhen you use Abomonation things may go really fast. That is because it does so little work, and mostly just copies large hunks of memory. Typing\n\n    cargo bench\n\nwill trigger Rust's benchmarking infrastructure (or an error if you are not using nightly. bad luck). The tests repeatedly encode `Vec<u64>`, `Vec<String>`, and `Vec<Vec<(u64, String)>>` giving numbers like:\n\n    test u64_enc        ... bench:         131 ns/iter (+/- 58) = 62717 MB/s\n    test string10_enc   ... bench:       8,784 ns/iter (+/- 2,791) = 3966 MB/s\n    test vec_u_s_enc    ... bench:       8,964 ns/iter (+/- 1,439) = 4886 MB/s\n\nThey also repeatedly decode the same data, giving numbers like:\n\n    test u64_dec        ... bench:           2 ns/iter (+/- 1) = 4108000 MB/s\n    test string10_dec   ... bench:       1,058 ns/iter (+/- 349) = 32930 MB/s\n    test vec_u_s_dec    ... bench:       1,232 ns/iter (+/- 223) = 35551 MB/s\n\nThese throughputs are so high because there is very little to do: internal pointers need to be corrected, but in their absence (*e.g.* `u64`) there is literally nothing to do.\n\nBe warned that these numbers are not *goodput*, but rather the total number of bytes moved, which is equal to the in-memory representation of the data. On a 64bit system, a `String` requires 24 bytes plus one byte per character, which can be a lot of overhead for small strings.\n\n## unsafe_abomonate!\n\nAbomonation comes with the `unsafe_abomonate!` macro implementing `Abomonation` for structs which are essentially equivalent to a tuple of other `Abomonable` types. To use the macro, you must put the `#[macro_use]` modifier before `extern crate abomonation;`.\n\nPlease note that `unsafe_abomonate!` synthesizes unsafe implementations of `Abomonation`, and it is should be considered unsafe to invoke.\n\n```rust\n#[macro_use]\nextern crate abomonation;\nuse abomonation::{encode, decode};\n\n#[derive(Eq, PartialEq)]\nstruct MyStruct {\n    pub a: String,\n    pub b: u64,\n    pub c: Vec<u8>,\n}\n\n// (type : field1, field2 .. )\nunsafe_abomonate!(MyStruct : a, b, c);\n\n// create some test data out of abomonation-approved types\nlet record = MyStruct{ a: \"test\".to_owned(), b: 0, c: vec![0, 1, 2] };\n\n// encode vector into a Vec<u8>\nlet mut bytes = Vec::new();\nunsafe { encode(&record, &mut bytes); }\n\n// decode a &Vec<(u64, String)> from binary data\nif let Some((result, remaining)) = unsafe { decode::<MyStruct>(&mut bytes) } {\n    assert!(result == &record);\n    assert!(remaining.len() == 0);\n}\n```\n\nBe warned that implementing `Abomonable` for types can be a giant disaster and is entirely discouraged.\n", "release_dates": []}, {"name": "abomonation_derive", "description": "A macros 1.1 #[derive(Abomonation)] implementation for the abomonation crate", "language": "Rust", "license": null, "readme": null, "release_dates": []}, {"name": "account-lookup", "description": "Temporary tool for account / lockup lookup", "language": "JavaScript", "license": null, "readme": "# [Account lookup service](near.github.io/account-lookup/)\n\nThis is a temporary tool to get the data from the deployed lockup contracts.\n\n## Contributing\n\nTo run this tool locally, use:\n```\nyarn\nyarn start\n```\n", "release_dates": []}, {"name": "account-lookup-script", "description": null, "language": "JavaScript", "license": null, "readme": "It is a helper script that produces CSV output with account owned balance, lockup locked balance, lockup total balance, and lockup liquid balance.\n\nYou will need Node.js to run the script.\n\nInstall project dependencies:\n\n```sh\nnpm install\n```\n\nOperate the script:\n\n1. Edit `blockReference` value in `script.js` file\n2. Run the script:\n\n    ```sh\n    node script.js 2>/dev/null >output.csv\n    ```\n3. CSV output will be saved to `output.csv` file and errors will be ignored (remove `2>/dev/null` to see all the errors)\n", "release_dates": []}, {"name": "actix-extras", "description": "Forked the project to enable actix-web 4.0.0 beta support", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# actix-extras\n\n> A collection of additional crates supporting the [actix-web] and [actix] frameworks.\n\n[![build status](https://github.com/actix/actix-extras/workflows/CI%20%28Linux%29/badge.svg?branch=master&event=push)](https://github.com/actix/actix-extras/actions)\n[![Join the chat at https://gitter.im/actix/actix-web](https://badges.gitter.im/actix/actix-web.svg)](https://gitter.im/actix/actix-web?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Crates by @actix\n\n| Crate                |                                                                                                                                                                                                                                                                                                                                                                     |                                                                  |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- |\n| [actix-cors]         | [![crates.io](https://img.shields.io/crates/v/actix-cors?label=latest)](https://crates.io/crates/actix-cors) [![Documentation](https://docs.rs/actix-cors/badge.svg)](https://docs.rs/actix-cors) [![dependency status](https://deps.rs/crate/actix-cors/0.5.4/status.svg)](https://deps.rs/crate/actix-cors/0.5.4)                                                 | Cross-origin resource sharing (CORS) for actix-web applications. |\n| [actix-identity]     | [![crates.io](https://img.shields.io/crates/v/actix-identity?label=latest)](https://crates.io/crates/actix-identity) [![Documentation](https://docs.rs/actix-identity/badge.svg)](https://docs.rs/actix-identity) [![dependency status](https://deps.rs/crate/actix-identity/0.3.1/status.svg)](https://deps.rs/crate/actix-identity/0.3.1)                         | Identity service for actix-web framework.                        |\n| [actix-protobuf]     | [![crates.io](https://img.shields.io/crates/v/actix-protobuf?label=latest)](https://crates.io/crates/actix-protobuf) [![Documentation](https://docs.rs/actix-protobuf/badge.svg)](https://docs.rs/actix-protobuf) [![dependency status](https://deps.rs/crate/actix-protobuf/0.6.0/status.svg)](https://deps.rs/crate/actix-protobuf/0.6.0)                         | Protobuf support for actix-web framework.                        |\n| [actix-redis]        | [![crates.io](https://img.shields.io/crates/v/actix-redis?label=latest)](https://crates.io/crates/actix-redis) [![Documentation](https://docs.rs/actix-redis/badge.svg)](https://docs.rs/actix-redis) [![dependency status](https://deps.rs/crate/actix-redis/0.9.1/status.svg)](https://deps.rs/crate/actix-redis/0.9.1)                                           | Redis integration for actix framework.                           |\n| [actix-session]      | [![crates.io](https://img.shields.io/crates/v/actix-session?label=latest)](https://crates.io/crates/actix-session) [![Documentation](https://docs.rs/actix-session/badge.svg)](https://docs.rs/actix-session) [![dependency status](https://deps.rs/crate/actix-session/0.4.0/status.svg)](https://deps.rs/crate/actix-session/0.4.0)                               | Session for actix-web framework.                                 |\n| [actix-web-httpauth] | [![crates.io](https://img.shields.io/crates/v/actix-web-httpauth?label=latest)](https://crates.io/crates/actix-web-httpauth) [![Documentation](https://docs.rs/actix-web-httpauth/badge.svg)](https://docs.rs/actix-web-httpauth) [![dependency status](https://deps.rs/crate/actix-web-httpauth/0.5.0/status.svg)](https://deps.rs/crate/actix-web-httpauth/0.5.0) | HTTP authentication schemes for actix-web.                       |\n\n---\n\n## Community Crates\n\nThese crates are provided by the community.\n\n| Crate                    |                                                                                                                                                                                                                                                                                                                                                                                             |                                                                                     |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |\n| [actix-limitation]       | [![crates.io](https://img.shields.io/crates/v/actix-limitation?label=latest)](https://crates.io/crates/actix-limitation) [![Documentation](https://docs.rs/actix-limitation/badge.svg)](https://docs.rs/actix-limitation) [![dependency status](https://deps.rs/crate/actix-limitation/0.1.4/status.svg)](https://deps.rs/crate/actix-limitation/0.1.4)                                     | Rate limiting using a fixed window counter for arbitrary keys, backed by Redis.     |\n| [actix-casbin]           | [![crates.io](https://img.shields.io/crates/v/actix-casbin?label=latest)](https://crates.io/crates/actix-casbin) [![Documentation](https://docs.rs/actix-casbin/badge.svg)](https://docs.rs/actix-casbin) [![dependency status](https://deps.rs/crate/actix-casbin/0.4.2/status.svg)](https://deps.rs/crate/actix-casbin/0.4.2)                                                             | An authorization library that supports access control models like ACL, RBAC & ABAC. |\n| [actix-web-static-files] | [![crates.io](https://img.shields.io/crates/v/actix-web-static-files?label=latest)](https://crates.io/crates/actix-web-static-files) [![Documentation](https://docs.rs/actix-web-static-files/badge.svg)](https://docs.rs/actix-web-static-files) [![dependency status](https://deps.rs/crate/actix-web-static-files/3.0.1/status.svg)](https://deps.rs/crate/actix-web-static-files/3.0.1) | Static files as embedded resources.                                                 |\n\nTo add a crate to this list, submit a pull request.\n\n<!-- REFERENCES -->\n\n[actix]: https://github.com/actix/actix\n[actix-web]: https://github.com/actix/actix-web\n[actix-extras]: https://github.com/actix/actix-extras\n[actix-cors]: actix-cors\n[actix-identity]: actix-identity\n[actix-protobuf]: actix-protobuf\n[actix-redis]: actix-redis\n[actix-session]: actix-session\n[actix-web-httpauth]: actix-web-httpauth\n[actix-limitation]: https://crates.io/crates/actix-limitation\n[actix-casbin]: https://github.com/casbin-rs/actix-casbin\n[actix-web-static-files]: https://github.com/kilork/actix-web-static-files\n", "release_dates": []}, {"name": "alertexer", "description": null, "language": "Rust", "license": null, "readme": "# Alertexer\n\nAn indexer toolset to empower the Alerts Feature in DevConsole.\n\n[**Please, refer to the Docs to find the Concept descriptions for main parts of the toolset**](./docs)\n\n## Structure\n\nThis project is using `workspace` feature of Cargo.\n\n### Crates\n\n- [`alert-rules`](./alert-rules) crate provides the `AlertRule` type for usage in other crates\n- [`shared`](./shared) crate holds the common `clap` structs for every indexer in the workspace. Also, it includes shared types and utils.\n- [`storage`](./storage) crate provides the functions to work with Redis that are common for all indexers in the workspace\n\n### Indexers\n\n- [`alertexer`](./alertexer) an indexer to watch for `AlertRules`\n- *deprecated* [`tx-alertexer`](./tx-alertexer) (excluded from the workspace) an indexer that watches for entire transaction and collects all the stuff related to the transaction.\n\n### External-ish stuff\n\nClosely related to the project but excluded from the workspace for different reasons crates.\n\n- [`queue-handler-alertexer`](./queue-handler-alertexer) is an AWS lambda function (Rust-lang) that listens to the events in main AWS SQS queue for alertexer. Interacts with the DevConsole DB to get data about the `AlertRule` and stores info about triggered events, passed the triggered event to the relevant queue based on the delivery channel.\n- [`webhook-queue-handler`](./webhook-queue-handler) is an AWS lambda function (Rust-lang) that listens to the events in the dedicated AWS SQS queue for webhooks. Interacts with the DB to store an information about the webhook is sent and what was the response (in order to simplify the webhook debugging)\n- [`telegram-queue-handler`](./telegram-queue-handler) is an AWS lambda function (Rust-lang) that listens to the events in the dedicated AWS SQS queue for Telegram. Interacts with the DevConsole DB to get the `AlertRule`'s name in order to create a Telegram message\n  > \"Alert {name} triggered. See {link to NEAR Explorer} for details\"\n  Also, stores an information about the message has been sent to the Telegram.\n\n## Design concept\n\nIdentified major types of the events on the network:\n\n- `ACTIONS` - following the `ActionReceipts` (party of the transaction, transfer, create account, etc.)\n- `EVENTS` - following the [Events Format](https://nomicon.io/Standards/EventsFormat)\n- `STATE_CHANGES` *name is a subject to change* - following the `StateChanges` (account state change, stake rewards, account balances changes, etc.)\n\n## `.env`\n\n```\nDATABASE_URL=postgres://user:pass@host/database\nLAKE_AWS_ACCESS_KEY=AKI_LAKE_ACCESS...\nLAKE_AWS_SECRET_ACCESS_KEY=LAKE_SECRET...\nQUEUE_AWS_ACCESS_KEY=AKI_SQS_ACCESS...\nQUEUE_AWS_SECRET_ACCESS_KEY=SQS_ACCESS_SECRET\nQUEUE_URL=https://sqs.eu-central-1.amazonaws.com/754641474505/alertexer-queue\n\n```\n## Running locally\n * _Install postgres locally if not already present._\n * Create a local postgres database and user like so, changing the credentials to your liking:\n```\npsql \nCREATE DATABASE alerts;\nCREATE USER alerts WITH PASSWORD 'alerts';\nGRANT ALL PRIVILEGES ON DATABASE alerts TO alerts;\n```\n * Update the `.env` file with the database credentials you just set. `host.docker.internal` as the hostname will point to your local host machine. \n * Run [schema.sql](./alert-rules/schema.sql) against your alerts DB to create the alert rules tables.\n * Grant table privileges to the DB user\n```\npsql\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO alerts;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO alerts;\n```\n * _Install docker locally if not already present._\n * Run `docker compose up`\n", "release_dates": []}, {"name": "all-contributors", "description": "Highlighting all contributors to NEAR Protocol and the NEAR ecosystem", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Contributors\nHighlighting all contributors to NEAR Protocol and the NEAR ecosystem\n\n", "release_dates": []}, {"name": "app-near", "description": "NEAR app for Ledger Nano S", "language": "C", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR Ledger App Docker\n\nBased on https://github.com/ZondaX/ledger-docker-bolos (MIT license) and https://github.com/LedgerHQ/ledger-app-waves (MIT license).\n\n## Requirements\n\n* Docker installed\n* Python 3 installed\n* A Ledger Nano\n\n## Steps to get this to work\n\n1. Plug in the Ledger and set up following the on-screen instructions.\n2. Copy the Ledger Nano SDK into `workdir/` (you can find it here: https://github.com/LedgerHQ/nanos-secure-sdk)\n3. Link `BOLOS_SDK` env variable to the folder that you just copied. For instance, if this repo is in your $HOME dir, you would use:\n  \n   ```bash\n   export BOLOS_SDK=$HOME/app-near/workdir/nanos-secure-sdk\n   ```\n\n4. Run `./build.sh`. You may have to log into Docker.\n5. `./run.sh` \u2013 this starts shell in Docker.\n6. `cd` into `workdir/app-near` (in Docker) \n7. Run `make` (in Docker).\n8. `cd` into `workdir/app-near` (in local env) \n9. Create virtual environment to use python3 and install dependencies (install `pip` - install it via `brew`):\n\n   ```bash\n   pip install virtualenv\n   virtualenv .env --python=python3\n   . .env/bin/activate\n   ```\n\n10. Run `pip install ledgerblue`\n11. On Ledger open \"Install app\". Do NOT open Ledger Live when it asks you to.\n12. Run `make load-only` with the ledger app plugged in.\n13. Accept the \"insecure\" app onto your ledger (!) by clicking through the prompts.\nIf you get an error, you may need to also set the following env var:\n  \n  ```bash\n  export SCP_PRIVKEY=\"\"\n  ```\n\n  And then run the make command again.\n\n## How to debug with GDB\nYou can debug this app in Speculos emulator. Follow [this](https://ledger.readthedocs.io/en/latest/userspace/speculos.html) guide to setup it.\n\nAdd breakpoints in GDB interface or modify `speculos/tools/debug.sh` to make them permanent between GDB sessions.\n\nExample:\n- `b handle_apdu`\n\nIt is useful to monitor the end of the stack area with watchpoints\n- `watch *((volatile uint32_t *)&_stack)`\n", "release_dates": []}, {"name": "as-base58", "description": "Encode and Decode base58 strings in AssemblyScript", "language": "WebAssembly", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# as-base58\nBase58 encoder / decoder for AssemblyScript.\n\nSpecial thanks to https://github.com/cryptocoinjs/base-x for the javascript version.\n\n\n# Usage\n\n```ts\nimport { encode, decode } from \"as-base58\";\n\nconst input = \"ABCD1234\"\n\nassert(input = enocde(decode(\"ABCD1234\"));\n```\n", "release_dates": []}, {"name": "as-base64", "description": "Encode and Decode base64 strings in AssemblyScript", "language": "WebAssembly", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# as-base64\nBase64 encoder / decoder for AssemblyScript.\n\nAdapted from https://gist.github.com/Juszczak/63e6d9e01decc850de03\n\n\n# Usage\n\n```ts\nimport { encode, decode } from \"as-base64\";\n\nconst input = \"c29tZSBzdHJpbmc=\";\n\nassert(input = enocde(decode(input));\n```\n", "release_dates": []}, {"name": "assemblyscript-json", "description": "JSON encoder / decoder for AssemblyScript", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# assemblyscript-json\n\n![npm version](https://img.shields.io/npm/v/assemblyscript-json) ![npm downloads per month](https://img.shields.io/npm/dm/assemblyscript-json)\n\nJSON encoder / decoder for AssemblyScript.\n\nSpecial thanks to https://github.com/MaxGraey/bignum.wasm for basic unit testing infra for AssemblyScript.\n\n## Installation\n\n`assemblyscript-json` is available as a [npm package](https://www.npmjs.com/package/assemblyscript-json). You can install `assemblyscript-json` in your AssemblyScript project by running:\n\n`npm install --save assemblyscript-json`\n\n## Usage\n\n### Parsing JSON\n\n```typescript\nimport { JSON } from \"assemblyscript-json\"; \n\n// Parse an object using the JSON object\nlet jsonObj: JSON.Obj = <JSON.Obj>(JSON.parse('{\"hello\": \"world\", \"value\": 24}'));\n\n// We can then use the .getX functions to read from the object if you know it's type\n// This will return the appropriate JSON.X value if the key exists, or null if the key does not exist\nlet worldOrNull: JSON.Str | null = jsonObj.getString(\"hello\"); // This will return a JSON.Str or null\nif (worldOrNull != null) {\n  // use .valueOf() to turn the high level JSON.Str type into a string\n  let world: string = worldOrNull.valueOf();\n}\n\nlet numOrNull: JSON.Num | null = jsonObj.getNum(\"value\");\nif (numOrNull != null) {\n  // use .valueOf() to turn the high level JSON.Num type into a f64\n  let value: f64 = numOrNull.valueOf();\n}\n\n// If you don't know the value type, get the parent JSON.Value\nlet valueOrNull: JSON.Value | null = jsonObj.getValue(\"hello\");\n  if (valueOrNull != null) {\n  let value = <JSON.Value>valueOrNull;\n\n  // Next we could figure out what type we are\n  if(value.isString) { \n    // value.isString would be true, so we can cast to a string\n    let innerString = (<JSON.Str>value).valueOf();\n    let jsonString = (<JSON.Str>value).stringify();\n\n    // Do something with string value\n  }\n}\n```\n\n### Encoding JSON\n\n\n```typescript\nimport { JSONEncoder } from \"assemblyscript-json\";\n\n// Create encoder\nlet encoder = new JSONEncoder();\n\n// Construct necessary object\nencoder.pushObject(\"obj\");\nencoder.setInteger(\"int\", 10);\nencoder.setString(\"str\", \"\");\nencoder.popObject();\n\n// Get serialized data\nlet json: Uint8Array = encoder.serialize();\n\n// Or get serialized data as string\nlet jsonString: string = encoder.stringify();\n\nassert(jsonString, '\"obj\": {\"int\": 10, \"str\": \"\"}'); // True!\n```\n\n### Custom JSON Deserializers\n\n```typescript\nimport { JSONDecoder, JSONHandler } from \"assemblyscript-json\";\n\n// Events need to be received by custom object extending JSONHandler.\n// NOTE: All methods are optional to implement.\nclass MyJSONEventsHandler extends JSONHandler {\n  setString(name: string, value: string): void {\n    // Handle field\n  }\n\n  setBoolean(name: string, value: bool): void {\n    // Handle field\n  }\n\n  setNull(name: string): void {\n    // Handle field\n  }\n\n  setInteger(name: string, value: i64): void {\n    // Handle field\n  }\n\n  setFloat(name: string, value: f64): void {\n    // Handle field\n  }\n\n  pushArray(name: string): bool {\n    // Handle array start\n    // true means that nested object needs to be traversed, false otherwise\n    // Note that returning false means JSONDecoder.startIndex need to be updated by handler\n    return true;\n  }\n\n  popArray(): void {\n    // Handle array end\n  }\n\n  pushObject(name: string): bool {\n    // Handle object start\n    // true means that nested object needs to be traversed, false otherwise\n    // Note that returning false means JSONDecoder.startIndex need to be updated by handler\n    return true;\n  }\n\n  popObject(): void {\n    // Handle object end\n  }\n}\n\n// Create decoder\nlet decoder = new JSONDecoder<MyJSONEventsHandler>(new MyJSONEventsHandler());\n\n// Create a byte buffer of our JSON. NOTE: Deserializers work on UTF8 string buffers.\nlet jsonString = '{\"hello\": \"world\"}';\nlet jsonBuffer = Uint8Array.wrap(String.UTF8.encode(jsonString));\n\n// Parse JSON\ndecoder.deserialize(jsonBuffer); // This will send events to MyJSONEventsHandler\n```\n\nFeel free to look through the [tests](https://github.com/nearprotocol/assemblyscript-json/tree/master/assembly/__tests__) for more usage examples.\n\n## Reference Documentation\n\nReference API Documentation can be found in the [docs directory](./docs).\n\n## License\n\n[MIT](./LICENSE)\n", "release_dates": []}, {"name": "awesome-near", "description": "Curated list of resources: examples, libraries, projects", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Awesome NEAR\n\n> Curated list of resources: examples, libraries, projects.\n\n## Getting Started\nNEAR basic resources:\n* [NEAR Key Concepts](https://docs.near.org/concepts/welcome)\n* [NEAR Dev Documentation](https://docs.near.org/)\n* [NEAR Explorer](https://explorer.near.org/)\n\nSetup a local development environment in one step:\n* [create-near-app](https://github.com/near/create-near-app)\n\n## Examples\n\n### Rust Examples\n\n* [Fungible token contract](https://github.com/near/near-sdk-rs/tree/master/examples/fungible-token)\n* [Cross contract interaction](https://github.com/near-examples/rust-high-level-cross-contract)\n* [Status message posting contract](https://github.com/near-examples/rust-status-message)\n* [Send NEAR via link contract](https://github.com/near/near-linkdrop)\n\n### AssemblyScript Examples\nRepo|Gitpod\n---|---\n[Token Contract](https://github.com/near-examples/token-contract-as)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/token-contract-as)\n[Counter](https://github.com/near-examples/counter)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/counter)\n[Guest Book](https://github.com/near-examples/guest-book) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/guest-book)\n[Wallet Example](https://github.com/near-examples/wallet-example)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/wallet-example)\n[Crypto Corgis](https://github.com/nearprotocol/corgis) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nearprotocol/corgis) |\n[Chess](https://github.com/nearprotocol/near-chess)|[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nearprotocol/near-chess)\n[Chat](https://github.com/near-examples/chat) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/chat)\n\n### Rust Examples\nRepo|Gitpod\n---|---\n[Status Message](https://github.com/near-examples/rust-status-message)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/rust-status-message)\n[Fungible Token Contract](https://github.com/near-examples/rust-fungible-token)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/rust-fungible-token)\n[Proof of Work Faucet](https://github.com/near-examples/pow-faucet)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/pow-faucet)\n[Proof of Work Transfer Faucet](https://github.com/near-examples/token-printer)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/token-printer)\n[High-level cross contract calls](https://github.com/near-examples/rust-high-level-cross-contract)| [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/rust-high-level-cross-contract)\n\n### Integrations and Off-chain Services\n\n* [Wallet backend](https://github.com/near/near-contract-helper)\n* [Explorer backend](https://github.com/near/near-explorer/tree/master/backend)\n* [Bridge relay service](https://github.com/near/rainbow-bridge-lib/tree/master/near2eth-relay)\n\n## Projects\n\nProjects that are actively building on NEAR:\n* [Flux](http://flux.market/)\n* [Snark Art](http://snark.art/)\n* [Zod](https://www.zod.tv/)\n* [ARterra](http://arterra.co/)\n", "release_dates": []}, {"name": "balancer-core", "description": "Balancer on the EVM", "language": "Solidity", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "<p align=center>\n<img width=\"128px\" src=\"https://balancer-labs.github.io/pebbles/images/pebbles-pad.256w.png\" alt=\"balancer pebbles logo\"/>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://circleci.com/gh/balancer-labs/balancer-core\">\n    <img src=\"https://circleci.com/gh/balancer-labs/balancer-core.svg?style=svg&circle-token=2f432d0cf2690bec7f215a7738bd1142b97bd9b4\" />\n  </a>\n  <a href=\"https://coveralls.io/github/balancer-labs/balancer-core\">\n    <img src=\"https://coveralls.io/repos/github/balancer-labs/balancer-core/badge.svg?t=7avwwt\" />\n  </a>\n  <a href=\"https://www.gnu.org/licenses/gpl-3.0\">\n    <img src=\"https://img.shields.io/badge/License-GPLv3-green.svg\" />\n  </a>\n</p>\n\n<h1 align=center><code>balancer</code></h1>\n\n**Balancer** is an automated **portfolio manager**, **liquidity provider**, and **price sensor**.\n\nBalancer turns the concept of an index fund on its head: instead of a paying fees\nto portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance\nyour portfolio by following arbitrage opportunities.\n\nBalancer is based on an N-dimensional invariant surface which is a generalization of the constant product formula described by Vitalik Buterin and proven viable by the popular Uniswap dapp.\n\n## \ud83c\udf42 Bronze Release \ud83c\udf42\n\nThe *\ud83c\udf42Bronze Release\ud83c\udf42*  is the first of 3 planned releases of the Balancer Protocol. Bronze emphasizes code clarity for audit and verification, and does not go to great lengths to optimize for gas.\n\nThe *\u2744\ufe0fSilver Release\u2744\ufe0f* will bring many gas optimizations and architecture changes that will reduce transaction overhead and enable more flexibility for managed pools.\n\nThe *\u2600\ufe0fGolden Release\u2600\ufe0f* will introduce a curious new liquidity mechanism to the market.\n\n## Documentation\n\nThe full documentation can be found at [https://docs.balancer.finance](https://docs.balancer.finance)\n\n\n## Development\n\nMost users will want to consume the ABI definitions for BFactory and BPool.\n\nThis project follows the standard Truffle project structure. \n\n```\nyarn compile   # build artifacts to `build/contracts`\nyarn testrpc # run ganache\nyarn test    # run the tests\n```\n\nTests can be run verbosely to view approximation diffs:\n\n```\nyarn test:verbose\n```\n\n```\n  Contract: BPool\n    With fees\npAi\nexpected: 10.891089108910892)\nactual  : 10.891089106783580001)\nrelDif  : 1.9532588879656032e-10)\nPool Balance\nexpected: 98010000000000030000)\nactual  : 98010000001320543977)\nrelDif  : 1.3473294888276702e-11)\nDirt Balance\nexpected: 3921200210105053000)\nactual  : 3921200210099248361)\nrelDif  : 1.480428360949332e-12)\nRock Balance\nexpected: 11763600630315160000)\nactual  : 11763600630334527239)\nrelDif  : 1.6464292361378058e-12)\n      \u2713 exitswap_ExternAmountOut (537ms)\n```\n\nComplete API docs are available at [https://docs.balancer.finance/smart-contracts/api](https://docs.balancer.finance/smart-contracts/api)\n\n---\n\n## NEAR Protocol\n\nBalancer's Solidity contracts also work on the NEAR EVM. Visit https://near.org for details on the technology. At the time of this writing the EVM is live on betanet, so the directions will be targeted there.\n\n### Get NEAR betanet account\n\nVisit the betanet NEAR Wallet:\nhttp://wallet.betanet.near.org/\n\nFollow the instructions to create an account.\n\n### Login with NEAR CLI\n\nNext we'll use NEAR CLI to login, which creates a full-access key as a file in your computer's `~/.near-credentials` directory.\n\nSee the [NEAR CLI documentation](https://docs.near.org/docs/development/near-cli) for specifics, but it can be installed with:\n\n    npm install -g near-cli\n\nAfter it's installed, run:\n\n    env NEAR_ENV=betanet near login\n    \nYou'll be redirected to Wallet. Please follow the directions on Wallet and return to your terminal application.\n\n### Create test accounts\n\nTruffle test on ethereum create accounts, but NEAR account is not just a key and need creating separately before run tests:\n\n    env NEAR_ENV=betanet near evm-dev-init MY_NAME.betanet 10\n\n### Build and deploy with Truffle\n\nTruffle's configuration contains the custom provider from [near-web3-provider](https://github.com/near/near-web3-provider). \n\nReplace `MY_NAME` below with the name of your account, and run:\n\n    env NEAR_MASTER_ACCOUNT=MY_NAME.betanet truffle migrate --network near_betanet    \n\n### Run tests\n\nRunning tests is the same as standard Truffle commands. For instance, to run tests on betanet the command is:\n\n    env NEAR_MASTER_ACCOUNT=MY_NAME.betanet truffle test --network near_betanet    \n    \nExpect the result:\n\n>87 passing\n\n<p align=center>\u2299</p>\n", "release_dates": []}, {"name": "binaryen", "description": "Compiler infrastructure and toolchain library for WebAssembly", "language": "WebAssembly", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![CI](https://github.com/WebAssembly/binaryen/workflows/CI/badge.svg?branch=main&event=push)](https://github.com/WebAssembly/binaryen/actions?query=workflow%3ACI)\n\n# Binaryen\n\nBinaryen is a compiler and toolchain infrastructure library for WebAssembly,\nwritten in C++. It aims to make [compiling to WebAssembly] **easy, fast, and\neffective**:\n\n * **Easy**: Binaryen has a simple [C API] in a single header, and can also be\n   [used from JavaScript][JS_API]. It accepts input in [WebAssembly-like\n   form][compile_to_wasm] but also accepts a general [control flow graph] for\n   compilers that prefer that.\n\n * **Fast**: Binaryen's internal IR uses compact data structures and is designed\n   for completely parallel codegen and optimization, using all available CPU\n   cores. Binaryen's IR also compiles down to WebAssembly extremely easily and\n   quickly because it is essentially a subset of WebAssembly.\n\n * **Effective**: Binaryen's optimizer has many passes (see an overview later\n   down) that can improve code size and speed. These optimizations aim to make\n   Binaryen powerful enough to be used as a [compiler backend][backend] by\n   itself.  One specific area of focus is on WebAssembly-specific optimizations\n   (that general-purpose compilers might not do), which you can think of as\n   wasm [minification], similar to minification for JavaScript, CSS, etc., all\n   of which are language-specific.\n\nCompilers using Binaryen include:\n\n * [`AssemblyScript`](https://github.com/AssemblyScript/assemblyscript) which compiles a variant of TypeScript to WebAssembly\n * [`wasm2js`](https://github.com/WebAssembly/binaryen/blob/main/src/wasm2js.h) which compiles WebAssembly to JS\n * [`Asterius`](https://github.com/tweag/asterius) which compiles Haskell to WebAssembly\n * [`Grain`](https://github.com/grain-lang/grain) which compiles Grain to WebAssembly\n\nBinaryen also provides a set of **toolchain utilities** that can\n\n * **Parse** and **emit** WebAssembly. In particular this lets you load\n   WebAssembly, optimize it using Binaryen, and re-emit it, thus implementing a\n   wasm-to-wasm optimizer in a single command.\n * **Interpret** WebAssembly as well as run the WebAssembly spec tests.\n * Integrate with **[Emscripten](http://emscripten.org)** in order to provide a\n   complete compiler toolchain from C and C++ to WebAssembly.\n * **Polyfill** WebAssembly by running it in the interpreter compiled to\n   JavaScript, if the browser does not yet have native support (useful for\n   testing).\n\nConsult the [contributing instructions](Contributing.md) if you're interested in\nparticipating.\n\n## Binaryen IR\n\nBinaryen's internal IR is designed to be\n\n * **Flexible and fast** for optimization.\n * **As close as possible to WebAssembly** so it is simple and fast to convert\n   it to and from WebAssembly.\n\nThere are a few differences between Binaryen IR and the WebAssembly language:\n\n * Tree structure\n   * Binaryen IR [is a tree][binaryen_ir], i.e., it has hierarchical structure,\n     for convenience of optimization. This differs from the WebAssembly binary\n     format which is a stack machine.\n   * Consequently Binaryen's text format allows only s-expressions.\n     WebAssembly's official text format is primarily a linear instruction list\n     (with s-expression extensions). Binaryen can't read the linear style, but\n     it can read a wasm text file if it contains only s-expressions.\n   * Binaryen uses Stack IR to optimize \"stacky\" code (that can't be\n     represented in structured form).\n   * When stacky code must be represented in Binaryen IR, such as with\n     multivalue instructions and blocks, it is represented with tuple types that\n     do not exist in the WebAssembly language. In addition to multivalue\n     instructions, locals and globals can also have tuple types in Binaryen IR\n     but not in WebAssembly. Experiments show that better support for\n     multivalue could enable useful but small code size savings of 1-3%, so it\n     has not been worth changing the core IR structure to support it better.\n   * Block input values (currently only supported in `catch` blocks in the\n     exception handling feature) are represented as `pop` subexpressions.\n * Types and unreachable code\n   * WebAssembly limits block/if/loop types to none and the concrete value types\n     (i32, i64, f32, f64). Binaryen IR has an unreachable type, and it allows\n     block/if/loop to take it, allowing [local transforms that don't need to\n     know the global context][unreachable]. As a result, Binaryen's default\n     text output is not necessarily valid wasm text. (To get valid wasm text,\n     you can do `--generate-stack-ir --print-stack-ir`, which prints Stack IR,\n     this is guaranteed to be valid for wasm parsers.)\n   * Binaryen ignores unreachable code when reading WebAssembly binaries. That\n     means that if you read a wasm file with unreachable code, that code will be\n     discarded as if it were optimized out (often this is what you want anyhow,\n     and optimized programs have no unreachable code anyway, but if you write an\n     unoptimized file and then read it, it may look different). The reason for\n     this behavior is that unreachable code in WebAssembly has corner cases that\n     are tricky to handle in Binaryen IR (it can be very unstructured, and\n     Binaryen IR is more structured than WebAssembly as noted earlier). Note\n     that Binaryen does support unreachable code in .wat text files, since as we\n     saw Binaryen only supports s-expressions there, which are structured.\n * Blocks\n   * Binaryen IR has only one node that contains a variable-length list of\n     operands: the block. WebAssembly on the other hand allows lists in loops,\n     if arms, and the top level of a function. Binaryen's IR has a single\n     operand for all non-block nodes; this operand may of course be a block.\n     The motivation for this property is that many passes need special code\n     for iterating on lists, so having a single IR node with a list simplifies\n     them.\n   * As in wasm, blocks and loops may have names. Branch targets in the IR are\n     resolved by name (as opposed to nesting depth). This has 2 consequences:\n     * Blocks without names may not be branch targets.\n     * Names are required to be unique. (Reading .wat files with duplicate names\n       is supported; the names are modified when the IR is constructed).\n   * As an optimization, a block that is the child of a loop (or if arm, or\n     function toplevel) and which has no branches targeting it will not be\n     emitted when generating wasm. Instead its list of operands will be directly\n     used in the containing node. Such a block is sometimes called an \"implicit\n     block\".\n * Reference Types\n  * The wasm text and binary formats require that a function whose address is\n    taken by `ref.func` must be either in the table, or declared via an\n    `(elem declare func $..)`. Binaryen will emit that data when necessary, but\n    it does not represent it in IR. That is, IR can be worked on without needing\n    to think about declaring function references.\n\nAs a result, you might notice that round-trip conversions (wasm => Binaryen IR\n=> wasm) change code a little in some corner cases.\n\n * When optimizing Binaryen uses an additional IR, Stack IR (see\n   `src/wasm-stack.h`). Stack IR allows a bunch of optimizations that are\n   tailored for the stack machine form of WebAssembly's binary format (but Stack\n   IR is less efficient for general optimizations than the main Binaryen IR). If\n   you have a wasm file that has been particularly well-optimized, a simple\n   round-trip conversion (just read and write, without optimization) may cause\n   more noticeable differences, as Binaryen fits it into Binaryen IR's more\n   structured format. If you also optimize during the round-trip conversion then\n   Stack IR opts will be run and the final wasm will be better optimized.\n\nNotes when working with Binaryen IR:\n\n * As mentioned above, Binaryen IR has a tree structure. As a result, each\n   expression should have exactly one parent - you should not \"reuse\" a node by\n   having it appear more than once in the tree. The motivation for this\n   limitation is that when we optimize we modify nodes, so if they appear more\n   than once in the tree, a change in one place can appear in another\n   incorrectly.\n * For similar reasons, nodes should not appear in more than one functions.\n\n### Intrinsics\n\nBinaryen intrinsic functions look like calls to imports, e.g.,\n\n```wat\n(import \"binaryen-intrinsics\" \"foo\" (func $foo))\n```\n\nImplementing them that way allows them to be read and written by other tools,\nand it avoids confusing errors on a binary format error that could happen in\nthose tools if we had a custom binary format extension.\n\nAn intrinsic method may be optimized away by the optimizer. If it is not, it\nmust be **lowered** before shipping the wasm, as otherwise it will look like a\ncall to an import that does not exist (and VMs will show an error on not having\na proper value for that import). That final lowering is *not* done\nautomatically. A user of intrinsics must run the pass for that explicitly,\nbecause the tools do not know when the user intends to finish optimizing, as the\nuser may have a pipeline of multiple optimization steps, or may be doing local\nexperimentation, or fuzzing/reducing, etc. Only the user knows when the final\noptimization happens before the wasm is \"final\" and ready to be shipped. Note\nthat, in general, some additional optimizations may be possible after the final\nlowering, and so a useful pattern is to  optimize once normally with intrinsics,\nthen lower them away, then optimize after that, e.g.:\n\n```\nwasm-opt input.wasm -o output.wasm  -O --intrinsic-lowering -O\n```\n\nEach intrinsic defines its semantics, which includes what the optimizer is\nallowed to do with it and what the final lowering will turn it to. See\n[intrinsics.h](https://github.com/WebAssembly/binaryen/blob/main/src/ir/intrinsics.h)\nfor the detailed definitions. A quick summary appears here:\n\n* `call.without.effects`: Similar to a `call_ref` in that it receives\n  parameters, and a reference to a function to call, and calls that function\n  with those parameters, except that the optimizer can assume the call has no\n  side effects, and may be able to optimize it out (if it does not have a\n  result that is used, generally).\n\n## Tools\n\nThis repository contains code that builds the following tools in `bin/`:\n\n * **wasm-opt**: Loads WebAssembly and runs Binaryen IR passes on it.\n * **wasm-as**: Assembles WebAssembly in text format (currently S-Expression\n   format) into binary format (going through Binaryen IR).\n * **wasm-dis**: Un-assembles WebAssembly in binary format into text format\n   (going through Binaryen IR).\n * **wasm2js**: A WebAssembly-to-JS compiler. This is used by Emscripten to\n   generate JavaScript as an alternative to WebAssembly.\n * **wasm-reduce**: A testcase reducer for WebAssembly files. Given a wasm file\n   that is interesting for some reason (say, it crashes a specific VM),\n   wasm-reduce can find a smaller wasm file that has the same property, which is\n   often easier to debug. See the\n   [docs](https://github.com/WebAssembly/binaryen/wiki/Fuzzing#reducing)\n   for more details.\n * **wasm-shell**: A shell that can load and interpret WebAssembly code. It can\n   also run the spec test suite.\n * **wasm-emscripten-finalize**: Takes a wasm binary produced by llvm+lld and\n   performs emscripten-specific passes over it.\n * **wasm-ctor-eval**: A tool that can execute C++ global constructors ahead of\n   time. Used by Emscripten.\n * **binaryen.js**: A standalone JavaScript library that exposes Binaryen methods for [creating and optimizing WASM modules](https://github.com/WebAssembly/binaryen/blob/main/test/binaryen.js/hello-world.js). For builds, see [binaryen.js on npm](https://www.npmjs.com/package/binaryen) (or download it directly from [github](https://raw.githubusercontent.com/AssemblyScript/binaryen.js/master/index.js), [rawgit](https://cdn.rawgit.com/AssemblyScript/binaryen.js/master/index.js), or [unpkg](https://unpkg.com/binaryen@latest/index.js)).\n\nUsage instructions for each are below.\n\n## Binaryen Optimizations\n\nBinaryen contains\n[a lot of optimization passes](https://github.com/WebAssembly/binaryen/tree/main/src/passes)\nto make WebAssembly smaller and faster. You can run the Binaryen optimizer by\nusing ``wasm-opt``, but also they can be run while using other tools, like\n``wasm2js`` and ``wasm-metadce``.\n\n* The default optimization pipeline is set up by functions like\n  [`addDefaultFunctionOptimizationPasses`](https://github.com/WebAssembly/binaryen/blob/369b8bdd3d9d49e4d9e0edf62e14881c14d9e352/src/passes/pass.cpp#L396).\n* There are various\n  [pass options](https://github.com/WebAssembly/binaryen/blob/369b8bdd3d9d49e4d9e0edf62e14881c14d9e352/src/pass.h#L85)\n  that you can set, to adjust the optimization and shrink levels, whether to\n  ignore unlikely traps, inlining heuristics, fast-math, and so forth. See\n  ``wasm-opt --help`` for how to set them and other details.\n\nSee each optimization pass for details of what it does, but here is a quick\noverview of some of the relevant ones:\n\n* **CoalesceLocals** - Key \u201cregister allocation\u201d pass. Does a live range\n  analysis and then reuses locals in order to minimize their number, as well as\n  to remove copies between them.\n* **CodeFolding** - Avoids duplicate code by merging it (e.g. if two `if` arms\n  have some shared instructions at their end).\n* **CodePushing** - \u201cPushes\u201d code forward past branch operations, potentially\n  allowing the code to not be run if the branch is taken.\n* **DeadArgumentElimination** - LTO pass to remove arguments to a function if it\n  is always called with the same constants.\n* **DeadCodeElimination**\n* **Directize** - Turn an indirect call into a normal call, when the table index\n  is constant.\n* **DuplicateFunctionElimination** - LTO pass.\n* **Inlining** - LTO pass.\n* **LocalCSE** - Simple local common subexpression elimination.\n* **LoopInvariantCodeMotion**\n* **MemoryPacking** - Key \"optimize data segments\" pass that combines segments,\n  removes unneeded parts, etc.\n* **MergeBlocks** - Merge a `block` to an outer one where possible, reducing\n  their number.\n* **MergeLocals** - When two locals have the same value in part of their\n  overlap, pick in a way to help CoalesceLocals do better later (split off from\n  CoalesceLocals to keep the latter simple).\n* **MinifyImportsAndExports** - Minifies them to \u201ca\u201d, \u201cb\u201d, etc.\n* **OptimizeAddedConstants** - Optimize a load/store with an added constant into\n  a constant offset.\n* **OptimizeInstructions** - Key peephole optimization pass with a constantly\n  increasing list of patterns.\n* **PickLoadSigns** - Adjust whether a load is signed or unsigned in order to\n  avoid sign/unsign operations later.\n* **Precompute** - Calculates constant expressions at compile time, using the\n  built-in interpreter (which is guaranteed to be able to handle any constant\n  expression).\n* **ReReloop** - Transforms wasm structured control flow to a CFG and then goes\n  back to structured form using the Relooper algorithm, which may find more\n  optimal shapes.\n* **RedundantSetElimination** - Removes a `local.set` of a value that is already\n  present in a local. (Overlaps with CoalesceLocals; this achieves the specific\n  operation just mentioned without all the other work CoalesceLocals does, and\n  therefore is useful in other places in the optimization pipeline.)\n* **RemoveUnsedBrs** - Key \u201cminor control flow optimizations\u201d pass, including\n  jump threading and various transforms that can get rid of a `br` or `br_table`\n  (like turning a `block` with a `br` in the middle into an `if` when possible).\n* **RemoveUnusedModuleElements** - \u201cGlobal DCE\u201d, an LTO pass that removes\n  imports, functions, globals, etc., when they are not used.\n* **ReorderFunctions** - Put more-called functions first, potentially allowing\n  the LEB emitted to call them to be smaller (in a very large program).\n* **ReorderLocals** - Put more-used locals first, potentially allowing the LEB\n  emitted to use them to be smaller (in a very large function). After the\n  sorting, it also removes locals not used at all.\n* **SimplifyGlobals** - Optimizes globals in various ways, for example,\n  coalescing them, removing mutability from a global never modified, applying a\n  constant value from an immutable global, etc.\n* **SimplifyLocals** - Key \u201c`local.get/set/tee`\u201d optimization pass, doing things\n  like replacing a set and a get with moving the set\u2019s value to the get (and\n  creating a tee) where possible. Also creates `block/if/loop` return values\n  instead of using a local to pass the value.\n* **Vacuum** - Key \u201cremove silly unneeded code\u201d pass, doing things like removing\n  an `if` arm that has no contents, a drop of a constant value with no side\n  effects, a `block` with a single child, etc.\n\n\u201cLTO\u201d in the above means an optimization is Link Time Optimization-like in that\nit works across multiple functions, but in a sense Binaryen is always \u201cLTO\u201d as\nit usually is run on the final linked wasm.\n\nAdvanced optimization techniques in the Binaryen optimizer include\n[SSAification](https://github.com/WebAssembly/binaryen/blob/main/src/passes/SSAify.cpp),\n[Flat IR](https://github.com/WebAssembly/binaryen/blob/main/src/ir/flat.h), and\n[Stack/Poppy IR](https://github.com/WebAssembly/binaryen/blob/main/src/ir/stack-utils.h).\n\nBinaryen also contains various passes that do other things than optimizations,\nlike\n[legalization for JavaScript](https://github.com/WebAssembly/binaryen/blob/main/src/passes/LegalizeJSInterface.cpp),\n[Asyncify](https://github.com/WebAssembly/binaryen/blob/main/src/passes/Asyncify.cpp),\netc.\n\n## Building\n\n```\ncmake . && make\n```\n\nA C++14 compiler is required. Note that you can also use `ninja` as your generator: `cmake -G Ninja . && ninja`.\n\nBinaryen.js can be built using Emscripten, which can be installed via [the SDK](http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html)).\n\n```\nemcmake cmake . && emmake make binaryen_js\n```\n\n### Visual C++\n\n1. Using the Microsoft Visual Studio Installer, install the \"Visual C++ tools for CMake\" component.\n\n1. Generate the projects:\n\n   ```\n   mkdir build\n   cd build\n   \"%VISUAL_STUDIO_ROOT%\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\cmake.exe\" ..\n   ```\n\n   Substitute VISUAL_STUDIO_ROOT with the path to your Visual Studio\n   installation. In case you are using the Visual Studio Build Tools, the path\n   will be \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\".\n\n1. From the Developer Command Prompt, build the desired projects:\n\n   ```\n   msbuild binaryen.vcxproj\n   ```\n\n   CMake generates a project named \"ALL_BUILD.vcxproj\" for conveniently building all the projects.\n\n## Running\n\n### wasm-opt\n\nRun\n\n````\nbin/wasm-opt [.wasm or .wat file] [options] [passes, see --help] [--help]\n````\n\nThe wasm optimizer receives WebAssembly as input, and can run transformation\npasses on it, as well as print it (before and/or after the transformations). For\nexample, try\n\n````\nbin/wasm-opt test/passes/lower-if-else.wat --print\n````\n\nThat will pretty-print out one of the test cases in the test suite. To run a\ntransformation pass on it, try\n\n````\nbin/wasm-opt test/passes/lower-if-else.wat --print --lower-if-else\n````\n\nThe `lower-if-else` pass lowers if-else into a block and a break. You can see\nthe change the transformation causes by comparing the output of the two print\ncommands.\n\nIt's easy to add your own transformation passes to the shell, just add `.cpp`\nfiles into `src/passes`, and rebuild the shell. For example code, take a look at\nthe [`lower-if-else` pass](https://github.com/WebAssembly/binaryen/blob/main/src/passes/LowerIfElse.cpp).\n\nSome more notes:\n\n * See `bin/wasm-opt --help` for the full list of options and passes.\n * Passing `--debug` will emit some debugging info.\n\n### wasm2js\n\nRun\n\n```\nbin/wasm2js [input.wasm file]\n```\n\nThis will print out JavaScript to the console.\n\nFor example, try\n\n```\n$ bin/wasm2js test/hello_world.wat\n```\n\nThat output contains\n\n```\n function add(x, y) {\n  x = x | 0;\n  y = y | 0;\n  return x + y | 0 | 0;\n }\n```\n\nas a translation of\n\n```\n (func $add (; 0 ;) (type $0) (param $x i32) (param $y i32) (result i32)\n  (i32.add\n   (local.get $x)\n   (local.get $y)\n  )\n )\n```\n\nwasm2js's output is in ES6 module format - basically, it converts a wasm\nmodule into an ES6 module (to run on older browsers and Node.js versions\nyou can use Babel etc. to convert it to ES5). Let's look at a full example\nof calling that hello world wat; first, create the main JS file:\n\n```javascript\n// main.mjs\nimport { add } from \"./hello_world.mjs\";\nconsole.log('the sum of 1 and 2 is:', add(1, 2));\n```\n\nThe run this (note that you need a new enough Node.js with ES6 module\nsupport):\n\n```shell\n$ bin/wasm2js test/hello_world.wat -o hello_world.mjs\n$ node --experimental-modules main.mjs\nthe sum of 1 and 2 is: 3\n```\n\nThings keep to in mind with wasm2js's output:\n\n * You should run wasm2js with optimizations for release builds, using `-O`\n   or another optimization level. That will optimize along the entire pipeline\n   (wasm and JS). It won't do everything a JS minifer would, though, like\n   minify whitespace, so you should still run a normal JS minifer afterwards.\n * It is not possible to match WebAssembly semantics 100% precisely with fast\n   JavaScript code. For example, every load and store may trap, and to make\n   JavaScript do the same we'd need to add checks everywhere, which would be\n   large and slow. Instead, wasm2js assumes loads and stores do not trap, that\n   int/float conversions do not trap, and so forth. There may also be slight\n   differences in corner cases of conversions, like non-trapping float to int.\n\n## Testing\n\n```\n./check.py\n```\n\n(or `python check.py`) will run `wasm-shell`, `wasm-opt`, etc. on the testcases in `test/`, and verify their outputs.\n\nThe `check.py` script supports some options:\n\n```\n./check.py [--interpreter=/path/to/interpreter] [TEST1] [TEST2]..\n```\n\n * If an interpreter is provided, we run the output through it, checking for\n   parse errors.\n * If tests are provided, we run exactly those. If none are provided, we run\n   them all. To see what tests are available, run `./check.py --list-suites`.\n * Some tests require `emcc` or `nodejs` in the path. They will not run if the\n   tool cannot be found, and you'll see a warning.\n * We have tests from upstream in `tests/spec`, in git submodules. Running\n   `./check.py` should update those.\n\n### Setting up dependencies\n\n```\n./third_party/setup.py [mozjs|v8|wabt|all]\n```\n\n(or `python third_party/setup.py`) installs required dependencies like the SpiderMonkey JS shell, the V8 JS shell\nand WABT in `third_party/`. Other scripts automatically pick these up when installed.\n\nRun `pip3 install -r requirements-dev.txt` to get the requirements for the `lit`\ntests. Note that you need to have the location `pip` installs to in your `$PATH`\n(on linux, `~/.local/bin`).\n\n### Fuzzing\n\n```\n./scripts/fuzz_opt.py [--binaryen-bin=build/bin]\n```\n\n(or `python scripts/fuzz_opt.py`) will run various fuzzing modes on random inputs with random passes until it finds\na possible bug. See [the wiki page](https://github.com/WebAssembly/binaryen/wiki/Fuzzing) for all the details.\n\n## Design Principles\n\n * **Interned strings for names**: It's very convenient to have names on nodes,\n   instead of just numeric indices etc. To avoid most of the performance\n   difference between strings and numeric indices, all strings are interned,\n   which means there is a single copy of each string in memory, string\n   comparisons are just a pointer comparison, etc.\n * **Allocate in arenas**: Based on experience with other\n   optimizing/transformating toolchains, it's not worth the overhead to\n   carefully track memory of individual nodes. Instead, we allocate all elements\n   of a module in an arena, and the entire arena can be freed when the module is\n   no longer needed.\n\n## FAQ\n\n* Why the weird name for the project?\n\n\"Binaryen\" is a combination of **binary** - since WebAssembly is a binary format\nfor the web - and **Emscripten** - with which it can integrate in order to\ncompile C and C++ all the way to WebAssembly, via asm.js. Binaryen began as\nEmscripten's WebAssembly processing library (`wasm-emscripten`).\n\n\"Binaryen\" is pronounced [in the same manner](http://www.makinggameofthrones.com/production-diary/2011/2/11/official-pronunciation-guide-for-game-of-thrones.html) as \"[Targaryen](https://en.wikipedia.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters#House_Targaryen)\": *bi-NAIR-ee-in*. Or something like that? Anyhow, however Targaryen is correctly pronounced, they should rhyme. Aside from pronunciation, the Targaryen house words, \"Fire and Blood\", have also inspired Binaryen's: \"Code and Bugs.\"\n\n* Does it compile under Windows and/or Visual Studio?\n\nYes, it does. Here's a step-by-step [tutorial][win32]  on how to compile it\nunder **Windows 10 x64** with with **CMake** and **Visual Studio 2015**. \nHowever, Visual Studio 2017 may now be required. Help would be appreciated on\nWindows and OS X as most of the core devs are on Linux.\n\n[compiling to WebAssembly]: https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen\n[win32]: https://github.com/brakmic/bazaar/blob/master/webassembly/COMPILING_WIN32.md\n[C API]: https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#c-api-1\n[control flow graph]: https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#cfg-api\n[JS_API]: https://github.com/WebAssembly/binaryen/wiki/binaryen.js-API\n[compile_to_wasm]: https://github.com/WebAssembly/binaryen/wiki/Compiling-to-WebAssembly-with-Binaryen#what-do-i-need-to-have-in-order-to-use-binaryen-to-compile-to-webassembly\n[backend]: https://kripken.github.io/talks/binaryen.html#/9\n[minification]: https://kripken.github.io/talks/binaryen.html#/2\n[unreachable]: https://github.com/WebAssembly/binaryen/issues/903\n[binaryen_ir]: https://github.com/WebAssembly/binaryen/issues/663\n", "release_dates": ["2023-02-03T07:23:32Z", "2023-02-03T06:48:09Z", "2023-02-03T05:09:56Z", "2023-02-02T09:14:13Z", "2022-07-22T14:32:30Z"]}, {"name": "bn", "description": "Pairing cryptography library in Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# bn [![Crates.io](https://img.shields.io/crates/v/bn.svg)](https://crates.io/crates/bn) [![Build status](https://api.travis-ci.org/zcash/bn.svg)](https://travis-ci.org/zcash/bn)\n\nThis is a [pairing cryptography](https://en.wikipedia.org/wiki/Pairing-based_cryptography) library written in pure Rust. It makes use of the Barreto-Naehrig (BN) curve construction from [[BCTV2015]](https://eprint.iacr.org/2013/879.pdf) to provide two cyclic groups **G<sub>1</sub>** and **G<sub>2</sub>**, with an efficient bilinear pairing:\n\n*e: G<sub>1</sub> \u00d7 G<sub>2</sub> \u2192 G<sub>T</sub>*\n\n## Security warnings\n\nThis library, like other pairing cryptography libraries implementing this construction, is not resistant to side-channel attacks.\n\n## Usage\n\nAdd the `bn` crate to your dependencies in `Cargo.toml`...\n\n```toml\n[dependencies]\nbn = \"0.4.2\"\n```\n\n...and add an `extern crate` declaration to your crate root:\n\n```rust\nextern crate bn;\n```\n\n## API\n\n* `Fr` is an element of F<sub>r</sub>\n* `G1` is a point on the BN curve E/Fq : y^2 = x^3 + b\n* `G2` is a point on the twisted BN curve E'/Fq2 : y^2 = x^3 + b/xi\n* `Gt` is a group element (written multiplicatively) obtained with the `pairing` function over `G1` and `G2`.\n\n### Examples\n\n#### Joux's key agreement protocol\n\nIn a typical Diffie-Hellman key exchange, relying on ECDLP, a three-party key exchange requires two rounds. A single round protocol is possible through the use of a bilinear pairing: given Alice's public key *a*P<sub>1</sub> and Bob's public key *b*P<sub>2</sub>, Carol can compute the shared secret with her private key *c* by *e*(*a*P<sub>1</sub>, *b*P<sub>2</sub>)<sup>c</sup>.\n\n(See `examples/joux.rs` for the full example.)\n\n```rust\n// Generate private keys\nlet alice_sk = Fr::random(rng);\nlet bob_sk = Fr::random(rng);\nlet carol_sk = Fr::random(rng);\n\n// Generate public keys in G1 and G2\nlet (alice_pk1, alice_pk2) = (G1::one() * alice_sk, G2::one() * alice_sk);\nlet (bob_pk1, bob_pk2) = (G1::one() * bob_sk, G2::one() * bob_sk);\nlet (carol_pk1, carol_pk2) = (G1::one() * carol_sk, G2::one() * carol_sk);\n\n// Each party computes the shared secret\nlet alice_ss = pairing(bob_pk1, carol_pk2).pow(alice_sk);\nlet bob_ss = pairing(carol_pk1, alice_pk2).pow(bob_sk);\nlet carol_ss = pairing(alice_pk1, bob_pk2).pow(carol_sk);\n\nassert!(alice_ss == bob_ss && bob_ss == carol_ss);\n```\n\n## License\n\nLicensed under either of\n\n * MIT license, ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n\nat your option.\n\nCopyright 2016 [Zcash Electric Coin Company](https://z.cash/). The Zcash Company promises to maintain the \"bn\" crate on crates.io under this MIT/Apache-2.0 dual license.\n\n### Authors\n\n* [Sean Bowe](https://github.com/ebfull)\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "boilerplate-template-ipfs", "description": "A github template repository of an end-to-end application that demonstrates minimal UI to upload files using the IPFS protocol and download files", "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-ipfs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-ipfs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-ipfs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/shelegdmitriy/boilerplate-template-ipfs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n  - [Step 3: set contract name in your frontend code](#step-3-set-contract-name-in-your-frontend-code)\n- [Troubleshooting](#troubleshooting)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis project is created for easy-to-start as a React + IPFS skeleton template in the Pagoda Gallery. It was initialized with [create-near-app]. Clone it and start to build your own gallery project!\n\n### Built With\n\n[create-near-app], [amazing-github-template](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\nInstall IPFS:\n\n    npm install -g ipfs\n\nInitialize IPFS daemon:\n\n    jsipfs init\n    \nAllow our clients to talk to our jsipfs instance:\n\n    jsipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:5002\", \"http://localhost:3000\", \"https://webui.ipfs.io\"]'\n    jsipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nTest your contract (must use node v16):\n\n    npm test\n\nStart your IPFS daemon:\n\n    jsipfs daemon\n\nRun your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm start\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. `/frontend/pages/index.tsx` is a great\n   place to start exploring. Note that it uses `/frontend/contracts/ipfs-contract.ts`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify `NEXT_PUBLIC_CONTRACT_NAME` in `frontend/.env.local` that sets the account name of the contract. Set it to the account id you used above.\n\n    NEXT_PUBLIC_CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-near-app]: https://github.com/near/create-near-app\n  [Node.js]: https://nodejs.org/en/download/package-manager/\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n  [gh-pages]: https://github.com/tschaub/gh-pages\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-ipfs/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-ipfs/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-ipfs) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Jonathan Lewis](https://github.com/jon-lewis).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-ipfs/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-ipfs-dev", "description": "A github template repository of an end-to-end application that demonstrates minimal UI to upload files using the IPFS protocol and download files", "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-ipfs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-ipfs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-ipfs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/shelegdmitriy/boilerplate-template-ipfs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n  - [Step 3: set contract name in your frontend code](#step-3-set-contract-name-in-your-frontend-code)\n- [Troubleshooting](#troubleshooting)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis project is created for easy-to-start as a React + IPFS skeleton template in the Pagoda Gallery. It was initialized with [create-near-app]. Clone it and start to build your own gallery project!\n\n### Built With\n\n[create-near-app], [amazing-github-template](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\nInstall IPFS:\n\n    npm install -g ipfs\n\nInitialize IPFS daemon:\n\n    jsipfs init\n    \nAllow our clients to talk to our jsipfs instance:\n\n    jsipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:5002\", \"http://localhost:3000\", \"https://webui.ipfs.io\"]'\n    jsipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\"]'\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nTest your contract (must use node v16):\n\n    npm test\n\nStart your IPFS daemon:\n\n    jsipfs daemon\n\nRun your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm start\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. `/frontend/pages/index.tsx` is a great\n   place to start exploring. Note that it uses `/frontend/contracts/ipfs-contract.ts`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify `NEXT_PUBLIC_CONTRACT_NAME` in `frontend/.env.local` that sets the account name of the contract. Set it to the account id you used above.\n\n    NEXT_PUBLIC_CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-near-app]: https://github.com/near/create-near-app\n  [Node.js]: https://nodejs.org/en/download/package-manager/\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n  [gh-pages]: https://github.com/tschaub/gh-pages\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-ipfs/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-ipfs/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-ipfs/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-ipfs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-ipfs) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Jonathan Lewis](https://github.com/jon-lewis).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-ipfs/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-js", "description": null, "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n  - [Step 3: set contract name in your frontend code](#step-3-set-contract-name-in-your-frontend-code)\n- [Troubleshooting](#troubleshooting)\n  - [Deploy on Vercel](#deploy-on-vercel)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) and [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs) created for easy-to-start as a React skeleton template in the Pagoda Gallery. Smart-contract was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs), [`tailwindui`](https://tailwindui.com/), [`@headlessui/react`](https://headlessui.com/), [`@heroicons/react`](https://heroicons.com/), [create-near-app], [`amazing-github-template`](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18>`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nStart your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm run start\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nTest your contract:\n\n    npm run test\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. You can start editing the page by\n   modifying `frontend/pages/index.tsx`. The page auto-updates as you edit the file.\n   This is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. Test your contract (must use node v16): `npm test`, this will run the tests in `integration-tests` directory.\n4. [API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `frontend/pages/api/hello.ts`.\n5. The `frontend/pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n6. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify `NEXT_PUBLIC_CONTRACT_NAME` in `frontend/.env.local` that sets the account name of the contract. Set it to the account id you used above.\n\n    NEXT_PUBLIC_CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-next-app]: https://github.com/vercel/next.js/tree/canary/packages/create-next-app\n  [Node.js]: https://nodejs.org/en/download/package-manager\n  [tailwindcss]: https://tailwindcss.com/docs/guides/nextjs\n  [create-near-app]: https://github.com/near/create-near-app\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Dmitriy Sheleg](https://github.com/shelegdmitriy).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-js-dev", "description": null, "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n  - [Step 3: set contract name in your frontend code](#step-3-set-contract-name-in-your-frontend-code)\n- [Troubleshooting](#troubleshooting)\n  - [Deploy on Vercel](#deploy-on-vercel)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) and [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs) created for easy-to-start as a React skeleton template in the Pagoda Gallery. Smart-contract was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs), [`tailwindui`](https://tailwindui.com/), [`@headlessui/react`](https://headlessui.com/), [`@heroicons/react`](https://heroicons.com/), [create-near-app], [`amazing-github-template`](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18>`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nStart your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm run start\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nTest your contract:\n\n    npm run test\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. You can start editing the page by\n   modifying `frontend/pages/index.tsx`. The page auto-updates as you edit the file.\n   This is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. Test your contract (must use node v16): `npm test`, this will run the tests in `integration-tests` directory.\n4. [API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `frontend/pages/api/hello.ts`.\n5. The `frontend/pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n6. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify `NEXT_PUBLIC_CONTRACT_NAME` in `frontend/.env.local` that sets the account name of the contract. Set it to the account id you used above.\n\n    NEXT_PUBLIC_CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-next-app]: https://github.com/vercel/next.js/tree/canary/packages/create-next-app\n  [Node.js]: https://nodejs.org/en/download/package-manager\n  [tailwindcss]: https://tailwindcss.com/docs/guides/nextjs\n  [create-near-app]: https://github.com/near/create-near-app\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Dmitriy Sheleg](https://github.com/shelegdmitriy).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-keypom", "description": "A github template repository of an end-to-end application that demonstrates minimal UI to build a lazy-minted NFT link drop using Keypom", "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-keypom\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n- [Troubleshooting](#troubleshooting)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis project is created for easy-to-start as a React + IPFS skeleton template in the Pagoda Gallery. It was initialized with [create-near-app]. Clone it and start to build your own gallery project!\n\n### Built With\n\n[create-near-app], [amazing-github-template](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `16+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\nOptionally create an account on [web3.storage](https://web3.storage) in order to upload files directly to IPFS from the frontend.\n\nGenerate an API token on web3.storage by following [this guide](https://web3.storage/docs/how-tos/generate-api-token/) and, finally, store the token in your `frontend/.env.local` as `NEXT_PUBLIC_WEB3_STORAGE_AUTH_TOKEN`. Note this means the API token will be available to anyone who has access to your website. This might not be ideal for a production application but works great for prototyping.\n\n### Installation\n\nInstall all dependencies:\n\n    npm install\n\nDeploy your NFT contracts to TestNet with a temporary dev account:\n\n    npm run deploy\n\nInitialize the NFT contract (customize this to your needs):\n\n    near call <neardev-account> new '{\"owner_id\":\"<YOUR_ACCOUNT>\",\"metadata\": {\"spec\":\"nft-1.0.99\",\"name\":\"<YOUR_NFT_NAME>\",\"symbol\":\"<YOUR_UNIQUE_SYMBOL>\",\"base_uri\":\"https://cloudflare-ipfs.com/ipfs/\"}}' --accountId <YOUR_ACCOUNT>\n\nYou also need to add keypom as an approved minter to mint NFTs on your behalf, add approved minters to NFT series contract:\n    \n    near call <neardev-account> add_approved_minter '{\"account_id\":\"beta.keypom.testnet\"}' --accountId <YOUR_ACCOUNT>\n\nBy default, only the owner will be able to create NFT series on this contract. You can optionally add anyone else as an approved creator by running:\n\n    near call <neardev-account> add_approved_creator '{\"account_id\":\"<APPROVED_ACCOUNT>\"}' --accountId <YOUR_ACCOUNT>\n\nUsage\n=====\n\nStart your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm run start\n\nExploring The Code\n==================\n\n1. The pre-built smart-contract code lives in the `/contracts` folder. This app is built from [Keypom's NFT tutorial series app](https://github.com/keypom/nft-tutorial-series). In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. `/frontend/pages/index.tsx` is a great\n   place to start exploring. Note that it uses `/frontend/contracts/keypom-contract.ts`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile ./contracts/nft-series/nft-series.wasm\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-near-app]: https://github.com/near/create-near-app\n  [Node.js]: https://nodejs.org/en/download/package-manager/\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n  [gh-pages]: https://github.com/tschaub/gh-pages\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-keypom/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-keypom/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-keypom) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Jonathan Lewis](https://github.com/jon-lewis).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-keypom/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-keypom-dev", "description": "A github template repository of an end-to-end application that demonstrates minimal UI to build a lazy-minted NFT link drop using Keypom", "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-keypom\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-keypom/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template React\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [Getting Started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n- [Usage](#usage)\n- [Exploring The Code](#exploring-the-code)\n- [Deploy](#deploy)\n  - [Step 0: Install near-cli (optional)](#step-0-install-near-cli-optional)\n  - [Step 1: Create an account for the contract](#step-1-create-an-account-for-the-contract)\n  - [Step 2: deploy the contract](#step-2-deploy-the-contract)\n- [Troubleshooting](#troubleshooting)\n  - [Roadmap](#roadmap)\n  - [Support](#support)\n  - [Project assistance](#project-assistance)\n  - [Contributing](#contributing)\n  - [Authors \\& contributors](#authors--contributors)\n  - [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis project is created for easy-to-start as a React + IPFS skeleton template in the Pagoda Gallery. It was initialized with [create-near-app]. Clone it and start to build your own gallery project!\n\n### Built With\n\n[create-near-app], [amazing-github-template](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `16+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\nOptionally create an account on [web3.storage](https://web3.storage) in order to upload files directly to IPFS from the frontend.\n\nGenerate an API token on web3.storage by following [this guide](https://web3.storage/docs/how-tos/generate-api-token/) and, finally, store the token in your `frontend/.env.local` as `NEXT_PUBLIC_WEB3_STORAGE_AUTH_TOKEN`. Note this means the API token will be available to anyone who has access to your website. This might not be ideal for a production application but works great for prototyping.\n\n### Installation\n\nInstall all dependencies:\n\n    npm install\n\nDeploy your NFT contracts to TestNet with a temporary dev account:\n\n    npm run deploy\n\nInitialize the NFT contract (customize this to your needs):\n\n    near call <neardev-account> new '{\"owner_id\":\"<YOUR_ACCOUNT>\",\"metadata\": {\"spec\":\"nft-1.0.99\",\"name\":\"<YOUR_NFT_NAME>\",\"symbol\":\"<YOUR_UNIQUE_SYMBOL>\",\"base_uri\":\"https://cloudflare-ipfs.com/ipfs/\"}}' --accountId <YOUR_ACCOUNT>\n\nYou also need to add keypom as an approved minter to mint NFTs on your behalf, add approved minters to NFT series contract:\n    \n    near call <neardev-account> add_approved_minter '{\"account_id\":\"beta.keypom.testnet\"}' --accountId <YOUR_ACCOUNT>\n\nBy default, only the owner will be able to create NFT series on this contract. You can optionally add anyone else as an approved creator by running:\n\n    near call <neardev-account> add_approved_creator '{\"account_id\":\"<APPROVED_ACCOUNT>\"}' --accountId <YOUR_ACCOUNT>\n\nUsage\n=====\n\nStart your frontend in development mode:\n\n    npm run dev\n\nStart your frontend in production mode:\n\n    npm run start\n\nExploring The Code\n==================\n\n1. The pre-built smart-contract code lives in the `/contracts` folder. This app is built from [Keypom's NFT tutorial series app](https://github.com/keypom/nft-tutorial-series). In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. `/frontend/pages/index.tsx` is a great\n   place to start exploring. Note that it uses `/frontend/contracts/keypom-contract.ts`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile ./contracts/nft-series/nft-series.wasm\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-near-app]: https://github.com/near/create-near-app\n  [Node.js]: https://nodejs.org/en/download/package-manager/\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n  [gh-pages]: https://github.com/tschaub/gh-pages\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-keypom/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-keypom/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-keypom/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-keypom/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template React:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-keypom) to the project.\n- Tweet about the Boilerplate Template React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Jonathan Lewis](https://github.com/jon-lewis).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-keypom/contributors).\n\n## Security\n\nBoilerplate Template React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-loyalty-program-with-ft", "description": null, "language": "JavaScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-rs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n<div align=\"center\">\n  Rust Boilerplate Template\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [About](#about)\n  - [Built With](#built-with)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Overview](#overview)\n  - [Contracts](#contracts)\n  - [Frontend](#frontend)\n  - [Backend.js](#backendjs)\n- [Usage](#usage)\n- [Roadmap](#roadmap)\n- [Support](#support)\n- [Project assistance](#project-assistance)\n- [Contributing](#contributing)\n- [Authors & contributors](#authors--contributors)\n- [Security](#security)\n\n</details>\n\n---\n\n# Loyalty Program with Fungible Tokens\n\n\n## About\n\nThis project is created for easy-to-start as a React + Rust loyalty program with fungible tokens template in the Pagoda Gallery. It was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[create-near-app]\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `16+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n**Important note**: only the factory contract is and should be deployed. This is done automatically when using `npm run deploy` command. Two other contracts (ft contract and manager contract) should only be deployed by the factory contract.\n\nOverview\n================\n\nThe loyalty program with the fungible token template provides a way for merchants to create\na fungible token program with just a few clicks. \n\nThe template consists of the following modules:\n\n* 3 smart contracts: factory contract, fungible token contract and manager contract\n* backend.js that serves as a web2 backend\n* frontend that provides the UI for the customer and the merchant\n\n\n## Contracts\n\nThis template features three smart contracts:\n\n* factory contract - this is the contract that is deployed by the user. The contract uses a factory pattern\n  to deploy fungible token contract and manager contract for each merchant that logs in and creates a loyalty program with the UI.\n  See [factory-rust](https://github.com/near-examples/factory-rust) for a simple factory pattern.\n* fungible token contract - this is a standard fungible token contract. \n  Read more about the FTs [here](https://docs.near.org/develop/relevant-contracts/ft).\n* manager contract - this contract manages the whole loaylty program flow\n\n## Frontend\n\nFrontend consists of two views:\n\n* merchant view - this is the view where a merchant can create a loyalty program. The merchant needs to log in first.\n* customer view - the view used by the customer to use the loyalty program and gain fungible tokens.\n  This view is hidden until a merchant creates a loaylty program. The customer does not have to log in or create an account\n  in order to use the loyalty program. \n\n## Backend.js\n\nBackend.js is a simple web2 backend simulated on the frontend in this template.\n\n\nUsage\n=====\n\nStart your frontend:\n\n    npm run dev\n\n**Important note**: This project uses a browser local storage to store important data.\nBe sure to always run it in the same browser. It won't work in an incognito mode.\n\nTest your contract:\n\n    npm test\n\nExploring The App\n=================\n\nThe project deploys a pair of contracts for each merchant. The naming convention for those is:\n\nManager contract: `{random id tied to a merchant}-manager.{factory address}`\nFT contract: `{random id tied to a merchant}-ft.{factory address}`\n\nA customer account is created as a subaccount of a manager contract:\n\n`{random string of 4 chars}.{random id tied to a merchant}-manager.{factory address}`\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contracts` folder.\n2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great\n   place to start exploring. Note that it loads in `/frontend/pages/index.js`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. There is a backend code in the `backend.js` file in the `frontend` directory. This code\n   simulates a web2 backend.\n4. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.\n\n## Security\n\nLoyalty Program with Fungible Tokens Template follows good practices of security, but 100% security cannot be assured.\nLoyalty Program with Fungible Tokens Template is provided **\"as is\"** without any **warranty**. Use at your own risk.", "release_dates": []}, {"name": "boilerplate-template-loyalty-program-with-ft-dev", "description": null, "language": "JavaScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-rs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n<div align=\"center\">\n  Rust Boilerplate Template\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [About](#about)\n  - [Built With](#built-with)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Overview](#overview)\n  - [Contracts](#contracts)\n  - [Frontend](#frontend)\n  - [Backend.js](#backendjs)\n- [Usage](#usage)\n- [Roadmap](#roadmap)\n- [Support](#support)\n- [Project assistance](#project-assistance)\n- [Contributing](#contributing)\n- [Authors & contributors](#authors--contributors)\n- [Security](#security)\n\n</details>\n\n---\n\n# Loyalty Program with Fungible Tokens\n\n\n## About\n\nThis project is created for easy-to-start as a React + Rust loyalty program with fungible tokens template in the Pagoda Gallery. It was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[create-near-app]\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `16+`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n**Important note**: only the factory contract is and should be deployed. This is done automatically when using `npm run deploy` command. Two other contracts (ft contract and manager contract) should only be deployed by the factory contract.\n\nOverview\n================\n\nThe loyalty program with the fungible token template provides a way for merchants to create\na fungible token program with just a few clicks. \n\nThe template consists of the following modules:\n\n* 3 smart contracts: factory contract, fungible token contract and manager contract\n* backend.js that serves as a web2 backend\n* frontend that provides the UI for the customer and the merchant\n\n\n## Contracts\n\nThis template features three smart contracts:\n\n* factory contract - this is the contract that is deployed by the user. The contract uses a factory pattern\n  to deploy fungible token contract and manager contract for each merchant that logs in and creates a loyalty program with the UI.\n  See [factory-rust](https://github.com/near-examples/factory-rust) for a simple factory pattern.\n* fungible token contract - this is a standard fungible token contract. \n  Read more about the FTs [here](https://docs.near.org/develop/relevant-contracts/ft).\n* manager contract - this contract manages the whole loaylty program flow\n\n## Frontend\n\nFrontend consists of two views:\n\n* merchant view - this is the view where a merchant can create a loyalty program. The merchant needs to log in first.\n* customer view - the view used by the customer to use the loyalty program and gain fungible tokens.\n  This view is hidden until a merchant creates a loaylty program. The customer does not have to log in or create an account\n  in order to use the loyalty program. \n\n## Backend.js\n\nBackend.js is a simple web2 backend simulated on the frontend in this template.\n\n\nUsage\n=====\n\nStart your frontend:\n\n    npm run dev\n\n**Important note**: This project uses a browser local storage to store important data.\nBe sure to always run it in the same browser. It won't work in an incognito mode.\n\nTest your contract:\n\n    npm test\n\nExploring The App\n=================\n\nThe project deploys a pair of contracts for each merchant. The naming convention for those is:\n\nManager contract: `{random id tied to a merchant}-manager.{factory address}`\nFT contract: `{random id tied to a merchant}-ft.{factory address}`\n\nA customer account is created as a subaccount of a manager contract:\n\n`{random string of 4 chars}.{random id tied to a merchant}-manager.{factory address}`\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contracts` folder.\n2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great\n   place to start exploring. Note that it loads in `/frontend/pages/index.js`,\n   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. There is a backend code in the `backend.js` file in the `frontend` directory. This code\n   simulates a web2 backend.\n4. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.\n\n## Security\n\nLoyalty Program with Fungible Tokens Template follows good practices of security, but 100% security cannot be assured.\nLoyalty Program with Fungible Tokens Template is provided **\"as is\"** without any **warranty**. Use at your own risk.", "release_dates": []}, {"name": "boilerplate-template-rs", "description": null, "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-rs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Rust Boilerplate Template\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [About](#about)\n  - [Built With](#built-with)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Usage](#usage)\n- [Deploy on Vercel](#deploy-on-vercel)\n- [Roadmap](#roadmap)\n- [Support](#support)\n- [Project assistance](#project-assistance)\n- [Contributing](#contributing)\n- [Authors & contributors](#authors--contributors)\n- [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) and [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs) created for easy-to-start as a React + Rust skeleton template in the Pagoda Gallery. Smart-contract was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs), [`tailwindui`](https://tailwindui.com/), [`@headlessui/react`](https://headlessui.com/), [`@heroicons/react`](https://heroicons.com/), [create-near-app], [`amazing-github-template`](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18>`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nStart your frontend:\n\n    npm run start\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\n\nTest your contract:\n\n    npm run test\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. You can start editing the page by\n   modifying `frontend/pages/index.tsx`. The page auto-updates as you edit the file.\n   This is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.\n4. [API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `frontend/pages/api/hello.ts`.\n5. The `frontend/pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n6. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify the line in `contract/neardev/dev-account.env` that sets the account name of the contract. Set it to the account id you used above.\n\n    CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-next-app]: https://github.com/vercel/next.js/tree/canary/packages/create-next-app\n  [Node.js]: https://nodejs.org/en/download/package-manager\n  [tailwindcss]: https://tailwindcss.com/docs/guides/nextjs\n  [create-near-app]: https://github.com/near/create-near-app\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-rs/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-rs/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Rust Boilerplate Template:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-rs) to the project.\n- Tweet about the Rust Boilerplate Template.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Rust Boilerplate Template **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Dmitriy Sheleg](https://github.com/shelegdmitriy).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-rs/contributors).\n\n## Security\n\nRust Boilerplate Template follows good practices of security, but 100% security cannot be assured.\nRust Boilerplate Template is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "boilerplate-template-rs-dev", "description": null, "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/near/boilerplate-template-rs\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/near/boilerplate-template-rs/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Rust Boilerplate Template\n  <br />\n  <br />\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by near](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-near-ff1414.svg?style=flat-square)](https://github.com/near)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [About](#about)\n  - [Built With](#built-with)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Usage](#usage)\n- [Deploy on Vercel](#deploy-on-vercel)\n- [Roadmap](#roadmap)\n- [Support](#support)\n- [Project assistance](#project-assistance)\n- [Contributing](#contributing)\n- [Authors & contributors](#authors--contributors)\n- [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) and [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs) created for easy-to-start as a React + Rust skeleton template in the Pagoda Gallery. Smart-contract was initialized with [create-near-app]. Use this template and start to build your own gallery project!\n\n### Built With\n\n[`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs), [`tailwindui`](https://tailwindui.com/), [`@headlessui/react`](https://headlessui.com/), [`@heroicons/react`](https://heroicons.com/), [create-near-app], [`amazing-github-template`](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18>`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nBuild your contract:\n\n    npm run build\n\nDeploy your contract to TestNet with a temporary dev account:\n\n    npm run deploy\n\n\nUsage\n=====\n\nStart your frontend:\n\n    npm run start\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\n\nTest your contract:\n\n    npm run test\n\nExploring The Code\n==================\n\n1. The smart-contract code lives in the `/contract` folder. See the README there for\n   more info. In blockchain apps the smart contract is the \"backend\" of your app.\n2. The frontend code lives in the `/frontend` folder. You can start editing the page by\n   modifying `frontend/pages/index.tsx`. The page auto-updates as you edit the file.\n   This is your entrypoint to learn how the frontend connects to the NEAR blockchain.\n3. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.\n4. [API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `frontend/pages/api/hello.ts`.\n5. The `frontend/pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n6. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts].\nWhen you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.\nWhen you're ready to make it permanent, here's how:\n\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:\n\n    npm install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\nStep 2: deploy the contract\n---------------------------\n\nUse the CLI to deploy the contract to TestNet with your account ID.\nReplace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.\n\n    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE\n\n\nStep 3: set contract name in your frontend code\n-----------------------------------------------\n\nModify the line in `contract/neardev/dev-account.env` that sets the account name of the contract. Set it to the account id you used above.\n\n    CONTRACT_NAME=near-blank-project.YOUR-NAME.testnet\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-next-app]: https://github.com/vercel/next.js/tree/canary/packages/create-next-app\n  [Node.js]: https://nodejs.org/en/download/package-manager\n  [tailwindcss]: https://tailwindcss.com/docs/guides/nextjs\n  [create-near-app]: https://github.com/near/create-near-app\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n## Roadmap\n\nSee the [open issues](https://github.com/near/boilerplate-template-rs/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/near/boilerplate-template-rs/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/near/boilerplate-template-rs/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/near/boilerplate-template-rs/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Rust Boilerplate Template:\n\n- Add a [GitHub Star](https://github.com/near/boilerplate-template-rs) to the project.\n- Tweet about the Rust Boilerplate Template.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Rust Boilerplate Template **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Dmitriy Sheleg](https://github.com/shelegdmitriy).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/near/boilerplate-template-rs/contributors).\n\n## Security\n\nRust Boilerplate Template follows good practices of security, but 100% security cannot be assured.\nRust Boilerplate Template is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "borsh", "description": "Binary Object Representation Serializer for Hashing", "language": null, "license": null, "readme": "<div align=\"center\">\n\n  <h1><code>borsh</code></h1>\n\n  <p>\n    <strong>Binary Object Representation Serializer for Hashing</strong>\n  </p>\n  \n  <h3>\n    <a href=\"https://borsh.io\">Website</a>\n    <span> | </span>\n    <a href=\"https://near.chat\">Join Community</a>\n    <span> | </span>\n    <a href=\"https://github.com/nearprotocol/borsh#implementations\">Implementations</a>\n    <span> | </span>\n    <a href=\"https://github.com/nearprotocol/borsh#benchmarks\">Benchmarks</a>\n    <span> | </span>\n    <a href=\"https://github.com/nearprotocol/borsh#specification\">Specification</a>\n  </h3>\n</div>\n\nWhy do we need yet another serialization format? Borsh is the first serializer that prioritizes the following qualities that are crucial for security-critical projects:\n\n- Consistent and specified binary representation:\n  - Consistent means there is a bijective mapping between objects and their binary representations. There is no two binary representations that deserialize\n    into the same object. This is extremely useful for applications that use binary representation to compute hash;\n  - Borsh comes with a full specification that can be used for implementations in other languages;\n- Safe. Borsh implementations use safe coding practices. In Rust, Borsh uses almost only safe code, with one exception usage of `unsafe` to avoid an exhaustion attack;\n- Speed. In Rust, Borsh achieves high performance by opting out from [Serde](https://serde.rs) which makes it faster\n  than [bincode](https://github.com/servo/bincode) in some cases; which also reduces the code size.\n\n## Implementations\n\n| Platform                          | Repository                                   | Latest Release                                                                                                                                 |\n| --------------------------------- | -------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| Rust                              | [borsh-rs](https://github.com/near/borsh-rs) | <a href=\"https://crates.io/crates/borsh\"><img src=\"https://img.shields.io/crates/v/borsh.svg?style=flat-square\" alt=\"Latest released version\" /></a> |\n| TypeScript, JavaScript            | [borsh-js](https://github.com/near/borsh-js) | <a href=\"https://npmjs.com/borsh\"><img src=\"https://img.shields.io/npm/v/borsh.svg?style=flat-square\" alt=\"Latest released version\"></a>                           |\n| TypeScript | [borsh-ts](https://github.com/dao-xyz/borsh-ts) | <a href=\"https://npmjs.com/package/@dao-xyz/borsh\"><img src=\"https://img.shields.io/npm/v/@dao-xyz/borsh.svg?style=flat-square\" alt=\"Latest released version\"></a> |\n| Java, Kotlin, Scala, Clojure, etc | [borshj](https://github.com/near/borshj)     |                                                                                                                                                |\n| Go                                | [borsh-go](https://github.com/near/borsh-go) | <a href=\"https://github.com/near/borsh-go\"><img src=\"https://img.shields.io/github/v/release/near/borsh-go?sort=semver&style=flat-square\" alt=\"Latest released version\" /></a> |\n| Python                            | [borsh-construct-py](https://github.com/near/borsh-construct-py) | <a href=\"https://pypi.org/project/borsh-construct/\"><img src=\"https://img.shields.io/pypi/v/borsh-construct.svg?style=flat-square\" alt=\"Latest released version\" /></a>                                                                                                                               |\n| Assemblyscript                    | [borsh-as](https://github.com/gagdiez/serial-as/tree/main/borsh) | <a href=\"https://www.npmjs.com/package/@serial-as/borsh\"><img src=\"https://img.shields.io/npm/v/@serial-as/borsh?style=flat-square\" alt=\"Latest released version\" /></a> |\n| C#                                | [Hexarc.Borsh](https://github.com/hexarc-software/hexarc-borsh) | <a href=\"https://www.nuget.org/packages/Hexarc.Borsh\"><img src=\"https://img.shields.io/nuget/v/Hexarc.Borsh.svg?style=flat-square\" alt=\"Latest released version\" /></a> |\n| C++                    | [borsh-cpp](https://github.com/Stolkerve/borsh-cpp) | *(work-in-progress)* |\n| C++20                    | [borsh-cpp20](https://github.com/israelidanny/borsh-cpp20) | *(work-in-progress)* |\n| Elixir                    | [borsh-ex](https://github.com/alexfilatov/borsh) | <a href=\"https://hex.pm/packages/borsh\"><img src=\"https://img.shields.io/hexpm/v/borsh.svg?style=flat-square\" alt=\"Latest released version\" /></a> |\n\n## Benchmarks\n\nWe measured the following benchmarks on objects that blockchain projects care about the most: blocks, block headers,\ntransactions, accounts. We took object structure from the [NEAR Protocol](https://near.org) blockchain.\nWe used [Criterion](https://bheisler.github.io/criterion.rs/book/index.html) for building the following graphs.\n\nThe benchmarks were run on Google Cloud [n1-standard-2 (2 vCPUs, 7.5 GB memory)](https://cloud.google.com/compute/docs/machine-types).\n\nBlock header serialization speed vs block header size in bytes (size only roughly corresponds to the serialization complexity which causes non-smoothness of the graph):\n\n![ser_header](http://borsh.io/criterion/ser_header/report/lines.svg)\n\nBlock header de-serialization speed vs block header size in bytes:\n\n![ser_header](http://borsh.io/criterion/de_header/report/lines.svg)\n\nBlock serialization speed vs block size in bytes:\n\n![ser_header](http://borsh.io/criterion/ser_block/report/lines.svg)\n\nBlock de-serialization speed vs block size in bytes:\n\n![ser_header](http://borsh.io/criterion/de_block/report/lines.svg)\n\nSee complete report [here](http://borsh.io/criterion/report/index.html).\n\n## Specification\n\nIn short, Borsh is a non self-describing binary serialization format. It is designed to serialize any objects to canonical and deterministic set of bytes.\n\nGeneral principles:\n\n- integers are little endian;\n- sizes of dynamic containers are written before values as `u32`;\n- all unordered containers (hashmap/hashset) are ordered in lexicographic order by key (in tie breaker case on value);\n- structs are serialized in the order of fields in the struct;\n- enums are serialized with using `u8` for the enum ordinal and then storing data inside the enum value (if present).\n\nFormal specification:\n\n<div>\n  <table>\n    <tr>\n      <td>Informal type</td>\n      <td><a href=\"https://doc.rust-lang.org/grammar.html\">Rust EBNF </a> * </td>\n      <td>Pseudocode</td>\n    </tr>\n    <tr>\n      <td>Integers</td>\n      <td>integer_type: [\"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" ]</td>\n      <td>little_endian(x)</td>\n    </tr>\n    <tr>\n      <td>Floats</td>\n      <td>float_type: [\"f32\" | \"f64\" ]</td>\n      <td>\n        err_if_nan(x)<br/>\n        little_endian(x as integer_type)\n      </td>\n    </tr>\n    <tr>\n      <td>Unit</td>\n      <td>unit_type: \"()\"</td>\n      <td>We do not write anything</td>\n    </tr>\n    <tr>\n      <td>Bool</td>\n      <td>boolean_type: \"bool\"</td>\n      <td>\n        if x {<br/>\n        &nbsp; repr(1 as u8)<br/>\n        } else {<br/>\n        &nbsp; repr(0 as u8)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>Fixed sized arrays</td>\n      <td>array_type: '[' ident ';' literal ']'</td>\n      <td>\n        for el in x {<br/>\n        &nbsp; repr(el as ident)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>Dynamic sized array</td>\n      <td>vec_type: \"Vec&lt;\" ident '&gt;'</td>\n      <td>\n        repr(len() as u32)<br/>\n        for el in x {<br/>\n        &nbsp; repr(el as ident)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>Struct</td>\n      <td>struct_type: \"struct\" ident fields</td>\n      <td>repr(fields)</td>\n    </tr>\n    <tr>\n      <td>Fields</td>\n      <td>fields: [named_fields | unnamed_fields]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Named fields</td>\n      <td>named_fields: '{' ident_field0 ':' ident_type0 ',' ident_field1 ':' ident_type1 ',' ... '}'</td>\n      <td>\n        repr(ident_field0 as ident_type0)<br/>\n        repr(ident_field1 as ident_type1)<br/>\n        ...\n      </td>\n    </tr>\n    <tr>\n      <td>Unnamed fields</td>\n      <td>unnamed_fields: '(' ident_type0 ',' ident_type1 ',' ... ')'</td>\n      <td>\n        repr(x.0 as type0)<br/>\n        repr(x.1 as type1)<br/>\n        ...\n      </td>\n    </tr>\n    <tr>\n      <td>Enum</td>\n      <td>\n        enum: 'enum' ident '{' variant0 ',' variant1 ',' ... '}'<br/>\n        variant: ident [ fields ] ?\n      </td>\n      <td>\n        Suppose X is the number of the variant that the enum takes.<br/>\n        repr(X as u8)<br/>\n        repr(x.X as fieldsX)\n      </td>\n    </tr>\n    <tr>\n      <td>HashMap</td>\n      <td>hashmap: \"HashMap&lt;\" ident0, ident1 \"&gt;\"</td>\n      <td>\n        repr(x.len() as u32)<br/>\n        for (k, v) in x.sorted_by_key() {<br/>\n        &nbsp; repr(k as ident0)<br/>\n        &nbsp; repr(v as ident1)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>HashSet</td>\n      <td>hashset: \"HashSet&lt;\" ident \"&gt;\"</td>\n      <td>\n        repr(x.len() as u32)<br/>\n        for el in x.sorted() {<br/>\n        &nbsp; repr(el as ident)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>Option</td>\n      <td>option_type: \"Option&lt;\" ident '&gt;'</td>\n      <td>\n        if x.is_some() {<br/>\n        &nbsp; repr(1 as u8)<br/>\n        &nbsp; repr(x.unwrap() as ident <br/>\n        } else {<br/>\n        &nbsp; repr(0 as u8)<br/>\n        }\n      </td>\n    </tr>\n    <tr>\n      <td>String</td>\n      <td>string_type: \"String\"</td>\n      <td>\n        encoded = utf8_encoding(x) as Vec&lt;u8&gt;<br/>\n        repr(encoded.len() as u32)<br/>\n        repr(encoded as Vec&lt;u8&gt;)\n      </td>\n    </tr>\n  </table>\n</div>\n\nNote:\n\n- Some parts of Rust grammar are not yet formalized, like enums and variants. We backwards derive EBNF forms of Rust grammar from [syn types](https://github.com/dtolnay/syn);\n- We had to extend repetitions of EBNF and instead of defining them as `[ ident_field ':' ident_type ',' ] *` we define them as `ident_field0 ':' ident_type0 ',' ident_field1 ':' ident_type1 ',' ...` so that we can refer to individual elements in the pseudocode;\n- We use `repr()` function to denote that we are writing the representation of the given element into an imaginary buffer.\n", "release_dates": []}, {"name": "borsh-construct-py", "description": "Python implementation of Binary Object Representation Serializer for Hashing ", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# borsh-construct\n\n[![Tests](https://github.com/near/borsh-construct-py/workflows/Tests/badge.svg)](https://github.com/near/borsh-construct-py/actions?workflow=Tests)\n[![Docs](https://github.com/near/borsh-construct-py/workflows/Docs/badge.svg)](https://near.github.io/borsh-construct-py/)\n\n`borsh-construct` is an implementation of the [Borsh](https://borsh.io/) binary serialization format for Python projects.\n\nBorsh stands for Binary Object Representation Serializer for Hashing. It is meant to be used in security-critical projects as it prioritizes consistency, safety, speed, and comes with a strict specification.\n\nRead the [Documentation](https://near.github.io/borsh-construct-py/).\n## Installation\n\n```sh\npip install borsh-construct\n\n```\n\n\n### Development Setup\n\n1. Install [poetry](https://python-poetry.org/docs/#installation)\n2. Install dev dependencies:\n```sh\npoetry install\n\n```\n3. Install [nox-poetry](https://github.com/cjolowicz/nox-poetry) (note: do not use Poetry to install this, see [here](https://medium.com/@cjolowicz/nox-is-a-part-of-your-global-developer-environment-like-poetry-pre-commit-pyenv-or-pipx-1cdeba9198bd))\n4. Activate the poetry shell:\n```sh\npoetry shell\n\n```\n\n### Quick Tests\n```sh\npytest\n\n```\n\n### Full Tests\n```sh\nnox\n\n```\n", "release_dates": []}, {"name": "borsh-go", "description": "Go implementation of Binary Object Representation Serializer for Hashing", "language": "Go", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": "# borsh-go\n\n[![Go Reference](https://pkg.go.dev/badge/github.com/near/borsh-go.svg)](https://pkg.go.dev/github.com/near/borsh-go)\n\n**borsh-go** is an implementation of the [Borsh] binary serialization format for Go\nprojects.\n\nBorsh stands for _Binary Object Representation Serializer for Hashing_. It is\nmeant to be used in security-critical projects as it prioritizes consistency,\nsafety, speed, and comes with a strict specification.\n\n## Features\n\n- Based on Go Reflection. Avoids the need for create protocol file and code generation. Simply\ndefining `struct` and go.\n\n\n## Usage\n\n### Example\n\n```go\npackage demo\n\nimport (\n\t\"log\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/near/borsh-go\"\n)\n\ntype A struct {\n\tX uint64\n\tY string\n\tZ string `borsh_skip:\"true\"` // will skip this field when serializing/deserializing\n}\n\nfunc TestSimple(t *testing.T) {\n\tx := A{\n\t\tX: 3301,\n\t\tY: \"liber primus\",\n\t}\n\tdata, err := borsh.Serialize(x)\n\tlog.Print(data)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\ty := new(A)\n\terr = borsh.Deserialize(y, data)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif !reflect.DeepEqual(x, *y) {\n\t\tt.Error(x, y)\n\t}\n}\n```\n\nFor more examples of usage, refer to `borsh_test.go`.\n\n## Type Mappings\n\nBorsh                 | Go           |  Description\n--------------------- | -------------- |--------\n`bool`\t\t      | `bool`\t       |\n`u8` integer          | `uint8`        |\n`u16` integer         | `uint16`       |\n`u32` integer         | `uint32`       |\n`u64` integer         | `uint64`       |\n`u128` integer        | `big.Int`  |\n`i8` integer          | `int8`        |\n`i16` integer         | `int16`       |\n`i32` integer         | `int32`       |\n`i64` integer         | `int64`       |\n`i128` integer        |            |  Not supported yet\n`f32` float           | `float32`      |\n`f64` float           | `float64`      |\nfixed-size array      | `[size]type`   |  go array\ndynamic-size array    |  `[]type`      |  go slice\nstring                | `string`       |\noption                |  `*type`         |   go pointer\nmap                   |   `map`          |\nset                   |   `map[type]struct{}`  | go map with value type set to `struct{}`\nstructs               |   `struct`      |\nenum                  |   `borsh.Enum`  |    use `type MyEnum borsh.Enum` to define enum type\n", "release_dates": ["2022-01-12T14:40:49Z", "2021-03-19T14:41:05Z", "2021-03-04T03:58:49Z", "2021-02-08T12:28:13Z"]}, {"name": "borsh-js", "description": "TypeScript/JavaScript implementation of Binary Object Representation Serializer for Hashing", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Borsh JS\n\n[![Project license](https://img.shields.io/badge/license-Apache2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Project license](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Discord](https://img.shields.io/discord/490367152054992913?label=discord)](https://discord.gg/Vyp7ETM)\n[![Travis status](https://travis-ci.com/near/borsh.svg?branch=master)](https://travis-ci.com/near/borsh-js)\n[![NPM version](https://img.shields.io/npm/v/borsh.svg?style=flat-square)](https://npmjs.com/borsh)\n[![Size on NPM](https://img.shields.io/bundlephobia/minzip/borsh.svg?style=flat-square)](https://npmjs.com/borsh)\n\n**Borsh JS** is an implementation of the [Borsh] binary serialization format for\nJavaScript and TypeScript projects.\n\nBorsh stands for _Binary Object Representation Serializer for Hashing_. It is meant to be used in security-critical projects as it prioritizes consistency,\nsafety, speed, and comes with a strict specification.\n\n> [!TIP]\n> We strongly recommend to use `borsh-js` alongside the amazing project [Borsher](https://github.com/nameskyteam/borsher), which we plan to merge in borsh.\n\n## Examples\n\n### (De)serializing a Value\n```javascript\nimport * as borsh from 'borsh';\n\nconst encodedU16 = borsh.serialize('u16', 2);\nconst decodedU16 = borsh.deserialize('u16', encodedU16);\n\nconst encodedStr = borsh.serialize('string', 'testing');\nconst decodedStr = borsh.deserialize('string', encodedStr);\n```\n\n### (De)serializing an Object\n```javascript\nimport * as borsh from 'borsh';\n\nconst value = {x: 255, y: BigInt(20), z: '123', arr: [1, 2, 3]};\nconst schema = { struct: { x: 'u8', y: 'u64', 'z': 'string', 'arr': { array: { type: 'u8' }}}};\n\nconst encoded = borsh.serialize(schema, value);\nconst decoded = borsh.deserialize(schema, encoded);\n```\n\n## API\nThe package exposes the following functions:\n- `serialize(schema: Schema, obj: any, validate: boolean = true): Uint8Array` - serializes an object `obj` according to the schema `schema`. Setting `validate` to false will skip the validation of the `schema`.\n- `deserialize(schema: Schema, buffer: Uint8Array, validate: boolean = true): any` - deserializes an object according to the schema `schema` from the buffer `buffer`. Setting `validate` to false will skip the validation of the `schema`.\n\n## Schemas\nSchemas are used to describe the structure of the data being serialized or deserialized. They are used to\nvalidate the data and to determine the order of the fields in the serialized data.\n\n> You can find examples of valid in the [test](./borsh-ts/test/utils.test.js) folder.\n\n> [!TIP]\n> We strongly recommend to use `borsh-js` alongside the amazing project [Borsher](https://github.com/nameskyteam/borsher), which we plan to merge in borsh.\n\n\n### Basic Types\nBasic types are described by a string. The following types are supported:\n- `u8`, `u16`, `u32`, `u64`, `u128` - unsigned integers of 8, 16, 32, 64, and 128 bits respectively.\n- `i8`, `i16`, `i32`, `i64`, `i128` - signed integers of 8, 16, 32, 64, and 128 bits respectively.\n- `f32`, `f64` - IEEE 754 floating point numbers of 32 and 64 bits respectively.\n- `bool` - boolean value.\n- `string` - UTF-8 string.\n\n### Arrays, Options, Maps, Sets, Enums, and Structs\nMore complex objects are described by a JSON object. The following types are supported:\n- `{ array: { type: Schema, len?: number } }` - an array of objects of the same type. The type of the array elements is described by the `type` field. If the field `len` is present, the array is fixed-size and the length of the array is `len`. Otherwise, the array is dynamic-sized and the length of the array is serialized before the elements.\n- `{ option: Schema }` - an optional object. The type of the object is described by the `type` field.\n- `{ map: { key: Schema, value: Schema }}` - a map. The type of the keys and values are described by the `key` and `value` fields respectively.\n- `{ set: Schema }` - a set. The type of the elements is described by the `type` field.\n- `{ enum: [ { struct: { className1: structSchema1 } }, { struct: { className2: structSchema2 } }, ... ] }` - an enum. The variants of the enum are described by the `className1`, `className2`, etc. fields. The variants are structs.\n- `{ struct: { field1: Schema1, field2: Schema2, ... } }` - a struct. The fields of the struct are described by the `field1`, `field2`, etc. fields.\n\n### Type Mappings\n\n| Javascript       | Borsh                             |\n|------------------|-----------------------------------|\n| `number`         | `u8` `u16` `u32` `i8` `i16` `i32` |\n| `bigint`         | `u64` `u128` `i64` `i128`         |\n| `number`         | `f32` `f64`                       |\n| `number`         | `f32` `f64`                       |\n| `boolean`        | `bool`                            |\n| `string`         | UTF-8 string                      |\n| `type[]`         | fixed-size byte array             |\n| `type[]`         | dynamic sized array               |\n| `object`         | enum                              |\n| `Map`            | HashMap                           |\n| `Set`            | HashSet                           |\n| `null` or `type` | Option                            |\n\n\n---\n\n## Contributing\n\nInstall dependencies:\n```bash\nyarn install\n```\n\nContinuously build with:\n```bash\nyarn dev\n```\n\nRun tests:\n```bash\nyarn test\n```\n\nRun linter\n```bash\nyarn lint\n```\n## Publish\n\nPrepare `dist` version by running:\n```bash\nyarn build\n```\n\nWhen publishing to npm use [np](https://github.com/sindresorhus/np).\n\n# License\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE-MIT](LICENSE-MIT.txt) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n\n[Borsh]:          https://borsh.io\n", "release_dates": ["2023-11-24T01:27:16Z", "2023-08-04T10:01:50Z", "2021-12-02T12:52:00Z", "2021-08-18T09:01:07Z", "2021-07-23T07:09:17Z", "2021-06-15T05:51:56Z", "2020-12-04T22:36:30Z"]}, {"name": "borsh-rs", "description": "Rust implementation of Binary Object Representation Serializer for Hashing", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Borsh in Rust &emsp; [![Latest Version]][crates.io] [![borsh: rustc 1.67+]][Rust 1.67] [![License Apache-2.0 badge]][License Apache-2.0] [![License MIT badge]][License MIT]\n\n[Borsh]: https://borsh.io\n[Latest Version]: https://img.shields.io/crates/v/borsh.svg\n[crates.io]: https://crates.io/crates/borsh\n[borsh: rustc 1.67+]: https://img.shields.io/badge/rustc-1.67+-lightgray.svg\n[Rust 1.67]: https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html\n[License Apache-2.0 badge]: https://img.shields.io/badge/license-Apache2.0-blue.svg\n[License Apache-2.0]: https://opensource.org/licenses/Apache-2.0\n[License MIT badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[License MIT]: https://opensource.org/licenses/MIT\n\n**borsh-rs** is Rust implementation of the [Borsh] binary serialization format.\n\nBorsh stands for _Binary Object Representation Serializer for Hashing_. It is meant to be used in\nsecurity-critical projects as it prioritizes [consistency, safety, speed][Borsh], and comes with a\nstrict [specification](https://github.com/near/borsh#specification).\n\n## Example\n\n```rust\nuse borsh::{BorshSerialize, BorshDeserialize, from_slice, to_vec};\n\n#[derive(BorshSerialize, BorshDeserialize, PartialEq, Debug)]\nstruct A {\n    x: u64,\n    y: String,\n}\n\n#[test]\nfn test_simple_struct() {\n    let a = A {\n        x: 3301,\n        y: \"liber primus\".to_string(),\n    };\n    let encoded_a = to_vec(&a).unwrap();\n    let decoded_a = from_slice::<A>(&encoded_a).unwrap();\n    assert_eq!(a, decoded_a);\n}\n```\n\n## Features\n\nOpting out from Serde allows borsh to have some features that currently are not available for serde-compatible serializers.\nCurrently we support two features: `borsh(init=<your initialization method name>` and `borsh(skip)` (the former one not available in Serde).\n\n`borsh(init=...)` allows to automatically run an initialization function right after deserialization. This adds a lot of convenience for objects that are architectured to be used as strictly immutable. Usage example:\n\n```rust\n#[derive(BorshSerialize, BorshDeserialize)]\n#[borsh(init=init)]\nstruct Message {\n    message: String,\n    timestamp: u64,\n    public_key: CryptoKey,\n    signature: CryptoSignature\n    hash: CryptoHash\n}\n\nimpl Message {\n    pub fn init(&mut self) {\n        self.hash = CryptoHash::new().write_string(self.message).write_u64(self.timestamp);\n        self.signature.verify(self.hash, self.public_key);\n    }\n}\n```\n\n`borsh(skip)` allows to skip serializing/deserializing fields, assuming they implement `Default` trait, similarly to `#[serde(skip)]`.\n\n```rust\n#[derive(BorshSerialize, BorshDeserialize)]\nstruct A {\n    x: u64,\n    #[borsh(skip)]\n    y: f32,\n}\n```\n\n### Enum with explicit discriminant\n\n`#[borsh(use_discriminant=false|true])` is required if you have an enum with explicit discriminant. This setting affects `BorshSerialize` and `BorshDeserialize` behaviour at the same time.\n\nIn the future, borsh will drop the requirement to explicitly use `#[borsh(use_discriminant=false|true)]`, and will default to `true`, but to make sure that the transition from the older versions of borsh (before 0.11 release) does not cause silent breaking changes in de-/serialization, borsh 1.0 will require to specify if the explicit enum discriminant should be used as a de-/serialization tag value.\n\nIf you don't specify `use_discriminant` option for enum with explicit discriminant, you will get an error:\n\n```bash\nerror: You have to specify `#[borsh(use_discriminant=true)]` or `#[borsh(use_discriminant=false)]` for all enums with explicit discriminant\n```\n\nIn order to preserve the behaviour of borsh versions before 0.11, which did not respect explicit enum discriminants for de-/serialization, use `#[borsh(use_discriminant=false)]`, otherwise, use `true`:\n\n```rust\n#[derive(BorshDeserialize, BorshSerialize)]\n#[borsh(use_discriminant=false)]\nenum A {\n    X,\n    Y = 10,\n}\n```\n\n## Releasing\n\nThe versions of all public crates in this repository are collectively managed by a single version in the [workspace manifest](https://github.com/near/borsh-rs/blob/master/Cargo.toml).\n\nSo, to publish a new version of all the crates, you can do so by simply bumping that to the next \"patch\" version and submit a PR.\n\nWe have CI Infrastructure put in place to automate the process of publishing all crates once a version change has merged into master.\n\nHowever, before you release, make sure the [CHANGELOG](CHANGELOG.md) is up to date and that the `[Unreleased]` section is present but empty.\n\n## License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2024-01-10T15:28:21Z", "2024-01-10T15:28:13Z", "2023-12-18T14:16:07Z", "2023-12-18T14:16:00Z", "2023-12-06T22:19:49Z", "2023-12-06T22:19:42Z", "2023-11-13T15:25:00Z", "2023-11-13T15:24:53Z", "2023-11-08T13:04:04Z", "2023-11-08T13:03:57Z", "2023-10-25T21:55:06Z", "2023-10-25T21:54:59Z", "2023-10-13T19:03:18Z", "2023-10-13T19:03:08Z", "2023-10-06T14:47:43Z", "2023-10-06T14:47:34Z", "2023-10-02T15:27:20Z", "2023-10-02T15:27:13Z", "2023-09-26T19:53:42Z", "2023-09-26T19:53:35Z", "2023-09-04T11:36:46Z", "2023-09-04T11:36:40Z", "2023-08-16T20:14:48Z", "2023-08-16T20:14:41Z", "2023-08-11T18:19:29Z", "2023-08-11T18:19:22Z", "2023-08-09T07:46:58Z", "2023-08-09T07:46:50Z", "2023-06-02T22:06:49Z", "2023-06-02T19:53:09Z"]}, {"name": "borshj", "description": "Borsh binary serialization format support for Java.", "language": "Java", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": "# BorshJ\n\n[![Project license](https://img.shields.io/badge/license-Public%20Domain-blue.svg)](https://unlicense.org)\n[![Discord](https://img.shields.io/discord/490367152054992913?label=discord)](https://discord.gg/Vyp7ETM)\n\n**BorshJ** is an implementation of the [Borsh] binary serialization format for\nJava (and Kotlin, Scala, Clojure, Groovy, Jython, JRuby, etc.) projects.\n\nBorsh stands for _Binary Object Representation Serializer for Hashing_. It is\nmeant to be used in security-critical projects as it prioritizes consistency,\nsafety, speed, and comes with a strict specification.\n\n## Features\n\n- Implements [`BorshBuffer`] on top of Java's [`ByteBuffer`].\n\n- Implements [`BorshReader`] on top of any Java [`InputStream`].\n\n- Implements [`BorshWriter`] on top of any Java [`OutputStream`].\n\n- Based on Java NIO, enabling high-performance, zero-copy interoperability\n  with native code via JNI.\n\n- GC friendly: avoids unnecessary copying wherever possible.\n\n## Prerequisites\n\n- [Java] 8+ (this library is compatible with Android)\n\n- [Gradle] (when building from source code)\n\n## Installation\n\nWe are working on building release binaries. They will be available here soon.\n\nIn the meantime, if you wish to try out BorshJ, you will need to build the JAR\nfile from source code yourself:\n\n```bash\ngit clone https://github.com/near/borshj.git\n\ncd borshj\n\ngradle jar\n\nls -l build/libs/borshj-$(cat VERSION).jar\n```\n\n## Usage\n\nTo use the Borsh object serializer/deserializer, you need add just one import:\n\n```java\nimport org.near.borshj.Borsh;\n```\n\n## Examples\n\nThe following code examples further below are all predicated on this simple\ndata class definition:\n\n```java\npublic class Point2D implements Borsh {\n  public float x;\n  public float y;\n\n  public Point2D() {}\n\n  public Point2D(float x, float y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n```\n\n### Serializing an object\n\nTo serialize a [POJO], use the `Borsh.serialize()` method:\n\n```java\nPoint2D point = new Point2D(123.0, 456.0);\n\nbyte[] bytes = Borsh.serialize(point);\n```\n\n### Deserializing an object\n\nTo deserialize a [POJO], use the `Borsh.deserialize()` method:\n\n```java\nPoint2D point = Borsh.deserialize(bytes, Point2D.class);\n```\n\n## Type Mappings\n\nBorsh                 | Java           | TypeScript\n--------------------- | -------------- | ----------\n`u8` integer          | `byte`         | `number`\n`u16` integer         | `short`        | `number`\n`u32` integer         | `int`          | `number`\n`u64` integer         | `long`         | `BN`\n`u128` integer        | [`BigInteger`] | `BN`\n`f32` float           | `float`        | N/A\n`f64` float           | `double`       | N/A\nfixed-size byte array | `byte[]`       | `Uint8Array`\nUTF-8 string          | `String`       | `string`\noption                | [`Optional`]   | `null` or type\nmap                   | [`Map`]        | N/A\nset                   | [`Set`]        | N/A\nstructs               | `Object`       | `any`\n\n## Frequently Asked Questions\n\n### Q: Why does my class need a default constructor?\n\nClasses used with `Borsh.deserialize()` must have a nullary default constructor\nbecause instances of the class will be instantiated through Java's\n[reflection API](https://www.baeldung.com/java-reflection).\n\n[Borsh]:          https://borsh.io\n[Gradle]:         https://gradle.org\n[Java]:           https://java.com\n[POJO]:           https://en.wikipedia.org/wiki/Plain_old_Java_object\n\n[`BigInteger`]:   https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html\n[`BorshBuffer`]:  https://github.com/near/borshj/blob/master/src/main/java/org/near/borshj/BorshBuffer.java\n[`BorshReader`]:  https://github.com/near/borshj/blob/master/src/main/java/org/near/borshj/BorshReader.java\n[`BorshWriter`]:  https://github.com/near/borshj/blob/master/src/main/java/org/near/borshj/BorshWriter.java\n[`ByteBuffer`]:   https://docs.oracle.com/javase/10/docs/api/java/nio/ByteBuffer.html\n[`InputStream`]:  https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html\n[`Map`]:          https://docs.oracle.com/javase/10/docs/api/java/util/Map.html\n[`Optional`]:     https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html\n[`OutputStream`]: https://docs.oracle.com/javase/10/docs/api/java/io/OutputStream.html\n[`Set`]:          https://docs.oracle.com/javase/10/docs/api/java/util/Set.html\n", "release_dates": []}, {"name": "bos-loader", "description": null, "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# BOS Component Loader\n\nServes a local directory of component files as a JSON payload properly formatted to be plugged into a BOS `redirectMap`. When paired with a viewer configured to call out to this loader, it enables local component development\u2014especially when working on multiple components in parallel.\n\nWorks best when paired with [FroVolod/bos-cli-rs](https://github.com/FroVolod/bos-cli-rs) for component syncing and CI/CD\n\n## Installation\n\nsee GitHub Releases\n\n## Compatibility\nShould work without issue when accessing gateway through Chrome, Arc and Firefox.\n\nBrave requires turning shields off for gateway site.\n\nSafari requires serving over HTTPS, which can be accomplished with ngrok. See [this issue](https://github.com/near/bos-loader/issues/9)\n\n## Usage\n\n1. Run this tool with desired options\n\n```sh\nServes the contents of BOS component files (.jsx) in a specified directory as a JSON object properly formatted for preview on a BOS gateway\n\nUsage: bos-loader [OPTIONS] [ACCOUNT_ID]\n\nArguments:\n  [ACCOUNT_ID]\n          NEAR account to use as component author in preview\n\nOptions:\n  -p, --path <PATH>\n          Path to directory containing component files\n          \n          [default: .]\n\n  -c\n          Use config file in current dir (./.bos-loader.toml) to set account_id and path, causes other args to be ignored\n\n  -w\n          Run in BOS Web Engine mode\n\n      --port <PORT>\n          Port to serve on\n          \n          [default: 3030]\n\n  -r, --replacements <REPLACEMENTS>\n          Path to file with replacements map\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n```\n\nThe only required argument is the account which you want to serve the components from\n\ne.g. running from a directory with `HelloWorld.jsx` in the following way\n\n```bash\nbos-loader michaelpeter.near\n```\n\nresults in\n\n```json\n{\n  \"components\": {\n    \"michaelpeter.near/widget/HelloWorld\": {\n      \"code\": \"return <>Hello World</>;\"\n    }\n  }\n}\n```\n\n2. Go to https://near.org/flags and set the BOS Loader URL to access your bos-loader instance. The default would be `http://127.0.0.1:3030`\n3. Load the component you would like to preview as `https://near.org/<account id>/widget/<component name>`\n   - e.g. from the previous example: `https://near.org/michaelpeter.near/widget/HelloWorld`\n\n## Replacements\n\nThe replacements file is an optional file where placeholders and values they should resolve to are specified. Think of replacements as environment variables for your components which are injected before writing the component code on chain\n\nThe file should have the following format:\n\n```json\n{\n  \"REPL_PLACEHOLDER1\": \"value1\",\n  \"REPL_PLACEHOLDER2\": \"value2\"\n}\n```\n\nThe placeholders in widgets are replaced with specified values. For example the code for the following widget:\n\n```javascript\nreturn <>\n    <div> This is ${REPL_PLACEHOLDER1} </div>\n    <Widget src=\"${REPL_ACCOUNT}/widget/SomeWidget\">\n    <div>${REPL_PLACEHOLDER2}</div>\n</>;\n```\n\nwill be resolved to:\n\n```javascript\nreturn <>\n    <div> This is value1 </div>\n    <Widget src=\"accountId/widget/SomeWidget\">\n    <div>value2</div>\n</>;\n```\n\nwhere accountId is the account passed as an argument.\n\nThe file should **not** contain `REPL_ACCOUNT` placeholder. This placeholder is automatically resolved to `accountId` value.\n\n## Configuration file\n\nSome advanced options can be configured via a `.bos-loader.toml` file in the directory where you run the loader. The following options are available\n\n### paths\n\nspecify multiple accounts and paths to serve components from. You can even serve components from the same directory as multiple accounts\n\n```toml\npaths = [\n  { account = \"near\", path = \"./components\" },\n  { account = \"michaelpeter.near\", path = \"./src\" },\n]\n```\n\n## Multi-device Testing\n\nRun both your loader behind [ngrok](https://ngrok.com/) to test on multiple devices or share your working copy with others!\n\nExample ngrok config:\n\n```yml\nauthtoken: <automatically populated during setup>\ntunnels:\n  api:\n    proto: http\n    addr: 127.0.0.1:3030\n    subdomain: my-loader # change this and use as your loader url e.g. https://my-loader.ngrok.io\nversion: \"2\"\nregion: us\n```\n\nThen start with `ngrok start --all`\n\n## Contributing\n\n### Cutting a new release\n\nOnce all changes are merged into `main`, use `cargo release` to cut a new release. This will automatically update the version in `Cargo.toml`, create a new git tag, and push the tag to GitHub.\n\nGiven the next release version will be `0.9.0`\n\n```bash\n# dry run to make sure everything looks normal\ncargo release 0.9.0\n\n# execute the release\ncargo release 0.9.0 --execute\n```\n", "release_dates": ["2024-02-13T21:03:12Z", "2023-11-30T17:15:56Z", "2023-11-03T19:25:44Z", "2023-11-02T21:37:32Z", "2023-06-27T15:56:44Z", "2023-04-18T22:03:21Z", "2023-04-18T18:37:16Z", "2023-04-13T21:53:09Z", "2023-04-13T21:01:15Z", "2023-04-13T19:54:12Z", "2023-04-12T20:33:37Z"]}, {"name": "bos-web-engine", "description": "Improved execution layer for NEAR decentralized frontend components", "language": "TypeScript", "license": null, "readme": "# BOS Web Engine R&D\n\nThe BOS Web Engine (BWE) is an experimental runtime/rendering layer aimed at replacing the Discovery VM with a full-featured React(or Preact) environment which would enable access to the greater web ecosystem including NPM dependencies. It is an R&D effort lead by Pagoda and will be considered for production usage once our GitHub [issues tagged as `P0 - Release requirement`](https://github.com/near/bos-web-engine/issues?q=is:open+is:issue+label:%22P0+-+Release+requirement%22) are completed.\n\n**Developers who have created components on the Discovery VM should expect a reasonable migration effort to make their components compatible with BWE once it launches. See _\"Will BWE be backwards compatible with existing VM components?\"_ in the [FAQ](#FAQ) section for more info**\n\nSome core goals:\n- ability to import npm packages\n- component code is minimally different from vanilla React\n- isolation of component execution leverages browser sandboxing (iframes)\n- configurable trust model to tune performance when embedded components are known to be safe\n\nExamples of other impactful features we plan to research:\n- TypeScript support\n- Full web API support (canvas, etc)\n- Cross-component global state management\n\nFor a more detailed breakdown of the work, see [issues labeled with `Epic`](https://github.com/near/bos-web-engine/issues?q=is:open+is:issue+label:Epic)\n\nFor a more comprehensive overview of our vision for the project, see our [Press Release / FAQ](./press-release-faq.md) document.\n\n## Solution Architecture\n\nBWE works by executing Component source code in hidden iframes, sandboxed to enforce isolation between Components as well as the application running in the outer window. Those iframes emit render events with the DOM produced, which is then displayed on the page by the outer window application\n\nSee [architecture.md](./architecture.md) for more details\n\n### Writing Components\nSee [components.md](./components.md) for details on the syntax and patterns necessary for writing BWE compatible components\n\n## Discussion\nThis project leverages [GitHub Discussions](https://github.com/near/bos-web-engine/discussions) for decision making, Q&A, implementation discussion between contributors, and more. \n\n## FAQ\n\n### When will BWE be production ready?\n\nAt this point, we are focused on communicating progress and do not have an estimate on a date when BWE will be production ready. Updates will be posted to BOS social feeds from the Pagoda account.\n\n### Will BWE be backwards compatible with existing VM components?\n\nNo. BWE is a complete re-write of the component runtime and will not be backwards compatible with existing components due to significant architectural differences. Components will be similar in many ways since they are already written with JSX, but BWE code will look much more like vanilla React with some additional patterns on top.\n\nOur primary goal is to build the most capable engine to support complex dapps for a vibrant BOS ecosystem, then we will make efforts to ease the migration of existing work as much as possible. There will be ample discussion before any decisions are made on when and how to start switching to BWE once it is ready.\n\n### Can existing React codebases be used with BWE?\n\nWhile the process to convert an existing React codebase to run on BWE will be significantly easier than the previous VM, there will still be some syntax and architecture changes which must be handled manually.\n\n", "release_dates": []}, {"name": "bounties", "description": "Specs for technical and non-technical work that earns NEAR tokens", "language": null, "license": null, "readme": "***UPDATE:** This repo is deprecated, please use [Gigs Board](https://devgovgigs.near.social) to submit your ideas, request funding, and sposor others.*\n\n# Bounties\n*formerly \"/rfp\"*\n\nThese are specifications for work that helps NEAR and the NEAR ecosystem.  The Issues tab will list each of these and their labels will help you search for what you want. \n\n*This is a work in progress so bear with us :)*\n*This currently duplicates some effort with the issues on the [/community repo issues](https://github.com/near/community/issues) as well, which will need to get cleaned up.*\n\n## Overview: Calling Developers, Designers, Product People and Founders!\n\nTo help the community better participate in the creation of everything from core infrastructure to design sprints, this repo is designed to surface the key needs discovered by people who are working on the NEAR Project and in its ecosystem.  It is the basic precursor to future Grants Program activities and it is intended to help anyone clearly and transparently participate in meaningful projects that support NEAR.\n\n\n**These specs are emphatically both technical and non-technical in nature**\n\nOver time, we will better clarify the procedure for defining specs, working on specs, and receiving grants or rewards for delivering on them.\n\n\n### How to get involved\n\nThis is a work in progress!  If you see a spec or RFP pop up here, drop a comment on it or reach out to the maintainer.\n\nIf you're not sure what to build, see [this thread of ideas](https://gov.near.org/t/tools-missing-in-the-ecosystem/75/16).\n\nIf you do want to build something not on this list, check out the [grants program](https://www.near.org/grants).\n\n\n### Token rewards\n\nEvery spec will be different. Many may not list specific rewards, particularly as we are figuring this out.  Your best path forward is to contact the producer of the spec or comment directly on it so they can engage with you and figure out what will make it worth it.\n\nAs always, eligibility requirements will vary for grants and rewards so it's also important to check in on that.  For example, prior the [final phase of MainNet](https://near.org/blog/near-mainnet-genesis/) it will be very challenging to offer token-based rewards in certain geographies.\n\n\n## Examples\n\nSome examples of potential RFP projects might include large and small, technical and non-technical projects:\n\n1. Another NEAR client implementation, for example in Go\n2. A third party wallet integration\n3. A user research survey of projects and founders across the ecosystem\n4. A design for a sample delegation interface in a wallet\n4. A rapid prototyping framework which shows how NEAR is different from other UX flows\n\nSee this [development catalog hackpad](https://hackmd.io/@vvNs0QmHR-uhQ4-90rbhlw/BkByX1kbu) for more ideas and examples of what already exists.\n\n\n## FAQ\n### How is building for a Bounty different from addressing a code issue?\n\nIf you are a developer, you can get involved directly with the main project repos by going directly to those and checking out the open issues.  The Bounty specs in this repo are intended to involve projects which are not related to existing repos.\n\n### Does this include marketing-style bounties?\n\nNo, this only includes bounties that can be claimed by a single use. A listing of broader community bounties will be linked here when available.\n\n\n### What kinds of tasks should be included here?\n\nSome tasks are large (building a new client) and others are small (translating a blog post).\nSome tasks are technical and others are not.\nAll of these have a home in this repo.\n\n\n### Who can start a bounty?\n\nAnyone who intends to pay the reward can start a bounty, though bounties which are counter to the high level goals of the project will not be accepted.\n\n\n## Helpful Links\n\n1. The [NEAR Grants Program](https://gov.near.org/t/tools-missing-in-the-ecosystem/75/16) is where to go if you have a project idea and need support.\n2. The main [Contributor Program page](https://near.org/contributor) where you can participate in a wide range of community-focused activities (usually these are more bite-sized than projects in this repo)\n2. The [Community coordination repo](https://github.com/near/community) where community activities are coordinated.\n3. The [Events Repo](https://github.com/nearprotocol/near-events) where events that team members might sponsor, speak at or host are submitted and tracked\n3. Any of the repos in the [NEAR Github](https://github.com/near) will have READMEs listing their contribution process\n\n\n## TODO\n\n* [x]  Create an issue template to make it easier for people to submit specs, categorize them and otherwise interface with this repo\n* [x] Create a Trello board or other project tracking device which better exposes the actual progress of these specs.\n* [ ] Clarify the way to onboard with a new spec \n* [ ] Clarify to spec producers how exactly they should put together a spec\n* [ ] Clarify the grant/reward process associated with them\n* [ ] Make sure everything everywhere links to this -- Contributor Program, website, blog posts, etc as a tangible set of ways to get involved.\n", "release_dates": []}, {"name": "bwe-demos", "description": "Demo components for BOS Web Engine", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# bwe-demos\nDemo components for BOS Web Engine\n", "release_dates": []}, {"name": "calibrator", "description": "Validator machine calibration utility", "language": "Rust", "license": null, "readme": "\n## Validator machine calibration utility\n\nTo make sure gas cost correlates with actual wall clock time we need to be able to calibrate machine and IO performance\nacross different hardware and OSes.\n\nThis utility measures those properties.\n\n## Usage\n\nUse like this\n\n```bash\n  cargo install --git https://github.com/near/calibrator --branch main\n  calibrator -i 1000000 -c 1000000\n```\n\n## Plots\n\nTo measure with wider ranges on input sizes use smth like\n```bash\n  calibrator \\\n  --io-range \\\n100,\\\n1000,\\\n100000,\\\n200000,\\\n1000000,\\\n2000000,\\\n10000000,\\\n20000000,\\\n30000000,\\\n40000000,\\\n50000000,\\\n300000000,\\\n600000000,\\\n1000000000\\\n  --cpu-range \\\n1000,\\\n10000,\\\n100000\\\n  --output 'gnuplot:data.txt'\n```\n\nIt will produce two files, `io_data.txt` and `cpu_data.txt` which could be plotted with `gnuplot`, i.e.\n\n```bash\n    brew install gnuplot\n    gnuplot plot.gn\n    open perf.png\n```\n", "release_dates": []}, {"name": "cargo-near", "description": "Cargo extension for building Rust smart contracts on NEAR", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<!-- markdownlint-disable MD014 -->\n\n<div align=\"center\">\n\n  <h1><code>cargo-near</code></h1>\n\n  <p>\n    <strong>Cargo extension for building <a href=\"https://github.com/near/near-sdk-rs\">near-sdk-rs</a> smart contracts and <a href=\"https://github.com/near/abi\">ABI schemas</a> on NEAR</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/near/cargo-near/actions/workflows/test.yml?query=branch%3Amain\"><img src=\"https://github.com/near/cargo-near/actions/workflows/test.yml/badge.svg\" alt=\"Github CI Build\" /></a>\n    <a href=\"https://crates.io/crates/cargo-near\"><img src=\"https://img.shields.io/crates/v/cargo-near.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/cargo-near\"><img src=\"https://img.shields.io/crates/d/cargo-near.svg?style=flat-square\" alt=\"Download\" /></a>\n  </p>\n\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Installation\n\n<details>\n  <summary>Install prebuilt binaries via shell script (Linux, macOS)</summary>\n\n```sh\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/cargo-near/releases/latest/download/cargo-near-installer.sh | sh\n```\n</details>\n\n<details>\n  <summary>Install prebuilt binaries via powershell script (Windows)</summary>\n\n```sh\nirm https://github.com/near/cargo-near/releases/latest/download/cargo-near-installer.ps1 | iex\n```\n</details>\n\n<details>\n  <summary>Install prebuilt binaries into your Node.js application</summary>\n\n```sh\nnpm install cargo-near\n```\n</details>\n\n<details>\n  <summary>Compile and install from source code (Cargo)</summary>\n\n```sh\ncargo install cargo-near\n```\n\nor, install the most recent version from git repository:\n\n```sh\n$ git clone https://github.com/near/cargo-near\n$ cargo install --path cargo-near\n```\n</details>\n\n## Usage\n\nSee `cargo near --help` for a complete list of available commands or run `cargo near` to dive into interactive mode. Help is also available for each individual command with a `--help` flag, e.g. `cargo near build --help`.\n\n```console\ncargo near\n```\n\nStarts interactive mode that will allow to explore all the available commands.\n\n```console\ncargo near build\n```\n\nBuilds a NEAR smart contract along with its [ABI](https://github.com/near/abi) (while in the directory containing contract's Cargo.toml).\n\nYou can also make this command embed ABI into your WASM artifact by adding `--embed-abi` parameter. Once deployed, this will allow you to call a view function `__contract_abi` to retrieve a [ZST](https://facebook.github.io/zstd/)-compressed ABI.\n\n```console\ncargo near abi\n```\n\nGenerates NEAR smart contract's [ABI](https://github.com/near/abi) (while in the directory containing contract's Cargo.toml).\n\n```console\ncargo near create-dev-account\n```\n\nGuides you through creation of a new NEAR account on [testnet](https://explorer.testnet.near.org).\n\n```console\ncargo near deploy\n```\n\nBuilds the smart contract (equivalent to `cargo near build`) and guides you to deploy it to the blockchain.\n\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as below, without any additional terms or conditions.\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": ["2024-02-23T01:35:35Z", "2024-02-03T22:09:04Z", "2024-01-27T18:06:13Z", "2024-01-25T13:52:13Z", "2023-11-24T17:35:48Z", "2023-10-19T14:15:58Z", "2023-10-02T15:57:52Z", "2023-06-23T18:02:51Z", "2022-11-10T14:00:41Z", "2022-09-01T08:35:59Z"]}, {"name": "cargo-near-new-project-template", "description": "temp project to become part of `cargo near new` command", "language": "Rust", "license": null, "readme": "# cargo-near-new-project-name\n\ncargo-near-new-project-description\n\n## Quickstart Guide\n\nYou can start coding on the NEAR Rust stack in less than a minute, thanks to [NEAR Devcontainers](https://github.com/near/near-devcontainers). How?\n\n1. Click **Use this template** > **Create a new repository**\n\n<img width=\"750\" alt=\"Create a new repository\" src=\"https://github.com/njelich/cargo-near-new-project-template/assets/12912633/d59d89f1-8bc4-42f1-8e0d-842521d87768\">\n\n2. In your newly created repo, click **Code** > **Codespaces** > **Create codespace on main**\n\n<img width=\"750\" alt=\"Create Codespace\" src=\"https://github.com/njelich/cargo-near-new-project-template/assets/12912633/352566cf-2eca-4d42-8232-6136ea8ec9d3\">\n\n## Where to Get Started?\n\nStart writing your contract logic in [src/lib.rs](src/lib.rs) and integration tests in [tests/test_basics.rs](tests/test_basics.rs).\n\n## How to Build Locally?\n\nInstall [`cargo-near`](https://github.com/near/cargo-near) and run:\n\n```bash\ncargo near build\n```\n\n## How to Test Locally?\n\n```bash\ncargo test\n```\n\n## How to Deploy?\n\nDeployment is automated with GitHub Actions CI/CD pipeline.\nTo deploy manually, install [`cargo-near`](https://github.com/near/cargo-near) and run:\n\n```bash\ncargo near deploy <account-id>\n```\n\n## Useful Links\n\n- [cargo-near](https://github.com/near/cargo-near) - NEAR smart contract development toolkit for Rust\n- [near CLI](https://near.cli.rs) - Iteract with NEAR blockchain from command line\n- [NEAR Rust SDK Documentation](https://docs.near.org/sdk/rust/introduction)\n- [NEAR Documentation](https://docs.near.org)\n- [NEAR StackOverflow](https://stackoverflow.com/questions/tagged/nearprotocol)\n- [NEAR Discord](https://near.chat)\n- [NEAR Telegram Developers Community Group](https://t.me/neardev)\n- NEAR DevHub: [Telegram](https://t.me/neardevhub), [Twitter](https://twitter.com/neardevhub)\n", "release_dates": []}, {"name": "clusterfuzz", "description": "Scalable fuzzing infrastructure. Fork from official ClusterFuzz repository", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# ClusterFuzz\n\n<p align=\"center\">\n  <img src=\"docs/images/logo.png\" width=\"400\">\n</p>\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/google/clusterfuzz/badge)](https://api.securityscorecards.dev/projects/github.com/google/clusterfuzz)\n\nClusterFuzz is a scalable [fuzzing](https://en.wikipedia.org/wiki/Fuzzing)\ninfrastructure that finds security and stability issues in software.\n\nGoogle uses ClusterFuzz to fuzz all Google products and as the fuzzing\nbackend for [OSS-Fuzz].\n\nClusterFuzz provides many features which help seamlessly integrate fuzzing into\na software project's development process:\n- Highly scalable. Can run on any size cluster (e.g. OSS-Fuzz instance runs on\n  100,000 VMs).\n- Accurate deduplication of crashes.\n- Fully automatic bug filing, triage and closing for various issue trackers\n  (e.g. [Monorail], [Jira]).\n- Supports multiple [coverage guided fuzzing engines]\n  ([libFuzzer], [AFL], [AFL++] and [Honggfuzz])\n  for optimal results (with [ensemble fuzzing] and [fuzzing strategies]).\n- Support for [blackbox fuzzing].\n- Testcase minimization.\n- Regression finding through [bisection].\n- Statistics for analyzing fuzzer performance, and crash rates.\n- Easy to use web interface for management and viewing crashes.\n- Support for various authentication providers using [Firebase].\n\n## Overview\n\n<p align=\"center\">\n  <img src=\"docs/images/overview.png\">\n</p>\n\n## Documentation\nYou can find detailed documentation [here](https://google.github.io/clusterfuzz).\n\n## Trophies\nAs of February 2023, ClusterFuzz has found ~27,000 bugs in Google (e.g. [Chrome]). Additionally, ClusterFuzz has helped identify and fix over [8,900] vulnerabilities and [28,000] bugs across [850] projects integrated with [OSS-Fuzz].\n\n## Getting Help\nYou can [file an issue](https://github.com/google/clusterfuzz/issues/new) to ask\nquestions, request features, or ask for help.\n\n## Staying Up to Date\nWe will use [clusterfuzz-announce(#)googlegroups.com](https://groups.google.com/forum/#!forum/clusterfuzz-announce) to make announcements about ClusterFuzz.\n\n## ClusterFuzzLite\nFor a more lightweight version of ClusterFuzz that runs on CI/CD\nsystems, check out [ClusterFuzzLite](http://github.com/google/clusterfuzzlite).\n\n[Chrome]: https://bugs.chromium.org/p/chromium/issues/list?can=1&q=label%3AClusterFuzz+-status%3AWontFix%2CDuplicate\n[8,900]: https://bugs.chromium.org/p/oss-fuzz/issues/list?q=status%3AFixed%2CVerified%20Type%3DBug-Security&can=1\n[28,000]: https://bugs.chromium.org/p/oss-fuzz/issues/list?q=status%3AFixed%2CVerified%20Type%3DBug&can=1\n[850]: https://github.com/google/oss-fuzz/tree/master/projects\n[OSS-Fuzz]: https://github.com/google/oss-fuzz\n[Monorail]: https://opensource.google.com/projects/monorail\n[Jira]: https://www.atlassian.com/software/jira\n[bisection]: https://en.wikipedia.org/wiki/Bisection_(software_engineering)\n[Firebase]: https://firebase.google.com/docs/auth\n[libFuzzer]: http://llvm.org/docs/LibFuzzer.html\n[AFL]: https://github.com/google/AFL\n[AFL++]: https://github.com/AFLplusplus/AFLplusplus\n[Honggfuzz]: https://github.com/google/honggfuzz\n[blackbox fuzzing]: https://google.github.io/clusterfuzz/setting-up-fuzzing/blackbox-fuzzing/\n[coverage guided fuzzing engines]: https://google.github.io/clusterfuzz/setting-up-fuzzing/libfuzzer-and-afl/\n[fuzzing strategies]: https://i.blackhat.com/eu-19/Wednesday/eu-19-Arya-ClusterFuzz-Fuzzing-At-Google-Scale.pdf#page=27\n[ensemble fuzzing]: https://www.usenix.org/system/files/sec19-chen-yuanliang.pdf\n", "release_dates": []}, {"name": "community", "description": "Coordination repository of Near Community", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Community\n> Coordination repository for the NEAR Community\n\nThe content of this repository, the issue tracker, and the pull requests are used to coordinate the efforts towards making the NEAR Community a great place.\n\nBelow, you can find a list of resources to help you get started.\n\n## Quick Links\n\n### Communication Channels\n\n* [Telegram Announcement Channel](https://t.me/cryptonear)\n* [Discord Community Channel](https://near.chat/)\n\nAnd sign-up to our [newsletter](https://near.org/newsletter/) to receive all updates summarised right to your inbox.\n\n### Community Meetings\n\nYou can find the list of our community meetings [here](https://calendar.google.com/calendar/embed?src=nearprotocol.com_ltk89omsjnc2ckgbtk6h9157i0%40group.calendar.google.com&ctz=America%2FLos_Angeles).\n\nWe currently host the following meetings:\n* Community Talk -- Bi-weekly events to which we invite founders and researches in the space to introduce their project\n* NEAR Middleware Work Group (Wasm, RPC, Bridge, Runtime, Trie, etc) -- Weekly event\n* NEAR Bridge Work Group -- Weekly event\n* NEAR Engineering Weekly -- Weekly event\n\n### Community Resources\n\n* [NEAR Blog](https://near.org/blog/)\n* [NEAR YouTube Channel](https://www.youtube.com/channel/UCuKdIYVN8iE3fv8alyk1aMw)\n* [NEAR Technical Resources](https://near.org/technology/)\n* [Bounties repository (formerly \"rfp\")](https://github.com/near/bounties) where grant-worthy projects are listed.\n\n### Developer Resources\n\nIf you just starting to learn about NEAR Protocol then please read our [documentation](https://docs.nearprotocol.com/).\nTo get inspiration, have a look at our [example projects](http://examples.nearprotocol.com/).\n\nIf you have any questions, please head over to our [Discord server](https://near.chat/).\n\n## Join us\n\n### Contributions\n\nWe love contributions!\n\n*  Check-out our [contribution guide and examples](https://docs.nearprotocol.com/docs/contribution/contribution-overview)\n*  Create educational content, contribute to our codebase, documentation or build your own tutorials in our [Contributor Program](https://nearprotocol.com/contributor/)\n*  No matter if you lead an existing community or you want to start a community around NEAR and the open web, we would love to have you part of our [Guild Program](https://near.org/guilds)\n*  Look for the starter issues on [GitHub](https://github.com/nearprotocol/)\n*  Take on a [bounty](https://github.com/near/bounties/issues)\n\n### Community Ideas \n\nWe would love to hear your community ideas!\n\nTo submit your ideas on how to make the NEAR Community a better place, provide feedback, or propose initiatives, please file an issue in this [community repository](https://github.com/near/community/issues).\n\nIf you would like to collaborate on events, please submit an issue in our events [repository](https://github.com/nearprotocol/near-events/issues).\n\nSomeone from the core team will get back to you within a week.\n\n## Security \n\nNEAR would never reach out to you directly and ask you to send funds, share your login credentials, private keys, or other sensitive information.\n\nIf you came across vulnerabilities in our code, or you want to flag other security-related concerns, please follow the security protocol detailed [here](https://github.com/nearprotocol/nearcore/blob/master/SECURITY.md).\n\n## Who we are?\n\nLearn more about the NEAR Protocol in [the Beginner's Guide](https://near.org/blog/the-beginners-guide-to-the-near-blockchain/). At a high level, NEAR is a permissionless, Proof-of-Stake blockchain protocol that anyone can access, add transactions to, or read from. The public NEAR blockchain is an instantiation of the reference code at http://github.com/near/nearcore, but theoretically, this repo could be forked and deployed as a separate chain, as much as many protocols have done to build upon the core Bitcoin code.\n\n#### The NEAR Foundation\nA [non-profit foundation](https://near.org/blog/introducing-the-near-foundation/) headquartered in Switzerland which is responsible for contracting protocol maintainers, funding ecosystem development, and shepherding core governance of the protocol.\n", "release_dates": []}, {"name": "contract-wizard", "description": "BOS component to generate Rust code for NEAR smart contracts using near-sdk-contract-tools", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Contract Wizard\n\n## Setup\n\n1. Install dependencies: `npm install`.\n2. Run `npm run prepare` to install commit hooks.\n3. Run `npm run build:dev` to build the project.\n\n## Generating code using the CLI\n\nThere's a simple CLI script `src/cli.ts` that you can use to try out the code generation.\n\n```bash\nnpm run -s cli 'ft:{\"name\":\"My Fungible Token\",\"symbol\":\"MFT\",\"decimals\":24,\"preMint\":10}' > my_ft_contract.rs\n```\n\n## Testing\n\nRun `npm run test` to run the tests.\n\nThe tests work by generating the Rust code, writing it to `tests/src/lib.rs`, and then trying to compile it to WASM. Compilation failure = test failure.\n\nFor this to work, you have to have the Rust build tools installed, as well as the `wasm32-unknown-unknown` target. You can install the WASM target with:\n\n```bash\nrustup target add wasm32-unknown-unknown\n```\n\n## Authors\n\n- Jacob Lindahl <jacob.lindahl@near.org> [@sudo_build](https://twitter.com/sudo_build)\n", "release_dates": []}, {"name": "core-contracts", "description": "Core contracts: reference staking pool, lockup, voting, whitelist, multisig.", "language": "Rust", "license": null, "readme": "# Core contracts\n\n- [Lockup / Vesting contract](./lockup/)\n- [Lockup Factory](./lockup-factory/)\n- [Multisig contract](./multisig/)\n- [Staking Pool / Delegation contract](./staking-pool/)\n- [Staking Pool Factory](./staking-pool-factory/)\n- [Voting Contract](./voting/)\n- [Whitelist Contract](./whitelist/)\n\n## Building and deploying\n\nSee [scripts](./scripts/) folder for details.\n\n## Initializing Contracts with near-shell\n\nWhen setting up the contract creating the contract account, deploying the binary, and initializing the state must all be done as an atomic step.  For example, in our tests for the lockup contract we initialize it like this:\n\n```rust\npub fn init_lockup(\n        &self,\n        runtime: &mut RuntimeStandalone,\n        args: &InitLockupArgs,\n        amount: Balance,\n    ) -> TxResult {\n        let tx = self\n            .new_tx(runtime, LOCKUP_ACCOUNT_ID.into())\n            .create_account()\n            .transfer(ntoy(35) + amount)\n            .deploy_contract(LOCKUP_WASM_BYTES.to_vec())\n            .function_call(\n                \"new\".into(),\n                serde_json::to_vec(args).unwrap(),\n                200000000000000,\n                0,\n            )\n            .sign(&self.signer);\n        let res = runtime.resolve_tx(tx).unwrap();\n        runtime.process_all().unwrap();\n        outcome_into_result(res)\n    }\n```\n\n\nTo do this with near shell, first add a script like `deploy.js`:\n\n```js\nconst fs = require('fs');\nconst account = await near.account(\"foundation\");\nconst contractName = \"lockup-owner-id\";\nconst newArgs = {\n  \"lockup_duration\": \"31536000000000000\",\n  \"lockup_start_information\": {\n    \"TransfersDisabled\": {\n        \"transfer_poll_account_id\": \"transfers-poll\"\n    }\n  },\n  \"vesting_schedule\": {\n    \"start_timestamp\": \"1535760000000000000\",\n    \"cliff_timestamp\": \"1567296000000000000\",\n    \"end_timestamp\": \"1661990400000000000\"\n  },\n  \"staking_pool_whitelist_account_id\": \"staking-pool-whitelist\",\n  \"initial_owners_main_public_key\": \"KuTCtARNzxZQ3YvXDeLjx83FDqxv2SdQTSbiq876zR7\",\n  \"foundation_account_id\": \"near\"\n}\nconst result = account.signAndSendTransaction(\n    contractName,\n    [\n        nearAPI.transactions.createAccount(),\n        nearAPI.transactions.transfer(\"100000000000000000000000000\"),\n        nearAPI.transactions.deployContract(fs.readFileSync(\"res/lockup_contract.wasm\")),\n        nearAPI.transactions.functionCall(\"new\", Buffer.from(JSON.stringify(newArgs)), 100000000000000, \"0\"),\n    ]);\n```\n\nThen use the `near repl` command. Once at the command prompt, load the script:\n\n```js\n> .load deploy.js\n```\n\nNote: `nearAPI` and `near` are both preloaded to the repl's context.\n", "release_dates": []}, {"name": "core-contracts-as", "description": "The core contracts implemented in AssemblyScript", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# core-contracts-as\n\nThe [core contracts](https://github.com/near/core-contracts) implemented in AssemblyScript.\n\n## build\n\n```bash\nyarn build\n# or\nnpm run build\n```\n\nAdd `--target debug` for a debug build.\n\n## test\n\n### setup\n\nTo setup the repo for testing using the Rust contracts and for reference use `yarn setup` or `node setup.sh`\n\nTo run all the tests:\n\n```bash\nyarn test\n# or\nnpm run test\n```\n\nTo run just one test, `yarn asp -f <file_pattern>` or `yarn jest -f <file_pattern>`", "release_dates": []}, {"name": "corgis", "description": "simple solution for corgi NFT", "language": "JavaScript", "license": null, "readme": "# Explore [Corgis](http://corgis.near.org) when you first see this!\n\n## To run on main Testnet\n\n### Requirements\n\n#### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x\n\n1. node and npm\n\n2. near shell\n\nInstall with\n\n```sh\nnpm i -g near-cli\n```\n\n3.(optional) install yarn to build\n\n```sh\nnpm i -g yarn\n```\n\n4.Rust\n\nYou need to install Rustup in order to compile Rust contracts.\nSee the official guide on how to set up Rust in your local environment.\n\n> <https://www.rust-lang.org/tools/install>\n\nBy installing `rustup`, you will add the Rust compiler and the `cargo` package manager to your system.\n\nThe NEAR platform leverage the use of WASM to execute smart contracts.\nThus, in order to build a suitable binary for the NEAR platform,\nwe must install the wasm32 target:\n\n```sh\nrustup target add wasm32-unknown-unknown\n```\n\n### Procedure (deploy the contract for your own project)\n\nStep 1: Create account for the contract.\n\nIn the terminal\n\n```sh\nnear login\n```\n\nclick the link and create your own contract ID on NEAR Testnet\n\n*After you see the context, \"Logged in as [ YOUR_NAME ] with public key [ ed25519:XXXXXX... ] successfully\", you are done.*\n\nStep 2: Deploy the contract on the account\n\nSet the following environment variable\n\n```sh\nexport CONTRACT_NAME=<YOUR_NAME>\n```\n\nAlternatively, modify src/config.js line that sets the contractName. Set it with Id from step 1.\n\n```js\nconst CONTRACT_NAME = process.env.CONTRACT_NAME || \"new-corgis\"; /* TODO: fill this in! */\n```\n\nStep 3:\n\n(For Mac and Ubuntu):\nFinally, run the command in your terminal.\n\n```sh\nnpm install && npm run start\n```\n\nwith yarn:\n\n```sh\nyarn install && yarn start\n```\n\n(For Windows):\n\n```sh\nyarn install\nyarn start\n```\n\nThe server that starts is for static assets and by default serves them to localhost:1234. Navigate there in your browser to see the app running!\n\n## To Explore\n\n- `contract/src/lib.rs` for the contract code\n- `src/index.html` for the front-end HTML\n- `src/main.js` for the JavaScript front-end code and how to integrate contracts\n- `src/app.js` for the first react component\n\nFor information about the contract, see [contract/README.md](contract/).\n\n### To run on Local Node (May in the old version and need update)\n\nStep 1:\nGet nearcore\n\nStep 2:\nUse command ```./scripts/start_localnet.py --local``` to start the local node\n\nStep 3:\nInstall serve with:\n\n```sh\nnpm i serve\n```\n\nUse command ```serve src -p 3000``` to start on localhost:3000\n\nStep 4:\nStart frontend with command:\n\n```sh\nNODE_ENV=local yarn start\n```\n\nNow, open localhost:3000. Navigate there in your browser to see the app running!\n\nStep 5:\nUse wallet/login/index.html to create account and start exploring.\n", "release_dates": []}, {"name": "create-near-app", "description": "Create a starter app hooked up to the NEAR blockchain", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Create NEAR App\n\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/nearprotocol/create-near-app) \n\nQuickly build apps backed by the [NEAR](https://near.org) blockchain\n\n\n## Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org) installed \u2013 we are targeting versions `16+` for JS contracts and `18+` for frontend/gateways.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n## Getting Started\n\nTo create a new NEAR project run this and follow interactive prompts:\n\n    npx create-near-app@latest\n\nFollow the instructions in the README.md in the project you just created! \ud83d\ude80\n\n\n### Contracts\nYou can create contracts written in:\n- `Javascript`\n- `Rust`\n\n:::\nWe strongly recommend you to follow our [smart contract quickstart](https://docs.near.org/develop/contracts/welcome) if you are new to NEAR contracts.\n:::\n\nFor testing we use a sandboxed environment. You can write the tests in JavaScript or Rust.\n\n### WebApps\n\nYou can create a web application in:\n\n- [React](https://reactjs.org/)\n- Vanilla JavaScript\n\n:::\nWe strongly recommend you to follow our [web app quickstart](https://docs.near.org/develop/integrate/welcome) if you are new to NEAR WebApps.\n:::\n\n> Consider using `pnpm` to handle the webapps, since it is much faster than `npm` and `yarn`.\n\n## Using CLI arguments to run `create-near-app`\n\nThis CLI supports arguments to skip interactive prompts:\n\n```shell\nnpx create-near-app\n  <project-name>\n  --frontend next|vanilla|none\n  --contract js|rs|none\n  --tests js|rs|none\n  --install\n```\n\nUse `--install` to automatically install dependencies from all `package.json` files.\n\nWhen using arguments, all arguments are required, except for `--install`.\n\n## Getting Help\n\nCheck out our [documentation](https://docs.near.org) or chat with us on [Discord](http://near.chat). We'd love to hear from you!\n\n\n## Contributing to `create-near-app`\n\nTo make changes to `create-near-app` itself:\n\n* clone the repository (Windows users, [use `git clone -c core.symlinks=true`](https://stackoverflow.com/a/42137273/249801))\n* in your terminal, enter one of the folders inside `templates`, such as `templates/frontend/vanilla`\n* now you can run `pnpm install` to install dependencies and `pnpm run dev` to run the local development server, just like you can in a new app created with `create-near-app`\n\n\n#### About commit messages\n\n`create-near-app` uses semantic versioning and auto-generates nice release notes & a changelog all based off of the commits. We do this by enforcing [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/). In general the pattern mostly looks like this:\n\n    type(scope?): subject  #scope is optional; multiple scopes are supported (current delimiter options: \"/\", \"\\\" and \",\")\n\nReal world examples can look like this:\n\n    chore: run tests with GitHub Actions\n\n    fix(server): send cors headers\n\n    feat(blog): add comment section\n\nIf your change should show up in release notes as a feature, use `feat:`. If it should show up as a fix, use `fix:`. Otherwise, you probably want `refactor:` or `chore:`. [More info](https://github.com/conventional-changelog/commitlint/#what-is-commitlint)\n\n\n#### Deploy `create-near-app`\n\nIf you want to deploy a new version, you will need two prerequisites:\n\n1. Get publish-access to [the NPM package](https://www.npmjs.com/package/near-api-js)\n2. Get write-access to [the GitHub repository](https://github.com/near/near-api-js)\n3. Obtain a [personal access token](https://gitlab.com/profile/personal_access_tokens) (it only needs the \"repo\" scope).\n4. Make sure the token is [available as an environment variable](https://github.com/release-it/release-it/blob/master/docs/environment-variables.md) called `GITHUB_TOKEN`\n\nThen run one script:\n\n    npm run release\n\nOr just `release-it`\n\n\n## License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2024-02-08T17:06:18Z", "2024-02-08T16:53:01Z", "2024-01-24T17:19:39Z", "2024-01-18T18:31:10Z", "2024-01-18T17:24:31Z", "2024-01-16T10:42:12Z", "2024-01-02T15:26:28Z", "2023-11-16T13:26:49Z", "2023-11-06T23:32:50Z", "2022-06-02T09:48:28Z", "2022-05-27T13:44:44Z", "2021-11-01T16:59:31Z", "2021-05-11T16:27:01Z", "2021-03-12T02:37:44Z", "2020-12-16T03:08:26Z", "2020-12-06T17:43:39Z", "2020-12-02T02:59:10Z", "2020-11-28T02:54:10Z", "2020-11-03T23:07:07Z", "2020-10-20T02:52:51Z", "2020-09-29T19:36:52Z", "2020-09-15T23:34:42Z", "2020-08-26T00:09:20Z", "2020-07-27T18:47:19Z", "2020-07-24T01:55:19Z", "2020-07-23T17:21:42Z", "2020-07-01T22:54:03Z", "2020-05-08T07:52:03Z", "2020-05-01T00:51:52Z", "2020-04-16T20:06:52Z"]}, {"name": "data-platform", "description": "Near.org Data Platform Initiatives and Epics: Recommendations, Search, Analaytics", "language": null, "license": null, "readme": "# This is a space of Data Platform team's issues\n\nNear.org Data Platform Initiatives and Epics: Recommendations, Search, Analaytics\n\n## How to use GitHub\n\n- Roadmap: https://github.com/orgs/near/projects/80/views/3?sliceBy%5Bvalue%5D=Data+Platform\n- QueryAPI tickets in queryapi repo\n- General Data platform epics and tickets are data-platform repo\n\n## Data Platform Initiatives\n- Should have clear title that could be understood by anyone in the ecosystem\n- Should have Data Platform team assigned\n- Should have a description with high-level functionality, without technical details\n- Should have at least one epic in the relevant team\u2019s repository that implements it\n- Should have defined Priority and Impact\n\n## Data Platform Epics\n- Should be used to group issues into user-facing functionality that is publicly announced.\n- Should take at most one quarter to complete.\n- Should have the title that describes the end-user value. If this is not possible (i.e. the epic is about refactoring),consider moving sub-issues to other epics that have appropriate title.\n- Should be connected to a Pagoda Initiative in the [Pagoda Public Roadmap](https://github.com/orgs/near/projects/80/views/3?sliceBy%5Bvalue%5D=Data+Platform)\n- Ideally have a milestone assigned. The milestone is some public announcement, conference, a sunset of a functionality or some other important external event.\n\n## Creating GitHub issues\n- Should be included in the Data Platform project (now automated)\n- Should be connected to a relevant Epic\n- Should be linked to an issue that blocks it, or if it is blocking another issue.\n- Should not have an assigned person if it is unclear who will work on this issue.\n- Ideally have an appropriate label: `bug`, `indexer`\n\n## Issues lifecycle\n- Todo\n- Selected\n- In Progress\n- In Review\n- Released to Staging (through GitHub Actions)\n- Issue is 'Done' when it is released to production (through GitHub Actions)\n\n## Working on GitHub issues\n- Ensure the state is 'In Progress'\n- If issue involves writing code, start a draft PR as soon as possible, so that the team can see the progress\n- Connect it to a relevant Pull Request. If PR-linking functionality doesn\u2019t work, drop PR link to a comment\n\n## Communication\n- All ticket-related communication should be in issues: questions about functionality\n- If the communication happens in slack, the decision should be pasted in the description of the issue or in a comment\n", "release_dates": []}, {"name": "dev-calendar", "description": "NEAR developer calendar for community meetings and events.", "language": "JavaScript", "license": null, "readme": "# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n", "release_dates": []}, {"name": "dev-platform", "description": "Berry Pickers are a tactical, cross-team squad that \u201ccherry picks\u201d certain tasks deemed as the best next steps to improve partner / developer experience, and move the technology forward. Think token standards, contract upgrade paths, runtime features, best practices, and more!", "language": null, "license": null, "readme": "**Berry Pickers** are a tactical, cross-team squad that \u201ccherry picks\u201d certain tasks deemed as the best next steps to improve partner / developer experience, and move the technology forward. Think token standards, contract upgrade paths, runtime features, best practices, and more!\n\nThis repository is the home for the Berry Pickers team at NEAR. There are a few different resources that may be helpful for members of the NEAR Collective, the NEAR community, and folks interested in learning more:\n\n- The Governance Forum \u2014 see the items tagged as [related to Berry Pickers](https://gov.near.org/c/dev/berry-pickers/23)\n- The [Kanban board of upcoming tasks](https://github.com/orgs/near/projects/10)\n- The **Projects** tab in Github, listed in the horizontal tabs at the top. (Items may also be included in the Kanban board above.)\n- The Berry Pickers [channel on Discord](https://discord.gg/xsDCMXacdX)\n- Weekly [Github Discussion updates](https://github.com/near/community/discussions/categories/berry-pickers) on priorities, progress, etc.\n", "release_dates": []}, {"name": "devrel", "description": "The space for DevRel", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# devrel\nDeveloper Relations @NEARProtocol\n\n# Kanban Board\nhttps://github.com/orgs/near/projects/14\n\nEpics (composed of many tasks)\n\n1. Add an issue (this enables GH comments on your Epic)\n2. Link to gov.near.org (devrel category) post if you want community ideas and input - recommended\n3. Add notes for sub-tasks to the same board\n4. Done when all tasks are done\n\nTasks\n\n1. Use notes and add to board\n2. Edit notes to update on task progress\n3. Move through board as progress is made\n\n## Notes\n\nMinimal Process Goals\n\n1. Work in public \n2. Self document\n3. Everyone can see what everyone is doing in one place\n\n", "release_dates": []}, {"name": "devx", "description": "This is the home of NEAR collective developer experience plans and roadmap. ", "language": null, "license": null, "readme": "# Welcome to DevX at NEAR!\n\nThis is the place to find out what we're adding to our developer tools and experiences, see how you can contribute, and see who on the core team is a good person to ask questions to.\n\n## What am I looking at?\n\nThis is where DevX for the NEAR collective is managed. You'll want [ZenHub](https://www.zenhub.com/) (A project management extension for GitHub issues) to see the overall epics. You can view what's in progress in the issues without it. If you have ideas for what you'd like to see specific to your experience as a developer, this is a great place to suggest.\n\n## How do I use this repo?\n\nYou can submit an issue like any other repo. These are automatically added to the `icebox` and we review these each Tuesday at 9am PST in sync. We also watch this outside of that time.\n\n## DevX Sync | 30-Jun-2020\n\n### Agenda/Notes\n\n* Decide if we're going to spend the next several weeks on naj, and near-shell refactor.\n  * Key management for devs in near-shell\n  * Multi-contract management in near-shell and wherever else we need it\n  * **Things that need fixing**\n    * near deploy_and_init\n      * Blocking because of security vulnerability\n      * For people from Eth, it might be interesting to know there is a difference for this concept. In Eth, there is a specific concept of construction. In NEAR, there is not. This can be confusing\n    * Simulation testing is confusing\n* Chad's website proposal (not time dependent)\n  * Are we going to prioritize this?\n  * Lift\n    * Picking out of the 9 use cases.\n    * Build useful demo around a story\n    * End result is a 5 minute tutorial per demo\n    * E.g. run `npx create-near-app` then in 5 min, I have an actual useful app.\n* **Other Thoughts**\n  * Increase our examples. Make docs more straightforward.\n  * We have enough customer requests in discord. We should develop based on those.\n  * More exploratory, educational design patterns (in the libraries themselves)\n    * Signing in is an opportunity to teach people what signing in means. \"The interface should help you do this.\" We could probably implement a wrapper.\n  * Prioritize specific changes\n    * E.g. eliminate boiler plate: default config that requires overrides.\n    * E.g. generators tool.\n\n* Developer specific newsletter support\n  * Who\n    * 40% of our email list are devs.\n  * What\n    * Goal is to split off a dev specific newsletter so the eng content doesn't get lost for developers.\n    * Capture developer interest and keep them engaged.\n    * Also pushes us to make more marketable features.\n    * A place to publish new bounties.\n  * Time\n    * 2 hours a month\n    * On-demand help. Should involve most engineers at NEAR.\n    * Needs a process for gathering info from people that's low lift, but actually leads to interesting copy.\n\n## DevX Sync | 16-Jun-2020\n\n### Agenda/Notes\n\n* Chad\n  * Demo 2x etc.\n* Two week cycle. We're doing it.\n* See something in testnet or betanet, but then it's a known issue by the time of reporting\n  * \"Having the keys to the kingdom for explorer\"\n  * Needs:\n    * Bring this up in eng sync\n    * Set up access to render (explorer) for everyone\n* Explorer becoming public\n  * needs a lot of work.\n    * Design and code reviews.\n    * At the start: It's as much work to manage as it is to do.\n  * People are confused when it doesn't work\n    * It's more important now\n  * Network indexer\n    * POC: Working version some time later this week.\n    * Come to the explorer sync @ 9:30am PST\n* A quick touchpoint: external issues\n  * Rotate responsibility: Chad\n  * Modelled on live bugs\n  * It takes ~20-30min per day.\n  * Involves reading GH issues and responding to them\n  * Process\n    * Pulling up a gh query, scanning issues\n    * Lot's of \"drive by\" fixes which take on scope\n    * Beneficial for housekeeping\n    * Rotation res: https://docs.google.com/document/d/1j2u_-KwJ07PDC7kgN2fX5ULQrXvAzquwSb2JCx0vqwo/edit#heading=h.c94whubdkh64\n* Docs\n  * Needs a steering commitee or some kind of alignment\n  * \"Editorial vision\"\n  * Set a meeting, then shut it down if we don't need it.\n    * Two weeks experiment\n    * Outcome of recurring meeting: Sheriff to coordinate.\n    * Ping in slack.\n* Core Contributor Funnel: Needs shaping\n  * \"People who are most into it are the validators\"\n  * Expections: \"We have guidelines for the contributor program\"\n  * Some people have been more involved, but it's mostly validators who do multiple programs\n\n## DevX Sync | 9-Jun-2020\n\n### Agenda/Notes\n\n* Contributions\n  * Have a clear set of instructions with a clear end goal\n  * Self-service contributions where people pick up issues.\n    * Lack context\n  * Peter and Sherif set up a call DM\n  * Internal presentation on how to contribute DevX\n    * Best practices\n    * Form\n    * External docs contributors\n  * Suggestion: Scope the time we spend on this\n* Addressing external issues SLA\n  * Default assignees in the issues\n* Issues submitted across repos\n  * Transfer issue!\n  * \"Can we fix the issue with transferring issues to nearcore?\"\n  * Submit to devx repo if it's a vertical slice across multiple modules.\n* We need someone to do a presentation on stuff\n  * TBD\n* GitCoin Hackathon next week Requirements\n  * 1 workshop, 30min\n  * Support from 15th - 29th\n* Batch transactions\n  * Timeline: Need to write more tests and publish. End of week.\n\n## DevX Sync | 2-Jun-2020\n\n### Agenda/Notes\n\n* StakeX\n  * \"How and why we designed near-shell, nearup etc.\" - Designed for designers\n    * Need: Automation for what's happening on nodes\n    * Headless (\"The less interaction from a human, the better\")\n      * launch a node\n      * login\n      * \"Scripts that people can deploy, and parse the output for success or failure without needing to sit there and type in commands\"\n    * See [the epic here](https://github.com/near/devx/issues/169)\n    * On the node, we're short on memory and storage.\n      * Request: offline RPC\n        * E.g. not every node needs to have an open json PRC, some nodes are just network nodes.\n        * Connected to Prometheus\n    * **Need: Set of docs to describe these actions**\n      * Low level operations\n        * Generate, update, backup keys\n        * E.g. \"How can I use the same key across multiple shells\"\n      * See the [stake wars repo for examples of challenges to update](https://github.com/nearprotocol/stakewars).\n* Embedding\n  * \"Removes guesswork from hypotheses\"\n    * After a meeting with Flux, issues were created directly from input with them.\n  * Basic project management has been helpful as well\n  * \"We should do more of this\"\n  * Next week: \"How long are we going to do this with Flux?\"\n    * Intuition: June Launch coordination\n* Metrics discussion\n  * There's a [new epic](https://github.com/near/devx/issues/193) from a lack of granularity\n* Shaping vs instant implementation\n  * We going to do more of this.\n* Docs\n  * Presenting on calendar about new process on Monday.\n  * Google Drive --> \"All Hands\"\n  * Repo has been groomed\n  * DevX team: \"Pick an epic, you're responsible for closing it within 10 business days.\"\n    * Each epic is a collection of related issues.\n    * Suggestion: \"Everyone on the DevX team pick and own (within 24 hours) it until completion\"\n* Board\n  * Clean up finished tasks\n  * \"We need a set way of setting this up\"\n* We should do an example cleanup and round 2 sprinteroo\n* Embedding reports\n  * Ends at the end of this week.\n  * Follow up meetings\n\n## DevX Sync | 27-May-2020\n\n### Agenda/Notes\n\n* Hot Topics\n  * Migration process\n    * We have 4 apps in deployed. These need process for deploying to MainNet\n    * As a developer on NEAR, I want to deploy to MainNet.\n    * Timeline: defined by projects.\n    * Requirements: We will get the scope of the project and define what we need to accomplish a migration.\n  * Embedded Engineers: Starts this week\n    * Full time?\n      * ~1.5 weeks\n    * It needs to be top down.\n    * OWC side of Flux\n      * Embedding was really good learning\n    * Mike focusing on value to the Near repos\n    * We may need a formal agreement for embedding\n  * Activity in StakeX\n    * Priotitize higher\n  * Requests\n    * Rev\n      * Rec: If we spend time on this, we capture the output\n      * Async on this\n  * Hackathon Update\n    * 90 people signed up\n    * 11 projects\n    * \"It was awesome\"\n  * Docs rotation\n    * Get presentation on All hands\n  * Tokens\n    * NFT\n      * Rust - README in flight\n        * (Here's how to build, here's how to test)\n      * AS - Done\n    * FunToken\n      * Rust - README\n      * AS - Draft\n\n## DevX Sync | 19-May-2020\n\n### Agenda/Notes\n\n* Hot Topics\n  * Requests\n    * Rev hackathon mini sessions\n      * Volunteers\n        * Peter: Intro\n        * Jane: Idea Review\n        * Sherif: AS Workshop\n        * Mike?\n    * UW Hackathon workshops\n      * 24th = Judging\n      * Two on Fri\n      * Two hours\n        * Near-api-js (1pm PST Chad)\n        * Intro to rust (Mike)\n    * Access Keys\n  * BD: Embedded Engineers\n    * Next three months\n    * StarDust would want this\n    * Flux: Starting project\n      * Sasha, Mike, Flux, Me.\n      * Set up embedded engineer kick off\n        * Set expectations for scope of work\n          * Can we record stuff?\n          * Are they open source?\n        * Agree on a task\n  * Marketing: Smoke Tests on ideas\n    * Market first\n    * Peter aggregates ideas worth testing\n      * Set up process for this\n    * Lifecycle\n      * Test Value Prop for conversion rate\n      * Use for testing language for apps already building. Link to \"case studies\" from our home page.\n        * Put case studies on our website and A/B test the language.\n  * Working with other teams/cross team dependencies\n    * How are we going to address this?\n    * As a team, it would be helpful to have a heads up.\n  * Metrics\n    * Needs calibration\n  * NFT and FunToken status (Punted)\n  * Docs Rotation (Discussing later)\n  * Interactive Demo (Project Poke Bowl)\n\n## DevX Sync | 12-May-2020\n\n### Agenda\n\n* Hot Topics\n  * Oracle Contracts ~happy path = 2 weeks knocked out\n    * nLINK needs work\n    * Some of the parts are unknown unknowns\n  * What's next\n    * Examples and Partner stuff\n    * MultiSig\n      * Clean up\n    * Fungible Token Example\n    * Clean NFT\n    * Key Value Store\n    * Research tasks: Multi contract apps (and how to manage them)\n    * Upgrade and Migration Example/Guide\n      * These are multiple examples\n        * E.g. one contract vs multiple contract\n      * \"I myself have problems update delegation contract\" this happens every three days.\n      * Research: Proxy Contract Methods and Functionality\n  * Something Pokeable\n    * Corgiland, corgimarket.\n    * \"These are the killer features of NEAR\"\n    * \"Our MainNet is not a ghost town, here's what you can do with NEAR.\"\n    * Design meeting:\n      * Project Poke Bowl - *Real Apps for Real Shit\u00ae*\n* Board\n\n* **Delegator App**\n  * Smart Contract is done\n  * Needs Frontend from @Matt\n  * A first pass = Example app where someone delegates to a hardcoded delegator\n\n### Retro\n\n* Good\n  * RL1 = awesome!!!!\n  * Mike creating a bunch of tickets was awesome\n  * Creating tickets is a good on-demand tool for a bunch of small things\n  * Tests are green\n  * Dependabot is good\n  * Workshops were great\n  * Sherif and Willem's workshop work has permanent staying power\n  * Stress can begalvanizing\n* Bad\n  * Timeouts\n  * There is so much stuff to get across in a workshop, it's hard to not rush\n  * Slack\n  * We have an aligning conversation, then it's every man for themselves\n* Improve\n  * Make sure we don't drift into ambiguous territory\n  * Workshops should be longer! 1.5 hrs\n  * Our issues list keeps growing. Needs to be processed.\n    * Projects that we are owning needs a process for cleaninng out the issues queue\n  * Scoping and estimation\n  * Align more: \"Have a conversation as a team about what tech stack we want to use\"\n  * Making sure we know what the experience is like on the developer side. Dogfooding.\n  * We haven't approved NEP for shell, but we're cherry picking features.\n\n## DevX Sync | 28-Apr-2020\n\n### Agenda\n\n* Hot topics\n  * Ask for resources from DevX\n    * Features: Included in the upcoming releases\n    * Needs for NodeX and staking\n    * Answer: Add an epic and issues to the DevX board. Communicate their priority to the team.\n  * Metrics (Where they at?)\n    * (Shell metrics are landing now)\n    * Next step: Testing in mixpanel\n  * URL change\n    * It was going to happen, but it's blocked on hours (maybe minutes) scale.\n  * RL1/MainNet Prep\n* Board\n* Gotta get done\n  * Fix awesome-near Gatsby setup #141\n  * Fix config.js in Guest Book example #144\n  * Update Cargo.toml for Rust Status Message example #145\n  * Update Wallet Example's config.js #146\n  * Proof of Work faucet example #147\n  * Token contract AS work #148\n  * Counter example fixes #149\n  * Fix examples nightly CI #150\n  * High level cross contract example needs integration tests #142\n  * Rust fungible token integration test #143\n  * Workshops Epic\n  * Bug Bash\n    * Schedule bug bash Peter\n\n### Deliverables\n\n* Metrics @potatodepaulo runs point on testing in Mixpanel.\n  * TODO: Error handling\n  * Erik wants a weekly update on returning active users.\n  * Anais wants community-oriented goals.\n    * Several devs ask: \"Where can I go to get started?\"\n    * Response from devx varies.\n* URL Change from nearprotocol.com --> near.org (Punting to after RL1)\n  * Full on redirects for everything.\n    * Except: helper, rpc and wallet\n    * Communicate to developers\n      * rpc.testnet.near.org\n      * wallet.testnet.near.org\n* Workshops\n  * In progress and will be done before RL1\n  * Needs final polish\n  * Scheduled in RL1\n* Cleanup Sherif\n\n## DevX Sync | 21-Apr-2020\n\n### Agenda\n\n* Retro\n* Board\n  * Planning doc\n* Hot topics\n  * Trying things and getting punished for it\n    * [Principle of Charity](https://en.wikipedia.org/wiki/Principle_of_charity)\n  * RL1 Hackathon\n  * Checklist: RL1 issues and mainnet needs\n    * Needs swarming\n  * BD + DevX process\n    * Let's start on bigger companies\n    * Needs devx help\n  * DAOjam Hack @Peter sets up task force for collecting feedback.\n  * Friday hackathon\n    * Collect devx feedback\n    * Pull out actionable\n    * Rust cross-contract doesn't work\n    * Talk to Amos about platform\n    * Talk to Alexandra\n\n### Deliverables\n\n* Workshops @amgando\n  * Propogate the form for submitting broadly\n  * All submitted by Thursday\n  * Tested and ready to go by May 6th\n* Automated Docs\n  * Needs: \"The docs are in these locations\" \u221a @chadoh\n  * Next step: \"Link to them in docs\" @amgando\n* Zero to Hero Tutorial\n  * Backlogged: \"Finish the new example (needs UI)\" @janedegtiareva\n* Gas Estimates\n  * Needs: \"runtime --> wasm\"\n  * Next steps: \"wrap CLI, user flow and example code\"\n* Shell \n  * NEP fleshed out @mikedotexe\n  * Immediate needs\n  * Metrics: PR in for flow of logging in mixpanel on one shell command\n    * Next steps: @vgrichina and @kendall draft PR for logging NEAR Shell logins\n* TLD Epic\n  * @janedegtiareva: https://github.com/nearprotocol/near-shell/issues/307\n  * @chadoh: https://github.com/nearprotocol/nearcore/issues/2292\n* RL1 Hackathon @SkidanovAlex\n  * Do things people know\n  * Prizes: long tail not winners\n  * Platforms on NEAR have their own track where you can get a prize from NEAR collective\n* BD + DevX process (Two week timeline) @potatodepaulo\n  * **Needs**\n    * Two pieces\n      * Requests - needs a communication cycle\n      * Larger companies that should/want to build on NEAR\n    * Top of funnel\n      * Root the pitches in good engineering\n\n### Retro\n\n* Good\n  * Friday hackathon was good to have\n    * Led to a list of things that went right/wrong\n  * Enjoyed writing some Rust stuff for the Oracle\n    * Good case where we use the examples for coding\n  * Stefano's buddy is going to pick up some contract stuff\n* Bad\n  * We're not there on Rust support\n    * Assumption: people don't know Rust\n  * Miscommunication\n    * We don't need to write an oracle? Do we.\n  * Competing priorities\n* Improve\n  * More examples and docs for Rust^\n\n## DevX Sync | 14-Apr-2020\n\n### Agenda\n\n* retro\n* board\n* hot topics\n  * Hackathons\n    * A discussion next week\n    * @potatodepaulo to send notes on Dao jam\n  * Status Check\n    * Zero to Hero tut/workshop (and oracles)\n    * Template for workshops (Haven't seen one)\n  * Reports\n  * Ready Layer One Prep\n\n### Retro\n\n* Good\n  * We had explicit conversations about priorities\n  * Time to work on content\n  * Focused on one theme with workshops during the week.\n  * Docs are coming along.\n  * Sherif's flow for the workshops was good. Ownership of an epic is good. Pointing out where someone can get involved is helpful.\n\n* Bad\n  * First attempt at priority: the situation with back and forth priorirty is distracting.\n  * Oracle priority changed, which took time away from other focus\n  * Still working in isolation.\n  * Most of my work was in the wrong direction. It would have been alleviated up front.\n\n* Improve\n  * We're not fully in the loop with RL1. We should\n  * More early signal on shared tasks. \"I want to predict waht someone is focused on at a high level\".\n    * Try: add more structure to standup.\n  * Whenever we notice something coming up, pull in one other person.\n  * Increase ownership of epics and delegation for subtasks.\n\n### Notes\n\n* Workshops\n  * [Example for Workshops E.g. ](https://docs.google.com/document/d/1yfj_VkJa4uoUCK9SKglL29b32a47grlYuaT6JiHg7jo/edit#heading=h.4ic8dx4l8lvo)\n  * This looks good, but it's totally untested\n    * TODO: Test the workshops.\n      * @AnaisUrlichs: test the workshops by thurs.\n        * Testing: Sync with Sherif on confidence that this is going to fly. Monday, the results are due. (Preferably with a demo in All hands meeting)\n  * Commitment to workshops **3**\n    * Ownership: @amdando holds 2, @mikedotexe holds 1, @janedegtiareva holds 1.\n    * Unkown: How much is needed from me in order for you to make the workshops?\n    * Unkown: Process with templates\n* Automated Docs | finished by end of week\n  * @chadoh circling back\n  * comments/documentation still progress\n* Cleaning Stuff Up @potatodepaulo meeting\n* Estimate gas usage\n  * Gas Estimate communication POC in progress. https://github.com/near/devx/issues/46\n* Metrics\n  * @janedegtiareva owns shell side.\n    * First priority for the week.\n  * @vlad owns wallet side implementation.\n  * @kendall owns PMing for wallet side metrics\n", "release_dates": []}, {"name": "discovery-devnetwork", "description": "NEAR is the BOS", "language": "TypeScript", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": "# NEAR Discovery (BOS)\n\n## Setup & Development\n\n_This repo requires [pnpm](https://pnpm.io/installation)._\n\nInitialize repo:\n\n```\npnpm i\n```\n\nStart development version:\n\n```\npnpm dev\n```\n\n## Local Component Development\n\nTo start local component development you need to follow this steps:\n\n1. Run commands as mentioned in [Setup & Development](#setup--development).\n\n2. Navigate to [near-discovery-components](https://github.com/near/near-discovery-components) and follow [Local development with BOS-Loader](https://github.com/near/near-discovery-components/blob/develop/CONTRIBUTING.md#local-development-with-bos-loader) section.\n\n3. *(optional)* Make a copy of `\".env.example\"` called `\".env.local\"`. **`NEXT_PUBLIC_NETWORK_ID`** allows you to choose working environment.\n\n*Note:* The **`NEXT_PUBLIC_NETWORK_ID`** value should be the same as chosen working environment in `near-discovery-components`. More about [environments](https://github.com/near/near-discovery-components/blob/develop/CONTRIBUTING.md#testing-across-multiple-environments).\n\n\n## Local VM Development\n\n> This section needs testing since switch to pnpm\n\nIf you need to make changes to the VM and test locally, you can easily link your local copy of the VM:\n\n1. Clone the VM repo as a sibling of `near-discovery`:\n\n```\ngit clone git@github.com:NearSocial/VM.git\n```\n\nFolder Structure:\n\n```\n/near-discovery\n/VM\n```\n\n2. Run `pnpm link ../VM`\n\n3. Any time you make changes to the `VM`, run `pnpm build` inside the `VM` project in order for the viewer project to pick up the changes\n", "release_dates": []}, {"name": "discovery-docs", "description": "NEAR Discovery Documentation", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Website\n\nThis website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.\n\n### Installation\n\n```\n$ yarn\n```\n\n### Local Development\n\n```\n$ yarn start\n```\n\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\n\n### Build\n\n```\n$ yarn build\n```\n\nThis command generates static content into the `build` directory and can be served using any static contents hosting service.\n\n### Deployment\n\nUsing SSH:\n\n```\n$ USE_SSH=true yarn deploy\n```\n\nNot using SSH:\n\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\n", "release_dates": []}, {"name": "dkim-auth", "description": null, "language": "Rust", "license": null, "readme": "# Proof-of-Concept for email-based authentication for NEAR\n\nThe goal of this repo is to show the Proof of concept of using the DKIM signatures (added by default to emails) as a way to authenticate transactions.\n\nThis would allow users to control their NEAR account via email - by setting the command that they would like to execute in the subject, and then sending the email to one of the recipients.\n\nEmail would be signed by the sender's server (in current design, we only support gmail) - and this signature can be verified by the contract.\n\n## High level design\n\nThe setup consists of 3 sub-projects: control-delegator contract,  dkim-controller contract and email-relayer server.\n\n### control-delegator contract\nThis is the contract that is running on the 'users' account - to handle delegated requests coming from the dkim-controller contract.\n\n### dkim-controller contract\nThis is the main contract that takes are of validating DKIM messages - and passing them to workers (and creating workers accounts).\n\n### email-relayer server\nThis is the job that gets emails from the imap server - and sends them as transactions.\n\nIMPORTANT: server doesn't actually have any special powers. It is acting more like a relayer - that takes the incoming email and executes the Near function call. If it tried to change anything in the email contents, then the signature verification in contract would have failed.\n", "release_dates": []}, {"name": "docs", "description": "NEAR Protocol Documentation", "language": "SCSS", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<br />\n<br />\n\n<p align=\"center\">\n<img src=\"website/static/docs/assets/near_logo.png\" width=\"240\">\n</p>\n\n<br />\n<br />\n\n## NEAR Protocol - scalable and usable blockchain\n\n[![Discord](https://img.shields.io/discord/490367152054992913.svg)](http://near.chat)\n[![CI](https://github.com/near/docs/actions/workflows/build-docs.yml/badge.svg)](https://github.com/near/docs/actions/workflows/build-docs.yml)\n\n* \u2696\ufe0f NEAR Protocol is a new smart-contract platform that delivers scalability and usability.\n* \ud83d\udee0 Through sharding, it will linearly scale with the number of validation nodes on the network.\n* \ud83d\udddd Leveraging WebAssembly (via Rust and JavaScript), more sane contract management, ephemeral accounts and many other advancements, NEAR\nfinally makes using a blockchain protocol easy for both developers and consumers.\n\n## Quick start\n\nCheck out the following links\n\n- Deployed, live documentation: https://docs.near.org\n- Example applications: https://github.com/near-examples\n- Community chat: https://near.chat\n\n## Contributing\n\nNEAR uses [Docusaurus](https://docusaurus.io) for documentation.  Please refer to their documentation for details on major structural contributions to the documentation.\n\nFor simple content changes you have 2 options\n\n- [Submit an issue](https://github.com/near/docs/issues)\n- [Submit a pull request](https://github.com/near/docs/pulls) *(we prefer PRs of course)*\n\n### The instant PR\n\nThis is the fastest way to submit content changes directly from the page where you notice a mistake.\n\n1. Open any page in the docs on https://docs.near.org\n2. Click the `[ Edit ]` button at the top right hand side of _every_ content page\n3. Make your edits to the document that opens in GitHub by clicking the \u270e (pencil) icon\n4. Submit a PR with your changes and comments for context\n\n### The typical PR\n\nThis is the standard fork-branch-commit workflow for submitting pull requests to open source repositories\n\n1. Fork this repo to your own GitHub account (or just clone it directly if you are currently a member of NEAR)\n\n2. Open your editor to the _top level repo folder_ to view the directory structure as seen below\n\n3. Move into the `/website` folder where you will run the following commands:\n\n   - Make sure all the dependencies for the website are installed:\n\n     ```sh\n     # Install dependencies\n     yarn\n     ```\n\n   - Run the local docs development server\n\n      ```sh\n      # Start the site\n      yarn start\n      ```\n\n      _Expected Output_\n\n      ```sh\n      # Website with live reload is started\n      LiveReload server started on port 35729\n      Docusaurus server started on port 3000\n      ```\n\n      The website for docs will open your browser locally to port `3000`\n\n4. Make changes to the docs\n\n5. Observe those changes reflected in the local docs\n\n6. Submit a pull request with your changes - **[Please check for broken links before opening PR \ud83d\ude4f](#check-for-broken-links)**\n\n## Directory Structure\n\nYour project file structure should look something like this with a few key files and folders highlighted\n\n```\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE-APACHE.txt\n\u251c\u2500\u2500 LICENSE-MIT.txt\n\u251c\u2500\u2500 README.md             <-- the document you are reading right now\n\u251c\u2500\u2500 docs                  <-- all the content for the site is in this folder as markdown files\n\u2514\u2500\u2500 website\n    \u251c\u2500\u2500 build\n    \u251c\u2500\u2500 core\n    \u251c\u2500\u2500 i18n\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 pages\n    \u251c\u2500\u2500 sidebars.json     <-- rarely used for changing left-hand-side page navigation\n    \u251c\u2500\u2500 docusaurus.config.js     <-- rarely used for general site configuration (including header links)\n    \u251c\u2500\u2500 static\n    \u2514\u2500\u2500 test-links.sh     <-- always used to test links before submitting changes\n```\n\n## Found a broken link?\n\nFor broken links internal to the docs, please submit an issue or PR request as per above.\n\nIf you found a broken link from a Google search, please request to remove it from their index here: https://www.google.com/webmasters/tools/removals\n\n## Check for broken links\n\nBefore opening a pull request, please check for broken links:\n\n```bash\nyarn test\n```\n\nor id you are in the `./website` directory:\n\n```bash\nyarn full-test\n```\n\nTo manually run tests without rebuilding the site, run the following from the `./website` directory:-\n\n\ud83c\udfc3\u200d\u2642\ufe0f - Build and start server\n\n```bash\nyarn start-server\n```\n\n\u2705 - Check links\n\n```bash\nyarn check-links\n```\n\n\u26d4\ufe0f - Stop server\n\n```bash\nyarn stop-server\n```\n", "release_dates": []}, {"name": "docs-generator", "description": null, "language": "Shell", "license": null, "readme": "# docs-generator\n\nThis is:\n- A GitHub Action that should run on the docs repo (`near/docs`)\n- A GitHub app (`./docs-bot`) that should be installed on the docs repo (`near/docs`)\n\n### GitHub Action\n\nThis is a containerized action (see `Dockerfile`).\n\nInputs:\n- `source_repo`: Source repo to generate docs for (`near/near-api-js` and others. Or your fork - ex: `maxhr/near--near-api-js`)\n- `release_version`: The git tag to check out, this should match the release version of the package (`v1.0.0`)\n- `builder_name`: Name of builder file in `./builder`. Today: `near-api-js`. Soon also: `near-cli | near-sdk-js`\n- `github_token`: If you run `dev.sh` it's your Personal Access Token with repos permissions. When running in GitHub workflow - GH provides it automatically as an env var.\n\n`entrypoint.sh`:\n- Pulls source and docs\n- Builds doc - in `/builder` dir there are build files that match the `builder_name` input (ex: `builder/near-api-js.sh`)\n- Creates a PR in the docs repo (the repo that this action runs on)\n\n### GitHub App (Docs Bot)\n\nThe app (`./docs-bot`), is published on Vercel (https://docs-bot.vercel.app).\n\nIt's purpose is to trigger `repository_dispatch` and create PRs in the docs repo.\n\nIt should be installed on the docs repo and its `https://docs-bot.vercel.app/api/on-release` endpoint can be called\nfrom source-code repos workflow when a new version get released. This is to be able to trigger docs build\nautomatically. You can also invoke the GitHub action (described above) manually with `workflow_dispatch` event.\n\nSee the workflows in the docs repo to see how it's configured for manual and automatic listeners.\n\nSee the workflows in `near-api-js` repo to see how it's being triggered automatically.\n\n## Contributing\n\nYou need a GitHub access token with repos permissions to run `./dev.sh`.\nMake sure you have it in your `~/.github-token`.\n\n`./dev.sh` will run docker container with the needed params.\n\n- `GITHUB_REPOSITORY_OWNER` - should be `near` or you if you forked\n- `GITHUB_REPOSITORY` - `near/docs` or your fork\n- `SOURCE_REPO` - for example `near/near-api-js`\n- `BUILDER_NAME` - at the moment `near-api-js` others soon. This will run `builder/near-api-js.sj`\n- `SOURCE_TAG` - the published package version to checkout (ex: `v1.0.0`)\n- `GITHUB_TOKEN` - access token. GitHub provides it in Action Workflow. For local dev you need a Personal Access Token.\n\n`./dev-attach.sh` will run attach to the container, without running the entrypoint file.\nYou can use it to run `entrypoint.sh` manually for debugging.", "release_dates": []}, {"name": "DX", "description": "Developer Experience building on NEAR", "language": null, "license": null, "readme": "# NEAR Protocol Developer Guide\n\n[![DEVHUB](https://img.shields.io/badge/DEV_HUB-03BE09)](https://neardevhub.org/)\n[![CALENDAR](https://img.shields.io/badge/CALENDAR-F9F502)](https://bit.ly/near-dev-calendar)\n[![DEV SUPPORT](https://img.shields.io/badge/DEV_SUPPORT-BE0303)](https://t.me/addlist/VyVjNaP190JlOGMx)\n[![NEWSLETTER](https://img.shields.io/badge/NEWSLETTER-0087E5)](https://newsletter.neardevhub.org/)\n[![FEEDBACK](https://img.shields.io/badge/FEEDBACK-purple)](https://github.com/orgs/near/discussions/new?category=dev-feedback)\n\n> NEAR is dedicated to providing the best developer experience possible for building an open web. This mission is next to impossible to achieve without feedback and contributions from **people like you**. \ud83e\udef5\n>\n> **Get involved!** \ud83d\udc49 please select one of the options above or contribute to one of the essential developer repositories listed below \ud83d\ude4f\n>\n\n<img src=\"https://github.com/near/DX/blob/main/assets/near-overview.png?raw=true\" width=\"900\"/>\n\n---\n\n### \ud83d\udcdd Docs\n\n| Website      | Description | Repo |\n| ----------- | ----------- | --- |\n|[docs.near.org](https://docs.near.org) | NEAR Developer Documentation |[near/docs](https://github.com/near/docs)\n|[nomicon.io](https://nomicon.io)| NEAR Protocol Specification Documentation | [near/neps](https://github.com/near/neps)\n|[near-nodes.io](https://near-nodes.io)| NEAR Node Documentation _(Validator, RPC, Archival)_ |[near/node-docs](https://github.com/near/node-docs)\n\n---\n\n### \u26d3\ufe0f Protocol\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- | --- |\n| nearcore | Reference implementation of NEAR Protocol  |[near/nearcore](https://github.com/near/nearcore)|[![Latest Release](https://img.shields.io/github/v/release/near/nearcore?label=)](https://github.com/near/nearcore/releases)\n| NEPs | NEAR Protocol Specifications and Standards  |[near/neps](https://github.com/near/neps)| \u2796\n\n---\n\n### \ud83d\ude80 Decentralized Frontend Stack\n\n> Create decentralized frontend components by storing it's source code on the blockchain \ud83e\udd2f.\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- |--|\n|**\ud83d\udc49 GATEWAY**||||\n| near-discovery    | near.org Gateway  |[near/near-discovery](https://github.com/near/near-discovery)| [![Latest Release](https://img.shields.io/github/v/release/near/near-discovery?label=)](https://github.com/near/near-discovery/releases)\n| near.social | near.social Gateway | [NearSocial/viewer](https://github.com/NearSocial/viewer) | \u2796\n| near-discovery-components | Core components / primitives for near.org | [near/near-discovery-components](https://github.com/near/near-discovery-components)| \u2796\n|**\ud83d\udc49 EXECUTION ENVIRONMENT**||||\n| VM   | B.O.S. Virtual Machine  | [nearsocial/VM](https://github.com/NearSocial/VM) |[![Latest Release](https://img.shields.io/github/v/release/nearsocial/vm?label=)](https://github.com/nearsocial/vm/releases)\n| BWE | B.O.S. Web Engine ***(WIP replacement for VM)*** | [near/bos-web-engine](https://github.com/near/bos-web-engine) |\u2796\n|**\ud83d\udc49 DATABASE**||||\n| B.O.S. Database | Smart contract hosting frontend source code & user data | [nearsocial/social-db](https://github.com/NearSocial/social-db)|\u2796\n\n---\n\n### \ud83d\udee0\ufe0f Dev Tools\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- |--|\n| create-near-app | Easy fullstack dApp deployment tool | [near/create-near-app](https://github.com/near/create-near-app) | [![Latest Release](https://img.shields.io/github/v/release/near/create-near-app?label=)](https://github.com/near/create-near-app/releases)\n| cargo-near | Cargo extension for building smart contracts and ABI schemas on NEAR | [near/cargo-near](https://github.com/near/cargo-near) | [![Latest Release](https://img.shields.io/github/v/release/near/cargo-near?label=)](https://github.com/near/cargo-near/releases)\n| BOS VSCode Ext. | VSCode extension for building B.O.S. components | [near/near-vscode](https://github.com/near/near-vscode) | [![Latest Release](https://img.shields.io/github/v/release/near/near-vscode?label=)](https://github.com/near/near-vscode/releases)\n| BOS Loader | Simplifying multiple component local development | [near/bos-loader](https://github.com/near/bos-loader) | [![Latest Release](https://img.shields.io/github/v/release/near/bos-loader?label=)](https://github.com/near/bos-loader/releases)\n\n### \ud83d\udcbb CLI\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- |--|\n| near-cli | JS based CLI for interacting w/ NEAR | [near/near-cli](https://github.com/near/near-cli)|[![Latest Release](https://img.shields.io/github/v/release/near/near-cli?label=)](https://github.com/near/near-cli/releases)\n| near-cli-rs| Rust based CLI for interacting w/ NEAR | [near/near-cli-rs](https://github.com/near/near-cli-rs)| [![Latest Release](https://img.shields.io/github/v/release/near/near-cli-rs?label=)](https://github.com/near/near-cli-rs/releases)\n| BOS CLI | CLI for simplifying local development on BOS | [bos-cli-rs/bos-cli-rs](https://github.com/bos-cli-rs/bos-cli-rs) | [![Latest Release](https://img.shields.io/github/v/release/bos-cli-rs/bos-cli-rs?label=)](https://github.com/bos-cli-rs/bos-cli-rs/releases)\n\n### \ud83d\udd11 Wallet / Auth\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- | --- |\n| wallet-selector |Wallet integration tool for NEAR|[near/wallet-selector](https://github.com/near/wallet-selector)|[![Latest Release](https://img.shields.io/github/v/release/near/wallet-selector?label=)](https://github.com/near/wallet-selector/releases)\n| web3-onboard | Wallet integration tool for multichain |[blocknative/web3-onboard](https://github.com/blocknative/web3-onboard)|[![Latest Release](https://img.shields.io/github/v/release/blocknative/web3-onboard?label=)](https://github.com/blocknative/web3-onboard/releases)\n| FastAuth Signer | Authenticate and sign transactions w/ FastAuth |[near/fast-auth-signer](https://github.com/near/fast-auth-signer)|\u2796\n| mpc-recovery | Create and restore accounts w/ OIDC protocol|[near/mpc-recovery](https://github.com/near/mpc-recovery)|\u2796\n| iDOS | Decentralized identity, storage, and verification | [idos-network/idos-sdk-js](https://github.com/idos-network/idos-sdk-js)|\u2796\n\n### \ud83d\udd0c API\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- | --- |\n| near-api-js | API tool for frontend & backend JS libraries |[near/near-api-js](https://github.com/near/near-api-js)|[![Latest Release](https://img.shields.io/github/v/release/near/near-api-js?label=)](https://github.com/near/near-api-js/releases)\n\n### \ud83d\udcdd Smart Contracts\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- |---|\n| near-sdk-js|Create smart contracts w/ JavaScript | [near/near-sdk-js](https://github.com/near/near-sdk-js) | [![Latest Release](https://img.shields.io/github/v/release/near/near-sdk-js?label=)](https://github.com/near/near-sdk-js/releases)\n| near-sdk-rs|Create smart contracts w/ Rust | [near/near-sdk-rs](https://github.com/near/near-sdk-rs)| [![Latest Release](https://img.shields.io/github/v/release/near/near-sdk-rs?label=)](https://github.com/near/near-sdk-rs/releases)\n| Keypom | Customizable key creation for NFT/FT drops  |[keypom/keypom](https://github.com/keypom/keypom)|[![Latest Release](https://img.shields.io/github/v/release/keypom/keypom?label=)](https://github.com/keypom/keypom/releases)\n\n### \ud83e\uddea Testing\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- | --- |\n| workspaces-js| Testing sandbox written in JS  |[near/workspaces-js](https://github.com/near/workspaces-js)|[![Latest Release](https://img.shields.io/github/v/release/near/near-workspaces-js?label=)](https://github.com/near/near-workspaces-js/releases)\n| workspaces-rs| Testing sandbox written in Rust |[near/workspaces-rs](https://github.com/near/workspaces-rs)|[![Latest Release](https://img.shields.io/github/v/release/near/near-workspaces-rs?label=)](https://github.com/near/near-workspaces-rs/releases)\n\n### \ud83d\udd0e Blockchain Data Indexing\n\n| Name      | Description | Repo | Latest Release |\n| ----------- | ----------- | --- | --- |\n| QueryApi | Build custom indexers and query with GraphQL endpoints|[near/queryapi](https://github.com/near/queryapi)|\u2796\n| near-lake-indexer | Built on [NEAR Indexer](https://github.com/near/nearcore/tree/master/chain/indexer) that stores JSON in AWS S3 bucket  |[near/near-lake-indexer](https://github.com/near/near-lake-indexer)|[![Latest Release](https://img.shields.io/github/v/release/near/near-lake-indexer?label=)](https://github.com/near/near-lake-indexer/releases)\n| near-lake-framework-rs | Stream blocks from NEAR Lake into your server |[near/near-lake-framework-rs](https://github.com/near/near-lake-framework-rs)|[![Latest Release](https://img.shields.io/github/v/release/near/near-lake-framework-rs?label=)](https://github.com/near/near-lake-framework-rs/releases)\n| near-lake-framework-js | Stream blocks from NEAR Lake into your server |[near/near-lake-framework-js](https://github.com/near/near-lake-framework-js)| \u2796\n", "release_dates": []}, {"name": "ecosystem", "description": "Community-sourced and curated data for the NEAR Ecosystem. ", "language": "Python", "license": null, "readme": "<img src=\"https://repository-images.githubusercontent.com/384455580/fc80d841-e285-4238-981d-c40e45772469\" alt=\"near-logo\" width=\"600\" border=\"0\" />\n\nThis repository is the data source for the community-sourced, core team curated NEAR Ecosystem page.\n\n**You can also use [this form](https://nearprotocol1001.typeform.com/submit-project) to submit a project to this database.**\n\nOur aim is to curate an accurate, up-to-date database of all entities in the NEAR ecosystem. Therefore, we have made this an open, community-driven repo which anyone can contribute to.\n\nThis is a living, breathing document and repo that will evolve over time as the community helps to maintain the map going forward.\n\n# How To Contribute & Guidelines\n\nWe want to ensure the submission process captures as much information as possible pertaining to the entities added, while also remaining straightforward to contribute. \n\nAll submissions to the NEAR Ecosystem are composed of two files: a Markdown file (.md), and a .svg or .png image. \n\nAdding a new entity to the ecosystem page only consists of two simple steps:\n1. Create both a new markdown file in the `entities` directory with headers pertaining to each data field, and a detailed description of the entity outside the table\n2. Add a new .svg or .png logo image in the `img` directory. (To upload a .png logo - 1. Fork  2. Upload  3. Create PR)\n\n\n<b>Logo Submission Guidelines</b>\n\nAll .svg/.png files must be 100x100px. Do not embed any excessive raster image files: svg file sizes over 500kb will be rejected.\n\nBelow is an example submission for Skyward Finance:\n\n```\n---\nslug: \"skyward-finance\"\ntitle: \"Skyward Finance\"\noneliner: \"Enable fair token distribution and price discovery for projects built on NEAR Protocol.\"\nwebsite: \"https://skyward.finance/\"\napp: \"https://app.skyward.finance/\"\nwhitepaper: \"https://skyward.finance/whitepaper/\"\ntwitter: \"https://twitter.com/skywardfinance\"\ntelegram: \"https://t.me/skywardfinance\"\ndiscord: \"https://discord.gg/KKjQwCRvbV\"\nmedium: \"https://medium.com/nearprotocol/everything-you-need-to-know-about-skyward-finance-before-the-first-token-sale-6e82fe305e1a\"\ngithub: \"https://github.com/skyward-finance/\"\nticker: \"SKYWARD\"\nlogo: /img/skywardfinancelogo.png\ncategory: defi, app\nstatus: launched\ncontract: skyward.near\n---\n\n\u201cDetailed description... (Up to 350 characters max)\u201d\n\n```\n\n\n### Markdown Headers\n\nBelow are the available markdown headers for adding entities with guidelines for each header (only input what is applicable for what you are adding):\n\n- `slug`: The page URL that follows after near.org/ecosystem/\n- `title`: The title of the project\n- `oneliner`: The one line summary\n- `website`: A URL to direct users to the page\n- `app`: A URL directly to the app\n- `whitepaper`: A URL directly to white/lite paper\n- `twitter`: A URL to the twitter page\n- `telegram`: A URL to the telegram channel\n- `discord`: A URL to the discord channel\n- `youtube`: A URL to the YouTube channel\n- `medium`: A URL to the medium page\n- `github`: A URL to the github page\n- `ticker`: Token ticker\n- `logo`: A relative path to the corresponding SVG/PNG image\n- `category`: A comma separated list of categories describing the project, see below for accepted list\n- `country`: country/region of the guild\n- `language`: native launguage of the guild\n- `status`: 'building', 'launched', 'mainnet', 'testnet'\n- `funded`: 'true' if project recieved a grant from NF\n- `contract`: Project contract id\n- `jobs`: Jobs available\n- `community asks`: What they could use help with from community?\n\n\n### Categories\n\nAvailable classifications for 'category' header:\nPlease add multiple tags if needed and include the header category as well.\n\n* 'partner' classification for if $NEAR is used on other networks for something\n\n| infrastructure | ecosystem | defi | funding | nft | gaming | app | guild | partner * |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| exchange | education | amm | accelerator | marketplace | metaverse |  | geographical | \n| oracle | guild | dex | vc |  |  |  | validator |\n| wallet | marketing | stablecoin | grants |  |  |  | ecosystem project |\n| validator | devshop | lending |  |  |  |  | awareness |\n| indexer | social | derivatives |  |  |  |  | theme based guild |\n| analytics | utility |  |  |  |  |  | education |\n| tools | dao |  |  |  |  |  | open web aligned community |\n| payments | event |  |  |  |  |  | service |\n|  |  |  |  |  |  |  | music |\n|  |  |  |  |  |  |  | art |\n|  |  |  |  |  |  |  | earn |\n|  |  |  |  |  |  |  | creative |\n|  |  |  |  |  |  |  | content |\n|  |  |  |  |  |  |  | social media |\n|  |  |  |  |  |  |  | swag |\n|  |  |  |  |  |  |  | growth hacking |\n|  |  |  |  |  |  |  | design |\n|  |  |  |  |  |  |  | trading |\n|  |  |  |  |  |  |  | legal |\n|  |  |  |  |  |  |  | development |\n|  |  |  |  |  |  |  | privacy |\n|  |  |  |  |  |  |  | data |\n", "release_dates": []}, {"name": "ecosystem-data-center", "description": null, "language": null, "license": null, "readme": "# Ecosystem-Data-Center\n\nThe vision of the project is to bring more visibility and accessibility of data into the NEAR ecosystem. \n", "release_dates": []}, {"name": "eth-util-lite", "description": "Ethereum utility with very low dependencies", "language": "JavaScript", "license": null, "readme": "# eth-util-lite\n\nThis is a low-dependency utility for Ethereum. It replaces a small subset of the [ethereumjs-util](https://github.com/ethereumjs/ethereumjs-util) and [ethjs-util](https://github.com/ethjs/ethjs-util) APIs.", "release_dates": []}, {"name": "fast-auth-signer", "description": null, "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# fast-auth-signer\nMonorepo for fast-auth-signer functionality - contains frontend app, and associated E2E test suites defined using Playwright\n\n## Packages\n#### [near-fast-auth-signer](./packages/near-fast-auth-signer/README.md)\nWeb application designed primarily for usage via embedding into parent site using an iframe \n#### [near-fast-auth-signer-e2e-tests](./packages/near-fast-auth-signer-e2e-tests/README.md)\nE2E test suites for `near-fast-auth-signer` using Playwright tests.\n\n## Usage\nThis repository leverages Yarn workspaces.  \n\n#### Local Development\nRun `yarn` from the repository root. This will install dependencies for all packages by way of Yarn workspaces functionality.\n#### End-to-End tests\nRun `yarn test` from the repository root.\n", "release_dates": []}, {"name": "fast-kv-store", "description": null, "language": "Rust", "license": null, "readme": "# Introduction\nThis is a POC code that we are experimenting with to help improve our storage performance.  As such, the code here is quite messy.\n\n# High level explanation\nIn short, it splits the file into sectors of 1MB each.  Each sector is either a part of the hasthtable, a chunk of values, or a delmap.  Hashtable is open-addressed mapping from hashes of the keys (I assume hashes never collide) into offsets into the values.  Each chunk of values is just contiguous values, and a delmap stores one bit per 128 bytes of values indicating whether the corresponding value is still present, or needs to be garbage collected.  GC happens by treating the values as a queue, and moving the front four values to the back every time you delete one value (or, correspondingly, discarding them for good if they are scheduled for being GCed).\nOne can prove that with this scheme the number of values scheduled for GC never exceeds the number of values that are actually still there.  The logic of the hashtable is in the methods with prefix ht_, and is tested fuzzily in test_fuzzy_db_ht_consistency.  The logic for the entire thing is tested by test_fuzzy_storage_consistency, which is also a good test to look at the interface, and how to use it.\nThe latter also ocassionally recreates the hashtable, thus testing recovery from disk.\n", "release_dates": []}, {"name": "fast-near", "description": "Fastest RPC for @near based on Redis", "language": "JavaScript", "license": null, "readme": "## Build and run via yarn:\n\n```\nyarn\nFAST_NEAR_REDIS_URL=<redis_ip> FAST_NEAR_NODE_URL=<rpc_endpoint> yarn start\n```\n\n## Build and run with docker:\n\n```\ndocker build -t fastrpc .\ndocker run -d -e FAST_NEAR_REDIS_URL=<redis_ip> -e FAST_NEAR_NODE_URL=<rpc_endpoint> fastrpc \n```\n\n## Call view method\n\n### POST\n\nYou can post either JSON or binary body, it's passed raw as input to given method.\n\n\nURL format:\n\n```\nhttps://fastrpc.mainnet.near.org/account/<contract_account_id>/view/<method_name>\n```\n\n#### Examples\n\n```\nhttp post https://fastrpc.mainnet.near.org/account/vlad.tkn.near/view/ft_balance_of account_id=vlad.near\n```\n\n### GET\n\nParameters are passed as part of URL query.\n\nURL format:\n\n```\nhttps://fastrpc.mainnet.near.org/account/<contract_account_id>/view/<method_name>?<arg_name>=<string_arg_value>&<arg_name.json>=<json_arg_value>\n```\n\n#### Examples\n\n##### String parameters:\n\n```\ncurl 'https://fastrpc.mainnet.near.org/account/vlad.tkn.near/view/ft_balance_of?account_id=vlad.near'\n```\n\n[https://fastrpc.mainnet.near.org/account/vlad.tkn.near/view/ft_balance_of?account_id=vlad.near](https://fastrpc.mainnet.near.org/account/vlad.tkn.near/view/ft_balance_of?account_id=vlad.near)\n\n\n##### JSON parameters:\n\n```\ncurl --globoff 'https://fastrpc.mainnet.near.org/account/lands.near/view/web4_get?request.json={\"path\":\"/\"}'\n```\n\n[https://fastrpc.mainnet.near.org/account/lands.near/view/web4_get?request.json={\"path\":\"/\"}](https://fastrpc.mainnet.near.org/account/lands.near/view/web4_get?request.json={\"path\":\"/\"})\n\n\n##### Number parameters (passed as JSON):\n\n\n```\ncurl 'https://fastrpc.mainnet.near.org/account/lands.near/view/getChunk?x.json=0&y.json=0'\n```\n\n[https://fastrpc.mainnet.near.org/account/lands.near/view/getChunk?x.json=0&y.json=0](https://fastrpc.mainnet.near.org/account/lands.near/view/getChunk?x.json=0&y.json=0)\n\n\n\n\n", "release_dates": []}, {"name": "fast-vault", "description": "A secure and composable decentralized storage layer utilizing IPFS", "language": "JavaScript", "license": null, "readme": "# Fast Vault (Alpha)\n\nA secure and composable decentralized storage layer utilizing IPFS.\n\nThis is currently a POC. Please test the product, but do not store anything vital or sensitive. The encryption underneath needs some work.\n", "release_dates": []}, {"name": "finite-wasm", "description": "Cheating a little to solve the halting problem at scale", "language": "WebAssembly", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": []}, {"name": "gas-station-event-indexer", "description": "Picks up events emitted from the gas station contract used for generating signed foreign chain transactions and calls the multichain relayer /send_funding_and_user_signed_txns endpoint locally", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# gas-station-event-indexer\nPicks up events emitted from the gas station contract used for generating signed foreign chain transactions and calls the multichain relayer /send_funding_and_user_signed_txns endpoint locally\n\n# Run\n1. ensure you have https://github.com/near/multichain-relayer-server running on localhost:3030\n2. Create and activate a python virtual environment and `pip install requirements.txt`\n3. update the config.toml with the appropriate values\n4. `python3 gas-station-event-indexer.py`\n", "release_dates": []}, {"name": "grafana-agent", "description": "Telemetry agent for the LGTM stack.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p align=\"center\"><img src=\"docs/sources/assets/logo_and_name.png\" alt=\"Grafana Agent logo\"></p>\n\nGrafana Agent is a telemetry collector for sending metrics, logs,\nand trace data to the opinionated Grafana observability stack. It works best\nwith:\n\n* [Grafana Cloud](https://grafana.com/products/cloud/)\n* [Grafana Enterprise Stack](https://grafana.com/products/enterprise/)\n* OSS deployments of [Grafana Loki](https://grafana.com/oss/loki/), [Prometheus](https://prometheus.io/), [Grafana Mimir](https://grafana.com/oss/mimir/), and [Grafana Tempo](https://grafana.com/oss/tempo/)\n\nUsers of Prometheus operating at a massive scale (i.e., millions of active\nseries) can struggle to run an unsharded singleton Prometheus instance: it becomes a\nsingle point of failure and requires a giant machine with a lot of resources\nallocated to it. Even with proper sharding across multiple Prometheus instances,\nusing Prometheus to send data to a cloud vendor can seem redundant: why pay for\ncloud storage if data is already stored locally?\n\nThe Grafana Agent uses the same code as Prometheus, but tackles these issues\nby only using the most relevant parts of Prometheus for interaction with hosted\nmetrics:\n\n1. Service Discovery\n2. Scraping\n3. Write Ahead Log (WAL)\n4. Remote Write\n\nOn top of these, the Grafana Agent enables easier sharding mechanisms that\nenable users to shard Agents across their cluster and lower the memory requirements\nper machine.\n\nA typical deployment of the Grafana Agent for Prometheus metrics can see\nup to a 40% reduction in memory usage with equal scrape loads.\n\nThe Grafana Agent it can be used to send Prometheus metrics to any system that\nsupports the Prometheus `remote_write` API.\n\n## Trade-offs\n\nBy heavily optimizing Prometheus for remote write and resource reduction, some\ntrade-offs have been made:\n\n- You can't query the Agent; you can only query metrics from the remote write\n  storage.\n- Recording rules aren't supported.\n- Alerts aren't supported.\n- When sharding the Agent, if your node has problems that interrupt metric\n  availability, metrics tracking that node won't be sent for alerting on.\n\nWhile the Agent can't use recording rules and alerts, `remote_write` systems such\nas Mimir currently support server-side rules and alerts. Note that this trade-off\nmeans that reliability of alerts are tied to the reliability of the remote system\nand alerts will be delayed at least by the time it takes for samples to reach\nthe remote system.\n\n## Getting Started\n\nWhen using Kubernetes this [link](https://grafana.com/docs/grafana-cloud/quickstart/agent-k8s) offers the best guide.\n\nOther installation methods can be found in our\n[Grafana Agent](https://grafana.com/docs/agent/latest/set-up/) documentation.\n\nMore detailed [documentation](./docs/README.md) is provided as part of the\nrepository.\n\n## Example\n\nThe [`example/`](./example) folder contains docker-compose configs and a local\nk3d/Tanka environment. Both examples deploy the Agent, Cortex and Grafana for\ntesting the agent. See the [docker-compose README](./example/docker-compose/README.md)\nand the [k3d example README](./example/k3d/README.md) for more information.\n\n## Prometheus Vendoring\n\nThe Grafana Agent vendors a downstream Prometheus repository maintained by\n[Grafana Labs](https://github.com/grafana/prometheus). This is done so\nexperimental features Grafana Labs wants to contribute upstream can first be\ntested and iterated on quickly within the Agent. We aim to keep the\nexperimental changes to a minimum and upstream changes as soon as possible.\n\nFor more context on our vendoring strategy, read our\n[downstream repo maintenance guide](./docs/developer/downstream-prometheus.md).\n\n## Getting Help\n\nIf you have any questions or feedback regarding the Grafana Agent:\n\n* Ask a question on the Agent Slack channel. To invite yourself to the Grafana\n  Slack, visit https://slack.grafana.com/ and join the #agent channel.\n* Alternatively ask questions on the\n  [Discussions page](https://github.com/grafana/agent/discussions).\n* [File an issue](https://github.com/grafana/agent/issues/new) for bugs, issues\n  and feature suggestions.\n* Attend the [Grafana Agent Community Call](https://docs.google.com/document/d/1TqaZD1JPfNadZ4V81OCBPCG_TksDYGlNlGdMnTWUSpo).\n\n## Contributing\n\nAny contributions are welcome and details can be found\n[in our contributors guide](./docs/developer/contributing.md).\n", "release_dates": []}, {"name": "hashbrown", "description": "Rust port of Google's SwissTable hash map", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "hashbrown\n=========\n\n[![Build Status](https://travis-ci.com/rust-lang/hashbrown.svg?branch=master)](https://travis-ci.com/rust-lang/hashbrown)\n[![Crates.io](https://img.shields.io/crates/v/hashbrown.svg)](https://crates.io/crates/hashbrown)\n[![Documentation](https://docs.rs/hashbrown/badge.svg)](https://docs.rs/hashbrown)\n[![Rust](https://img.shields.io/badge/rust-1.49.0%2B-blue.svg?maxAge=3600)](https://github.com/rust-lang/hashbrown)\n\nThis crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of SwissTable can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\nSince Rust 1.36, this is now the `HashMap` implementation for the Rust standard\nlibrary. However you may still want to use this crate instead since it works\nin environments without `std`, such as embedded systems and kernels.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\n\n## [Change log](CHANGELOG.md)\n\n## Features\n\n- Drop-in replacement for the standard library `HashMap` and `HashSet` types.\n- Uses [AHash](https://github.com/tkaitchuck/aHash) as the default hasher, which is much faster than SipHash.\n  However, AHash does *not provide the same level of HashDoS resistance* as SipHash, so if that is important to you, you might want to consider using a different hasher.\n- Around 2x faster than the previous standard library `HashMap`.\n- Lower memory usage: only 1 byte of overhead per entry instead of 8.\n- Compatible with `#[no_std]` (but requires a global allocator with the `alloc` crate).\n- Empty hash maps do not allocate any memory.\n- SIMD lookups to scan multiple hash entries in parallel.\n\n## Performance\n\nCompared to the previous implementation of `std::collections::HashMap` (Rust 1.35).\n\nWith the hashbrown default AHash hasher:\n\n| name                    |  oldstdhash ns/iter | hashbrown ns/iter | diff ns/iter |  diff %  | speedup |\n|:------------------------|:-------------------:|------------------:|:------------:|---------:|---------|\n| insert_ahash_highbits       | 18,865      | 8,020         |               -10,845 | -57.49%  | x 2.35 |\n| insert_ahash_random         | 19,711      | 8,019         |               -11,692 | -59.32%  | x 2.46 |\n| insert_ahash_serial         | 19,365      | 6,463         |               -12,902 | -66.63%  | x 3.00 |\n| insert_erase_ahash_highbits | 51,136      | 17,916        |               -33,220 | -64.96%  | x 2.85 |\n| insert_erase_ahash_random   | 51,157      | 17,688        |               -33,469 | -65.42%  | x 2.89 |\n| insert_erase_ahash_serial   | 45,479      | 14,895        |               -30,584 | -67.25%  | x 3.05 |\n| iter_ahash_highbits         | 1,399       | 1,092         |                  -307 | -21.94%  | x 1.28 |\n| iter_ahash_random           | 1,586       | 1,059         |                  -527 | -33.23%  | x 1.50 |\n| iter_ahash_serial           | 3,168       | 1,079         |                -2,089 | -65.94%  | x 2.94 |\n| lookup_ahash_highbits       | 32,351      | 4,792         |               -27,559 | -85.19%  | x 6.75 |\n| lookup_ahash_random         | 17,419      | 4,817         |               -12,602 | -72.35%  | x 3.62 |\n| lookup_ahash_serial         | 15,254      | 3,606         |               -11,648 | -76.36%  | x 4.23 |\n| lookup_fail_ahash_highbits  | 21,187      | 4,369         |               -16,818 | -79.38%  | x 4.85 |\n| lookup_fail_ahash_random    | 21,550      | 4,395         |               -17,155 | -79.61%  | x 4.90 |\n| lookup_fail_ahash_serial    | 19,450      | 3,176         |               -16,274 | -83.67%  | x 6.12 |\n\n\nWith the libstd default SipHash hasher:\n\n|name                     |  oldstdhash ns/iter | hashbrown ns/iter | diff ns/iter |  diff %  | speedup |\n|:------------------------|:-------------------:|------------------:|:------------:|---------:|---------|\n|insert_std_highbits       |19,216      |16,885           |            -2,331    |   -12.13%  | x 1.14 |\n|insert_std_random         |19,179      |17,034           |            -2,145    |   -11.18%  | x 1.13 |\n|insert_std_serial         |19,462      |17,493           |            -1,969    |   -10.12%  | x 1.11 |\n|insert_erase_std_highbits |50,825      |35,847           |            -14,978   |   -29.47%  | x 1.42 |\n|insert_erase_std_random   |51,448      |35,392           |            -16,056   |   -31.21%  | x 1.45 |\n|insert_erase_std_serial   |87,711      |38,091           |            -49,620   |   -56.57%  | x 2.30 |\n|iter_std_highbits         |1,378       |1,159            |            -219      |   -15.89%  | x 1.19 |\n|iter_std_random           |1,395       |1,132            |            -263      |   -18.85%  | x 1.23 |\n|iter_std_serial           |1,704       |1,105            |            -599      |   -35.15%  | x 1.54 |\n|lookup_std_highbits       |17,195      |13,642           |            -3,553    |   -20.66%  | x 1.26 |\n|lookup_std_random         |17,181      |13,773           |            -3,408    |   -19.84%  | x 1.25 |\n|lookup_std_serial         |15,483      |13,651           |            -1,832    |   -11.83%  | x 1.13 |\n|lookup_fail_std_highbits  |20,926      |13,474           |            -7,452    |   -35.61%  | x 1.55 |\n|lookup_fail_std_random    |21,766      |13,505           |            -8,261    |   -37.95%  | x 1.61 |\n|lookup_fail_std_serial    |19,336      |13,519           |            -5,817    |   -30.08%  | x 1.43 |\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nhashbrown = \"0.10\"\n```\n\nThen:\n\n```rust\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"one\");\n```\n## Flags\nThis crate has the following Cargo features:\n\n- `nightly`: Enables nightly-only features including: `#[may_dangle]`.\n- `serde`: Enables serde serialization support.\n- `rayon`: Enables rayon parallel iterator support.\n- `raw`: Enables access to the experimental and unsafe `RawTable` API.\n- `inline-more`: Adds inline hints to most functions, improving run-time performance at the cost\n  of compilation time. (enabled by default)\n- `bumpalo`: Provides a `BumpWrapper` type which allows `bumpalo` to be used for memory allocation.\n- `ahash`: Compiles with ahash as default hasher. (enabled by default)\n- `ahash-compile-time-rng`: Activates the `compile-time-rng` feature of ahash. For targets with no random number generator\nthis pre-generates seeds at compile time and embeds them as constants. See [aHash's documentation](https://github.com/tkaitchuck/aHash#flags) (disabled by default)\n\n## License\n\nLicensed under either of:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n", "release_dates": []}, {"name": "indexers-docs", "description": null, "language": "MDX", "license": null, "readme": "# Website\n\nThis website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.\n\n### Installation\n\n```\n$ yarn\n```\n\n### Local Development\n\n```\n$ yarn start\n```\n\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\n\n### Build\n\n```\n$ yarn build\n```\n\nThis command generates static content into the `build` directory and can be served using any static contents hosting service.\n\n### Deployment\n\nUsing SSH:\n\n```\n$ USE_SSH=true yarn deploy\n```\n\nNot using SSH:\n\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\n", "release_dates": []}, {"name": "Infrastructure-Working-Group", "description": "Infrastructure Working Group", "language": null, "license": null, "readme": "# Infrastructure Working Group\nWorking for the Infrastructure Committee of the NDC, helping to organize projects, refine RFIs, RFPs, and RFFs. Engaging community projects to help improve NEAR ecosystem infrastructure.\n\n - **RFI** = Request For Ideation. An ideation phase as a request to spark discusion before effort is expended on a full RFP or RFF.\n - **RFP** = Request For Proposal. A request asking community partners / projects to make a proposal to complete the work.\n - **RFF** = Request For Funding. A planned effort requesting funds to complete a project or to start discovery of a project.\n\nVisit our [Home Page](https://github.com/near/Infrastructure-Working-Group/wiki) for more information.\n", "release_dates": []}, {"name": "introverse", "description": "Welcome to Sahsa.Services!", "language": "WebAssembly", "license": null, "readme": "# Welcome to the ~INTROVERSE~ sasha.services\n\n## Template for NEAR dapps\n\n### Features\n* Create NEAR dapps with a React frontend \ud83d\udc32\n* We got Gulp! \ud83d\udca6\n\n### Requirements\n##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x \n1. node and npm\n2. near shell\n```\nnpm i -g near-shell\n```\n3.(optional) install yarn to build\n```\nnpm i -g yarn\n```\n\n### To run on testnet\n#### Step 1: Create account for the contract and deploy the contract.\nYou'll now want to authorize NEAR shell on your NEAR account, which will allow NEAR Shell to deploy contracts on your NEAR account's behalf \\(and spend your NEAR account balance to do so\\).\n\nType the command `near login` which should return a url:\n\n```bash\nPlease navigate to this url and follow the instructions to log in:\nhttps://wallet.nearprotocol.com/login/?title=NEAR+Shell&public_key={publicKey}\n```\n\nFrom there enter in your terminal the same account ID that you authorized:\n\n`Please enter the accountId that you logged in with: <asdfasdf>`\n\nOnce you have entered your account ID, it will display the following message:\n\n`Missing public key for <asdfasdf> in default`\n`Logged in with masternode24`\n\nThis message is not an error, it just means that it will create a public key for you.\n\n#### Step 2:\nModify src/config.js line that sets the contractName. Set it to id from step 1.\n```javascript\n(function() {\n    const CONTRACT_NAME = 'react-template'; /* TODO: Change this to your contract's name! */\n    const DEFAULT_ENV = 'development';\n    ...\n})();\n```\n\n#### Step 3:\nFinally, run the command in your terminal.\n```\nnpm install && npm start\n```\nwith yarn:\n```\nyarn install && yarn start\n```\nThe server that starts is for static assets and by default serves them to localhost:3000. Navigate there in your browser to see the app running!\n\n### Deploy\nCheck the scripts in the package.json, for frontend and backend both, run the command:\n```bash\nnpm run(yarn) deploy\n```\n\n### Test\nFor test file src/App.test.js, it works for the template after finishing step 3 above. If smart contract and index.js change, user should change to their functions to test. The command is:\n```bash\nnpm run(yarn) test\n```\n\n### To Explore\n\n- `assembly/main.ts` for the contract code\n- `public/index.html` for the front-end HTML\n- `src/index.js` for the JavaScript front-end code and how to integrate contracts\n- `src/App.js` for the first react component\n", "release_dates": []}, {"name": "jsonrpc-benchmark", "description": "NEAR JSON RPC benchmark results", "language": "Shell", "license": null, "readme": "# NEAR JSON RPC benchmark\n\n## Install [`drill`](https://github.com/fcsonline/drill) with dependencies and run the benchmark\n\n* Install [`cargo`](https://doc.rust-lang.org/cargo/getting-started/installation.html)\n\n    ```bash\n    $ curl https://sh.rustup.rs -sSf | sh\n    $ source $HOME/.cargo/env\n    ```\n\n* Install dependencies\n\n    ```bash\n    $ sudo apt install -y build-essential pkg-config libssl-dev\n    ```\n\n* Clone this repo\n\n    ```bash\n    $ git clone https://github.com/near/jsonrpc-benchmark\n    ```\n\n* Navigate to the folder and run `drill`\n\n    ```bash\n    $ cd jsonrpc-benchmark/\n    $ chmod a+x run.sh\n    $ URL=\"http://localhost:3030\" ./run.sh # to run each method sequentially\n    $ drill --benchmark benchmark.yml --stats # to run the methods concurrently\n    ```\n\n## Reasoning for chosen methods to benchmark\n\nFor the benchmarking we decided to go with `testnet`. We have spin up the node on GCP `e2-standard-8` (which is recommended machine type for the rpc nodes).\n\nBefore writing a drill config we've investigated (manually) the logs of nginx on a few nodes to find out what kind of methods are the most frequent. Despite the \"easy\" methods (like `block`, `chunk`) there were some `query` view calls:\n\n* `view_state`\n* `view_account`\n* `view_access_key_list`\n\nIt was decided to go with those three. Also we've added `view_call` to call view method of some contract. We choose an existing account with contract and small (not empty) state.\n\nDuring the benchmark we're sending each of the four query requests and **the main metric currently is requests per second (rps)**\n\n## Benchmark results we've got\n\n### Request sent from another machine in the same region\n\n```\nView call method          Total requests            3000\nView call method          Successful requests       3000\nView call method          Failed requests           0\nView call method          Median time per request   16ms\nView call method          Average time per request  20ms\nView call method          Sample standard deviation 8ms\n\nTime taken for tests      15.7 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       191.18 [#/sec]\nMedian time per request   16ms\nAverage time per request  20ms\nSample standard deviation 8ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://34.91.236.50:3030\n\n\nView access key list      Total requests            3000\nView access key list      Successful requests       3000\nView access key list      Failed requests           0\nView access key list      Median time per request   9ms\nView access key list      Average time per request  9ms\nView access key list      Sample standard deviation 6ms\n\nTime taken for tests      7.6 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       393.99 [#/sec]\nMedian time per request   9ms\nAverage time per request  9ms\nSample standard deviation 6ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://34.91.236.50:3030\n\n\nView account              Total requests            3000\nView account              Successful requests       3000\nView account              Failed requests           0\nView account              Median time per request   8ms\nView account              Average time per request  9ms\nView account              Sample standard deviation 2ms\n\nTime taken for tests      7.5 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       398.99 [#/sec]\nMedian time per request   8ms\nAverage time per request  9ms\nSample standard deviation 2ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://34.91.236.50:3030\n\n\nView state                Total requests            3000\nView state                Successful requests       3000\nView state                Failed requests           0\nView state                Median time per request   9ms\nView state                Average time per request  9ms\nView state                Sample standard deviation 6ms\n\nTime taken for tests      7.9 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       380.32 [#/sec]\nMedian time per request   9ms\nAverage time per request  9ms\nSample standard deviation 6ms\n```\n\n### Request sent from the same machine (locally)\n\n```\nView call method          Total requests            3000\nView call method          Successful requests       3000\nView call method          Failed requests           0\nView call method          Median time per request   8ms\nView call method          Average time per request  8ms\nView call method          Sample standard deviation 2ms\n\nTime taken for tests      7.1 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       419.84 [#/sec]\nMedian time per request   8ms\nAverage time per request  8ms\nSample standard deviation 2ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://127.0.0.1:3030\n\n\nView access key list      Total requests            3000\nView access key list      Successful requests       3000\nView access key list      Failed requests           0\nView access key list      Median time per request   1ms\nView access key list      Average time per request  1ms\nView access key list      Sample standard deviation 1ms\n\nTime taken for tests      1.6 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       1894.98 [#/sec]\nMedian time per request   1ms\nAverage time per request  1ms\nSample standard deviation 1ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://127.0.0.1:3030\n\n\nView account              Total requests            3000\nView account              Successful requests       3000\nView account              Failed requests           0\nView account              Median time per request   1ms\nView account              Average time per request  1ms\nView account              Sample standard deviation 1ms\n\nTime taken for tests      1.4 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       2079.54 [#/sec]\nMedian time per request   1ms\nAverage time per request  1ms\nSample standard deviation 1ms\nConcurrency 4\nIterations 3000\nRampup 5\nBase URL http://127.0.0.1:3030\n\n\nView state                Total requests            3000\nView state                Successful requests       3000\nView state                Failed requests           0\nView state                Median time per request   1ms\nView state                Average time per request  1ms\nView state                Sample standard deviation 1ms\n\nTime taken for tests      1.8 seconds\nTotal requests            3000\nSuccessful requests       3000\nFailed requests           0\nRequests per second       1680.33 [#/sec]\nMedian time per request   1ms\nAverage time per request  1ms\nSample standard deviation 1ms\n```\n", "release_dates": []}, {"name": "lang-DAO-grants", "description": "Collection of programing language grants available, funded, and a place to propose them.", "language": null, "license": null, "readme": "Collection of grants around language support on NEAR available and a place to propose them.\n\nTo claim a grant post a comment in the issue, open a work in progress PR to the relevant project and post it.  The issue then will move from open to pending.\n\nFinally once completed you propose a grant here for AssemblyScript: https://sputnik.fund/#/assemblyscript.sputnikdao.near.\n\nLastly you cannot work on multiple grants at once to allow others to get a chance.\n\n## Grants\n\nCheck out [the issues to see open grants](https://github.com/near/grants/issues?q=is%3Aopen+is%3Aissue+label%3A%22Open+Grant%22).\nFrom initial set of grants [here](https://gov.near.org/t/assemblyscript-grant-q1-2021/697).\n", "release_dates": []}, {"name": "learn", "description": "NEAR Educational Initiative Tracking", "language": null, "license": null, "readme": "# LEARN.NEAR HOME - Learn and Earn about NEAR, building on NEAR and building NEAR\n\n## Objective: \n\n**At LEARN.NEAR we want to onboard to NEAR Users and Devs so they can use and build meaningful applications and improve NEAR itself as Measured by:**\nTBD\n- Developer on-boarding time\n- https://explorer.near.org/stats\n- https://explorer.testnet.near.org/stats\n- MAU\n- Contracts deployed Testnet/MainNet\n\n\n## Tools:\n- Internal Communication: #learn-near Discord channel\n- External communication: TBD\n- Outbound Communication: Discourse\n- Project Board: GitHub project - https://github.com/near/learn/projects/1\n- Curriculum drafts/content: Google Docs\n- Meetings: Google Calendar/Zoom\n\n\n## Collective (alphabetical order):\n\n- Erik Trautman\n- Evgeny Kuzyakov\n- Mike Purvis\n- Robert Yan\n- Sasha Baksht\n- Sherif Abushadi\n", "release_dates": []}, {"name": "libbf-test", "description": null, "language": null, "license": null, "readme": "# Testing libbf with Boost.Multiprecision Test Suite\n\n## Background\n\nThe libbf library is an arbitrary-precision floating-point arithmetic library that is used as a part of the QuickJS virtual machine.\n\nThe objective of this project is to ensure the correctness and stability of the libbf library by performing additional testing beyond the existing libbf test suite.\n\n\n## Approach\n\nTo ensure the stability and correctness of the libbf library, we decided to perform additional testing using the test suite from the boost.multiprecision library, which is a comprehensive set of tests designed for a generic implementation of integer and floating-point numbers.\n\nTo achieve this, we have implemented a boost.multiprecision backend on top of the libbf library for both integer and floating-point numbers. This allows us to run tests from the boost.multiprecision test suite to validate the correctness of the libbf library.\n\n\n## Results\n\nAfter running the boost.multiprecision test suite with the libbf backend, we found that the library works correctly for a wide range of inputs and scenarios. All the tests passed without any issues, and we did not encounter any errors or failures. This indicates that the libbf library is stable and reliable, and can be used in real-world applications with confidence.\n\n\n## Structure of this project\n\nThe project has the following structure:\n- `bf_float` - implementation of boost.multiprecision backends for floating-point and integer numbers on top of the the libbf library\n- `test` - copy of all applicable boost.multiprecision tests with added support of libbf backed\n- `quickjs` - quickjs git submodule containing libbf library\n- `boost` - modular boost git submodule\n\n\n## Building and running tests\n\nTo build and run the tests, follow these steps:\n1. Pull all required submodules:\n   ```\n   cd <source_dir>\n   git submodule update --init --recursive\n   ```\n2. Configure the project using CMake:\n   ```\n   cd <build_dir>\n   cmake <source_dir> [additional cmake options]\n   ```\n   You can specify additional cmake options when configuring the project, for example:\n   - `-DCMAKE_C_COMPILER=...` and `-DCMAKE_CXX_COMPILER=...` - to set C and C++ compilers to build.\n   - `-DCMAKE_BUILD_TYPE=[Debug|Release]` - to set debug or release build type\n3. Build the project:\n   ```\n   make\n   ```\n4. Run tests:\n   ```\n   ctest\n   ```\n\n## List of tests\n\n### Passed tests\n\n|Test Name                      |Description |\n|-------------------------------|-------------------|\n|test_acos                      | Tests acos floating point function. Tested with precisions: 113, 50, 100, 200, 400. |\n|test_asin                      | Tests asin floating point function. Tested with precisions: 113, 50, 100, 200, 400. |\n|test_atan                      | Tests atan floating point function. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_constants                 | Tests calculating ln2, e, pi floating point constants. Tested with precision 2000. |\n|test_cos                       | Tests cos floating point function test. Tested with precisions: 113, 50, 100, 200, 400. |\n|test_cos_near_half_pi          | Tests cos floating point function for values near pi/2. Tested with precisions: 113, 50, 100, 200, 400 |\n|test_cosh                      | Tests cosh function. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_exp                       | Tests exp floating point function. Tested with precisions: 113, 50, 100, 200. |\n|test_float_arithmetic          | Basic arithmetic tests including corner cases, for floating point types (tested precisions: 113, 50, 100, 200, 500, 1000)      |\n|test_gcd                       | Tests GCD calculation for big integer. Tested with infinite precision. |\n|test_int_arithmetic            | Basic arithmetic tests including corner cases, for integer types (tested integer with infinite precision) |\n|test_log                       | Tests log floating point function. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_miller_rabin              | Test for equality of results of the Miller\u2013Rabin primality test performed with integer number implementation and libgmp implementation. Tested with precisions: infinite, 64, 128, 1024 |\n|test_pow                       | Tests pow floating point function. Tested with precisions: 113, 50, 100, 200, 400, 500. |\n|test_sin                       | Tests sin floating point function. Tested with precisions: 113, 50, 100, 200, 400. |\n|test_sinh                      | Tests sinh floating point function. Tested with precisions: 113, 50, 100, 200, 400. |\n|test_tan                       | Tests tan floating point function. Tested with precisions: 113, 50, 100, 200. |\n|test_tanh                      | Tests tanh floating point function. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_sin_near_half_pi          | Tests sin floating point function for values near pi/2. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_sf_import_c99             | Big amount of various tests for compatibility with C99 standard. Tested with precision 334. |\n|test_signed_zero               | Signed zero tests. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_round                     | Tests rounding functions. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n|test_sqrt                      | Tests sqrt function. Tested with precisions: 113, 50, 100, 200, 400, 500, 1000. |\n\n\n\n### Not useful tests\n\n|Test Name                      |Description|\n|-------------------------------|-----------|\n|test_assume_uniform_precision  | Tests for managing current default precision for specific implementation. Does not test computations. |\n|test_convert*                  | Tests conversion between different number implementations. Does not test computations. |\n|test_fixed_zero_precision_io   | Tests correct specific to boost.multiprecision formatting for stdio. Does not test computations. |\n|test_float_io                  | Tests float conversion to/from string specific to boost.multiprecision. Does not test computations. |\n|test_fpclassify                | Tests fpclassify function in number traits. Does not test computations. |\n|test_generic_conv              | Tests conversions between different implementations. Does not test computations. |\n|test_int_io                    | Tests integer conversion to/from string specific to boost.multiprecision. Does not test computations. |\n|test_hash                      | Tests std::hash support for big numbers. Does not test computations. |\n|test_mixed                     | Tests performing operations with mixed precisions. Not implemented for libbf. |\n|test_nothrow*                  | Tests various type traits related to the nothrow specifier. Does not test computations. |\n|test_move                      | Tests std::move support for big numbers. Does not test computations. |\n|test_optional_compat           | Tests compatiblity with boost::optional type. Does not test computations. |\n|test_preserve_*_precision      | Tests for changing default computation precision. Does not test computations. |\n|test_rational_io               | Tests formatting with iostream. Does not test computations. |\n|test_threaded_precision        | Tests setting default precision for different threads. Does not test computations. |\n|test_trailing_io_delim         | Tests parsing numbers from strings with trailing characters. Does not test computations. |\n\n\n### Not applicable tests\n\n\n|Test Name                              |Description|\n|---------------------------------------|-----------|\n|constexpr_test_*                       | Tests for compile-time computations with the built-in boost.multiprecision implementations of big numbers. Compile time computations are not applicable to libbf |\n|standalone_test_convert_from_tom_int   | Specialized test for the tommath library |\n|test_adapt_serial                      | Serialization tests for built-in boost.multiprecision implementation of big numbers |\n|test_checked_*cpp_int                  | Tests for throwing correct exceptions for builtin boost.multiprecision implementation of big integers |\n|test_complex*                          | Tests for complex numbers |\n|test_cpp_*                             | Performs tests specific to the built-in boost.multiprecision big numbers implementation |\n|test_float_conversions                 | Tests compile time numeric traits for builtin boost.multiprecision big numbers implementation. |\n|test_float128_serial                   | Tests serialization of builtin float implementation |\n|test_gmp_conversions                   | Tests conversions between built-in implementation and libgmp implementation. |\n|test_mpc*                              | libmpc implementation specific tests. |\n|test_mpfr*                             | libmpfr implementation specific tests. |\n|test_rat_float_interconv               | Tests conversion between different float implementations. |\n|test_roots_10k_digits                  | Tests calculating sqrt with built-in implementation for very big numbers. Supports only built-in implementation. |\n\n\n### Other not tested tests\n|Test Name              |Description|\n|-----------------------|-----------|\n|test_eigen             | Test for interoperability with the Eigen linear algebra C++ library. Requires additional dependency. |\n|test_int_sqrt          | Tests calculating sqrt for built-in integer implementation. Can be used for testing libbf, but requires additional implementation of conversion from 128bit integer (__int128) |\n", "release_dates": []}, {"name": "local", "description": null, "language": null, "license": null, "readme": "# local\n\n* wallet\n* near-contract-helper\n* indexer\n\nRequirements:\ndocker and docker-compose\n\nStarting all applications\n\n```bash\ndocker-compose up\n```\n\nStopping\n\n```bash\ndocker-compose down\n```\n\nRunning commands inside containers\n\n```bash\ndocker-compose exec bridge head /root/.rainbow/logs/ganache/out.log -n 20\n```\n\nDefault urls:\n\nnear-wallet: http://localhost:1234\nbridge-frontend: http://localhost:2000\nexplorer: http://localhost:9001\n", "release_dates": []}, {"name": "metabuidl-profiles", "description": null, "language": null, "license": null, "readme": "# Team Matching board: BUIDLERS\n\nThis repository is [OpenWeb Job Board](https://jobs.openweb.dev/) fork, it hold buidlers & creators profiles for [NEAR Protocol](https://near.org) [METABUIDL Global Hachathon](https://metabuidl.splashthat.com/). All profiles organized in [its issues](https://github.com/near/metabuidl-profiles/issues). \n\nDO NOT USE THIS REPOSITORY ISSUES DIRECTLY, for fully-featured access to open positions and its management sign-in via [metabuidl.nearspace.info/](https://metabuidl.nearspace.info/).\n\n![NEAR Protocol \u2014 Community members' profiles](https://jobs.openweb.dev/images/profiles-1280x640.png)\n\n## CANDIDATE TEMPLATE\n\nUse this template if you're looking for a teammate within [METABUIDL Global Hachathon](https://metabuidl.splashthat.com/). Following candidate [ISSUE_TEMPLATE](https://github.com/near/openweb-profiles/blob/main/.github/ISSUE_TEMPLATE/candidate-profile.md) when creating a new issue.\n\n- __Available for__: `full-time`|`project`|`freelance`|`bounty`\n- __Categories__: `engineering`|`design`|`customer-support`|`research`|`other`\n- __Location__: `country:city`|`remote`\n- __Skills__: `near-blockchain`|`rust`|`nodejs`|`vue`|`javascript`|`other`\n- __Free-form CV:__ Multi-line mark-down formatted background description.\nWith details regarding previous experience, contact information and skills.\n\n## PROJECT/COMPANY TEMPLATE\n\nUse this template if you will be creating new team within [METABUIDL Global Hachathon](https://metabuidl.splashthat.com/). Following company [ISSUE_TEMPLATE](https://github.com/near/openweb-profiles/blob/main/.github/ISSUE_TEMPLATE/company-project-profile.md) when creating a new issue.\n\n- __Free-form description:__ Multi-line mark-down formatted project/company description.\n", "release_dates": []}, {"name": "metabuidl-teams", "description": null, "language": null, "license": null, "readme": "# Team Matching board: TEAMS\n\nThis repository is [OpenWeb Job Board](https://jobs.openweb.dev/) fork, it hold teams profiles for [NEAR Protocol](https://near.org) [METABUIDL Global Hachathon](https://metabuidl.splashthat.com/). All teams organized in [its issues](https://github.com/near/metabuidl-teams/issues). Please, follow our [ISSUE_TEMPLATE](https://github.com/near/metabuidl-teams/blob/main/.github/ISSUE_TEMPLATE/new-job-post.md) when posting a new team.\n\nDO NOT USE THIS REPOSITORY ISSUES DIRECTLY, for fully-featured access to open positions and its management sign-in via [metabuidl.nearspace.info/](https://metabuidl.nearspace.info/).\n\n## TEAM TEMPLATE\n\n- __Project:__ [`profiles/#1`](https://github.com/near/metabuidl-teams/issues/1)\n- __Type:__ `full-time`|`project`|`freelance`|`bounty`\n- __Category:__ `engineering`|`design`|`customer-support`|`research`|`other`\n- __Location:__ `country:city`\n- __Remote:__ `no`|`yes`\n- __Required skills:__ `near-blockchain`|`rust`|`node.js`|`vue`|`javascript`|`other`\n- __Description:__ Multi-line mark-down formatted job description.\nWith details regarding company, position, duties, requirements, contact information etc.\n", "release_dates": []}, {"name": "mpc-recovery", "description": null, "language": "Rust", "license": null, "readme": "# MPC Account Recovery (WIP)\nThe aim of this project is to offer NEAR users the opportunity to create and restore their accounts by utilizing OIDC protocol. By linking their NEAR account to `near.org` or other authentication provider, they can then add a new Full Access key, which will be managed by the trusted network of servers. Should they lose all the keys they possess, they can reauthorize themselves, create a new key, and add it into their NEAR account using a transaction that will be signed by MPC servers through their recovery key. All the transaction cost will be covered by a relayer server and metatransactions.\n\n## How the MPC system will work\n- The system consists of 3 trusted signing nodes and a leader node\n- Each node holds a unique secret key\n- Each action must be signed by all 3 nodes\n- Nodes signatures are then combined into a single signature on the leader node\n\nIn the future we are planning to get rid  of the leader node to make the system more decentralized.\n\n## External API\n\nThe recovery service is currently hosted at https://near.org\n\n### Claim OIDC Id Token ownership\n\n    URL: /claim_oidc\n    Request parameters: {\n        oidc_token_hash: [u8; 32],\n        frp_public_key: String,\n        frp_signature: [u8; 64],\n    }\n    Response: Ok {\n        mpc_signature: String,\n    } / Err {\n        msg: String\n    }\n\nThe frp_signature you send must be an Ed22519 signature of the hash:\n\n    SALT = 3177899144\n    sha256.hash(Borsh.serialize<u32>(SALT + 0) ++ Borsh.serialize<[u8]>(oidc_token_hash) ++ [0] ++ Borsh.serialize<[u8]>(frp_public_key))\n\nsigned with your on device public key.\n\nThe constant 3177899144 is a random number between 2^31 and 2^32 which as described [here](https://github.com/gutsyphilip/NEPs/blob/8b0b05c3727f0a90b70c6f88791152f54bf5b77f/neps/nep-0413.md#example) prevents collisions with legitimate on chain transactions.\n\nIf you successfully claim the token you will receive a signature in return of:\n\n    sha256.hash(Borsh.serialize<u32>(SALT + 1) ++ Borsh.serialize<[u8]>(signature))\n\nThis will be signed by the nodes combined Ed22519 signature.\n\n### MPC Public Key\n\n    URL: /mpc_public_key\n    Request parameters: {}\n    Response: Ok {\n        mpc_pk: String,\n    } / Err {\n        msg: String\n    }\n\nReturns the MPC public key that is used to sign the OIDC claiming response. Should not be used in production environment, as the MPC PK should be hardcoded in the client.\n\n### User Credentials\n\n    URL: /user_credentials\n    Request parameters: {\n        oidc_token: String,\n        frp_signature: Signature,\n        frp_public_key: String,\n    }\n    Response: Ok {\n        public_key: String,\n    } / Err {\n        msg: String\n    }\n\nReturns the recovery public key associated with the provided OIDC token.\nThe frp_signature you send must be an Ed22519 signature of the hash:\n\n    sha256.hash(Borsh.serialize<u32>(SALT + 2) ++ Borsh.serialize<[u8]>(oidc_token) ++ [0] ++ Borsh.serialize<[u8]>(frp_public_key))\n\n### Create New Account\n\n    URL: /new_account\n    Request parameters: {\n        near_account_id: String,\n        create_account_options: CreateAccountOptions,\n        oidc_token: String,\n        user_credentials_frp_signature: Signature,\n        frp_public_key: String,\n    }\n    Response:\n    Ok {\n        create_account_options: CreateAccountOptions,\n        recovery_public_key: String,\n        near_account_id: String,\n    } /\n    Err {\n        msg: String\n    }\n\nThis creates an account with account Id provided in `near_account_id`. If this name is already taken then this operation will fail with no action having been taken.\n\nThis service will send a `create_account` transaction to the relayer signed by `account_creator.near` account. If this operation is successful relayer will make an allowance for the created account.\n\nNewly created NEAR account will have two full access keys. One that was provided by the user, and the recovery one that is controlled by the MPC system.\n\nIn the future, MPC Service will disallow creating account with ID Tokes that were not claimed first. It is expected, that PK that client wants to use for the account creation is the same as the one that was used to claim the ID Token.\n\nThe user_credentials_frp_signature you send must be an Ed22519 signature of the hash:\n\n    sha256.hash(Borsh.serialize<u32>(SALT + 2) ++ Borsh.serialize<[u8]>(oidc_token) ++ [0] ++ Borsh.serialize<[u8]>(frp_public_key))\n\nsigned by the key you used to claim the oidc token. This does not have to be the same as the key in the public key field. This digest is the same as the one used in the user_credentials endpoint, because new_account request needs to get the recovery public key of the user that is creating the account.\n\n### Sign\n\n    URL: /sign\n    Request parameters: {\n        delegate_action: String, // Base64-encoded borsh serialization of DelegateAction\n        oidc_token: String,\n        frp_signature: Signature,\n        user_credentials_frp_signature: Signature,\n        frp_public_key: String,\n    }\n    Response:\n    Ok {\n        signature: Signature,\n    } /\n    Err {\n        msg: String\n    }\n\nThis endpoint can be used to sign a delegate action that can then be sent to the relayer. The delegate action is signed by user recovery key.\n\nThe frp_signature you send must be an Ed22519 signature of the hash:\n\n    sha256.hash(Borsh.serialize<u32>(SALT + 3) ++\n    Borsh.serialize<[u8]>(delegate_action) ++\n    Borsh.serialize<[u8]>(oidc_token) ++\n    [0] ++ Borsh.serialize<[u8]>(frp_public_key))\n\nThe user_credentials_frp_signature is needed to get user recovery PK. It is the same as in user_credentials endpoint.\n\n## OIDC (OAuth 2.0) authentication\n\nWe are using OpenID Connect (OIDC) standard to authenticate users (built on top of OAuth 2.0).\nCheck OIDC standard docs [here](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) and Google OIDC docs [here](https://developers.google.com/identity/protocols/oauth2/openid-connect)\n\n## Front-runnig protection flow\nBefore transmitting your OIDC Id Token to the recovery service you must first claim the ownership of the token. This prevents a rogue node from taking your Id Token and using it to sign another request.\n\nThe expected flow for the client is next:\n1. Client-side developer hardcodes the MPC PK in the client code. It should be provided by MPC Recovery service developers and compared to the one that is returned by `/mpc_public_key` endpoint. You MUST NOT fetch the MPC PK from the nodes themselves in production env.\n2. Client generates a key pair that is stored in their device. It can be same key pair that is used to sign the transactions.\n3. Client recieves an OIDC Id Token from the authentication provider.\n4. Client claims the ownership of the token by sending a request to the `/claim_oidc_token` endpoint.\n5. In reponce to the claim request, user recieves a signature that is signed by the MPC system.\n6. User verifies that the signature is valid. It garantees that each node in the system has seen the token and will not accept it again with another key.\n7. Now client can safely send their Id Token with `/sign` or other requests.\n8. Once the token is expaired, client can claim a new one and continue using the MPC Recovery service.\n\nCheck our integration tests to see how it works in practice.\n\nRegistered ID Token will be added to the persistent DB on each Signing node and saved until expiration. Registered Id Tokens are tied to the provided PK.\n\n## Sign flow\nThe expected flow for the client is next:\n1. Client uses `/user_credentials` endpoint to get the recovery PK.\n2. Client fetches latest nonce, block hash using obtained recovery PK.\n3. Client creates a delegate action with desired actions, such as add or delete key.\n4. Client serializes the delegate action and encodes it into Base64.\n5. Client gets the signature from the MPC system using `/sign` endpoint.\n6. Client sends the same delegate action to the relayer with obtained signature.\n\n### Client integration\n\nThere are several ways to get and use the ID token. The flow that we are using is called the \"server\" flow, you can find more info [here](https://developers.google.com/identity/openid-connect/openid-connect#authenticatingtheuser). The system will be able to process any token that is following the core OpenID Connect standard. In order to receive the ID token from OpenID provider you will need to include the `openid` scope value to the Authorization Request.\n\n### Server integration\n\nInternally, we are identifying users by their issuer id (iss) and their unique ID (sub) retrieved form the ID token and separated by a colon: `<issuer_iss>:<user_sub>`. It means that each recovery method (like GitHub and Google) is separated from one another even if they have the same email.\n\n### Contribute\n\nIn order to build the project, you will need to have `protoc` and `gmp` installed. Refer to your system's package manager on how to do this.\n\nIf you have [nix](https://nixos.org/) and [direnv](https://direnv.net/) installed, you can set up a development environment by running:\n\n```BASH\ndirenv allow\n```\n\nRun unit tests with:\n```BASH\ncargo test -p mpc-recovery\n```\n", "release_dates": []}, {"name": "multichain-gas-station-contract", "description": null, "language": "Rust", "license": null, "readme": "# Multichain Gas Station Contract\n\n> This is still early software.\n\nThis smart contract accepts payments in NEAR tokens in exchange for gas funding on non-NEAR foreign chains. Part of the NEAR Multichain effort, it works in conjunction with the [MPC recovery service](https://github.com/near/mpc-recovery) to generate on-chain signatures.\n\n## What is it?\n\nThis smart contract is a piece of the NEAR Multichain project, which makes NEAR Protocol an effortlessly cross-chain network. This contract accepts EVM transaction request payloads and facilitates the signing, gas funding, and relaying of the signed transactions to their destination chains. It works in conjunction with a few different services, including:\n\n- The [MPC recovery service](https://github.com/near/mpc-recovery), also called the \"MPC signer service\", includes a network of trusted MPC signers, which hold keyshares and cooperatively sign transactions on behalf of the MPC network. It also includes an on-chain component, called the \"MPC signer contract,\" which accepts on-chain signature requests and returns signatures computed by the MPC network.\n- The [multichain relayer server](https://github.com/near/multichain-relayer-server) scans _this_ smart contract for signed transaction payloads and emits them to foreign chain RPCs.\n\n## How does it work?\n\nCurrently, relaying one transaction to a foreign chain requires three transactions. However, [NEP-516 (delayed receipts / runtime triggers)](https://github.com/near/NEPs/issues/516) will reduce this number to one.\n\nTransaction breakdown:\n\n1. The first transaction is a call to the `create_transaction` function. This function accepts an EVM transaction request payload and a deposit amount (to pay for gas on the foreign chain) and returns an `id` and a `pending_transactions_count`.\n2. The second transaction is a call to the `sign_next` function. This function accepts the `id` returned in step 1 and returns a signed payload. This payload is the gas funding transaction, transferring funds from a paymaster account on the foreign chain to the user's account on the foreign chain. It must be submitted to the foreign chain before the second signed payload.\n3. The third transaction is another call to the `sign_next` function, identical to the one before. This function accepts an `id` and returns a signed payload. This payload is the signed user transaction.\n\nThree transactions are required because of the gas restrictions imposed by the protocol. Currently (pre-NEP-516), the MPC signing function requires a _lot_ of gas, so dividing up the signing process into three parts is required to maximize the amount of gas available to each signing call.\n\nOnce this service and its supporting services are live, the multichain relayer server will be monitoring this gas station contract and relaying the signed transactions in the proper order as they become available, so it will not be strictly necessary for the users of this contract to ensure that the transactions are properly relayed, unless the user wishes to relay the transactions using their own RPC (e.g. to minimize latency).\n\n### `sign_next` call trace explanation\n\nLet's say `alice.near` has already called `create_transaction(..., use_paymaster=true)` on the gas station contract `gas-station.near`, and has obtained a transaction sequence `id` as a result of that function call.\n\nNext, `alice.near` calls `gas-station.near::sign_next(id)`. Because this is the first `sign_next` call, the contract first generates a paymaster gas funding transaction. However, this is payload is unsigned at first. It is unwise[^unwise] to keep private keys on-chain (they would cease to be private), so the contract invokes another service, the MPC signing service.\n\n[^unwise]: The debug/mock version of this contract _does_ store private keys on-chain (**big no-no**), making it _only suitable for testing_.\n\nThis service allows us to request signatures from a particular private key that the gas station contract controls. The MPC service allows the gas station contract to request a key by \"path,\" which is simply a string. The signing service then uses a combination of the predecessor account ID (in this case, `gas-station.near`), the path string provided as a parameter to the signature request, and a few other pieces of information to derive a recoverable signature for the payload that recovers to a stable public key.\n\nIn the case of the paymaster transaction, the gas station uses a special set of predetermined path strings that map to known addresses on the foreign chain. These addresses are pre-funded with the native (gas) token for that foreign chain. Thus, when the gas station contract requests signatures for the paymaster transaction payload, the signed transactions are able to manipulate the funds in that foreign account.\n\nIn the case of the second, user-provided transaction, the gas station passes the user's account ID as the path string to the MPC signer service. This means that each transaction requested by `alice.near` will receive a signature that recovers to the same public key (foreign address) every time.\n\nTherefore, the call trace for the two `sign_next` transactions looks something like this:\n\n1. `alice.near` &rarr; `gas-station.near::sign_next(id) -> SignedTransaction`\n   - `gas-station.near` &rarr; `mpc-signer.near::sign(payload=..., path=$0) -> Signature`\n2. `alice.near` &rarr; `gas-station.near::sign_next(id) -> SignedTransaction`\n   - `gas-station.near` &rarr; `mpc-signer.near::sign(payload=..., path=alice.near) -> Signature`\n\n## Requirements\n\n- Rust & Cargo\n- [`cargo-make`](https://github.com/sagiegurari/cargo-make)\n- [`near-cli-rs`](https://github.com/near/near-cli-rs)\n\n## Build\n\n```bash\ncargo make build\n```\n\nThe WASM binary will be generated in `target/wasm32-unknown-unknown/release/`.\n\nThe debug build can be generated with the command:\n\n```bash\ncargo make build-debug\n```\n\n## Contract Interactions\n\n### Setup and Administration\n\n1. Initialize the contract with a call to `new`. [The owner](https://github.com/near/near-sdk-contract-tools/blob/develop/src/owner.rs) is initialized as the predecessor of this transaction. All of the following transactions must be called by the owner.\n2. Refresh the MPC contract public key by calling `refresh_signer_public_key`.\n3. Set up foreign chain configurations with `add_foreign_chain`.\n4. Add paymasters to each foreign chain with `add_paymaster`.\n\n### Usage\n\nUsers who wish to get transactions signed and relayed by this contract and its accompanying infrastructure should perform the following steps:\n\n1. Construct an unsigned transaction payload for the foreign chain they wish to interact with, e.g. Ethereum.\n2. Call `create_transaction` on this contract, passing in that payload and activating the `use_paymaster` toggle in the case that the user wishes to use a paymaster. If the user uses a paymaster, he must attach a sufficient quantity of NEAR tokens to this transaction to pay for the gas + service fee. This function call returns an `id` and a `pending_transactions_count`.\n3. Call `sign_next`, passing in the `id` value obtained in the previous step. This transaction should be executed with the maximum allowable quantity of gas (i.e. 300 TGas). This transaction will return a signed payload, part of the sequence of transactions necessary to send the user's transaction to the foreign chain. Repeat `pending_transactions_count` times.\n4. Relay each signed payload to the foreign chain RPC in the order they were requested.\n\n## Authors\n\n- Jacob Lindahl <jacob.lindahl@near.org> [@sudo_build](https://twitter.com/sudo_build)\n", "release_dates": []}, {"name": "multichain-relayer-server", "description": "Pagoda Implementation of Multichain Relayer Server facilitating cross chain transactions ", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# multichain-relayer-server\nPagoda Implementation of Multichain Relayer Server facilitating cross chain transactions \n\n## Description\nThis server interacts with RPCs on other chains sending both presigned funding transactions to cover gas and the actual presigned transaction once the funding is done. The goal is to package this as a library that can be called on the client side of the wallet. This server relies heavily on:\n - EVM RPCs will be interacted with using the [alloy](https://github.com/alloy-rs/) crate. Initially we will connect to public RPCs\n - TODO Solana crate and RPC providers.\n\n## Functionality\n1. Funding the user's xchain account with gas from the paymaster treasury account, which is provided as a raw signed transaction\n2. Sending the user's raw signed transaction (in hexadecimal in EVM case)\n3. (MVP only) `/get_balance_for_account` endpoint that gets the native gas token (BNB) balance for an account. AKA Poor man's indexing\n\n\n## Technical Design\nThe Technical Design is detailed in https://docs.google.com/document/d/1ZvfiVDXSykYsdH8v816G-V5OizAUtpw9WAh1ihwz908/edit\n\nBelow is a Design Diagram of the entire multichain relayer system. \nThis server repo focuses on the purple/blue Multichain Relayer Core Backend Services Box in the middle and the connections to the XChain systems in the red box via RPCs.  \n![img.png](img.png)\n", "release_dates": []}, {"name": "multisig-tool", "description": "A tool / UI to manage multisig contracts", "language": "JavaScript", "license": null, "readme": null, "release_dates": []}, {"name": "multistaker", "description": "Tool to stake from many accounts with random delays", "language": "JavaScript", "license": null, "readme": "# Multistaker\n\nThis is a simple tool that allows to setup staking to various pools from various accounts in a single Ledger.\nThis tool doesn't track anything and can be run locally (download the html + js and just open it local browser). Everything that tool stores is stored in local storage.\n\nFor additional privacy (paranoia level 100), run personal node should be used to query blockchain data (e.g. hide RPC requests).\n\n## Instructions\n\n1. Open the tool\n2. Define Ledger path range to load (e.g. 44'/397'/0'/0'/1' - 44'/397'/0'/0'/5')\n3. This should load all your accounts + lockups\n4. Specify for each account which staking pool you want to delegate to and can edit amount (it creates a jitter around the amounts)\n5. Specify period of time to send transactions during and press \"Allocate\"\n6. This will generate transactions at once to stake everything, with different `blockHash` and schedule to submit them at random times in specified period time\n6. Click a lot on Ledger to sign transactions (you should always look at what you are signing - as this is the only way to ensure you are not signing malicious transactions)\n7. Wait for requested period of time to see allocations\n\n", "release_dates": []}, {"name": "near-abi-client-js", "description": "Library to generate JavaScript/TypeScript client code from NEAR ABI", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# near-abi-client-js\nLibrary to generate JavaScript/TypeScript client code from NEAR ABI\n", "release_dates": []}, {"name": "near-abi-client-rs", "description": "Library to generate Rust client code from NEAR ABI", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<!-- markdownlint-disable MD014 -->\n\n<div align=\"center\">\n\n  <h1><code>near-abi-client-rs</code></h1>\n\n  <p>\n    <strong>Library to generate Rust client code with <a href=\"https://github.com/near/workspaces-rs\">workspaces-rs</a> from <a href=\"https://github.com/near/abi\">ABI schemas</a> on NEAR</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/near/near-abi-client-rs/actions/workflows/test.yml?query=branch%3Amain\"><img src=\"https://github.com/near/near-abi-client-rs/actions/workflows/test.yml/badge.svg\" alt=\"Github CI Build\" /></a>\n    <a href=\"https://crates.io/crates/near-abi-client\"><img src=\"https://img.shields.io/crates/v/near-abi-client.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/near-abi-client\"><img src=\"https://img.shields.io/crates/d/near-abi-client.svg?style=flat-square\" alt=\"Downloads\" /></a>\n  </p>\n\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Usage\n\nThis crate supports two sets of APIs for users with different needs:\n* **Macro-driven**. Gives you a client in a single macro invocation.\n* **Generation-based**. Gives you more control and is transparent about what code you end up using, but requires more setup.\n\n### Macro API\n\nCheckout the [`delegator-macro`](https://github.com/near/near-abi-client-rs/tree/main/examples/delegator-macro) example for a standalone project using macro API to get a client and use it.\n\nTo generate a struct named `ClientName` based on ABI located at `path/to/abi.json` (relative to the current file's directory):\n\n```rust\nmod mymod {\n    near_abi_client::generate!(ClientName for \"path/to/abi.json\");\n}\n```\n\nPlacing the macro invocation inside a `mod` section is optional, but helps reducing unexpected behaviors such as name clashes.\n\nNow, assuming you have a `contract: near_workspaces::Contract` deployed, you can make a call like this:\n\n```rust\nlet contract = mymod::ClientName { contract };\nlet res = contract\n    .my_method_name(arg1, arg2)\n    .await?;\n```\n\n### Generation API\n\nCheckout the [`delegator-generation`](https://github.com/near/near-abi-client-rs/tree/main/examples/delegator-generation) example for a standalone project using generation API to generate a client and use it.\n\nFirst, we need our package to have a `build.rs` file that runs the generation step. The following snippet will generate the client in `abi.rs` under `path/to/out/dir`:\n\n```rust\nfn main() -> anyhow::Result<()> {\n    near_abi_client::Generator::new(\"path/to/out/dir\".into())\n        .file(\"path/to/abi.json\")\n        .generate()?;\n    Ok(())\n}\n```\n\nThe resulting file, however, is not included in your source set by itself. You have to include it manually; the recommended way is to create a mod with a custom path:\n\n```\n#[path = \"path/to/out/dir/abi.rs\"]\nmod mymod;\n```\n\nNow, assuming you have a `contract: near_workspaces::Contract` deployed, you can make a call like this:\n\n```rust\nlet contract = mymod::AbiClient { contract };\nlet res = contract\n    .my_method_name(arg1, arg2)\n    .await?;\n```\n\nFeel free to explore what other methods `Generator` has to customize the resulting code (e.g. client struct name).\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as below, without any additional terms or conditions.\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": ["2024-01-25T14:12:26Z", "2024-01-25T14:12:01Z", "2024-01-25T14:11:42Z", "2023-01-04T05:48:45Z"]}, {"name": "near-abi-js", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# near-abi-js\n\nNEAR smart contract ABI primitives\n", "release_dates": ["2022-12-20T06:51:59Z", "2022-11-22T04:51:23Z"]}, {"name": "near-abi-rs", "description": "NEAR smart contract ABI primitives", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<div align=\"center\">\n\n  <h1><code>near-abi-rs</code></h1>\n\n  <p>\n    <strong>Rust library providing NEAR ABI models.</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/near/near-abi-rs/actions/workflows/test.yml?query=branch%3Amain\"><img src=\"https://github.com/near/near-abi-rs/actions/workflows/test.yml/badge.svg\" alt=\"Github CI Build\" /></a>\n    <a href=\"https://crates.io/crates/near-abi\"><img src=\"https://img.shields.io/crates/v/near-abi.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/near-abi\"><img src=\"https://img.shields.io/crates/d/near-abi.svg?style=flat-square\" alt=\"Download\" /></a>\n    <a href=\"https://docs.rs/near-abi\"><img src=\"https://docs.rs/near-abi/badge.svg\" alt=\"Reference Documentation\" /></a>\n  </p>\n\n  <h3>\n      <a href=\"https://github.com/near/abi\">NEAR ABI</a>\n      <span> | </span>\n      <a href=\"https://docs.rs/near-abi\">Reference Documentation</a>\n      <span> | </span>\n      <a href=\"#contributing\">Contributing</a>\n  </h3>\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Overview\n\n\u2757 **Warning: ABI is still in early stages of development so expect breaking changes to this library until we reach 1.0**\n\nThis library is meant to serve as an unopinionated reference for Rust models of the [NEAR ABI](https://github.com/near/abi).\n\n## ABI Metaschema\n\nThis repo also contains meta [JSON Schemas](https://json-schema.org/) of ABI. These schemas can be found in the [`metaschema`](/metaschema) folder: `near-abi-${version}-schema.json` for a specific ABI schema version or `near-abi-current-schema.json` for what is currently in the `main` branch of the repository.\n\nMetaschemas describe the properties of ABI schema format and allow anyone to validate whether a JSON file is a valid NEAR ABI. For example, one could use an online validator like https://www.jsonschemavalidator.net/ or a library such as [ajv](https://github.com/ajv-validator/ajv).\n\n## Contributing\n\nIf you are interested in contributing, please look at the [contributing guidelines](CONTRIBUTING.md).\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": ["2024-01-21T10:30:48Z", "2023-11-02T09:41:56Z", "2023-10-08T07:43:28Z", "2022-11-02T08:08:49Z", "2022-10-13T07:02:23Z", "2022-10-13T07:01:45Z"]}, {"name": "near-account-id-rs", "description": "Rust crate to work with valid NEAR Protocol account ids in a safe way", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# near-account-id\n\nThis crate provides a type for representing a syntactically valid, unique account identifier on the [NEAR](https://near.org) network, according to the [NEAR Account ID](https://docs.near.org/concepts/basics/account#account-id-rules) rules.\n\n[![crates.io](https://img.shields.io/crates/v/near-account-id?label=latest)](https://crates.io/crates/near-account-id)\n[![Documentation](https://docs.rs/near-account-id/badge.svg)](https://docs.rs/near-account-id)\n![MIT or Apache 2.0 licensed](https://img.shields.io/crates/l/near-account-id.svg)\n\n## Usage\n\n```rust\nuse near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse()?;\n\nassert!(\"\u0192elicia.near\".parse::<AccountId>().is_err()); // (\u0192 is not f)\n```\n\nSee the [docs](https://docs.rs/near-account-id) for more information.\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n\n## Minimum Supported Rust Version (MSRV)\n\n1.65\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2023-12-22T12:58:18Z", "2023-11-24T16:25:04Z", "2023-11-06T21:49:41Z", "2023-11-03T21:59:37Z", "2023-10-29T21:08:03Z"]}, {"name": "near-analytics", "description": null, "language": "Python", "license": null, "readme": "# near-analytics\n\nAnalytics Tool for NEAR Blockchain.  \n[NEAR Explorer](https://explorer.near.org/) uses it for [mainnet](https://explorer.near.org/stats) and [testnet](https://explorer.testnet.near.org/stats).\n\nKeep in mind that the data (both format and the contents) could be changed at any time, the tool is under development.\n\n<img width=\"918\" alt=\"Example of data\" src=\"https://user-images.githubusercontent.com/11246099/135101272-61fe872f-2129-455d-aee1-00d0f4570900.png\">\n\n### Install\n\n```bash\nsudo apt install python3.9-distutils libpq-dev python3.9-dev postgresql-server-dev-all\n\npython3.9 -m pip install --upgrade pip\npython3.9 -m pip install -r requirements.txt\n```\n\n### Run\n\n```bash\npython3.9 main.py -h\n```\n\n### Contribute\n\nSee [Contributing Guide](CONTRIBUTING.md) for details\n\n### Usage examples\n\nApart from [NEAR Explorer](https://explorer.near.org/stats), see [nice blogpost](https://analyticali.substack.com/p/near-analytics-cheatsheet) with the tutorial and beautiful pictures based on NEAR Analytics data.\n", "release_dates": []}, {"name": "near-api-helper", "description": "Cloudflare worker that can batch RPC calls", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "\n\n# NEAR API Helper\n\n\nBatch near-api-js RPC calls.\n\nOptionally flatten and sort arrays of objects.\n\n## \ud83d\udea8 Warning this is WIP \ud83d\udea8\n- Not officially supported (yet)\n- Potential syntax changes\n- For now route does nothing (v1/testnet/view only example)\n\n## Notes\nI am aware snake_case and JSON in REST is ugly. However, not willing to convert all method names and args from what you would normally use with near-api-js. e.g. maintain consistency between these API calls and RPC calls as best I can.\n\n## Syntax\n```bash\n# GET (note with http you need to escape the JSON with single quotes first)\nhttp https://helper.nearapi.org/v1/contract/dev-1618440176640-7650905/nft_token/'{\"token_id\":\"token-1619265007329\"}'\n```\n\n# Example calls from client side:\n```js\n// consts\nconst domain = 'http://127.0.0.1:8787'; // wrangler dev local testing\n// const domain = 'https://helper.nearapi.org/v1/contract/' // testnet helper domain\nconst domainAndPath = domain + '/v1/contract/';\nconst testNFTPath = domainAndPath + 'dev-1618440176640-7650905/nft_token/';\nconst batchPath = domain + '/v1/batch/';\n```\n\n\n## It should have the whole rpc response\n\n\nReturns a raw response for a given view near-api-js call (viewFunction)\n\n\n```javascript\nconst args = JSON.stringify({\n\ttoken_id: 'token-1619265007329'\n});\nconst url = testNFTPath + args;\nconsole.log('\\n URL:\\n', url, '\\n');\nconst response = await fetch(url).then((res) => res.json());\n\nassert.strictEqual(Object.keys(response).length > 1, true);\n```\n\n## It should return just a field with the last field name as key\n\n\nUse this to drill into JSON responses (e.g. get metadata for a token)\n\n\n```javascript\nconst args = JSON.stringify({\n\ttoken_id: 'token-1619265007329'\n});\nconst actions = JSON.stringify({\n\tfield: 'metadata.media'\n});\nconst url = testNFTPath + args + '/' + actions;\nconsole.log('\\n URL:\\n', url, '\\n');\nconst response = await fetch(url).then((res) => res.json());\n\nassert.strictEqual(Object.keys(response).length, 1);\n```\n\n## It should have a bot response with customized fields\n\n\nCreates a bot response for when you share your links (link previews with images etc...)\n\n\n```javascript\nconst args = JSON.stringify({\n\ttoken_id: 'token-1619265007329'\n});\nconst actions = JSON.stringify({\n\tbotMap: {\n\t\t'og:title': 'MEOW',\n\t\t'og:image': { field: 'metadata.media' }\n\t}\n});\nconst url = testNFTPath + args + '/' + actions;\nconsole.log('\\n URL:\\n', url, '\\n');\nconst response = await fetch(url, {\n\theaders: {\n\t\t'user-agent': 'facebookexternalhit'\n\t}\n}).then((res) => res.text());\n\nconsole.log(response);\n\nassert.strictEqual(response.indexOf('MEOW') > -1, true);\n```\n\n## It should return an encoded url\n\n\nTurn your call into an encoded URL that you can use for sharing (prettier than JSON in REST)\n\nbotMap for bots -> link preview\nredirect for users -> NFT item\n\n\n```javascript\nconst args = JSON.stringify({\n\ttoken_id: 'token-1619265007329'\n});\nconst actions = JSON.stringify({\n\tbotMap: {\n\t\t'og:title': 'MEOW',\n\t\t'og:image': { field: 'metadata.media' }\n\t},\n\tredirect: 'https%3A%2F%2Fnear-apps.github.io%2Fnft-market%2F',\n\tencodeUrl: true,\n});\nconst url = testNFTPath + args + '/' + actions;\nconsole.log('\\n URL:\\n', url, '\\n');\nconst response = await fetch(url).then((res) => res.json());\nassert.strictEqual(Object.keys(response)[0], 'encodedUrl');\n\n// redirect will return html from market which should not contain the string MEOW\nconst encodedUrl = Object.values(response)[0];\nconsole.log('\\n URL:\\n', encodedUrl, '\\n');\nconst response2 = await fetch(encodedUrl).then((res) => res.text());\nassert.strictEqual(response2.indexOf('MEOW') === -1, true);\n```\n\n## It should return a batched response\n\n\nUse this to get a lot of data at once.\n\nCall different view methods.\n\nWithin each call, the first and second arguments of batch must have names matching the contract arguments used for offset and limit.\n\ne.g. if the contract has args like \"offset\" and \"num\", you need to use: batch: { offset: '0', num: '100', step: '10' }\n\nThis means \"start at '0' and keep making RPC calls until '100' increasing by '10' each time.\" creating a total of 10 RPC calls in the helper, but only 1 call and reponse for the user.\n\nflatten: [] combines results into an array vs. separate RPC results\n\nWIP\nsort.field: what field on the objects to use for sorting\nsort.parse: how to treat the field \"int\": parseInt or \"bn\": parseFloat(parseNearAmount(val, 8)) // 8 decimal approximation of NEAR\n\n\n```javascript\nconst batch = [{\n\tcontract: 'dev-1618440176640-7650905',\n\tmethod: 'nft_tokens',\n\targs: {},\n\tbatch: {\n\t\tfrom_index: '0', // must be name of contract arg (above)\n\t\tlimit: '200', // must be name of contract arg (above)\n\t\tstep: '10', // divides contract arg 'limit'\n\t\tflatten: [], // how to combine results\n\t},\n\tsort: {\n\t\tpath: 'metadata.issued_at',\n\t}\n},\n{\n\tcontract: 'market.dev-1618440176640-7650905',\n\tmethod: 'get_sales_by_nft_contract_id',\n\targs: {\n\t\tnft_contract_id: 'dev-1618440176640-7650905'\n\t},\n\tbatch: {\n\t\tfrom_index: '0', // must be name of contract arg (above)\n\t\tlimit: '100', // must be name of contract arg (above)\n\t\tstep: '10', // divides contract arg 'limit'\n\t\tflatten: [], // how to combine results\n\t},\n\tsort: {\n\t\tpath: 'conditions.near',\n\t\tparse: 'bn'\n\t}\n}];\n\nconst url = batchPath + JSON.stringify(batch);\nconsole.log('\\n URL:\\n', url, '\\n');\n\nconst response = await fetch(batchPath + JSON.stringify(batch)).then((res) => res.json());\n\nassert.strictEqual(response.length, 2);\nassert.strictEqual(response[0].length > 20, true);\nassert.strictEqual(response[1].length > 0, true);\n```\n\n## It should return a batched response\n\n\nMainnet Test\n\n\n```javascript\nconst batch = [{\n\tcontract: 'nft_679bada6b8.near-hackathon.collab-land.near',\n\tmethod: 'nft_tokens',\n\targs: {},\n\tbatch: {\n\t\tfrom_index: '0', // must be name of contract arg (above)\n\t\tlimit: '1000', // must be name of contract arg (above)\n\t\tstep: '50', // divides contract arg 'limit'\n\t\tflatten: [], // how to combine results\n\t},\n}];\n\nconst url = batchPath + JSON.stringify(batch);\nconsole.log('\\n URL:\\n', url, '\\n');\n\nconst response = await fetch(batchPath + JSON.stringify(batch), {\n\theaders: {\n\t\t'near-network': 'mainnet'\n\t}\n}).then((res) => res.json());\n\nassert.strictEqual(response[0].length > 300, true);\n```\n", "release_dates": []}, {"name": "near-api-js", "description": "JavaScript library to interact with NEAR Protocol via RPC API", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR JavaScript API\n\n[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fnear%2Fnear-api-js%2Fbadge&style=flat&label=Build)](https://actions-badge.atrox.dev/near/near-api-js/goto)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/near/near-api-js) \n\nNEAR JavaScript API is a complete library to interact with the NEAR blockchain. You can use it in the browser, or in Node.js runtime.\n\n## Documentation\n\n- [Learn how to use](https://docs.near.org/tools/near-api-js/quick-reference) the library in your project\n\n- Read the [TypeDoc API](https://near.github.io/near-api-js/) documentation\n\n- [Cookbook](./packages/cookbook) with common use cases\n\n- To quickly get started with integrating NEAR in a _web browser_, read our [Web Frontend integration](https://docs.near.org/develop/integrate/frontend) article.\n\n## Contribute to this library\n\n1. Install dependencies\n\n       pnpm install\n\n2. Run continuous build with:\n\n       pnpm -r compile -w\n\n\n### Publish\n\nPrepare `dist` version by running:\n\n    pnpm dist\n\n### Integration Test\n\nStart the node by following instructions from [nearcore](https://github.com/nearprotocol/nearcore), then\n\n    pnpm test\n\nTests use sample contract from `near-hello` npm package, see https://github.com/nearprotocol/near-hello\n\n### Update error schema\n\nFollow next steps:\n\n1. [Change hash for the commit with errors in the nearcore](https://github.com/near/near-api-js/blob/master/fetch_error_schema.js#L8-L9)\n2. Fetch new schema: `node fetch_error_schema.js`\n3. `pnpm build` to update `lib/**.js` files\n\n\n## Packages\n\n![Package Architecture in Onion Diagram](./docs/package-architecture.png)\n<!-- https://www.figma.com/file/TzAPceViAbYW6A6KAuEMCe/NAJ-packages?t=N9nlkGBoAx9FYxoN-1 -->\n\n- [accounts](https://github.com/near/near-api-js/tree/master/packages/accounts) account creation & management\n- [crypto](https://github.com/near/near-api-js/tree/master/packages/crypto) cryptographic key pairs & signing\n- [keystores](https://github.com/near/near-api-js/tree/master/packages/keystores) general-purpose key persistence & management\n- [keystores-browser](https://github.com/near/near-api-js/tree/master/packages/keystores-browser) browser keystores\n- [keystores-node](https://github.com/near/near-api-js/tree/master/packages/keystores-node) NodeJS keystores\n- [providers](https://github.com/near/near-api-js/tree/master/packages/providers) RPC interaction\n- [transactions](https://github.com/near/near-api-js/tree/master/packages/transactions) transaction composition & signing\n- [types](https://github.com/near/near-api-js/tree/master/packages/types) common types\n- [utils](https://github.com/near/near-api-js/tree/master/packages/utils) common methods\n- [wallet-account](https://github.com/near/near-api-js/tree/master/packages/wallet-account) accounts in browser-based wallets\n\n## License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2024-02-23T09:14:03Z", "2024-02-23T09:14:19Z", "2024-02-23T09:14:16Z", "2024-02-23T09:14:12Z", "2024-02-23T09:14:10Z", "2024-02-23T09:14:06Z", "2024-02-23T09:14:22Z", "2024-02-23T09:14:00Z", "2024-02-23T09:13:57Z", "2024-02-23T09:13:54Z", "2024-02-23T09:13:51Z", "2024-02-23T09:13:49Z", "2024-01-11T09:30:05Z", "2024-01-11T09:30:17Z", "2024-01-11T09:30:14Z", "2024-01-11T09:30:11Z", "2024-01-11T09:30:08Z", "2024-01-11T09:29:56Z", "2024-01-11T09:30:02Z", "2024-01-11T09:29:59Z", "2024-01-11T09:29:53Z", "2024-01-11T09:29:50Z", "2024-01-11T09:29:47Z", "2023-12-20T15:50:11Z", "2023-12-20T15:50:23Z", "2023-12-20T15:50:20Z", "2023-12-20T15:50:17Z", "2023-12-20T15:50:14Z", "2023-12-20T15:50:02Z", "2023-12-20T15:50:08Z"]}, {"name": "near-api-kotlin", "description": null, "language": "Kotlin", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Kotlin SDK\nThis is a open source project on kotlin for NEAR protocol.\n\n# Description\n\nNear Android SDK implemented in Kotlin to interact with the NEAR blockchain.\n\n# Features\n* Includes Login into Near wallet\n* Send transactions\n* Retrieve information about accounts and contracts\n* Sign and send transactions\n* View access keys and more.\n\n# Requirements\n\n\u2022\tMinimum android version API 26+\n\n\u2022\tMinimum Java 8 version\n\n# RPC Calls\nWe support [THIS](https://docs.near.org/api/rpc/introduction) rpc calls.\n\n## Configuration\n\nFirst add dependency to your app build.gradle\n```\nimplementation 'com.github.near:near-api-kotlin:1.0.14`\n```\n\nthen, add the next resource in your settings.gradle\n\n```\nmaven { url \"https://jitpack.io\" }\n```\n\n## Usage\n\nIn your manifest add the next permissions\n\n```\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\nyou should have an activity and inside you have to add an intent filter\n\n```\n<activity\n            android:name=\".DemoActivity\"\n            android:exported=\"true\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n                <data\n                    android:host=\"success-auth\"\n                    android:scheme=\"near\" />\n            </intent-filter>\n</activity>\n```\n\nthis will help your activity catch the data we need after login into your Near wallet account in your browser.\n\n# First\n## Login into your account\n\nThe first thing you should do before accessing all the other functions in the Near SDK library is logging into yout Near wallet account.\n\nIn your activity you should create an instance of ``` NearMainService ```\n\n```\nprivate var nearMainService: NearMainService = NearMainService(this)\n```\n\nthen, call login() method. This will call an Intent to open browser and login into your Near wallet account.\n\n```\nnearMainService.login(\"yourusername.testnet\")\n```\n\nFinally, override the onResume() method and check if login was successfull.\n\n```\n    override fun onResume() {\n        super.onResume()\n        val uri = intent.data\n        if (nearMainService.attemptLogin(uri)){\n            // Do anything after logging in\n        }\n    }\n```\nOnce you are logged in you can use any method inside ``` NearMainService ``` class.\n\n## Make a Transaction\n\nAfter user is logged in, call ``` sendTransaction() ``` method with the receiver user name and Near amount inside a ``` Coroutine ``` to wait for the response\n\n```\nCoroutineScope(Dispatchers.IO).launch {\n    val sendMoney = withContext(Dispatchers.IO) {\n        nearMainService.sendTransaction(\"receiverusername.testnet\", \"1\")\n      }\n}\n```\n\nand thats it, that's how you make a transaction.\n\nIn this repository we have an example of how to make a transaction and also how to call a [contract method as view function][1].\n\n\n  [1]: https://google.com\n\n## Demo and Screenshots\n\n![Screenshot_login](https://user-images.githubusercontent.com/36077886/183770807-9ca17193-ec95-454c-be1f-a45b4d76c8bd.png)\n\n![Screenshot_transaction](https://user-images.githubusercontent.com/36077886/183782655-1aed08a2-8061-4e68-a671-bdc760bd15ee.png)\n\n\n\nAfter building the demo project in you local, you will be able to see the first screen where you have to type your user name and continue to login in the browser.\n By clicking on the \"Transaction\" button 1 Near is send to \"android-test-23.testnet\" default account ([Transaction docs][2]) and finally prints the response in the logs and displays it on the screen.\n\n\n  [2]: https://docs.near.org/api/rpc/transactions#send-transaction-async\n \n If you click \"Call function\" button, contract methods are going to be called as [view functions][3].\n\n\n  [3]: https://docs.near.org/api/rpc/contracts#call-a-contract-function\n\nIn this case we have a call for 3 different contracts that receives some parameters and returns a call back and finally it prints the response in the logs and displays it on the screen.\n\n```\n    private fun callFunction() {\n        var balanceOfArgs = \"{ \\\"tokenOwner\\\": \\\"android-test-22.testnet\\\" }\"\n        val contractName = \"android-test-22.testnet\"\n        val balanceOfResponse = this.nearMainService.callViewFunction(contractName, \"balanceOf\", balanceOfArgs)\n        if(balanceOfResponse.error == null) {\n            val functionResult = balanceOfResponse.result.result!!.getDecodedAsciiValue()\n        }\n\n        val totalSupplyArgs = \"{}\"\n        val totalSupplyResponse = this.nearMainService.callViewFunction(contractName, \"totalSupply\", totalSupplyArgs)\n        if(totalSupplyResponse.error == null) {\n            val functionResult = totalSupplyResponse.result.result!!.getDecodedAsciiValue()\n        }\n\n        val transferFromArgs = \"{ \\\"from\\\": \\\"android-test-22.testnet\\\", \\\"to\\\": \\\"android-test-23.testnet\\\", \\\"tokens\\\": \\\"1\\\" }\"\n        val transferFromResponse = this.nearMainService.callViewFunction(contractName, \"transferFrom\", transferFromArgs)\n        if(transferFromResponse.error == null) {\n            val functionResult = totalSupplyResponse.result.result!!.getDecodedAsciiValue()\n        }\n\n        balanceOfArgs = \"{ \\\"tokenOwner\\\": \\\"android-test-22.testnet\\\" }\"\n        val callViewFunctionTransactionResponse = this.nearMainService.callViewFunctionTransaction(contractName, \"balanceOf\", balanceOfArgs)\n        if(callViewFunctionTransactionResponse.result.status.Failure == null) {\n            callViewFunctionTransactionResponse.result.status.SuccessValue?.let {\n                val decodedValue = String(Base64.getDecoder().decode(it))\n            }\n        }\n\n        val invalidBalanceOfArgs = \"{ tokenOwner: android-test-22.testnet }\"\n        val errorResponse = this.nearMainService.callViewFunctionTransaction(contractName, \"balanceOf\", invalidBalanceOfArgs)\n    }\n```\nIn this block of code we make the calls by using ``` nearMainService.callViewFunction() ``` and ``` nearMainService.callViewFunctionTransaction() ```\n", "release_dates": ["2023-04-29T22:04:17Z", "2023-04-24T20:01:28Z", "2023-03-28T02:19:01Z", "2022-08-15T03:13:52Z"]}, {"name": "near-api-py", "description": "Python API to interact with NEAR via RPC API", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# near-api-py\n\n*Status: super rough, APIs are subject to change*\n\nA Python library for development of applications that are using NEAR platform.\n\n> **Warning**:\n>\n> `near-api-py` is out of date. Use `py-near`:\n>\n> - supports asynchronous requests\n> - support `nearcore==0.17` and delegated transactions\n> - uses `py-near-primitives` wrappers over rust\n>\n> **Repository**: https://github.com/pvolnov/py-near\n>\n> **Documentation:** https://py-near.readthedocs.io/en/latest/quickstart.html\n\n\n# Installation\n\n```bash\npip install near-api\n```\n\n# Usage example\n\n## Send money\n\n```python\nnear_provider = near_api.providers.JsonProvider(\"https://rpc.testnet.near.org\")\n\nsender_key_pair = near_api.signer.KeyPair(\"ed25519:[SENDER_PRIVATE_KEY]\")\nsender_signer = near_api.signer.Signer(\"sender.testnet\", sender_key_pair)\nsender_account = near_api.account.Account(near_provider, sender_signer)\n\nout = sender_account.send_money(\"vsab.testnet\", 1000)\n\nprint(out)\n```\n\n\n## Smart contract call method\n\n```python\ncontract_id = \"contract.testnet\"\nsigner_id = \"signer.testnet\"\nsigner_key = \"ed25519:[SIGNER_SECRET_KEY]\"\nargs = {\"counter\": 1, \"action\": \"increase\"}\n\nnear_provider = near_api.providers.JsonProvider(\"https://rpc.testnet.near.org\")\nkey_pair = near_api.signer.KeyPair(signer_key)\nsigner = near_api.signer.Signer(signer_id, key_pair)\naccount = near_api.account.Account(near_provider, signer)\n\nout = account.function_call(contract_id, \"counter_set\", args)\n\nprint(out)\n```\n\n\n# Contribution\n\nFirst, install the package in development mode:\n```bash\npython setup.py develop\n```\n\nTo run tests, use nose (`pip install nose`):\n```bash\nnosetests\n```\n\n# License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE and LICENSE-APACHE for details.\n", "release_dates": []}, {"name": "near-api-swift", "description": "Interact with NEAR blockchain from iOS and OS X apps using Swift", "language": "Swift", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# nearclientios\n\n[![Build Status](https://travis-ci.com/nearprotocol/near-client-ios.svg?branch=master)](https://travis-ci.com/nearprotocol/near-client-ios)\n[![Version](https://img.shields.io/cocoapods/v/nearclientios.svg?style=flat)](https://cocoapods.org/pods/nearclientios)\n[![License MIT](https://img.shields.io/github/license/nearprotocol/near-client-ios)](https://github.com/nearprotocol/near-client-ios/blob/master/LICENSE)\n[![Platform](https://img.shields.io/cocoapods/p/nearclientios.svg?style=flat)](https://cocoapods.org/pods/nearclientios)\n\n## Example\n\nTo run the example project, clone the repo, and run `pod install` from the Example directory first.\n\n# Usage\n\n```swift\nimport nearclientios\nclass ViewController: UIViewController, WalletSignInDelegate {\n  private var walletAccount: WalletAccount?\n  private var near: Near?\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    let keyStore = KeychainKeyStore(keychain: .init(service: \"example.keystore\"))\n    let config = NearConfig(\n      networkId: \"testnet\", // \"default\" for mainnet \n      nodeUrl: URL(string: \"https://rpc.testnet.near.org\")!, // \"https://rpc.mainnet.near.org\" for mainnet\n      masterAccount: nil,\n      keyPath: nil,\n      helperUrl: nil,\n      initialBalance: nil,\n      providerType: .jsonRPC(URL(string: \"https://rpc.testnet.near.org\")!), // \"https://rpc.mainnet.near.org\" for mainnet\n      signerType: .inMemory(keyStore),\n      keyStore: keyStore,\n      contractName: nil,\n      walletUrl: \"https://wallet.testnet.near.org\" // \"https://wallet.near.org\" for mainnet\n    )\n    near = try Near(config: config)\n    walletAccount = try! WalletAccount(near: near!, authService: DefaultAuthService.shared) // a failed try here represents a configuration error, not a runtime error. It's safe to store a `WalletAccount!`.\n    let appName = UIApplication.name ?? \"signInTitle\"\n    DefaultAuthService.shared.walletSignIn = self\n    try! await walletAccount!.requestSignIn(contractId: nil, title: appName, presentingViewController: self)\n  }\n  func completeSignIn(url: URL) async {\n    try! await walletAccount?.completeSignIn(url: url)\n    MainActor.run {\n      //do any additional UI work on the main thread after sign in is complete\n    }\n  }\n}\n```\n\n## Requirements\n\nnearclientios makes use of Swift's async/await and thus requires iOS 13.\n\n## Installation\n\n### CocoaPods\nnearclientios is available through [CocoaPods](https://cocoapods.org). To install\nit, simply add the following line to your Podfile:\n\n```ruby\npod 'nearclientios'\n```\n\n### Swift Package Manager\nOnce you have your Swift package set up, you can add nearclientios as a dependency in Package.swift.\n\n```swift\ndependencies: [\n  .package(url: \"https://github.com/near/near-api-swift\", .upToNextMajor(from: \"1.0.29\"))\n]\n\n```\n## Examples\n\n* [Basic nearclientios function calls](https://github.com/LyubomyrBurday/near_basic)\n\n## Author\n\nNEAR Inc\n\n## License\n\nnearclientios is available under the MIT license. See the LICENSE file for more info.\n", "release_dates": []}, {"name": "near-api-unity", "description": "Port of https://github.com/near/near-api-js to Unity", "language": "C#", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# near-client-unity\n\n## Author\n\nNEAR Inc\n\n## License\n\nnear-client-unity is available under the MIT license. See the LICENSE file for more info.\n", "release_dates": []}, {"name": "near-blake2", "description": "Pure Rust implementation of the BLAKE2 hash function family.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# RustCrypto: BLAKE2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [BLAKE2 hash function][1] family with changes to\nthe compression function to specify an amount of rounds.\n\n[Documentation][docs-link]\n\n## Minimum Supported Rust Version\n\nRust **1.41** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nLicensed under either of:\n\n * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n * [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/blake2.svg\n[crate-link]: https://crates.io/crates/blake2\n[docs-image]: https://docs.rs/blake2/badge.svg\n[docs-link]: https://docs.rs/blake2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[rustc-image]: https://img.shields.io/badge/rustc-1.41+-blue.svg\n[build-image]: https://github.com/RustCrypto/hashes/workflows/blake2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Ablake2\n\n[//]: # (general links)\n\n[1]: https://blake2.net/\n", "release_dates": []}, {"name": "near-cli", "description": "General purpose command line tools for interacting with NEAR Protocol", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR CLI (command line interface)\n\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/near/near-cli)\n\nNEAR CLI is a Node.js application that relies on [`near-api-js`](https://github.com/near/near-api-js) to connect to and interact with the NEAR blockchain. Create accounts, access keys, sign & send transactions with this versatile command line interface tool.\n\n**Note:** Node.js version 16+ is required to run NEAR CLI.\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Overview\n\n_Click on a command for more information and examples._\n\n| Command                                         | Description                                                                               |\n|-------------------------------------------------|-------------------------------------------------------------------------------------------|\n| **ACCESS KEYS**                                 |                                                                                           |\n| [`near add-credentials`](#near-add-credentials) | Stores credentials for an account locally                                                 |\n| [`near add-key`](#near-add-key)                 | adds a new access key to an account                                                       |\n| [`near delete-key`](#near-delete-key)           | deletes an access key from an account                                                     |\n| [`near generate-key`](#near-generate-key)       | generates a key pair and **optionally** stores it locally as credentials for an accountId |\n| [`near list-keys`](#near-keys)                  | displays all access keys and their details for a given account                            |\n| [`near login`](#near-login)                     | stores a full access key locally using [NEAR Wallet](https://wallet.testnet.near.org/)    |\n| **ACCOUNTS**                                    |                                                                                           |\n| [`near create-account`](#near-create-account)   | creates a new account, either using a faucet to fund it, or an account saved locally      |\n| [`near delete-account`](#near-delete)           | deletes an account and transfers remaining balance to a beneficiary account               |\n| [`near list-keys`](#near-keys)                  | displays all access keys for a given account                                              |\n| [`near send-near`](#near-send)                  | sends tokens from one account to another                                                  |\n| [`near state`](#near-state)                     | shows general details of an account                                                       |\n| **CONTRACTS**                                   |                                                                                           |\n| [`near call`](#near-call)                       | makes a contract call which can invoke `change` _or_ `view` methods                       |\n| [`near deploy`](#near-deploy)                   | deploys a smart contract to the NEAR blockchain                                           |\n| [`near storage`](#near-storage)                 | Shows the storage state of a given contract, i.e. the data stored in a contract           |\n| [`near view`](#near-view)                       | makes a contract call which can **only** invoke a `view` method                           |\n| **TRANSACTIONS**                                |                                                                                           |\n| [`near tx-status`](#near-tx-status)             | queries a transaction's status by `txHash`                                                |\n\n\n---\n\n## Setup\n\n### Installation\n\n> Make sure you have a current version of `npm` and `NodeJS` installed.\n\n#### Mac and Linux\n\n1. Install `npm` and `node` using a package manager like `nvm` as sometimes there are issues using Ledger due to how OS X handles node packages related to USB devices. [[click here]](https://nodejs.org/en/download/package-manager/)\n2. Ensure you have installed Node version 12 or above.\n3. Install `near-cli` globally by running:\n\n```bash\nnpm install -g near-cli\n```\n\nFor example, on Ubuntu 20.04 `near-cli` can be installed by running:\n```bash\n# Install nvm (https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\nsource ~/.bashrc\n\n# Install node\nnvm install node\n\n# Install near-cli\nnpm install -g near-cli\n\n# near-cli works!\nnear --help\n```\n\n#### Windows\n\n> For Windows users, we recommend using Windows Subsystem for Linux (`WSL`).\n\n1. Install `WSL` [[click here]](https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros)\n2. Install `npm` [[click here]](https://www.npmjs.com/get-npm)\n3. Install ` Node.js` [ [ click here ]](https://nodejs.org/en/download/package-manager/)\n4. Change `npm` default directory [ [ click here ] ](https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#manually-change-npms-default-directory)\n    - This is to avoid any permission issues with `WSL`\n5. Open `WSL` and install `near-cli` globally by running:\n\n```bash\nnpm install -g near-cli\n```\n\n---\n\n### Network selection\n\n> The default network for `near-cli` is `testnet`.\n\n- You can change the network by prepending an environment variable to your command.\n\n```bash\nNEAR_NETWORK=testnet near send ...\n```\n\n- Alternatively, you can set up a global environment variable by running:\n\n```bash\nexport NEAR_NETWORK=mainnet\n```\n\n- All commands that interact with the network also allow to pass the `--networkId` option.\n\n```bash\nnear send-near ... --networkId mainnet\n```\n\n---\n\n### Custom RPC server selection\nYou can set custom RPC server URL by setting this env variables:\n```bash\nNEAR_MAINNET_RPC\nNEAR_TESTNET_RPC\n```\nClear them in case you want to get back to the default RPC server.\n\nExample:\n```bash\nexport NEAR_TESTNET_RPC=<put_your_rpc_server_url_here>\n```\n---\n\n## Access Keys\n\nAll keys are stored locally at the root of your `HOME` directory:\n  -   `~/.near-credentials` _(MAC / Linux)_\n  -   `C:\\Users\\YOUR_ACCOUNT\\.near-credentials` _(Windows)_\n\nInside `.near-credentials`, access keys are organized in network subdirectories: `testnet`, and `mainnet`.\n\nThese network subdirectories contain `.JSON` objects with an:\n  -   `account_id`\n  -   `private_key`\n  -   `public_key`\n\n### `near add-credentials <accountId>`\n> Stores credentials (full-access-key) locally for an already existing account.\n\n-   arguments: `accountId`\n-   options: `--seedPhrase` or `--secretKey`\n\n**Examples:**\n\n```bash\nnear add-credentials example-acct.testnet --seedPhrase \"antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\"\n```\n\n---\n\n### `near add-key`\n\n> Adds either a **full access** or **function access** key to a given account.\n\n> Optionally allows to sign with a Ledger: `--signWithLedger` `--ledgerPath`\n\n**Note:** You will use an _existing_ full access key for the account you would like to add a _new_ key to. ([`near login`](http://docs.near.org/docs/tools/near-cli#near-login))\n\n#### 1) add a `full access` key\n\n- arguments: `accountId` `publicKey`\n\n**Example:**\n\n```bash\nnear add-key example-acct.testnet Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Adding full access key = Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S to example-acct.testnet.\n    Transaction Id EwU1ooEvkR42HvGoJHu5ou3xLYT3JcgQwFV3fAwevGJg\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/EwU1ooEvkR42HvGoJHu5ou3xLYT3JcgQwFV3fAwevGJg\n\n</p>\n</details>\n\n#### 2) add a `function call` key\n\n-   arguments: `accountId` `publicKey` `--contract-id`\n-   options: `--method-names` `--allowance`\n\n> `accountId` is the account you are adding the key to\n>\n> `--contract-id` is the contract you are allowing methods to be called on\n>\n> `--method-names` are optional and if omitted, all methods of the `--contract-id` can be called.\n>\n> `--allowance` is the amount of \u24c3 the key is allowed to spend on gas fees _only_ (default: 0).\n\n**Note:** Each transaction made with this key will have gas fees deducted from the initial allowance and once it runs out a new key must be issued.\n\n**Example:**\n\n```bash\nnear add-key example-acct.testnet GkMNfc92fwM1AmwH1MTjF4b7UZuceamsq96XPkHsQ9vi --contract-id example-contract.testnet --method-names example_method --allowance 30000000000\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Adding function call access key = GkMNfc92fwM1AmwH1MTjF4b7UZuceamsq96XPkHsQ9vi to example-acct.testnet.\n    Transaction Id H2BQL9fXVmdTbwkXcMFfZ7qhZqC8fFhsA8KDHFdT9q2r\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/H2BQL9fXVmdTbwkXcMFfZ7qhZqC8fFhsA8KDHFdT9q2r\n\n</p>\n</details>\n\n---\n\n### `near delete-key`\n\n> Deletes an existing key for a given account.\n> Optionally allows to sign with a Ledger: `--signWithLedger` `--ledgerPath`\n\n-   arguments: `accountId` `publicKey`\n-   options: `--networkId`, `force`\n\n**Note:** You will need separate full access key for the account you would like to delete a key from. ([`near login`](http://docs.near.org/docs/tools/near-cli#near-login))\n\n**Example:**\n\n```bash\nnear delete-key example-acct.testnet Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Transaction Id 4PwW7vjzTCno7W433nu4ieA6FvsAjp7zNFwicNLKjQFT\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/4PwW7vjzTCno7W433nu4ieA6FvsAjp7zNFwicNLKjQFT\n\n</p>\n</details>\n\n---\n### `near generate-key`\n\n> Displays a key-pair and seed-phrase and optionally stores it locally in `.near-credentials`.\n\n-   arguments: `accountId` or `none`\n-   options: `--fromSeedPhrase`, `--saveImplicit`, `--queryLedgerPK`\n\n**Note:** There are several ways to use `generate-key` that return very different results. Please reference the examples below for further details.\n\n---\n\n#### 1a) `near generate-key`\n\n> Creates and displays a key pair\n\n```bash\nnear generate-key\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```bash\nSeed phrase: antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\nKey pair: {\"publicKey\":\"ed25519:BW5Q957u1rTATGpanKUktjVmixEmT56Df4Dt9hoGWEXz\",\"secretKey\":\"ed25519:5StmPDg9xVNzpyudwxT8Y72iyRq7Fa86hcpsRk6Cq5eWGWqwsPbPT9woXbJs9Qe69crZJHh4DMkrGEPGDDfmXmy2\"}\nImplicit account: 9c07afc7673ea0f9a20c8a279e8bbe1dd1e283254263bb3b07403e4b6fd7a411\n```\n\n</p>\n</details>\n\n---\n\n#### 1b) `near generate-key --saveImplicit`\n\n> Creates and displays a key pair, saving it locally in `.near-credentials` as an implicit account.\n\n```bash\nnear generate-key --saveImplicit\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```bash\nSeed phrase: antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\nKey pair: {\"publicKey\":\"ed25519:BW5Q957u1rTATGpanKUktjVmixEmT56Df4Dt9hoGWEXz\",\"secretKey\":\"ed25519:5StmPDg9xVNzpyudwxT8Y72iyRq7Fa86hcpsRk6Cq5eWGWqwsPbPT9woXbJs9Qe69crZJHh4DMkrGEPGDDfmXmy2\"}\nImplicit account: 9c07afc7673ea0f9a20c8a279e8bbe1dd1e283254263bb3b07403e4b6fd7a411\n\nStoring credentials for account: 9d6e4506ac06ab66a25f6720e400ae26bad40ecbe07d49935e83c7bdba5034fa (network: testnet)\nSaving key to '~/.near-credentials/testnet/9d6e4506ac06ab66a25f6720e400ae26bad40ecbe07d49935e83c7bdba5034fa.json'\n```\n\n</p>\n</details>\n\n---\n\n#### 2) `near generate-key accountId`\n\n> Creates a key pair locally in `.near-credentials` with an `accountId` that you specify.\n\n**Note:** This does NOT create an account with this name.\n\n```bash\nnear generate-key example.testnet\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```bash\nSeed phrase: antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\nKey pair: {\"publicKey\":\"ed25519:BW5Q957u1rTATGpanKUktjVmixEmT56Df4Dt9hoGWEXz\",\"secretKey\":\"ed25519:5StmPDg9xVNzpyudwxT8Y72iyRq7Fa86hcpsRk6Cq5eWGWqwsPbPT9woXbJs9Qe69crZJHh4DMkrGEPGDDfmXmy2\"}\nImplicit account: 9c07afc7673ea0f9a20c8a279e8bbe1dd1e283254263bb3b07403e4b6fd7a411\n\nStoring credentials for account: example.testnet (network: testnet)\nSaving key to '~/.near-credentials/testnet/example.testnet.json'\n```\n\n</p>\n</details>\n\n---\n\n#### 3a) `near generate-key --fromSeedPhrase=\"your seed phrase\"`\n\n> Uses a seed phrase to display a public key and [implicit account](http://docs.near.org/docs/roles/integrator/implicit-accounts)\n\n```bash\nnear generate-key --seedPhrase=\"antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\"\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n\n```\nSeed phrase: antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\nKey pair: {\"publicKey\":\"ed25519:BW5Q957u1rTATGpanKUktjVmixEmT56Df4Dt9hoGWEXz\",\"secretKey\":\"ed25519:5StmPDg9xVNzpyudwxT8Y72iyRq7Fa86hcpsRk6Cq5eWGWqwsPbPT9woXbJs9Qe69crZJHh4DMkrGEPGDDfmXmy2\"}\nImplicit account: 9c07afc7673ea0f9a20c8a279e8bbe1dd1e283254263bb3b07403e4b6fd7a411\n```\n\n</details>\n\n---\n\n#### 3b) `near generate-key accountId --seedPhrase=\"your seed phrase\"`\n\nWill store the key pair corresponding to the seedPhrase in `.near-credentials` with an `accountId` that you specify.\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```\nSeed phrase: antique attitude say evolve ring arrive hollow auto wide bronze usual unfold\nKey pair: {\"publicKey\":\"ed25519:BW5Q957u1rTATGpanKUktjVmixEmT56Df4Dt9hoGWEXz\",\"secretKey\":\"ed25519:5StmPDg9xVNzpyudwxT8Y72iyRq7Fa86hcpsRk6Cq5eWGWqwsPbPT9woXbJs9Qe69crZJHh4DMkrGEPGDDfmXmy2\"}\nImplicit account: 9c07afc7673ea0f9a20c8a279e8bbe1dd1e283254263bb3b07403e4b6fd7a411\n```\n\n</p>\n</details>\n\n---\n\n#### 4a) `near generate-key --queryLedgerPK`\n\n> Uses a connected Ledger device to display a public key and [implicit account](http://docs.near.org/docs/roles/integrator/implicit-accounts) using the default HD path (`\"44'/397'/0'/0'/1'\"`)\n\n```bash\nnear generate-key --queryLedgerPK\n```\n\nYou should then see the following prompt to confirm this request on your Ledger device:\n\n  Make sure to connect your Ledger and open NEAR app\n  Getting Public Key from Ledger...\n\nAfter confirming the request on your Ledger device, a public key and implicit accountId will be displayed.\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```bash\nUsing public key: ed25519:B22RP10g695wyeRvKIWv61NjmQZEkWTMzAYgdfx6oSeB2\nImplicit account: 42c320xc20739fd9a6bqf2f89z61rd14efe5d3de234199bc771235a4bb8b0e1\n```\n\n</p>\n</details>\n\n---\n\n#### 3b) `near generate-key --queryLedgerPK --ledgerPath=\"HD path you specify\"`\n\n> Uses a connected Ledger device to display a public key and [implicit account](http://docs.near.org/docs/roles/integrator/implicit-accounts) using a custom HD path.\n\n```bash\nnear generate-key --queryLedgerPK --ledgerPath=\"44'/397'/0'/0'/2'\"\n```\n\nYou should then see the following prompt to confirm this request on your Ledger device:\n\n    Make sure to connect your Ledger and open NEAR app\n    Waiting for confirmation on Ledger...\n\nAfter confirming the request on your Ledger device, a public key and implicit accountId will be displayed.\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```bash\nUsing public key: ed25519:B22RP10g695wye3dfa32rDjmQZEkWTMzAYgCX6oSeB2\nImplicit account: 42c320xc20739ASD9a6bqf2Dsaf289z61rd14efe5d3de23213789009afDsd5bb8b0e1\n```\n\n</p>\n</details>\n\n\n---\n\n### `near list-keys`\n\n> Displays all access keys for a given account.\n\n-   arguments: `accountId`\n\n**Example:**\n\n```bash\nnear list-keys client.chainlink.testnet\n```\n\n<details>\n<summary> <strong>Example Response</strong> </summary>\n<p>\n\n```\nKeys for account client.chainlink.testnet\n[\n  {\n    public_key: 'ed25519:4wrVrZbHrurMYgkcyusfvSJGLburmaw7m3gmCApxgvY4',\n    access_key: { nonce: 97, permission: 'FullAccess' }\n  },\n  {\n    public_key: 'ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW',\n    access_key: {\n      nonce: 88,\n      permission: {\n        FunctionCall: {\n          allowance: '18483247987345065500000000',\n          receiver_id: 'client.chainlink.testnet',\n          method_names: [ 'get_token_price', [length]: 1 ]\n        }\n      }\n    }\n  },\n  [length]: 2\n]\n```\n\n</p>\n</details>\n\n---\n\n### `near login`\n\n> locally stores a full access key of an account you created with [MyNEARWallet](https://testnet.mynearwallet.com/).\n\n-   arguments: `none`\n-   options: `--networkId`\n\n**Example:**\n\n```bash\nnear login\n```\n\n**Custom wallet url:**\n\nDefault wallet url is `https://testnet.mynearwallet.com/`. But if you want to change to a different wallet url, you can setup the environmental variable `NEAR_MAINNET_WALLET` or `NEAR_TESTNET_WALLET`.\n\n```bash\nexport NEAR_TESTNET_WALLET=https://wallet.testnet.near.org/\nnear login\n```\n\n---\n\n## Accounts\n\n### `near create-account`\n\n> Creates an account using an existing account or a faucet service to pay for the account's creation and initial balance.\n\n-   arguments: `accountId`\n-   options: `--initialBalance`, `--useFaucet`, `--useAccount`, `--seedPhrase`, `--publicKey`, `--signWithLedger`, `--ledgerPath`, `--useLedgerPK`, `--PkLedgerPath`\n\n**Examples:**:\n\n```bash\n# Creating account using `example-acct.testnet` to fund it\nnear create-account new-acc.testnet --useAccount example-acct.testnet\n```\n\n```bash\n# Creating account using the faucet to fund it\nnear create-account new-acc.testnet --useFaucet\n```\n\n```bash\n# Creating a pre-funded account that can be controlled by the Ledger's public key\nnear create-account new-acc.testnet --useFaucet --useLedgerPK \n```\n\n```bash\n# Creating an account using a Ledger account\nnear create-account new-acc.testnet --useAccount ledger-acct.testnet --signWithLedger\n```\n\n**Subaccount example:**\n\n```bash\n# Using an account to create a sub-account\nnear create-account sub-acct.example-acct.testnet --useAccount example-acct.testnet\n```\n\n```bash\n# Creating a sub-account using the Ledger that can also be controlled by the ledger\nnear create-account sub.acc.testnet --useAccount sub.acc.testnet --signWithLedger --useLedgerPK\n```\n\n**Example using `--initialBalance`:**\n\n```bash\nnear create-account sub-acct2.example-acct.testnet --useAccount example-acct.testnet --initialBalance 10\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Saving key to '/HOME_DIR/.near-credentials/default/sub-acct2.example-acct.testnet.json'\n    Account sub-acct2.example-acct.testnet for network \"default\" was created.\n\n</p>\n</details>\n\n---\n\n### `near delete-account`\n\n> Deletes an account and transfers remaining balance to a beneficiary account.\n\n-   arguments: `accountId` `beneficiaryId`\n-   options: `force`, `--signWithLedger`, `--ledgerPath`\n\n**Example:**\n\n```bash\nnear delete-account sub-acct2.example-acct.testnet example-acct.testnet\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Deleting account. Account id: sub-acct2.example-acct.testnet, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, beneficiary: example-acct.testnet\n    Transaction Id 4x8xohER1E3yxeYdXPfG8GvXin1ShiaroqE5GdCd5YxX\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/4x8xohER1E3yxeYdXPfG8GvXin1ShiaroqE5GdCd5YxX\n    Account sub-acct2.example-acct.testnet for network \"default\" was deleted.\n\n</p>\n</details>\n\n---\n\n\n### `near send-near`\n\n> Sends NEAR tokens (\u24c3) from one account to another.\n\n- arguments: `senderId` `receiverId` `amount`\n- options: `--signWithLedger`, `--ledgerPath`\n\n**Note:** You will need a full access key for the sending account. ([`near login`](http://docs.near.org/docs/tools/near-cli#near-login))\n\n**Example:**\n\n```bash\nnear send-near sender.testnet receiver.testnet 10\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Sending 10 NEAR to receiver.testnet from sender.testnet\n    Transaction Id BYTr6WNyaEy2ykAiQB9P5VvTyrJcFk6Yw95HPhXC6KfN\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/BYTr6WNyaEy2ykAiQB9P5VvTyrJcFk6Yw95HPhXC6KfN\n\n</p>\n</details>\n\n---\n\n### `near state`\n\n> Shows details of an account's state.\n\n-   arguments: `accountId`\n\n**Example:**\n\n```bash\nnear state example.testnet\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```json\n{\n    \"amount\": \"99999999303364037168535000\",\n    \"locked\": \"0\",\n    \"code_hash\": \"G1PCjeQbvbUsJ8piXNb7Yg6dn3mfivDQN7QkvsVuMt4e\",\n    \"storage_usage\": 53528,\n    \"storage_paid_at\": 0,\n    \"block_height\": 21577354,\n    \"block_hash\": \"AWu1mrT3eMJLjqyhNHvMKrrbahN6DqcNxXanB5UH1RjB\",\n    \"formattedAmount\": \"99.999999303364037168535\"\n}\n```\n\n</p>\n</details>\n\n---\n\n## Contracts\n\n### `near call`\n\n> makes a contract call which can modify _or_ view state.\n\n**Note:** Contract calls require a transaction fee (gas) so you will need an access key for the `--accountId` that will be charged. ([`near login`](http://docs.near.org/docs/tools/near-cli#near-login))\n\n-   arguments: `contractName` `method_name` `{ args }` `--accountId`\n-   options: `--gas` `--deposit` `--signWithLedger` `--ledgerPath`\n\n**Example:**\n\n```bash\nnear call guest-book.testnet addMessage '{\"text\": \"Aloha\"}' --account-id example-acct.testnet\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Scheduling a call: guest-book.testnet.addMessage({\"text\": \"Aloha\"})\n    Transaction Id FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK\n    ''\n\n</p>\n</details>\n\n---\n\n### `near deploy`\n\n> Deploys a smart contract to a given accountId.\n\n-   arguments: `accountId` `.wasmFile`\n-   options: `initFunction` `initArgs` `initGas` `initDeposit`\n\n**Note:** You will need a full access key for the account you are deploying the contract to. ([`near login`](http://docs.near.org/docs/tools/near-cli#near-login))\n\n**Example:**\n\n```bash\nnear deploy example-contract.testnet out/example.wasm\n```\n\n**Initialize Example:**\n\n```bash\nnear deploy example-contract.testnet out/example.wasm --initFunction new --initArgs '{\"owner_id\": \"example-contract.testnet\", \"total_supply\": \"10000000\"}'\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    Starting deployment. Account id: example-contract.testnet, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: main.wasm\n    Transaction Id G8GhhPuujMHTRnwursPXE1Lv5iUZ8WUecwiST1PcKWMt\n    To see the transaction in the transaction explorer, please open this url in your browser\n    https://testnet.nearblocks.io/txns/G8GhhPuujMHTRnwursPXE1Lv5iUZ8WUecwiST1PcKWMt\n    Done deploying to example-contract.testnet\n\n</p>\n</details>\n\n---\n\n### `near storage`\n\n> Shows the storage state of a given contract, i.e. the data stored in a contract.\n\n- arguments: `contractName`\n- options: `--finality`, `--utf8`, `--blockId`, `--prefix`\n\n**Example:**\n\n```bash\nnear storage hello.near-examples.testnet --finality optimistic --utf8\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n\n```bash\n[ { key: 'STATE', value: '\\x10\\x00\\x00\\x00Passei por aqui!' } ]\n```\n\n</details>\n\n\n---\n\n### `near view`\n\n> Makes a contract call which can **only** view state. _(Call is free of charge)_\n\n-   arguments: `contractName` `method_name` `{ args }`\n-   options: `default`\n\n**Example:**\n\n```bash\nnear view guest-book.testnet getMessages '{}'\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n    View call: guest-book.testnet.getMessages({})\n    [\n      { premium: false, sender: 'waverlymaven.testnet', text: 'TGIF' },\n      {\n        premium: true,\n        sender: 'waverlymaven.testnet',\n        text: 'Hello from New York \ud83c\udf08'\n      },\n      { premium: false, sender: 'fhr.testnet', text: 'Hi' },\n      { premium: true, sender: 'eugenethedream', text: 'test' },\n      { premium: false, sender: 'dongri.testnet', text: 'test' },\n      { premium: false, sender: 'dongri.testnet', text: 'hello' },\n      { premium: true, sender: 'dongri.testnet', text: 'hey' },\n      { premium: false, sender: 'hirokihori.testnet', text: 'hello' },\n      { premium: true, sender: 'eugenethedream', text: 'hello' },\n      { premium: false, sender: 'example-acct.testnet', text: 'Aloha' },\n      [length]: 10\n    ]\n\n</p>\n</details>\n\n---\n\n## Transactions\n\n### `near tx-status`\n\n> Queries transaction status by hash and accountId.\n\n-   arguments: `txHash` `--accountId`\n-   options: `default`\n\n**Example:**\n\n```bash\nnear tx-status FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK --accountId guest-book.testnet\n```\n\n<details>\n<summary><strong>Example Response</strong></summary>\n<p>\n\n```json\nTransaction guest-book.testnet:FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK\n{\n  status: { SuccessValue: '' },\n  transaction: {\n    signer_id: 'example-acct.testnet',\n    public_key: 'ed25519:AXZZKnp6ZcWXyRNdy8FztYrniKf1qt6YZw6mCCReXrDB',\n    nonce: 20,\n    receiver_id: 'guest-book.testnet',\n    actions: [\n      {\n        FunctionCall: {\n          method_name: 'addMessage',\n          args: 'eyJ0ZXh0IjoiQWxvaGEifQ==',\n          gas: 300000000000000,\n          deposit: '0'\n        }\n      },\n      [length]: 1\n    ],\n    signature: 'ed25519:5S6nZXPU72nzgAsTQLmAFfdVSykdKHWhtPMb5U7duacfPdUjrj8ipJxuRiWkZ4yDodvDNt92wcHLJxGLsyNEsZNB',\n    hash: 'FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK'\n  },\n  transaction_outcome: {\n    proof: [ [length]: 0 ],\n    block_hash: '6nsjvzt6C52SSuJ8UvfaXTsdrUwcx8JtHfnUj8XjdKy1',\n    id: 'FY8hBam2iyQfdHkdR1dp6w5XEPJzJSosX1wUeVPyUvVK',\n    outcome: {\n      logs: [ [length]: 0 ],\n      receipt_ids: [ '7n6wjMgpoBTp22ScLHxeMLzcCvN8Vf5FUuC9PMmCX6yU', [length]: 1 ],\n      gas_burnt: 2427979134284,\n      tokens_burnt: '242797913428400000000',\n      executor_id: 'example-acct.testnet',\n      status: {\n        SuccessReceiptId: '7n6wjMgpoBTp22ScLHxeMLzcCvN8Vf5FUuC9PMmCX6yU'\n      }\n    }\n  },\n  receipts_outcome: [\n    {\n      proof: [ [length]: 0 ],\n      block_hash: 'At6QMrBuFQYgEPAh6fuRBmrTAe9hXTY1NzAB5VxTH1J2',\n      id: '7n6wjMgpoBTp22ScLHxeMLzcCvN8Vf5FUuC9PMmCX6yU',\n      outcome: {\n        logs: [ [length]: 0 ],\n        receipt_ids: [ 'FUttfoM2odAhKNQrJ8F4tiBpQJPYu66NzFbxRKii294e', [length]: 1 ],\n        gas_burnt: 3559403233496,\n        tokens_burnt: '355940323349600000000',\n        executor_id: 'guest-book.testnet',\n        status: { SuccessValue: '' }\n      }\n    },\n    {\n      proof: [ [length]: 0 ],\n      block_hash: 'J7KjpMPzAqE7iX82FAQT3qERDs6UR1EAqBLPJXBzoLCk',\n      id: 'FUttfoM2odAhKNQrJ8F4tiBpQJPYu66NzFbxRKii294e',\n      outcome: {\n        logs: [ [length]: 0 ],\n        receipt_ids: [ [length]: 0 ],\n        gas_burnt: 0,\n        tokens_burnt: '0',\n        executor_id: 'example-acct.testnet',\n        status: { SuccessValue: '' }\n      }\n    },\n    [length]: 2\n  ]\n}\n```\n\n</p>\n</details>\n\n---\n\n## Global Options\n\n| Option                      | Description                                                                                     |\n|-----------------------------|-------------------------------------------------------------------------------------------------|\n| `--help`                    | Show help  [boolean]                                                                            |\n| `--version`                 | Show version number  [boolean]                                                                  |\n| `-v, --verbose`             | Prints out verbose output  [boolean] [default: false]                                           |\n\n> Got a question? <a href=\"https://stackoverflow.com/questions/tagged/nearprotocol\"> <h8>Ask it on StackOverflow!</h8></a>\n\n## License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2024-02-20T13:32:43Z", "2024-02-12T17:12:54Z", "2024-02-09T14:38:00Z", "2024-02-08T16:22:39Z", "2024-01-25T15:51:01Z", "2022-08-15T10:58:59Z", "2022-08-05T07:36:47Z", "2022-06-28T06:23:40Z", "2022-05-27T11:02:43Z", "2022-05-19T10:20:30Z", "2022-02-11T07:05:39Z", "2021-12-16T19:21:09Z", "2021-12-09T16:27:12Z", "2021-11-30T17:06:24Z", "2021-11-03T13:17:36Z", "2021-07-27T18:22:25Z", "2021-07-14T15:25:56Z", "2021-06-08T09:37:07Z", "2021-05-22T08:11:20Z", "2021-05-14T09:37:06Z", "2021-04-01T07:57:17Z", "2021-03-03T03:05:25Z", "2021-02-05T10:16:15Z", "2020-12-16T05:13:57Z", "2020-12-16T02:58:54Z", "2020-12-11T19:46:59Z", "2020-11-17T00:59:09Z", "2020-11-07T04:47:29Z", "2020-11-05T03:30:30Z", "2020-09-27T00:14:47Z"]}, {"name": "near-cli-rs", "description": "near CLI is your human-friendly companion that helps to interact with NEAR Protocol from command line.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR CLI\n\nnear CLI is your **human-friendly** companion that helps to interact with [NEAR Protocol](https://near.org) from command line.\n\nJust run `near` and let it guide you through!\n\n<p>\n  <img src=\"docs/media/create-account.svg\" alt=\"\" width=\"1200\">\n</p>\n\n## Install\n\nVisit [Releases page](https://github.com/near/near-cli-rs/releases/) to see the latest updates.\n\n<details>\n  <summary>Install prebuilt binaries via shell script (macOS, Linux, WSL)</summary>\n\n```sh\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.sh | sh\n```\n</details>\n\n<details>\n  <summary>Install prebuilt binaries via powershell script (Windows)</summary>\n\n```sh\nirm https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.ps1 | iex\n```\n</details>\n\n<details>\n  <summary>Run prebuilt binaries with npx (Node.js)</summary>\n\n```sh\nnpx near-cli-rs\n```\n</details>\n\n<details>\n  <summary>Install prebuilt binaries into your npm project (Node.js)</summary>\n\n```sh\nnpm install near-cli-rs\n```\n</details>\n\n<details>\n  <summary>Compile and install from the source code (Cargo)</summary>\n\nInstall it with `cargo`, just make sure you have [Rust](https://rustup.rs) installed on your computer.\n\n```bash\ncargo install near-cli-rs\n```\n\nor, install the most recent version from git repository:\n\n```bash\n$ cargo install --git https://github.com/near/near-cli-rs\n```\n</details>\n\n<details>\n  <summary>Install on CI (GitHub Actions)</summary>\n\nIt is often desirable to use `near` CLI from CI to automate some actions, so here is an example of how you can make a function call during CI:\n\n```yml\nname: Release\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy-widgets:\n    runs-on: ubuntu-latest\n    name: Make a function call on mainnet\n    env:\n      NEAR_NETWORK_CONNECTION: mainnet\n      NEAR_CONTRACT_ACCOUNT_ID: ${{ vars.NEAR_CONTRACT_ACCOUNT_ID }}\n      NEAR_SIGNER_ACCOUNT_ID: ${{ vars.NEAR_SIGNER_ACCOUNT_ID }}\n      NEAR_SIGNER_ACCOUNT_PUBLIC_KEY: ${{ vars.NEAR_SIGNER_ACCOUNT_PUBLIC_KEY }}\n      NEAR_SIGNER_ACCOUNT_PRIVATE_KEY: ${{ secrets.NEAR_SIGNER_ACCOUNT_PRIVATE_KEY }}\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Install near CLI\n      run: |\n        curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/download/v0.7.4/near-cli-rs-installer.sh | sh\n\n    - name: Call some function\n      run: |\n        near contract call-function as-transaction \"$NEAR_CONTRACT_ACCOUNT_ID\" 'function_name_here' json-args '{}' prepaid-gas '100 TeraGas' attached-deposit '0 NEAR' sign-as \"$NEAR_SIGNER_ACCOUNT_ID\" network-config \"$NEAR_NETWORK_CONNECTION\" sign-with-plaintext-private-key --signer-public-key \"$NEAR_SIGNER_ACCOUNT_PUBLIC_KEY\" --signer-private-key \"$NEAR_SIGNER_ACCOUNT_PRIVATE_KEY\" send\n```\n\nYou will need to configure GitHub Actions Secrets and Variables and once it is ready, this CI will only take a couple of _seconds_ to complete!\n\nSee how it is used by [DevHub]([https://github.com/near/devgigsboard](https://github.com/NEAR-DevHub/neardevhub-contract/blob/05fb66ac307d84347f29e8e3ab9f429a78cb6513/.github/workflows/release.yml#L30-L41)).\n</details>\n\n## Run\n\nOnce installed, you just run it with `near` command:\n\n```bash\n$ near\n\n? What are you up to? (select one of the options with the up-down arrows on your keyboard and press Enter)\n> account     - Manage accounts\n  tokens      - Manage token assets such as NEAR, FT, NFT\n  staking     - Manage staking: view, add and withdraw stake\n  contract    - Manage smart-contracts: deploy code, call functions\n  transaction - Operate transactions\n  config      - Manage connections in a configuration file (config.toml)\n  extension   - Manage near CLI and extensions\n[\u2191\u2193 to move, enter to select, type to filter]\n```\n\nThe CLI interactively guides you through some pretty complex topics, helping you make informed decisions along the way.\n\n## [Read more in English](docs/README.en.md)  \n  - [Usage](docs/README.en.md#usage)\n  - [Installation](docs/README.en.md#installation)\n  - [User Guide](docs/README.en.md#user-guide)\n  - [Config](docs/README.en.md#config)\n  - [Building](docs/README.en.md#building)\n\n## [\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 (in Russian)](docs/README.ru.md)\n  - [\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435](docs/README.ru.md#\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435)\n  - [\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430](docs/README.ru.md#\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430)\n  - [\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f](docs/README.ru.md#\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f)\n  - [\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b](docs/README.ru.md#\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439-\u0444\u0430\u0439\u043b)\n  - [\u0421\u0431\u043e\u0440\u043a\u0430](docs/README.ru.md#\u0441\u0431\u043e\u0440\u043a\u0430)\n", "release_dates": ["2024-02-26T23:12:54Z", "2024-02-19T15:18:43Z", "2024-02-03T14:37:08Z", "2024-01-23T00:19:44Z", "2023-12-21T12:55:12Z", "2023-12-19T16:09:04Z", "2023-12-06T11:22:28Z", "2023-12-02T14:30:28Z", "2023-11-21T15:07:43Z", "2023-11-17T23:25:14Z", "2023-10-31T11:05:09Z", "2023-10-17T19:42:59Z", "2023-10-09T15:48:00Z", "2023-10-06T08:37:07Z", "2023-08-17T22:24:56Z", "2023-06-07T23:22:46Z", "2023-06-05T13:35:17Z", "2023-06-02T19:44:01Z", "2023-05-26T20:38:24Z", "2023-05-22T18:10:13Z", "2023-05-02T18:42:36Z", "2023-04-21T18:38:06Z", "2023-04-21T17:37:30Z", "2023-04-20T10:09:08Z", "2023-04-11T22:19:36Z", "2023-04-06T13:41:45Z", "2023-04-02T21:58:14Z", "2023-03-13T21:03:31Z", "2023-02-19T07:57:17Z", "2022-12-20T15:46:46Z"]}, {"name": "near-contract-helper", "description": "Micro-service used by NEAR Wallet to store & send recovery methods", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# near-contract-helper\n\nMicroservice used to create NEAR accounts\n\n## Local Development\n\n### Requirements\n\nInstall latest Node.js LTS release\n\n### Install dependencies\n\n    yarn\n\n### Environment Variables\n\nCreate a `.env` file, copy in the default values from `.env.sample`. Read this file for information about how to change configuration settings to suit your needs.\n\nBy default, it assumes that you're running a local node and local network. To do this, use [nearup](https://github.com/near/nearup) or [rainbow-bridge-cli](https://github.com/near/rainbow-bridge-cli)\n\nNow you can add an `ACCOUNT_CREATOR_KEY` to your `.env`. Running a local NEAR network created a `~/.near/localnet/node0/validator_key.json` file for you. Copy the contents of this file and paste them as a single line, with NO whitespace, for the `ACCOUNT_CREATOR_KEY` value in your `.env`. For example:\n\n    ACCOUNT_CREATOR_KEY={\"account_id\":\"node0\",\"public_key\":\"...\",\"secret_key\":\"...\"}\n\n### Run server with local DynamoDB\n\n    yarn start\n\nThis starts a local DynamoDB instance on port 7877 which is used when `NODE_ENV=development`\nto facilitate local testing. This instance is persisted to a `.db` file at the project root.\n\n### Create account (works only on test networks)\n\n    curl -H \"Content-Type: application/json\" -XPOST http://0.0.0.0:3000/account --data '{\"newAccountId\": \"nosuchuseryet\", \"newAccountPublicKey\": \"22skMptHjFWNyuEWY22ftn2AbLPSYpmYwGJRGwpNHbTV\"}\n\n### Lookup account by public key\n\n    curl -XGET http://0.0.0.0:3000/publicKey/ed25519:EKveJ28ocxfHXQEfH42AowPL7HgXHkKp3kmMoSXNjiRF/accounts\n    curl -XGET https://helper.mainnet.near.org/publicKey/ed25519:EKveJ28ocxfHXQEfH42AowPL7HgXHkKp3kmMoSXNjiRF/accounts\n\n#### Sample response\n    \n    [\n        \"heyheyhey.near\"\n    ]\n\n\n## Running tests\n\n### Ensure NEAR localnet is running\n\nAs mentioned in the \"Environment Variables\" section above, make sure you are running a local blockchain\n\n### Run `yarn test`\n\nThis will run the tests using [mocha].\nAssertions are written using [chai] with [chai-as-promised] for async assertions.\nSpies and fake timers provided with [sinon].\n\n[mocha]: https://mochajs.org/\n[chai]: https://www.chaijs.com/\n[chai-as-promised]: https://www.chaijs.com/plugins/chai-as-promised/\n[sinon]: https://sinonjs.org/\n", "release_dates": []}, {"name": "near-data", "description": "data center with leaderboard", "language": "HTML", "license": null, "readme": "This project is for near data central, coming soon.", "release_dates": []}, {"name": "near-devcontainers", "description": null, "language": "Dockerfile", "license": null, "readme": "# Devcontainer for Near Protocol\n\nThis repository hosts the official Devcontainer image for Near Protocol development, featuring preinstalled essential tools. You can access the image on the [GitHub Container Registry](https://ghcr.io/near/near-devcontainer).\n\n## Usage\n\nTo incorporate this Devcontainer into your own repositories, follow these steps:\n\n1. Fork the [NEAR Rust Stack template repo](https://github.com/near/cargo-near-new-project-template).\n2. Open the forked repository in Codespaces.\n\nFor integrating this Devcontainer into your repositories, create the following configuration in `.devcontainer/devcontainer.json`:\n\n```json\n{\n  \"name\": \"NEAR Devcontainer Rust\",\n  \"image\": \"ghcr.io/near/near-devcontainer:latest\",\n  // Uncomment and modify the following lines if necessary\n  // \"forwardPorts\": [8000],\n  \"customizations\": {\n    \"codespaces\": {\n      // Uncomment and modify the following lines if necessary\n      // \"openFiles\": [\"README.md\", \"src/lib.rs\", \"tests/test_basics.rs\"]\n    }\n  }\n}\n```\n\n## Features\n\nThe `near-cli` and `cargo-near` features are available separately and can be used in other Devcontainers. Include the following configurations in your `.devcontainer/devcontainer.json`:\n\nFor `cargo-near`:\n\n```json\n\"features\": {\n  \"ghcr.io/near/near-devcontainers/features/cargo-near:latest\": {}\n}\n```\n\nFor `near-cli`:\n\n```json\n\"features\": {\n  \"ghcr.io/near/near-devcontainers/features/near-cli:latest\": {}\n}\n```\n\n## Contributing\n\nFeel free to contribute to this Devcontainer repository. Any issues or improvements can be raised through the GitHub repository's issue tracker.\n", "release_dates": ["2024-02-03T08:49:46Z"]}, {"name": "near-discovery", "description": "NEAR is the BOS", "language": "TypeScript", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": "# NEAR Discovery (BOS)\n\n## Setup & Development\n\n_This repo requires [pnpm](https://pnpm.io/installation)._\n\nInitialize repo:\n\n```\npnpm i\n```\n\nStart development version:\n\n```\npnpm dev\n```\n\n## Local Component Development\n\nTo start local component development you need to follow this steps:\n\n1. Run commands as mentioned in [Setup & Development](#setup--development).\n\n2. Navigate to [near-discovery-components](https://github.com/near/near-discovery-components) and follow [Local development with BOS-Loader](https://github.com/near/near-discovery-components/blob/develop/CONTRIBUTING.md#local-development-with-bos-loader) section.\n\n3. *(optional)* Make a copy of `\".env.example\"` called `\".env.local\"`. **`NEXT_PUBLIC_NETWORK_ID`** allows you to choose working environment.\n\n*Note:* The **`NEXT_PUBLIC_NETWORK_ID`** value should be the same as chosen working environment in `near-discovery-components`. More about [environments](https://github.com/near/near-discovery-components/blob/develop/CONTRIBUTING.md#testing-across-multiple-environments).\n\n\n## Local VM Development\n\n> This section needs testing since switch to pnpm\n\nIf you need to make changes to the VM and test locally, you can easily link your local copy of the VM:\n\n1. Clone the VM repo as a sibling of `near-discovery`:\n\n```\ngit clone git@github.com:NearSocial/VM.git\n```\n\nFolder Structure:\n\n```\n/near-discovery\n/VM\n```\n\n2. Run `pnpm link ../VM`\n\n3. Any time you make changes to the `VM`, run `pnpm build` inside the `VM` project in order for the viewer project to pick up the changes\n", "release_dates": ["2024-02-29T09:24:53Z", "2024-02-27T14:35:49Z", "2024-02-26T20:43:06Z", "2024-02-20T21:00:36Z", "2024-02-15T14:57:35Z", "2024-02-08T14:42:52Z", "2024-01-18T16:02:32Z", "2023-12-13T15:55:17Z", "2023-11-07T17:46:34Z"]}, {"name": "near-discovery-api", "description": "An API server for NearSocial and SocialDB", "language": null, "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": null, "release_dates": []}, {"name": "near-discovery-components", "description": "This is a repository that holds the source code of all NEAR discovery components that the team maintains for near.org.", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Near Discovery Components\n\nThis is a repository that holds the source code of all NEAR discovery components that the team maintains for [near.org](https://near.org).\n\nComponents will be deployed to production automatically as they are merged into the main branch. This occurs weekly, on Thursdays.\n\nKeep in mind that folders under `src` will be prepended to the component name when it's deployed. E.g. `src/post/comment.jsx` will be deployed as `post.comment`.\n\n\n### Deployments Across Discovery Gateways\n#### tl;dr;\n>test.beta.near.org => discom-dev.testnet\n\n>test.near.org => discom.testnet\n\n>near.org => near TLA\n\n>beta.near.org => near TLA\n\nThe [discovery gateway](https://github.com/near/near-discovery) deploys its main and develop branches across environments as follows\n- the `main` branch is deployed on [near.org](https://near.org), pointing to `mainnet` and [test.near.org](https://test.near.org) pointing to `testnet`\n- the `develop` branch is deployed to [beta.near.org](https://beta.near.org), pointing to `mainnet`, and [test.beta.near.org](https://test.beta.near.org), pointing to `testnet`\n\nThis `discovery-components` repo deploys main and develop branches across accounts as follows\n- the `main` branch deploys components to the near top-level-acount for `mainnet` and `discom.testnet` for `testnet` except where indicated otherwise in replacements.[mainnet/testnet].json\n- the `develop` branch deploys components to `discom-dev.testnet` except where indicated otherwise in replacements.dev.json; there is currently no mainnet deployment for the develop branch.\n\n\n## Contributing\n\nPlease review the [contribution guide](CONTRIBUTING.md)\n\n## Local Development\n\nPlease review the [Local development with BOS-Loader](CONTRIBUTING.md#local-development-with-bos-loader)\n\n*Note:* This repository is not compatible with the [VS Code Extension](https://docs.near.org/bos/dev/vscode) due to the [replacements](CONTRIBUTING.md#testing-across-multiple-environments) strategy featured in this repository.\n\n## Troubleshooting Deployments\n\n`near-social` cli tool will attempt to deploy any updated components with 1 NEAR of deposit and 100 Tgas.\n\nThe deployment may fail if too many changes are present. There are several solutions for this. You can either plan releases more often or release components in batches from your local using `near-social`.\n\nIf you get a `Not enough storage balance` error, you will need to make sure that the NEAR account has enough storage staked on the `social.near` contract. You can view the current storage and available storage for any account using `near-cli-rs`:\n\n`near-cli contract call-function as-read-only social.near storage_balance_of json-args '{\"account_id\":\"adminalpha.near\"}' network-config mainnet now`\n\nNote: replace `adminalpha.near` with any other account name on mainnet.\n\nYou can then stake more of your NEAR for storage on `social.near` using `near-cli-rs`:\n\n`near-cli contract call-function as-transaction social.near storage_deposit json-args {} prepaid-gas '100.000 TeraGas' attached-deposit '0.5 NEAR' sign-as adminalpha.near network-config mainnet sign-with-seed-phrase '{{REPLACE_WITH_SEED_PHRASE}}' --seed-phrase-hd-path 'm/44'\\''/397'\\''/0'\\'''`\n", "release_dates": ["2024-02-29T09:25:34Z", "2024-02-27T14:36:35Z"]}, {"name": "near-discovery-indexer", "description": "An indexer for Near Alpha Discovery", "language": null, "license": null, "readme": "# Indexer tutorials\n\nThis repository contains the code for indexer tutorials from official documentation.\n\n## Contents\n\n* example-indexer https://docs.near.org/docs/tools/near-indexer\n", "release_dates": []}, {"name": "near-docusaurus-styles", "description": null, "language": "CSS", "license": null, "readme": null, "release_dates": []}, {"name": "near-drop-demo", "description": null, "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<br />\n<br />\n\n<p>\n<img src=\"https://nearprotocol.com/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311\" width=\"240\">\n</p>\n\n## Linkdrop example with contract account deployment\n\n## About the app\nThe app allows you to send funds to the Linkdrop contract which will create \"Drops\". You will have a list of these in local storage and you can remove them at any time. This claims the funds back to your current account.\n\n**NOTE:** If you follow the wallet link of a drop, be warned it will not create accounts because your contract is not eligible to create the `.testnet` domain accounts.\n\nInstead, click \"Share Drop Link\" and visit your own drop.\n\nYou will now see a *URL Drop* heading with some information about the drop. This is what another user would see if they used your URL.\n\nYou can either:\n1. claim the funds\n2. create an account\n3. create a contract account (deploys a locked multisig account)\n\n## Contract\nFor more details on the linkdrop contract:\nhttps://github.com/near/near-linkdrop\n\n## Quickstart\n```\nyarn && yarn dev\n```\n\n## Deploying your own contract\nIt's recommended you create a sub account to handle your contract deployments:\n```\nnear login\nnear create_account [account_id] --masterAccount [your_account_id] --initialBalance [1-5 N]\n```\nNow update config.js and set:\n```\nconst CONTRACT_NAME = [account_id]\n```\n\n## The Linkdrop contract and calling it from JS\n\nAll calls to the contract can be found in `src/Drops.js`.\n\nThe original linkdrop contract is here:\nhttps://github.com/nearprotocol/near-linkdrop\n\nAn additional function is added to the regular linkdrop contract:\n```\npub fn create_limited_contract_account\n```\nThis takes 3 additional arguments over the existing `pub fn create_account_and_claim` function.\nIn order to successfully invoke from JS you must pass in the following:\n```\nnew_account_id: string,\nnew_public_key: string,\nallowance: string,\ncontract_bytes: [...new Uint8Array(contract_bytes)],\nmethod_names: [...new Uint8Array(new TextEncoder().encode(`\n    methods,account,is_limited_too_call\n`))]\n```\n\n##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x \n\n1. [Node.js](https://nodejs.org/en/download/package-manager/)\n2. near-shell\n```\nnpm i -g near-shell\n```\n### To run on NEAR testnet\n\n```bash\nyarn && yarn dev\n```", "release_dates": []}, {"name": "near-enhanced-api-server", "description": null, "language": "Rust", "license": null, "readme": "# NEAR Enhanced API\n\nAPI for providing useful information about NEAR blockchain.  \nStill under heavy development.\n\n### Supported features\n\n- Provide NEAR balances information, history\n- Provide FT balances information, FT history (*)\n- Provide NFT information and recent history for the contracts implementing Events NEP\n- Provide corresponding Metadata for FT, NFT contracts, NFT items\n\n(*) We support all the FT contracts implementing Events NEP and some popular legacy contracts such as `aurora`, `wrap.near` and few others.\nIf your contract is not supported, please update with our new [SDK](https://github.com/near/near-sdk-rs).  \nIf it's important for you to collect all the previous history as well, you need to make the contribution and implement your own legacy handler.\nYou can use [existing handlers](https://github.com/near/near-microindexers/tree/main/indexer-events/src/db_adapters/coin/legacy) as the example.\n", "release_dates": []}, {"name": "near-evm", "description": "Obsolete EVM contract experiments. Find current development at: https://github.com/aurora-is-near/aurora-engine", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": ":warning: This repository contains obsolete EVM contract experiments.\n\nFind current development at: https://github.com/aurora-is-near/aurora-engine\n\n# NEAR EVM\n\nEVM interpreter as a NEAR smart contract. This uses the EVM interpreter from [SputnikVM].\n\nNetwork  | Account\n:------- | :-----------------------\nLocalNet | `evm.test.near`\nBetaNet  | `evm.$MYACCOUNT.betanet`\nTestNet  | `evm.$MYACCOUNT.testnet`\n\n### Prerequisites\n\nTo develop Rust contracts, change into the top-level directory in this\nrepository, and do the following:\n\n1. Make sure you have the newest version of the [NEAR CLI] installed by running:\n\n  ```shell\n  npm install -g near-cli\n  ```\n\n2. Install [Rustup](https://rustup.rs):\n\n  ```shell\n  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n  ```\n\n3. Add a WebAssembly target to your Rust toolchain:\n\n  ```shell\n  rustup target add wasm32-unknown-unknown\n  ```\n\n### Building\n\n```shell\n./build.sh\n```\n\nThis will build the contract code in `res/near_evm.wasm`.\n\n### Deployment\n\nDeploy the EVM contract:\n\n* If you are using BetaNet or TestNet, execute `near login`.\n\n* If you are using LocalNet, set the `NODE_ENV=local` environment variable\n  prior to executing any of the commands below.\n\n* Create the contract account:\n\n  ```shell\n  # LocalNet\n  near create-account evm.test.near --masterAccount=test.near\n\n  # BetaNet\n  near create-account evm.myaccount.betanet --masterAccount=myaccount.betanet\n\n  # TestNet\n  near create-account evm.myaccount.testnet --masterAccount=myaccount.testnet\n  ```\n\n* Deploy the built contract from `res/near_evm.wasm`:\n\n  ```shell\n  # LocalNet\n  near deploy --accountId=evm.test.near --wasmFile=res/near_evm.wasm\n\n  # BetaNet\n  near deploy --accountId=evm.myaccount.betanet --wasmFile=res/near_evm.wasm\n\n  # TestNet\n  near deploy --accountId=evm.myaccount.testnet --wasmFile=res/near_evm.wasm\n  ```\n\n### Testing\n\n1. Build the EVM contract:\n\n    1. Build the NEAR EVM contract binary:\n      ```shell\n      ./build.sh\n      ```\n    2. Ensure Truffle is installed:\n      ```shell\n      npm i -g truffle\n      ```\n    3. Build the test contracts:\n      ```shell\n      cd tests && ./build.sh\n      ```\n\n2. Run the all tests including integration tests:\n\n      ```shell\n      cargo test --lib\n      ```\n\n3. To run the RPC tests you must [run a local NEAR node](https://docs.near.org/docs/develop/node/running-a-node):\n\n      1. Check out [`nearcore`](https://github.com/near/nearcore) from GitHub.\n      2. Compile and run `nearcore`:\n      ```shell\n      cd nearcore && python scripts/start_unittest.py --local --release\n      ```\n    1. Run the tests from this directory in another terminal window:\n      ```shell\n      cargo test\n      ```\n\n### Troubleshooting\n\nYou may need to install `nightly` if you get an error similar to the following:\n\n```shell\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n```\n\n1. Install `nightly`:\n  ```shell\n  rustup toolchain install nightly\n  ```\n2. Run the [Testing](###Testing) commands again.\n\n[NEAR CLI]:  https://docs.near.org/docs/tools/near-cli\n[SputnikVM]: https://github.com/aurora-is-near/sputnikvm\n", "release_dates": ["2021-02-10T21:28:35Z"]}, {"name": "near-explorer", "description": "NEAR blockchain explorer", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Blockchain Explorer\n\n[![CI](https://github.com/near/near-explorer/actions/workflows/continuous-integration-workflow.yml/badge.svg?event=push)](https://github.com/near/near-explorer/actions/workflows/continuous-integration-workflow.yml)\n\n## Setup\n\n### Docker-based Setup\n\nPrerequisite:\n\n-   Docker\n-   Docker-Compose\n\nBuild & run the containers (choose a network):\n\n```\n$ npm run docker:up:mainnet\nor\n$ npm run docker:up:testnet\nor\n$ npm run docker:up:shardnet\nor\n$ npm run docker:up:guildnet\n```\n\nNOTE: You may want to run them in background, so just add `-- --detach` flag.\n\nNow you can reach the service at http://localhost:3000/\n\n### Node.js Setup (hot reload)\n\nPrerequisite:\n\n-   Node.js (run `nvm use` to switch to the proper version)\n\nInstall dependencies:\n\n```\n$ npm install\n```\n\nRun backend (choose a network):\n\n```\n$ npm run -w backend dev:mainnet\nor\n$ npm run -w backend dev:testnet\nor\n$ npm run -w backend dev:shardnet\nor\n$ npm run -w backend dev:guildnet\n```\n\nRun frontend in a separate window:\n\n```\n$ npm run -w frontend dev\n```\n\nNow you can reach the service at http://localhost:3000/\n\n## Contributing\n\nTo contribute to NEAR Explorer, please see [CONTRIBUTING](CONTRIBUTING.md).\n\nMost real-time collaboration happens in a variety of channels on the\n[NEAR Discord server](https://near.chat), with channels dedicated for getting help, community,\ndocumentation, and all major contribution areas in the NEAR ecosystem. A good place to ask\nfor help would be the #general channel.\n\n## License\n\nNEAR Explorer is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\n\nSee [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": []}, {"name": "near-fastauth-wallet", "description": null, "language": "TypeScript", "license": null, "readme": "# near-fastauth-wallet\n\nThis library was generated with [Nx](https://nx.dev).\n\n## Building\n\nRun `nx build --buildLibsFromSource` to build the library.\n\n## Deploying\n\nNeed to make sure npm is installed and user is authenticated\nRun `cd dist/near-fastauth-wallet && npm publish` to publish npm package\n\n## Running unit tests\n\nRun `nx test near-fastauth-wallet` to execute the unit tests via [Jest](https://jestjs.io).\n", "release_dates": []}, {"name": "near-gas-rs", "description": "a small crate to work with NEAR Gas unit values ergonomically and efficiently (NEAR Protocol)", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# near-gas\n\n<p>\n    <a href=\"https://crates.io/crates/near-gas\"><img src=\"https://img.shields.io/crates/d/near-gas?style=flat-square&logo=near&label=crates.io\" alt=\"Crates.io (downloads)\"></a>\n    <a href=\"https://docs.rs/near-gas/latest/near_gas/\"><img src=\"https://img.shields.io/docsrs/near-gas?style=flat-square\" alt=\"Docs.rs\"></a>\n    <img src=\"https://img.shields.io/badge/rustc-1.68%2B-lightgray.svg?style=flat-square\" alt=\"Rust Version\">\n</p>\n\nnear-gas is crate to ergonomically operate with NEAR Protocol gas unit in Rust projects.\n\nThe crate includes NearGas type and constructors for converting data as NearGas and as u64 type values.\n\n## near-gas examples \n\n```rust\nuse near_gas::NearGas;\n\nfn main() {\n    let data = \"12.657 tgas\";\n\n    let near_gas: NearGas = data.parse().unwrap();\n\n    // Convert the value to the most precise \"gas\" unit\n    assert_eq!(near_gas.as_gas(), 12657000000000);\n    // Convert the value to \"gigagas\" unit\n    assert_eq!(near_gas.as_ggas(), 12657);\n    \n    // Display Gas. It will print: \"Here is 12.7 Tgas\"\n    println!(\"Here is {}\", near_gas);\n\n    // When `serde` feature is enabled, NearGas can be used in serde-serializable structs.\n    // NearGas will be serialized to a gas-precision u64 value encoded as string.\n    #[derive(serde::Serialize)]\n    struct FunctionCallDetails {\n        used_gas: NearGas,\n    }\n\n    let details = FunctionCallDetails { used_gas: near_gas };\n\n    assert_eq!(serde_json::to_string(&details).unwrap(), r#\"{\"used_gas\":\"12657000000000\"}\"#);\n}\n```\n\n## NearGas information\n\nOn every transaction you send to the network NEAR charges you a fee (aka gas fee). This fee is used to indirectly pay the people that keep the network infrastructure, and to incentivize developers of smart contracts. [For more information].\n\n[Gas usage in Near Protocol]\n\n## Crate Features\n\n* `serde` - [serde](https://serde.rs/) support\n* `borsh` - [borsh](https://github.com/near/borsh-rs) support\n* `abi` - [near-abi](https://github.com/near/abi) support\n* `schemars` - [schemars](https://github.com/GREsau/schemars) support\n* `interactive-clap` - [interactive-clap](https://github.com/near-cli-rs/interactive-clap) support\n\n### License\n\nThis project is licensed under the [MIT license] and [Apache-2.0 license].\n\n[MIT license]: https://github.com/Mr0melian/near_gas/blob/master/LICENSE-MIT\n[Apache-2.0 license]:  https://github.com/Mr0melian/near_gas/blob/master/LICENSE-APACHE\n[For more information]: https://docs.near.org/concepts/basics/transactions/gas\n[Gas usage in Near Protocol]: https://nomicon.io/RuntimeSpec/Fees/\n", "release_dates": ["2023-11-01T00:11:08Z", "2023-10-22T20:19:19Z"]}, {"name": "near-hat", "description": "NEARHat is a NEAR Protocol local development toolkit.", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEARHat\n\nNEARHat is a NEAR Protocol local development environment.\nIt allows you to run local development of dApps and create\nautomated end-to-end tests from smart contracts to indexers.\n\n![NEARHat-Logo](https://github.com/near/near-hat/assets/116191277/68326fa2-f9d9-45b4-a332-078b4733d376)\n\nBuilt by the Pagoda Engineers for the NEAR Ecosystem as part of the December 2023 hackathon.\n\nCurrently supports local versions of:\n* nearcore sandbox\n* NEAR Lake Indexer (+ LocalStack NEAR Lake S3 bucket)\n* NEAR Relayer\n* Local NEAR Explorer\n* Query API\n\nPotential future support:\n* Local MyNearWallet\n* BOS dependency chain and near.org gateway\n* FastAuth\n\n\n## One line installation:\n```\n$ ./install.sh\n```\nThis will install dependencies via Homebrew and setup local `.nearhat` domain.\n\nYou need to be logged into Github Container Registry (until all docker containers are published to DockerHub): https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry\n\n![image](https://github.com/near/near-hat/assets/116191277/e20331ce-670f-43c2-b4aa-b152d490e328)\n\n## Starting and stopping local environment\n```\n$ ./start.sh\n```\n\n## Forking mainnet smart contracts\nNEARHat allows to fork mainnet contracts and refer to them through `http://rpc.nearhat`.\nTo fork the USDC contract (with account id `17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2`) start NEARHat with the following command:\n```bash\nRUST_BACKTRACE=1 RUST_LOG=info cargo run -p near-hat-cli -- start --contracts-to-spoon 17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2\n```\n", "release_dates": []}, {"name": "near-icecream", "description": null, "language": "JavaScript", "license": null, "readme": "<br />\n<br />\n\n<p>\n<img src=\"https://nearprotocol.com/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311\" width=\"240\">\n</p>\n\n<br />\n<br />\n\n## Buying IceCream with near token\n### Requirements\n##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x \n\n1. [Node.js](https://nodejs.org/en/download/package-manager/)\n2. (optional) near-shell\n\n```\nnpm i -g near-shell\n```\n3. (optional) yarn\n```\nnpm i -g yarn\n```\n### To run on NEAR testnet\n\n```bash\nnpm install && npm dev\n```\n\nwith yarn:\n\n```bash\nyarn && yarn dev\n```\n\nThe server that starts is for static assets and by default serves them to http://localhost:1234. Navigate there in your browser to see the app running!\n\nNOTE: Both contract and client-side code will auto-reload once you change source files.\n\n### To run tests\n\n```bash\nnpm test\n```\n\nwith yarn:\n\n```bash\nyarn test\n```\n\n### Deploy\n\n#### Step 1: Create account for the contract\n\nYou'll now want to authorize NEAR shell on your NEAR account, which will allow NEAR Shell to deploy contracts on your NEAR account's behalf \\(and spend your NEAR account balance to do so\\).\n\nType the command `near login` which opens a webpage at NEAR Wallet. Follow the instructions there and it will create a key for you, stored in the `/neardev` directory.\n\n#### Step 2:\n\nModify `src/config.js` line that sets the account name of the contract. Set it to the account id from step 1.\n\nNOTE: When you use [create-near-app](https://github.com/nearprotocol/create-near-app) to create the project it'll infer and pre-populate name of contract based on project folder name.\n\n```javascript\nconst CONTRACT_NAME = process.env.CONTRACT_NAME || \"near-icecream.testnet\";/* TODO: Change this to your contract's name! */\n...\n```\n\n#### Step 3:\n\nCheck the scripts in the package.json, for frontend and backend both, run the command:\n\n```bash\nnpm run deploy\n```\n\nwith yarn:\n\n```bash\nyarn deploy\n```\n\nNOTE: This uses [render.com](https://icecream.onrender.com) to publish resulting website. \n\n### To Explore\n\n- `assembly/main.ts` for the contract code\n- `src/index.html` for the front-end HTML\n- `src/index.js` for the JavaScript front-end code and how to integrate contracts\n- `src/App.js` for the main React component\n", "release_dates": []}, {"name": "near-indexer-accounts", "description": null, "language": "Rust", "license": null, "readme": "# Indexer Accounts\n\nAsync Postgres-compatible solution to load the data from NEAR blockchain.\nBased on [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs).\n\nSee [Indexer Base](https://github.com/near/near-indexer-base#indexer-base) docs for all the explanations, installation guide, etc.\n\n### What else do I need to know?\n\nIndexer Accounts is the only indexer that modifies the existing data.  \nWhile other indexers are append-only, Indexer Accounts updates the existing records with the deletion info.\n\n`accounts` table in [Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) stored only the first creation and last deletion of the account.  \nThis solution stores all the creations/deletions, so accounts may appear in the table more than once.\n", "release_dates": []}, {"name": "near-indexer-balances", "description": null, "language": "Rust", "license": null, "readme": "# Indexer Balances\n\nAsync Postgres-compatible solution to load the data from NEAR blockchain.\nBased on [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs).\n\nSee [Indexer Base](https://github.com/near/near-indexer-base#indexer-base) docs for all the explanations, installation guide, etc.\n\n### Why `account_changes` is not enough?\n\n1. `account_changes` has only the absolute value for the balance, while we want to see the delta;\n2. `account_changes` does not have involved account_id.\n\n### What else do I need to know?\n\nThe code does non-trivial work with extracting the balance-changing events and trying to store them in the correct order.\n\nThe ordering is taken from the [nearcore implementation](https://github.com/near/nearcore/blob/master/runtime/runtime/src/lib.rs#L1136):\n1. validators account update\n2. process transactions\n3. process receipts\n\nUsing [Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) terminology, we merge `account_changes` and `action_receipt_actions` by `receipt_id`.\n\nWe have the natural order in these 2 arrays.\n1. If `receipt_id` is stored in both arrays -> merge them to one line in the resulting table.\n2. If `receipt_id` from `action_receipt_actions` has no pair in `account_changes` -> collect all the possible info from `action_receipt_actions` and put the line in the resulting table.\n3. If the line in `account_changes` has no `receipt_id`, we need to check whether it changed someone's balance. If the balance was changed -> collect all the possible info from `account_changes` and put the line in the resulting table.\n\nWhile merging, we can meet the situation #2 and #3 at the same point of time.\nWe need to find the right order of storing such cases.  \nI feel these 2 situations never affect each other, so any order will work fine.\nI decided to put `account_changes` data first (just to be consistent)\n\n### Contribution Guide\n\nPlease refer to this [guide](https://github.com/near/near-indexer-for-explorer/blob/master/CONTRIBUTING.md) before submitting PRs to this repo \n", "release_dates": []}, {"name": "near-indexer-base", "description": null, "language": "Rust", "license": null, "readme": "# Indexer Base [DEPRECATED]\n\nConsider using [Microindexers](https://github.com/near/near-microindexers) instead.\n\nAsync Postgres-compatible solution to load the data from NEAR blockchain.\nBased on [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs).\n\n[Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) has some disadvantages that we wanted to fix.\nThat's why we've created smaller projects, almost independent mini-indexers:\n- [Indexer Base](https://github.com/near/near-indexer-base) works with basic information about transactions, receipts;\n- [Indexer Accounts](https://github.com/near/near-indexer-accounts) works with accounts and access_keys;\n- [Indexer Balances](https://github.com/near/near-indexer-balances) collects the info about native NEAR token balance changes;\n- [Indexer Events](https://github.com/near/near-indexer-events) works with events produced by NEPs (FT, NFT, etc).\n\n### What are the differences with Indexer For Explorer?\n\n- The data model changed a bit, naming changed;\n- We moved from `diesel` to `sqlx`, we prefer having lightweight ORM and write raw SQL queries;\n- Separate projects are easier to maintain;\n- The main difference is in the future: we are thinking where to go next if we decide to get rid of Postgres.\n\n### Why do the projects _almost_ independent?\n\nWe still hope to leave foreign keys in the tables.\nThe data provided by all the indexers depend on Indexer Base.  \nAll the indexers may have the dependency to Indexer Accounts, but it will give us circular dependency, that's why we don't use these constraints.\n\n### Can I create my own indexer?\n\nSure!\nFeel free to use this project as the example.\n\n## Linux installation guide\n\n```bash\nsudo apt install git build-essential pkg-config libssl-dev tmux postgresql-client libpq-dev -y\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\ncargo install --version=0.5.13 sqlx-cli --features postgres\nulimit -n 30000\ncargo build --release\n#!!! here you need to create .env in the root of the project, and .aws in ~\ncargo run --release -- --s3-bucket-name near-lake-data-mainnet --s3-region-name eu-central-1 --start-block-height 9820210\n```\n\n## Migrations\n\nUnfortunately, migrations do not work if you have several projects writing to the same DB.\nWe still use the migrations folder in each project, but we have to apply the changes manually.\n\n## Creating read-only PostgreSQL user\n\nWe highly recommend using a separate read-only user to access the data.\nIt helps you to avoid unexpected corruption of the indexed data.\n\nWe use `public` schema for all tables.\nBy default, new users have the possibility to create new tables/views/etc there.\nIf you want to restrict that, you have to revoke these rights:\n\n```sql\nREVOKE CREATE ON SCHEMA PUBLIC FROM PUBLIC;\nREVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA PUBLIC FROM PUBLIC;\nALTER DEFAULT PRIVILEGES IN SCHEMA PUBLIC GRANT SELECT ON TABLES TO PUBLIC;\n```\n\nAfter that, you could create read-only user in PostgreSQL:\n\n```sql\nCREATE ROLE readonly;\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public to readonly;\n-- Put here your limit or just ignore this command\nALTER ROLE readonly SET statement_timeout = '30s';\n\nCREATE USER explorer with login password 'password';\nGRANT readonly TO explorer;\n```\n\n```bash\n$ PGPASSWORD=\"password\" psql -h 127.0.0.1 -U explorer databasename\n```\n\n## Redshift\n\nWe keep in mind the possibility to move the data to AWS Redshift.\nSome notes are [here](redshift/REDSHIFT_NOTES.md).", "release_dates": []}, {"name": "near-indexer-events", "description": null, "language": "Rust", "license": null, "readme": "# Indexer Events\n\nAsync Postgres-compatible solution to load the data from NEAR blockchain.\nBased on [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs).\n\nSee [Indexer Base](https://github.com/near/near-indexer-base#indexer-base) docs for all the explanations, installation guide, etc.\n\nThis solution collects balance-changing events about FTs, NFTs, etc.\n\n- We can index the blockchain from any point of time. The code does not check if all the previous history is collected.\n- Potentially, some events may be skipped.\n- We do not check the correctness of collected events, it should be done separately.\n- We can re-run infinite number of indexers writing at the same DB, they may index same or different parts of the blockchain. It should not break the flow.\n\n### Why existing `assets__*` tables are not enough?\n\n`assets__non_fungible_token_events`, `assets__fungible_token_events` do not have the sorting column.\nIn the current solution, we've added artificial `event_index` column.\n\nThe new `coin_events` table stores the data in the format of affected/involved account_id, that simplifies filtering by affected `account_id`.  \n`coin_events` still does not have `absolute_value` column, so you have to collect it from RPC if needed.\n\n### What if my contract does not produce events?\n\nPlease go and update your contract with our new [SDK](https://github.com/near/near-sdk-rs).\n\nIf it's important for you to collect all the previous history as well, you need to make the contribution and implement your own legacy handler.  \nYou can use [existing handlers](src/db_adapters/coin/legacy) as the example, [wrap_near](src/db_adapters/coin/legacy/wrap_near.rs) may be a good starting point.\n\n### My contract produces events/there's a custom legacy logic for my contract, but the Enhanced API still ignores me. Why?\n\nIt means that we've found inconsistency in the data you provided with the data we've queried by RPC.  \nTo be more clear, we collected all the logs/performed all the legacy logic, we know all the changed balances for all the active users at the end of the block.\nAfter that, we ask the RPC to provide all the needed balances.\nThe numbers should be the same.\nIf they are not the same, it means the data is inconsistent.\n\nWhen we meet the inconsistency, we mark such contract as \"non-trusted\".  \nIf you want to fix this, you need to write/edit [legacy handler](src/db_adapters/coin/legacy/DOC.md) for your contract.\n\n### Contribution Guide\n\nPlease refer to this [guide](https://github.com/near/near-indexer-for-explorer/blob/master/CONTRIBUTING.md) before submitting PRs to this repo ", "release_dates": []}, {"name": "near-indexer-for-exchange", "description": null, "language": "Python", "license": null, "readme": "See `transfer.py` for getting started section.\n", "release_dates": []}, {"name": "near-indexer-for-explorer", "description": "Watch NEAR network and store all the data from NEAR blockchain to PostgreSQL database", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# NEAR Indexer for Explorer\n\nNEAR Indexer for Explorer is built on top of [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs) to watch the network and store all the events in the PostgreSQL database.\n\n## Shared Public Access\n\nNEAR runs the indexer and maintains it for [NEAR Explorer](https://github.com/near/near-explorer), [NEAR Wallet](https://github.com/near/near-wallet), and some other internal services. It proved to be a great source of data for various analysis and services, so we decided to give a shared read-only public access to the data:\n\n* testnet credentials: `postgres://public_readonly:nearprotocol@testnet.db.explorer.indexer.near.dev/testnet_explorer`\n* mainnet credentials: `postgres://public_readonly:nearprotocol@mainnet.db.explorer.indexer.near.dev/mainnet_explorer`\n\nWARNING: We may evolve the data schemas, so make sure you follow the release notes of this repository.\n\nNOTE: Please, keep in mind that the access to the database is shared across everyone in the world, so it is better to make sure you limit the amount of queries and individual queries are efficient.\n\n## Self-hosting\n\nThe final setup consists of the following components:\n* PostgreSQL database (you can run it locally or in the cloud), which can hold the whole history of the blockchain (as of August 2022, mainnet takes 3TB of data in PostgreSQL storage, and testnet takes 1TB)\n* NEAR Indexer for Explorer binary that operates as a NEAR Lake Framework based indexer, it requires [AWS S3 credentials](https://docs.near.org/tutorials/indexer/credentials)\n\n### Prepare Development Environment\n\nBefore you proceed, make sure you have the following software installed:\n* [Rust compiler](https://rustup.rs/) of the version that is mentioned in `rust-toolchain` file in the root of [nearcore](https://github.com/nearprotocol/nearcore) project.\n* `libpq-dev` dependency\n\n    On Debian/Ubuntu:\n    \n    ```bash\n    $ sudo apt install libpq-dev\n    ```\n\n\n### Prepare Database\n\nSetup PostgreSQL database, create a database with the regular tools, and note the connection string (database host, credentials, and the database name).\n\nClone this repository and open the project folder\n\n```bash\n$ git clone https://github.com/near/near-indexer-for-explorer.git\n$ cd near-indexer-for-explorer\n```\n\nYou need to provide credentials via `.env` file for:\n- database\n\n  (replace `user`, `password`, `host` and `db_name` with yours)\n  ```bash\n  $ echo \"DATABASE_URL=postgres://user:password@host/db_name\" > .env\n  ```\n- AWS S3 (permission to read from buckets):\n  ```bash\n  $ echo \"AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\" >> .env\n  $ echo \"AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" >> .env\n  ```\n\nThen you need to apply migrations to create necessary database structure. For this you'll need `diesel-cli`, you can install it like so:\n\n\n```bash\n$ cargo install diesel_cli --no-default-features --features \"postgres\"\n```\n\nAnd apply migrations\n\n```bash\n$ cd database && diesel migration run\n```\n\nIf you have the DB with some data collected, and you need to apply the next migration, we highly recommend to read the migration contents.  \nSome migrations have the explanations what should be done, e.g. [[1]](database/migrations/2021-08-06-123500_account_changes_ordering_column/up.sql), [[2]](database/migrations/2023-02-02-100000_fungible_token_events_pk_changed/up.sql), [[3]](database/migrations/2023-02-02-110000_non_fungible_token_events_pk_changed/up.sql).  \nGeneral advice is to add [`CONCURRENTLY` option](https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY) to all indexes creation and apply such changes manually.\n\n### Compile NEAR Indexer for Explorer\n\n```bash\n$ cargo build --release\n```\n\n### Run NEAR Indexer for Explorer\n\nCommand to run NEAR Indexer for Explorer have to include the chain-id and start options:\n\nYou can choose NEAR Indexer for Explorer start options:\n - `from-latest` - start indexing blocks from the latest finalized block\n - `from-interruption` - start indexing blocks from the block NEAR Indexer was interrupted last time but earlier for `<number_of_blocks>` if provided\n - `from-genesis` - download and store accounts/access keys in genesis file and start indexing from the genesis block\n - `from-block --height <block_height>` - start indexing blocks from the specific block height\n\n#### Storing genesis file\nWhen starting Indexer for Explorer with `from-genesis`, the entire genesis file will be loaded in to memory before iterating the stored accounts/access keys. As of writing this, `mainnet` and `betanet` both have relatively small genesis files (<1GB), but the `testnet` file size is around 5GB. Therefore, if you intend to store the `testnet` genesis records, make sure that your system has sufficient RAM to hande the memory load.\n\n#### Strict mode\nNEAR Indexer for Explorer works in strict mode by default. In strict mode, the Indexer will ensure parent data exists before storing children, infinitely retrying until this condition is met. This is necessary as a parent (i.e. `block`) may still be processing while a child (i.e. `receipt`) is ready to be stored. This scenario will likely occur if you have not stored the genesis file or do not have all data prior to the block you start indexing from. In this case, you can disable strict mode to store data prior to the block you are concerned about, and then re-enable it once you have passed this block.\n\nTo disable strict mode provide the following command arugment:\n\n```\n--non-strict-mode\n```\n\n#### Concurrency\nBy default NEAR Indexer for Explorer processes only a single block at a time. You can adjust this with the `--concurrency` argument (when the blocks are mostly empty, it is fine to go with as many as 100 blocks of concurrency).\n\n#### Starting\nSo final command to run NEAR Indexer for Explorer can look like:\n\n```bash\n$ ./target/release/indexer-explorer \\\n  --non-strict-mode \\\n  --concurrency 1 \\\n  mainnet \\\n  from-latest\n```\n\nAfter the network is synced, you should see logs of every block height currently received by NEAR Indexer for Explorer.\n\n### Troubleshoot NEAR Indexer for Explorer\n\nRefer to a separate [TROBLESHOOTING.md](./TROBLESHOOTING.md) document.\n\n## Database structure\n\n![database structure](docs/near-indexer-for-explorer-db.png)\n\n\n## Creating read-only PostgreSQL user\n\nWe highly recommend using a separate read-only user to access the data to avoid unexcepted corruption of the indexed data.\n\nWe use `public` schema for all tables. By default, new users have the possibility to create new tables/views/etc there. If you want to restrict that, you have to revoke these rights:\n\n```sql\nREVOKE CREATE ON SCHEMA PUBLIC FROM PUBLIC;\nREVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA PUBLIC FROM PUBLIC;\nALTER DEFAULT PRIVILEGES IN SCHEMA PUBLIC GRANT SELECT ON TABLES TO PUBLIC;\n```\n\nAfter that, you could create read-only user in PostgreSQL:\n\n```sql\nCREATE ROLE readonly;\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public to readonly;\n-- Put here your limit or just ignore this command\nALTER ROLE readonly SET statement_timeout = '30s';\n\nCREATE USER explorer with login password 'password';\nGRANT readonly TO explorer;\n```\n\n```bash\n$ PGPASSWORD=\"password\" psql -h 127.0.0.1 -U explorer databasename\n```\n\n## Deployments\nBoth `indexer-explorer` and `circulating-supply` binaries are run within Docker, their `Dockerfile`s can be found within their respective directories/workspaces. Docker images are built using Google Cloud Build and then deployed to Google Cloud Run. The following commands can be used to build the Docker images:\n\n```bash\n$ docker build -f ./indexer/Dockerfile .\n$ docker build -f ./circulating-supply/Dockerfile .\n```\n\n## Deprecated features\nThe tables `account_changes` and/or `assets__fungible_token_events` can be still enabled by [features](https://doc.rust-lang.org/cargo/reference/features.html) on the compile stage:\n\n```bash\ncargo build --release --features \"account_changes fungible_token_events\"\n```\n\nNote, we no longer support these tables.\nWe highly recommend you to use [Enhanced API](https://console.pagoda.co/apis?tab=enhancedApi#/) instead.\n", "release_dates": ["2023-03-08T12:42:42Z", "2023-02-15T13:23:57Z", "2022-10-13T07:57:40Z", "2022-10-06T19:36:28Z", "2022-09-30T09:21:27Z", "2022-09-26T20:11:15Z", "2022-09-26T20:10:04Z", "2022-09-16T10:38:15Z", "2022-09-13T16:20:50Z", "2022-09-09T14:05:13Z", "2022-08-16T17:04:33Z", "2022-08-16T11:49:40Z", "2022-07-28T16:07:22Z", "2022-07-11T08:17:11Z", "2022-06-22T14:16:14Z", "2022-05-31T11:11:13Z", "2022-05-26T05:40:26Z", "2022-05-18T14:56:49Z", "2022-04-25T06:55:11Z", "2022-03-17T14:11:19Z", "2022-03-16T07:15:24Z", "2022-02-16T09:27:36Z", "2022-02-09T17:13:57Z", "2022-02-03T13:57:17Z", "2022-01-18T08:19:22Z", "2022-01-18T07:21:52Z", "2022-01-05T13:02:16Z", "2021-12-20T17:51:18Z", "2021-12-09T13:35:42Z", "2021-11-30T14:46:48Z"]}, {"name": "near-indexer-for-wallet", "description": null, "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "**DEPRECATED. This indexer is deprecated and no longer will be supported. Please refer to [NEAR Indexer for Explorer](https://github.com/near/near-indexer-for-explorer)**\n\n# NEAR Indexer for Wallet\n\nNEAR Indexer for Wallet is built on top of [NEAR Indexer microframework](https://github.com/nearprotocol/nearcore/tree/master/chain/indexer) to watch the network and store all the AccessKeys events in the PostgreSQL database. \nIt relies on receipts and `ExecutionOutcomes` to expose the action (`ADD` or `DELETE`) and the status of this action (`SUCCESS` or `FAILED`)\n\n### AccessKeys database structure\n\nSee the [migration](https://github.com/near/near-indexer-for-wallet/blob/master/migrations/2020-07-15-154433_create_access_keys/up.sql) \nto learn about the structure.\n\nTo query the `public_key` for specific `account_id` to define if the key is present do:\n\n```sql\nSELECT \"action\"\nFROM access_keys\nWHERE public_key = :public_key AND account_id = :account_id AND status = 'SUCCESS'\nORDER BY block_height DESC\nLIMIT 1\n``` \n\nSo if the last `\"action\"` is `ADD` then the `public_key` exists. If the `\"action\"` is `DELETE` than it doesn't exist anymore.\n\n## Getting started\n\nBefore you proceed, make sure you have the following software installed:\n* [rustup](https://rustup.rs/) or Rust version that is mentioned in `rust-toolchain` file in the root of [nearcore](https://github.com/nearprotocol/nearcore) project.\n\nInstall `libpq-dev` dependency\n\n```bash\n$ sudo apt install libpq-dev\n```\n\nClone this repository and open the project folder\n\n```bash\n$ git clone git@github.com:near/near-indexer-for-wallet.git\n$ cd near-indexer-for-wallet\n```\n\nYou need to provide database credentials in `.env` file like below (replace `user`, `password`, `host` and `db_name` with yours):\n\n```bash\n$ echo \"DATABASE_URL=postgres://user:password@host/db_name\" > .env\n```\n\nThen you need to apply migrations to create necessary database structure, for this you'll need `diesel-cli`, you can install it like so:\n\n```bash\n$ cargo install diesel_cli --no-default-features --features \"postgres\"\n```\n\nAnd apply migrations\n\n```bash\n$ diesel migration run\n```\n\nTo connect NEAR Indexer for Wallet to the specific chain you need to have necessary configs, you can generate it as follows:\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet init --chain-id testnet --download\n```\n\nReplace `testnet` in the command above to choose different chain: `betanet` or `mainnet`. \nThis will generate keys and configs and download official genesis config.\n\nConfigs for the specified network are in the `--home-dir` provided folder. We need to ensure that NEAR Indexer for Wallet follows \nall the necessary shards, so `\"tracked_shards\"` parameters in `~/.near/testnet/config.json` needs to be configured properly. \nFor example, with a single shared network, you just add the shard #0 to the list:\n\n```\n...\n\"tracked_shards\": [0],\n...\n```\n\nTo run NEAR Indexer for Wallet:\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet run\n```\n\nAfter the network is synced, you should see logs of every block height currently received by NEAR Indexer for Wallet. \n\n## Dump Existing AccessKeys\n\n**NB!** This is a workaround to get the proper up to date data. This may change once `nearcore` allow to simplify this process. \n\nIn order to collect the AccessKeys from current state into database (e.g. at the first start of the NEAR Indexer for Wallet node) \nyou need to wait until the node has synced the data and then stop it. Run the `dump-state` command and then start the node again. \n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet dump-state\n```\n\nIt shouldn't take long, you'll see the message \"Dumped state public access keys in database successfully replaced.\" after that start the indexer again\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet run\n```\n", "release_dates": []}, {"name": "near-jsonrpc-client-rs", "description": "Lower-level API for interfacing with the NEAR Protocol via JSONRPC.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# near-jsonrpc-client\n\nLower-level API for interfacing with the NEAR Protocol via JSONRPC.\n\n[![Crates.io](https://img.shields.io/crates/v/near-jsonrpc-client?label=latest)](https://crates.io/crates/near-jsonrpc-client)\n[![Documentation](https://docs.rs/near-jsonrpc-client/badge.svg)](https://docs.rs/near-jsonrpc-client)\n[![MIT or Apache 2.0 Licensed](https://img.shields.io/crates/l/near-jsonrpc-client.svg)](#license)\n[![Dependency Status](https://deps.rs/crate/near-jsonrpc-client/0.5.1/status.svg)](https://deps.rs/crate/near-jsonrpc-client/0.5.1)\n\n## Usage\n\nEach one of the valid JSON RPC methods are defined in the `methods` module.\nFor instance, to make a `tx` request, you start with the `tx` module\nand construct a request using the `methods::tx::RpcTransactionStatusRequest` struct.\n\n```rust\nuse near_jsonrpc_client::{methods, JsonRpcClient};\nuse near_jsonrpc_primitives::types::transactions::TransactionInfo;\n\nlet mainnet_client = JsonRpcClient::connect(\"https://archival-rpc.mainnet.near.org\");\n\nlet tx_status_request = methods::tx::RpcTransactionStatusRequest {\n    transaction_info: TransactionInfo::TransactionId {\n        hash: \"9FtHUFBQsZ2MG77K3x3MJ9wjX3UT8zE1TczCrhZEcG8U\".parse()?,\n        account_id: \"miraclx.near\".parse()?,\n    },\n};\n\n// call a method on the server via the connected client\nlet tx_status = mainnet_client.call(tx_status_request).await?;\n\nprintln!(\"{:?}\", tx_status);\n```\n\nCheck out [`the examples folder`](https://github.com/near/near-jsonrpc-client-rs/tree/master/examples) for a comprehensive list of helpful demos. You can run the examples with `cargo`. For example: `cargo run --example view_account`.\n\n\n## Releasing\n\nVersioning and releasing of this crate is automated and managed by [custom fork](https://github.com/miraclx/cargo-workspaces/tree/grouping-versioning-and-exclusion) of [`cargo-workspaces`](https://github.com/pksunkara/cargo-workspaces). To publish a new version of this crate, you can do so by bumping the `version` under the `[workspace.metadata.workspaces]` section in the [package manifest](https://github.com/near/near-jsonrpc-client-rs/blob/master/Cargo.toml) and submit a PR.\n\nWe have CI Infrastructure put in place to automate the process of publishing all crates once a version change has merged into master.\n\nHowever, before you release, make sure the [CHANGELOG](https://github.com/near/near-jsonrpc-client-rs/blob/master/CHANGELOG.md) is up to date and that the `[Unreleased]` section is present but empty.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as below, without any additional terms or conditions.\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": ["2024-01-21T22:59:50Z", "2024-01-07T16:00:29Z", "2023-06-02T19:52:05Z", "2023-03-22T17:43:40Z", "2023-02-24T21:21:09Z", "2022-11-11T02:15:05Z", "2022-10-04T01:35:23Z", "2022-05-31T15:24:34Z", "2022-02-09T10:18:30Z", "2021-12-22T17:01:39Z", "2021-11-11T04:37:53Z"]}, {"name": "near-lake-framework-js", "description": "JS Library to connect to the NEAR Lake S3 and stream the data", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "[![npm version](https://badge.fury.io/js/near-lake-framework.svg)](https://badge.fury.io/js/near-lake-framework)\n\n# NEAR Lake Framework JS\n\nAvailable in programming languages: [Rust](https://github.com/near/near-lake-framework) | **Javascript**\n\nNEAR Lake Framework is a small library companion to [NEAR Lake](https://github.com/near/near-lake). It allows you to build\nyour own indexer that subscribes to the stream of blocks from the NEAR Lake data source and create your own logic to process\nthe NEAR Protocol data.\n\n[Official NEAR Lake Framework launch announcement](https://gov.near.org/t/announcement-near-lake-framework-brand-new-word-in-indexer-building-approach/17668) has been published on the NEAR Gov Forum\n\n## Example\n\n```ts\nimport { startStream, types } from '@near-lake/framework';\n\nconst lakeConfig: types.LakeConfig = {\n    s3BucketName: 'near-lake-data-mainnet',\n    s3RegionName: 'eu-central-1',\n    startBlockHeight: 66264389,\n};\n\nasync function handleBlock(\n    block: types.Block,\n): Promise<void> {\n    // custom logic for handling the block\n    let events = block.eventsByAccountId(\"x.paras.near\")\n    console.log(events)\n}\n\n(async () => {\n    await startStream(lakeConfig, handleStreamerMessage);\n})();\n```\n\n## Packages\n\nNEAR Lake Framework JS originally existed as a single library: [near-lake-framework](https://www.npmjs.com/package/near-lake-framework). This package is still avaiable on NPM and can be used as is. But to make package consumption easier, the library has since been split in to sub-packages:\n- [@near-lake/framework](./packages/near-lake-framework/README.md) - core library for streaming blocks from NEAR Lake\n- [@near-lake/primitives](./packages/near-lake-primitives/README.md) - companion library to help interaction with blockchain data\n\nIn most cases you will only need `@near-lake/framework`. For more information on both, see their respective READMEs.\n\n## Tutorial\n\nPlease, read the tutorial [JavaScript NEAR Lake indexer basic tutorial](https://near-indexers.io/tutorials/lake/js-lake-indexer)\n\n## How to use\n\n## Custom S3 storage\n\nIn case you want to run your own [near-lake](https://github.com/near/near-lake) instance and store data in some S3 compatible storage ([Minio](https://min.io/) or [Localstack](https://localstack.cloud/) as example)\nYou can owerride default S3 API endpoint by using `s3_endpoint` option\n\n- run minio\n\n```bash\n$ mkdir -p /data/near-lake-custom && minio server /data\n```\n\n- add `s3_endpoint` parameter to LakeConfig instance\n\n```typescript\nconst localEndpoint: types.EndpointConfig = {\n    protocol: 'http',\n    hostname: '0.0.0.0',\n    port: 9000,\n    path: '/',\n};\n\nconst lakeConfig: types.LakeConfig = {\n  s3Endpoint: localEndpoint,\n  s3BucketName: \"near-lake-custom\",\n  s3RegionName: \"eu-central-1\",\n  s3ForcePathStyle: true,\n  startBlockHeight: 0,\n};\n```\n\n### AWS S3 Credentials\n\nIn order to be able to get objects from the AWS S3 bucket you need to provide the AWS credentials.\n\nAWS default profile configuration with aws configure looks similar to the following:\n\n`~/.aws/credentials`\n\n```\n[default]\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\n[AWS docs: Configuration and credential file settings](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)\n\n### Dependencies\n\nInstall `near-lake-framework`\n\n```bash\n$ npm i near-lake-framework\n```\n\nAfter that import in your code:\n\n```ts\nimport { startStream, types } from 'near-lake-framework';\n```\n\n## Configuration\n\nEverything should be configured before the start of your indexer application via `LakeConfig` struct.\n\nAvailable parameters:\n\n- `s3Endpoint: string` - provide the AWS S3 custom API ednpoint\n- `s3BucketName: string` - provide the AWS S3 bucket name (`near-lake-testnet`, `near-lake-mainnet` or yours if you run your own NEAR Lake)\n- `s3RegionName: string` - provide the region for AWS S3 bucket\n- `startBlockHeight: number` - block height to start the stream from\n- `blocksPreloadPoolSize: number` - provide the number of blocks to preload (default: 200)\n\n## Cost estimates\n\n**TL;DR** approximately $18.15 per month (for AWS S3 access, paid directly to AWS) for the reading of fresh blocks\n\nExplanation:\n\nAssuming NEAR Protocol produces accurately 1 block per second (which is really not, the average block production time is 1.3s). A full day consists of 86400 seconds, that's the max number of blocks that can be produced.\n\nAccording the [Amazon S3 prices](https://aws.amazon.com/s3/pricing/?nc1=h_ls) `list` requests are charged for $0.005 per 1000 requests and `get` is charged for $0.0004 per 1000 requests.\n\nCalculations (assuming we are following the tip of the network all the time):\n\n```\n86400 blocks per day * 5 requests for each block / 1000 requests * $0.0004 per 1k requests = $0.173 * 30 days = $5.19\n```\n\n**Note:** 5 requests for each block means we have 4 shards (1 file for common block data and 4 separate files for each shard)\n\nAnd a number of `list` requests we need to perform for 30 days:\n\n```\n86400 blocks per day / 1000 requests * $0.005 per 1k list requests = $0.432 * 30 days = $12.96\n\n$5.19 + $12.96 = $18.15\n```\n\nThe price depends on the number of shards\n\n## Future plans\n\n**The main NEAR Lake Framework library we develop is a Rust-lang version. The JS version is following the main one, so there is might be some delays in delivering fixes and features**\n\nWe use Milestones with clearly defined acceptance criteria:\n\n- [x] [MVP](https://github.com/near/near-lake-framework/milestone/1)\n- [ ] [1.0](https://github.com/near/near-lake-framework/milestone/2)\n\n## Running examples\n\nInside `apps/` we have created a created a bunch of example implementations for using the indexer. \n\nTo test out any of the indexers, from the root, run:\n\n```bash\n$ npm run demo --name=<example_package_name>\n```\n", "release_dates": ["2023-11-30T08:06:26Z"]}, {"name": "near-lake-framework-rs", "description": "Library to connect to the NEAR Lake S3 and stream the data", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# near-lake-framework-rs\n\nAvailable in programming languages: **Rust** | [Javascript](https://github.com/near/near-lake-framework-js)\n\nNEAR Lake Framework is a small library companion to [NEAR Lake](https://github.com/near/near-lake). It allows you to build\nyour own indexer that subscribes to the stream of blocks from the NEAR Lake data source and create your own logic to process\nthe NEAR Protocol data.\n\n[![crates.io](https://img.shields.io/crates/v/near-lake-framework?label=latest)](https://crates.io/crates/near-lake-framework)\n[![Documentation](https://docs.rs/near-lake-framework/badge.svg)](https://docs.rs/near-lake-framework)\n![MIT or Apache 2.0 licensed](https://img.shields.io/crates/l/near-lake-framework.svg)\n\n---\n\n[Official NEAR Lake Framework High-level update announcement](https://near.org/near/widget/PostPage?accountId=khorolets.near&blockHeight=93659695) made on NEAR.org. This post announces the release of the beta version of the NEAR Lake Framework 0.8.0. The post also includes an overview of the new approach and features from the High-level update.\n\n---\n\n## Example\n\n```rust\nuse futures::StreamExt;\nuse near_lake_framework::LakeConfigBuilder;\n\n#[tokio::main]\nasync fn main() -> Result<(), tokio::io::Error> {\n   // create a NEAR Lake Framework config\n   let config = LakeConfigBuilder::default()\n       .testnet()\n       .start_block_height(82422587)\n       .build()\n       .expect(\"Failed to build LakeConfig\");\n\n   // instantiate the NEAR Lake Framework Stream\n   let (sender, stream) = near_lake_framework::streamer(config);\n\n   // read the stream events and pass them to a handler function with\n   // concurrency 1\n   let mut handlers = tokio_stream::wrappers::ReceiverStream::new(stream)\n       .map(|streamer_message| handle_streamer_message(streamer_message))\n       .buffer_unordered(1usize);\n\n   while let Some(_handle_message) = handlers.next().await {}\n   drop(handlers); // close the channel so the sender will stop\n\n   // propagate errors from the sender\n   match sender.await {\n       Ok(Ok(())) => Ok(()),\n       Ok(Err(e)) => Err(e),\n       Err(e) => Err(anyhow::Error::from(e)), // JoinError\n   }\n}\n\n// The handler function to take the entire `StreamerMessage`\n// and print the block height and number of shards\nasync fn handle_streamer_message(\n   streamer_message: near_lake_framework::near_indexer_primitives::StreamerMessage,\n) {\n   eprintln!(\n       \"{} / shards {}\",\n       streamer_message.block.header.height,\n       streamer_message.shards.len()\n   );\n}\n```\n\nFor more information [refer to the docs](https://docs.rs/near-lake-framework)\n\n### Tutorials\n\n- Video tutorial about [`near-examples/near-lake-accounts-watcher`](https://github.com/near-examples/near-lake-accounts-watcher) https://youtu.be/GsF7I93K-EQ\n- [Migrating to NEAR Lake Framework](https://near-indexers.io/tutorials/lake/migrating-to-near-lake-framework) from [NEAR Indexer Framework](https://near-indexers.io/docs/projects/near-indexer-framework)\n\n### More examples\n\nWe're keeping a set of examples in the [examples](./examples/) folder. The examples there are always up-to-date with the latest version of the NEAR Lake Framework.\n\nAnd here are some more examples. Despite the fact that they are not up-to-date with the latest version of the NEAR Lake Framework, they still can be used as a reference. Though, we try to keep them updated as well.\n\n- [`near-examples/near-lake-raw-printer`](https://github.com/near-examples/near-lake-raw-printer) simple example of a data printer built on top of NEAR Lake Framework\n- [`near-examples/near-lake-accounts-watcher`](https://github.com/near-examples/near-lake-accounts-watcher) another simple example of the indexer built on top of NEAR Lake Framework for a tutorial purpose\n- [`near-examples/indexer-tx-watcher-example-lake`](https://github.com/near-examples/indexer-tx-watcher-example-lake) an example of the indexer built on top of NEAR Lake Framework that watches for transactions related to specified account(s)\n- [`octopus-network/octopus-near-indexer-s3`](https://github.com/octopus-network/octopus-near-indexer-s3) a community-made project that uses NEAR Lake Framework\n\n## How to use\n\n### Dependencies\n\nAdd the following dependencies to your `Cargo.toml`\n\n```toml\n...\n[dependencies]\nfutures = \"0.3.5\"\nitertools = \"0.10.3\"\ntokio = { version = \"1.1\", features = [\"sync\", \"time\", \"macros\", \"rt-multi-thread\"] }\ntokio-stream = { version = \"0.1\" }\n\n# NEAR Lake Framework\nnear-lake-framework = \"0.6.1\"\n```\n\n## Cost estimates (Updated Mar 10, 2023 with more precise calculations)\n\n**TL;DR** approximately $20 per month (for AWS S3 access, paid directly to AWS) for the reading of fresh blocks\n\n### Historical indexing\n\n| Blocks | GET | LIST | Subtotal GET | Subtotal LIST | Total $ |\n|---|---|---|---|---|---|\n| 1000 | 5000 | 4 | 0.00215 | 0.0000216 | $0.00 |\n| 86,400 | 432000 | 345.6 | 0.18576 | 0.00186624 | $0.19 |\n| 2,592,000 | 12960000 | 10368 | 5.5728 | 0.0559872 | $5.63 |\n| 77,021,059 | 385105295 | 308084.236 | 165.5952769 | 1.663654874 | $167.26 |\n\n**Note:** ~77m of blocks is the number of blocks on the moment I was calculating.\n\n**84,400 blocks is approximate number of blocks per day** (1 block per second * 60 seconds * 60 minutes * 24 hours)\n\n**2,592,000 blocks is approximate number of blocks per months** (86,400 blocks per day * 30 days)\n\n### Tip of the network indexing\n\n| Blocks | GET | LIST | Subtotal GET | Subtotal LIST | Total $ |\n|---|---|---|---|---|---|\n| 1000 | 5000 | 1000 | 0.00215 | 0.0054 | $0.01 |\n| 86,400 | 432000 | 86,400 | 0.18576 | 0.46656 | $0.65 |\n| 2,592,000 | 12960000 | 2,592,000 | 5.5728 | 13.9968 | $19.57 |\n| 77,021,059 | 385105295 | 77,021,059 | 165.5952769 | 415.9137186 | $581.51 |\n\nExplanation:\n\nAssuming NEAR Protocol produces accurately 1 block per second (which is really not, the average block production time is 1.3s). A full day consists of 86400 seconds, that's the max number of blocks that can be produced.\n\nAccording the [Amazon S3 prices](https://aws.amazon.com/s3/pricing/?nc1=h_ls) `list` requests are charged for $0.0054 per 1000 requests and `get` is charged for $0.00043 per 1000 requests.\n\nCalculations (assuming we are following the tip of the network all the time):\n\n```\n86400 blocks per day * 5 requests for each block / 1000 requests * $0.0004 per 1k requests = $0.19 * 30 days = $5.7\n```\n**Note:** 5 requests for each block means we have 4 shards (1 file for common block data and 4 separate files for each shard)\n\nAnd a number of `list` requests we need to perform for 30 days:\n\n```\n86400 blocks per day / 1000 requests * $0.005 per 1k list requests = $0.47 * 30 days = $14.1\n\n$5.7 + $14.1 = $19.8\n```\n\nThe price depends on the number of shards\n\n## Future plans\n\nWe use Milestones with clearly defined acceptance criteria:\n\n* [x] [MVP](https://github.com/near/near-lake-framework/milestone/1)\n* [ ] [0.8 High-level update](https://github.com/near/near-lake-framework-rs/milestone/3)\n* [ ] [1.0](https://github.com/near/near-lake-framework/milestone/2)\n", "release_dates": ["2023-06-06T17:43:54Z", "2023-06-06T13:05:46Z", "2023-06-06T19:30:02Z", "2023-06-06T19:28:00Z", "2023-06-06T13:32:58Z", "2023-06-06T17:42:02Z", "2023-06-06T13:35:00Z", "2023-06-06T13:04:24Z", "2023-06-02T10:00:46Z", "2023-03-06T17:02:42Z", "2023-02-22T21:27:29Z", "2023-01-26T17:44:01Z", "2022-12-12T14:39:26Z", "2022-09-09T14:46:33Z", "2022-08-18T12:49:19Z", "2022-06-16T15:47:38Z", "2022-06-14T08:56:35Z", "2022-05-17T11:21:03Z", "2022-05-10T14:57:26Z", "2022-04-25T15:14:05Z"]}, {"name": "near-lake-indexer", "description": "Watch NEAR network and store all the events as JSON files on AWS S3", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# near-lake-indexer\n\nNEAR Lake is an indexer built on top of [NEAR Indexer microframework](https://github.com/nearprotocol/nearcore/tree/master/chain/indexer)\nto watch the network and store all the events as JSON files on AWS S3.\n\n## Concept\n\nWe used to have [NEAR Indexer for Explorer](https://github.com/near/near-indexer-for-explorer) that was watching for\nthe network and stored all the events to PostgreSQL database. PostgreSQL became the main bottleneck for us. After some\nbrainstorming sessions and researches we decided to go with AWS Aurora database.\n\nKnowing the fact that [NEAR Explorer](https://explorer.near.org) is not the only project that uses the Indexer for Explorer's\ndatabase, we wanted to come up with the concept that will allow us to cover even more projects that can benefit from the data\nfrom NEAR Protocol.\n\nThat's why we decided to store the data from the blockchain as JSON files on AWS S3 bucket that can be used\nas a data source for different projects.\n\nAs \"Indexer for Explorer Remake\" project we are going to have `near-lake` as a data writer. There's going to be\nanother project that will read from AWS S3 bucket and will store all the data in SingleStore database. This\nwill replace NEAR Indexer for Explorer PostgreSQL database at some moment and will become the main\nsource for NEAR Explorer.\n\n## How to start\n\nThe final setup consists of the following components:\n* AWS S3 Bucket as a storage\n* NEAR Lake binary that operates as a regular NEAR Protocol peer-to-peer node, so you will operate it as\n  any other [Regular/RPC Node in NEAR](https://docs.near.org/docs/develop/node/rpc/hardware-rpc)\n\n### Prepare Development Environment\n\nBefore you proceed, make sure you have the following software installed:\n* [Rust compiler](https://rustup.rs/) of the version that is mentioned in `rust-toolchain` file in the root of\n  [nearcore](https://github.com/nearprotocol/nearcore) project.\n* Ensure you have [AWS Credentials configured](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)\n    From AWS Docs:\n\n  > For example, the files generated by the AWS CLI for a default profile configured with aws configure looks similar to the following.\n  >\n  > ~/.aws/credentials\n  > ```\n  > [default]\n  > aws_access_key_id=AKIAIOSFODNN7EXAMPLE\n  > aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n  > ```\n\n### Compile NEAR Lake\n\n```bash\n$ cargo build --release\n```\n\n### Configure NEAR Lake\n\nTo connect NEAR Lake to the specific chain you need to have necessary configs, you can generate it as follows:\n\n```bash\n$ ./target/release/near-lake --home ~/.near/testnet init --chain-id testnet --download-config --download-genesis\n```\n\nThe above code will download the official genesis config and generate necessary configs. You can replace `testnet` in the command above to different network ID (`betanet`, `mainnet`).\n\n**NB!** According to changes in `nearcore` config generation we don't fill all the necessary fields in the config file.\nWhile this issue is open https://github.com/nearprotocol/nearcore/issues/3156 you need to download config you want and replace the generated one manually.\n- [testnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/testnet/config.json)\n- [betanet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/betanet/config.json)\n- [mainnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/mainnet/config.json)\n\nConfigs for the specified network are in the `--home` provided folder. We need to ensure that NEAR Lake follows\nall the necessary shards, so `\"tracked_shards\"` parameters in `~/.near/testnet/config.json` needs to be configured properly.\nCurrently, `nearcore` treats empty value for `\"tracked_shards\"` as \"do not track any shard\" and **any value** as \"track all shards\".\nFor example, in order to track all shards, you just add the shard #0 to the list:\n\n```\n...\n\"tracked_shards\": [0],\n...\n```\n\n\n### (Optional) Configuration via environment variables\n\nYou can also configure NEAR Lake via environment variables. This is useful if you want to run NEAR Lake in a Docker container.\n\nAdd `.env` file to the root of the project with the following content:\n\n```\nBUCKET=near-lake-custom # name of the bucket to store data in (e.g. near-lake-data-testnet or near-lake-data-mainnet)\nREGION=eu-central-1\nAWS_DEFAULT_REGION=eu-central-1\nAWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE # either via env or via ~/.aws\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY # either via env or via ~/.aws\nENDPOINT=http://localhost:4566 # for the custom S3 storage endpoing (e.g. Minio or Localstack)\n```\n\nOr you can pass them via command line (see below)\n\n### Run NEAR Lake\n\nCommands to run NEAR Lake, after `./target/release/near-lake`\n\n| Command \t| Key/Subcommand               \t| Required/Default                                                 \t| Responsible for                                                                                                                                                                                                                                                                                                                                                         \t|\n|---------\t|--------------------------\t|------------------------------------------------------------------\t|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|\n|         \t| `--home`                 \t| Default <br>`~/.near`                                            \t| Tells the node where too look for necessary files: <br>`config.json`<br>, <br>`genesis.json`<br>, <br>`node_key.json`<br>, and <br>`data`<br> folder                                                                                                                                                                                                                    \t|\n| `init`  \t|                              \t|                                                                  \t| Tells the node to generate config files in `--home-dir`                                                                                                                                                                                                                                                                                                                 \t|\n|         \t| `--chain-id`                 \t| Required<br><br>  * `localnet`<br>  * `testnet`<br>  * `mainnet` \t| Defines the chain to generate config files for                                                                                                                                                                                                                                                                                                                          \t|\n|         \t| `--download-config`          \t| Optional                                                         \t| If provided tells the node to download `config.json` from the public URL. You can download them manually<br><br> - [testnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/testnet/config.json)<br> - [mainnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/mainnet/config.json)      \t|\n|         \t| `--download-genesis`         \t| Optional                                                         \t| If provided tells the node to download `genesis.json` from the public URL. You can download them manually<br><br> - [testnet genesis.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/testnet/genesis.json)<br> - [mainnet genesis.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/mainnet/genesis.json) \t|\n|         \t| TODO:<br>Other `neard` keys  \t|                                                                  \t|                                                                                                                                                                                                                                                                                                                                                                         \t|\n| `run`   \t|                              \t|                                                                  \t| Runs the node                                                                                                                                                                                                                                                                                                                                                           \t|\n|         \t| `--bucket`                   \t| Required                                                         \t| AWS S3 Bucket name                                                                                                                                                                                                                                                                                                                                                      \t|\n|         \t| `--region`                   \t| Required                                                         \t| AWS S3 Bucket region                                                                                                                                                                                                                                                                                                                                                    \t|\n|           | `--fallback-region`           | Default eu-central-1                                              | AWS S3 Fallback region                                                                                                                                                                                                                                                                                                                                                 \t|\n|           | `--endpoint`                  | Optional                                                          | AWS S3 compatible API endpoint                                                                                                                                                                                                                                                                                                                                            |\n|         \t| `--stream-while-syncing`     \t| Optional                                                         \t| If provided Indexer streams blocks while they appear on the node instead of waiting the node to be fully synced                                                                                                                                                                                                                                                         \t|\n|         \t| `--concurrency`              \t| Default 1                                                        \t| Defines the concurrency for the process of saving block data to AWS S3                                                                                                                                                                                                                                                                                                  \t|\n|         \t| `sync-from-latest`           \t| One of the `sync-` subcommands is required                       \t| Tells the node to start indexing from the latest block in the network                                                                                                                                                                                                                                                                                                   \t|\n|         \t| `sync-from-interruption`     \t| One of the `sync-` subcommands is required                       \t| Tells the node to start indexing from the block the node was interrupted on (if it is a first start it will fallback to `sync-from-latest`)                                                                                                                                                                                                                             \t|\n|         \t| `sync-from-block --height N` \t| One of the <br>`sync-`<br> subcommands is required               \t| Tells the node to start indexing from the specified block height `N` (**Ensure** you node data has the block you want to start from)                                                                                                                                                                                                                                    \t|\n\n```bash\n$ ./target/release/near-lake --home ~/.near/testnet run --stream-while-syncing --concurrency 50 sync-from-latest\n```\n\nAfter the network is synced, you should see logs of every block height currently received by NEAR Lake.\n\n\n## Syncing\n\nWhenever you run NEAR Lake for any network except localnet you'll need to sync with the network.\nThis is required because it's a natural behavior of `nearcore` node and NEAR Lake is a wrapper\nfor the regular `nearcore` node. In order to work and index the data your node must be synced\nwith the network. This process can take a while, so we suggest to download a fresh backup of\nthe `data` folder and put it in you `--home-dir` of your choice (by default it is `~/.near`)\n\nRunning your NEAR Lake node on top of a backup data will reduce the time of syncing process\nbecause your node will download only the data after the backup was cut and it takes reasonable amount time.\n\nAll the backups can be downloaded from the public S3 bucket which contains latest daily snapshots:\n\nYou will need [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html) to be installed in order to download the backups.\n\n### Mainnet\n\n```\n$ aws s3 --no-sign-request cp s3://near-protocol-public/backups/mainnet/rpc/latest .\n$ LATEST=$(cat latest)\n$ aws s3 --no-sign-request cp --no-sign-request --recursive s3://near-protocol-public/backups/mainnet/rpc/$LATEST ~/.near/data\n```\n\n### Testnet\n\n```\n$ aws s3 --no-sign-request cp s3://near-protocol-public/backups/testnet/rpc/latest .\n$ LATEST=$(cat latest)\n$ aws s3 --no-sign-request cp --no-sign-request --recursive s3://near-protocol-public/backups/testnet/rpc/$LATEST ~/.near/data\n```\n\n\n\n## Running NEAR Lake as an archival node\n\nIt's not necessary but in order to index everything in the network it is better to do it from the genesis.\n`nearcore` node is running in non-archival mode by default. That means that the node keeps data only\nfor [5 last epochs](https://docs.near.org/concepts/basics/epoch). In order to index data from the genesis\nwe need to turn the node in archival mode.\n\nTo do it we need to update `config.json` located in `--home-dir` (by default it is `~/.near`).\n\nFind next keys in the config and update them as following:\n\n```json\n{\n  ...\n  \"archive\": true,\n  \"tracked_shards\": [0],\n  ...\n}\n```\n\nThe syncing process in archival mode can take a lot of time, so it's better to download a backup provided by NEAR\nand put it in your `data` folder. After that your node will download only the data after the backup was cut and it\ntakes reasonable amount time.\n\n\nAll the backups can be downloaded from the public S3 bucket which contains the latest daily snapshots:\n\n* [Archival Mainnet data folder](https://near-protocol-public.s3-accelerate.amazonaws.com/backups/mainnet/archive/data.tar)\n* [Archival Testnet data folder](https://near-protocol-public.s3-accelerate.amazonaws.com/backups/testnet/archive/data.tar)\n\nSee [this link](https://docs.near.org/integrator/exchange-integration#running-an-archival-node) for reference\n\n## Using the data\n\nWe write all the data to AWS S3 buckets:\n\n- `near-lake-data-testnet` (`eu-central-1` region) for testnet\n- `near-lake-data-mainnet` (`eu-central-1` region) for mainnet\n\n## Custom S3 storage\n\nIn case you want to run you own near-lake instance and store data in some S3 compatible storage ([Minio](https://min.io/) or [Localstack](https://localstack.cloud/) as example)\nYou can owerride default S3 API endpoint by using `--endpoint` option\n\n- run minio\n\n```bash\n$ mkdir -p /data/near-lake-custom && minio server /data\n```\n\n- run near-lake\n\n```bash\n$ ./target/release/near-lake --home ~/.near/testnet run --endpoint http://127.0.0.1:9000 --bucket near-lake-custom sync-from-latest\n```\n\n### Data structure\n\nThe data structure we use is the following:\n\n```\n<block_height>/\n  block.json\n  shard_0.json\n  shard_1.json\n  ...\n  shard_N.json\n```\n\n- `<block_height>` is a 12-character-long `u64` string with leading zeros (e.g `000042839521`). [See this issue for a reasoning](https://github.com/near/near-lake/issues/23)\n- `block_json` contains JSON-serialized [`BlockView`](https://github.com/near/nearcore/blob/e9a28c46c2bea505b817abf484e6015a61ea7d01/core/primitives/src/views.rs#L711-L716) struct. **NB!** this struct might change in the future, we will announce it\n- `shard_N.json` where `N` is `u64` starting from `0`. Represents the index number of the shard. In order to find out the expected number of shards in the block you can look in `block.json` at `.header.chunks_included`\n\n### Access the data\n\nAll NEAR Lake AWS S3 buckets have [Request Payer](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RequesterPaysBuckets.html) enabled. It means that anyone with their own AWS credentials can List and Read the bucket's content and **be charged for it by AWS**. Connections to the bucket have to be done with AWS credentials provided. See [NEAR Lake Framework](https://github.com/near/near-lake-framework) for a reference.\n\n### NEAR Lake Framework\n\nOnce we [set up the public access to the buckets](https://github.com/near/near-lake/issues/22) anyone will be able to build their own code to read it through.\n\nFor our own needs we are working on [NEAR Lake Framework](https://github.com/near/near-lake-framework) to have a simple way to create an indexer on top of the data stored by NEAR Lake itself.\n\n**See the [official announce of NEAR Lake Framework on the NEAR Gov Forum](https://gov.near.org/t/announcement-near-lake-framework-brand-new-word-in-indexer-building-approach/17668)**\n\n\n", "release_dates": ["2023-06-08T08:04:46Z", "2023-06-05T21:08:47Z", "2023-05-17T23:21:41Z", "2023-04-03T06:55:58Z", "2023-03-07T00:17:53Z", "2023-02-23T00:36:32Z", "2023-02-23T00:36:30Z", "2023-02-03T12:38:06Z", "2023-02-03T09:08:41Z", "2022-12-13T12:06:44Z", "2022-10-13T07:53:32Z", "2022-10-06T19:31:14Z", "2022-09-26T15:00:25Z", "2022-09-16T10:54:21Z", "2022-09-09T14:23:23Z", "2022-08-16T11:50:41Z", "2022-07-28T14:53:39Z", "2022-07-11T08:21:02Z", "2022-06-23T05:52:51Z", "2022-06-20T12:39:35Z", "2022-05-31T11:28:59Z", "2022-05-26T05:45:05Z", "2022-05-19T06:51:03Z", "2022-04-21T15:14:35Z", "2022-04-02T11:21:57Z", "2022-03-31T13:31:27Z", "2022-02-21T10:31:40Z", "2022-02-15T19:48:56Z"]}, {"name": "near-ledger-app", "description": "NEAR app for Ledger Nano S (DEPRECATED REPO)", "language": "C", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# REPO MOVED\n\nNew Location: https://github.com/near/app-near\n", "release_dates": []}, {"name": "near-ledger-js", "description": "Connect to NEAR Ledger app from browser", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# near-ledger-js \n\nA JavaScript library for communication with [Ledger](https://www.ledger.com/) Hardware Wallet.\n\n# Example usage\n```javascript\n  import { createClient, getSupportedTransport } from \"near-ledger-js\";\n  \n  const transport = await getSupportedTransport();\n  transport.setScrambleKey(\"NEAR\");\n  \n  transport.on('disconnect', () => {...});\n```\n\nIn an onClick handler:\n```javascript\n  const client = await createClient(transport);\n  // If no error thrown, ledger is available. NOTE: U2F transport will still get here even if device is not present \n```\n\nTo see debug logging for `getSupportedTransport()`, import `setDebugLogging()` and call `setDebugLogging(true)` before using the package.\n\n# How to run demo project\n1. `yarn` to install dependencies\n2. `yarn start` to start local server with Parcel\n3. Open https://localhost:1234 in your browser\n4. Open browser console\n5. Try examples shown on the page\n\n# License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": []}, {"name": "near-light-client", "description": "A NEAR light client protocol implementation.", "language": "Rust", "license": null, "readme": "<div align=\"center\">\n  <a href=\"https://near.org\"><img alt=\"NEAR Protocol\" src=\"docs/assets/near-logo.svg\" width=600></a>\n  <h3> <a href=\"https://near.org\">NEAR</a> is a low-cost, usable, and scalable layer-one blockchain that offers cheap data availability layer.</h3>\n  <br />\n</div>\n\n# NEAR light client\n\n[![Tests](https://github.com/near/near-light-client/actions/workflows/on_pull_request.yml/badge.svg)](https://github.com/near/near-light-client/actions/workflows/on_pull_request.yml)\n[![Deploy](https://github.com/near/near-light-client/actions/workflows/on_main.yml/badge.svg)](https://github.com/near/near-light-client/actions/workflows/on_main.yml)\n\nA fully featured, injectable, dependable implementation of the NEAR light client protocol[^1].\n\n## Motivation\n\nThere are many light clients in circulation for NEAR, with a variety of protocols and features to varying degrees of security and maintenance.\nIn this repository, we hope to collaborate our efforts such that we can build a robust client and amalgamate our efforts to improve the light client and also innovate with with it.\n\nThis is inspired by the great `helios`[^2] light client, where there were once many light client implementations for Ethereum until it was released. \nThis has now become an integral unification of efforts in innovating helios as well as a trustworthy system for people to build with.\n\nFunctional requirements:\n- **injectable**: For the client to be injectable, it must be ready to be injected in various environments. Building a ZK light client using plonky3? Lambdaworks? Arcworks? Use a different EDDSA library? What about building a contract, where the code paths don't use a library? All of these \nvarious systems require varying libraries, each of which provides some base cryptography however they are implemented in various dependencies.\nInteroperability with dependencies is very hard to maintain and eventually falls by the wayside.\nWith the light client being injectable, they can inject cryptographic semantics and the light client logic should be the same, with the only difference being what environment the application uses.\n- **robust**: With an open source, contributor-friendly effort, stringent semantic versioning and audits, we can be sure that the light client will be robust and maintainable.\n- **dependable**: The Protocol itself should not be dependent on many dependencies which would detract from its usability. Ideally, the light client should be `#[no_std]`, and it should be environment-agnostic.\nIf an environment is simply too difficult to maintain Interoperability with, such as `Solidity <> Rust`, we should try to build a modular set of building blocks to aid this.\n\n## Structure\n\nAt present, there are currently two implementations of the light client. The `std` and the `zk` version. With varying approaches to get running with these.\n\n### Off-chain  \n\nThis is the first light client that was used to build on the logic of the protocol, it has the greatest environment assumptions and a bunch of dependencies.\n\nIn `bin`, there is the off-chain light client, which syncs with the final head of the chain, applies the sync protocol and stores the block producers and the next header. \nThis is the most basic way to run the light client, you can configure the `${ENVIRONMENT}.toml` to set your trusted checkpoints, state and the host exposed and this will work out of the box, syncing with the state and catching up if needed.\n\n#### State\n\nIt also stores some information in the state db, this contains a few tries in `sled`, namely block producers, headers and any cachable information used for verification.\nThe state for this is largely unoptimised and definitely can be improved, particularly around the technology selected.\n\n#### Interface\n\nIt exposes an HTTP interface for querying state and providing proofs. It should expose a JSON-RPC implementation to be more compatible with users already aware of NEAR RPC nodes.\n\n### ZK\n\nhttps://alpha.succinct.xyz/near/near-light-client\n\nWe have just merged the initial implementation of a ZK light client protocol, this can be seen in `nearx`. It leverages Succinct's[^3] prover network and plonky2x SDK as a proving system.\nThich will allow us to pay for proof generation from the proof market.\n\nIt is a fully featured light client protocol, providing sync and transaction verification. It exploits STARK acceleration for the STARK-friendly functionality and parallel proving for the Merkle verification.\nWe aim to also fold verification and syncing with proof recursion so the light client can act lazily, syncing when needed, vs syncing eagerly. \n\n#### Circuits\n\nBelow are the current circuits for the ZK light client.\n\nThe circuits will be improved going forward, as they serve only a \"one-shot\" command style for syncing/verification and no autonomous proving.\n\nSince the ZK client integrates with a Solidity Contract on chain and the circuit must have a statically aligned size, we have to minimise as much calldata as possible, opting to witness verification in the circuit rather than store information.\nOne example of this is the `Block Producers`, if we were to store this information unoptimised, we would have to store all hashable fields, growable to their max size `(account_id(64 bytes), public_key(64), stake(16))`, also grown to eth storage slots.\nSo thats: (64 + 64 + 32(eth storage slots are minimum 32)) = 160 bytes per validator per epoch. At the time of writing, that is 100 validators per epoch, making the resulting bytes just for validators 16000. \n\n##### Sync\n\nSyncs to the next `head`, either the last header of the next epoch or the next header in the current epoch.\n\nPublic inputs:\n- `trusted_header_hash`: This is the last header that was synced or the checkpoint header. We use this to query the header info and witness the header is valid, as well as to ensure the header was once synced.\n\nPublic Outputs:\n- `next_header_hash`: The header hash of the next header that has been synced in the protocol.\n\nProof generation time:\n\nImprovements:\n- Fast forward: The light client should sync arbitrarily many headers at a time. We can gather all the information and then sync in parallel, using boundary checks to ensure the joining of the parallel parts.\n- Autonomous sync\n- Lazy, aggregate proofs. The operational cost of sync light clients is intensely high. Quite often they do not need to be synced until a transaction needs to be verified. Since proving time is quite fast, we can introduce lazy syncing to the protocol.\n\nIn some cases, the light client would need to be synced eagerly. However, at most times the light client should be synced lazily and only when needed to mitigate operational costs.\n\n##### Verify\n\nVerifies a batch of transactions/receipts, this wraps the Merkle proof verification of multiple transactions in a parallelised circuit. \nThis allows us to witness the verification of arbitrary amounts of transactions and only pay for verification on Ethereum once, with the relay of the results for the transactions/receipts calldata being the most fees.\nWe are introducing an additional circuit to allow us to skip the relay of this information.\n\nPublic inputs:\n- `trusted_header_hash`: The last header that was synced. We can use this to also determine if we need to sync in this verification. And to query the header information.\n- `transaction_or_receipt_ids`: The transactions or receipts to be verified.\n\nPublic Outputs:\n- `transaction_or_receipt_results`: The IDs and the result of their verification \n\n### Crates\n\nHere we have the building blocks used by the protocol, std binary and the ZK implementation. This is the main building blocks that we use for the implementations. There is a great deal of overlap in their functionality:\n- calling rpc nodes\n- hashing\n- signature verification\n- encoding\n- the protocol itself\n\n## Metrics\n\nAll metrics are currently based on a consumer machine with the following specifications:\n\n- OS: NixOS 24.05.20240205.4b1aab2 (Uakari) x86_64\n- CPU: AMD Ryzen 9 7950X (32) @ 4.500GHz \n- RAM: 32GB @ 4800MHz DDR5\n\nCircuits:\n- Sync: ~38seconds\n- Verify_2x1: ~25s\n- Verify_128x4: ~12mins, linearly with batch size. No parallelisation. Roughly 22 seconds per batch.\n\nTo run the tests yourself:\n- `cargo nextest archive -r -p near-light-clientx --archive-file=nextest-archive.tar.zst --locked`\n- `RUST_LOG=debug cargo nextest run --no-capture --run-ignored ignored-only --archive-file nextest-archive.tar.zst -- sync_e2e verify_e2e_2x1 verify_e2e_128x4`\n\n\n[^1]: NEAR light client specification: [Near light client](https://nomicon.io/ChainSpec/LightClient)\n[^2]: Helios, ethereum light client: https://github.com/a16z/helios\n[^3]: Succinct's [plonky2 SDK](https://github.com/succinctlabs/succinctx) and [prover network](https://alpha.succinct.xyz/). \n\n## Contributions\n\nAfter laying out some of the functional requirements and some overall understanding, we'd love to invite many light client maintainers to contribute to the project. \nIf you have any questions, feel free to raise an issue. We are also working on ironing out the process so that it is as smooth as possible with appropriate guidelines.\n\n", "release_dates": ["2024-02-22T10:37:37Z"]}, {"name": "near-linkdrop", "description": "Contract to drop tokens via link", "language": "Rust", "license": null, "readme": "# LinkDrop contract\n\nLinkDrop contract allows any user to create a link that their friends can use to claim tokens even if they don't have an account yet.\n\nThe way it works:\n\nSender, that has NEAR:\n- Creates a new key pair `(pk1, privkey1)`.\n- Calls `linkdrop.send(pk1)` with attached balance of NEAR that they want to send.\n- Sends a link to any supported wallet app with `privkey1` as part of URL.\n\nReceiver, that doesn't have NEAR:\n- Receives link to the wallet with `privkey1`.\n- Wallet creates new key pair for this user (or they generate it via HSM) `(pk2, privkey2)`.\n- Enters the `new_account_id` receiver want for their new account.\n- Wallet creates a transaction to `linkdrop.create_account_and_claim(new_account_id, pk2)`.\n- Contract creates new account with `new_account_id` name and `pk2` as full access key and transfers NEAR that Sender sent.\n\nIf Receiver already has account (or Sender wants to get back the money):\n- Sign tx with `privkey1` to call `linkdrop.claim()`, which transfers money to signer's account.\n\n", "release_dates": []}, {"name": "near-lockup-helper-js", "description": "Javascript library to view lockup account information", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# near-lockup-helper\n\nJavascript library to view lockup account information\n\n# Setup\n\n```\n$ npm i near-lockup-helper\n```\n\n# For local development\n\n```\n$ npm install\n```\n```\n$ npm run build\n```\n```\n$ npm pack\n```\n\nAfter that you can install this packed library from another directory by\n\n```\nnpm install ./path-to-package/near-lockup-helper-1.0.0.tgz\n```\n", "release_dates": ["2022-05-02T12:30:16Z", "2022-04-21T14:01:46Z", "2022-02-22T14:48:48Z"]}, {"name": "near-memory-tracker", "description": "near-memory-tracker", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "Utilities developed to measure memory usage in projects with mixed Rust/C++ code\nwhile having minimizing performance/memory overhead.\n\n# Goals\n* Track memory usage/leaks in large Rust projects, where memory leak could\n  potencially practially everywhere: for example: application itself, any of hundreds\n  imported Rust libraries or even with liked C/C++ code.\n* Low performance overhead - existing tools like Valdrid can slow down program\n  by a factor of 25-50 times, using such approach would be impractical.\n* Low memory overhead - Adds extra 32 bytes per each memory allocation on heap.\n  While it's easy to add extra memory to a machine when needed, adding extra CPU cores will not help with applications limited by a single core performance.\n  This can be optimized if needed by either reducing header size or by\n  doing random sampling for small allocations.\n* Ability to dump memory while process is running without affecting it.\n\n# Requirements\n\n* Linux operating system - `dump` script uses linux proc filesystem to read\n  process information. This can be extended to other platform if needed in the\n  future.\n\n# Design\n\nRust allocator proxy:\nTracking Rust allocation is done by adding a proxy, which uses jemalloc and\nadd 32 bytes header to all allocations.\nSee https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html\n\nC allocator proxy:\nTracking C allocator is done in by overriding dynamic links to malloc/free/etc.\nThis can be overriden by providing an enviroment variable while running an\nexecutable `LD_PRELOAD=./mtrace.so path'.\n\n`dump` script:\n* Reads process memory mapping from `/proc/<PID>/smaps`.\n* It's able to identify which pages are present by reading from `/proc/<PID>/pagemap`.\n* It reads memory using `/proc/<PID>/pagemap`\n* Once memory is read, regions of memory allocated by Rust/C code can be\n  identified by looking for `MAGIC` keyword, which is part of the header.\n\nThe core tool is in `dump.cpp` file. It dumps the program memory and it prints\nmemory statistics.\n\n# Modules\n* near-rust-allocator-proxy inside `near-rust-allocator-proxy` folder\n* near-c-allocator-proxy `near-c-allocator-proxy.c` inside\n  `near-dump-analyzer` folder.\n* near-dump-analyzer `dump.cpp` inside `near-dump-analyzer` folder\n\n", "release_dates": []}, {"name": "near-microindexers", "description": null, "language": "Rust", "license": null, "readme": "# NEAR Microindexers\n\nAsync Postgres-compatible solution to load the data from NEAR blockchain.\nBased on [NEAR Lake Framework](https://github.com/near/near-lake-framework-rs).\n\n[Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) has some disadvantages that we wanted to fix.\nThat's why we've created smaller projects, independent mini-indexers:\n- `indexer-base` works with basic information about transactions, receipts;\n- `indexer-accounts` works with accounts and access_keys;\n- `indexer-balances` collects the info about native NEAR token balance changes (all the changes are validated);\n- `indexer-events` works with events produced by NEPs: FT, NFT (the events need to be validated separately).\n\n### What are the differences with Indexer For Explorer?\n\n- The data model changed a bit, naming changed;\n- We moved from `diesel` to `sqlx`, we prefer having lightweight ORM and write raw SQL queries;\n- Separate projects are easier to maintain;\n- The main difference is in the future: we are thinking where to go next if we decide to get rid of Postgres.\n\n### Can I create my own indexer?\n\nSure!\nFeel free to use this project as the example.\n\n## Linux installation guide\n\nYour `.env` file should be in the project root (`near-microindexers` folder) with the contents:\n```\nAWS_SECRET_ACCESS_KEY=...\nAWS_ACCESS_KEY_ID=...\nDATABASE_URL=...\nRPC_URL=...\nCHAIN_ID=mainnet\nINDEXER_ID=indexer-events-tip\nINDEXER_TYPE=indexer-events\nSTART_BLOCK_HEIGHT=30181671\n```\n\n- You need to have your own [AWS credentials](https://docs.near.org/tutorials/indexer/credentials) and pay for the S3 requests [around $20 per month to follow the tip of the network](https://github.com/near/near-lake-framework-rs#cost-estimates);\n- You need to create the DB where the data will be stored; you also need to apply the migrations manually.\n- RPC URL could be found [here](https://docs.near.org/api/rpc/providers)\n- CHAIN_ID could be `mainnet` or `testnet`\n- INDEXER_ID could be anything; when you restart your app, it will find the last tracked `block_height` by this id;\n- INDEXER_TYPE could be also anything, but I suggest you to choose between the folders listed in this repo;\n- START_BLOCK_HEIGHT could be any non-negative integer; if the process is restarted, we ignore this field;\n\n```bash\nsudo apt install git build-essential pkg-config libssl-dev tmux postgresql-client libpq-dev -y\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\ncargo install --version=0.5.13 sqlx-cli --features postgres\nulimit -n 30000\ncargo build --release\ncargo run --release\n```\n\n## Migrations\n\nUnfortunately, sqlx migrations do not work if you have several projects writing to the same DB.\nWe still use the migrations folder in each project, but we have to apply the changes manually.\n\n## Creating read-only PostgreSQL user\n\nWe highly recommend using a separate read-only user to access the data.\nIt helps you to avoid unexpected corruption of the indexed data.\n\nWe use `public` schema for all tables.\nBy default, new users have the possibility to create new tables/views/etc there.\nIf you want to restrict that, you have to revoke these rights:\n\n```sql\nREVOKE CREATE ON SCHEMA PUBLIC FROM PUBLIC;\nREVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA PUBLIC FROM PUBLIC;\nALTER DEFAULT PRIVILEGES IN SCHEMA PUBLIC GRANT SELECT ON TABLES TO PUBLIC;\n```\n\nAfter that, you could create read-only user in PostgreSQL:\n\n```sql\nCREATE ROLE readonly;\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public to readonly;\n-- Put here your limit or just ignore this command\nALTER ROLE readonly SET statement_timeout = '30s';\n\nCREATE USER explorer with login password 'password';\nGRANT readonly TO explorer;\n```\n\n```bash\n$ PGPASSWORD=\"password\" psql -h 127.0.0.1 -U explorer databasename\n```\n\n### Contribution Guide\n\nPlease refer to this [guide](https://github.com/near/near-indexer-for-explorer/blob/master/CONTRIBUTING.md) before submitting PRs to this repo\n\n## Why do we need `indexer-balances`? Why `account_changes` table is not enough?\n\n1. `account_changes` has only the absolute value for the balance, while we want to see the delta;\n2. `account_changes` does not have involved account_id;\n3. We'll stop supporting `account_changes` [soon](https://github.com/near/near-indexer-for-explorer/discussions/351).\n\n`indexer-balances` implementation does non-trivial work with extracting the balance-changing events and storing them in the correct order.\n\nThe ordering is taken from the [nearcore implementation](https://github.com/near/nearcore/blob/master/runtime/runtime/src/lib.rs#L1136):\n1. validators account update\n2. process transactions\n3. process receipts\n\nUsing [Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) terminology, we merge `account_changes` and `action_receipt_actions` by `receipt_id`.\n\nWe have the natural order in these 2 arrays.\n1. If `receipt_id` is stored in both arrays -> merge them to one line in the resulting table.\n2. If `receipt_id` from `action_receipt_actions` has no pair in `account_changes` -> collect all the possible info from `action_receipt_actions` and put the line in the resulting table.\n3. If the line in `account_changes` has no `receipt_id`, we need to check whether it changed someone's balance. If the balance was changed -> collect all the possible info from `account_changes` and put the line in the resulting table.\n\nWhile merging, we can meet the situation #2 and #3 at the same point of time.\nWe need to find the right order of storing such cases.  \nI feel these 2 situations never affect each other, so any order will work fine.\nI decided to put `account_changes` data first (just to be consistent)\n\n## Why do we need `indexer-events`? Why `assets__*` tables are not enough?\n\n`assets__non_fungible_token_events`, `assets__fungible_token_events` do not have the sorting column.\nIn the current solution, we've added artificial `event_index` column.  \nMoreover, we'll stop supporting `assets__fungible_token_events` [soon](https://github.com/near/near-indexer-for-explorer/discussions/351).\n\nThe new `fungible_token_events` table stores the data in the format of affected/involved account_id, that simplifies filtering by affected `account_id`.  \n`fungible_token_events` still does not have `absolute_value` column, so you have to collect it from RPC if needed.\n\n### What if my contract does not produce events?\n\nPlease go and update your contract with our new [SDK](https://github.com/near/near-sdk-rs).\n\nIf it's important for you to collect all the previous history as well, you need to make the contribution and implement your own legacy handler.  \nYou can use [existing handlers](src/db_adapters/coin/legacy) as the example, [wrap_near](src/db_adapters/coin/legacy/wrap_near.rs) may be a good starting point.\n\n### What do I need to know about `indexer-accounts`?\n\nIndexer Accounts is the only indexer that modifies the existing data.  \nWhile other indexers are append-only, Indexer Accounts updates the existing records with the deletion info.\n\n`accounts` table in [Indexer For Explorer](https://github.com/near/near-indexer-for-explorer) stored only the first creation and last deletion of the account.  \nThis solution stores all the creations/deletions, so accounts may appear in the table more than once.\n\n### What is the current state of Microindexers?\n\nWe use `indexer-balances` in production; we use FT part of `indexer-events` in production as well.  \nThe other pieces are frozen for now, they need to be upgraded and reviewed before any production usage.\n\n### What is \"Balance Mode\" for `indexer-balances`\n\n`indexer-balances` requires the Near balance prior to the current block in order to calculate, and store, the delta. Previously, this value was fetched directly from JSON RPC, but as transaction volume increased, this method became a bottleneck within the application. A more performant approach is to fetch the previously stored balance from the DB, but this also comes with drawbacks. In summary:\n- `DB` - Performant, but potentially more error prone as incorrect deltas propagate to deltas following\n- `RPC` - Less performant, but also less error prone as the deltas rely on actual on-chain balances\n\nAdditionally, as `DB` relies on existing data, it can not be started from any arbitrary block, it requires the all blocks prior have already been indexed. The limitation does not exist for `RPC`.\n\nThe `--balance-mode` flag allows switching between the described methods so that the trade-offs can be more effectively managed.\n", "release_dates": []}, {"name": "near-multi-key", "description": "allow signing with multiple keypairs to form one composite signature", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# NEAR Multi Key\n\nCreate signatures from multiple NEAR keys (ED25519)\n\n## TODO\n\n1. Wrap low level parts of signAndSendTransaction to make usage easier\n2. Example with near-api-js", "release_dates": []}, {"name": "near-one-project-tracking", "description": "A repository for tracking work items that NEAR One is working on.", "language": null, "license": null, "readme": "# NEAR One project tracking\n\nThis repository will be used to track overall work items that NEAR One will work on.  The issues created here will be listed on [this board](https://github.com/orgs/near/projects/124/views/1).\n", "release_dates": []}, {"name": "near-proof-of-attendance", "description": "Proof-of-attendance NFT platform on NEAR", "language": "TypeScript", "license": null, "readme": "EventCred | Proof of Attendance | Standard NEP171\n==================\n\nThis [React] app was initialized with [create-near-app]\n\n\nQuick Start\n===========\n\nTo run this project locally:\n\n1. Prerequisites: Make sure you've installed [Node.js] \u2265 16\n2. Be sure to set up your envs, see the envs. example file in the root of the project.\n3. Install dependencies: `yarn install`\n4. Run the UI: `yarn dev:client` (see `package.json` for a\n   full list of `scripts` you can run with `yarn`)\n5. Run the local development server in charge serving the on-chain request (link to the repo would be here)\n\nGo ahead and play with the app and the code. As you make code changes, the app will automatically reload.\n\nExploring The Code\n==================\n\n1. The \"backend\" code lives in the `/contract` folder. See the README there for\n   more info.\n2. Add your env variables, check the .env example files for reference.\n3. The frontend code lives in the `/src` folder. `/src/index.html` is a great\n   place to start exploring. Note that it loads in `/src/index.js`, where you\n   can learn how the frontend connects to the NEAR blockchain.\n4. Tests: there are different kinds of tests for the frontend and the smart\n   contract. See `contract/README` for info about how it's tested. The frontend\n   code gets tested with [jest]. You can run both of these at once with `yarn\n   run test`.\n\n\nDeploy\n======\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.\n\nWhen you're ready to deploy to mainnet [follow this guide](https://docs.near.org/develop/deploy).\n\nStep 0: Install near-cli (optional)\n-------------------------------------\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:\n\n    yarn install --global near-cli\n\nOr, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`\n\nEnsure that it's installed with `near --version` (or `npx near --version`)\n\n\nStep 1: Create an account for the contract\n------------------------------------------\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `proof-of-attendance.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `proof-of-attendance.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account proof-of-attendance.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\n\nStep 2: set contract name in code\n---------------------------------\n\nModify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.\n\n    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'proof-of-attendance.YOUR-NAME.testnet'\n\n\nStep 3: deploy!\n---------------\n\nEnvironment Variables\nDeploy to testnet: `set NEAR_ENV=testnet`\nDeploy to mainnet: `set NEAR_ENV=mainnet`\n\nOne command:\n\n    yarn deploy\n\nAs you can see in `package.json`, this does two things:\n\n1. builds & deploys smart contract to NEAR TestNet\n2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [React]: https://reactjs.org/\n  [create-near-app]: https://github.com/near/create-near-app\n  [Node.js]: https://nodejs.org/en/download/package-manager/\n  [jest]: https://jestjs.io/\n  [NEAR accounts]: https://docs.near.org/concepts/basics/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n  [near-cli]: https://github.com/near/near-cli\n  [gh-pages]: https://github.com/tschaub/gh-pages\n", "release_dates": []}, {"name": "near-proof-of-attendance-backend", "description": null, "language": "TypeScript", "license": null, "readme": "EventCred | Proof of Attendance | Standard NEP171 | Backend\n\nQuick Start\n===========\n\nTo run this project locally:\n\n1. Prerequisites: Make sure you've installed [Node.js] \u2265 16\n2. Install dependencies: `yarn install`\n3. Run the local development server: `yarn dev` (see `package.json` for a\n   full list of `scripts` you can run with `yarn`). Or `yarn start` for production\n\nNow you'll have a local development environment backed by the NEAR TestNet!\n\nExploring The Code\n==================\nThe different endpoints live in /src/controllers. And they are:\n\n1. /fleek/upload for ips storage.\n2. /badges/:id for badge query.\n3. /mint to mint the badges.\n4. /test for health check on the server.\n\nOver src/services/near.ts is where al the logic for interfacing with NEAR lives. \n\nFor testing you can run the command `yarn test` to run the test suite. The files are in src/__tests__.", "release_dates": []}, {"name": "near-public-lakehouse", "description": "NEAR Public Lakehouse", "language": "Python", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# near-public-lakehouse\n\nNEAR Public Lakehouse\n\nThis repository contains the source code for ingesting NEAR Protocol data stored as JSON files in AWS S3 by [near-lake-indexer](https://github.com/near/near-lake-indexer). The data is loaded in a streaming fashion using Databricks Autoloader into raw/bronze tables, and transformed with Databricks Delta Live Tables streaming jobs into cleaned/enriched/silver tables.\n\nThe silver tables are also copied into the GCP BigQuery Public Dataset.\n\n# Intro\nBlockchain data indexing in NEAR Public Lakehouse is for anyone who wants to make sense of blockchain data. This includes:\n- **Users**: create queries to track NEAR assets, monitor transactions, or analyze onchain events at massive scale.\n- **Researchers**: use indexed data for data science tasks including onchain activities, identifying trends, or feed AI/ML pipelines for predective analysis.\n- **Startups**: can use NEAR's indexed data for deep insights on user engagement, smart contract utilization, or insights across tokens and NFT adoption.\n\nBenefits:\n- **NEAR instant insights**: Historical onchain data queried at scale.\n- **Cost-effective**: eliminate the need to store and process bulk NEAR protocol data; query as little or as much data as preferred.\n- **Easy to use**: no prior experience with blockchain technology required; bring a general knowledge of SQL to unlock insights.\n\n# Architecture\n\n![Architecture](./docs/Architecture.png \"Architecture\")\nNote: [Databricks Medallion Architecture](https://www.databricks.com/glossary/medallion-architecture)\n\n# What is NEAR Protocol?\n\nNEAR is a user-friendly, carbon-neutral blockchain, built from the ground up to be performant, secure, and infinitely scalable. It's a layer one, sharded, proof-of-stake blockchain designed with usability in mind. In simple terms, NEAR is blockchain for everyone.\n\n# Data Available\n\nThe current data that we are providing was inspired by [near-indexer-for-explorer](https://github.com/near/near-indexer-for-explorer/).\nWe plan to improve the data available in the NEAR Public Lakehouse making it easier to consume by denormalizing some tables.\n\nThe tables available in the NEAR Public Lakehouse are:\n\n- **blocks**: A structure that represents an entire block in the NEAR blockchain. Block is the main entity in NEAR Protocol blockchain. Blocks are produced in NEAR Protocol every second.\n- **chunks**: A structure that represents a chunk in the NEAR blockchain. Chunk of a Block is a part of a Block from a Shard. The collection of Chunks of the Block forms the NEAR Protocol Block. Chunk contains all the structures that make the Block: Transactions, Receipts, and Chunk Header.\n- **transactions**: Transaction is the main way of interraction between a user and a blockchain. Transaction contains: Signer account ID, Receiver account ID, and Actions.\n- **execution_outcomes**: Execution outcome is the result of execution of Transaction or Receipt. In the result of the Transaction execution will always be a Receipt.\n- **receipt_details**: All cross-contract (we assume that each account lives in its own shard) communication in Near happens through Receipts. Receipts are stateful in a sense that they serve not only as messages between accounts but also can be stored in the account storage to await DataReceipts. Each receipt has a predecessor_id (who sent it) and receiver_id the current account.\n- **receipt_origin**: Tracks the transaction that originated the receipt.\n- **receipt_actions**: Action Receipt represents a request to apply actions on the receiver_id side. It could be derived as a result of a Transaction execution or another ACTION Receipt processing. Action kind can be: ADD_KEY, CREATE_ACCOUNT, DELEGATE_ACTION, DELETE_ACCOUNT, DELETE_KEY, DEPLOY_CONTRACT, FUNCTION_CALL, STAKE, TRANSFER.\n- **receipts (view)**: It's recommended to select only the columns and partitions (block_date) needed to avoid unnecessary query costs. This view join the receipt details, the transaction that originated the receipt and the receipt execution outcome.\n- **account_changes**: Each account has an associated state where it stores its metadata and all the contract-related data (contract's code + storage).\n\n# Examples\n\n- Queries: How many unique users do I have for my smart contract per day?\n\n```sql\nSELECT\n  r.block_date collected_for_day,\n  COUNT(DISTINCT r.transaction_signer_account_id)\nFROM `bigquery-public-data.crypto_near_mainnet_us.receipt_actions` ra\n  INNER JOIN `bigquery-public-data.crypto_near_mainnet_us.receipts` r ON r.receipt_id = ra.receipt_id\nWHERE ra.action_kind = 'FUNCTION_CALL'\n  AND ra.receipt_receiver_account_id = 'near.social' -- change to your contract\nGROUP BY 1\nORDER BY 1 DESC;\n```\n\n# How to get started?\n\n1. Login into your [Google Cloud Account](https://console.cloud.google.com/).\n2. Open the [NEAR Protocol BigQuery Public Dataset](https://console.cloud.google.com/marketplace/product/bigquery-public-data/crypto-near-mainnet).\n3. Click in the [VIEW DATASET](https://console.cloud.google.com/bigquery?p=bigquery-public-data&d=crypto_near_mainnet_us&page=dataset) button.\n4. Click in the \"+\" to create a new tab and write your query, click in the \"RUN\" button, and check the \"Query results\" below the query.\n5. Done :)\n\n# How much it costs?\n\n- NEAR pays for the storage and doesn't charge you to use the public dataset. To learn more about BigQuery public datasets check this [page](https://cloud.google.com/bigquery/public-data).\n- Google GCP charges for the queries that you perform on the data. For example, in today's price \"Sep 1st, 2023\" the On-demand (per TB) query pricing is $6.25 per TB where the first 1 TB per month is free. Please check the official Google's page for detailed pricing info, options, and best practices [here](https://cloud.google.com/bigquery/pricing#analysis_pricing_models).\n\n**Note:** You can check how much data it will query before running it in the BigQuery console UI. Again, since BigQuery uses a columnar data structure and partitions, it's recommended to select only the columns and partitions (block_date) needed to avoid unnecessary query costs.\n\n![Query Costs](./docs/BQ_Query_Cost.png \"BQ Query Costs\")\n\n# References\n\n- https://cloud.google.com/bigquery/public-data\n- https://cloud.google.com/bigquery/pricing#analysis_pricing_models\n\n- https://docs.gcp.databricks.com/ingestion/auto-loader/index.html\n- https://www.databricks.com/product/delta-live-tables\n\n- https://docs.near.org/concepts/basics/protocol\n- https://docs.near.org/concepts/data-flow/near-data-flow\n- https://near-indexers.io/docs/data-flow-and-structures/structures/transaction#actionview\n- https://nomicon.io/RuntimeSpec/Receipts\n- https://nomicon.io/\n- https://github.com/near/near-lake-indexer\n- https://github.com/near/near-indexer-for-explorer/\n", "release_dates": []}, {"name": "near-queue", "description": null, "language": null, "license": null, "readme": "# near-queue\n\nExperimental NEAR contract - think about combination of Calendly and Wallet.\n\nWhere you can export the 'time slots' when you're available, and people can reserve/bid to meet you at this slot.\n\nThis contract is also deployed using NEAR web4 server, so you can check it out on https://queue.testnet.page/?queue_id=mm-near.testnet\n\n(and if you have a testnet account - you can create & see your slots on https://queue.testnet.page/?queue_id=YOUR_TESTNET_ID)\n", "release_dates": []}, {"name": "near-redpacket", "description": "NEAR Redpacket based on NEAR Linkdrop", "language": "CSS", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<p>\n<img src=\"https://nearprotocol.com/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311\" width=\"240\">\n</p>\n\n## Linkdrop example with contract account deployment\n\n## About the app\nThe app allows you to give people NEAR accounts that are prefunded with NEAR tokens. This is better than just a vanilla Linkdrop because it allows you to queue up multiple of them and it has a nice UI for the recipient.\n\nThe app does this by sending funds to the Linkdrop contract which will create \"Drops\". You will have a list of these in local storage and you can remove them at any time. This claims the funds back to your current account.\n\n**NOTE:** If you follow the wallet link of a drop, be warned it will not create accounts because your contract is not eligible to create the `.testnet` domain accounts.\n\nInstead, click \"Share Drop Link\" and visit your own drop.\n\nYou will now see a *URL Drop* heading with some information about the drop. This is what another user would see if they used your URL.\n\nYou can either:\n1. claim the funds\n2. create an account\n3. create a contract account (deploys a locked multisig account)\n\n## Contract\nFor more details on the linkdrop contract:\nhttps://github.com/near/near-linkdrop\n\n## Quickstart\n```\nyarn && yarn dev\n```\n\n## Deploying your own contract\nIt's recommended you create a sub account to handle your contract deployments:\n```\nnear login\nnear create_account [account_id] --masterAccount [your_account_id] --initialBalance [1-5 N]\n```\nNow update config.js and set:\n```\nconst CONTRACT_NAME = [account_id]\n```\n\n## The Linkdrop contract and calling it from JS\n\nAll calls to the contract can be found in `src/Drops.js`.\n\nThe original linkdrop contract is here:\nhttps://github.com/nearprotocol/near-linkdrop\n\nAn additional function is added to the regular linkdrop contract:\n```\npub fn create_limited_contract_account\n```\nThis takes 3 additional arguments over the existing `pub fn create_account_and_claim` function.\nIn order to successfully invoke from JS you must pass in the following:\n```\nnew_account_id: string,\nnew_public_key: string,\nallowance: string,\ncontract_bytes: [...new Uint8Array(contract_bytes)],\nmethod_names: [...new Uint8Array(new TextEncoder().encode(`\n    methods,account,is_limited_too_call\n`))]\n```\n\n##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x \n\n1. [Node.js](https://nodejs.org/en/download/package-manager/)\n2. near-shell\n```\nnpm i -g near-shell\n```\n### To run on NEAR testnet\n\n```bash\nyarn && yarn dev\n```\n", "release_dates": []}, {"name": "near-releases", "description": "Gather releases and merged PRs from an array of repos.", "language": "JavaScript", "license": null, "readme": "# NEAR Releases\n\n- Fetch Releases & PRs for NEAR Dev repositories\n- Generate markdown reports\n- Email results\n\n## Requirements\n\n- [Node.js](https://nodejs.org)\n- [Github API Token](https://github.com/settings/tokens)\n\n## Setup\n\n1) Install dependencies\n\n```bash\nnpm i  \n```\n\n2) Create an `.env` file and add your [Github API Token](https://github.com/settings/tokens)\n\n```bash\nGITHUB_TOKEN='YOUR_GITHUB_API_TOKEN'\n```\n\n3) Add repositories to `./data/repos.js`\n\n```bash\nexports.repos = [\n  { owner: 'octocat', repo: 'Hello-World' },\n  { owner: 'vercel', repo: 'next.js' },\n];\n\n```\n\n## Run\n\n```bash\nnode app.mjs\n```\n", "release_dates": []}, {"name": "near-sdk-abi", "description": "ABI utilities used for generating Rust SDK cross-contract calls", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<!-- markdownlint-disable MD014 -->\n\n<div align=\"center\">\n\n  <h1><code>near-sdk-abi</code></h1>\n\n  <p>\n    <strong>Utility library for making typesafe cross-contract calls with <a href=\"https://github.com/near/near-sdk-rs\">near-sdk-rs</a> smart contracts</strong>\n  </p>\n\n  <p>\n    <a href=\"https://github.com/near/near-sdk-abi/actions/workflows/test.yml?query=branch%3Amain\"><img src=\"https://github.com/near/near-sdk-abi/actions/workflows/test.yml/badge.svg\" alt=\"Github CI Build\" /></a>\n    <a href=\"https://crates.io/crates/near-sdk-abi\"><img src=\"https://img.shields.io/crates/v/near-sdk-abi.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/near-sdk-abi\"><img src=\"https://img.shields.io/crates/d/near-sdk-abi.svg?style=flat-square\" alt=\"Downloads\" /></a>\n  </p>\n\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Usage\n\nThis crate supports two sets of APIs for users with different needs:\n* **Macro-driven**. Gives you a cross-contract binding in a single macro invocation.\n* **Generation-based**. Gives you more control and is transparent about what code you end up using, but requires more setup.\n\n### Macro API\n\nCheckout the [`delegator-macro`](https://github.com/near/near-sdk-abi/tree/main/examples/delegator-macro) example for a standalone smart contract using macro API to make a cross-contract call.\n\nTo generate a trait named `ContractName` with ext interface named `ext_name` based on ABI located at `path/to/abi.json` (relative to the current file's directory):\n\n```rust\nnear_abi_ext! { mod ext_name trait ContractName for \"path/to/abi.json\" }\n```\n\nNow, assuming you have an `ext_account_id: near_sdk::AccountId` representing the contract account id, you can make a cross-contract call like this:\n\n```rust\nlet promise = ext_adder::ext(ext_account_id).my_method_name(arg1, arg2);\n```\n\n### Generation API\n\nCheckout the [`delegator-generation`](https://github.com/near/near-sdk-abi/tree/main/examples/delegator-generation) example for a standalone project using generation API to make a cross-contract call.\n\nFirst, we need our package to have a `build.rs` file that runs the generation step. The following snippet will generate the contract trait in `abi.rs` under `path/to/out/dir`:\n\n```rust\nfn main() -> anyhow::Result<()> {\n    near_sdk_abi::Generator::new(\"path/to/out/dir\".into())\n        .file(near_sdk_abi::AbiFile::new(\"path/to/abi.json\"))\n        .generate()?;\n    Ok(())\n}\n```\n\nThe resulting file, however, is not included in your source set by itself. You have to include it manually; the recommended way is to create a mod with a custom path:\n\n```rust\n#[path = \"path/to/out/dir/abi.rs\"]\nmod mymod;\n```\n\nNow, assuming you have an `ext_account_id: near_sdk::AccountId` representing the contract account id, you can make a cross-contract call like this:\n\n```rust\nlet promise = ext_adder::ext(ext_account_id).my_method_name(arg1, arg2);\n```\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as below, without any additional terms or conditions.\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n", "release_dates": ["2023-01-16T10:31:05Z"]}, {"name": "near-sdk-as", "description": "Tools for building NEAR smart contracts in AssemblyScript", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# near-sdk-as\n\nCollection of packages used in developing NEAR smart contracts in AssemblyScript including:\n\n\n- [`runtime library`](https://github.com/near/near-sdk-as/tree/master/sdk-core) - AssemblyScript near runtime library\n- [`bindgen`](https://github.com/near/near-sdk-as/tree/master/bindgen) - AssemblyScript transformer that adds the bindings needed to (de)serialize input and outputs.\n- [`near-mock-vm`](https://github.com/near/near-sdk-as/tree/master/near-mock-vm) - Core of the NEAR VM compiled to WebAssembly used for running unit tests.\n- [`@as-pect/cli`](https://github.com/jtenner/as-pect) - AssemblyScript testing framework similar to jest.\n\n## To Install\n\n```sh\nyarn add -D near-sdk-as\n```\n\n## Project Setup\n\nTo set up a AS project to compile with the sdk add the following `asconfig.json` file to the root:\n\n```json\n{\n  \"extends\": \"near-sdk-as/asconfig.json\"\n}\n```\n\nThen if your main file is `assembly/index.ts`, then the project can be build with [`asbuild`](https://github.com/willemneal/asbuild):\n\n```sh\nyarn asb\n```\n\nwill create a release build and place it `./build/release/<name-in-package.json>.wasm`\n\n```sh\nyarn asb --target debug\n```\n\nwill create a debug build and place it in `./build/debug/..`\n\n## Testing\n\n### Unit Testing\n\nSee the [sdk's as-pect tests for an example](./sdk/assembly/__tests__) of creating unit tests.  Must be ending in `.spec.ts` in a `assembly/__tests__`.\n\n## License\n\n`near-sdk-as` is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\n\nSee [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2021-05-20T19:57:39Z", "2021-02-08T22:00:40Z", "2020-10-26T17:37:14Z", "2020-09-02T18:41:37Z", "2020-08-20T20:40:37Z", "2020-08-12T13:45:18Z", "2020-08-06T18:03:07Z", "2020-08-05T18:47:20Z", "2020-08-04T14:32:35Z", "2020-07-10T18:26:49Z", "2020-06-12T14:20:46Z", "2020-06-11T16:56:27Z", "2020-06-05T13:32:44Z", "2020-05-15T21:10:01Z", "2020-05-05T16:49:55Z", "2020-05-04T02:29:46Z", "2020-05-04T02:25:48Z", "2020-05-03T20:40:30Z", "2020-05-02T19:38:45Z", "2020-05-01T22:25:31Z", "2020-05-01T21:24:43Z", "2020-05-01T20:47:36Z", "2020-05-01T20:14:42Z", "2020-05-01T19:35:38Z", "2020-05-01T19:16:10Z", "2020-05-01T18:34:12Z", "2020-05-01T22:36:56Z", "2020-05-01T18:34:56Z", "2020-04-29T22:03:09Z", "2020-04-28T20:37:46Z"]}, {"name": "near-sdk-contract-tools", "description": "Helpful functions and macros for developing smart contracts on NEAR Protocol.", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# near-sdk-contract-tools\n\n## NFT\n\n```diff\nuse near_sdk::{\n    borsh::{self, BorshDeserialize, BorshSerialize},\n    near_bindgen, PanicOnDefault,\n};\n+ use near_sdk_contract_tools::nft::*;\n\n#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault)]\n+ #[derive(NonFungibleToken)]\n#[near_bindgen]\npub struct MyNftContract {}\n\n#[near_bindgen]\nimpl MyNftContract {\n    #[init]\n    pub fn new() -> Self {\n        let mut contract = Self {};\n\n+         contract.set_contract_metadata(ContractMetadata::new(\n+             \"My NFT\".to_string(),\n+             \"MNFT\".to_string(),\n+             None,\n+         ));\n\n        contract\n    }\n}\n```\n\n## FT\n\n```diff\nuse near_sdk::{\n    borsh::{self, BorshDeserialize, BorshSerialize},\n    near_bindgen, PanicOnDefault,\n};\n+ use near_sdk_contract_tools::ft::*;\n\n#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault)]\n+ #[derive(FungibleToken)]\n#[near_bindgen]\npub struct MyFtContract {}\n\n#[near_bindgen]\nimpl MyFtContract {\n    #[init]\n    pub fn new() -> Self {\n        let mut contract = Self {};\n\n+         contract.set_metadata(&FungibleTokenMetadata::new(\n+             \"My Fungible Token\".into(),\n+             \"MYFT\".into(),\n+             24,\n+         ));\n\n        contract\n    }\n}\n```\n\n## What is it?\n\nThis package is a collection of common tools and patterns in NEAR smart contract development:\n\n- Storage fee management.\n- Escrow pattern and derive macro.\n- Owner pattern and derive macro.\n- Pause pattern and derive macro.\n- Role-based access control.\n- Derive macros for NEP standards:\n  - [NEP-141][nep141] (fungible token), extension [NEP-148][nep148].\n  - [NEP-145][nep145] (storage management), and integrations for the fungible token and non-fungible token standards.\n  - [NEP-171][nep171] (non-fungible token), extensions [NEP-177][nep177], [NEP-178][nep178], [NEP-181][nep181].\n  - [NEP-297][nep297] (events).\n\nNot to be confused with [`near-contract-standards`](https://crates.io/crates/near-contract-standards), which contains official implementations of standardized NEPs. This crate is intended to be a complement to `near-contract-standards`.\n\nYou can think of this collection of common tools and patterns (mostly in the form of [derive macros](https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros)) as a sort of [OpenZeppelin](https://docs.openzeppelin.com/contracts/4.x/) for NEAR.\n\nPro tip: Use the [contract wizard](https://near.org/contractwizard.near/widget/ContractWizardUI) to generate starter code for your next project.\n\n## Installation\n\n```bash\ncargo add near-sdk-contract-tools\n```\n\n## Examples\n\nSee also: [the full integration tests](tests/macros/mod.rs).\n\n### Owner\n\n```rust\nuse near_sdk::{near_bindgen, AccountId};\nuse near_sdk_contract_tools::{owner::Owner, Owner};\n\n#[derive(Owner)]\n#[near_bindgen]\nstruct Contract {\n    // ...\n}\n\n#[near_bindgen]\nimpl Contract {\n    #[init]\n    pub fn new(owner_id: AccountId) -> Self {\n        let mut contract = Self {\n            // ...\n        };\n\n        Owner::init(&mut contract, &owner_id);\n\n        contract\n    }\n\n    pub fn owner_only(&self) {\n        Self::require_owner();\n\n        // ...\n    }\n}\n```\n\nThe `Owner` derive macro exposes the following methods to the blockchain:\n\n```rust, ignore\nfn own_get_owner(&self) -> Option<AccountId>;\nfn own_get_proposed_owner(&self) -> Option<AccountId>;\nfn own_renounce_owner(&mut self);\nfn own_propose_owner(&mut self, account_id: Option<AccountId>);\nfn own_accept_owner(&mut self);\n```\n\n### Events\n\nThe `#[event]` macro can be applied to structs or enums.\n\n```rust\nuse near_sdk_contract_tools::{event, standard::nep297::Event};\n\n#[event(standard = \"nft\", version = \"1.0.0\")]\npub struct MintEvent {\n    pub owner_id: String,\n    pub token_id: String,\n}\n\nlet e = MintEvent {\n    owner_id: \"account\".to_string(),\n    token_id: \"token_1\".to_string(),\n};\n\n// Emits the event to the blockchain\ne.emit();\n```\n\n### Fungible Token\n\nTo create a contract that is compatible with the [NEP-141][nep141], [NEP-145][nep145], and [NEP-148][nep148] standards, that emits standard-compliant ([NEP-297][nep297]) events.\n\n```rust\nuse near_sdk_contract_tools::ft::*;\nuse near_sdk::near_bindgen;\n\n#[derive(FungibleToken)]\n#[near_bindgen]\nstruct MyFt {}\n\n#[near_bindgen]\nimpl MyFt {\n    #[init]\n    pub fn new() -> Self {\n        let mut contract = Self {};\n\n        contract.set_metadata(&FungibleTokenMetadata::new(\n            \"My Fungible Token\".to_string(),\n            \"MYFT\".to_string(),\n            24,\n        ));\n\n        contract\n    }\n}\n```\n\nStandalone macros for each individual standard also exist.\n\n### Non-fungible Token\n\nUse the `NonFungibleToken` derive macro to implement [NEP-145][nep145], [NEP-171][nep171], [NEP-177][nep177], [NEP-178][nep178], and [NEP-181][nep181], with [NEP-297][nep297] events.\n\n```rust\nuse near_sdk::{\n    borsh::{self, BorshSerialize, BorshDeserialize},\n    PanicOnDefault,\n    near_bindgen,\n};\nuse near_sdk_contract_tools::nft::*;\n\n#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault, NonFungibleToken)]\n#[near_bindgen]\npub struct MyNft {}\n```\n\n### Macro Combinations\n\nOne may wish to combine the features of multiple macros in one contract. All of the macros are written such that they will work in a standalone manner, so this should largely work without issue. However, sometimes it may be desirable for the macros to work in _combination_ with each other. For example, to make a fungible token pausable, use the fungible token hooks to require that a contract be unpaused before making a token transfer:\n\n```rust\nuse near_sdk_contract_tools::{\n    ft::*,\n    pause::{*, hooks::PausableHook},\n    Pause,\n};\nuse near_sdk::{\n    borsh::{self, BorshSerialize, BorshDeserialize},\n    PanicOnDefault,\n    near_bindgen,\n};\n\n#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault, FungibleToken, Pause)]\n#[fungible_token(all_hooks = \"PausableHook\")]\n#[near_bindgen]\nstruct Contract {}\n```\n\n### Custom Crates\n\nIf you are a library developer, have modified a crate that one of the `near-sdk-contract-tools` macros uses (like `serde` or `near-sdk`), or are otherwise using a crate under a different name, you can specify crate names in macros like so:\n\n```rust, ignore\n#[event(\n    // ...\n    crate = \"near_sdk_contract_tools\",\n    macros = \"near_sdk_contract_tools_macros\",\n    serde = \"serde\",\n)]\n// ...\n\n#[derive(Owner)]\n#[owner(\n    // ...\n    near_sdk = \"near_sdk\",\n)]\n```\n\n## Other Tips\n\n### [Internal vs. External Methods](https://youtu.be/kJzes_UP5j0?t=2172)\n\nInternal methods are not available to be callable via the blockchain. External ones are public and can be called by other contracts.\n\n### [Pull pattern](https://youtu.be/kJzes_UP5j0?t=2213)\n\nProposing ownership (rather than transferring directly) is a generally good practice because it prevents you from accidentally transferring ownership to an account that nobody has access to, bricking the contract.\n\n### [Expand](https://youtu.be/kJzes_UP5j0?t=1790)\n\n[`cargo expand`](https://crates.io/crates/cargo-expand) will generate one huge Rust file with all of the macros have been processed:\n\n```text\ncargo install cargo-expand\ncargo expand > expanded.rs\n```\n\n### [Slots](https://youtu.be/kJzes_UP5j0?t=2527)\n\nSee [`src/slot.rs`](src/slot.rs). Slots are thin wrappers over a storage key.\n\n### [`assert_one_yocto()`](https://youtu.be/kJzes_UP5j0?t=2989)\n\n`near_sdk::assert_one_yocto()` is a function that requires a full access key (by requiring a deposit of one yoctonear, the smallest possible unit of NEAR).\n\nIf a user connects their NEAR account to a dapp, the dapp will still not be able to call functions that call `assert_one_yocto()`, since function call access keys are not allowed to transfer native tokens. These function will require a signature from a full access key, usually involving a confirmation screen in the user's wallet.\n\n## Contributing\n\n### Setup\n\nRun `git config core.hooksPath hooks/` to set up commit hooks.\n\n### Build and test\n\nInstall `cargo-make` if it is not installed already:\n\n```text\ncargo install cargo-make cargo-nextest\n```\n\nRun tests:\n\n```text\ncargo nextest run\ncargo test --doc\ncd workspaces-tests\ncargo make nextest\n```\n\n## Audit\n\nVersion 1.0.0 of this library has been [audited](./documents/NEAR%20Contract%20Tools%20-%20Final%20-%2005.05.2023.pdf) by [Kudelski Security](https://www.kudelskisecurity.com/). (May 2023)\n\n## Authors\n\n- Jacob Lindahl [@sudo_build](https://twitter.com/sudo_build)\n\n---\n\n(Formerly known as [`near-contract-tools`](https://crates.io/crates/near-contract-tools).)\n\n[nep145]: https://nomicon.io/Standards/StorageManagement\n[nep141]: https://nomicon.io/Standards/Tokens/FungibleToken/Core\n[nep148]: https://nomicon.io/Standards/Tokens/FungibleToken/Metadata\n[nep171]: https://nomicon.io/Standards/NonFungibleToken/NonFungibleToken\n[nep177]: https://nomicon.io/Standards/Tokens/NonFungibleToken/Metadata\n[nep178]: https://nomicon.io/Standards/Tokens/NonFungibleToken/ApprovalManagement\n[nep181]: https://nomicon.io/Standards/Tokens/NonFungibleToken/Enumeration\n[nep297]: https://nomicon.io/Standards/EventsFormat\n", "release_dates": ["2023-11-06T16:27:17Z", "2023-10-30T13:38:12Z", "2023-10-26T18:47:02Z", "2023-09-14T08:58:11Z", "2023-06-27T08:45:17Z", "2023-06-27T08:24:59Z", "2022-12-16T18:56:38Z", "2022-11-19T01:30:15Z", "2022-11-15T12:44:48Z", "2022-09-22T09:36:44Z", "2022-09-20T16:22:13Z", "2022-08-11T02:06:00Z", "2022-07-11T18:13:26Z"]}, {"name": "near-sdk-gr", "description": "Grain library for writing NEAR contracts", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "near-sdk-js", "description": "Tools for building NEAR smart contracts in JavaScript", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR JavaScript SDK\n\n<p>\n  <a href=\"https://www.npmjs.com/package/near-sdk-js\" target=\"_blank\">\n    <img alt=\"Version\" src=\"https://img.shields.io/npm/v/near-sdk-js.svg\">\n  </a>\n  <img src=\"https://img.shields.io/badge/node-%3E%3D14%20%3C16.6.0%20%7C%7C%20%3E16.6.0-blue.svg\" />\n  <img src=\"https://img.shields.io/badge/pnpm-%3E%3D7-blue.svg\" />\n  <a href=\"https://docs.near.org/sdk/js/introduction\" target=\"_blank\">\n    <img alt=\"Documentation\" src=\"https://img.shields.io/badge/documentation-yes-brightgreen.svg\" />\n  </a>\n  <a href=\"https://github.com/near/near-sdk-js/blob/develop/LICENSE\" target=\"_blank\">\n    <img alt=\"License: LICENSE\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" />\n  </a>\n  <a href=\"https://github.com/near/near-sdk-js/blob/develop/LICENSE-APACHE\" target=\"_blank\">\n    <img alt=\"License: LICENSE\" src=\"https://img.shields.io/badge/License-Apache-yellow.svg\" />\n  </a>\n</p>\n\nA JavaScript library for writing NEAR smart contracts.\n\n## Prerequisites\n\n- node >=14 <16.6.0 || >16.6.0\n- pnpm >=7\n\n## Quick Start\n\nUse [`create-near-app`](https://github.com/near/create-near-app) to quickly get started writing smart contracts in JavaScript on NEAR.\n\n    npx create-near-app\n\nThis will scaffold a basic template for you \ud83d\ude0e\n\n## Documentation\n\n- [Learn how to use](https://docs.near.org/sdk/js/introduction) the library in your project\n- Check our [detailed examples and tutorials](https://docs.near.org/tutorials/welcome)\n- Find [source code examples](./examples) with common use cases\n- Lookup available features in [API reference](https://docs.near.org/sdk/near-sdk-js/reference)\n- \ud83c\udfe0 Learn more about NEAR on our [Documentation website](https://docs.near.org/)\n\n## Contributing\n\nIf you are interested in contributing, please look at the [contributing guidelines](CONTRIBUTING.md).\n\n - [Report issues you encounter](https://github.com/near/near-sdk-js/issues) \ud83d\udc1e\n - [Provide suggestions or feedback](https://github.com/near/near-sdk-js/discussions) \ud83d\udca1\n - [Show us what you've built!](https://github.com/near/near-sdk-js/discussions/categories/show-and-tell) \ud83d\udcaa\n\n## License\n\nThis repository is distributed under the terms of both the [MIT license](https://github.com/near/near-sdk-js/blob/develop/LICENSE) and the [Apache License](https://github.com/near/near-sdk-js/blob/develop/LICENSE-APACHE) (Version 2.0).\nSee [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2023-03-01T06:03:50Z", "2023-02-24T03:32:02Z", "2023-01-26T01:45:53Z", "2023-01-06T03:40:44Z", "2022-10-31T15:56:23Z", "2022-10-21T07:27:09Z", "2022-09-09T08:26:47Z", "2022-09-07T14:46:49Z", "2022-09-01T11:20:57Z", "2022-08-25T09:01:15Z", "2022-06-07T16:39:51Z", "2022-05-26T08:07:52Z", "2022-05-19T10:49:11Z"]}, {"name": "near-sdk-js-template-project", "description": "A starting point to write, build and test JavaScript smart contract", "language": "JavaScript", "license": null, "readme": "# NEAR-SDK-JS template project\n\nThis is a template project. It implements a counter. You can copy this folder to start writing your first contract.\n\n# Build the contract\n\n```\nnpm i\nnpm run build\n```\n\n# Run tests\n```\nnpm run test\n```\n", "release_dates": []}, {"name": "near-sdk-rs", "description": "Rust library for writing NEAR smart contracts", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<div align=\"center\">\n\n  <h1><code>near-sdk</code></h1>\n\n  <p>\n    <strong>Rust library for writing NEAR smart contracts.</strong>\n  </p>\n  <p>\n    Previously known as <code>near-bindgen</code>.\n  </p>\n\n\n  <p>\n    <a href=\"https://crates.io/crates/near-sdk\"><img src=\"https://img.shields.io/crates/v/near-sdk.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/near-sdk\"><img src=\"https://img.shields.io/crates/d/near-sdk.svg?style=flat-square\" alt=\"Download\" /></a>\n    <a href=\"https://docs.rs/near-sdk\"><img src=\"https://docs.rs/near-sdk/badge.svg\" alt=\"Reference Documentation\" /></a>\n    <a href=\"https://blog.rust-lang.org/2023/08/24/Rust-1.72.0.html\"><img src=\"https://img.shields.io/badge/rustc-1.72+-lightgray.svg\" alt=\"MSRV\" /></a>\n    <a href=\"https://discord.gg/gBtUFKR\"><img src=\"https://img.shields.io/discord/490367152054992913.svg\" alt=\"Join the community on Discord\" /></a>\n    <a href=\"https://github.com/near/near-sdk-rs/actions\"><img src=\"https://github.com/near/near-sdk-rs/actions/workflows/test.yml/badge.svg\" alt=\"GitHub Actions Build\" /></a>\n  </p>\n\n   <h3>\n      <a href=\"https://github.com/near/near-sdk-rs#features\">Features</a>\n      <span> | </span>\n      <a href=\"https://github.com/near/near-sdk-rs#pre-requisites\">Pre-requisites</a>\n      <span> | </span>\n      <a href=\"https://github.com/near/near-sdk-rs#writing-rust-contract\">Writing Rust Contract</a>\n      <span> | </span>\n      <a href=\"https://github.com/near/near-sdk-rs#building-rust-contract\">Building Rust Contract</a>\n      <span> | </span>\n      <a href=\"https://docs.rs/near-sdk\">Reference Documentation</a>\n      <span> | </span>\n      <a href=\"https://github.com/near/near-sdk-rs#contributing\">Contributing</a>\n    </h3>\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Example\n\nWrap a struct in `#[near_bindgen]` and it generates a smart contract compatible with the NEAR blockchain:\n```rust\nuse near_sdk::{near_bindgen, env};\n\n#[near_bindgen]\n#[derive(Default, BorshDeserialize, BorshSerialize)]\n#[borsh(crate = \"near_sdk::borsh\")]\npub struct StatusMessage {\n    records: HashMap<AccountId, String>,\n}\n\n#[near_bindgen]\nimpl StatusMessage {\n    pub fn set_status(&mut self, message: String) {\n        let account_id = env::signer_account_id();\n        self.records.insert(account_id, message);\n    }\n\n    pub fn get_status(&self, account_id: AccountId) -> Option<String> {\n        self.records.get(&account_id).cloned()\n    }\n}\n```\n\n## Features\n\n### Unit-testable\nWriting unit tests is easy with `near-sdk`:\n\n```rust\n#[test]\nfn set_get_message() {\n    let mut contract = StatusMessage::default();\n    contract.set_status(\"hello\".to_string());\n    assert_eq!(\"hello\".to_string(), contract.get_status(\"bob_near\".to_string()).unwrap());\n}\n```\n\nRun unit test the usual way:\n```bash\ncargo test --package status-message\n```\n\n### Asynchronous cross-contract calls\nAsynchronous cross-contract calls allow parallel execution of multiple contracts in parallel with subsequent aggregation on another contract. `env` exposes the following methods:\n* `promise_create` -- schedules an execution of a function on some contract;\n* `promise_then` -- attaches the callback back to the current contract once the function is executed;\n* `promise_and` -- combinator, allows waiting on several promises simultaneously, before executing the callback;\n* `promise_return` -- treats the result of execution of the promise as the result of the current function.\n\nFollow [examples/cross-contract-high-level](examples/cross-contract-calls/high-level)\nto see various usages of cross contract calls, including **system-level actions** done from inside the contract like balance transfer (examples of other system-level actions are: account creation, access key creation/deletion, contract deployment, etc).\n\n### Initialization methods\nWe can define an initialization method that can be used to initialize the state of the contract. `#[init]` verifies that the contract has not been initialized yet (the contract state doesn't exist) and will panic otherwise.\n\n```rust\n#[near_bindgen]\nimpl StatusMessage {\n    #[init]\n    pub fn new(user: String, status: String) -> Self {\n        let mut res = Self::default();\n        res.records.insert(user, status);\n        res\n    }\n}\n```\n\nEven if you have initialization method your smart contract is still expected to derive `Default` trait. If you don't\nwant to disable default initialization, then you can prohibit it like this:\n```rust\nimpl Default for StatusMessage {\n    fn default() -> Self {\n        near_sdk::env::panic_str(\"Contract should be initialized before the usage.\")\n    }\n}\n```\nYou can also prohibit `Default` trait initialization by using `near_sdk::PanicOnDefault` helper macro. E.g.:\n```rust\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]\n#[borsh(crate = \"near_sdk::borsh\")]\npub struct StatusMessage {\n    records: HashMap<String, String>,\n}\n```\n\n### Payable methods\nWe can allow methods to accept token transfer together with the function call. This is done so that contracts can define a fee in tokens that needs to be payed when they are used. By the default the methods are not payable and they will panic if someone will attempt to transfer tokens to them during the invocation. This is done for safety reason, in case someone accidentally transfers tokens during the function call.\n\nTo declare a payable method simply use `#[payable]` decorator:\n```rust\n\n#[payable]\npub fn my_method(&mut self) {\n...\n}\n```\n\n### Private methods\nUsually, when a contract has to have a callback for a remote cross-contract call, this callback method should\nonly be called by the contract itself. It's to avoid someone else calling it and messing the state. Pretty common pattern\nis to have an assert that validates that the direct caller (predecessor account ID) matches to the contract's account (current account ID).\nMacro `#[private]` simplifies it, by making it a single line macro instead and improves readability.\n\nTo declare a private method use `#[private]` decorator:\n```rust\n\n#[private]\npub fn my_method(&mut self) {\n...\n}\n/// Which is equivalent to\n\npub fn my_method(&mut self ) {\n    if near_sdk::env::current_account_id() != near_sdk::env::predecessor_account_id() {\n        near_sdk::env::panic_str(\"Method my_method is private\");\n    }\n...\n}\n```\n\nNow, only the account of the contract itself can call this method, either directly or through a promise.\n\n## Pre-requisites\nTo develop Rust contracts you would need to:\n* Install [Rustup](https://rustup.rs/):\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n* Add wasm target to your toolchain:\n```bash\nrustup target add wasm32-unknown-unknown\n```\n\n## Writing Rust Contract\nYou can follow the [examples/status-message](examples/status-message) crate that shows a simple Rust contract.\n\nThe general workflow is the following:\n1. Create a crate and configure the `Cargo.toml` similarly to how it is configured in [examples/status-message/Cargo.toml](examples/status-message/Cargo.toml);\n2. Crate needs to have one `pub` struct that will represent the smart contract itself:\n    * The struct needs to implement `Default` trait which\n    NEAR will use to create the initial state of the contract upon its first usage;\n    * The struct also needs to implement `BorshSerialize` and `BorshDeserialize` traits which NEAR will use to save/load contract's internal state;\n\n   Here is an example of a smart contract struct:\n   ```rust\n   use near_sdk::{near_bindgen, env};\n\n   #[near_bindgen]\n   #[derive(Default, BorshSerialize, BorshDeserialize)]\n   #[borsh(crate = \"near_sdk::borsh\")]\n   pub struct MyContract {\n       data: HashMap<u64, u64>\n   }\n   ```\n\n3. Define methods that NEAR will expose as smart contract methods:\n    * You are free to define any methods for the struct but only public methods will be exposed as smart contract methods;\n    * Methods need to use either `&self`, `&mut self`, or `self`;\n    * Decorate the `impl` section with `#[near_bindgen]` macro. That is where all the M.A.G.I.C. (Macros-Auto-Generated Injected Code) happens;\n    * If you need to use blockchain interface, e.g. to get the current account id then you can access it with `env::*`;\n\n    Here is an example of smart contract methods:\n    ```rust\n    #[near_bindgen]\n    impl MyContract {\n        pub fn insert_data(&mut self, key: u64, value: u64) -> Option<u64> {\n            self.data.insert(key)\n        }\n        pub fn get_data(&self, key: u64) -> Option<u64> {\n            self.data.get(&key).cloned()\n        }\n    }\n    ```\n\n## Building Rust Contract\n\n### [cargo-near](https://github.com/near/cargo-near)\n\nThis can be used as an alternative, to allow building while also generating an [abi](https://github.com/near/abi)\n\n```bash\n# Install the near extension if you haven't already\ncargo install cargo-near\n\n# Builds the wasm contract and ABI into `target/near`\ncargo near build --release\n```\n\n### Using cargo build\n\n```bash\nRUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release\n```\n\n## Building with reproducible builds\n\nSince WebAssembly compiler includes a bunch of debug information into the binary, the resulting binary might be\ndifferent on different machines. To be able to compile the binary in a reproducible way, we added a Dockerfile\nthat allows to compile the binary.\n\n**Use [contract-builder](https://github.com/near/near-sdk-rs/tree/master/contract-builder)**\n\n## NEAR contract standards\n\n[`near-contract-standards` crate](https://github.com/near/near-sdk-rs/tree/master/near-contract-standards) provides a set of interfaces and implementations for NEAR's contract standards:\n\n- Upgradability\n- Fungible Token (NEP-141). See [example usage](examples/fungible-token)\n- Non-Fungible Token (NEP-171). See [example usage](examples/non-fungible-token)\n\n\n## Versioning\n\n### Semantic Versioning\n\nThis crate follows [Cargo's semver guidelines](https://doc.rust-lang.org/cargo/reference/semver.html).\n\nState breaking changes (low-level serialization format of any data type) will be avoided at all costs. If a change like this were to happen, it would come with a major version and come with a compiler error. If you encounter one that does not, [open an issue](https://github.com/near/near-sdk-rs/issues/new)!\n\n### MSRV\n\nThe minimum supported Rust version is currently `1.72`. There are no guarantees that this will be upheld if a security patch release needs to come in that requires a Rust toolchain increase.\n\n## Contributing\n\nIf you are interested in contributing, please look at the [contributing guidelines](CONTRIBUTING.md).\n", "release_dates": ["2024-02-23T00:56:57Z", "2024-02-23T00:56:38Z", "2024-02-23T00:57:16Z", "2024-02-20T08:11:35Z", "2024-02-20T08:10:18Z", "2024-02-20T08:11:57Z", "2024-01-17T14:20:41Z", "2024-01-17T14:19:25Z", "2024-01-17T14:21:02Z", "2023-11-19T12:22:27Z", "2023-11-19T12:23:48Z", "2023-11-19T12:22:22Z", "2023-11-19T12:24:12Z", "2022-11-10T17:14:24Z", "2022-11-09T18:42:14Z", "2022-08-30T16:10:06Z", "2022-08-26T18:17:07Z", "2022-08-05T15:11:00Z", "2022-08-02T00:01:44Z", "2022-05-25T13:41:12Z", "2022-05-12T15:21:04Z", "2022-04-19T15:55:40Z", "2022-03-24T15:40:08Z", "2022-01-21T21:41:09Z", "2021-12-24T00:28:06Z", "2021-10-12T23:40:01Z", "2021-08-19T18:42:20Z", "2021-07-23T17:05:43Z", "2021-04-07T01:43:46Z", "2021-03-25T18:33:20Z"]}, {"name": "near-sdk-tools", "description": "Collection of tools to support testing smart contracts.", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "*Deprecation warning: This project is not maintained. Use https://github.com/near/workspaces instead.*\n\n# near-sdk-tools\nCollection of tools to support testing smart contracts.\n\n\n## License\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee [MIT-LICENSE](MIT-LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2020-08-04T15:27:00Z", "2020-08-04T15:24:00Z", "2020-07-30T15:34:35Z", "2020-05-01T21:09:29Z", "2020-05-01T20:44:13Z", "2020-05-01T19:49:39Z", "2020-05-01T16:09:06Z", "2020-05-01T15:32:08Z", "2020-04-21T21:56:41Z", "2020-04-21T21:43:15Z", "2020-04-15T20:47:31Z", "2020-04-15T18:30:36Z"]}, {"name": "near-sdk-zig", "description": "Tools to build NEAR smart contracts with Zig", "language": "Zig", "license": null, "readme": "# near-sdk-zig: Building smart contracts with Zig\n", "release_dates": []}, {"name": "near-seed-phrase", "description": "Utilities to work with NEAR Protocol key pairs based on BIP39 seed phrases", "language": "JavaScript", "license": null, "readme": "# NEAR Seed Phrase\n\nThis tool enables creating and converting mnemonic-phrases, public key and private key for NEAR accounts.\n\n### Install\n```js\nnpm i near-seed-phrase\n```\n\n### Usage\n```js\nconst { parseSeedPhrase, generateSeedPhrase } = require('near-seed-phrase');\n\n// to create a seed phrase with its corresponding Keys\nconst {seedPhrase, publicKey, secretKey} = generateSeedPhrase()\n\n// To recover keys from the seed phrase\nconst { publicKey, secretKey } = parseSeedPhrase(seedPhrase);\n```\n", "release_dates": ["2021-05-07T02:55:38Z", "2020-09-15T22:34:11Z"]}, {"name": "near-state-indexer", "description": "NEAR Protocol Indexer pumping data in Redis for  https://github.com/vgrichina/fast-near", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# NEAR State Indexer\n\nNEAR State Indexer is built on top of [NEAR Indexer microframework](https://github.com/near/nearcore/tree/master/chain/indexer) to watch the network and store all the state changes in the Redis database.\nIt can be consumed by https://github.com/vgrichina/fast-near to run NEAR RPC service.\n\n\n## Self-hosting\n\nBefore you proceed, make sure you have the following software installed:\n* [rustup](https://rustup.rs/) or Rust version that is mentioned in `rust-toolchain` file in the root of [nearcore](https://github.com/nearprotocol/nearcore) project.\n\n\nClone this repository and open the project folder\n\n```bash\n$ git clone git@github.com:near/near-indexer-for-explorer.git\n$ cd near-indexer-for-explorer\n```\n\nYou need to provide database credentials in `.env` file like below (replace Redis connection string as needed):\n\n```bash\n$ echo \"REDIS_URL=redis://127.0.0.1/\" > .env\n```\n\nTo connect the specific chain you need to have necessary configs, you can generate it as follows:\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet init --chain-id testnet --download-config\n```\n\nThe above code will download the official genesis config and generate necessary configs. You can replace `testnet` in the command above to different network ID (`betanet`, `mainnet`).\n\n**NB!** According to changes in `nearcore` config generation we don't fill all the necessary fields in the config file.\nWhile this issue is open https://github.com/nearprotocol/nearcore/issues/3156 you need to download config you want and replace the generated one manually.\n - [testnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/testnet/config.json)\n - [betanet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/betanet/config.json)\n - [mainnet config.json](https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/mainnet/config.json)\n\nConfigs for the specified network are in the `--home-dir` provided folder. We need to ensure that NEAR State Indexer follows\nall the necessary shards, so `\"tracked_shards\"` parameters in `~/.near/testnet/config.json` needs to be configured properly.\nFor example, with a single shared network, you just add the shard #0 to the list:\n\n```\n...\n\"tracked_shards\": [0],\n...\n```\n\n## Running NEAR State Indexer:\n\nCommand to run NEAR State Indexer have to contain sync mode.\n\nYou can choose NEAR State Indexer sync mode by setting what to stream:\n - `sync-from-latest` - start indexing blocks from the latest finalized block\n - `sync-from-interruption --delta <number_of_blocks>` - start indexing blocks from the block NEAR Indexer was interrupted last time but earlier for `<number_of_blocks>` if provided\n - `sync-from-block --height <block_height>` - start indexing blocks from the specific block height\n\nOptionally you can tell Indexer to store data from genesis (Accounts and Access Keys) by adding key `--store-genesis` to the `run` command.\n\nNEAR State Indexer works in strict mode by default, but you can disable it for specific amount of blocks. The strict mode means that every piece of data\nwill be retried to store to database in case of error. Errors may occur when the parent piece of data is still processed but the child piece is already\ntrying to be stored. So Indexer keeps retrying to store the data until success. However if you're running Indexer not from the genesis it is possible that you\nreally miss some of parent data and it'll be impossible to store child one, so you can disable strict mode for 1000 blocks to ensure you've passed the strong\nrelation data area and you're running Indexer where it is impossible to loose any piece of data.\n\nTo disable strict mode you need to provide:\n\n```\n--non-strict-mode\n```\n\nSometimes you may want to index block while sync process is happening, by default an indexer node is waiting for full sync to complete but you can enable indexing while the node is syncing by passing `--stream-while-syncing`\n\nBy default NEAR State Indexer processes only a single block at a time. You can adjust this with the `--concurrency` argument (when the blocks are mostly empty, it is fine to go with as many as 100 blocks of concurrency).\n\nSo final command to run NEAR State Indexer can look like:\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/testnet run --store-genesis --stream-while-syncing --non-strict-mode --stop-after-number-of-blocks 1000 --concurrency 1 sync-from-latest\n```\n\nAfter the network is synced, you should see logs of every block height currently received by NEAR State Indexer.\n\n## Syncing\n\nWhenever you run NEAR State Indexer for any network except localnet you'll need to sync with the network. This is required because it's a natural behavior of `nearcore` node and NEAR State Indexer is a wrapper for the regular `nearcore` node. In order to work and index the data your node must be synced with the network. This process can take a while, so we suggest to download a fresh backup of the `data` folder and put it in you `--home-dir` of your choice (by default it is `~/.near`)\n\nRunning your NEAR State Indexer node on top of a backup data will reduce the time of syncing process because your node will download only missing data and it will take reasonable time.\n\nAll the backups can be downloaded from the public S3 bucket which contains latest daily snapshots:\n\n* [Recent 5-epoch Mainnet data folder](https://near-protocol-public.s3.ca-central-1.amazonaws.com/backups/mainnet/rpc/data.tar)\n* [Recent 5-epoch Testnet data folder](https://near-protocol-public.s3.ca-central-1.amazonaws.com/backups/testnet/rpc/data.tar)\n\n\n## Running NEAR State Indexer as archival node\n\nIt's not necessary but in order to index everything in the network it is better to do it from the genesis. `nearcore` node is running in non-archival mode by default. That means that the node keeps data only for [5 last epochs](https://docs.near.org/docs/concepts/epoch). In order to index data from the genesis we need to turn the node in archival mode.\n\nTo do it we need to update `config.json` located in `--home-dir` or your choice (by default it is `~/.near`).\n\nFind next keys in the config and update them as following:\n\n```json\n{\n  ...\n  \"archive\": true,\n  \"tracked_shards\": [0],\n  ...\n}\n```\n\nThe syncing process in archival mode can take a lot of time, so it's better to download a backup provided by NEAR and put it in your `data` folder. After that your node will need to sync only missing data and it should take reasonable time.\n\nAll the backups can be downloaded from the public S3 bucket which contains latest daily snapshots:\n\n* [Archival Mainnet data folder](https://near-protocol-public.s3.ca-central-1.amazonaws.com/backups/mainnet/archive/data.tar)\n* [Archival Testnet data folder](https://near-protocol-public.s3.ca-central-1.amazonaws.com/backups/testnet/archive/data.tar)\n\nSee https://docs.near.org/docs/roles/integrator/exchange-integration#running-an-archival-node for reference\n\n## Local debugging\n\nIf you want to play with the code locally, it's better not to copy existing mainnet/testnet (it requires LOTS of memory), but to have your own small example.\nGo through steps [above](https://github.com/near/near-indexer-for-explorer#self-hosting) until (by not including) `init` command.\n\nThen use `init` command with different arguments,\n\n```bash\n$ cargo run --release -- --home-dir ~/.near/localnet init --chain-id localnet\n```\n\nEdit `~/.near/localnet/config.json` by adding tracking shards and archiving option (see [example above](https://github.com/near/near-indexer-for-explorer#running-near-indexer-for-explorer-as-archival-node)).\n\n```bash\n$ cargo run -- --home-dir ~/.near/localnet run --store-genesis sync-from-latest\n```\n\nCongrats, the blocks are being produced right now!\nThere should be some lines in the DB.\nNow, we need to generate some activity to add new examples.\n\n```bash\n$ npm i -g near-cli\n$ NEAR_ENV=local near create-account awesome.test.near --initialBalance 30 --masterAccount test.near --keyPath=~/.near/localnet/validator_key.json\n$ NEAR_ENV=local near send test.near awesome.test.near 5\n```\n\nAll available commands are [here](https://github.com/near/near-cli#near-cli-command-line-interface).\n\nYou can stop and re-run the example at any time.\nBlocks will continue producing from the last state.\n\n## Troubleshooting\n\nWhen operating normally, you should see \"INFO indexer_for_explorer: Block height ...\" messages in the logs.\n\n### The node is fully synced and running, but no indexer messages and no transactions in the database (not indexing)\n\nMake sure the blocks you want to save exist on the node. Check them via [JSON RPC](https://docs.near.org/docs/api/rpc#block-details):\n\n```\ncurl http://127.0.0.1:3030/ -X POST --header 'Content-type: application/json' --data '{\"jsonrpc\": \"2.0\", \"id\": \"dontcare\", \"method\": \"block\", \"params\": {\"block_id\": 9820214}}'\n```\n\nNOTE: Block #9820214 is the first block after genesis block (#9820210) on Mainnet.\n\nIf it returns an error that the block does not exist or missing, it means that your node does not have the necessary data. Your options here are to start from the blocks that are recorded on the node or start an archival node (see above) and make sure you have the full network history (either use a backup or let the node sync from scratch (it is quite slow, so backup is recommended))\n", "release_dates": []}, {"name": "near-stats", "description": null, "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Stats\nWelcome to the NEAR Stats Repo.\n\nNEAR Stats is a dashboard to track the growth of apps on the NEAR Platform. The data behind the NEAR Stats Project comes from the [NEAR Analytics](https://github.com/near/near-analytics) Database for aggregated data, and the [NEAR Ecosystem Repo](https://github.com/near/ecosystem) for app data. Alongside the dashboard is an API that provides that data behind all of the NEAR Stats visualizations.\n    \nPlease visit the [API Wiki](../../wiki/API) for API Documentation.\nDetails of the structure and code for the dashboard can be found in the [Front End Wiki](../../wiki/Front-end).\n\n# Running NEAR Stats\n## Environment Variables\nEnvironment variables required for connection to the NEAR Analytics database are required in a ```.env``` file. An example of the required variables are included in the [.env-example](.env-example). This file can be renamed ```.env```, however the credentials should be checked against the [NEAR Analytics](https://github.com/near/near-analytics) Repo.\n  \n## Running NEAR Stats Locally\nNEAR Stats is developed using [Next.js](https://nextjs.org/). To install the dependencies needed for the project, run ```yarn```.\nThe project can be ran in development mode using ```yarn dev``` or alternatively in production mode with ```yarn build``` followed by ```yarn start```.\n\n## Additional Dependencies\n### Redis Cache Server\nA Redis Caching Server is highly recommended to improve loadings time and load on the NEAR Analytics Database. Running NEAR Stats without a Redis Caching Server is possible without any additional modification however queries to the NEAR Analytics Database may be blocked during times of high volume. The Redis Caching Server will cache all results for a period of 24 hours.\n  \n#### Redis Installation Mac\nThe following terminal commands will install and run a local Redis Server on a Mac. Additional information and instructions for alternative systems can be found on the [Redis Website](https://redis.io/).\n  \n```\nmkdir redis && cd redis\ncurl -O http://download.redis.io/redis-stable.tar.gz\ntar xzvf redis-stable.tar.gz\ncd redis-stable\nmake\nmake test\nsudo make install\nredis-server\n```\n\n#### Flushing Redis server cache\nIn the event you would like to clear the cached database results, the following results will flush (reset) the cache. \n```redis-cli FLUSHDB```\n\n\n# DOCKER\nThe following steps will build a docker container that will automatically run the NEAR Stats dashboard and Redis server.\n\n## Install Docker\nDownload [Docker Desktop](https://www.docker.com/products/docker-desktop) and ensure it is open and running to start the docker daemon.\n\n## Docker Build\n```docker build -t nearstats .```\n\n## Docker Start\nThe docker container can be started from Docker Desktop\nRun the image and set the local host port to 3000\nvisit http://localhost:3000 in your browser.\n\n# Contributing\n\nTo contribute to NEAR Stats, please see [CONTRIBUTING](CONTRIBUTING.md).\n\n# License\n\nNEAR Stats is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\n\nSee [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE) for details.", "release_dates": []}, {"name": "near-token-rs", "description": "a small crate to work with NEAR token values ergonomically and efficiently ", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p>\n    <a href=\"https://crates.io/crates/near-token\"><img src=\"https://img.shields.io/crates/d/near-token?style=flat-square&logo=near&label=crates.io\" alt=\"Crates.io (latest)\"></a>\n    <a href=\"https://docs.rs/near-token/latest/near_token\"><img src=\"https://img.shields.io/docsrs/near-token?style=flat-square\" alt=\"Docs.rs\"></a>\n    <img src=\"https://img.shields.io/badge/rustc-1.68%2B-lightgray.svg?style=flat-square\" alt=\"Rust Version\">\n</p>\n\n# near-token\nnear-token is crate for work with [tokens](https://docs.near.org/concepts/basics/tokens) in near-protocol.\n\nThe crate includes NearToken type and constructors for converting data as NearToken and as u128 type values.\n\n## Examples\n\n### Basic\n\nAdd near-token to your dependencies:\n\n```bash\ncargo add near-token\n```\n\nHere is the basic usage of near-token crate:\n\n```rust\nuse near_token::NearToken;\n\nfn main() {\n    const TEN_NEAR: NearToken = NearToken::from_near(10);\n\n    assert_eq!(TEN_NEAR.to_string(), \"10.00 NEAR\");\n    assert_eq!(TEN_NEAR.as_near(), 10);\n    assert_eq!(TEN_NEAR.as_millinear(), 10000);\n    assert_eq!(TEN_NEAR.as_yoctonear(), 10000000000000000000000000);\n\n    let input_str = \"0.123456 NEAR\";\n    let input_near: NearToken = input_str.parse().unwrap();\n    assert_eq!(\n        input_near,\n        NearToken::from_yoctonear(123456000000000000000000)\n    );\n\n}\n```\n\n### serde support\n\nIn order to use NearToken in `serde`-serializable structs, enable `serde` feature:\n\n```bash\ncargo add near-token --features serde\n```\n\nHere is the basic usage of near-token crate with serde:\n\n```rust\n// When `serde` feature is enabled, NearToken can be used in serde-serializable structs.\n// NearToken will be serialized to a token-precision u128 value encoded as string.\n#[derive(serde::Serialize)]\nstruct TransferDetails {\n    amount: NearToken,\n}\n\nfn main() {\n    const TEN_NEAR: NearToken = NearToken::from_near(10);\n\n    let details = TransferDetails { amount: TEN_NEAR };\n    assert_eq!(\n        serde_json::to_string(&details).unwrap(),\n        r#\"{\"amount\":\"10000000000000000000000000\"}\"#\n    );\n}\n```\n\n### borsh support\n\nIn order to use NearToken in `borsh`-serializable structs, enable `borsh` feature:\n\n```bash\ncargo add near-token --features borsh\n```\n\nHere is the basic usage of near-token crate with borsh:\n\n```rust\nuse borsh::{to_vec, BorshSerialize};\nuse near_token::NearToken;\n\n#[derive(BorshSerialize)]\nstruct TransferDetails {\n    amount: NearToken,\n}\n\nfn main() {\n    const TEN_NEAR: NearToken = NearToken::from_near(10);\n\n    let details = TransferDetails { amount: TEN_NEAR };\n    assert_eq!(\n        to_vec(&details).unwrap(),\n        vec![0, 0, 0, 74, 72, 1, 20, 22, 149, 69, 8, 0, 0, 0, 0, 0]\n    );\n}\n```\n\n## NearToken information\n\nNEAR is used to price computation and storage on the NEAR infrastructure. The network charges transaction fees in NEAR to process changes and transactions.\n\n### License\n\nThis project is licensed under the [MIT license] and [Apache-2.0 license].\n\n[MIT license]: https://github.com/near/near-token/blob/main/LICENSE-MIT\n[Apache-2.0 license]:  https://github.com/near/near-token/blob/main/LICENSE-APACHE\n\n", "release_dates": ["2023-10-28T12:32:55Z", "2023-10-27T14:04:37Z"]}, {"name": "near-vscode", "description": "https://marketplace.visualstudio.com/items?itemName=near-protocol.near-discovery-ide", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR BOS IDE\n\nExtension to help you develop [components](https://discovery.near-docs.io) in [NEAR BOS](https://near.org).\n\n## Features\n- Retrieve any component from BOS\n- Change the code and preview the changes locally\n- Publish directly to the NEAR Blockchain\n- See the widget logs in the Debug Console\n\n![Extension Overview](./readme/extension.jpeg)\n\n## How to Use\nAfter installing the widget, a new section named **`Near BOS`** will be added to the explorer. Choose a folder to start using it.\n\n### Retrieve Widgets, Preview and Publish\n\n![Preview](./readme/features.png)\n\nUse the `Login & Fetch Widgets` to login into your NEAR account and fetch your widgets, or use the `Fetch Account Widgets` the widgets of any account in NEAR Social.\n\nUse the explorer to open any file, and the `preview` button to preview your changes.\n\n> The preview is not automatically reloaded, you will need to press the `preview` button again.\n\n> The `console.log` can be found within the `OUTPUT` tab, in the `Widget` Channel.\n\nUse the `publish` buttons to store the widget in Discovery.", "release_dates": ["2023-10-18T14:59:40Z"]}, {"name": "near-wallet", "description": "Web wallet for NEAR Protocol which stores keys in browser's localStorage", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# NEAR Wallet\n\n[![Build Status](https://travis-ci.com/near/near-wallet.svg?branch=master)](https://travis-ci.com/near/near-wallet)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/near/near-wallet)\n\nThis is in-browser web-based wallet for working with NEAR accounts. This wallet stores account keys in open text using the localStorage on user's machine.\n\nWARNING: This wallet shouldn't be used as the only signer for high-value accounts. Make sure to use hardware wallet when substantial amount of NEAR tokens is involved.\n\n## PACKAGES\n### [e2e-tests](packages/e2e-tests)\nTest suite for verifying core use cases and user flow are functional in the UI\n### [frontend](packages/frontend)\nWallet frontend (React/Redux app).", "release_dates": ["2019-05-26T00:41:51Z"]}, {"name": "near-wallet-roadmap", "description": "near-wallet-roadmap", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Heads up!\nThe wallet roadmap has moved at this new link: https://portal.productboard.com/lnpb6dhpyz225uxhuo74d32p\n\n_Old version below_\n\n# NEAR Wallet public roadmap \n\nIn this repository, you can find the official [NEAR Wallet product roadmap](https://github.com/near/near-wallet-roadmap/projects/1). Our product roadmap is where you can learn about what NEAR Wallet features we're working on, what stage they're in, and when we expect to bring them to you. Have any questions or comments about items on the roadmap? Join the discussion over on the [NEAR Governance Forum](https://gov.near.org/), get in touch on Discord via [https://near.chat], or open an issue in the official [NEAR wallet repo](https://github.com/near/near-wallet).\n\nThis roadmap repository is for communicating NEAR\u2019s roadmap for the Wallet at the address [https://wallet.near.org]. Existing issues are currently read-only, and we are locking conversations, as we get started. Interaction limits are also in place to ensure issues originate from NEAR. We\u2019re planning to iterate on the format of the roadmap itself, and we see potential to engage more in discussions about the future of NEAR protocol and products. If you have feedback about this roadmap repository itself, such as how the issues are presented, let us know through [this thread](#) on the NEAR Governance Forum.\n\n## Guide to the roadmap\nEvery item on the roadmap is an issue, with a label that indicates each of the following:\n\n* A **release phase** that describes the next expected phase of the roadmap item. See below for a guide to release phases.\n* A **feature area** that indicates the area of the wallet to which the item belongs. For a list of current product areas, see below.\n\n## Release Phases\nEvery product or feature goes through a set of release phases, from early testing to general availability.\n\n* **in development**\nFeature is actively under software development, and it's visible among the [near-wallet pull requets](https://github.com/near/near-wallet/pulls).\n\n* **alpha:** Primarily for testing and feedback\nLimited availability, requires pre-release agreement. Features still under heavy development, and subject to change. Not for production use, and no documentation, SLAs or support provided.\n\n* **beta:** Publicly available in full or limited capacity\nFeatures mostly complete and documented. Timeline and requirements for GA usually published. No SLAs or support provided.\n\n* **ga:** Generally available to all customers\nReady for production use with associated SLA and technical support obligations. Approximately 1-2 quarters from Beta.\n\nSome of our features may still be in the exploratory stages, and have no timeframe available. These are included in the roadmap only for early feedback. These are marked as follows:\n\n* **in design:**\nFeature in discovery phase. We have decided to build this feature, but are still figuring out how.\n\n* **exploring:**\nFeature under consideration. We are considering building this feature, and gathering feedback on it.\n\n\n## Roadmap Stages\nThe roadmap is arranged on a project board to give a sense for how far out each item is on the horizon. Every feature is added to a particular project board column according to the month in which it is expected to ship next. Be sure to read the [disclaimer](#disclaimer) below since the roadmap is subject to change, especially further out on the timeline. You'll also find an **Exploratory column**, which is used in conjunction with the labels **design** and **exploring** for when no timeframe is yet available.\n\n## Feature Area\n* **onboarding:** token holders using NEAR Wallet for the first time\n* **ecosystem:** NEAR Wallet interoperability\n* **power users:** token holders using NEAR Wallet as their primary application\n* **security and compliance:** impacting all users and the reputation of NEAR Wallet\n\n## Submit your Feature Request!\nThis roadmap is open for proporals! Open a [new issue](https://github.com/near/near-wallet-roadmap/issues/new/choose), use the provided template to put the required information, and inform the wallet team on Discord it is ready for review, using [this near.chat link](https://near.chat).\nExpect some discussion and questions and two outcomes:\n- the feature is included in the roadmap, straight away\n- the feature is not accepted, and put in the last column on the right\n\nIf your feature is not accepted, don't delete it! NEAR Wallet team will review them on a quarterly basis, and potentially give a new chance to it!\n\n## Disclaimer\nAny statement in this repository that is not purely historical is considered a forward-looking statement. Forward-looking statements included in this repository are based on information available to NEAR as of the date they are made, and NEAR assumes no obligation to update any forward-looking statements. The forward-looking product roadmap does not represent a commitment, guarantee, obligation or promise to deliver any product or feature, or to deliver any product and feature by any particular date, and is intended to outline the general development plans. Users should not rely on this roadmap to make any purchasing or product decision.\n\n_Derived from [Github Roadmap repo](https://github.com/github/roadmap/)_\n", "release_dates": []}, {"name": "near-workspaces", "description": "Write tests once, run them both on NEAR TestNet and a controlled NEAR Sandbox local environment", "language": null, "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "near-workspaces\n===============\n\nControlled, concurrent workspaces in local [NEAR Sandbox](https://github.com/near/sandbox) blockchains or on [NEAR TestNet](https://docs.near.org/concepts/basics/networks). Fun, deterministic testing and powerful scripting for NEAR.\n\nThe same interface will be supported for multiple languages.\n\n* TypeScript/JavaScript: [near/near-workspaces-js](https://github.com/near/near-workspaces-js)\n* Rust: [near/near-workspaces-rs](https://github.com/near/near-workspaces-rs) (in early alpha; you can use workspaces-js with Rust projects for now)\n", "release_dates": []}, {"name": "near-workspaces-js", "description": "Write tests once, run them both on NEAR TestNet and a controlled NEAR Sandbox local environment", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "<div align=\"center\">\n\n  <h1>NEAR Workspaces (TypeScript/JavaScript Edition)</h1>\n\n  [![Project license](https://img.shields.io/badge/license-Apache2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n  [![Project license](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n  [![Discord](https://img.shields.io/discord/490367152054992913?label=discord)](https://discord.gg/Vyp7ETM)\n  [![NPM version](https://img.shields.io/npm/v/near-workspaces.svg?style=flat-square)](https://npmjs.com/near-workspaces)\n  [![Size on NPM](https://img.shields.io/bundlephobia/minzip/near-workspaces.svg?style=flat-square)](https://npmjs.com/near-workspaces)\n\n</div>\n\n`NEAR Workspaces` is a library for automating workflows and writing tests for NEAR smart contracts. You can use it as is or integrate with test runner of your choise (AVA, Jest, Mocha, etc.). If you don't have a preference, we suggest you to use AVA.\n\nQuick Start (without testing frameworks)\n===========\nTo get started with `Near Workspaces` you need to do only two things:\n\n1. Initialize a `Worker`.\n\n    ```ts\n    const worker = await Worker.init();\n    const root = worker.rootAccount;\n\n    const alice = await root.createSubAccount('alice');\n    const contract = await root.devDeploy('path/to/compiled.wasm');\n    ```\n\n   Let's step through this.\n\n   1. `Worker.init` initializes a new `SandboxWorker` or `TestnetWorker` depending on the config. `SandboxWorker` contains [NEAR Sandbox](https://github.com/near/sandbox), which is essentially a local mini-NEAR blockchain. You can create one `Worker` per test to get its own data directory and port (for Sandbox) or root account (for Testnet), so that tests can run in parallel without race conditions in accessing states. If there's no state intervention. you can also reuse the `Worker` to speedup the tests.\n   2. The worker has a `root` account. For `SandboxWorker`, it's `test.near`. For `TestnetWorker`, it creates a unique account. The following accounts are created as subaccounts of the root account. The name of the account will change from different runs, so you should not refer to them by hard coded account name. You can access them via the account object, such as `root`, `alice` and `contract` above.\n   3. `root.createSubAccount` creates a new subaccount of `root` with the given name, for example `alice.<root-account-name>`.\n   4. `root.devDeploy` creates an account with random name, then deploys the specified Wasm file to it.\n   5. `path/to/compiled.wasm` will resolve relative to your project root. That is, the nearest directory with a `package.json` file, or your current working directory if no `package.json` is found. To construct a path relative to your test file, you can use `path.join(__dirname, '../etc/etc.wasm')` ([more info](https://nodejs.org/api/path.html#path_path_join_paths)).\n   6. `worker` contains a reference to this data directory, so that multiple tests can use it as a starting point.\n   7. If you're using a test framework, you can save the `worker` object and account objects `root`, `alice`, `contract` to test context to reuse them in subsequent tests.\n   8. At the end of test, call `await worker.tearDown()` to shuts down the Worker. It gracefully shuts down the Sandbox instance it ran in the background. However, it keeps the data directory around. That's what stores the state of the two accounts that were created (`alice` and `contract-account-name` with its deployed contract).\n\n2. Writing tests.\n\n   `near-workspaces` is designed for concurrency. Here's a simple way to get concurrent runs using plain JS:\n\n   ```ts\n   import {strict as assert} from 'assert';\n\n   await Promise.all([\n     async () => {\n       await alice.call(\n         contract,\n         'some_update_function',\n         {some_string_argument: 'cool', some_number_argument: 42}\n       );\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       assert.equal(result, 'whatever');\n     },\n     async () => {\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       /* Note that we expect the value returned from `some_view_function` to be\n       a default here, because this `fork` runs *at the same time* as the\n       previous, in a separate local blockchain */\n       assert.equal(result, 'some default');\n     }\n   ]);\n   ```\n\n   Let's step through this.\n\n   1. `worker` and accounts such as `alice` are created before.\n   2. `call` syntax mirrors [near-cli](https://github.com/near/near-cli) and either returns the successful return value of the given function or throws the encountered error. If you want to inspect a full transaction and/or avoid the `throw` behavior, you can use `callRaw` instead.\n   3. While `call` is invoked on the account _doing the call_ (`alice.call(contract, \u2026)`), `view` is invoked on the account _being viewed_ (`contract.view(\u2026)`). This is because the caller of a view is irrelevant and ignored.\n\n\nSee the [tests](https://github.com/near/workspaces-js/tree/main/__tests__) directory in this project for more examples.\n\nQuick Start with AVA\n===========\nSince `near-workspaces` is designed for concurrency, AVA is a great fit, because it runs tests concurrently by default. To use`NEAR Workspaces` with AVA:\n 1. Start with the basic setup described [here](https://github.com/avajs/ava).\n 2. Add custom script for running tests on Testnet (if needed). Check instructions in `Running on Testnet` section.\n 3. Add your tests following these example:\n\n  ```ts\n  import {Worker} from 'near-workspaces';\n  import anyTest, {TestFn} from 'ava'\n\n  const test = anyTest as TestFn<{\n    worker: Worker;\n    accounts: Record<string, NearAccount>;\n  }>;\n\n  /* If using `test.before`, each test is reusing the same worker;\n  If you'd like to make a copy of the worker, use `beforeEach` after `afterEach`,\n  which allows you to isolate the state for each test */\n  test.before(async t => {\n    const worker = await Worker.init();\n    const root = worker.rootAccount;\n    const contract = await root.devDeploy('path/to/contract/file.wasm');\n    /* Account that you will be able to use in your tests */\n    const ali = await root.createSubAccount('ali');\n    t.context.worker = worker;\n    t.context.accounts = {root, contract, ali};\n  })\n\n  test('Test name', async t => {\n    const {ali, contract} = t.context.accounts;\n    await ali.call(contract, 'set_status', {message: 'hello'});\n    const result: string = await contract.view('get_status', {account_id: ali});\n    t.is(result, 'hello');\n  });\n\n  test.after(async t => {\n    // Stop Sandbox server\n    await t.context.worker.tearDown().catch(error => {\n      console.log('Failed to tear down the worker:', error);\n    });\n  });\n  ```\n\n\n\"Spooning\" Contracts from Testnet and Mainnet\n=============================================\n\n[Spooning a blockchain](https://coinmarketcap.com/alexandria/glossary/spoon-blockchain) is copying the data from one network into a different network. near-workspaces makes it easy to copy data from Mainnet or Testnet contracts into your local Sandbox environment:\n\n```ts\nconst refFinance = await root.importContract({\n  mainnetContract: 'v2.ref-finance.near',\n  blockId: 50_000_000,\n  withData: true,\n});\n```\n\nThis would copy the Wasm bytes and contract state from [v2.ref-finance.near](https://explorer.near.org/accounts/v2.ref-finance.near) to your local blockchain as it existed at block `50_000_000`. This makes use of Sandbox's special [patch state](#patch-state-on-the-fly) feature to keep the contract name the same, even though the top level account might not exist locally (note that this means it only works in Sandbox testing mode). You can then interact with the contract in a deterministic way the same way you interact with all other accounts created with near-workspaces.\n\nGotcha: `withData` will only work out-of-the-box if the contract's data is 50kB or less. This is due to the default configuration of RPC servers; see [the \"Heads Up\" note here](https://docs.near.org/api/rpc/contracts#view-contract-state). Some teams at NEAR are hard at work giving you an easy way to run your own RPC server, at which point you can point tests at your custom RPC endpoint and get around the 50kB limit.\n\nSee an [example of spooning](https://github.com/near/workspaces-js/blob/main/__tests__/05.spoon-contract-to-sandbox.ava.ts)  contracts.\n\nRunning on Testnet\n==================\n\nnear-workspaces is set up so that you can write tests once and run them against a local Sandbox node (the default behavior) or against [NEAR TestNet](https://docs.near.org/concepts/basics/networks). Some reasons this might be helpful:\n\n* Gives higher confidence that your contracts work as expected\n* You can test against deployed testnet contracts\n* If something seems off in Sandbox mode, you can compare it to testnet\n\nIn order to use Workspaces JS in testnet mode you will need to have a testnet account. You can create one [here](https://wallet.testnet.near.org/).\n\nYou can switch to testnet mode in three ways.\n\n1. When creating Worker set network to `testnet` and pass your master account:\n\n   ```ts\n   const worker = await Worker.init({\n     network: 'testnet',\n     testnetMasterAccountId: '<yourAccountName>',\n   })\n   ```\n\n2. Set the `NEAR_WORKSPACES_NETWORK` and `TESTNET_MASTER_ACCOUNT_ID` environment variables when running your tests:\n\n   ```bash\n   NEAR_WORKSPACES_NETWORK=testnet TESTNET_MASTER_ACCOUNT_ID=<your master account Id> node test.js\n   ```\n\n   If you set this environment variables and pass `{network: 'testnet', testnetMasterAccountId: <masterAccountId>}` to `Worker.init`, the config object takes precedence.\n\n3. If using `near-workspaces` with AVA, you can use a custom config file. Other test runners allow similar config files; adjust the following instructions for your situation.\n\n   Create a file in the same directory as your `package.json` called `ava.testnet.config.cjs` with the following contents:\n\n   ```js\n   module.exports = {\n     ...require('near-workspaces/ava.testnet.config.cjs'),\n     ...require('./ava.config.cjs'),\n   };\n   module.exports.environmentVariables = {\n        TESTNET_MASTER_ACCOUNT_ID: '<masterAccountId>',\n   };\n   ```\n\n   The [near-workspaces/ava.testnet.config.cjs](https://github.com/near/workspaces-js/blob/main/ava.testnet.config.cjs) import sets the `NEAR_WORKSPACES_NETWORK` environment variable for you. A benefit of this approach is that you can then easily ignore files that should only run in Sandbox mode.\n\n   Now you'll also want to add a `test:testnet` script to your `package.json`'s `scripts` section:\n\n   ```diff\n    \"scripts\": {\n      \"test\": \"ava\",\n   +  \"test:testnet\": \"ava --config ./ava.testnet.config.cjs\"\n    }\n    ```\n\n\nStepping through a testnet example\n----------------------------------\n\nLet's revisit a shortened version of the example from How It Works above, describing what will happen in Testnet.\n\n1. Create a `Worker`.\n\n   ```ts\n   const worker = await Worker.init();\n   ```\n\n   `Worker.init` creates a unique testnet account as root account.\n\n2. Write tests.\n\n   ```ts\n   await Promise.all([\n     async () => {\n       await alice.call(\n         contract,\n         'some_update_function',\n         {some_string_argument: 'cool', some_number_argument: 42}\n       );\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       assert.equal(result, 'whatever');\n     },\n     async () => {\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       assert.equal(result, 'some default');\n     }\n   ]);\n   ```\n\nNote: Sometimes account creation rate limits are reached on testnet, simply wait a little while and try again.\n\nRunning tests only in Sandbox\n-------------------------------\n\nIf some of your runs take advantage of Sandbox-specific features, you can skip these on testnet in two ways:\n\n1. You can skip entire sections of your files by checking `getNetworkFromEnv() === 'sandbox'`.\n\n  ```ts\n  let worker = Worker.init();\n  // things make sense to any network\n  const root = worker.rootAccount;\n  const alice = await root.createSubAccount('alice');\n\n\n  if (getNetworkFromEnv() === 'sandbox') {\n    // thing that only makes sense with sandbox\n  }\n  ```\n\n2. Use a separate testnet config file, as described under the \"Running on Testnet\" heading above. Specify test files to include and exclude in config file.\n\nPatch State on the Fly\n======================\n\nIn Sandbox-mode, you can add or modify any contract state, contract code, account or access key with `patchState`.\n\nYou cannot perform arbitrary mutation on contract state with transactions since transactions can only include contract calls that mutate state in a contract-programmed way. For example, with an NFT contract, you can perform some operation with NFTs you have ownership of, but you cannot manipulate NFTs that are owned by other accounts since the smart contract is coded with checks to reject that. This is the expected behavior of the NFT contract. However, you may want to change another person's NFT for a test setup. This is called \"arbitrary mutation on contract state\" and can be done with `patchState`. Alternatively you can stop the node, dump state at genesis, edit genesis, and restart the node. The later approach is more complicated to do and also cannot be performed without restarting the node.\n\nIt is true that you can alter contract code, accounts, and access keys using normal transactions via the `DeployContract`, `CreateAccount`, and `AddKey` [actions](https://nomicon.io/RuntimeSpec/Actions.html?highlight=actions#actions). But this limits you to altering your own account or sub-account. `patchState` allows you to perform these operations on any account.\n\nTo see an example of how to do this, see the [patch-state test](https://github.com/near/workspaces-js/blob/main/__tests__/02.patch-state.ava.ts).\n\nTime Traveling\n===============\n\nIn Sandbox-mode, you can forward time-related state (the block height, timestamp and epoch height) with `fastForward`.\n\nThis means contracts which require time sensitive data do not need to sit and wait the same amount of time for blocks on the sandbox to be produced.\nWe can simply just call the api to get us further in time.\n\nFor an example, see the [fast-forward test](./__tests__/08.fast-forward.ava.ts)\n\nNote: `fastForward` does not speed up an in-flight transactions.\n\nPro Tips\n========\n\n* `NEAR_WORKSPACES_DEBUG=true` \u2013 run tests with this environment variable set to get copious debug output and a full log file for each Sandbox instance.\n\n* `Worker.init` [config](https://github.com/near/workspaces-js/blob/main/packages/js/src/interfaces.ts) \u2013 you can pass a config object as the first argument to `Worker.init`. This lets you do things like:\n\n  * skip initialization if specified data directory already exists (the default behavior)\n\n    ```ts\n    Worker.init(\n      { rm: false, homeDir: './test-data/alice-owns-an-nft' },\n    )\n    ```\n\n  * always recreate such data directory instead with `rm: true`\n\n  * specify which port to run on\n\n  * and more!\n\nEnv variables\n========\n```text\nNEAR_CLI_MAINNET_RPC_SERVER_URL\nNEAR_CLI_TESTNET_RPC_SERVER_URL\n```\nClear them in case you want to get back to the default RPC server.\n\nExample:\n\n```shell\nexport NEAR_CLI_MAINNET_RPC_SERVER_URL=<put_your_rpc_server_url_here>\n```\nhere is a testcase: [jsonrpc.ava.js](./packages/js/__tests__/jsonrpc.ava.js)\n", "release_dates": ["2024-01-29T17:18:03Z", "2024-01-16T15:20:13Z", "2023-11-24T18:29:09Z", "2023-02-08T13:19:54Z", "2022-09-01T12:09:18Z", "2022-08-22T12:11:26Z", "2022-08-15T13:25:17Z", "2022-07-27T15:41:07Z", "2022-07-27T11:51:37Z", "2022-04-29T18:30:46Z", "2021-09-15T13:51:17Z", "2021-09-07T21:05:59Z", "2021-08-25T00:31:54Z", "2021-08-24T21:06:32Z", "2021-08-24T21:03:24Z", "2021-08-13T16:23:30Z", "2021-08-11T15:24:54Z", "2021-08-10T16:41:10Z"]}, {"name": "near-workspaces-rs", "description": "Write tests once, run them both on NEAR TestNet and a controlled NEAR Sandbox local environment via Rust", "language": "Rust", "license": null, "readme": "<div align=\"center\">\n\n  <h1>NEAR Workspaces (Rust Edition)</h1>\n\n  <p>\n    <strong>Rust library for automating workflows and writing tests for NEAR smart contracts. This software is not final, and will likely change.</strong>\n  </p>\n\n  <p>\n    <a href=\"https://crates.io/crates/near-workspaces\"><img src=\"https://img.shields.io/crates/v/near-workspaces.svg?style=flat-square\" alt=\"Crates.io version\" /></a>\n    <a href=\"https://crates.io/crates/near-workspaces\"><img src=\"https://img.shields.io/crates/d/near-workspaces.svg?style=flat-square\" alt=\"Download\" /></a>\n    <a href=\"https://docs.rs/near-workspaces\"><img src=\"https://docs.rs/near-workspaces/badge.svg\" alt=\"Reference Documentation\" /></a>\n  </p>\n</div>\n\n## Release notes\n\n**Release notes and unreleased changes can be found in the [CHANGELOG](CHANGELOG.md)**\n\n## Requirements\n\n- Rust v1.69.0 and up.\n- MacOS (x86 and M1) or Linux (x86) for sandbox tests.\n\n### WASM compilation not supported\n\n`near-workspaces-rs`, the library itself, does not currently compile to WASM. Best to put this dependency in `[dev-dependencies]` section of `Cargo.toml` if we were trying to run this library alongside something that already does compile to WASM, such as `near-sdk-rs`.\n\n## Simple Testing Case\n\nA simple test to get us going and familiar with `near-workspaces` framework. Here, we will be going through the NFT contract and how we can test it with `near-workspaces-rs`.\n\n### Setup -- Imports\n\nFirst, we need to declare some imports for convenience.\n\n```rust\n// macro allowing us to convert args into JSON bytes to be read by the contract.\nuse serde_json::json;\n```\n\nWe will need to have our pre-compiled WASM contract ahead of time and know its path. Refer to the respective near-sdk-{rs, js} repos/language for where these paths are located.\n\nIn this showcase, we will be pointing to the example's NFT contract:\n\n```rust\nconst NFT_WASM_FILEPATH: &str = \"./examples/res/non_fungible_token.wasm\";\n```\n\nNOTE: there is an unstable feature that will allow us to compile our projects during testing time as well. Take a look at the feature section [Compiling Contracts During Test Time](#compiling-contracts-during-test-time)\n\n### Setup -- Setting up Sandbox and Deploying NFT Contract\n\nThis includes launching our sandbox, loading our wasm file and deploying that wasm file to the sandbox environment.\n\n```rust\n\n#[tokio::test]\nasync fn test_nft_contract() -> anyhow::Result<()> {\n    let worker = near_workspaces::sandbox().await?;\n    let wasm = std::fs::read(NFT_WASM_FILEPATH)?;\n    let contract = worker.dev_deploy(&wasm).await?;\n```\n\nWhere\n\n- `anyhow` - A crate that deals with error handling, making it more robust for developers.\n- `worker` - Our gateway towards interacting with our sandbox environment.\n- `contract`- The deployed contract on sandbox the developer interacts with.\n\n### Initialize Contract & Test Output\n\nThen we'll go directly into making a call into the contract, and initialize the NFT contract's metadata:\n\n```rust\n    let outcome = contract\n        .call(\"new_default_meta\")\n        .args_json(json!({\n            \"owner_id\": contract.id(),\n        }))\n        .transact()  // note: we use the contract's keys here to sign the transaction\n        .await?;\n\n    // outcome contains data like logs, receipts and transaction outcomes.\n    println!(\"new_default_meta outcome: {:#?}\", outcome);\n```\n\nAfterwards, let's mint an NFT via `nft_mint`. This showcases some extra arguments we can supply, such as deposit and gas:\n\n```rust\n    use near_gas::NearGas;\n    use near_workspaces::types::NearToken;\n\n    let deposit = NearToken::from_near(100);\n    let outcome = contract\n        .call(\"nft_mint\")\n        .args_json(json!({\n            \"token_id\": \"0\",\n            \"token_owner_id\": contract.id(),\n            \"token_metadata\": {\n                \"title\": \"Olympus Mons\",\n                \"description\": \"Tallest mountain in charted solar system\",\n                \"copies\": 1,\n            },\n        }))\n        .deposit(deposit)\n        // nft_mint might consume more than default gas, so supply our own gas value:\n        .gas(NearGas::from_tgas(300))\n        .transact()\n        .await?;\n\n    println!(\"nft_mint outcome: {:#?}\", outcome);\n```\n\nThen later on, we can view our minted NFT's metadata via our `view` call into `nft_metadata`:\n\n```rust\n    let result: serde_json::Value = contract\n        .call(\"nft_metadata\")\n        .view()\n        .await?\n        .json()?;\n\n    println!(\"--------------\\n{}\", result);\n    println!(\"Dev Account ID: {}\", contract.id());\n    Ok(())\n}\n```\n\n### Updating Contract Afterwards\n\nNote that if our contract code changes, `near-workspaces-rs` does nothing about it since we are utilizing `deploy`/`dev_deploy` to merely send the contract bytes to the network. So if it does change, we will have to recompile the contract as usual, and point `deploy`/`dev_deploy` again to the right WASM files. However, there is a feature that will recompile contract changes for us: refer to the experimental/unstable [`compile_project`](#compiling-contracts-during-test-time) function for telling near-workspaces to compile a _Rust_ project for us.\n\n## Examples\n\nMore standalone examples can be found in `examples/src/*.rs`.\n\nTo run the above NFT example, execute:\n\n```sh\ncargo run --example nft\n```\n\n## Features\n\n### Choosing a network\n\n```rust\n#[tokio::main]  // or whatever runtime we want\nasync fn main() -> anyhow::Result<()> {\n    // Create a sandboxed environment.\n    // NOTE: Each call will create a new sandboxed environment\n    let worker = near_workspaces::sandbox().await?;\n    // or for testnet:\n    let worker = near_workspaces::testnet().await?;\n}\n```\n\n### Helper Functions\n\nNeed to make a helper functions utilizing contracts? Just import it and pass it around:\n\n```rust\nuse near_workspaces::Contract;\n\n// Helper function that calls into a contract we give it\nasync fn call_my_func(contract: &Contract) -> anyhow::Result<()> {\n    // Call into the function `contract_function` with args:\n    contract.call(\"contract_function\")\n        .args_json(serde_json::json!({\n            \"message\": msg,\n        })\n        .transact()\n        .await?;\n    Ok(())\n}\n```\n\nOr to pass around workers regardless of networks:\n\n```rust\nuse near_workspaces::{DevNetwork, Worker};\n\nconst CONTRACT_BYTES: &[u8] = include_bytes!(\"./relative/path/to/file.wasm\");\n\n// Create a helper function that deploys a specific contract\n// NOTE: `dev_deploy` is only available on `DevNetwork`s such as sandbox and testnet.\nasync fn deploy_my_contract(worker: Worker<impl DevNetwork>) -> anyhow::Result<Contract> {\n    worker.dev_deploy(CONTRACT_BYTES).await\n}\n```\n\n### View Account Details\n\nWe can check the balance of our accounts like so:\n\n```rs\n#[test(tokio::test)]\nasync fn test_contract_transfer() -> anyhow::Result<()> {\n    let transfer_amount = NearToken::from_millinear(100);\n    let worker = near_workspaces::sandbox().await?;\n\n    let contract = worker\n        .dev_deploy(include_bytes!(\"../target/res/your_project_name.wasm\"))\n        .await?;\n    contract.call(\"new\")\n        .max_gas()\n        .transact()\n        .await?;\n\n    let alice = worker.dev_create_account().await?;\n    let bob = worker.dev_create_account().await?;\n    let bob_original_balance = bob.view_account().await?.balance;\n\n    alice.call(contract.id(), \"function_that_transfers\")\n        .args_json(json!({ \"destination_account\": bob.id() }))\n        .max_gas()\n        .deposit(transfer_amount)\n        .transact()\n        .await?;\n    assert_eq!(\n        bob.view_account().await?.balance,\n        bob_original_balance + transfer_amount\n    );\n\n    Ok(())\n}\n```\n\nFor viewing other chain related details, look at the docs for [Worker](https://docs.rs/near-workspaces/latest/near_workspaces/struct.Worker.html), [Account](https://docs.rs/near-workspaces/latest/near_workspaces/struct.Account.html) and [Contract](https://docs.rs/near-workspaces/latest/near_workspaces/struct.Contract.html)\n\n### Spooning - Pulling Existing State and Contracts from Mainnet/Testnet\n\nThis example will showcase spooning state from a testnet contract into our local sandbox environment.\n\nWe will first start with the usual imports:\n\n```rust\nuse near_workspaces::network::Sandbox;\nuse near_workspaces::{Account, AccountId, BlockHeight, Contract, Worker};\n```\n\nThen specify the contract name from testnet we want to be pulling:\n\n```rust\nconst CONTRACT_ACCOUNT: &str = \"contract_account_name_on_testnet.testnet\";\n```\n\nLet's also specify a specific block ID referencing back to a specific time. Just in case our contract or the one we're referencing has been changed or updated:\n\n```rust\nconst BLOCK_HEIGHT: BlockHeight = 12345;\n```\n\nCreate a function called `pull_contract` which will pull the contract's `.wasm` file from the chain and deploy it onto our local sandbox. We'll have to re-initialize it with all the data to run tests.\n\n```rust\nasync fn pull_contract(owner: &Account, worker: &Worker<Sandbox>) -> anyhow::Result<Contract> {\n    let testnet = near_workspaces::testnet_archival().await?;\n    let contract_id: AccountId = CONTRACT_ACCOUNT.parse()?;\n```\n\nThis next line will actually pull down the relevant contract from testnet and set an initial balance on it with 1000 NEAR.\n\nFollowing that we will have to init the contract again with our own metadata. This is because the contract's data is to big for the RPC service to pull down, who's limits are set to 50kb.\n\n```rust\n\n    use near_workspaces::types::NearToken;\n    let contract = worker\n        .import_contract(&contract_id, &testnet)\n        .initial_balance(NearToken::from_near(1000))\n        .block_height(BLOCK_HEIGHT)\n        .transact()\n        .await?;\n\n    owner\n        .call(contract.id(), \"init_method_name\")\n        .args_json(serde_json::json!({\n            \"arg1\": value1,\n            \"arg2\": value2,\n        }))\n        .transact()\n        .await?;\n\n    Ok(contract)\n}\n```\n\n### Time Traveling\n\n`workspaces` testing offers support for forwarding the state of the blockchain to the future. This means contracts which require time sensitive data do not need to sit and wait the same amount of time for blocks on the sandbox to be produced. We can simply just call `worker.fast_forward` to get us further in time.\nNote: This is not to be confused with speeding up the current in-flight transactions; the state being forwarded in this case refers to time-related state (the block height, timestamp and epoch).\n\n```rust\n#[tokio::test]\nasync fn test_contract() -> anyhow::Result<()> {\n    let worker = near_workspaces::sandbox().await?;\n    let contract = worker.dev_deploy(WASM_BYTES).await?;\n\n    let blocks_to_advance = 10000;\n    worker.fast_forward(blocks_to_advance).await?;\n\n    // Now, \"do_something_with_time\" will be in the future and can act on future time-related state.\n    contract.call(\"do_something_with_time\")\n        .transact()\n        .await?;\n}\n```\n\nFor a full example, take a look at [examples/src/fast_forward.rs](https://github.com/near/near-workspaces-rs/blob/main/examples/src/fast_forward.rs).\n\n### Compiling Contracts During Test Time\n\nNote, this is an unstable feature and will very likely change. To enable it, add the `unstable` feature flag to `workspaces` dependency in `Cargo.toml`:\n\n```toml\n[dependencies]\nnear-workspaces = { version = \"...\", features = [\"unstable\"] }\n```\n\nThen, in our tests right before we call into `deploy` or `dev_deploy`, we can compile our projects:\n\n```rust\n#[tokio::test]\nasync fn test_contract() -> anyhow::Result<()> {\n    let wasm = near_workspaces::compile_project(\"path/to/contract-rs-project\").await?;\n\n    let worker = workspaces::sandbox().await?;\n    let contract = worker.dev_deploy(&wasm).await?;\n    ...\n}\n```\n\nFor a full example, take a look at [workspaces/tests/deploy_project.rs](https://github.com/near/near-workspaces-rs/blob/main/workspaces/tests/deploy_project.rs).\n\n### Coverage analysis of WASM executables\n\nGenerated code coverage reports help identify areas of code that are executed during testing, making it a valuable tool for ensuring the reliability and quality of your contracts.\n[Here](https://hknio.github.io/wasmcov/docs/NEAR) is the step by step guide documentation to achieve this.\n\nThe project can be found here: <https://github.com/hknio/wasmcov>\n\n### Other Features\n\nOther features can be directly found in the `examples/` folder, with some documentation outlining how they can be used.\n\n### Environment Variables\n\nThese environment variables will be useful if there was ever a snag hit:\n\n- `NEAR_RPC_TIMEOUT_SECS`: The default is 10 seconds, but this is the amount of time before timing out waiting for a RPC service when talking to the sandbox or any other network such as testnet.\n- `NEAR_SANDBOX_BIN_PATH`: Set this to our own prebuilt `neard-sandbox` bin path if we want to use a non-default version of the sandbox or configure nearcore with our own custom features that we want to test in near-workspaces.\n- `NEAR_SANDBOX_MAX_PAYLOAD_SIZE`: Sets the max payload size for sending transaction commits to sandbox. The default is 1gb and is necessary for patching large states.\n- `NEAR_SANDBOX_MAX_FILES`: Set the max amount of files that can be opened at a time in the sandbox. If none is specified, the default size of 4096 will be used. The actual near chain will use over 10,000 in practice, but for testing this should be much lower since we do not have a constantly running blockchain unless our tests take up that much time.\n- `NEAR_RPC_API_KEY`: This is the API key necessary for communicating with RPC nodes. This is useful when interacting with services such as Pagoda Console or a service that can access RPC metrics. This is not a **hard** requirement, but it is recommended to running the Pagoda example in the examples folder.\n- `NEAR_ENABLE_SANDBOX_LOG`: Set this to `1` to enable sandbox logging. This is useful for debugging issues with the `neard-sandbox` binary.\n", "release_dates": ["2024-01-25T08:40:01Z", "2023-10-30T19:30:32Z", "2023-10-05T08:11:02Z", "2022-11-30T23:24:46Z", "2022-11-30T23:19:17Z", "2022-10-07T05:12:55Z", "2022-09-01T22:54:36Z", "2022-08-18T01:50:45Z", "2022-07-21T20:44:58Z", "2022-06-20T23:30:59Z", "2022-05-11T04:17:09Z", "2022-04-13T18:55:37Z", "2022-04-06T01:03:46Z", "2022-01-24T18:39:08Z", "2021-12-21T18:30:19Z"]}, {"name": "nearcore", "description": "Reference client for NEAR Protocol", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "<br />\n<br />\n\n<p align=\"center\">\n<img src=\"docs/images/logo.svg\" width=\"240\">\n</p>\n\n<br />\n<br />\n\n\n## Reference implementation of NEAR Protocol\n\n![Buildkite](https://img.shields.io/buildkite/0eae07525f8e44a19b48fa937813e2c21ee04aa351361cd851)\n![Stable Status][stable-release]\n![Prerelease Status][prerelease]\n[![codecov][codecov-badge]][codecov-url]\n[![Discord chat][discord-badge]][discord-url]\n[![Telegram Group][telegram-badge]][telegram-url]\n\n[stable-release]: https://img.shields.io/github/v/release/nearprotocol/nearcore?label=stable\n[prerelease]: https://img.shields.io/github/v/release/nearprotocol/nearcore?include_prereleases&label=prerelease\n[ci-badge-master]: https://badge.buildkite.com/a81147cb62c585cc434459eedd1d25e521453120ead9ee6c64.svg?branch=master\n[ci-url]: https://buildkite.com/nearprotocol/nearcore\n[codecov-badge]: https://codecov.io/gh/nearprotocol/nearcore/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/nearprotocol/nearcore\n[discord-badge]: https://img.shields.io/discord/490367152054992913.svg\n[discord-url]: https://near.chat\n[telegram-badge]: https://cdn.jsdelivr.net/gh/Patrolavia/telegram-badge@8fe3382b3fd3a1c533ba270e608035a27e430c2e/chat.svg\n[telegram-url]: https://t.me/cryptonear\n\n## About NEAR\n\nNEAR's purpose is to enable community-driven innovation to benefit people around the world.\n\nTo achieve this purpose, *NEAR* provides a developer platform where developers and entrepreneurs can create apps that put users back in control of their data and assets, which is the foundation of [\"Open Web\" movement][open-web-url].\n\nOne of the components of *NEAR* is the NEAR Protocol, an infrastructure for server-less applications and smart contracts powered by a blockchain.\nNEAR Protocol is built to deliver usability and scalability of modern PaaS like Firebase at fraction of the prices that blockchains like Ethereum charge.\n\nOverall, *NEAR* provides a wide range of tools for developers to easily build applications:\n - [JS Client library][js-api] to connect to NEAR Protocol from your applications.\n - [Rust][rust-sdk] and [JavaScript/TypeScript][js-sdk] SDKs to write smart contracts and stateful server-less functions.\n - [Several essential repositories](https://github.com/near/dx) to guide you in building across Near's Open Web Platform.\n - [Numerous examples][examples-url] with links to hack on them right inside your browser.\n - [Lots of documentation][docs-url], with [Tutorials][tutorials-url] and [API docs][api-docs-url].\n\n[open-web-url]: https://techcrunch.com/2016/04/10/1301496/\n[js-api]: https://github.com/near/near-api-js\n[rust-sdk]: https://github.com/near/near-sdk-rs\n[js-sdk]: https://github.com/near/near-sdk-js\n[examples-url]: https://near.dev\n[docs-url]: https://docs.near.org\n[tutorials-url]: https://docs.near.org/tutorials/welcome\n[api-docs-url]: https://docs.near.org/api/rpc/introduction\n\n## Join the Network\n\nThe easiest way to join the network, is by using the `nearup` command, which you can install as follows:\n\n```bash\npip3 install --user nearup\n```\n\nYou can join all the active networks:\n* mainnet: `nearup run mainnet`\n* testnet: `nearup run testnet`\n* betanet: `nearup run betanet`\n\nCheck the `nearup` repository for [more details](https://github.com/near/nearup) on how to run with or without docker.\n\nTo learn how to become validator, checkout [documentation](https://docs.near.org/docs/develop/node/validator/staking-and-delegation).\n\n## Contributing\n\nThe workflow and details of setup to contribute are described in [CONTRIBUTING.md](CONTRIBUTING.md), and security policy is described in [SECURITY.md](SECURITY.md).\nTo propose new protocol changes or standards use [Specification & Standards repository](https://github.com/nearprotocol/NEPs).\n\n## Getting in Touch\n\nWe use Zulip for semi-synchronous technical discussion, feel free to chime in:\n\nhttps://near.zulipchat.com/\n\nFor non-technical discussion and overall direction of the project, see our Discourse forum:\n\nhttps://gov.near.org\n", "release_dates": ["2024-02-01T18:10:19Z", "2024-01-31T12:09:14Z", "2024-01-29T11:53:38Z", "2024-01-24T12:55:15Z", "2024-01-03T19:32:23Z", "2024-01-03T18:22:34Z", "2023-12-18T19:26:23Z", "2023-12-14T11:24:12Z", "2023-10-30T23:01:36Z", "2023-10-19T15:32:33Z", "2023-09-19T16:01:18Z", "2023-07-25T16:43:48Z", "2023-06-21T16:00:02Z", "2023-05-30T10:24:09Z", "2023-05-30T09:39:16Z", "2023-05-09T14:09:06Z", "2023-04-26T15:51:38Z", "2023-03-29T15:14:08Z", "2023-03-29T12:47:59Z", "2023-03-23T14:10:19Z", "2023-03-23T14:53:04Z", "2023-03-22T09:10:12Z", "2023-03-06T11:43:08Z", "2023-02-14T17:33:00Z", "2023-02-07T10:56:59Z", "2023-02-02T11:39:10Z", "2023-02-01T17:54:00Z", "2023-01-30T15:24:37Z", "2023-01-11T10:01:14Z", "2023-01-03T15:19:53Z"]}, {"name": "nearorg_container", "description": "top level container app for near.org marketing and the dev.near.org developer network ", "language": "JavaScript", "license": null, "readme": "# nearorg_container\ntop level container app for near.org marketing and the dev.near.org developer network \n", "release_dates": []}, {"name": "nearorg_marketing", "description": null, "language": "HTML", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# nearorg_marketing\n\nAuto-generated static marketing content \n", "release_dates": []}, {"name": "nearsocial_vm", "description": "Fork of NearSocial/VM", "language": "JavaScript", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": null, "release_dates": []}, {"name": "nearup", "description": "Public scripts to launch NEAR Protocol betanet and testnet node", "language": "Python", "license": null, "readme": "# nearup\n\n[![PyPI version](https://badge.fury.io/py/nearup.svg)](https://pypi.org/project/nearup/)\n\nLaunch NEAR `betanet` and `testnet` nodes.\n\n- [Prepare](#prepare)\n- [Install](#install)\n  * [Upgrade](#upgrade)\n- [Getting Started](#getting-started)\n  * [Using the official binary](#using-the-official-binary)\n  * [Using a locally compiled binary](#using-a-locally-compiled-binary)\n  * [Spawn a local network](#spawn-a-local-network)\n- [Operating](#operating)\n  * [Stop a running node or all running nodes in local network](#stop-a-running-node-or-all-running-nodes-in-local-network)\n  * [Additional options](#additional-options)\n- [Docker](#docker)\n  * [Building the docker image](#building-the-docker-image)\n  * [Pull the docker image](#pull-the-docker-image)\n  * [Running `nearup` with Docker](#running-nearup-with-docker)\n    + [Running in detached mode](#running-in-detached-mode)\n  * [Check if the container is running](#check-if-the-container-is-running)\n  * [Execute `nearup` commands in container](#execute-nearup-commands-in-container)\n  * [`nearup` logs](#nearup-logs)\n  * [Stop the docker container](#stop-the-docker-container)\n- [Development](#development)\n  * [Common commands](#common-commands)\n\n## Prepare\n\nBefore you proceed, make sure you have `Python 3` and `pip3` installed.\n\nOn ubuntu, you can install with,\n\n```\nsudo apt update\nsudo apt install python3 python3-pip python3-dev\n```\n\n:warning: Upgrade pip if needed you are getting a Permission Denied error or version of pip (pip3 --version) is below 20.\n\n```\npip3 install --upgrade pip\n```\n\n## Install\n\n:warning: Make sure that you are installing with the `--user` flag.\n\n```\npip3 install --user nearup\n```\n\nVerify that you local installation is in `python3 -m site --user-base` under bin directory by running:\n\n```\nwhich nearup\n```\n\n:warning: If the above returns nothing, add `nearup` to your `$PATH` in `~/.profile`, `~/.bashrc`, or appropriate shell config.\n\n```\nUSER_BASE_BIN=$(python3 -m site --user-base)/bin\nexport PATH=\"$USER_BASE_BIN:$PATH\"\n```\n\n### Upgrade\n\n:warning: If you have already installed `nearup`, you can upgrade to the latest version by using the command below\n\n```\npip3 install --user --upgrade nearup\n```\n\n## Getting Started\n\n### Using the official binary\n\n**This is recommended for running on servers**\n\nYou can start your node with (remove the `--interactive` flag if you don't want to be prompted):\n\n```\nnearup run betanet --interactive\n```\n\nReplace `betanet` if you want to use a different network.\n\n### Using a locally compiled binary\n\n**Recommended for security critical validators or during development.**\n\nClone and compile nearcore with `make release` or `make debug` first.\n\n```\nnearup run betanet --binary-path path/to/nearcore/target/{debug, release}\n```\n\nReplace `betanet` with `testnet` if you want to use a different network.\n\n### Spawn a local network\n\nClone and compile nearcore with `make release` or `make debug` first.\n\n```\nnearup run localnet --binary-path path/to/nearcore/target/{debug, release}\n```\n\nBy default it will spawn 4 nodes validating in 1 shard.\nRPC ports of each nodes will be consecutive starting from 3030.\nAccess one node status using http://localhost:3030/status\n\n## Operating\n\n### Stop a running node or all running nodes in local network\n\n```\nnearup stop\n```\n\n### Additional options\n\n```\nnearup run betanet --help\n```\n\n## Docker\n\n### Building the docker image\n\n```\ndocker build . -t nearup/nearprotocol\n```\n\n### Pull the docker image\n\nIf you don't want to build a docker image locally, you can pull the `latest` from Docker Hub,\n\n```\ndocker pull nearup/nearprotocol\n```\n\n### Running `nearup` with Docker\n\n:warning: `nearup` and `neard` are running inside the container, to ensure you don't lose your data which should live on the host you have to mount the ~/.near folder.\nTo run the `nearup` docker image run:\n\n```\ndocker run -v $HOME/.near:/root/.near -p 3030:3030 --name nearup nearup/nearprotocol run betanet\n```\n\n#### Running in detached mode\n\nTo run `nearup` in docker's detached (non-blocking) mode, you can add `-d` to the `docker run` command,\n\n```\ndocker run -v $HOME/.near:/root/.near -p 3030:3030 -d --name nearup nearup/nearprotocol run betanet\n```\n\n### Check if the container is running\n\n```\ndocker ps\n```\n\n```\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS           PORTS               NAMES\nfc17f7f7fae0        nearup              \"/root/start.sh run \u2026\"   3 minutes ago       Up 3 minutes     324324         mystifying_moore\n```\n\n### Execute `nearup` commands in container\n\nTo execute other `nearup` commands like `logs`, `stop`, `run`, you can use `docker exec`,\n\n```\ndocker exec nearup nearup logs\ndocker exec nearup nearup stop\ndocker exec nearup nearup run {betanet/testnet}\n```\n\n(The container is running in a busy wait loop, so the container won't die.)\n\n### `nearup` logs\n\nTo get the `neard` logs run:\n\n```\ndocker exec nearup nearup logs\n```\n\nor,\n\n```\ndocker exec nearup nearup logs --follow\n```\n\nTo get the `nearup` logs run:\n\n```\ndocker logs -f nearup\n```\n\n### Stop the docker container\n\n```\ndocker kill nearup\n```\n\n## Development\n\nTo build a development image:\n\n```\ndocker build . -t nearup/nearprotocol:dev\n```\n\nThe following will mount your repo directory into the running container and drop you into a shell to run test commands.\n\n```\ndocker run -it --entrypoint \"\" -v $PWD:/root/nearup -v $HOME/.near:/root/.near -w /root/nearup nearup/nearprotocol:dev bash\n```\n\n### Common commands\n\nFor testing and other checks, `nearup` uses `tox`.\n\nTo install,\n\n```\npip3 install --user tox\n```\n\n**Unit tests**\n\n```\ntox\n```\n\n**Unit tests w/ coverage**\n\n```\ntox -e coverage\n```\n\n**Linter checks**\n\n```\ntox -e lint\n```\n\n**Python style checks**\n\n```\ntox -e style\n```\n", "release_dates": ["2021-07-12T12:41:13Z", "2021-06-17T06:28:20Z", "2021-06-16T15:22:57Z", "2021-05-18T01:33:24Z", "2021-04-22T17:11:32Z", "2021-01-25T23:34:13Z", "2020-10-07T12:21:07Z", "2020-10-07T12:20:21Z"]}, {"name": "NEPs", "description": "The Near Enhancement Proposals repository", "language": "JavaScript", "license": null, "readme": "# NEAR Protocol Specifications and Standards\n\n[![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://near.zulipchat.com/#narrow/stream/320497-nep-standards)\n[![CI](https://github.com/near/NEPs/actions/workflows/build.yml/badge.svg)](https://github.com/near/NEPs/actions/workflows/build.yml)\n\nThis repository hosts the current NEAR Protocol specification and standards.\nThis includes the core protocol specification, APIs, contract standards, processes, and workflows.\n\nChanges to the protocol specification and standards are called NEAR Enhancement Proposals (NEPs).\n\n## NEPs\n\n| NEP #                                                             | Title                                    | Author                                      | Status |\n| ----------------------------------------------------------------- |------------------------------------------|---------------------------------------------|--------|\n| [0001](https://github.com/near/NEPs/blob/master/neps/nep-0001.md) | NEP Purpose and Guidelines               | @jlogelin                                   | Living |\n| [0021](https://github.com/near/NEPs/blob/master/neps/nep-0021.md) | Fungible Token Standard (Deprecated)     | @evgenykuzyakov                             | Final  |\n| [0141](https://github.com/near/NEPs/blob/master/neps/nep-0141.md) | Fungible Token Standard                  | @evgenykuzyakov @oysterpack                 | Final  |\n| [0145](https://github.com/near/NEPs/blob/master/neps/nep-0145.md) | Storage Management                       | @evgenykuzyakov                             | Final  |\n| [0148](https://github.com/near/NEPs/blob/master/neps/nep-0148.md) | Fungible Token Metadata                  | @robert-zaremba @evgenykuzyakov @oysterpack | Final  |\n| [0171](https://github.com/near/NEPs/blob/master/neps/nep-0171.md) | Non Fungible Token Standard              | @mikedotexe @evgenykuzyakov @oysterpack     | Final  |\n| [0177](https://github.com/near/NEPs/blob/master/neps/nep-0177.md) | Non Fungible Token Metadata              | @chadoh @mikedotexe                         | Final  |\n| [0178](https://github.com/near/NEPs/blob/master/neps/nep-0178.md) | Non Fungible Token Approval Management   | @chadoh @thor314                            | Final  |\n| [0181](https://github.com/near/NEPs/blob/master/neps/nep-0181.md) | Non Fungible Token Enumeration           | @chadoh @thor314                            | Final  |\n| [0199](https://github.com/near/NEPs/blob/master/neps/nep-0199.md) | Non Fungible Token Royalties and Payouts | @thor314 @mattlockyer                       | Final  |\n| [0245](https://github.com/near/NEPs/blob/master/neps/nep-0245.md) | Multi Token Standard                     | @zcstarr @riqi @jriemann @marcos.sun        | Review |\n| [0264](https://github.com/near/NEPs/blob/master/neps/nep-0264.md) | Promise Gas Weights                      | @austinabell                                | Final  |\n| [0297](https://github.com/near/NEPs/blob/master/neps/nep-0297.md) | Events Standard                          | @telezhnaya                                 | Final  |\n| [0330](https://github.com/near/NEPs/blob/master/neps/nep-0330.md) | Source Metadata                          | @BenKurrek                                  | Review |\n| [0366](https://github.com/near/NEPs/blob/master/neps/nep-0366.md) | Meta Transactions                        | @ilblackdragon @e-uleyskiy @fadeevab        | Draft  |\n| [0399](https://github.com/near/NEPs/blob/master/neps/nep-0399.md) | Flat Storage                             | @Longarithm @mzhangmzz                      | Review |\n| [0448](https://github.com/near/NEPs/blob/master/neps/nep-0448.md) | Zero-balance Accounts                    | @bowenwang1996                              | Final  |\n| [0455](https://github.com/near/NEPs/blob/master/neps/nep-0455.md) | Parameter Compute Costs                  | @akashin @jakmeier                          | Final  |\n| [0514](https://github.com/near/NEPs/blob/master/neps/nep-0514.md) | Fewer Block Producer Seats in `testnet`  | @nikurt                                     | Final  |\n\n\n## Specification\n\nNEAR Specification is under active development.\nSpecification defines how any NEAR client should be connecting, producing blocks, reaching consensus, processing state transitions, using runtime APIs, and implementing smart contract standards as well.\n\n## Standards & Processes\n\nStandards refer to various common interfaces and APIs that are used by smart contract developers on top of the NEAR Protocol.\nFor example, such standards include SDK for Rust, API for fungible tokens or how to manage user's social graph.\n\nProcesses include release process for spec, clients or how standards are updated.\n\n### Contributing\n\n#### Expectations\n\nIdeas presented ultimately as NEPs will need to be driven by the author through the process. It's an exciting opportunity with a fair amount of responsibility from the contributor(s). Please put care into the details. NEPs that do not present convincing motivation, demonstrate understanding of the impact of the design, or are disingenuous about the drawbacks or alternatives tend to be poorly received. Again, by the time the NEP makes it to the pull request, it has a clear plan and path forward based on the discussions in the governance forum.\n\n#### Process\n\nSpec changes are ultimately done via pull requests to this repository (formalized process [here](neps/nep-0001.md)). In an effort to keep the pull request clean and readable, please follow these instructions to flesh out an idea.\n\n1. Sign up for the [governance site](https://gov.near.org/) and make a post to the appropriate section. For instance, during the ideation phase of a standard, one might start a new conversation in the [Development \u00bb Standards section](https://gov.near.org/c/dev/standards/29) or the [NEP Discussions Forum](https://github.com/near/NEPs/discussions).\n2. The forum has comment threading which allows the community and NEAR Collective to ideate, ask questions, wrestle with approaches, etc. If more immediate responses are desired, consider bringing the conversation to [Zulip](https://near.zulipchat.com/#narrow/stream/320497-nep-standards).\n3. When the governance conversations have reached a point where a clear plan is evident, create a pull request, using the instructions below.\n\n   - Clone this repository and create a branch with \"my-feature\".\n   - Update relevant content in the current specification that are affected by the proposal.\n   - Create a Pull request, using [nep-0000-template.md](nep-0000-template.md) to describe motivation and details of the new Contract or Protocol specification. In the document header, ensure the `Status` is marked as `Draft`, and any relevant discussion links are added to the `DiscussionsTo` section.\n     Use the pull request number padded with zeroes. For instance, the pull request `219` should be created as `neps/nep-0219.md`.\n   - Add your Draft standard to the `NEPs` section of this README.md. This helps advertise your standard via github.\n   - Update Docusaurus documentation under the `specs/Standards` to describe the contract standard at a high level, how to integrate it into a Dapp, and a link to the standard document (ie. `neps/nep-0123.md`). This helps advertise your standard via [nomicon](https://nomicon.io/). Any related nomicon sections should be prefixed and styled using the following snippet:\n\n   ```text\n   :::caution\n   This is part of proposed spec [NEP-123](https://github.com/near/NEPs/blob/master/neps/nep-0123.md) and subject to change.\n   :::\n   ```\n\n   - Once complete, submit the pull request for editor review.\n\n   - The formalization dance begins:\n     - NEP Editors, who are unopinionated shepherds of the process, check document formatting, completeness and adherence to [NEP-0001](neps/nep-0001.md) and approve the pull request.\n     - Once ready, the author updates the NEP status to `Review` allowing further community participation, to address any gaps or clarifications, normally part of the Review PR.\n     - NEP Editors mark the NEP as `Last Call`, allowing a 14 day grace period for any final community feedback. Any unresolved show stoppers roll the state back to `Review`.\n     - NEP Editors mark the NEP as `Final`, marking the standard as complete. The standard should only be updated to correct errata and add non-normative clarifications.\n\nTip: build consensus and integrate feedback. NEPs that have broad support are much more likely to make progress than those that don't receive any comments. Feel free to reach out to the NEP assignee in particular to get help identify stakeholders and obstacles.\n\n### Running Docusaurus\n\nThis repository uses [Docusaurus](https://docusaurus.io/) for the [Nomicon website](https://nomicon.io).\n\n1. Move into the `/website` folder where you will run the following commands:\n\n   - Make sure all the dependencies for the website are installed:\n\n     ```sh\n     # Install dependencies\n     yarn\n     ```\n\n   - Run the local docs development server\n\n     ```sh\n     # Start the site\n     yarn start\n     ```\n\n     _Expected Output_\n\n     ```sh\n     # Website with live reload is started\n     Docusaurus server started on port 3000\n     ```\n\n     The website for docs will open your browser locally to port `3000`\n\n2. Make changes to the docs\n\n3. Observe those changes reflected in the local docs\n\n4. Submit a pull request with your changes\n", "release_dates": []}, {"name": "nft-bid-market", "description": "NFT market with bidding logic for an existing platform", "language": "Rust", "license": null, "readme": "# NFT bidding market\n", "release_dates": []}, {"name": "nitro", "description": "Nitro goes vroom and fixes everything", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/arbitrum/logo_color.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n  </a>\n\n  <h3 align=\"center\">Arbitrum Nitro</h3>\n\n  <p align=\"center\">\n    <a href=\"https://developer.arbitrum.io/\"><strong>Next Generation Ethereum L2 Technology \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## About Arbitrum Nitro\n\n<img src=\"https://arbitrum.io/assets/arbitrum/logo_color.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n\nNitro is the latest iteration of the Arbitrum technology. It is a fully integrated, complete\nlayer 2 optimistic rollup system, including fraud proofs, the sequencer, the token bridges, \nadvanced calldata compression, and more.\n\nSee the live docs-site [here](https://developer.arbitrum.io/) (or [here](https://github.com/OffchainLabs/arbitrum-docs) for markdown docs source.)\n\nSee [here](./audits) for security audit reports.\n\nThe Nitro stack is built on several innovations. At its core is a new prover, which can do Arbitrum\u2019s classic \ninteractive fraud proofs over WASM code. That means the L2 Arbitrum engine can be written and compiled using \nstandard languages and tools, replacing the custom-designed language and compiler used in previous Arbitrum\nversions. In normal execution, \nvalidators and nodes run the Nitro engine compiled to native code, switching to WASM if a fraud proof is needed. \nWe compile the core of Geth, the EVM engine that practically defines the Ethereum standard, right into Arbitrum. \nSo the previous custom-built EVM emulator is replaced by Geth, the most popular and well-supported Ethereum client.\n\nThe last piece of the stack is a slimmed-down version of our ArbOS component, rewritten in Go, which provides the \nrest of what\u2019s needed to run an L2 chain: things like cross-chain communication, and a new and improved batching \nand compression system to minimize L1 costs.\n\nEssentially, Nitro runs Geth at layer 2 on top of Ethereum, and can prove fraud over the core engine of Geth \ncompiled to WASM.\n\nArbitrum One successfully migrated from the Classic Arbitrum stack onto Nitro on 8/31/22. (See [state migration](https://developer.arbitrum.io/migration/state-migration) and [dapp migration](https://developer.arbitrum.io/migration/dapp_migration) for more info).\n\n## License\n\nWe currently have Nitro [licensed](./LICENSE) under a Business Source License, similar to our friends at Uniswap and Aave, with an \"Additional Use Grant\" to ensure that everyone can have full comfort using and running nodes on all public Arbitrum chains.\n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n\n\n", "release_dates": []}, {"name": "node-docs", "description": "NEAR Nodes documentation", "language": "CSS", "license": null, "readme": "<br />\n<br />\n\n<p align=\"center\">\n<img src=\"website/static/img/near_logo.svg\" width=\"400\">\n</p>\n\n<br />\n<br />\n\n## NEAR Protocol - scalable and usable blockchain\n\n[![Discord](https://img.shields.io/discord/490367152054992913.svg)](http://near.chat)\n[![CI](https://github.com/near/node-docs/actions/workflows/build.yml/badge.svg)](https://github.com/near/node-docs/actions/workflows/build.yml)\n\n* \u2696\ufe0f NEAR Protocol is a new smart-contract platform that delivers scalability and usability.\n* \ud83d\udee0 Through sharding, it will linearly scale with the number of validation nodes on the network.\n* \ud83d\udddd Leveraging WebAssembly (via Rust and AssemblyScript), more sane contract management, ephemeral accounts and many other advancements, NEAR\nfinally makes using a blockchain protocol easy for both developers and consumers.\n\n## Quick start\n\nCheck out the following links\n\n- Deployed, live node documentation: https://near-nodes.io\n- Example applications: https://near.dev\n- Community chat: https://near.chat\n\n## Contributing\n\nNEAR uses [Docusaurus](https://docusaurus.io) for documentation.  Please refer to their documentation for details on major structural contributions to the documentation.\n\nFor simple content changes you have 2 options\n\n- [Submit an issue](https://github.com/near/node-docs/issues)\n- [Submit a pull request](https://github.com/near/node-docs/pulls) *(we prefer PRs of course)*\n\n### The instant PR\n\nThis is the fastest way to submit content changes directly from the page where you notice a mistake.\n\n1. Open any page in the docs on https://near-nodes.io\n2. Click the `[ Edit ]` button at the top right hand side of _every_ content page\n3. Make your edits to the document that opens in GitHub by clicking the \u270e (pencil) icon\n4. Submit a PR with your changes and comments for context\n\n### The typical PR\n\nThis is the standard fork-branch-commit workflow for submitting pull requests to open source repositories\n\n1. Fork this repo to your own GitHub account (or just clone it directly if you are currently a member of NEAR)\n\n2. Open your editor to the _top level repo folder_ to view the directory structure as seen below\n\n3. Move into the `/website` folder where you will run the following commands:\n\n   - Make sure all the dependencies for the website are installed:\n\n     ```sh\n     # Install dependencies\n     yarn\n     ```\n\n   - Run the local docs development server\n\n      ```sh\n      # Start the site\n      yarn start\n      ```\n\n      _Expected Output_\n\n      ```sh\n      # Website with live reload is started\n      Docusaurus server started on port 3000\n      ```\n\n      The website for docs will open your browser locally to port `3000` \n\n4. Make changes to the docs\n\n5. Observe those changes reflected in the local docs\n\n6. Submit a pull request with your changes\n", "release_dates": []}, {"name": "notifications-server", "description": null, "language": "TypeScript", "license": null, "readme": "# NEAR Notifications Server\n\n## Stack\n\nLanguage: Typescript\n\nFramework: [NestJS](https://nestjs.com/)\n\nORM: [Prisma](https://www.prisma.io/)\n", "release_dates": []}, {"name": "notifications-serverless-function", "description": null, "language": "JavaScript", "license": null, "readme": "# Notifications Serverless Function\n\n## Running locally\n\n`npm start`\n\n## Testing\n\n1. Run the Pub/Sub emulator.\n2. Run the function:\n\n`npm start`\n\n3. Create a topic:\n\n```console\ncurl --location --request PUT 'http://localhost:8085/v1/projects/test-project/topics/test'\n```\n\n4. Create a push subscription:\n\n```console\ncurl --location --request PUT 'http://localhost:8085/v1/projects/test-project/subscriptions/test-sub4' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"topic\":\"projects/test-project/topics/test\",\n\"pushConfig\":{\"pushEndpoint\":\"http://localhost:8383/projects/test-project/topics/test\"\n}}'\n```", "release_dates": []}, {"name": "octopus", "description": "Security Analysis tool for WebAssembly module (wasm) and Blockchain Smart Contracts (BTC/ETH/NEO/EOS)", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Octopus\n\n<p align=\"center\">\n\t<img src=\"/images/logo-medium.png\" height=\"300px\"/>\n</p>\n\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/quoscient/octopus/graphs/commit-activity)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)\n\nHuge thanks to [QuoScient](https://www.quoscient.io/) for having sponsored this project.\n\n**Octopus is a security analysis framework for WebAssembly module and Blockchain Smart Contract.**\n\nThe purpose of Octopus is to provide an easy way to analyze closed-source WebAssembly module and smart contracts bytecode to understand deeper their internal behaviours.\n\n\n## Features\n\n- **Explorer**: Octopus JSON-RPC client implementation to communicate with blockchain platforms\n- **Disassembler**: Octopus can translate bytecode into assembly representation\n- **Control Flow Analysis**: Octopus can generate a Control Flow Graph (CFG) \n- **Call Flow Analysis**: Octopus can generate a Call Flow Graph (function level) \n- **IR conversion (SSA)**: Octopus can simplify assembly into Static Single Assignment (SSA) representation\n- **Symbolic Execution**: Octopus use symbolic execution to find new paths into a program\n\n## Platforms / Architectures\n\nOctopus support the following types of programs/smart contracts:\n* WebAssembly module (WASM)\n* Bitcoin script (BTC script)\n* Ethereum smart contracts (EVM bytecode & Ewasm)\n* EOS smart contracts (WASM)\n* NEO smart contracts (AVM bytecode)\n\n\n|| BTC | ETH (EVM) | ETH (WASM) | EOS | NEO || WASM |\n|:--------------------:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| **Explorer** | :heavy_check_mark: | :heavy_check_mark:| :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | :o: |\n|**Disassembler** | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | :heavy_check_mark: |\n|**Control Flow Analysis** | :heavy_multiplication_x: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | :heavy_check_mark: |\n|**Call Flow Analysis** | :heavy_multiplication_x: | :heavy_plus_sign: | :heavy_check_mark: | :heavy_check_mark: | :heavy_plus_sign: | | :heavy_check_mark: |\n|**IR conversion (SSA)** | :heavy_multiplication_x: | :heavy_check_mark: | :heavy_plus_sign: | :heavy_plus_sign: | :heavy_multiplication_x: | | :heavy_check_mark: |\n|**Symbolic Execution** | :heavy_multiplication_x: | :heavy_plus_sign: | :heavy_plus_sign: | :heavy_plus_sign: | :heavy_multiplication_x: | | :heavy_plus_sign: |\n\n\n* PyPI package :heavy_check_mark:\n* Docker :heavy_check_mark:\n\n:heavy_check_mark: **DONE** / :heavy_plus_sign: **WIP** / :heavy_multiplication_x: **TODO** / :o: **N/A**\n\n\n## Requirements\n\nOctopus is supported on Linux (ideally Ubuntu 16.04) and requires Python >=3.5 (ideally 3.6).\n\nDependencies:\n* Graph generation: [graphviz](https://graphviz.gitlab.io/download/)\n* Explorer: [requests](http://docs.python-requests.org/en/master/#)\n* Symbolic Execution: [z3-solver](https://pypi.org/project/z3-solver/)\n* Wasm: [wasm](https://github.com/athre0z/wasm)\n\n## Quick Start\n\n- Install system dependencies\n```\n# Install system dependencies\nsudo apt-get update && sudo apt-get install python-pip graphviz xdg-utils -y\n```\n\n- Install Octopus:\n```\n# Download Octopus\ngit clone https://github.com/quoscient/octopus\ncd octopus\n\n# Install Octopus library/CLI and its dependencies\npython3 setup.py install\n```\nor\n```\n# but prefer the first way to install if possible\npip3 install octopus\n```\n\n- Run tests\n```\n# Run tests for all platforms (disassembly, CFG, ...)\n./run_tests.sh\n# Run tests that require internet access (explorer tests)\n./run_explorer_tests.sh\n\n# Run tests for only one platforms\n# {btc, eth, eos, neo, wasm}_run_tests.sh\ncd octopus/tests/\n./wasm_run_tests.sh\n```\n\n#### Docker container\n\nA docker container providing the toolset is available at [docker hub](https://hub.docker.com/r/smartbugs/octopus). \nIn a terminal, run the following commands:\n\n```\ndocker pull smartbugs/octopus\ndocker run -it smartbugs/octopus\ncd octopus\npython3 octopus_eth_evm.py -s -f examples/ETH/evm_bytecode/61EDCDf5bb737ADffE5043706e7C5bb1f1a56eEA.bytecode\n```\n\n## Command-line tools\n\n* WebAssembly: [octopus_wasm.py](octopus_wasm.py)\n* Ethereum (EVM): [octopus_eth_evm.py](octopus_eth_evm.py)\n\n\n## In-depth Examples using APIs\n\n<details><summary>WebAssembly</summary>\n<p>\n\n#### Disassembler\n\nDisassembly of a Wasm module:\n```python\nfrom octopus.arch.wasm.disassembler import WasmDisassembler\n\nFILE = \"examples/wasm/samples/helloworld.wasm\"\n\nwith open(FILE, 'rb') as f:\n    module_bytecode = f.read()\n\ndisasm = WasmDisassembler()\n# return list of functions instructions (list)\nprint(disasm.disassemble_module(module_bytecode))\n#[[<octopus.arch.wasm.instruction.WasmInstruction at 0x7f85e4904278>,<octopus.arch.wasm.instruction.WasmInstruction at 0x7f85e4904f60>,<octopus.arch.wasm.instruction.WasmInstruction at 0x7f85e4904ef0>]]\n\nprint()\n# return text of functions code\nprint(disasm.disassemble_module(module_bytecode, r_format='text'))\n# func 0\n# i32.const 0\n# call 0\n# end\n```\n\nDisassembly of wasm bytecode:\n```python\nfrom octopus.arch.wasm.disassembler import WasmDisassembler\n\n# bytecode in WebAssembly is the function code (i.e. function body)\nbytecode = b'\\x02\\x7fA\\x18\\x10\\x1cA\\x00\\x0f\\x0b'\n# create a WasmDisassembler object\ndisasm = WasmDisassembler(bytecode)\n\n# disassemble bytecode into a list of WasmInstruction\n# attributes r_format='list' by default\nprint(disasm.disassemble())\n\n#[<octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904eb8>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904278>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904390>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904ef0>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904f60>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4901048>]\nprint()\nprint(disasm.disassemble(r_format='reverse'))\n\n#{0: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4901048>, 1: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904240>, 2: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904f60>, 3: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904ef0>, 4: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904278>, 5: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904390>}\nprint()\nprint(disasm.disassemble(r_format='text'))\n# block -1\n# i32.const 24\n# call 28\n# i32.const 0\n# return\n# end\n```\n\n#### ModuleAnalyzer\n\n```python\nfrom octopus.arch.wasm.analyzer import WasmModuleAnalyzer\n\nFILE = \"examples/wasm/samples/hello_wasm_studio.wasm\"\n\nwith open(FILE, 'rb') as f:\n    module_bytecode = f.read()\n\n# return list of functions instructions (list)\n# attributes analysis=True by default\nanalyzer = WasmModuleAnalyzer(module_bytecode)\n\n# show analyzer attributes\nprint(analyzer.func_prototypes)\n# [('putc_js', 'i32', ''),\n#  ('__syscall0', 'i32', 'i32'),\n#  ('__syscall3', 'i32 i32 i32 i32', 'i32'),\n#  ('__syscall1', 'i32 i32', 'i32'),\n#  ('__syscall5', 'i32 i32 i32 i32 i32 i32', 'i32'),\n#  ('__syscall4', 'i32 i32 i32 i32 i32', 'i32'),\n#  ('$func6', '', ''),\n#  ('main', '', 'i32'),\n#  ('writev_c', 'i32 i32 i32', 'i32'),\n#  ('$func9', '', 'i32'),\n#  ('$func10', 'i32', 'i32'),\n#  ('$func11', 'i32', 'i32'),\n#  ('$func12', 'i32', ''),\n#  ('$func13', 'i32', 'i32'),\n#  ('$func14', 'i32 i32 i32 i32', 'i32'),\n#  ('$func15', 'i32 i32', 'i32'),\n#  ('$func16', 'i32 i32', 'i32'),\n#  ('$func17', 'i32', 'i32'),\n#  ('$func18', 'i32', 'i32'),\n#  ('$func19', 'i32', 'i32'),\n#  ('$func20', 'i32 i32 i32', 'i32'),\n#  ('$func21', 'i32 i32 i32', 'i32'),\n#  ('$func22', 'i32 i64 i32', 'i64'),\n#  ('$func23', 'i32 i32 i32', 'i32'),\n#  ('$func24', 'i32', 'i32'),\n#  ('$func25', 'i32 i32 i32 i32', '')]\nprint()\nprint(analyzer.contains_emscripten_syscalls())\n#[('__syscall0', 'restart_syscall'),\n# ('__syscall3', 'read'),\n# ('__syscall1', 'exit'),\n# ('__syscall5', 'open'),\n# ('__syscall4', 'write')]\n```\n\n#### Control Flow Analysis\n\n```python\nfrom octopus.arch.wasm.cfg import WasmCFG\n\n# complete wasm module\nfile_name = \"examples/wasm/samples/fib.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = WasmCFG(raw)\n\n# visualize CFGGraph \n# generate graph.dot and graph.pdf file\ncfg.visualize()\n```\n\n<p align=\"center\">\n    <img src=\"/images/wasm-cfg-fib.png\" height=\"400px\"/>\n</p>\n\n\n#### Functions' instructions analytics\n\n```python\nfrom octopus.arch.wasm.cfg import WasmCFG\n\n# complete wasm module\nfile_name = \"examples/wasm/samples/hello_wasm_studio.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = WasmCFG(raw)\n\n# visualization\ncfg.visualize_instrs_per_funcs()\n```\n\n<p align=\"center\">\n    <img src=\"/images/wasm-instr-func-analytics.png\" height=\"400px\"/>\n</p>\n\n#### Call Flow Analysis\n\n```python\nfrom octopus.arch.wasm.cfg import WasmCFG\n\n# fibonacci wasm module\nfile_name = \"examples/wasm/samples/hello_wasm_studio.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = WasmCFG(raw)\n\n# visualize Call Flow Graph\n# generate call_graph.dot and call_graph.pdf file\n# \n# color similar to https://webassembly.studio/\n# imported func == turquoise / exported func == grey\n# edge label = number of different calls to the function\ncfg.visualize_call_flow()\n```\n\n<p align=\"center\">\n    <img src=\"/images/wasm-callflow-hello-studio.png\" height=\"400px\"/>\n</p>\n\nLegend:  \n\n<p align=\"center\">\n    <img src=\"/images/legend_callgraph.png\" height=\"400px\"/>\n</p>\n\n#### IR conversion (SSA)\n\n```python\nfrom octopus.arch.wasm.emulator import WasmSSAEmulatorEngine\n\n# complete wasm module\nfile_name = \"examples/wasm/samples/fib.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n\n# run the emulator for SSA\nemul = WasmSSAEmulatorEngine(raw)\nemul.emulate_one_function('fib')\n# or emul.emulate_functions(['fib'])\n# or emul.emulate_functions() # emulate all the function\n\n# visualization of the cfg with SSA\nemul.cfg.visualize(ssa=True)\n```\n\n<p align=\"center\">\n    <img src=\"/images/ssa-cfg-fib-wasm.png\" height=\"400px\"/>\n</p>\n\n\n</p>\n</details>\n\n<details><summary>Ethereum (ETH) - EVM</summary>\n<p>\n\n#### Explorer\n\n```python\nfrom octopus.platforms.ETH.explorer import EthereumInfuraExplorer\nfrom octopus.platforms.ETH.explorer import INFURA_ROPSTEN\n\nKEY_API = \"bHuaQhX91nkQBac8Wtgj\"\n# connection to ROPSTEN network (testnet)\nexplorer = EthereumInfuraExplorer(KEY_API, network=INFURA_ROPSTEN)\n\n# connection to MAINNET network (mainnet)\n# explorer = EthereumInfuraExplorer(KEY_API)\n\n# Test ROPSTEN network current block number\nblock_number = explorer.eth_blockNumber()\nprint(block_number)\n# 3675552\n\n# Retrieve code of this smart contract\naddr = \"0x3c6B10a5239B1a8A27398583F49771485382818F\"\ncode = explorer.eth_getCode(addr)\nprint(code)\n# 0x6060604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c14606e575b600080fd5b3415605857600080fd5b606c60048080359060200190919050506094565b005b3415607857600080fd5b607e609e565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820e1f98c821c12eea52047d7324b034ddccc41eaa7365d369b34580ab73c71a8940029\n```\n\n#### Disassembler\n\n```python\nfrom octopus.platforms.ETH.disassembler import EthereumDisassembler\n\n# smart contract bytecode\nbytecode_hex = \"60606040526000357c0100000000000000000000000000000000000000000000000000000000900480635fd8c7101461004f578063c0e317fb1461005e578063f8b2cb4f1461006d5761004d565b005b61005c6004805050610099565b005b61006b600480505061013e565b005b610083600480803590602001909190505061017d565b6040518082815260200191505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16611111600060005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054604051809050600060405180830381858888f19350505050151561010657610002565b6000600060005060003373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819055505b565b34600060005060003373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828282505401925050819055505b565b6000600060005060008373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505490506101b6565b91905056\"\n\ndisasm = EthereumDisassembler()\ndisasm.disassemble(bytecode_hex)\n\n# disassemble bytecode into a list of EthereumInstruction\n# attributes r_format='list' by default\nprint(disasm.disassemble(bytecode_hex))\n\n#[<octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4add5c0>, <octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4ad8588>, <octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4ad8c50>]\n\nprint()\nprint(disasm.disassemble(bytecode_hex, r_format='reverse'))\n\n# {0: <octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4ad8160>, ..., 229: <octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4ad8630>, 230: <octopus.platforms.ETH.instruction.EthereumInstruction object at 0x7f85d4ad87b8>}\n\nprint()\nprint(disasm.disassemble(bytecode_hex,r_format='text'))\n# PUSH1 0x60\n# PUSH1 0x40\n# MSTORE\n# PUSH1 0x0\n# CALLDATALOAD\n# PUSH29 0x100000000000000000000000000000000000000000000000000000000\n# SWAP1\n# DIV\n# DUP1\n# PUSH4 0x5fd8c710\n# EQ\n# PUSH2 0x4f\n# JUMPI\n# ...\n# SWAP2\n# SWAP1\n# POP\n# JUMP\n```\n\n#### Control Flow Analysis\n\n```python\nfrom octopus.analysis.graph import CFGGraph\nfrom octopus.platforms.ETH.cfg import EthereumCFG\n\n# ethernaut0 bytecode\nfile_name = \"examples/ETH/evm_bytecode/Zeppelin_Hello_ethernaut0.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode_hex = f.read()\n\n# create the CFG\ncfg = EthereumCFG(bytecode_hex)\n\n\n# generic visualization api\n# generate graph.dot and graph.pdf file\ngraph = CFGGraph(cfg)\ngraph.view()\n# or directly using the cfg binding\n# cfg.visualize()\n# and you can get a simplify cfg representation using\n# cfg.visualize(simplify=True) or graph.view(simplify=True)\n```\n\n<p align=\"center\">\n    <img src=\"/images/eth-cfg-evm.png\"/>\n</p>\n\n#### IR conversion (SSA)\n\n```python\n# The conversion to SSA is already done by the SSAEmulator\n# when the CFG is reconstruct\n# by default you have just to visualize it\nfrom octopus.platforms.ETH.cfg import EthereumCFG\n\n# ethernaut0 bytecode\nfile_name = \"examples/ETH/evm_bytecode/Zeppelin_Hello_ethernaut0.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode_hex = f.read()\n\n# create the CFG\ncfg = EthereumCFG(bytecode_hex)\n\n# SSA visualization\ncfg.visualize(ssa=True)\n```\n\n<p align=\"center\">\n    <img src=\"/images/eth-cfg-evm-ssa.png\"/>\n</p>\n\n\n</p>\n</details>\n\n<details><summary>Ethereum (WASM)</summary>\n<p>\n\n#### Explorer\n\n```python\nfrom octopus.platforms.ETH.explorer import EthereumInfuraExplorer\nfrom octopus.platforms.ETH.explorer import INFURA_KOVAN\n\n# connection to ROPSTEN network (testnet)\nexplorer = EthereumInfuraExplorer(\"bHuaQhX91nkQBac8Wtgj\",\n                                  network=INFURA_KOVAN)\n# connection to MAINNET network (mainnet)\n# explorer = EthereumInfuraExplorer(\"bHuaQhX91nkQBac8Wtgj\")\n\n# test infura access\nblock_number = explorer.eth_blockNumber()\nprint('blockNumber = %d' % block_number)\n\n# retrieve code of this smart contract\naddr = \"0x1120e596b173d953ba52ce262f73ce3734b0e40e\"\ncode = explorer.eth_getCode(addr)\nprint()\nprint(code)\n# blockNumber = 8803487\n# \n# 0x0061736d0100000001090260000060027f7f00021a0203656e7603726574000103656e76066d656d6f7279020102100303020000040501700101010501000601000708010463616c6c00010a120205001002000b0a00418008410b1000000b0b1201004180080b0b48656c6c6f20776f726c64000b076c696e6b696e6703010b0066046e616d65015f060003726574010570616e6963020463616c6c032f5f5a4e3134707761736d5f657468657265756d3365787433726574313768363034643830393864313638366338304504066465706c6f790511727573745f626567696e5f756e77696e64\n```\n\n#### Disassembler\n\nDisassembly of a Wasm module:\n```python\nfrom octopus.platforms.ETH.disassembler import EthereumDisassembler\n\nFILE = \"examples/ETH/wasm/helloworld_kovan.bytecode\"\n\nwith open(FILE, 'r') as f:\n    module_bytecode = f.read()\n\ndisasm = EthereumDisassembler(arch='wasm')\n# return list of functions instructions (list)\nprint(disasm.disassemble_module(module_bytecode))\n#[[<octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa898>], [<octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa7b8>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa780>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa748>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa6d8>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7efc0ceaa710>]]\n\nprint()\n# return text of functions code\nprint(disasm.disassemble_module(module_bytecode, r_format='text'))\n# func 0\n# end\n# \n# func 1\n# call 1\n# i32.const 1036\n# i32.const 232\n# call 0\n# end\n\n```\n\nDisassembly of wasm bytecode:\n```python\nfrom octopus.platforms.ETH.disassembler import EthereumDisassembler\n\n# bytecode in WebAssembly is the function code (i.e. function body)\nbytecode = b'\\x02\\x7fA\\x18\\x10\\x1cA\\x00\\x0f\\x0b'\n# create a WasmDisassembler object\ndisasm = EthereumDisassembler(bytecode, arch='wasm')\n\n# disassemble bytecode into a list of WasmInstruction\n# attributes r_format='list' by default\nprint(disasm.disassemble())\n\n#[<octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904eb8>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904278>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904390>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904ef0>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904f60>, <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4901048>]\nprint()\nprint(disasm.disassemble(r_format='reverse'))\n\n#{0: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4901048>, 1: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904240>, 2: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904f60>, 3: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904ef0>, 4: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904278>, 5: <octopus.arch.wasm.instruction.WasmInstruction object at 0x7f85e4904390>}\nprint()\nprint(disasm.disassemble(r_format='text'))\n# block -1\n# i32.const 24\n# call 28\n# i32.const 0\n# return\n# end\n```\n\n#### ModuleAnalyzer\n\n```python\nfrom octopus.arch.wasm.analyzer import WasmModuleAnalyzer\n\nFILE = \"examples/ETH/wasm/helloworld_kovan.bytecode\"\n\nwith open(FILE, 'r') as f:\n    module_bytecode = f.read()\n\n# return list of functions instructions (list)\n# attributes analysis=True by default\nanalyzer = WasmModuleAnalyzer(module_bytecode)\n\n# show analyzer attributes\nprint(analyzer.func_prototypes)\n# [('ret', 'i32 i32', '', 'import'), ('$func1', '', '', 'local'), ('call', '', '', 'export')]\nprint()\nprint(analyzer.exports)\n# [{'field_str': 'call', 'kind': 0, 'index': 2}]\nprint()\nprint(analyzer.imports_func)\n# [('env', 'ret', 1)]\nprint()\nprint(analyzer.datas)\n# [{'data': b'Hello world', 'index': 0, 'offset': None, 'size': 11},\n# {'data': b'\\x00asm\\x01\\x00\\x00\\x00\\x01\\t\\x02`\\x00\\x00`\\x02\\x7f\\x7f\\x00\\x02\\x1a\\x02\\x03env\\x03ret\\x00\\x01\\x03env\\x06memory\\x02\\x01\\x02\\x10\\x03\\x03\\x02\\x00\\x00\\x04\\x05\\x01p\\x01\\x01\\x01\\x05\\x01\\x00\\x06\\x01\\x00\\x07\\x08\\x01\\x04call\\x00\\x01\\n\\x12\\x02\\x05\\x00\\x10\\x02\\x00\\x0b\\n\\x00A\\x80\\x08A\\x0b\\x10\\x00\\x00\\x0b\\x0b\\x12\\x01\\x00A\\x80\\x08\\x0b\\x0bHello world\\x00\\x0b\\x07linking\\x03\\x01\\x0b\\x00f\\x04name\\x01_\\x06\\x00\\x03ret\\x01\\x05panic\\x02\\x04call\\x03/_ZN14pwasm_ethereum3ext3ret17h604d8098d1686c80E\\x04\\x06deploy\\x05\\x11rust_begin_unwind',\n# 'index': 0,\n# 'offset': None,\n# 'size': 232}]\n\n```\n\n#### Control Flow Analysis\n\n```python\nfrom octopus.platforms.ETH.cfg import EthereumCFG\n\n# HelloWorld on Kovan Parity Network\nfile_name = \"examples/ETH/wasm/helloworld_kovan.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode_hex = f.read()\n\n# create the CFG\ncfg = EthereumCFG(bytecode_hex, arch='wasm')\ncfg.visualize()\n```\n\n<p align=\"center\">\n    <img src=\"/images/eth-wasm-cfg-hello-parity.png\" height=\"400px\"/>\n</p>\n\n#### Functions' instructions analytics\n\n```python\nfrom octopus.platforms.ETH.cfg import EthereumCFG\n\n# HelloWorld on Kovan Parity Network\nfile_name = \"examples/ETH/wasm/helloworld_kovan.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode_hex = f.read()\n\n# create the CFG\ncfg = EthereumCFG(bytecode_hex, arch='wasm')\n\n# visualization\ncfg.visualize_instrs_per_funcs()\n```\n\n<p align=\"center\">\n    <img src=\"/images/eth-wasm-func-analytics.png\" height=\"400px\"/>\n</p>\n\n#### Call Flow Analysis\n\n```python\nfrom octopus.platforms.ETH.cfg import EthereumCFG\n\n# HelloWorld on Kovan Parity Network\nfile_name = \"examples/ETH/wasm/helloworld_kovan.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode_hex = f.read()\n\n# create the CFG\ncfg = EthereumCFG(bytecode_hex, arch='wasm')\n\n# visualization\ncfg.visualize_call_flow()\n```\n\n<p align=\"center\">\n    <img src=\"/images/eth-wasm-callflow-hello-parity.png\" height=\"400px\"/>\n</p>\n\nLegend:  \n\n<p align=\"center\">\n    <img src=\"/images/legend_callgraph.png\" height=\"400px\"/>\n</p>\n\n\n#### IR conversion (SSA)\n\n```python\n# TODO\n```\n\n\n</p>\n</details>\n\n<details><summary>NEO</summary>\n<p>\n\n#### Explorer\n\n```python\nfrom octopus.platforms.NEO.explorer import NeoExplorerRPC\n\n# get list nodes here: http://monitor.cityofzion.io/\nexplorer = NeoExplorerRPC(host='seed2.neo.org')\n\n# get current number of block on the blockchain\nprint(explorer.getblockcount())\n# 2534868\n\n# get information on a contract\n# lock smart contract address: d3cce84d0800172d09c88ccad61130611bd047a4\ncontract = explorer.getcontractstate(\"d3cce84d0800172d09c88ccad61130611bd047a4\")\nprint(contract)\n# {'author': 'Erik Zhang',\n# 'code_version': '2.0',\n# 'description': 'Lock 2.0',\n# 'email': 'erik@neo.org',\n# 'hash': '0xd3cce84d0800172d09c88ccad61130611bd047a4',\n# 'name': 'Lock',\n# 'parameters': ['Integer', 'PublicKey', 'Signature'],\n# 'properties': {'dynamic_invoke': False, 'storage': False},\n# 'returntype': 'Boolean',\n# 'script': '56c56b6c766b00527ac46c766b51527ac46c766b52527ac4616168184e656f2e426c6f636b636861696e2e4765744865696768746168184e656f2e426c6f636b636861696e2e4765744865616465726c766b53527ac46c766b00c36c766b53c36168174e656f2e4865616465722e47657454696d657374616d70a06c766b54527ac46c766b54c3640e00006c766b55527ac4621a006c766b51c36c766b52c3617cac6c766b55527ac46203006c766b55c3616c7566',\n# 'version': 0}\n\n# smart contract code in contract['script']\nprint(contract['script'])\n```\n\n#### Disassembler\n\n```python\nfrom octopus.platforms.NEO.disassembler import NeoDisassembler\n\n# lock contract\nfile_name = \"examples/NEO/samples/Lock.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    bytecode = f.read()\n\ndisasm = NeoDisassembler()\n\nprint(disasm.disassemble(bytecode, r_format='text'))\n# PUSH6\n# NEWARRAY\n# TOALTSTACK\n# FROMALTSTACK\n# DUP\n# TOALTSTACK\n# PUSH0\n# PUSH2\n# ROLL\n# SETITEM\n# FROMALTSTACK\n# ....\n# PICKITEM\n# NOP\n# FROMALTSTACK\n# DROP\n# RET\n```\n\n#### Control Flow Analysis\n\n```python\nfrom octopus.analysis.graph import CFGGraph\nfrom octopus.platforms.NEO.cfg import NeoCFG\n\n# lock contract\nfile_name = \"examples/NEO/samples/Lock.bytecode\"\n\n# read file\nwith open(file_name) as f:\n    raw = f.read()\n\n# create neo cfg - automatic static analysis\ncfg = NeoCFG(raw)\n\n# graph visualization\ngraph = CFGGraph(cfg, filename=\"Lock_cfg\")\ngraph.view_functions()\n```\n\n<p align=\"center\">\n    <img src=\"/images/neo-cfg.png\"/>\n</p>\n\n\n</p>\n</details>\n\n<details><summary>EOS</summary>\n<p>\n\n#### Explorer\n\n```python\nfrom octopus.platforms.EOS.explorer import EosExplorer\n\nhost = \"api.cypherglass.com\"\n\n# by defaul the port is 8888\nexplo = EosExplorer(host=host)\n\n# get info about the node\nexplo.get_info()\n\n'''\n{'block_cpu_limit': 180289,\n 'block_net_limit': 1045680,\n 'chain_id': 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906',\n 'head_block_id': '018d6e2bcf6295126cd74cf694b5cca3529eefc42b334b394ef87c3a43876739',\n 'head_block_num': 26045995,\n 'head_block_producer': 'eosswedenorg',\n 'head_block_time': '2018-11-09T14:11:29.500',\n 'last_irreversible_block_id': '018d6cdcff78bbd9f25c605b02fb67c47a337ece78ddcf73089cee4bf6a410ee',\n 'last_irreversible_block_num': 26045660,\n 'server_version': 'c71d2245',\n 'server_version_string': 'mainnet-1.3.0',\n 'virtual_block_cpu_limit': 38092879,\n 'virtual_block_net_limit': 1048576000}\n'''\nexplo.get_block(1337)\n\n'''\n{'action_mroot': 'bcb9763baa3bbf98ed36379b4be0ecb2d9cd21c75df01729c63b2b021001c10c',\n 'block_extensions': [],\n 'block_num': 1337,\n 'confirmed': 0,\n 'header_extensions': [],\n 'id': '00000539d17a03af7126e073be4c4d99a72b7f58793cf2c87b9bfd41b6c711fb',\n 'new_producers': None,\n 'previous': '00000538b374c1cbfaeed7253ad3075ddc72a28f0a0515301fc1bbed675f2316',\n 'producer': 'eosio',\n 'producer_signature': 'SIG_K1_K5jWf36t6j454Hb2fGuV37YTwMTvuQ51ZPBtpru8Ud2axtMTEauWyvtpJuTpnvqzReUndDgEDXvoeEP4jdj2bpnYKBt6g2',\n 'ref_block_prefix': 1944069745,\n 'schedule_version': 0,\n 'timestamp': '2018-06-09T12:09:21.500',\n 'transaction_mroot': '0000000000000000000000000000000000000000000000000000000000000000',\n 'transactions': []}\n'''\n```\n\n#### Disassembler\n\n```python\nfrom octopus.platforms.EOS.disassembler import EosDisassembler\n\n# complete wasm module\nfile_name = \"examples/EOS/samples/eos_ping.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# just disassembly\ndisasm = EosDisassembler()\n\n# because we provide full module bytecode\n# we need to use disassemble_module()\n# otherwise just disassemble() is enough\ntext = disasm.disassemble_module(raw, r_format=\"text\")\nprint(text)\n# func 0\n# get_local 0\n# get_local 1\n# i32.const 32\n# call 12\n# i32.eqz\n# end\n# \n# func 1\n# get_local 0\n# i64.load 3, 0\n# get_local 0\n# i64.load 3, 8\n# call 6\n# end\n# \n# func 2\n# ...\n# end\n# \n# ...\n```\n\n#### ModuleAnalyzer\n\n```python\n\nfrom octopus.platforms.EOS.analyzer import EosAnalyzer\n\n# complete wasm module\nfile_name = \"examples/EOS/samples/eos_ping.wasm\"\n\nwith open(file_name, 'rb') as f:\n    module_bytecode = f.read()\n\n# return list of functions instructions (list)\n# attributes analysis=True by default\nanalyzer = EosAnalyzer(module_bytecode)\n\n# show analyzer attributes\nprint(analyzer.func_prototypes)\n#[('action_data_size', '', 'i32', 'import'), ('eosio_assert', 'i32 i32', '', 'import'), ('eosio_exit', 'i32', '', 'import'), ('memcpy', 'i32 i32 i32', 'i32', 'import'), ('prints', 'i32', '', 'import'), ('read_action_data', 'i32 i32', 'i32', 'import'), ('require_auth2', 'i64 i64', '', 'import'), ('_ZeqRK11checksum256S1_', 'i32 i32', 'i32', 'export'), ('_ZN5eosio12require_authERKNS_16permission_levelE', 'i32', '', 'export'), ('apply', 'i64 i64 i64', '', 'export'), ('$func10', 'i32 i64', '', 'local'), ('$func11', 'i32 i32', 'i32', 'local'), ('memcmp', 'i32 i32 i32', 'i32', 'export'), ('malloc', 'i32', 'i32', 'export'), ('$func14', 'i32 i32', 'i32', 'local'), ('$func15', 'i32', 'i32', 'local'), ('free', 'i32', '', 'export'), ('$func17', '', '', 'local')]\nprint()\nprint(analyzer.exports)\n# [{'field_str': 'memory', 'kind': 2, 'index': 0}, {'field_str': '_ZeqRK11checksum256S1_', 'kind': 0, 'index': 7}, {'field_str': '_ZN5eosio12require_authERKNS_16permission_levelE', 'kind': 0, 'index': 8}, {'field_str': 'apply', 'kind': 0, 'index': 9}, {'field_str': 'memcmp', 'kind': 0, 'index': 12}, {'field_str': 'malloc', 'kind': 0, 'index': 13}, {'field_str': 'free', 'kind': 0, 'index': 16}]\nprint()\nprint(analyzer.imports_func)\n# [('env', 'action_data_size', 3), ('env', 'eosio_assert', 5), ('env', 'eosio_exit', 2), ('env', 'memcpy', 6), ('env', 'prints', 2), ('env', 'read_action_data', 4), ('env', 'require_auth2', 1)]\n```\n\n#### Control Flow Analysis\n\n```python\nfrom octopus.platforms.EOS.cfg import EosCFG\nfrom octopus.analysis.graph import CFGGraph\n\n# complete wasm module\nfile_name = \"examples/EOS/samples/eos_ping.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = EosCFG(raw)\n\n# visualize\ngraph = CFGGraph(cfg)\ngraph.view_functions()\n```\n\n\n<p align=\"center\">\n    <img src=\"/images/eos-cfg.png\"/>\n</p>\n\n#### Call Flow Analysis\n\n```python\nfrom octopus.platforms.EOS.cfg import EosCFG\n\n# complete wasm module\nfile_name = \"examples/EOS/samples/eos_ping.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = EosCFG(raw)\n\n# visualize\ncfg.visualize_call_flow()\n```\n\n<p align=\"center\">\n    <img src=\"/images/eos-callgraph.png\"/>\n</p>\n\n#### Functions' instructions analytics\n\n```python\nfrom octopus.platforms.EOS.cfg import EosCFG\n\n# complete wasm module\nfile_name = \"examples/EOS/samples/eos_ping.wasm\"\n\n# read file\nwith open(file_name, 'rb') as f:\n    raw = f.read()\n\n# create the cfg\ncfg = EosCFG(raw)\n\n# visualize\ncfg.visualize_instrs_per_funcs()\n```\n\n<p align=\"center\">\n    <img src=\"/images/eos-func-instrucs.png\"/>\n</p>\n\n</p>\n</details>\n\n<details><summary>Bitcoin</summary>\n<p>\n\n#### Explorer\n\n```python\nfrom octopus.platforms.BTC.explorer import BitcoinExplorerRPC\n\nRPC_USER = 'test'\nRPC_PASSWORD = 'test'\nRPC_HOST = 'localhost'\n\nhost = '%s:%s@%s' % (RPC_USER, RPC_PASSWORD, RPC_HOST)\n\nexplorer = BitcoinExplorerRPC(host)\n\nexplorer.getbestblockhash()\n# '00000000000000000012085cfe8c79bcdacf81fbd82f6ab52c3cb3a454d4987c'\n\nexplorer.getblockcount()\n#550859\n```\n\n#### Disassembler\n\n```python\nfrom octopus.platforms.BTC.disassembler import BitcoinDisassembler\n\n# Witness Script\nfile_name = \"examples/BTC/witness_script.hex\"\n\n# read file\nwith open(file_name) as f:\n    bytecode = f.read()\n\ndisasm = BitcoinDisassembler()\n\nprint(disasm.disassemble(bytecode, r_format='text'))\n# 0\n# OP_ROT\n# OP_ROT\n# 2\n# 0203f4d01d0b35588638631ebb7d46d8387fd1aeb3dbecfdd3faf7c056b023c833\n# 03aa6677e3ce1bd634f4f2e1cd60a60af002e1b30484d4d1611b183b16d391ee96\n# 03bf164811abb8c91ed39e58d4e307f86cb4e487c83f727a2c482bc71a0f96f1db\n# 3\n# OP_CHECKMULTISIG\n```\n\n</p>\n</details>\n\n\nPlease find examples in [examples](examples) folder.\n\n## Publications and Videos\n\n* BLACKALPS 2018 [Reversing and Vulnerability research of Ethereum Smart Contracts](https://www.blackalps.ch/ba-18/talks.php#111)\n* Devcon iv. [Reversing Ethereum Smart Contracts to find out what's behind EVM bytecode](https://guidebook.com/guide/117233/event/21956134/)\n* hack.lu 2018 [Reversing and Vulnerability research of Ethereum Smart Contracts](https://2018.hack.lu/talks/#Reversing+and+Vulnerability+research+of+Ethereum+Smart+Contracts)\n* ToorCon XX - 2018 [Reversing Ethereum Smart Contracts (Introduction)](https://frab.toorcon.net/en/toorcon20/public/events/97)\n* ToorCon XX - 2018 [Dissection of WebAssembly module](https://frab.toorcon.net/en/toorcon20/public/events/92)\n* REcon Montreal 2018: [Reverse Engineering Of Blockchain Smart Contracts](https://recon.cx/2018/montreal/schedule/system/event_attachments/attachments/000/000/053/original/RECON-MTL-2018-Reversing_blockchains_smart_contracts.pdf)\n\n## Authors\n\n**Patrick Ventuzelo** - *Creator* - [@Pat_Ventuzelo](https://twitter.com/pat_ventuzelo)\n\nSee also the list of [contributors](https://github.com/quoscient/octopus/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Acknowledgments\n\nSponsor:\n* [QuoScient](https://www.quoscient.io/)\n\nInspired by:\n* [Manticore](https://github.com/trailofbits/manticore)\n* [Mythril](https://github.com/ConsenSys/mythril)\n* [Rattle](https://github.com/trailofbits/rattle)\n* [ethersplay](https://github.com/trailofbits/ethersplay)\n* ...\n\n# Trainings & Contact\n\nPatrick Ventuzelo - [@pat_ventuzelo](https://twitter.com/pat_ventuzelo) - Independent Security Researcher.\n\n\nMore details about my trainings:\n* 4-days **WebAssembly security** training: [here](https://webassembly-security.com/trainings/)\n* 2-days **Rustlang security** training: [here](https://webassembly-security.com/rust-security-training/)\n\n", "release_dates": []}, {"name": "openethereum", "description": "Forked to update the dependencies. See v2.7.2-updated-dependencies branch", "language": "Rust", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "![Parity Ethereum](docs/logo-parity-ethereum.svg)\n\n<h2 align=\"center\">The Fastest and most Advanced Ethereum Client.</h2>\n\n<p align=\"center\"><strong><a href=\"https://github.com/paritytech/parity-ethereum/releases/latest\">\u00bb Download the latest release \u00ab</a></strong></p>\n\n<p align=\"center\"><a href=\"https://gitlab.parity.io/parity/parity-ethereum/commits/master\" target=\"_blank\"><img src=\"https://gitlab.parity.io/parity/parity-ethereum/badges/master/build.svg\" /></a>\n<a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\"><img src=\"https://img.shields.io/badge/license-GPL%20v3-green.svg\" /></a></p>\n\n## Table of Contents\n\n1. [Description](#chapter-001)\n2. [Technical Overview](#chapter-002)\n3. [Building](#chapter-003)<br>\n  3.1 [Building Dependencies](#chapter-0031)<br>\n  3.2 [Building from Source Code](#chapter-0032)<br>\n  3.3 [Simple One-Line Installer for Mac and Linux](#chapter-0033)<br>\n  3.4 [Starting Parity Ethereum](#chapter-0034)\n4. [Testing](#chapter-004)\n5. [Documentation](#chapter-005)\n6. [Toolchain](#chapter-006)\n7. [Community](#chapter-007)\n8. [Contributing](#chapter-008)\n9. [License](#chapter-009)\n\n\n## 1. Description <a id=\"chapter-001\"></a>\n\n**Built for mission-critical use**: Miners, service providers, and exchanges need fast synchronisation and maximum uptime. Parity Ethereum provides the core infrastructure essential for speedy and reliable services.\n\n- Clean, modular codebase for easy customisation\n- Advanced CLI-based client\n- Minimal memory and storage footprint\n- Synchronise in hours, not days with Warp Sync\n- Modular for light integration into your service or product\n\n## 2. Technical Overview <a id=\"chapter-002\"></a>\n\nParity Ethereum's goal is to be the fastest, lightest, and most secure Ethereum client. We are developing Parity Ethereum using the sophisticated and cutting-edge **Rust programming language**. Parity Ethereum is licensed under the GPLv3 and can be used for all your Ethereum needs.\n\nBy default, Parity Ethereum runs a JSON-RPC HTTP server on port `:8545` and a Web-Sockets server on port `:8546`. This is fully configurable and supports a number of APIs.\n\nIf you run into problems while using Parity Ethereum, check out the [wiki for documentation](https://wiki.parity.io/), feel free to [file an issue in this repository](https://github.com/paritytech/parity-ethereum/issues/new), or hop on our [Gitter](https://gitter.im/paritytech/parity) or [Riot](https://riot.im/app/#/group/+parity:matrix.parity.io) chat room to ask a question. We are glad to help! **For security-critical issues**, please refer to the security policy outlined in [SECURITY.md](SECURITY.md).\n\nParity Ethereum's current beta-release is 2.6. You can download it at [the releases page](https://github.com/paritytech/parity-ethereum/releases) or follow the instructions below to build from source. Please, mind the [CHANGELOG.md](CHANGELOG.md) for a list of all changes between different versions.\n\n## 3. Building <a id=\"chapter-003\"></a>\n\n### 3.1 Build Dependencies <a id=\"chapter-0031\"></a>\n\nParity Ethereum requires **latest stable Rust version** to build.\n\nWe recommend installing Rust through [rustup](https://www.rustup.rs/). If you don't already have `rustup`, you can install it like this:\n\n- Linux:\n  ```bash\n  $ curl https://sh.rustup.rs -sSf | sh\n  ```\n\n  Parity Ethereum also requires `gcc`, `g++`, `pkg-config`, `file`, `make`, and `cmake` packages to be installed.\n\n- OSX:\n  ```bash\n  $ curl https://sh.rustup.rs -sSf | sh\n  ```\n\n  `clang` is required. It comes with Xcode command line tools or can be installed with homebrew.\n\n- Windows:\n  Make sure you have Visual Studio 2015 with C++ support installed. Next, download and run the `rustup` installer from\n  https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe, start \"VS2015 x64 Native Tools Command Prompt\", and use the following command to install and set up the `msvc` toolchain:\n  ```bash\n  $ rustup default stable-x86_64-pc-windows-msvc\n  ```\n\nOnce you have `rustup` installed, then you need to install:\n* [Perl](https://www.perl.org)\n* [Yasm](https://yasm.tortall.net)\n\nMake sure that these binaries are in your `PATH`. After that, you should be able to build Parity Ethereum from source.\n\n### 3.2 Build from Source Code <a id=\"chapter-0032\"></a>\n\n```bash\n# download Parity Ethereum code\n$ git clone https://github.com/paritytech/parity-ethereum\n$ cd parity-ethereum\n\n# build in release mode\n$ cargo build --release --features final\n```\n\nThis produces an executable in the `./target/release` subdirectory.\n\nNote: if cargo fails to parse manifest try:\n\n```bash\n$ ~/.cargo/bin/cargo build --release\n```\n\nNote, when compiling a crate and you receive errors, it's in most cases your outdated version of Rust, or some of your crates have to be recompiled. Cleaning the repository will most likely solve the issue if you are on the latest stable version of Rust, try:\n\n```bash\n$ cargo clean\n```\n\nThis always compiles the latest nightly builds. If you want to build stable or beta, do a\n\n```bash\n$ git checkout stable\n```\n\nor\n\n```bash\n$ git checkout beta\n```\n\n### 3.3 Simple One-Line Installer for Mac and Linux <a id=\"chapter-0033\"></a>\n\n```bash\nbash <(curl https://get.parity.io -L)\n```\n\nThe one-line installer always defaults to the latest beta release. To install a stable release, run:\n\n```bash\nbash <(curl https://get.parity.io -L) -r stable\n```\n\n### 3.4 Starting Parity Ethereum <a id=\"chapter-0034\"></a>\n\n#### Manually\n\nTo start Parity Ethereum manually, just run\n\n```bash\n$ ./target/release/parity\n```\n\nso Parity Ethereum begins syncing the Ethereum blockchain.\n\n#### Using `systemd` service file\n\nTo start Parity Ethereum as a regular user using `systemd` init:\n\n1. Copy `./scripts/parity.service` to your\n`systemd` user directory (usually `~/.config/systemd/user`).\n2. Copy release to bin folder, write `sudo install ./target/release/parity /usr/bin/parity`\n3. To configure Parity Ethereum, write a `/etc/parity/config.toml` config file, see [Configuring Parity Ethereum](https://paritytech.github.io/wiki/Configuring-Parity) for details.\n\n## 4. Testing <a id=\"chapter-004\"></a>\n\nDownload the required test files: `git submodule update --init --recursive`. You can run tests with the following commands:\n\n* **All** packages\n  ```\n  cargo test --all\n  ```\n\n* Specific package\n  ```\n  cargo test --package <spec>\n  ```\n\nReplace `<spec>` with one of the packages from the [package list](#package-list) (e.g. `cargo test --package evmbin`).\n\nYou can show your logs in the test output by passing `--nocapture` (i.e. `cargo test --package evmbin -- --nocapture`)\n\n## 5. Documentation <a id=\"chapter-005\"></a>\n\nOfficial website: https://parity.io\n\nBe sure to [check out our wiki](https://wiki.parity.io) for more information.\n\n### Viewing documentation for Parity Ethereum packages\n\nYou can generate documentation for Parity Ethereum Rust packages that automatically opens in your web browser using [rustdoc with Cargo](https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html#using-rustdoc-with-cargo) (of the The Rustdoc Book), by running the the following commands:\n\n* **All** packages\n  ```\n  cargo doc --document-private-items --open\n  ```\n\n* Specific package\n  ```\n  cargo doc --package <spec> -- --document-private-items --open\n  ```\n\nUse`--document-private-items` to also view private documentation and `--no-deps` to exclude building documentation for dependencies.\n\nReplacing `<spec>` with one of the following from the details section below (i.e. `cargo doc --package parity-ethereum --open`):\n\n<a id=\"package-list\"></a>\n**Package List**\n<details><p>\n\n* Parity Ethereum (EthCore) Client Application\n  ```bash\n  parity-ethereum\n  ```\n* Parity Ethereum Account Management, Key Management Tool, and Keys Generator\n  ```bash\n  ethcore-accounts, ethkey-cli, ethstore, ethstore-cli\n  ```\n* Parity Chain Specification\n  ```bash\n  chainspec\n  ```\n* Parity CLI Signer Tool & RPC Client\n  ```bash\n  cli-signer parity-rpc-client\n  ```\n* Parity Ethereum Ethash & ProgPoW Implementations\n  ```bash\n  ethash\n  ```\n* Parity (EthCore) Library\n  ```bash\n  ethcore\n  ```\n  * Parity Ethereum Blockchain Database, Test Generator, Configuration,\nCaching, Importing Blocks, and Block Information\n    ```bash\n    ethcore-blockchain\n    ```\n  * Parity Ethereum (EthCore) Contract Calls and Blockchain Service & Registry Information\n    ```bash\n    ethcore-call-contract\n    ```\n  * Parity Ethereum (EthCore) Database Access & Utilities, Database Cache Manager\n    ```bash\n    ethcore-db\n    ```\n  * Parity Ethereum Virtual Machine (EVM) Rust Implementation\n    ```bash\n    evm\n    ```\n  * Parity Ethereum (EthCore) Light Client Implementation\n    ```bash\n    ethcore-light\n    ```\n  * Parity Smart Contract based Node Filter, Manage Permissions of Network Connections\n    ```bash\n    node-filter\n    ```\n  * Parity Private Transactions\n    ```bash\n    ethcore-private-tx\n    ```\n  * Parity Ethereum (EthCore) Client & Network Service Creation & Registration with the I/O Subsystem\n    ```bash\n    ethcore-service\n    ```\n  * Parity Ethereum (EthCore) Blockchain Synchronization\n    ```bash\n    ethcore-sync\n    ```\n  * Parity Ethereum Common Types\n    ```bash\n    common-types\n    ```\n  * Parity Ethereum Virtual Machines (VM) Support Library\n    ```bash\n    vm\n    ```\n  * Parity Ethereum WASM Interpreter\n    ```bash\n    wasm\n    ```\n  * Parity Ethereum WASM Test Runner\n    ```bash\n    pwasm-run-test\n    ```\n  * Parity EVM Implementation\n    ```bash\n    evmbin\n    ```\n  * Parity Ethereum IPFS-compatible API\n    ```bash\n    parity-ipfs-api\n    ```\n  * Parity Ethereum JSON Deserialization\n    ```bash\n    ethjson\n    ```\n  * Parity Ethereum State Machine Generalization for Consensus Engines\n    ```bash\n    parity-machine\n    ```\n* Parity Ethereum (EthCore) Miner Interface\n  ```bash\n  ethcore-miner parity-local-store price-info ethcore-stratum using_queue\n  ```\n* Parity Ethereum (EthCore) Logger Implementation\n  ```bash\n  ethcore-logger\n  ```\n* C bindings library for the Parity Ethereum client\n  ```bash\n  parity-clib\n  ```\n* Parity Ethereum JSON-RPC Servers\n  ```bash\n  parity-rpc\n  ```\n* Parity Ethereum (EthCore) Secret Store\n  ```bash\n  ethcore-secretstore\n  ```\n* Parity Updater Service\n  ```bash\n  parity-updater parity-hash-fetch\n  ```\n* Parity Core Libraries (Parity Util)\n  ```bash\n  ethcore-bloom-journal blooms-db dir eip-712 fake-fetch fastmap fetch ethcore-io\n  journaldb keccak-hasher len-caching-lock macros memory-cache memzero\n  migration-rocksdb ethcore-network ethcore-network-devp2p panic_hook\n  patricia-trie-ethereum registrar rlp_compress rlp_derive parity-runtime stats\n  time-utils triehash-ethereum unexpected parity-version\n  ```\n\n</p></details>\n\n### Contributing to documentation for Parity Ethereum packages\n\n[Document source code](https://doc.rust-lang.org/1.9.0/book/documentation.html) for Parity Ethereum packages by annotating the source code with documentation comments.\n\nExample (generic documentation comment):\n```markdown\n/// Summary\n///\n/// Description\n///\n/// # Panics\n///\n/// # Errors\n///\n/// # Safety\n///\n/// # Examples\n///\n/// Summary of Example 1\n///\n/// ```rust\n/// // insert example 1 code here for use with documentation as tests\n/// ```\n///\n```\n\n## 6. Toolchain <a id=\"chapter-006\"></a>\n\nIn addition to the Parity Ethereum client, there are additional tools in this repository available:\n\n- [evmbin](./evmbin) - Parity Ethereum EVM Implementation.\n- [ethstore](./accounts/ethstore) - Parity Ethereum Key Management.\n- [ethkey](./accounts/ethkey) - Parity Ethereum Keys Generator.\n\nThe following tool is available in a separate repository:\n- [ethabi](https://github.com/paritytech/ethabi) - Parity Ethereum Encoding of Function Calls. [Docs here](https://crates.io/crates/ethabi)\n- [whisper](https://github.com/paritytech/whisper) - Parity Ethereum Whisper-v2 PoC Implementation.\n\n## 7. Community <a id=\"chapter-007\"></a>\n\n### Join the chat!\n\nQuestions? Get in touch with us on Gitter:\n[![Gitter: Parity](https://img.shields.io/badge/gitter-parity-4AB495.svg)](https://gitter.im/paritytech/parity)\n[![Gitter: Parity.js](https://img.shields.io/badge/gitter-parity.js-4AB495.svg)](https://gitter.im/paritytech/parity.js)\n[![Gitter: Parity/Miners](https://img.shields.io/badge/gitter-parity/miners-4AB495.svg)](https://gitter.im/paritytech/parity/miners)\n[![Gitter: Parity-PoA](https://img.shields.io/badge/gitter-parity--poa-4AB495.svg)](https://gitter.im/paritytech/parity-poa)\n\nAlternatively, join our community on Matrix:\n[![Riot: +Parity](https://img.shields.io/badge/riot-%2Bparity%3Amatrix.parity.io-orange.svg)](https://riot.im/app/#/group/+parity:matrix.parity.io)\n\n## 8. Contributing <a id=\"chapter-008\"></a>\n\nAn introduction has been provided in the [\"So You Want to be a Core Developer\" presentation slides by Hernando Castano](http://tiny.cc/contrib-to-parity-eth). Additional guidelines are provided in [CONTRIBUTING](./.github/CONTRIBUTING.md).\n\n### Contributor Code of Conduct\n\n[CODE_OF_CONDUCT](./.github/CODE_OF_CONDUCT.md)\n\n## 9. License <a id=\"chapter-009\"></a>\n\n[LICENSE](./LICENSE)\n", "release_dates": []}, {"name": "openweb-jobs", "description": null, "language": null, "license": null, "readme": "# Job board\n\nThis repository hold job posts for [NEAR Protocol](https://near.org) ecosystem. All jobs organized in [its issues](https://github.com/near/openweb-jobs/issues). Please, follow our [ISSUE_TEMPLATE](https://github.com/near/openweb-jobs/blob/main/.github/ISSUE_TEMPLATE/new-job-post.md) when posting a new job.\n\nDO NOT USE THIS REPOSITORY ISSUES DIRECTLY, for fully-featured access to open positions and its management sign-in via [jobs.nearspace.info](https://jobs.nearspace.info).\n\n![NEAR Job board](https://jobs.nearspace.info/social-1280x640.png)\n\n## JOB TEMPLATE\n\n- __Project:__ [`profiles/#1`](https://github.com/near/openweb-profiles/issues/1)\n- __Type:__ `full-time`|`project`|`freelance`|`bounty`\n- __Category:__ `engineering`|`design`|`customer-support`|`research`|`other`\n- __Location:__ `country:city`\n- __Remote:__ `no`|`yes`\n- __Required skills:__ `near-blockchain`|`rust`|`node.js`|`vue`|`javascript`|`other`\n- __Description:__ Multi-line mark-down formatted job description.\nWith details regarding company, position, duties, requirements, etc.\n", "release_dates": []}, {"name": "openweb-profiles", "description": null, "language": null, "license": null, "readme": "# Profiles board\n\nThis repository hold profiles of [NEAR Protocol](https://near.org) ecosystem members and organizations. All profiles organized in [its issues](https://github.com/near/openweb-profiles/issues).\n\nDO NOT USE THIS REPOSITORY ISSUES DIRECTLY, for fully-featured access to profiles and its management sign-in via [jobs.nearspace.info](https://jobs.nearspace.info/).\n\n![NEAR Protocol \u2014 Community members' profiles](https://jobs.nearspace.info/images/profiles-1280x640.png)\n\n## CANDIDATE TEMPLATE\n\nUse this template if you're looking for a job within NEAR ecosystem. Following candidate [ISSUE_TEMPLATE](https://github.com/near/openweb-profiles/blob/main/.github/ISSUE_TEMPLATE/candidate-profile.md) when creating a new issue.\n\n- __Available for__: `full-time`|`project`|`freelance`|`bounty`\n- __Categories__: `engineering`|`design`|`customer-support`|`research`|`other`\n- __Location__: `country:city`|`remote`\n- __Skills__: `near-blockchain`|`rust`|`nodejs`|`vue`|`javascript`|`other`\n- __Free-form CV:__ Multi-line mark-down formatted background description.\nWith details regarding previous experience and skills.\n\n## PROJECT/COMPANY TEMPLATE\n\nUse this template if you will be creating new jobs within NEAR ecosystem. Following company [ISSUE_TEMPLATE](https://github.com/near/openweb-profiles/blob/main/.github/ISSUE_TEMPLATE/company-project-profile.md) when creating a new issue.\n\n- __Free-form description:__ Multi-line mark-down formatted project/company description.\n", "release_dates": []}, {"name": "optimism", "description": "NEAR DA on optimism", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n<div align=\"center\">\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=600></a>\n  <h3><a href=\"https://optimism.io\">Optimism</a> is a low-cost and lightning-fast Ethereum L2 blockchain, built with the OP Stack.</h3>\n  <br />\n  <h3>+</h3>\n  <a href=\"https://near.org\"><img alt=\"NEAR Protocol\" src=\"docs/op-stack/src/assets/docs/understand/near-logo.svg\" width=600></a>\n  <h3> <a href=\"https://near.org\">NEAR</a> is a low-cost, usable, and scalable layer-one blockchain that offers cheap data availability layer.</h3>\n  <br />\n</div>\n\n## NEAR DA + OP Stack tutorial\n\nIf you're looking to run the OP Stack + NEAR DA setup for this repository, please visit the [NEAR DA guides](https://docs.near.org/data-availability/welcome) to get started.\n\n## What are Optimism and the OP Stack?\n\nOptimism is a low-cost and lightning-fast Ethereum L2 blockchain, **but it's also so much more than that**.\n\nThe OP Stack powers Optimism, an Ethereum L2 blockchain, and forms the technical foundation for the [the Optimism Collective](https://app.optimism.io/announcement)\u2014a group committed to the **impact=profit** principle. This principle rewards individuals for their positive contributions to the collective.\n\nOptimism addresses critical coordination failures in the crypto ecosystem, such as funding public goods and infrastructure. The OP Stack focuses on creating a shared, open-source system for developing new L2 blockchains within the proposed Superchain ecosystem, promoting collaboration and preventing redundant efforts.\n\nAs Optimism evolves, the OP Stack will adapt, encompassing components ranging from blockchain infrastructure to governance systems. This software suite aims to simplify L2 blockchain creation while supporting the growth and development of the Optimism ecosystem.\n\n## What is NEAR?\n\nNEAR is a decentralized application platform designed to improve scalability and user experience in blockchain technology.\n\nUtilizing a proof-of-stake consensus mechanism, it focuses on energy efficiency and high transaction throughput. NEAR\u2019s standout feature is sharding, which breaks the network into smaller segments for parallel processing, greatly enhancing speed and capacity.\n\nThis approach makes NEAR particularly appealing for developers building decentralized applications and for users seeking fast, low-cost transactions, and also for data availability for Ethereum rollups.\n\n## Documentation\n\nIf you want to learn more about the OP Stack, check out the documentation at [stack.optimism.io](https://stack.optimism.io/).\n\nIf you want to learn more about the NEAR Data Availability and also NEAR, check out the documentation at [near.org](https://near.org/)\n\n## Community\n\n### Optimism\n\nGeneral discussion happens most frequently on the [Optimism Discord](https://discord.gg/optimism).\nGovernance discussion can also be found on the [Optimism Governance Forum](https://gov.optimism.io/).\n\n### NEAR\n\nGeneral discussion happens most frequently on the [NEAR discord](https://discord.com/invite/zfhfRpaM4m).\nOther discussions can be found on the [NEAR Governance Forum](https://gov.near.org/).\n\n<!-- ## Contributing\n\nRead through [CONTRIBUTING.md](./CONTRIBUTING.md) for a general overview of our contribution process.\nUse the [Developer Quick Start](./CONTRIBUTING.md#development-quick-start) to get your development environment set up to start working on the Optimism Monorepo.\nThen check out our list of [good first issues](https://github.com/ethereum-optimism/optimism/contribute) to find something fun to work on! -->\n\n## e2e testing\n\nThis repository has updated end-to-end tests in the `op-e2e` package to work with\nNEAR DA as the data availability (DA) layer.\n\nCurrently, the tests assume a working [Celestia devnet](https://github.com/rollkit/local-celestia-devnet) running locally:\n\n```bash\ndocker run --platform linux/amd64 -p 26658:26658 ghcr.io/rollkit/local-celestia-devnet:v0.11.0-rc8\n```\n\nThe e2e tests can be triggered with:\n\n```bash\ncd $HOME/optimism\ncd op-e2e\nmake test\n```\n\n## Bridging\n\nIf you have the OP Stack + NEAR DA setup running, you can test out bridging from the L1\nto the L2.\n\nTo do this, first navigate to the `packages/contracts-bedrock` directory and create a\n`.env` file with the following contents:\n\n```bash\nL1_PROVIDER_URL=http://localhost:8545\nL2_PROVIDER_URL=http://localhost:9545\nPRIVATE_KEY=bf7604d9d3a1c7748642b1b7b05c2bd219c9faa91458b370f85e5a40f3b03af7\n```\n\nThen, run the following from the same directory:\n\n```bash\nnpx hardhat deposit --network devnetL1 --l1-provider-url http://localhost:8545 --l2-provider-url http://localhost:9545 --amount-eth <AMOUNT> --to <ADDRESS>\n```\n\n## Directory Structure\n\n<pre>\n~~ Production ~~\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/common-ts\">common-ts</a>: Common tools for building apps in TypeScript\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts\">contracts</a>: L1 and L2 smart contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-periphery\">contracts-periphery</a>: Peripheral contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/core-utils\">core-utils</a>: Low-level utilities that make building Optimism easier\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/data-transport-layer\">data-transport-layer</a>: Service for indexing Optimism-related L1 data\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/chain-mon\">chain-mon</a>: Chain monitoring services\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/fault-detector\">fault-detector</a>: Service for detecting Sequencer faults\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/message-relayer\">message-relayer</a>: Tool for automatically relaying L1<>L2 messages in development\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/replica-healthcheck\">replica-healthcheck</a>: Service for monitoring the health of a replica node\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/sdk\">sdk</a>: provides a set of tools for interacting with Optimism\n\u251c\u2500\u2500 <a href=\"./batch-submitter\">batch-submitter</a>: Service for submitting batches of transactions and results to L1\n\u251c\u2500\u2500 <a href=\"./bss-core\">bss-core</a>: Core batch-submitter logic and utilities\n\u251c\u2500\u2500 <a href=\"./gas-oracle\">gas-oracle</a>: Service for updating L1 gas prices on L2\n\u251c\u2500\u2500 <a href=\"./indexer\">indexer</a>: indexes and syncs transactions\n\u251c\u2500\u2500 <a href=\"./infra/op-replica\">infra/op-replica</a>: Deployment examples and resources for running an Optimism replica\n\u251c\u2500\u2500 <a href=\"./integration-tests\">integration-tests</a>: Various integration tests for the Optimism network\n\u251c\u2500\u2500 <a href=\"./l2geth\">l2geth</a>: Optimism client software, a fork of <a href=\"https://github.com/ethereum/go-ethereum/tree/v1.9.10\">geth v1.9.10</a>  (deprecated for BEDROCK upgrade)\n\u251c\u2500\u2500 <a href=\"./l2geth-exporter\">l2geth-exporter</a>: A prometheus exporter to collect/serve metrics from an L2 geth node\n\u251c\u2500\u2500 <a href=\"./op-exporter\">op-exporter</a>: A prometheus exporter to collect/serve metrics from an Optimism node\n\u251c\u2500\u2500 <a href=\"./proxyd\">proxyd</a>: Configurable RPC request router and proxy\n\u251c\u2500\u2500 <a href=\"./technical-documents\">technical-documents</a>: audits and post-mortem documents\n\n~~ BEDROCK upgrade - Not production-ready yet, part of next major upgrade ~~\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/contracts-bedrock\">contracts-bedrock</a>: Bedrock smart contracts. To be merged with ./packages/contracts.\n\u251c\u2500\u2500 <a href=\"./op-bindings\">op-bindings</a>: Go bindings for Bedrock smart contracts.\n\u251c\u2500\u2500 <a href=\"./op-batcher\">op-batcher</a>: L2-Batch Submitter, submits bundles of batches to L1\n\u251c\u2500\u2500 <a href=\"./op-e2e\">op-e2e</a>: End-to-End testing of all bedrock components in Go\n\u251c\u2500\u2500 <a href=\"./op-node\">op-node</a>: rollup consensus-layer client.\n\u251c\u2500\u2500 <a href=\"./op-proposer\">op-proposer</a>: L2-Output Submitter, submits proposals to L1\n\u251c\u2500\u2500 <a href=\"./ops-bedrock\">ops-bedrock</a>: Bedrock devnet work\n\u2514\u2500\u2500 <a href=\"./specs\">specs</a>: Specs of the rollup starting at the Bedrock upgrade\n</pre>\n<!--\n## Branching Model\n\n### Active Branches\n\n| Branch          | Status                                                                           |\n| --------------- | -------------------------------------------------------------------------------- |\n| [master](https://github.com/ethereum-optimism/optimism/tree/master/)                   | Accepts PRs from `develop` when we intend to deploy to mainnet.                                      |\n| [develop](https://github.com/ethereum-optimism/optimism/tree/develop/)                 | Accepts PRs that are compatible with `master` OR from `release/X.X.X` branches.                    |\n| release/X.X.X                                                                          | Accepts PRs for all changes, particularly those not backwards compatible with `develop` and `master`. |\n\n### Overview\n\nWe generally follow [this Git branching model](https://nvie.com/posts/a-successful-git-branching-model/).\nPlease read the linked post if you're planning to make frequent PRs into this repository (e.g., people working at/with Optimism).\n\n### Production branch\n\nOur production branch is `master`.\nThe `master` branch contains the code for our latest \"stable\" releases.\nUpdates from `master` **always** come from the `develop` branch.\nWe only ever update the `master` branch when we intend to deploy code within the `develop` to the Optimism mainnet.\nOur update process takes the form of a PR merging the `develop` branch into the `master` branch.\n\n### Development branch\n\nOur primary development branch is [`develop`](https://github.com/ethereum-optimism/optimism/tree/develop/).\n`develop` contains the most up-to-date software that remains backwards compatible with our latest experimental [network deployments](https://community.optimism.io/docs/useful-tools/networks/).\nIf you're making a backwards compatible change, please direct your pull request towards `develop`.\n\n**Changes to contracts within `packages/contracts/contracts` are usually NOT considered backwards compatible and SHOULD be made against a release candidate branch**.\nSome exceptions to this rule exist for cases in which we absolutely must deploy some new contract after a release candidate branch has already been fully deployed.\nIf you're changing or adding a contract and you're unsure about which branch to make a PR into, default to using the latest release candidate branch.\nSee below for info about release candidate branches.\n\n### Release candidate branches\n\nBranches marked `release/X.X.X` are **release candidate branches**.\nChanges that are not backwards compatible and all changes to contracts within `packages/contracts/contracts` MUST be directed towards a release candidate branch.\nRelease candidates are merged into `develop` and then into `master` once they've been fully deployed.\nWe may sometimes have more than one active `release/X.X.X` branch if we're in the middle of a deployment.\nSee table in the **Active Branches** section above to find the right branch to target.\n\n## Releases\n\n### Changesets\n\nWe use [changesets](https://github.com/changesets/changesets) to mark packages for new releases.\nWhen merging commits to the `develop` branch you MUST include a changeset file if your change would require that a new version of a package be released.\n\nTo add a changeset, run the command `yarn changeset` in the root of this monorepo.\nYou will be presented with a small prompt to select the packages to be released, the scope of the release (major, minor, or patch), and the reason for the release.\nComments within changeset files will be automatically included in the changelog of the package.\n\n### Triggering Releases\n\nReleases can be triggered using the following process:\n\n1. Create a PR that merges the `develop` branch into the `master` branch.\n2. Wait for the auto-generated `Version Packages` PR to be opened (may take several minutes).\n3. Change the base branch of the auto-generated `Version Packages` PR from `master` to `develop` and merge into `develop`.\n4. Create a second PR to merge the `develop` branch into the `master` branch.\n\nAfter merging the second PR into the `master` branch, packages will be automatically released to their respective locations according to the set of changeset files in the `develop` branch at the start of the process.\nPlease carry this process out exactly as listed to avoid `develop` and `master` falling out of sync.\n\n**NOTE**: PRs containing changeset files merged into `develop` during the release process can cause issues with changesets that can require manual intervention to fix.\nIt's strongly recommended to avoid merging PRs into develop during an active release.\n\n## License\n\nCode forked from [`go-ethereum`](https://github.com/ethereum/go-ethereum) under the name [`l2geth`](https://github.com/ethereum-optimism/optimism/tree/master/l2geth) is licensed under the [GNU GPLv3](https://gist.github.com/kn9ts/cbe95340d29fc1aaeaa5dd5c059d2e60) in accordance with the [original license](https://github.com/ethereum/go-ethereum/blob/master/COPYING).\n\nAll other files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/optimism/blob/master/LICENSE) unless stated otherwise. -->\n\n", "release_dates": []}, {"name": "pagoda-console", "description": "Pagoda Console Monorepo", "language": "TypeScript", "license": null, "readme": "# Pagoda Console\n\nThis monorepo uses [npm workspaces](https://docs.npmjs.com/cli/v7/using-npm/workspaces) and [turborepo](https://turborepo.org/)\n\n**Prod**: [console.pagoda.co](https://console.pagoda.co)  \n**Dev**: [core.dev.console.pagoda.co](https://core.dev.console.pagoda.co)\n\n## Quickstart\n\n### Configure Environment Variables\n\nCopy the following files as starting points, and complete them by obtaining secrets from fellow developers.\n\n- `frontend/.env.local.example` \u2192 `frontend/.env.local`\n- `backend/.env.nest.local.example` \u2192 `backend/.env.nest.local`\n\n### VS Code Dev Container (recommended)\n\nThe recommend way to run this project is with VS Code and Dev Containers.\n\n> The Visual Studio Code Remote - Containers extension lets you use a Docker container as a full-featured development environment. It allows you to open any folder inside (or mounted into) a container and take advantage of Visual Studio Code's full feature set.\n\nThis will create a set of Docker containers with all required dependencies preconfigured by the Console team.\n\n1. Follow the [official Installation instructions](https://code.visualstudio.com/docs/remote/containers#_installation) from VS Code to install Docker and the required extensions\n2. Open this directory in VS Code\n3. If prompted in the bottom right with the pictured message, click \"Reopen in Container\".\n   <img src=\"./devResources/reopen-in-container.png\" width=\"500\">  \n   Otherwise, open the VS Code command palette and run `Remote-Containers: Reopen in Container`.\n4. Wait for the build process to complete. You will now have two connected Docker containers running. One is your Node+Typescript development environment and one is a Postgres instance. Your files are mounted into the Node+Typescript container, so edits made through VS Code apply to the files on your local filesystem\n5. Open an in-editor terminal by selecting `Terminal > New Terminal` from the Menu Bar\n6. Run `npm install` to install dependencies\n7. Run `npm -w database run migrate:reset` to initialize the database\n8. Choose `Run > Start Debugging` or hit F5 to run both the frontend and backend live-reload mode\n9. The frontend is available at `localhost:3000` and the backend is available at `localhost:3001`. VS Code will automatically expose the port from the Dev Container to the rest of your machine\n\n### nvm + Docker (alternate)\n\nIf you're running in to performance issues running/building the app inside the Dev Container, another option is run the app locally via [nvm](https://github.com/nvm-sh/nvm) and Postgres directly through Docker\n\n#### Postgres\n\nFor now, you will need to make a change to your `/etc/hosts` file to properly resolve connections to the database container.\nSee the following comment: https://github.com/near/pagoda-console/pull/18#issuecomment-1258366725\n\nYou can run a Postgres container with the appropriate default environment variables via either `docker compose` or `docker run`\n\n##### Docker Compose\n\n```bash\ncd .devcontainer\ndocker compose up db\n```\n\n##### Docker Run\n\n```bash\ndocker run -d --name console-db -p 5432:5432 -e POSTGRES_USER=pguser -e POSTGRES_PASSWORD=pgpass -e POSTGRES_DB=devconsole postgres:13-alpine\n```\n\n#### Frontend + Backend\n\n1. Install `nvm`.\n2. Open your preferred terminal and navigate to the project's root directory.\n3. Run `nvm use`. This will install and activate the correct version of `npm` and `node` within your terminal session.\n4. Run `npm install` to install dependecies.\n5. Run `npm run dev` to start both the frontend and backend in live-reload mode\n6. The frontend is available at `localhost:3000` and the backend is available at `localhost:3001`.\n\n## Dev Container Usage\n\nThe default resource allocations for Docker are relatively low. If you plan to continue using VS Code Dev Containers, it is recommended to raise them significantly in Docker Desktop's preferences so that your development environment can benefit from the full power of your machine.\n\nThe `node_modules` dir is mounted to a volume instead of the host for increased performance. Running `rm -rf node_modules` may interrupt the mount, so opt for the following to wipe dependencies ([context](https://code.visualstudio.com/remote/advancedcontainers/improve-performance#_use-a-targeted-named-volume))\n\n```bash\nrm -rf node_modules/* node_modules/.*\n```\n\n## Installing dependencies\n\nRun `npm install` from the root to install depenedencies for all packages\n\n## Developing / Debugging\n\nNote: for debugging the frontend, add the following line\n\n```ts\nbreakpoint;\n```\n\nThese breakpoints will take effect if browser devtools are open.\n\n### VS Code\n\nA debugging configuration is included at `.vscode/launch.json`. Choose _Run > Start Debugging (F5)_ to run both the frontend and backend, with breakpoint gutter support for the backend.\n\n### Other\n\nTo run both the frontend and backend:\n\n```bash\nnpm run dev\n```\n\n## Running\n\nTo compile and run the project:\n\n```bash\nnpm start\n```\n", "release_dates": []}, {"name": "pagoda-docs", "description": null, "language": "JavaScript", "license": null, "readme": "# Website\n\nThis website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.\n\n### Installation\n\n```\n$ yarn\n```\n\n### Local Development\n\n```\n$ yarn start\n```\n\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\n\n### Build\n\n```\n$ yarn build\n```\n\nThis command generates static content into the `build` directory and can be served using any static contents hosting service.\n\n### Deployment\n\nUsing SSH:\n\n```\n$ USE_SSH=true yarn deploy\n```\n\nNot using SSH:\n\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\n", "release_dates": []}, {"name": "pagoda-relayer-rs", "description": "Rust Reference Implementation of Relayer for NEP-366 Meta Transactions", "language": "Rust", "license": null, "readme": "# Pagoda Relayer\n\n## What is a Relayer?\nAt a high level, the Relayer is a http server that relays transactions to the NEAR network via RPC on behalf of new users who haven't yet acquired NEAR as part of the onboarding process. The entity running the relayer covers the gas costs for the end users who are signing the transactions.\n\n## How does a Relayer work?\nThis functionality depends on [NEP-366: Meta Transactions](https://github.com/near/NEPs/pull/366).\n\nTechnically, the end user (client) creates a `SignedDelegateAction` that contains the data necessary to construct a `Transaction`, signs the `SignedDelegateAction` using their key, which is then serialized and sent  to the relayer (server) as payload of a POST request. \nWhen the request is received, the relayer uses its own key to sign a `Transaction` using the fields in the `SignedDelegateAction` as input to create a `SignedTransaction`. \nThe `SignedTransaction` is then sent to the network via RPC call and the result is then sent back to the client.\n\n## Why use a Relayer?\n1. Your users are new to NEAR and don't have any gas to cover transactions \n2. Your users have an account on NEAR, but only have a Fungible Token Balance. They can now use the FT to pay for gas\n3. As an enterprise or a large startup you want to seamlessly onboard your existing users onto NEAR without needing them to worry about gas costs and seed phrases\n4. As an enterprise or large startup you have a userbase that can generate large spikes of user activity that would congest the network. In this case, the relayer acts as a queue for low urgency transactions  \n5. In exchange for covering the gas fee costs, relayer operators can limit where users spend their assets while allowing users to have custody and ownership of their assets \n6. Capital Efficiency: Without relayer if your business has 1M users they would have to be allocated 0.25 NEAR to cover their gas costs totalling 250k NEAR. However, only ~10% of the users would actually use the full allowance and a large amount of the 250k NEAR is just sitting there unused. So using the relayer, you can allocate 50k NEAR as a global pool of capital for your users, which can refilled on an as needed basis.\n\n## Features \nThese features can be mixed and matched \"\u00e0 la carte\". Use of one feature does not preclude the use of any other feature unless specified. See the `/examples` directory for example configs corresponding to different use cases.\n\nNOTE: If integrating with fastauth make sure to enable feature flags: `cargo build --features fastauth_features,shared_storage`. If using shared storage, make sure to enable feature flags: `cargo build --features shared_storage`\n\n\n1. Cover the gas costs of end users while allowing them to maintain custody of their funds and approve transactions (`/relay`, `/send_meta_tx`, `/send_meta_tx_async`, `/send_meta_tx_nopoll`)\n2. Only pay for users interacting with certain contracts by whitelisting contracts addresses (`whitelisted_contracts` in `config.toml`) \n3. Specify gas cost allowances for all accounts (`/update_all_allowances`) or on a per-user account basis (`/create_account_atomic`, `/register_account`, `/update_allowance`) and keep track of allowances (`/get_allowance`)\n4. Specify the accounts for which the relayer will cover gas fees (`whitelisted_delegate_action_receiver_ids` in `config.toml`)\n5. Only allow users to register if they have a unique Oauth Token (`/create_account_atomic`, `/register_account`)\n6. Relayer Key Rotation: `keys_filenames` in `config.toml`\n7. Integrate with [Fastauth SDK](https://docs.near.org/tools/fastauth-sdk). See `/examples/configs/fastauth.toml`\n8. Mix and Match config options - see `examples/configs`\n\n### Features - COMING SOON\n1. Allow users to pay for gas fees using Fungible Tokens they hold. This can be implemented by either:\n   1. Swapping the FT for NEAR using a DEX like [Ref finance](https://app.ref.finance/) OR\n   2. Sending the FT to a burn address that is verified by the relayer and the relayer covers the equivalent amount of gas in NEAR\n2. Cover storage deposit costs by deploying a storage contract\n3. automated relayer funds \"top up\" service\n4. Put transactions in a queue to minimize network congestion - expected early-mid 2024\n5. Multichain relayers - expected early-mid 2024\n\n## API Spec <a id=\"api_spc\"></a>\nFor more details on the following endpoint and to try them out, please [setup your local dev env](#basic_setup).\nAfter you have started the server with `cargo run`,\nopen http://0.0.0.0:3030/swagger-ui/#/ in your browser to view the swagger docs and test out the endpoints with the example payloads.\nAlternatively, you can open http://0.0.0.0:3030/rapidoc#overview for the rapidocs.\nBoth swagger and rapidoc are based on the openapi standard and generated using the [utoipa crate](https://crates.io/crates/utoipa).\nThese are helpful starter api docs and payloads, but not all example payloads will work on the endpoints in swagger-ui or rapidoc.\n\n#### Known issues\n1.  the SignedDelegateAction is not supported by the openapi schema. Replace\n```json\n\"signed_delegate_action\": \"string\"\n``` \nwith\n```json\n\"signed_delegate_action\": {\n   \"delegate_action\": {\n      \"actions\": [{\n            \"Transfer\": {\n                \"deposit\": \"1\"\n            }\n      }],\n      \"max_block_height\": 122790412,\n      \"nonce\": 103066617000686,\n      \"public_key\": \"ed25519:89GtfFzez3opomVpwa7i4m3nptHtc7Ha514XHMWszQtL\",\n      \"receiver_id\": \"relayer.pagodaplatform.near\",\n      \"sender_id\": \"relayer.pagodaplatform.near\"\n   },\n   \"signature\": \"ed25519:5uJu7KapH89h9cQm5btE1DKnbiFXSZNT7McDw5LHy8pdAt5Mz9DfuyQZadGgFExo88or9152iwcw2q12rnFWa6bg\"\n}\n```\n2. The `/relay` endpoint is [borsh](https://github.com/near/borsh) serialized representation of SignedDelegateAction (as opposed to json) and thus does not work with swagger or rapidoc. Please use a borsh serialized SignedDelegateAction that will look like:\n```json\n{\n    \"borsh_signed_delegate_action\": [64, 0, 0, 0, 49, 48, 97, 102, 100, 99, 98, 101, 99, 99, 55, 100, 54, 55, 57, 57, 102, 102, 52, 48, 48, 49, 98, 56, 56, 100, 53, 56, 97, 57, 56, 50, 51, 55, 98, 98, 49, 100, 55, 100, 54, 100, 48, 99, 98, 99, 54, 102, 57, 100, 99, 102, 100, 57, 49, 51, 56, 97, 57, 50, 57, 53, 55, 56, 11, 0, 0, 0, 116, 111, 107, 101, 110, 46, 115, 119, 101, 97, 116, 2, 0, 0, 0, 2, 11, 0, 0, 0, 102, 116, 95, 116, 114, 97, 110, 115, 102, 101, 114, 139, 0, 0, 0, 123, 34, 114, 101, 99, 101, 105, 118, 101, 114, 95, 105, 100, 34, 58, 34, 101, 100, 100, 51, 97, 49, 55, 97, 99, 50, 51, 55, 102, 102, 98, 51, 50, 54, 54, 98, 48, 98, 101, 55, 48, 98, 100, 101, 97, 49, 48, 52, 53, 51, 50, 97, 101, 48, 98, 50, 101, 100, 102, 49, 48, 100, 57, 99, 50, 97, 53, 97, 48, 49, 53, 101, 52, 56, 99, 97, 52, 54, 52, 57, 34, 44, 34, 97, 109, 111, 117, 110, 116, 34, 58, 34, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 109, 101, 109, 111, 34, 58, 34, 115, 119, 58, 116, 58, 57, 107, 118, 74, 69, 86, 119, 71, 107, 101, 34, 125, 0, 224, 6, 161, 187, 12, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 0, 0, 0, 102, 116, 95, 116, 114, 97, 110, 115, 102, 101, 114, 88, 0, 0, 0, 123, 34, 114, 101, 99, 101, 105, 118, 101, 114, 95, 105, 100, 34, 58, 34, 102, 101, 101, 115, 46, 115, 119, 101],\n    \"signature\": \"ed25519:3oBH35ETxwj2MJJmiQtB4WLps7CNBvhZ33y2zuamPjgbWVLBgUr47sLGVBmuoiA5nXtra9CJMEiHQNWZB8saGnFW\"\n}\n```\n3. The `/get_allowance` endpoint doesn't work in swagger, but works fine in Postman \u00af\\_(\u30c4)_/\u00af\n\nFor more extensive testing, especially when you've deployed the relayer to multiple environments, it is recommended that you use Postman or some other api testing service.\n- POST `/relay`\n- POST `/send_meta_tx`\n- POST `/send_meta_tx_async`\n- POST `/send_meta_tx_nopoll`\n- GET `/get_allowance`\n- POST `/update_allowance`\n- POST `/update_all_allowances`\n- POST `/create_account_atomic`\n- POST `/register_account`\n\n## Basic Setup - Local Dev <a id=\"basic_setup\"></a>\n1. [Install Rust for NEAR Development](https://docs.near.org/sdk/rust/get-started)\n2. If you don't have a NEAR account, [create one](https://docs.near.org/concepts/basics/accounts/creating-accounts)\n3. With the account from step 2, create a json file in this directory in the format `{\"account_id\":\"example.testnet\",\"public_key\":\"ed25519:98GtfFzez3opomVpwa7i4m3nptHtc7Ha514XHMWszLtQ\",\"private_key\":\"ed25519:YWuyKVQHE3rJQYRC3pRGV56o1qEtA1PnMYPDEtroc5kX4A4mWrJwF7XkzGe7JWNMABbtY4XFDBJEzgLyfPkwpzC\"}` using a [Full Access Key](https://docs.near.org/concepts/basics/accounts/access-keys#key-types) from an account that has enough NEAR to cover the gas costs of transactions your server will be relaying. Usually, this will be a copy of the json file found in the `.near-credentials` directory. \n4. Update values in `config.toml`\n5. Open up the `port` from `config.toml` in your machine's network settings\n6. Run the server using `cargo run`. \n7. (OPTIONAL) To run with logs (tracing) enabled run `RUST_LOG=tower_http=debug cargo run`\n8. (OPTIONAL) If integrating with fastauth make sure to enable feature flags: `cargo build --features fastauth_features,shared_storage`. If using shared storage, make sure to enable feature flags: `cargo build --features shared_storage`\n\n## Redis Setup - OPTIONAL \nNOTE: this is only needed if you intend to use whitelisting, allowances, and oauth functionality\n\n1. [Install redis](https://redis.io/docs/getting-started/installation/). Steps 2 & 3 assume redis installed on machine instead of docker setup. If you're connecting to a redis instance running in gcp, follow the above steps to connect to a vm that will forward requests from your local relayer server to redis running in gcp: https://cloud.google.com/memorystore/docs/redis/connect-redis-instance#connecting_from_a_local_machine_with_port_forwarding\n2. Run `redis-server --bind 127.0.0.1 --port 6379` - make sure the port matches the `redis_url` in the `config.toml`.\n3. Run `redis-cli -h 127.0.0.1 -p 6379`\n\n## Multiple Key Generation - OPTIONAL, but recommended for high throughput to prevent nonce race conditions\n1. [Install NEAR CLI](https://docs.near.org/tools/near-cli#installation)\n2. Make sure you're using the appropriate network: `echo $NEAR_ENV`. To change it, `export NEAR_ENV=testnet` \n3. Make sure your keys you want to use for the relayer have a `'FullAccess'` access_key by running `near keys your_relayer_account.testnet`. This is required to create more keys. You need to have access to at least 1 `'FullAccess'` access_key \n4. Generate a new implicit key: `near generate-key`\n   1. This will output something like `Key pair with ed25519:GdsF992LXiwNiAGUtxL7VbcPBAckbYBZubF6fTYrVY5Q public key for an account \"e05185d0de0d6e4897555a386fdd3f48508ad1cdeaebcbd1cac81c72116cc5ab\"`\n5. Add the newly generated key to the relayer account: `near add-key your_relayer_account.testnet ed25519:GdsF992LXiwNiAGUtxL7VbcPBAckbYBZubF6fTYrVY5Q`\n   1. This will output something like: `Adding full access key = ed25519:GdsF992LXiwNiAGUtxL7VbcPBAckbYBZubF6fTYrVY5Q to your_relayer_account.testnet. Transaction Id Bur9nJxos4f5cbibYXugZQQmZ4Uo2jsHYiVUwPT7AZMG To see the transaction in the transaction explorer, please open this url in your browser https://explorer.testnet.near.org/transactions/Bur9nJxos4f5cbibYXugZQQmZ4Uo2jsHYiVUwPT7AZMG`\n6. Repeat steps 4 & 5 until you have the desired number of keys. Anywhere between 5-20 full access keys added to the relayer account works for most cases. \n7. To double-check your keys were successfully added to the account run `near keys your_relayer_account.testnet` again, and you should see the newly added full access keys\n8. Copy all contents of the newly generated keyfiles (usually `.json` files located in` ~/.near-credentials` directory) into the json file (`your_relayer_account.testnet.json` in the example) in the `account_keys` directory. You will now have a list of jsons from json key files containing 3 entries: account_id, public_key, secret_key in the file.\n   1. NOTE: You might need to change `private_key` to `secret_key`\n9. Change all the `\"account_id\"`s of the keyfiles in the relayer directory from the implicit account_id (i.e. `e05185d0de0d6e4897555a386fdd3f48508ad1cdeaebcbd1cac81c72116cc5ab`) to the relayer account_id `your_relayer_account.testnet`\n10. Make sure the `key_filename` in `config.toml` matches your (i.e. `\"your_relayer_account.testnet.json\"`) to the `keys_filenames` list in `config.toml`\n\n## Unit Testing\n1. Run unit tests with `cargo test`\n\n## Performance Testing\n1. Remove the `#[ignore]` attribute above `test_relay_with_load()` testing function and run the test\n2. Flame Tracing https://crates.io/crates/tracing-flame\n   - Set `flametrace_performance = true` in `config.toml` \n   - run `cargo run`, while sending requests to the endpoints of the functions you want to examine the performance of. \n   - Stop the execution of the `cargo run` process. \n   - Install inferno `cargo install inferno` \n   - Generate the flamegraph from the `tracing.folded` file generated while running the relayer: `cat tracing.folded | inferno-flamegraph > tracing-flamegraph.svg`\n   - Generate a flamechart: `cat tracing.folded | inferno-flamegraph --flamechart > tracing-flamechart.svg`\n\n## Docker Deployment\n1. Update `config.toml` as per your requirements.\n2. Add any account key json files you need to use to the `account_keys` directory.\n3. Update the `key_filenames` and `num_keys` parameter in the `config.toml` based on the keys you store in the `account_keys` directory.\n4. Run command `docker compose up`\n   this will create a `pagoda-relayer-rs` and `redis` container\n   \n    Run command `docker compose down` to stop the containers\n5. Test the endpoints. See [API Spec](#api_spec)\n\n## Cloud Deployment\n\nTerraform scripts are located in this repo: https://github.com/near/terraform-near-relayer\n\nThe Relayer is best deployed in a serverless environment, such as AWS Lambda or GCP Cloud Run, to optimally manage automatic scalability and optimize cost. \n\nAlternatively, the relayer can be deployed on a VM instance if the expected traffic to the relayer (and thus the CPU, RAM requirements) is well known ahead of time.\n\nFor security, it is recommended that the Full Access Key credentials are stored in a Secret Manager Service. NOTE: there should not be an large amount of funds stored on the relayer account associated with the signing key. It is better to periodically \"top up\" the relayer account. \"Top up\" Service coming soon...\n", "release_dates": []}, {"name": "Pagoda-Roadmap", "description": "Repo for testing GH project management features.", "language": null, "license": null, "readme": "# Pagoda Roadmap\nRepo for all Pagoda's product and engineering roadmap inclsuive of OKRs and initiatives across Near.org, Near BOS, and more.\n", "release_dates": []}, {"name": "paperclip", "description": "WIP OpenAPI tooling for Rust.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Paperclip\n\n[![Build Status](https://api.travis-ci.org/wafflespeanut/paperclip.svg?branch=master)](https://travis-ci.org/wafflespeanut/paperclip)\n[![API docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://paperclip.waffles.space/paperclip)\n[![Crates.io](https://img.shields.io/crates/v/paperclip.svg)](https://crates.io/crates/paperclip)\n\nPaperclip offers tooling for the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification/). Once complete, it will provide:\n\n- Code generation for efficient, type-safe, compile-time checked HTTP APIs (server, client and CLI) in Rust.\n- Support for processing, validating and hosting OpenAPI spec.\n- Customization for spec and code generation.\n\nIt's currently under active development and may not be ready for production use just yet.\n\nYou may be interested in:\n\n - [Examples and Usage](https://paperclip.waffles.space/).\n - [Features being worked on](https://github.com/wafflespeanut/paperclip/projects).\n - [API documentation](https://paperclip.waffles.space/paperclip).\n\n## Developing locally\n\n - Make sure you have [`rustup`](https://rustup.rs/) installed. `cd` into this repository and run `make prepare` to setup your environment.\n - Now run `make` to build and run the tests.\n\n## Contributing\n\nThis project welcomes all kinds of contributions. No contribution is too small!\n\nIf you want to contribute to this project but don't know how to begin or if you need help with something related to this project, feel free to send me an email (in Github profile) or join the [Discord server](https://discord.gg/PPu4Dhj).\n\n## Code of Conduct\n\nThis project follows the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Sponsors\n\nFolks who have sponsored for the development of this project:\n\n<table>\n  <tr>\n    <td><a href=\"https://offscale.io\"><img src=\"https://avatars1.githubusercontent.com/u/11748352\" width=\"100\"></a>\n  </tr>\n</table>\n\n## FAQ\n\n> Why is this generating raw Rust code instead of leveraging [procedural macros](https://doc.rust-lang.org/reference/procedural-macros.html) for compile-time codegen?\n\nI don't think proc macros are the right way to go for REST APIs. We need to be able to **see** the generated code somehow to identify names, fields, supported methods, etc. With proc macros, you sorta have to guess.\n\nThis doesn't mean you can't generate APIs in compile-time. The only difference is that you'll be using [build scripts](https://paperclip.waffles.space/build-script.html) instead and `include!` the relevant code. That said, [we're using proc-macros](./macros) for other things.\n\n> The error thrown at compile-time doesn't look like it's very useful. Isn't there a better way to do this?\n\nNone that I can think of, sadly.\n\n**New ideas are here needed.**\n", "release_dates": []}, {"name": "parameter-estimator-reports", "description": "Continuous gas fee parameter estimation results", "language": "JavaScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "partners-arterra", "description": "Tracking issues for NEAR & ARterra as ARterra works to launch on NEAR's mainnet", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "phase2-validator-votes", "description": "Each validator can post here their criteria for Phase2, and token holders can comment.", "language": null, "license": null, "readme": "# phase2-validator-votes\nEach validator can post here their criteria for Phase2, and token holders can comment.\n\n## MOVED: https://github.com/nearprotocol/NEPs/issues/115\n", "release_dates": []}, {"name": "pm2-promise", "description": "Promised version PM2", "language": "JavaScript", "license": null, "readme": "# pm2-promise\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n\npm2-promise is a tiny library that adds promise awareness to pm2\n\n## Installation\n\n```sh\nnpm install pm2-promise\n```\n\n[downloads-image]: https://img.shields.io/npm/dm/pm2-promise.svg\n[npm-url]: https://www.npmjs.com/package/pm2-promise\n[npm-image]: https://img.shields.io/npm/v/pm2-promise.svg\n\n[travis-url]: https://travis-ci.org/3axap4eHko/pm2-promise\n[travis-image]: https://img.shields.io/travis/3axap4eHko/pm2-promise/master.svg", "release_dates": []}, {"name": "push-notifications-server", "description": null, "language": "TypeScript", "license": null, "readme": "# Push notifications server\n\n## Quick start\n\nRun to build:\n`npm run build`\n\nRun to start:\n`npm run dev`\n\n## Using Pub/Sub emulator\n\nInstall Pub/Sub:\n\n`gcloud components install pubsub-emulator`\n\n`gcloud components update`\n\nStart the emulator:\n\n`gcloud beta emulators pubsub start --project=test-project`\n\nSetup the topic by sending a PUT request:\n\n`curl --location --request PUT 'http://localhost:8085/v1/projects/test-project/topics/test'`\n\nExport the environment variables by running the following command in the terminal where the push notifications server will be started:\n\n`$(gcloud beta emulators pubsub env-init)`\n\nStart the server:\n\n`npm run dev`\n\n## Docker\n\nBuild an image:\n\n`docker build -t push-notifications-server .`\n\nStart the image locally:\n\n`docker run -e PUBSUB_EMULATOR_HOST='localhost:8085' -e START_BLOCK_HEIGHT='99093343' push-notifications-server node \"build/src/main.js\"`\n\n", "release_dates": []}, {"name": "queryapi", "description": "Near Indexing as a Service", "language": "Rust", "license": null, "readme": "# QueryApi\n\nWith QueryApi you can\n* Write your own custom indexer function at https://near.org/dataplatform.near/widget/QueryApi.Dashboard;\n* Specify the schema for your own custom hosted database and write to it with your indexer function;\n* Retrieve that data through a GraphQL API.\n\n## \ud83e\udde9 Components\n1. [Coordinator](./coordinator)\n   Continuously reads latest registry and attempts to synchronise that configuration across the system, i.e. starting relevant Block Streams and Executors.\n1. [Runner](./runner)\n   Manages \"Executors\" which, retrieves messages from Redis Streams, fetches matching blocks, and executes Indexer code against that block. \n   Retrieves messages from Redis Stream, fetching matching block and executes the IndexerFunction.\n1. [Block Streamer](./block-streamer)\n   Manages \"Block Streams\" which, use the configured contract filter to fetch relevant blocks from S3 and publish those blocks to Redis Streams.\n1. [IndexerFunction Editor UI](./frontend)\n   Serves the editor UI within the dashboard widget and mediates some communication with the GraphQL DB and block server.\n1. [Hasura Authentication Service](./hasura-authentication-service)\n   Provides authentication for the Hasura GraphQL server.\n1. [IndexerFunction Registry Contract](./registry)\n   Stores IndexerFunctions, their schemas and execution parameters like start block height.\n1. [Lake Block server](./block-server)\n   Serves blocks from the S3 lake for in browser testing of IndexerFunctions.\n\n## \ud83d\ude80 Getting Started\n\nThe majority of the QueryApi components can be set up locally using Docker. For this purpose, a [Docker Compose file](./docker-compose.yml) has been provided. However, the local system still relies on the NEAR Mainnet, rather than running on a localnet.\n\n### Requirements\n- [Docker](https://docs.docker.com/engine/install/)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n- [Hasura CLI](https://hasura.io/docs/latest/hasura-cli/install-hasura-cli/)\n- AWS Access Keys\n\n### AWS Credentials Setup\nQueryApi requires AWS credentials to stream blocks from [NEAR Lake](https://github.com/near/near-lake-indexer). Credentials are exposed via the following environment variables, which can be found in the Docker Compose file:\n\nRunner:\n- `AWS_ACCESS_KEY_ID`\n- `AWS_SECRET_ACCESS_KEY`\n\nCoordinator:\n- `LAKE_AWS_ACCESS_KEY`\n- `LAKE_AWS_SECRET_ACCESS_KEY`\n- `QUEUE_AWS_ACCESS_KEY`\n- `QUEUE_AWS_SECRET_ACCESS_KEY`\n\nThese should be populated with your credentials. In most cases, the same key pair can be used for all 3 sets of credentials. Just ensure the keys have permissions to access S3 for handling [Requestor Pays](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RequesterPaysBuckets.html) in Near Lake. \n\n### Hasura Configuration\nHasura contains shared tables for e.g. logging and setting arbitrary state. These tables must be configured prior to running the entire QueryApi application. Configuration is stored in the `hasura/` directory and deployed through the Hasura CLI.\n\nTo configure Hasura, first start it with:\n```sh\ndocker compose up hasura-graphql --detach\n```\n\nAnd apply the configuration with:\n```sh\ncd ./hasura && hasura deploy\n```\n\n### Running QueryApi\nWith everything configured correctly, we can now start all components of QueryApi with:\n```sh\ndocker compose up\n```\n\n### Local Configuration\n- Coordinator watches the dev registry contract by default (`dev-queryapi.dataplatform.near`). To use a different contract, you can update the `REGISTRY_CONTRACT_ID` environment variable.\n\n### Known Issues\n\nIt is expected to see some provisioning errors from `Runner` when starting QueryAPI for the first time. These occur when multiple indexers under the same account attempt to provision the same shared infrastructure. These should self resolve after a few seconds.\n", "release_dates": []}, {"name": "quickjs", "description": "Fork of QuickJS Javascript Engine used in NEAR JS SDK", "language": "C", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": ["2022-11-03T14:28:05Z", "2022-09-29T07:21:07Z", "2022-08-23T03:29:43Z", "2022-07-20T23:04:14Z"]}, {"name": "rainbow-bridge-fun", "description": "\ud83c\udf08 Rainbow Bridge contract pair to send ERC20 fungible tokens from Ethereum to NEAR", "language": "Rust", "license": null, "readme": "\ud83c\udf08 Eth\u2192NEAR Fungible Tokens \ud83c\udf08\n=============================\n\nSend an [ERC20] token over the [Rainbow Bridge], get an [NEP21] token on [NEAR]\n\n\nBackground\n==========\n\nYou can think of the [Rainbow Bridge] as having three main pieces:\n\n1. Clients. These get raw NEAR data into Ethereum and vice versa. These are light clients that run as smart contracts in each blockchain, with external relays to pipe the data in each direction.\n2. Provers. These are smart contracts that allow making assertions about data stored in the clients.\n3. Contract pairs. These provide an interface to Dapps that want to send certain kinds of data or calls from one blockchain to the other. They use the provers to ensure each operation is valid.\n\nThis repository contains a **contract pair** to allow a specific fungible token to be sent from Ethereum to NEAR.\n\nOn the Ethereum side, this is implemented as a `TokenLocker` Solidity contract. This contract given an ERC20 token contract address on initialization. Then Ethereans can send some amount of that ERC20 token to the contract and it will lock them, emitting a `Locked` event upon success.\n\nOn the NEAR side, there's a matching `MintableFungibleToken` Rust contract. When NEARkats call its `mint` function, the function calls Provers to verify that the expected `Locked` event was emitted on Ethereum at least 25 blocks ago.\n\nThis could, for example, allow you to convert an ERC20 token like DAI into a wrapped DAI token on NEAR, perhaps called nDAI or nearDAI. The contracts also provide a means to send this wrapped ERC20 back to Ethereum, using the provers & client on Ethereum to verify that the wrapped token was correctly burned on the NEAR side before unlocking DAI in the `TokenLocker` contract.\n\nHere's a schematic representation, where \"Transfer script\" could be understood to be JavaScript in a user's browser or a CLI call:\n\n![TRANSFER SCRIPT calls 'approve' on ERC20 then 'lockToken' on LOCKER. LOCKER calls 'safeTransferFrom' on ERC20 then emits 'Locked' event. TRANSFER SCRIPT then notes the block of the 'Locked' event. TRANSFER SCRIPT then waits for this block to finalize over the bridge and extracts a proof. TRANSFER SCRIPT calls 'mint' on MINTABLE FUNGIBLE TOKEN. MINTABLE FUNGIBLE TOKEN checks that the event was not used before and that it's not too far in the past, then calls 'verify_log_entry' on PROVER. PROVER calls 'verify_trie_proof' on itself and then calls 'block_hash_safe' on ETH ON NEAR CLIENT. ETH ON NEAR CLIENT calls 'on_block_hash' on PROVER which calls 'finish_mint' on MINTABLE FUNGIBLE TOKEN](erc20-to-near.png)\n\nFor more detail about Rainbow Bridge, refer to [this introductory blog post](https://near.org/blog/eth-near-rainbow-bridge/)\n\n  [ERC20]: https://eips.ethereum.org/EIPS/eip-20\n  [Rainbow Bridge]: https://github.com/near/rainbow-bridge\n  [NEP21]: https://github.com/nearprotocol/NEPs/pull/21\n  [NEAR]: https://near.org/\n\n\nHow to use this repository\n==========================\n\nIf you want to send an ERC20 token from Ethereum to NEAR:\n\n1. Clone this repository\n2. Compile the contracts (see `build.sh` script in token directories)\n3. Deploy the contracts\n\nNote that you don't need to modify the contracts, since all the info they need is passed as initialization parameters.\n\nIf you want to create a new **contract pair** for something other than sending ERC20 tokens from Ethereum to NEAR, you can clone this repository and use it as a starting point.\n\n\nDeploy\n======\n\nThis requires three steps:\n\n1. Create NEAR account\n2. Deploy TokenLocker contract to Ethereum\n3. Deploy MintableFungibleToken contract to NEAR\n\n\nCreate NEAR account\n-------------------\n\nEvery smart contract in NEAR has its [own associated account][NEAR accounts]. Before you deploy your TokenLocker to Ethereum, you'll need to know the NEAR account name where the matching MintableFungibleToken will live.\n\n### Step 1: Install near-cli\n\n[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. For best ergonomics you probably want to install it globally:\n\n    npm install --global near-cli\n\nEnsure that it's installed with `near --version`\n\n\n### Step 2: Create an account for the contract\n\nEach account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `my-wrapped-erc20-token.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `my-wrapped-erc20-token.your-name.testnet`:\n\n1. Authorize NEAR CLI, following the commands it gives you:\n\n      near login\n\n2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):\n\n      near create-account my-wrapped-erc20-token.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet\n\n  [NEAR accounts]: https://docs.near.org/docs/concepts/account\n  [NEAR Wallet]: https://wallet.testnet.near.org/\n\n\nDeploy TokenLocker to Ethereum\n------------------------------\n\nYou'll need three data:\n\n1. The Ethereum contract address of the ERC20 token that you want to send to NEAR\n2. The account name you created on NEAR above, such as `my-wrapped-erc20-token.YOUR-NAME.testnet`\n3. The Prover contract address that will be used when transferring tokens from NEAR back to Ethereum. The Ropsten contract maintained by NEAR is at 0x???\n\nOnce you have these, deploy the contract to NEAR as you normally would, initializing your contract with the data above in the given order.\n\nSave the new contract address for your freshly-deployed TokenLocker contract in an environment variable. You'll use it when deploying your NEAR contract.\n\nOn Mac/Linux:\n\n    TLADDR=0xYourContractAddress\n\nOn Windows:\n\n    set TLADDR=0xYourContractAddress\n\nCheck that you set it correctly on Mac/Linux with:\n\n    echo $TLADDR\n\non Windows:\n\n    echo %TLADDR%\n\n\nDeploy MintableFungibleToken to NEAR\n------------------------------------\n\nIn addition to the TLADDR saved above, you will also need to know the address of the Prover on NEAR used to verify that tokens were locked correctly on Ethereum. The address for the TestNet contract maintained by NEAR is ???\n\nTo see all the options you can use when deploying a NEAR contract:\n\n    near deploy --help\n\nOn Mac/Linux, final command will look like:\n\n    near deploy --accountId=my-wrapped-erc20-token.your-name.testnet --wasmFile=./mintable-fungible-token/res/mintable_fungible_token.wasm --initFunction=new --initArgs='{ \"prover_account\": \"???\", \"locker_address\": \"'$TLADDR'\" }'\n\nand on Windows:\n\n    near deploy --accountId=my-wrapped-erc20-token.your-name.testnet --wasmFile=.\\mintable-fungible-token\\res\\mintable_fungible_token.wasm --initFunction=new --initArgs=\"{ \\\"prover_account\\\": \\\"???\\\", \\\"locker_address\\\": \\\"%TLADDR%\\\" }\"\n", "release_dates": []}, {"name": "rainbow-bridge-lib", "description": null, "language": "JavaScript", "license": null, "readme": "Ethereum to Near trustless, fully decentralized, bidirectional bridge\n\nSee https://github.com/near/rainbow-bridge for Installation, Usage, Documentation and Examples.", "release_dates": []}, {"name": "rainbow-bridge-rs", "description": null, "language": "Rust", "license": null, "readme": null, "release_dates": []}, {"name": "rainbow-bridge-sol", "description": null, "language": "Solidity", "license": null, "readme": null, "release_dates": []}, {"name": "react-snap", "description": "\ud83d\udc7b Zero-configuration framework-agnostic static prerendering for SPAs", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": ["2023-04-13T18:41:20Z"]}, {"name": "read-rpc", "description": "Read-only NEAR RPC centralized-like performant solution", "language": "Rust", "license": null, "readme": "# Read RPC\n\nThis workspace holds the collection of components for the Read RPC.\n\n## Current content\n\n### [rpc-server](rpc-server/README.md)\n\n\nThe JSON RPC server implementation that repeats all the APIs current real NEAR JSON RPC but using a different data sources:\n- The Read RPC Storage (ScyllaDB currently)\n- NEAR Lake Data buckets (AWS S3 currently)\n- real NEAR JSON RPC\n\n### [state-indexer](state-indexer/README.md)\n\nThe indexer built on top of Lake Framework that watches the network and stores the `StateChanges` into the Storage (ScyllaDB) using the designed data schemas.\n\n### [tx-indexer](tx-indexer/README.md)\n\nThe indexer built on top of Lake Framework that watches the network and stores the `Transactions` along with all the related entities (`Receipts`, `ExecutionOutcomes`) into the Storage (ScyllaDB) using the specifically defined `TransactionDetails` structure in a dumped way (using the simplest key-value schema)\n\n### [config](configuration/README.md)\n\nThe configuration module is responsible for managing the configuration settings of the NEAR ReadRPC project.\n\n## Docker compose\n\n**Note!** The docker compose is not fully ready yet. It's still in progress. However, you can run the entire project to play around with it. It is still not convenient for development or debugging purposes. We are working on improving it.\n\n### Run the entire project\n\nPut TOML file `config.toml` with configuration in the home root of the project.\nSee the example [here](./configuration/example.config.toml).\n\nRun the docker compose:\n\n```\n$ docker-compose up\n```\n\nThis will spin up:\n- `read-rpc-server` - the JSON RPC server\n- `state-indexer` - the indexer that watches the network and stores the `StateChanges` into the Storage (ScyllaDB) using the designed data schemas.\n- `tx-indexer` - the indexer that watches the network and stores the `Transactions` along with all the related entities (`Receipts`, `ExecutionOutcomes`) into the Storage (ScyllaDB) using the specifically defined `TransactionDetails` structure in a dumped way (using the simplest key-value schema)\n- `jaeger` - the Jaeger instance for tracing (http://localhost:16686)\n\n### Examples: \nSee examples [here](./examples/README.md).\n\n### TODO:\n\n- [ ] Setup all the services to use volumes for the codebase and using `cargo watch` to recompile the code on the fly\n- [ ] Come up with the way of changin the configuration for the indexers in a convenient way\n- [ ] Robust documentation for the docker compose setup\n\n\n## Development\n\n### Check the entire product\n\n```\ncargo check\n```\n\n### Fmt the entire product\n\n```\ncargo fmt --all\n```\n\n### Run a specific package\n\n```\ncargo run --package <package_name>\n```\n\nExample:\n\n```\ncargo run --release --package rpc-server\n```\n\n**Please don't forget** to handle `.env` files properly if you're running the package from the root using the proposed approach.\n\n#### Keep in mind\n\nYou can move to the folder with a package\n\n```\ncd rpc-server/\n```\n\nAnd run a package as usually from the folder\n\n```\ncargo run --release\n```\n\n**In this case** you would want to have an `.env` file in the package folder.\n\n### Tracing\n\nSee the tracing documentation [here](./docs/TRACING.md)", "release_dates": ["2024-02-14T11:29:20Z"]}, {"name": "repro-near-funcall", "description": "Repro near function call actions with local near-vm-runner-standalone", "language": "JavaScript", "license": null, "readme": "# Tool to get enough information for reproduce NEAR contract execution locally\n\n## Usage for repro with near-sandbox\nWIP in https://github.com/near/docs/pull/724\n\n## Usage for repro with near-vm-standalone [DEPRECIATED]\n\n```\nnpm i\nnode index.js -a <txn sender> -t <txn hash>\n```\n\nIt will download `state.json`, `vmcontext.json` and `contract.wasm`, which can be pass to near-vm-runner-standalone\n\n## Examples\n\nLet's trying with examples of contract in different senarios, where you can reproduce contract execution from simplest state, multiple state where per user data is stored as seperate entry on trie, and cross contract read/write. These examples are intentionally created to simulate real world contract reproduce workflow.\n\n### Preparation\n\n- Have `near-cli` installed locally\n- Have `near-vm-runner-standalone` compiled after merge this two branches into master: `fix-vmcontext-ser`, `state-file-standalone`.\n- Register an account on https://wallet.testnet.near.org\n- Login with `near login`\n- Set environment var of your near account: `export REPRO_ACCOUNT=<your-account.testnet>`\n\n### Repro execution of a simple contract\n\n1. Deploy contract on testnet:\n\n```\nnear create-account simple-state.$REPRO_ACCOUNT --initialBalance 10 --masterAccount $REPRO_ACCOUNT\nnear deploy --accountId simple-state.$REPRO_ACCOUNT --wasmFile res/simple_state.wasm\n```\n\n2. Call a contract method:\n\n```\nnear call simple-state.$REPRO_ACCOUNT set_status --accountId $REPRO_ACCOUNT '{\"message\":\"hello\"}'\n```\n\nIt will print a explorer link, such as: https://explorer.testnet.near.org/transactions/8No2dz4GKNRAFJcdU34wYngr6HRBQkNV5ZLMn1z1TfVc. Remember the transaction hash: `export TXN=8No2dz4GKNRAFJcdU34wYngr6HRBQkNV5ZLMn1z1TfVc`\n\n3. Download code, state and vmcontext used to execute the function call action (contract method call):\n\n```\nnode index.js -a $REPRO_ACCOUNT -t $TXN\n```\n\n4. Now we're able to reproduce this transaction locally, by:\n\n```\nnear-vm-runner-standalone --context-file vmcontext.json --method-name set_status --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\nResult:\n\n```\n      74.47\u00b5s get_key\n        10.86ms run_method/instantiate\n        5.52ms run_method/call\n        6.54ms run_method/drop_instance\n      23.03ms run_method\n    1.11s run_wasmer\n  1.11s run_vm\n\n{\"outcome\":{\"balance\":\"189978309984683730567830612\",\"storage_usage\":346,\"return_data\":\"None\",\"burnt_gas\":291040465116,\"used_gas\":291040465116,\"logs\":[\"repro.testnet set_status with message hello\"]},\"err\":null,\"receipts\":[],\"state\":{\"U1RBVEU=\":\"AQAAAA0AAAByZXByby50ZXN0bmV0BQAAAGhlbGxv\"}}\n------------------------------\nTotal gas: 291040465116\nHost gas: 215297482305 [73% total]\nAction gas: 0 [0% total]\nWasm execution: 75742982811 [26% total]\n------ Host functions --------\nbase -> 2912449221 [1% total, 1% host]\ncontract_compile_base -> 35445963 [0% total, 0% host]\ncontract_compile_bytes -> 30761160000 [10% total, 14% host]\nread_memory_base -> 10439452800 [3% total, 4% host]\nread_memory_byte -> 315510639 [0% total, 0% host]\nwrite_memory_base -> 8411384583 [2% total, 3% host]\nwrite_memory_byte -> 168873864 [0% total, 0% host]\nread_register_base -> 7551495558 [2% total, 3% host]\nread_register_byte -> 6110844 [0% total, 0% host]\nwrite_register_base -> 11462089944 [3% total, 5% host]\nwrite_register_byte -> 349743888 [0% total, 0% host]\nutf8_decoding_base -> 3111779061 [1% total, 1% host]\nutf8_decoding_byte -> 12537960597 [4% total, 5% host]\nlog_base -> 3543313050 [1% total, 1% host]\nlog_byte -> 567548013 [0% total, 0% host]\nstorage_write_base -> 64196736000 [22% total, 29% host]\nstorage_write_key_byte -> 352414335 [0% total, 0% host]\nstorage_write_value_byte -> 930556170 [0% total, 0% host]\nstorage_write_evicted_byte -> 963519210 [0% total, 0% host]\nstorage_read_base -> 56356845750 [19% total, 26% host]\nstorage_read_key_byte -> 154762665 [0% total, 0% host]\nstorage_read_value_byte -> 168330150 [0% total, 0% host]\n------ Actions --------\n------------------------------\n```\n\n### Repro execution of a contract with per account state as seperate entries on trie\n\nSteps are same as simple-contract, only difference is you'll get more entries in state.json:\n\n```\n# Deploy contract\nnear create-account multiple-state.$REPRO_ACCOUNT --initialBalance 10 --masterAccount $REPRO_ACCOUNT\nnear deploy --accountId multiple-state.$REPRO_ACCOUNT --wasmFile res/multiple_state.wasm --initFunction new --initArgs '{}'\n# Call a contract method\nnear call multiple-state.$REPRO_ACCOUNT set --accountId $REPRO_ACCOUNT '{\"title\":\"hello\",\"message\":\"world\"}'\n# Let's call with different to see multiple state in actions\nnear call multiple-state.$REPRO_ACCOUNT set --accountId multiple-state.$REPRO_ACCOUNT '{\"title\":\"hello2\",\"message\":\"world2\"}'\nScheduling a call: multiple-state.repro.testnet.set({\"title\":\"hello2\",\"message\":\"world2\"})\n# Here record the txn hash manually, choose the txn hash of the second call above:\n# export TXN=\n# Download code, state and vmcontext\nnode index.js -a $REPRO_ACCOUNT -t $TXN\n# cat state.json will show multiple entries\n# Repro\nnear-vm-runner-standalone --context-file vmcontext.json --method-name set --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\n### Repro execution of a function call that has cross contract write\n\nInitial steps are same\n\n```\n# Deploy contract\nnear create-account cross-contract.$REPRO_ACCOUNT --initialBalance 10 --masterAccount $REPRO_ACCOUNT\nnear deploy --accountId cross-contract.$REPRO_ACCOUNT --wasmFile res/cross_contract.wasm --initFunction new --initArgs \"{\\\"state_contract\\\":\\\"simple-state.$REPRO_ACCOUNT\\\"}\"\n# Call a contract method\nnear call cross-contract.$REPRO_ACCOUNT set_in_other_contract --accountId $REPRO_ACCOUNT '{\"message\":\"world\"}'\n```\n\nNow if you see this transaction on explorer you'll see these receipts:\n\n```\n$REPRO_ACCOUNT calls cross-contract.$REPRO_ACCOUNT\n  cross-contract.$REPRO_ACCOUNT calls simple-state.$REPRO_ACCOUNT\n    system calls $REPRO_ACCOUNT\n  system calls $REPRO_ACCOUNT\n```\n\nIgnore system calls receipts, the second one is you'll see the one than previous non-cross contract call receipts. If you click on the block you'll also see it happens one block later than the first receipt (The most likely case, if network is on high load then more is possible). So to reproduce it locally you'll need to do it in two step, since they're having different block height, different state, different vm context and different contract code.\n\n#### `$REPRO_ACCOUNT` calls `cross-contract.$REPRO_ACCOUNT`\n\nThis step is easy, just download and reproduce as before:\n\n```\n# export TXN=\nnode index.js -a $REPRO_ACCOUNT -t $TXN\nnear-vm-runner-standalone --context-file vmcontext.json --method-name set_in_other_contract --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\nThe major difference of the output is it has a (Promise) ReceiptIndex return and a receipt saying it's going to do a function call in another contract:\n\n```\n\"return_data\":{\"ReceiptIndex\":0},...,\n\"receipts\":[{\"receipt_indices\":[],\"receiver_id\":\"simple-state.repro.testnet\",\"actions\":[{\"FunctionCall\":{\"method_name\":\"set_status\",\"args\":\"{\\\"message\\\":\\\"world\\\"}\",\"gas\":50000000000000,\"deposit\":0}}]}],\"state\":{\"U1RBVEU=\":\"AAAAABoAAABzaW1wbGUtc3RhdGUucmVwcm8udGVzdG5ldA==\"}\n```\n\n#### `cross-contract.$REPRO_ACCOUNT` calls `simple-state.$REPRO_ACCOUNT`\n\nThis step download a different vm context, state and code. First look up the receipt id of this function call action from explorer, then download with:\n\n```\nnode index.js -a $REPRO_ACCOUNT -t $TXN -r GrkKW2WJRKgkLfnAVVjktRba3RoLa6UVMSUhyJ6Dpwpf # replace with receipt id found in explorer\n```\n\nAnd reproduce with\n\n```\nnear-vm-runner-standalone --context-file vmcontext.json --method-name set_status --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\n### Repro execution of a function call that has cross contract read or promise result as input\n\nUse the contract deployed in previous section, then call:\n\n```\nnear call cross-contract.$REPRO_ACCOUNT get_from_other_contract_and_record --accountId $REPRO_ACCOUNT \"{\\\"account_id\\\":\\\"$REPRO_ACCOUNT\\\"}\"\n```\n\nThere are three steps in this transaction:\n\n1. `$REPRO_ACCOUNT` calls `cross-contract.$REPRO_ACCOUNT`, `get_from_other_contract_and_record` method, which create two receipts (step 2 and 3) that does the actual cross contract call.\n2. `cross-contract.$REPRO_ACCOUNT` calls `simple-state.$REPRO_ACCOUNT`, `get_status` method. This is a cross contract read, returned result is used as parameter as step 3.\n3. `cross-contract.$REPRO_ACCOUNT` calls it's `get_from_other_callback` method, takes argument from step 2's return.\n\nReproduce the first step (a cross contract read) of the transaction is same as before:\n\n```\nexport TXN=\nnode index.js -a $REPRO_ACCOUNT -t $TXN\nnear-vm-runner-standalone --context-file vmcontext.json --method-name get_from_other_contract_and_record --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\nReproduce the second step is also similar to the previous section's second part, lookup the receipt id from explorer (Find the receipt include `get_status` function call) then run:\n\n```\nnode index.js -a $REPRO_ACCOUNT -t $TXN -r <Your receipt id>\nnear-vm-runner-standalone --context-file vmcontext.json --method-name get_status --wasm-file contract.wasm --state-file state.json --profile-gas --timings\n```\n\nReproduce the third step need return data from step 2 (this is also same for any contract call that used as callback that takes return data from previous calls). To reproduce it first locate the receipt id from explorer (the one has content \"Called method: 'get_from_other_callback'\")\n\n```\nnode index.js -a $REPRO_ACCOUNT -t $TXN -r <Your receipt id>\n```\n\nObtain the return data from step 2's output (the \"return_data\" section)\n\n```\n{\"outcome\":{\"balance\":\"169954889277699040312798592\",\"storage_usage\":346,\"return_data\":{\"Value\":\"\\u0001\\u0003\\u0000\\u0000\\u0000ooo\"},\"burnt_gas\":201805752385,\"used_gas\":201805752385,\"logs\":[\"get_status for account_id repro.testnet\"]},\"err\":null,\"receipts\":[],\"state\":{\"U1RBVEU=\":\"AQAAAA0AAAByZXByby50ZXN0bmV0AwAAAG9vbw==\"}}\n```\n\nThen run vm standalone with step 2's return data as promise_results:\n\n```\n./near-vm-runner-standalone --context-file vmcontext.json --method-name get_from_other_callback --wasm-file contract.wasm --state-file state.json --promise-results '{\"Successful\":\"\\u0001\\u0003\\u0000\\u0000\\u0000ooo\"}'  --profile-gas --timings\n```\n\n## TODO\n\n- [x] Check to ensure block hash is the correct one that \"before\" transaction and receipt execution, not after\n- [x] Figure out pass promise results to cross contract calls\n- [x] Figure out how to tell if a function call is a view programmatically:\n  - view method is also executed as call, when execute as part of cross contract read\n- [x] Add reproduce example that has cross contract read\n", "release_dates": []}, {"name": "rocksdb", "description": "A library that provides an embeddable, persistent key-value store for fast storage.", "language": null, "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "## RocksDB: A Persistent Key-Value Store for Flash and RAM Storage\n\n[![CircleCI Status](https://circleci.com/gh/facebook/rocksdb.svg?style=svg)](https://circleci.com/gh/facebook/rocksdb)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/fbgfu0so3afcno78/branch/main?svg=true)](https://ci.appveyor.com/project/Facebook/rocksdb/branch/main)\n[![PPC64le Build Status](http://140-211-168-68-openstack.osuosl.org:8080/buildStatus/icon?job=rocksdb&style=plastic)](http://140-211-168-68-openstack.osuosl.org:8080/job/rocksdb)\n\nRocksDB is developed and maintained by Facebook Database Engineering Team.\nIt is built on earlier work on [LevelDB](https://github.com/google/leveldb) by Sanjay Ghemawat (sanjay@google.com)\nand Jeff Dean (jeff@google.com)\n\nThis code is a library that forms the core building block for a fast\nkey-value server, especially suited for storing data on flash drives.\nIt has a Log-Structured-Merge-Database (LSM) design with flexible tradeoffs\nbetween Write-Amplification-Factor (WAF), Read-Amplification-Factor (RAF)\nand Space-Amplification-Factor (SAF). It has multi-threaded compactions,\nmaking it especially suitable for storing multiple terabytes of data in a\nsingle database.\n\nStart with example usage here: https://github.com/facebook/rocksdb/tree/main/examples\n\nSee the [github wiki](https://github.com/facebook/rocksdb/wiki) for more explanation.\n\nThe public interface is in `include/`.  Callers should not include or\nrely on the details of any other header files in this package.  Those\ninternal APIs may be changed without warning.\n\nQuestions and discussions are welcome on the [RocksDB Developers Public](https://www.facebook.com/groups/rocksdb.dev/) Facebook group and [email list](https://groups.google.com/g/rocksdb) on Google Groups.\n\n## License\n\nRocksDB is dual-licensed under both the GPLv2 (found in the COPYING file in the root directory) and Apache 2.0 License (found in the LICENSE.Apache file in the root directory).  You may select, at your option, one of the above-listed licenses.\n", "release_dates": []}, {"name": "rollup-data-availability", "description": "NEAR as data availability!", "language": "Rust", "license": null, "readme": "# Rollup Data Availability\n\n[![Tests](https://github.com/near/rollup-data-availability/actions/workflows/on_pull_request.yml/badge.svg)](https://github.com/near/rollup-data-availability/actions/workflows/on_pull_request.yml)\n[![Deploy](https://github.com/near/rollup-data-availability/actions/workflows/on_main.yml/badge.svg)](https://github.com/near/rollup-data-availability/actions/workflows/on_main.yml)\n\nUtilising NEAR as storage data availability with a focus on lowering rollup DA fees.\n\n## Components\n\nHerein outlines the components of the project and their purposes.\n\n### Blob store contract\n\nThis contract provides the store for arbitrary DA blobs. In practice, these \"blobs\" are sequencing data from rollups, but they can be any data.\n\nNEAR blockchain state storage is pretty cheap. At the time of writing, 100KiB is a flat fee of 1NEAR.\nTo limit the costs of NEAR storage even more, we don't store the blob data in the blockchain state.\n\nIt works by taking advantage of NEAR consensus around receipts.\nWhen a chunk producer processes a receipt, there is consensus around the receipt.\nHowever, once the chunk has been processed and included in the block, the receipt is no longer required for consensus and can be pruned. The pruning time is at least 3 NEAR epochs, where each epoch is 12 Hours; in practice, this is around five epochs.\nOnce the receipt has been pruned, it is the responsibility of archival nodes to retain the transaction data, and we can even get the data from indexers.\n\nWe can validate that the blob was retrieved from ecosystem actors in the format submitted by checking the blob commitment.\nThe blob commitment currently needs to be more efficient and will be improved, but it benefits us because anybody can build this with limited expertise and tooling.\nIt is created by taking a blob, chunking it into 256-byte pieces, and creating a Merkle tree, where each leaf is a Sha-256 hash of the shard.\nThe root of the Merkle tree is the blob commitment, which is provided as `[transaction_id ++ commitment]` to the L1 contract, which is 64 bytes.\n\nWhat this means:\n\n- consensus is provided around the submission of a blob by NEAR validators\n- the function input data is stored by full nodes for at least three days\n- archival nodes can store the data for longer\n- we don't occupy consensus with more data than needs to be\n- indexers can also be used, and this Data is currently indexed by all significant explorers in NEAR\n- the commitment is available for a long time, and the commitment is straightforward to create\n\n### Light client\n\nA trustless off-chain light client for NEAR with DA-enabled features, Such as KZG commitments, Reed-Solomon erasure coding & storage connectors.\n\nThe light client provides easy access to transaction and receipt inclusion proofs within a block or chunk.\nThis is useful for checking any dubious blobs which may not have been submitted or validating that a blob has been submitted to NEAR.\n\nA blob submission can be verified by:\n\n- taking the NEAR transaction ID from Ethereum for the blob commitment.\n- Ask the light client for an inclusion proof for the transaction ID or the receipt ID if you're feeling specific; this will give you a Merkle inclusion proof for the transaction/receipt.\n- once you have the inclusion proof, you can ask the light client to verify the proof for you, or advanced users can manually verify it themselves.\n- armed with this knowledge, rollup providers can have advanced integration with light clients and build proving systems around it.\n\nIn the future, we will provide extensions to light clients such that non-interactive proofs can be supplied for blob commitments and other data availability features.\n\nIt's also possible that the light client may be on-chain for the header syncing and inclusion proof verification, but this is a low priority right now.\n\nTODO: write and draw up extensions to the light client and draw an architecture diagram\n\n### DA RPC Client\n\nThis client is the defacto client for submitting blobs to NEAR.\nThese crates allow a client to interact with the blob store.\nIt can be treated as a \"black box\", where blobs go in, and `[transaction_id ++ commitment]` emerges.\n\nThe `da-rpc` crate is the rust client, which anyone can use if they prefer rust in their application.\nThe responsibility of this client is to provide a simple interface for interacting with NEAR DA.\n\nThe `da-rpc-sys` crate is the FFI client binding for use by non-rust applications. This calls through to `da-rpc` to interact with the blob store, with some additional black box functionality for dealing with pointers wrangling and such.\n\nThe `da-rpc-go` crate is the go client bindings for use by non-rust applications, and this calls through to `da-rpc-sys`, which provides another application-level layer for easy interaction with the bindings.\n\n## Integrations\n\nWe have some proof of concept works for integrating with other rollups.\nWe are working to prove the system's capabilities and provide a reference implementation for others to follow.\nThey are being actively developed, so they are in a state of flux.\n\nWe know that each rollup has different features and capabilities, even if they are built on the same SDK. The reference implementations are not necessarily\n\"production grade\", they serve as inspiration to help integrators make use of NEAR DA in their system. Our ultimate goal is to make NEAR DA as pluggable as any other tool\nyou might use. This means our heavy focus is on proving, submission and making storage as fair as possible.\n\nArchitecture Diagrams can be viewed at [this directory](./docs/)\n\n### OP Stack\n\nhttps://github.com/near/optimism\n\nWe have integrated with the Optimism OP stack. Utilising the `Batcher` for submissions to NEAR and the `proposer` for submitting NEAR commitment data to Ethereum.\n\n### CDK Stack\n\n# TODO: move this\nhttps://github.com/firatNEAR/cdk-validium-node/tree/near\n\nWe have integrated with the Polygon CDK stack. Utilising the Sequence Sender for submissions to NEAR.\n\n### Arbitrum Nitro\n\nhttps://github.com/near/nitro\n\nWe have integrated a small plugin into the DAC `daserver`. This is much like our http sidecar and provides a very modular integration into NEAR DA whilst supporting arbitrum \nDACs. In the future, this will likely be the easiest way to support NEAR DA as it acts as an independent sidecar which can be scaled as needed. This also means that the DAC\ncan opt-in and out of NEAR DA, lowering their infrastructure burden. With this approach, the DAC committee members just need to have a \"dumb\" signing service, with the store backed\nby NEAR.\n\n### \ud83d\udc77\ud83d\udea7 Intregrating your own rollup \ud83d\udea7\ud83d\udc77\n\nThe aim of NEAR DA is to be as modular as possible.\n\nIf implementing your own rollup, it should be fairly straightforward, assuming you can utilise `da-rpc` or `da-rpc-go`(with some complexity here).\nAll the implementations so far have been different, but the general rules have been:\n\n- find where the sequencer normally posts batch data, for optimism it was the `batcher`, for CDK it's the `Sequence Sender` and plug the client in.\n- find where the sequencer needs commitments posted, for optimism it was the `proposer`, and CDK the `synchronizer`. Hook the blob reads from the commitment there.\n\nThe complexity arises, depending on how pluggable the commitment data is in the contracts. If you can simply add a field, great! But these waters are unchartered mostly.\n\nIf your rollup does anything additional, feel free to hack, and we can try reach the goal of NEAR DA being as modular as possible.\n\n## Getting started\n\nMakefiles are floating around, but here's a rundown of how to start with NEAR DA.\n\n**Prerequisites**\n\nRust, go, cmake & friends should be installed. Please look at `flake.nix#nativeBuildInputs` for a list of required installation items.\nIf you use Nix, you're in luck! Just do `direnv allow`, and you're good to go.\n\n[Ensure you have setup](https://docs.near.org/tools/near-cli-rs) `near-cli`.\nFor the Makefiles to work correctly, you need to have the `near-cli-rs` version of NEAR-CLI.\nMake sure you setup some keys for your contract, the documentation above should help.\nYou can write these down, or query these from `~/.near-credentials/**` later.\n\nIf you didn't clone with submodules, sync them:\n`make submodules`\n\nNote, there are some semantic differences between `near-cli-rs` and `near-cli-js`. Notably, the keys generated with `near-cli-js` used to have and `account_id` key in the json object. But this is omitted in `near-cli-rs` becuse it's already in the filename, but some applications require this object. So you may need to add it back in.\n\n### If using your own contract\n\nIf you're using your own contract, you have to build the contract yourself. And make sure you set the keys.\n\nTo build the contract:\n\n`make build-contracts`\n\nThe contract will now be in `./target/wasm32-unknown-unknown/release/near_da_blob_store.wasm`.\n\nNow to deploy, once you've decided where you want to deploy to, and have permissions to deploy it.\nSet `$NEAR_CONTRACT` to the address you want to deploy to, and sign with.\nFor advanced users, take a look at the command and adjust as fit.\n\nNext up:\n`make deploy-contracts`\n\nDon't forget to update your `.env` file for `DA_KEY`, `DA_CONTRACT` and `DA_ACCOUNT` for use later.\n\n### If deploying optimism\n\nFirst clone the [repository](https://github.com/near/optimism)\n\nConfigure `./ops-bedrock/.env.example`.\nThis just needs copying the without `.example` suffix, adding the keys, contract address and signer from your NEAR wallet, and should work out of the box for you.\n\n#### If deploying optimism on arm64\n\nTo standardize the builds for da-rpc-sys and genesis, you can use a docker image.\n\n`da-rpc-sys-unix`\nThis will copy the contents of `da-rpc-sys-docker` generated libraries to the `gopkg/da-rpc` folder.\n\n`op-devnet-genesis-docker`\nThis will create a docker image to generate the genesis files\n\n`op-devnet-genesis`\n\nThis will generate the genesis files in a docker container and push the files in `.devnet` folder.\n\n`make op-devnet-up`\nThis should build the docker images and deploy a local devnet for you\n\nOnce up, observe the logs\n\n`make op-devnet-da-logs`\n\nYou should see `got data from NEAR` and `submitting to NEAR`\n\nOf course, to stop\n\n`make op-devnet-down`\n\nIf you just wanna get up and running and have already built the docker images using something like `make bedrock images`, there is a `docker-compose-testnet.yml` in `ops-bedrock` you can play with.\n\n### If deploying polygon CDK\n\nFirst clone the [repository](https://github.com/firatNEAR/cdk-validium-node)\n\nNow we have to pull the docker image containing the contracts.\n\n`make cdk-images`\n\n**_why is this different to op-stack_**?\n\nWhen building the contracts in `cdk-validium-contracts`, it does a little bit more than build contracts.\nIt creates a local eth devnet, deploys the various components (CDKValidiumDeployer & friends).\nThen it generates genesis and posts it to L1 at some arbitrary block.\nThe block number that the L2 genesis gets posted to is **non-deterministic**.\nThis block is then fed into the `genesis` config in `cdk-validium-node/tests`.\nBecause of this reason, we want an out of the box deployment, so using a pre-built docker image for this is incredibly convenient.\n\nIt's fairly reasonable that, when scanning for the original genesis, we can just query a bunch of blocks between 0..N for the genesis data.\nHowever, this feature doesn't exist yet.\n\nOnce the image is downloaded, or advanced users built the image and modified the genesis config for tests, we need to configure an env file again.\nThe envfile example is at `./cdk-stack/cdk-validium-node/.env.example`, and should be updated with the respective variables as above.\n\nNow we can just do:\n\n`cdk-devnet-up`\n\nThis wil spawn the devnet and an explorer for each network at `localhost:4000`(L1) and localhost:4001`(L2).\n\nRun a transaction, and check out your contract on NEAR, verify the commitment with the last 64 bytes of the transaction made to L1.\n\nYou'll get some logs that look like:\n\n```\ntime=\"2023-10-03T15:16:21Z\" level=info msg=\"Submitting to NEARmaybeFrameData{0x7ff5b804adf0 64}candidate0xfF00000000000000000000000000000000000000namespace{0 99999}txLen1118\"\n2023-10-03T15:16:21.583Z\tWARN\tsequencesender/sequencesender.go:129\tto 0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82, data: 438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59\t{\"pid\": 7, \"version\": \"\"}\ngithub.com/0xPolygon/cdk-validium-node/sequencesender.(*SequenceSender).tryToSendSequence\n\t/src/sequencesender/sequencesender.go:129\ngithub.com/0xPolygon/cdk-validium-node/sequencesender.(*SequenceSender).Start\n\t/src/sequencesender/sequencesender.go:69\n2023-10-03T15:16:21.584Z\tDEBUG\tetherman/etherman.go:1136\tEstimating gas for tx. From: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, To: 0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82, Value: <nil>, Data: 438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59\t{\"pid\": 7, \"version\": \"\"}\n2023-10-03T15:16:21.586Z\tDEBUG\tethtxmanager/ethtxmanager.go:89\tApplying gasOffset: 80000. Final Gas: 246755, Owner: sequencer\t{\"pid\": 7, \"version\": \"\"}\n2023-10-03T15:16:21.587Z\tDEBUG\tetherman/etherman.go:1111\tgasPrice chose: 8\t{\"pid\": 7, \"version\": \"\"}\n```\n\nFor this transaction, the blob commitment was `7f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59`\n\nAnd if I check the CDKValidium contract `0x0dcd1bf9a1b36ce34237eeafef220932846bcd82`, the root was at the end of the calldata.\n\n`0x438a53990000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000233a121c7ad205b875b115c1af3bbbd8948e90afb83011435a7ae746212639654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c2f3400000000000000000000000000000000000000000000000000000000000000005ee177aad2bb1f9862bf8585aafcc34ebe56de8997379cc7aa9dc8b9c68d7359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000651c303600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b5614110c679e3d124ca2b7fca6acdd6eb539c1c02899df54667af1ffc7123247f5aa2475d57f8a5b2b3d3368ee8760cffeb72b11783779a86abb83ac09c8d59`\n\n### If deploying arbitrum nitro\n\nBuild daserver/datool:\n`make target/bin/daserver && make target/bin/datool`\n\nDeploy your DA contract as above \n\nUpdate daserver config to introduce new configuration fields:\n\n \"near-aggregator\": {\n      \"enable\": true,\n      \"key\": \"ed25519:insert_here\",\n      \"account\": \"helloworld.testnet\",\n      \"contract\": \"your_deployed_da_contract.testnet\",\n      \"storage\": {\n        \"enable\": true,\n        \"data-dir\": \"config/near-storage\"\n      }\n    },\n\n`target/bin/datool client rpc store  --url http://localhost:7876 --message \"Hello world\" --signing-key config/daserverkeys/ecdsa`\n\nTake the hash, check the output:\n\n`target/bin/datool client rest getbyhash --url http://localhost:7877 --data-hash 0xea7c19deb86746af7e65c131e5040dbd5dcce8ecb3ca326ca467752e72915185`\n", "release_dates": []}, {"name": "rollup-fee-calculator", "description": null, "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# rollup-fee-calculator", "release_dates": []}, {"name": "runner-jest", "description": "Thin wrapper around near-runner-js to ease setup & use with Jest & Typescript", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "near-runner + Jest\n==================\n\nA thin wrapper around [near-runner] to make it easier to use with [Jest] and [TypeScript]. If you don't want Jest, use near-runner directly.\n\nWrite tests once, run them both on [NEAR TestNet](https://docs.near.org/docs/concepts/networks) and a controlled [NEAR Sandbox](https://github.com/near/sandbox) local environment.\n\n\n  [near-runner]: https://github.com/near/runner-js\n  [Jest]: https://jestjs.io/\n  [TypeScript]: https://www.typescriptlang.org/\n\nQuick Start\n===========\n\n`near-runner-jest --bootstrap` is a one-time command to quickly initialize a project with near-runner-jest. You will need [NodeJS] installed. Then:\n\n    npx near-runner-jest --bootstrap\n\nIt will:\n\n* Add a `near-runner` directory to the folder where you ran the command. This directory contains all the configuration needed to get you started with near-runner-jest, and a `__tests__` subfolder with a well-commented example test file.\n* Create `test.sh` and `test.bat` scripts in the folder where you ran the command. These can be used to quickly run the tests in `near-runner`. Feel free to integrate test-running into your project in a way that makes more sense for you, and then remove these scripts.\n* Install `near-runner-jest` as a dependency using `npm install --save-dev` (most of the output you see when running the command comes from this step).\n\n  [NodeJS]: https://nodejs.dev/\n\nManual Install\n==============\n\n1. Install.\n\n   ```bash\n   npm install --save-dev near-runner-jest # npm\n   yarn add --dev near-runner-jest         # yarn\n   ```\n\n2. Configure.\n\n   You can use the `near-runner-jest` script to run `jest` using a [custom configuration file](./jest.config.js). You can add this to your `test` script in your `package.json`:\n\n       \"test\": \"near-runner-jest\"\n\n   Now you can run tests with `npm run test` or `yarn test`.\n\n   If you want to write tests with TypeScript (recommended), you can add a `tsconfig.json` to your project root with the following contents:\n\n       {\"extends\": \"near-runner-jest/tsconfig.jest.json\"}\n\n   If you already have TypeScript set up and you don't want to extend the config from `near-runner-jest`, feel free to just copy the settings you want from [tsconfig.jest.json](./tsconfig.jest.json).\n\n2. Initialize.\n\n   Make a `__tests__` folder, make your first test file. Call your first test file `main.spec.ts` if you're not sure what else to call it.\n\n   (near-runner-jest uses [Jest's default test matcher](https://jestjs.io/docs/configuration#testmatch-arraystring), which will find any `*.ts` or `*.js` files in the `__tests__` directory and any files project-wide with a `*.(spec|test).(ts|js)` suffix. \"Project-wide\" here means \"the directory in which you run `near-runner-jest`.\")\n\n   In `main.spec.ts`, set up a `runner` with NEAR accounts, contracts, and state that will be used in all of your tests.\n\n   ```ts\n   import path from 'path';\n   import {Runner} from 'near-runner-jest';\n\n   const runner = Runner.create(async ({root}) => {\n      const alice = await root.createAccount('alice');\n      const contract = await root.createAndDeploy(\n        'contract-account-name',\n        path.join(__dirname, '..', 'path', 'to', 'compiled.wasm'),\n      );\n\n      // make other contract calls that you want as a starting point for all tests\n\n      return {alice, contract};\n   });\n\n   describe('my contract', () => {\n     // tests go here\n   });\n   ```\n\n   `describe` is [from Jest](https://jestjs.io/docs/setup-teardown) and is optional.\n\n4. Write tests.\n\n   ```ts\n   describe('my contract', () => {\n     runner.test('does something', async ({alice, contract}) => {\n       await alice.call(\n         contract,\n         'some_update_function',\n         {some_string_argument: 'cool', some_number_argument: 42}\n       );\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       expect(result).toBe('whatever');\n     });\n\n     runner.test('does something else', async ({alice, contract}) => {\n       const result = await contract.view(\n         'some_view_function',\n         {account_id: alice}\n       );\n       expect(result).toBe('some default');\n     });\n   });\n   ```\n\n   `runner.test` is added to `near-runner` by `near-runner-jest`, and is shorthand for:\n\n   ```ts\n   test.concurrent('does something', async () => {\n     await runner.run(async ({\u2026}) => {\n       // tests go here\n     });\n   });\n   ```\n\n   Where `test.concurrent` comes [from Jest](https://jestjs.io/docs/api#testconcurrentname-fn-timeout) and `runner.run` comes [from near-runner](https://github.com/near/runner-js#how-it-works).\n\nSee the [`__tests__`](https://github.com/near/runner-js/tree/main/__tests__) directory in near-runner-js for more examples. Remember that you can replace the nested `test.concurrent`\u2026`await runner.run` sequences with `runner.test`.\n", "release_dates": ["2021-09-17T17:28:22Z", "2021-09-17T17:17:05Z", "2021-09-17T15:55:44Z", "2021-09-16T15:24:39Z", "2021-09-16T15:18:02Z", "2021-09-16T14:06:30Z", "2021-09-16T13:05:27Z", "2021-09-16T01:29:26Z", "2021-09-16T01:25:12Z", "2021-09-16T01:05:31Z", "2021-09-16T00:32:59Z", "2021-09-16T00:29:39Z"]}, {"name": "rust-protobuf", "description": "Rust implementation of Google protocol buffers", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# rust-protobuf\n\n<!-- https://travis-ci.org/stepancheg/rust-protobuf.png -->\n[![crates.io version][crates-io-shields]][crates-io]\n[![docs.rs][docs-rs-shields]][docs-rs]\n[![GitHub Workflow Status][actions-shields]][actions]\n[![License][license-shields]][license]\n\n[crates-io]: https://crates.io/crates/protobuf\n[crates-io-shields]: https://img.shields.io/crates/v/protobuf.svg\n[docs-rs]: https://docs.rs/protobuf\n[docs-rs-shields]: https://img.shields.io/badge/docs.rs-rustdoc-green.svg\n[actions]: https://github.com/stepancheg/rust-protobuf/actions?query=workflow%3ACI\n[actions-shields]: https://img.shields.io/github/workflow/status/stepancheg/rust-protobuf/CI\n[license]: https://github.com/stepancheg/rust-protobuf/blob/master/LICENSE.txt\n[license-shields]: https://img.shields.io/crates/l/protobuf.svg\n\n[Protobuf](https://developers.google.com/protocol-buffers/docs/overview) implementation in [Rust](https://www.rust-lang.org/).\n\n* Written in pure rust\n* Generates rust code\n* Has runtime library support for generated code\n  (Coded{Input|Output}Stream impl)\n* Supports both Protobuf versions 2 and 3\n* and more\n\n## Where is documentation\n\nDocumentation is [hosted on docs.rs](https://docs.rs/protobuf).\n\n## Versions and branches\n\n### Version 3\n\nVersion 3 is current stable version. Compared to version 2 it implements:\n* runtime reflection\n* JSON and text format parsing and printing\n* dynamic messages (messages which can be created from `.proto` file on the fly\n  without code generation)\n\n### Version 2\n\nVersion 2 is previous stable version. Only most critical bugfixes will be applied\nto 2.x version, otherwise it won't be maintained.\n\n### Help\n\nThe crate **needs help**:\n* **a new maintainer**, but also\n* testing\n* documentation\n* examples to be used as documentation\n* feedback on API design\n* feedback on implementation\n* pull requests\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md) for a list of changes and compatility issues between versions.\n\n## Related projects\n\n* [prost](https://github.com/tokio-rs/prost) \u2014 another protobuf implementation in Rust, also has gRPC implementation\n* [quick-protobuf](https://github.com/tafia/quick-protobuf) \u2014 alternative protobuf implementation in Rust\n* [grpc-rs](https://github.com/pingcap/grpc-rs/) \u2014 another gRPC implementation for Rust\n* [grpc-rust](https://github.com/stepancheg/grpc-rust) \u2014 incomplete implementation of gRPC based on this library\n", "release_dates": []}, {"name": "rust-rocksdb", "description": "rust wrapper for rocksdb", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "rust-rocksdb\n============\n![RocksDB build](https://github.com/rust-rocksdb/rust-rocksdb/workflows/RocksDB%20build/badge.svg?branch=master)\n[![crates.io](https://img.shields.io/crates/v/rocksdb.svg)](https://crates.io/crates/rocksdb)\n[![documentation](https://docs.rs/rocksdb/badge.svg)](https://docs.rs/rocksdb)\n[![license](https://img.shields.io/crates/l/rocksdb.svg)](https://github.com/rust-rocksdb/rust-rocksdb/blob/master/LICENSE)\n[![Gitter chat](https://badges.gitter.im/rust-rocksdb/gitter.png)](https://gitter.im/rust-rocksdb/lobby)\n![rust 1.60.0 required](https://img.shields.io/badge/rust-1.60.0-blue.svg?label=MSRV)\n\n\n![GitHub commits (since latest release)](https://img.shields.io/github/commits-since/rust-rocksdb/rust-rocksdb/latest.svg)\n\n## Requirements\n\n- Clang and LLVM\n\n## Contributing\n\nFeedback and pull requests welcome!  If a particular feature of RocksDB is \nimportant to you, please let me know by opening an issue, and I'll \nprioritize it.\n\n## Usage\n\nThis binding is statically linked with a specific version of RocksDB. If you \nwant to build it yourself, make sure you've also cloned the RocksDB and \ncompression submodules:\n\n    git submodule update --init --recursive\n\n## Compression Support\nBy default, support for the [Snappy](https://github.com/google/snappy), \n[LZ4](https://github.com/lz4/lz4), [Zstd](https://github.com/facebook/zstd), \n[Zlib](https://zlib.net), and [Bzip2](http://www.bzip.org) compression \nis enabled through crate features.  If support for all of these compression \nalgorithms is not needed, default features can be disabled and specific \ncompression algorithms can be enabled. For example, to enable only LZ4 \ncompression support, make these changes to your Cargo.toml:\n\n```\n[dependencies.rocksdb]\ndefault-features = false\nfeatures = [\"lz4\"]\n```\n\n## Multithreaded ColumnFamily alternation\n\nThe underlying RocksDB does allow column families to be created and dropped\nfrom multiple threads concurrently. But this crate doesn't allow it by default\nfor compatibility. If you need to modify column families concurrently, enable\ncrate feature called `multi-threaded-cf`, which makes this binding's\ndata structures to use RwLock by default. Alternatively, you can directly create\n`DBWithThreadMode<MultiThreaded>` without enabling the crate feature.\n", "release_dates": []}, {"name": "sandbox", "description": "Easily run a local NEAR blockchain", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# NEAR Sandbox\n\nNEAR Sandbox lets you easily run a local NEAR blockchain.\n\nNEAR Sandbox is a [custom build](https://github.com/near/nearcore/blob/9f5e20b29f1a15a00fc50d6051b3b44bb6db60b6/Makefile#L67-L69) of the NEAR blockchain optimized for local development and testing. If you're familiar with [Ganache for Ethereum](https://www.trufflesuite.com/ganache), this is similar.\n\nThis repository contains code to quickly install pre-built binaries of NEAR Sandbox for multiple programming languages (currently just NodeJS; Rust coming soon) and operating systems (currently just Intel-based Macs and Debian/Ubuntu-flavored Linux distros using Intel processors).\n\n# Using NEAR Sandbox\n\nIf you just want to run tests against a NEAR Sandbox instance, check out [near-workspaces](https://github.com/near/workspaces) for your favorite language:\n- [JavaScript](https://github.com/near/workspaces-js)\n- [Rust](https://github.com/near/workspaces-rs)\n\nTip: `near-runner` includes `near-sandbox` as a dependency, so you will not need to install or run `near-sandbox` on its own.\n\nIf you want to run NEAR Sandbox on its own, continue reading.\n\n## Install\n\n### With [npm](https://www.npmjs.com/)\n\n    npm i -g near-sandbox\n\nNote: If you have trouble downloading binary from IPFS gateway, you can upload a pre-built near-sandbox tar file to any file storage service and use `SANDBOX_ARTIFACT_URL` environment variable to specify it's base URL.\ne.g. `> SANDBOX_ARTIFACT_URL=https://s3.aws.com/my-binary npm i near-sandbox`\n\n\n### With Rust\n\nComing soon\n\n### From Source\n\n* Install [Rust with correct build target](https://docs.near.org/develop/prerequisites)\n\n* Clone [nearcore](https://github.com/near/nearcore)\n\n      git clone https://github.com/near/nearcore\n\n* `cd` into your `nearcore` folder and run `make sandbox`\n\n      cd nearcore\n      make sandbox\n\n* For ease-of-use, you can copy (or [symlink](https://kb.iu.edu/d/abbe)) the binary to somewhere in your [PATH](https://www.cloudsavvyit.com/1933/what-is-the-unix-path-and-how-do-you-add-programs-to-it/). For example, if you have a `~/bin` folder:\n\n      cp target/debug/near-sandbox ~/bin/\n\n## Use\n\n* Initialize the Sandbox node\n\n      near-sandbox --home /tmp/near-sandbox init\n\n* Run it\n\n      near-sandbox --home /tmp/near-sandbox run\n\nTo find out other things you can do:\n\n    near-sandbox --help\n\n## Stop\n\nOnce you're finished using the sandbox node you can stop it by using <kbd>Ctrl</kbd><kbd>C</kbd>. To clean up the data it generates:\n\n    rm -rf /tmp/near-sandbox\n\n# What's special about NEAR Sandbox\n\nNEAR Sandbox includes custom features to make tweaking local and test environments easier.\n\n* `sandbox_patch_state` RPC call, used by [`patchState` in runner-js](https://github.com/near/runner-js#patch-state-on-the-fly), useful for making arbitrary state mutations on any contract or account\n", "release_dates": ["2022-08-30T02:14:18Z", "2022-08-15T22:09:15Z", "2022-07-18T22:43:08Z", "2022-04-06T02:02:11Z", "2021-10-11T18:41:29Z", "2021-10-05T21:14:40Z", "2021-10-05T20:56:25Z", "2021-10-05T19:48:14Z", "2021-10-05T19:45:30Z", "2021-10-05T19:24:48Z", "2021-08-30T14:17:17Z", "2021-08-06T14:34:15Z", "2021-07-27T21:26:29Z", "2021-07-23T18:55:07Z", "2021-07-23T18:45:51Z", "2021-07-20T20:21:33Z"]}, {"name": "schemafy", "description": "Crate for generating rust types from a json schema", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# schemafy\n\n[![Build Status](https://travis-ci.org/Marwes/schemafy.svg?branch=master)](https://travis-ci.org/Marwes/schemafy)\n[![Docs](https://docs.rs/schemafy/badge.svg)](https://docs.rs/schemafy)\n\nThis is a Rust crate which can take a [JSON schema (draft 4)](http://json-schema.org/) and generate Rust types which are serializable with [serde](https://serde.rs/). No checking such as `min_value` are done but instead only the structure of the schema is followed as closely as possible.\n\nAs a schema could be arbitrarily complex this crate makes no guarantee that it can generate good types or even any types at all for a given schema but the crate does manage to bootstrap itself which is kind of cool.\n\n## Example\n\nGenerated types for VS Codes [debug server protocol][]: <https://docs.rs/debugserver-types>\n\n[debug server protocol]:https://code.visualstudio.com/docs/extensions/example-debuggers\n\n## Development\n\nThe types generated by the JSON schema specification can be regenerated with `cargo build --features internal-regenerate` if changes have been made in the library itself. Rustfmt is required so that `src/schema.rs` is readable.\n", "release_dates": ["2023-01-04T03:13:04Z"]}, {"name": "sdk-docs", "description": "The book about near-sdk-rs", "language": "JavaScript", "license": null, "readme": "# Website\n\nThis website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.\n\n## Installation\n\n```console\nyarn install\n```\n\n## Local Development\n\n```console\nyarn start\n```\n\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\n\n## Build\n\n```console\nyarn build\n```\n\nThis command generates static content into the `build` directory and can be served using any static contents hosting service.\n\n## Deployment\n\n```console\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\n", "release_dates": []}, {"name": "sdk-rs-gas-benchmark", "description": "Gas and size benchmarks to compare with near-sdk-js", "language": "Rust", "license": null, "readme": null, "release_dates": []}, {"name": "seed-recovery", "description": "Recover public and secret keys from seed phrase", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Seed Phrase Recovery Tool\n\nThis is a simple tool that allows you to retrieve your public and secret keys from NEAR seed phrases.\n\n#### DISCLAIMER: This tool and source code are public, hosted by Github and NOT malicious. We are not responsible if Github pages has a vulnerability where malicious code is injected into the page or you are using a malicious browser or extension.\n\n## Instructions\n\n1. Open the tool\n2. Enter your seed phrase\n3. Click \"Recover Public and Secret Key\"\n4. Optionally reveal secret key\n", "release_dates": []}, {"name": "send-json", "description": "Minimal Fetch API wrapper compatible with Node.js and browser. Works with JSON only.", "language": "JavaScript", "license": null, "readme": null, "release_dates": []}, {"name": "signing-service", "description": null, "language": "TypeScript", "license": null, "readme": "# signing-service\n", "release_dates": []}, {"name": "StackOverflowBot", "description": "Integration between Stack Overflow, and Slack!", "language": "Julia", "license": null, "readme": "# Stack Overflow, Twitter, and Slack\nIntegration between Stackoverflow, Twitter, and Slack for the JuliaLang.slack.com workspace. \n\nEvery 30 minutes, a GitHub Action will run, which pings the StackOverflow API for new [Julia tagged questions](https://stackoverflow.com/questions/tagged/julia). \nIf there are new questions, it posts them in the `#stackoverflow-feed` channel on the [JuliaLang Slack](https://julialang.org/slack/) and on [Twitter](https://twitter.com/JuliaOverflow).\n\nEvery even numbered day of the month at 11 AM UTC time, un-answered questions will be re-posted. \n\nThis project is built in pure Julia and uses [Slack.jl](https://github.com/logankilpatrick/Slack.jl) as well as [StackOverflow.jl](https://github.com/logankilpatrick/StackOverflow.jl). \n\n## Current state\n\nThe code for this repo should now be in a static state and 100% Julia (yay). The only change on the near horizon is that Re-posted questions will be sent as a threaded message. This integration will happen in Slack.jl and then be utilized here. \n\nAll feeedback / suggestions / feature requests are welcome! Just open an issue on this repo. \n\n## Env Secrets\n\n`JULIALANGSLACKENDPOINT` should be in the form or `/services/TQVJBU534/BR8C1LMPS/42thawJz34SWSgZCpniyLBSE`. See https://github.com/JuliaLangSlack/Slack.jl#usage for more details.\n\n## Resources\n[YML Check](https://yamlchecker.com)\n\n[Slack App settings page](https://api.slack.com/apps/AN12MEVDH/general?)\n\n[Slack Message formatting check](https://api.slack.com/docs/messages/builder?msg=%7B%22text%22%3A%20%22This%20is%20a%20line%20of%20text.%5CnAnd%20this%20is%20another%20one.%22%7D)\n\n[GitHub Action Scheduling Docs](https://help.github.com/en/articles/events-that-trigger-workflows#scheduled-events-schedule)\n\n[Slack.jl](https://github.com/logankilpatrick/Slack.jl)\n\n[StackOverflow.jl](https://github.com/logankilpatrick/StackOverflow.jl)\n", "release_dates": []}, {"name": "stakewars-iii", "description": "Stake Wars: Episode 3 challenges and place to report issues", "language": null, "license": null, "readme": "Welcome to Stake Wars: Episode III A New Validator\n\nStake Wars is a program that helps the community become familiar with what it means to be a NEAR validator, and gives the community an early chance to access the chunk-only producer.\n\nStake Wars offers rewards that support new members who want to join mainnet as a validator starting from the end of September 2022.\n\nHope the force will be with you !\nhttps://github.com/near/stakewars-iii/blob/main/challenges/001.md\n\n\nFor Support and important announcements: https://discord.gg/7TercRzRgA\n", "release_dates": []}, {"name": "stakewars-iv", "description": null, "language": "Shell", "license": null, "readme": "# NEAR Stake Wars IV: Attack of Transactions\n\nNEAR Protocol is preparing a major update of the core protocol architecture that takes scalability to the next level. This update is called stateless validation, and it has ample impact on how the network operates internally. We invite everyone to join an early access network that runs on this new architecture, StatelessNet, and run a stateless validator node or test the network throughput and scalability. StatelessNet is separate from mainnet and testnet.\n\n## 1. Timeline\n\nThe entire duration of NEAR Stake Wars IV will be approximately two months, from February untill April 2024. For more information see the detailed timeline [here](TIMELINE.md).\n\n## 2. Participation\n\nAnyone can participate in NEAR Stake Wars IV by joining StatelessNet to confirm successful execution of their use cases, poke arround, run a validator node, or simply to fulfill their curiosity. There is also the opportunity to earn NEAR tokens by participating in the reward programs.\n\nThe instruction for joining StatelessNet can be found [here](HOW_TO.md), and the technical details of the network are [here](TECHNICAL_DETAILS.md).\n\nMore details about the reward programs can be found [here](REWARDS.md).\n\n## 3. Announcements\n\nFebruary 1st, 2024: StatelessNet was started and is currently running with 5 validator nodes, RPC and Archival nodes. Over the next few days we will gradually expand it and begin sending meaningful traffic to it.\n\nAs a quick overview of the network, you can use the following resources:\n* [StatelessNet Dashboard](https://nearinc.grafana.net/public-dashboards/451b4c15175b476a9fb00953de40f848)\n* List of current RPC nodes: \n  * `https://rpc.statelessnet.near.org`\n  * `https://archival-rpc.statelessnet.near.org`\n * [Explorer page](https://legacy.explorer.statelessnet.near.org/)\n\nYou can add `/metrics` after the RPC URLs to access a web page with RPC metrics.\n\n## 4. StatelessNet status\n\n#### February 28th, 2024\n\n* Improved orphan witnesses GC.\n* Fixed bug with banning the wrong peer if invalid state witness is received.\n* Fixed crash in Option::unwrap when spawning async tasks.\n* Removed obsolete flat storage creation triggers causing some nodes getting stuck.\n\n#### February 23rd, 2024\n\n* Orphan state witnesses cache is merged. We can resume loadtests on statelessnet soon.\n* Security fix: properly validate first chunk after genesis.\n* Validator roles and rewards model - understood what the new hardware requirements should be. Analyzing historical data on missing chunks to determine chunk producer stake threshold. Plan to share complete view on the model next week.\n\n#### February 22nd, 2024\n\nWe started onboarding community validators.\nThe list of currently running validators, proposals, and other useful information could be found on [the Epoch Info page](http://34.85.179.209:3030/debug/pages/epoch_info).\n\n#### February 21st, 2024\n\nContinue working on major statelessnet features:\n* Orphan state witnesses cache - clarified condition to restrict size, PR will be moved to review stage soon.\n* Validator roles and rewards model - understood details of current model and discussed concern with increased network costs.\n* In-memory trie - realized the need to improve our TestLoop framework to properly test and enable it. Started working on it.\n\n#### February 16th, 2024\n\n* With new release, every validator can track **only one shard** which they validate. This is a crucial feature allowing to reduce HW requirements and make NEAR more scalable.\n* Made progress on new validator rewards model.\n* Made progress on enabling in-memory trie which should make transaction processing 2x faster.\n\n\n#### February 14th, 2024\nBug bounty program is now **LIVE** as of February 14th, 2024. To avoid dupilicate reports, participants are recommended to check out [reported issues in stakewars-iv repository with reward-program-bug-bounty label](https://github.com/near/stakewars-iv/issues) and [reported issues with stateless-validation label](https://github.com/near/nearcore/labels/A-stateless-validation) in nearcore repository.\n\n\nUpdates from the past few days:\n* made a new release ([statelessnet-82.0](https://github.com/near/nearcore/releases/tag/statelessnet-82.0)) and updated statelessnet_latest to point to it.\n* Found that many missing chunks during loadtest were caused by state witnesses being orphaned. We planned to resolve it later but for now we started working on proper solution as this becomes a higher priority.\n* Reduced disk usage required to generate state proofs.\n* Found an insidious FlatStorage issue causing node startup time increase when shard has zero load. Made a temporary fix and working on the proper one.\n* Made progress with the discussion on what should be the validator roles distribution.\n* Made progress in setting up Explorer. The backend is compelted, the front-end requires a few more days of work\n* Begun looking at setting up a wallet. This effort is bigger and will likely take more time.\n\n#### February 12th, 2024\n\n* Fixed issue related to 35% missed chunks for all validator. Now there are 0% missed chunks for zero tx load \n* Conducted loadtest. Achieved 300 RPS but some validator missed 80% chunks. Investigating \n* Keeping working on improving test coverage \n* Working on mitigating disk usage increase by 200 GB for state proofs \n* Working on enabling single shard tracking and in-memory trie\n\n#### February 9th, 2024\n\nAdded instructions for read-only node and becoming a validator.\n\n#### February 2nd, 2024\n\nWe added instructions on how to create an account on StatelessNet and how to use the network.\n\n#### February 1st, 2024\n\nStatelessNet was started, and nodes are running. We noticed an issue impacting block finality and we are currently investignating it and working on a fix. This issue causes blocks to be missed, kickin out validator nodes. During Stage 1 of Stake Wars IV we expect to find issues what were not previously reproduced, and to iterate quickly in fixing them and updating the nodes.\n", "release_dates": []}, {"name": "strimzi-kafka-operator", "description": "Apache Kafka\u00ae running on Kubernetes", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![Strimzi](./documentation/logo/strimzi.png)](https://strimzi.io/)\n\n# Run Apache Kafka on Kubernetes and OpenShift\n\n[![Build Status](https://dev.azure.com/cncf/strimzi/_apis/build/status/build?branchName=main)](https://dev.azure.com/cncf/strimzi/_build/latest?definitionId=16&branchName=main)\n[![GitHub release](https://img.shields.io/github/release/strimzi/strimzi-kafka-operator.svg)](https://github.com/strimzi/strimzi-kafka-operator/releases/latest)\n[![License](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0)\n[![Twitter Follow](https://img.shields.io/twitter/follow/strimziio.svg?style=social&label=Follow&style=for-the-badge)](https://twitter.com/strimziio)\n\nStrimzi provides a way to run an [Apache Kafka\u00ae][kafka] cluster on \n[Kubernetes][k8s] or [OpenShift][os] in various deployment configurations.\nSee our [website][strimzi] for more details about the project.\n\n## Quick Starts\n\nTo get up and running quickly, check our [Quick Start for Minikube, OKD (OpenShift Origin) and Kubernetes Kind](https://strimzi.io/quickstarts/). \n\n## Documentation\n\nDocumentation to the current _main_ branch as well as all releases can be found on our [website][strimzi].\n\n## Getting help\n\nIf you encounter any issues while using Strimzi, you can get help using:\n\n- [#strimzi channel on CNCF Slack](https://slack.cncf.io/)\n- [Strimzi Users mailing list](https://lists.cncf.io/g/cncf-strimzi-users/topics)\n- [GitHub Discussions](https://github.com/strimzi/strimzi-kafka-operator/discussions)\n\n## Strimzi Community Meetings\n\nYou can join our regular community meetings:\n* Thursday 8:00 AM UTC (every 4 weeks starting from 4th June 2020) - [convert to your timezone](https://www.thetimezoneconverter.com/?t=8%3A00&tz=UTC)\n* Thursday 4:00 PM UTC (every 4 weeks starting from 18th June 2020) - [convert to your timezone](https://www.thetimezoneconverter.com/?t=16%3A00&tz=UTC)\n\nResources:\n* [Meeting minutes, agenda and Zoom link](https://docs.google.com/document/d/1V1lMeMwn6d2x1LKxyydhjo2c_IFANveelLD880A6bYc/edit#heading=h.vgkvn1hr5uor)\n* [Recordings](https://youtube.com/playlist?list=PLpI4X8PMthYfONZopcRd4X_stq1C14Rtn)\n* [Calendar](https://calendar.google.com/calendar/embed?src=c_m9pusj5ce1b4hr8c92hsq50i00%40group.calendar.google.com) ([Subscribe to the calendar](https://calendar.google.com/calendar/u/0?cid=Y19tOXB1c2o1Y2UxYjRocjhjOTJoc3E1MGkwMEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t))\n\n## Contributing\n\nYou can contribute by:\n- Raising any issues you find using Strimzi\n- Fixing issues by opening Pull Requests\n- Improving documentation\n- Talking about Strimzi\n\nAll bugs, tasks or enhancements are tracked as [GitHub issues](https://github.com/strimzi/strimzi-kafka-operator/issues). Issues which \nmight be a good start for new contributors are marked with [\"good-start\"](https://github.com/strimzi/strimzi-kafka-operator/labels/good-start)\nlabel.\n\nThe [Dev guide](https://github.com/strimzi/strimzi-kafka-operator/blob/main/development-docs/DEV_GUIDE.md) describes how to build Strimzi.\nBefore submitting a patch, please make sure to understand, how to test your changes before opening a PR [Test guide](https://github.com/strimzi/strimzi-kafka-operator/blob/main/development-docs/TESTING.md).\n\nThe [Documentation Contributor Guide](https://strimzi.io/contributing/guide/) describes how to contribute to Strimzi documentation.\n\nIf you want to get in touch with us first before contributing, you can use:\n\n- [#strimzi channel on CNCF Slack](https://slack.cncf.io/)\n- [Strimzi Dev mailing list](https://lists.cncf.io/g/cncf-strimzi-dev/topics)\n\n## License\nStrimzi is licensed under the [Apache License](./LICENSE), Version 2.0\n\n---\n\nStrimzi is a <a href=\"http://cncf.io\">Cloud Native Computing Foundation</a> sandbox project.\n\n![CNCF ><](./documentation/logo/cncf-color.png)\n\n[strimzi]: https://strimzi.io \"Strimzi\"\n[kafka]: https://kafka.apache.org \"Apache Kafka\"\n[k8s]: https://kubernetes.io/ \"Kubernetes\"\n[os]: https://www.openshift.com/ \"OpenShift\"\n", "release_dates": []}, {"name": "superserial", "description": "superserial provides serialization in any way you can imagine.", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# superserial\n\n<p>\n  <a href=\"https://npmcharts.com/compare/superserial?minimal=true\"><img alt=\"Downloads\" src=\"https://img.shields.io/npm/dt/superserial.svg?style=flat-square\" /></a>\n  <a href=\"https://www.npmjs.com/package/superserial\"><img alt=\"Version\" src=\"https://img.shields.io/npm/v/superserial.svg?style=flat-square\" /></a>\n  <a href=\"https://www.npmjs.com/package/superserial\"><img alt=\"License\" src=\"https://img.shields.io/npm/l/superserial.svg?style=flat-square\" /></a>\n  <img alt=\"Language Typescript\" src=\"https://img.shields.io/badge/language-Typescript-007acc.svg?style=flat-square\" />\n</p>\n\nAfter data transfer, when the object needs to be restored, `JSON` has many\nlimitations. It does not support values such as `Infinity` and `NaN`, and does\nnot provide circular references.\n\n**superserial** provides serialization in any way you can imagine.\n\n## Usage\n\n### with Deno\n\n```ts\nimport { Serializer } from \"https://deno.land/x/superserial/mod.ts\";\n\nconst serializer = new Serializer();\n\nconst nodes = [{ self: null as any, siblings: [] as any[] }, {\n  self: null as any,\n  siblings: [] as any[],\n}];\nnodes[0].self = nodes[0];\nnodes[0].siblings = nodes;\nnodes[1].self = nodes[1];\nnodes[1].siblings = nodes;\n\nconst serialized = serializer.serialize(nodes);\n\nconsole.log(serialized);\n// [$1,$2];{\"self\":$1,\"siblings\":$0};{\"self\":$2,\"siblings\":$0}\n```\n\n### with Node.js & Browser\n\n**Install**\n\n```bash\nnpm install superserial\n```\n\n```ts\nimport { Serializer } from \"superserial\";\n\n// Usage is as above :-)\n```\n\n## Index\n\n- [Built-in Objects](#built-in-objects)\n- [Circular Reference](#circular-reference)\n- [Class Support](#class-support)\n\n### Built-in Objects\n\n**Value Properties**\n\n- `NaN`\n- `Infinity`, `-Infinity`\n- `undefined`\n\n```ts\nserializer.serialize({\n  und: undefined,\n  nan: NaN,\n  inf: Infinity,\n  ninf: -Infinity,\n}); // {\"und\":undefined,\"nan\":NaN,\"inf\":Infinity,\"ninf\":-Infinity}\n```\n\n**Fundamental Objects**\n\n- `Symbol`\n\n**ETC**\n\n- `BigInt`\n- `Date`\n- `RegExp`\n- `Map`\n- `Set`\n\n```ts\nconst symbol = Symbol();\nserializer.serialize({\n  sym: symbol,\n  bigint: 100n,\n  date: new Date(),\n  regex: /abc/gmi,\n  map: new Map([[\"key1\", \"value1\"], [\"key2\", \"value2\"]]),\n  set: new Set([1, 2, 3, 4]),\n});\n// {\"sym\":$1,\"bigint\":100n,\"date\":$2,\"regex\":$3,\"map\":$4,\"set\":$5};Symbol();Date(1648740167514);/abc/gim;Map(\"key1\"=>\"value1\",\"key2\"=>\"value2\");Set(1,2,3,4)\n```\n\n### Circular Reference\n\nExisting JSON functions do not support circular references, but **superserial**\nhas solved this problem.\n\n```ts\nconst nodes = [{ self: null as any, siblings: [] as any[] }, {\n  self: null as any,\n  siblings: [] as any[],\n}];\nnodes[0].self = nodes[0];\nnodes[0].siblings = nodes;\nnodes[1].self = nodes[1];\nnodes[1].siblings = nodes;\n\nconst serialized = serializer.serialize(nodes);\n\nconsole.log(serialized);\n// [$1,$2];{\"self\":$1,\"siblings\":$0};{\"self\":$2,\"siblings\":$0}\n\nconst deserialized = serializer.deserialize(serialized) as typeof nodes;\n\nconsole.log(deserialized === deserialized[0].siblings); // true\nconsole.log(deserialized[0] === deserialized[0].self); // true\nconsole.log(deserialized === deserialized[1].siblings); // true\nconsole.log(deserialized[1] === deserialized[1].self); // true\n```\n\n**Circular Set & Map**\n\n```ts\nconst set = new Set();\nset.add(set);\n\nserializer.serialize(set); // Set($0)\n\nconst map = new Map();\nmap.set(map, map);\n\nserializer.serialize(map); // Map($0=>$0)\n```\n\nDeserialization also works perfectly!\n\n```ts\nconst set = serializer.deserialize(\"Set($0)\");\n\nconsole.log(set === [...set][0]); // true\n\nconst map = serializer.deserialize(\"Map($0=>$0)\");\n\nconsole.log(map === [...map.keys()][0]); // true\nconsole.log(map === map.get([...map.keys()][0])); // true\n```\n\n### Class Support\n\nClasses contain methods, getters, etc., but JSON doesn't fully support them.\n**superserial** includes features that make it easy to use.\n\nThe class to be used for `deserialize` is defined when the Serializer is\ncreated.\n\n```ts\nclass TestUser {\n  constructor(\n    public name?: string,\n    public age?: number,\n  ) {\n  }\n}\n\nconst serializer = new Serializer({ classes: { TestUser } });\n```\n\nSerializes the object and then deserializes it again. Since the original class\nobject is converted as it is, all getters and methods can be used as they are.\n\n```ts\nconst serialized = serializer.serialize(new TestUser(\"wan2land\", 20));\nconsole.log(serialized);\n// TestUser{\"name\":\"wan2land\",\"age\":20}\n\nconst user = serializer.deserialize(serialized);\nconsole.log(user); // TestUser { name: \"wan2land\", age: 20 }\n```\n\n#### toSerialize / toDeserialize\n\nPrivate variables can be converted using two special symbols (`toSerialize`,\n`toDeserialize`).\n\nWhen serializing(`serialize`), the object's data is created based on the\n`toSerialize` method. You can check the result of `toSerialize` by looking at\nthe serialized string.\n\nWhen deserializing(`deserialize`), it is impossible to create an object without\na constructor call. (ref.\n[No backdoor to access private](https://github.com/tc39/proposal-class-fields#no-backdoor-to-access-private))\nIf the `toDeserialize` method is included, a value can be injected through\n`toDeserialize` after calling the constructor.\n\n```ts\nimport {\n  Serializer,\n  toDeserialize,\n  toSerialize,\n} from \"https://deno.land/x/superserial/mod.ts\";\n\nclass TestUser {\n  #_age = 0;\n  constructor(public name: string) {\n    this.#_age = 0;\n  }\n\n  setAge(age: number) {\n    this.#_age = age;\n  }\n\n  getAge() {\n    return this.#_age;\n  }\n\n  [toSerialize]() {\n    return {\n      name: this.name,\n      age: this.#_age,\n    };\n  }\n\n  [toDeserialize](\n    value: {\n      name: string;\n      age: number;\n    },\n  ) {\n    this.name = value.name;\n    this.#_age = value.age;\n  }\n}\n\nconst serializer = new Serializer({ classes: { TestUser } });\n\n{\n  const user = new TestUser(\"wan2land\");\n  user.setAge(20);\n\n  console.log(serializer.serialize(user)); // TestUser{\"name\":\"wan2land\",\"age\":20}\n}\n{\n  const user = serializer.deserialize<TestUser>(\n    'TestUser{\"name\":\"wan2land\",\"age\":20}',\n  );\n  console.log(user); // TestUser { name: \"wan2land\" }\n  console.log(user.getAge()); // 20\n}\n```\n", "release_dates": []}, {"name": "sw4-account-creator", "description": "single-page web server designed specifically for the StatelessNET chain (Stake Wars IV)", "language": "Rust", "license": null, "readme": "# SW4 Account Creator\n\n## Overview\n`sw4-account-creator` is a streamlined, single-page web server designed specifically for the StatelessNET chain. This project is part of the event [Stake Wars IV: Attack of the Transactions](https://github.com/near/stakewars-iv). Built on the robust `actix-web` framework, it offers a user-friendly interface for creating new accounts on the StatelessNET chain, which is a feature-preview network operational during the event.\n\n## Features\n- **Account Creation**: Users can easily create a new account by providing their desired account ID and public Ed25519 key.\n- **Transaction Handling**: The server automates the process of sending transactions on behalf of a top-level account (configured in the settings) to establish the new account.\n- **Funding Accounts**: Newly created accounts are automatically funded with a predefined amount of NEAR tokens, ensuring immediate usability.\n\n## Current status\n\n- [x] Single-page template with a form for account creation\n- [x] Connect HTMX(https://htmx.org/) to the page\n- [x] Set up a form submission and replace the form with the result (partial template)\n- [x] Parse `account_id` and `public_key` from the form\n- [ ] Response with a meaningul error message if the form is not valid\n    - Validate account is not taken (as simple as possible)\n    - Public key is a valid Ed25519 key\n- [x] Retry in case of nonce conflict\n- [ ] (Optional) Protect from spamming\n- [x] Craft a transaction to create the account\n- [x] Sign the transaction with the key of the top-level account\n    - [x] Top-level account and its key are configured in the settings\n\n## Configuration\n\nThe server is configured using environment variables. The following variables are required:\n\n- `NEAR_RPC_URL` - URL of the NEAR RPC endpoint\n- `BASE_SIGNER_ACCOUNT_ID` - Account ID of the top-level account that will sign transactions\n- `BASE_SIGNER_SECRET_KEY` - Private key of the top-level account\n- `FUNDING_AMOUNT` - Amount of NEAR tokens to fund new accounts with (default 100NEAR)\n- `SERVER_PORT` - Port to listen on (default 10000)\n\n## Getting Started\n\nIt is expected the server will be running in Docker container. The following commands will build and run the server in a container:\n\n```bash\ndocker build -t sw4-account-creator .\n```\n\nPut the configuration in a file called `.env` in the root of the project. The file should look like this:\n\n```bash\nNEAR_RPC_URL=http://localhost:3030\nBASE_SIGNER_ACCOUNT_ID=near\nBASE_SIGNER_SECRET_KEY=ed25519:...\nFUNDING_AMOUNT=100000000000000000000000000\nSERVER_PORT=10000\nRUST_LOG=info\n```\n\nThen run the server with:\n\n```bash\ndocker run --env-file .env -p 10000:10000 sw4-account-creator\n```\n\n## Usage\n\n```bash\n./targer/release run --server-port 8080 --near-rpc-url http://localhost:3030 --base-signer-account-id near --base-signer-secret-key \"ed25519:...\" --funding-amount 100000000000000000000000000\n```\n\n", "release_dates": []}, {"name": "sysinfo", "description": "A system handler to get information and interact with processes written in Rust", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# sysinfo [![][img_travis-ci]][travis-ci] [![Build status](https://ci.appveyor.com/api/projects/status/nhep876b3legunwd/branch/master?svg=true)](https://ci.appveyor.com/project/GuillaumeGomez/sysinfo/branch/master) [![][img_crates]][crates] [![][img_doc]][doc]\n\n[img_travis-ci]: https://api.travis-ci.org/GuillaumeGomez/sysinfo.png?branch=master\n[img_crates]: https://img.shields.io/crates/v/sysinfo.svg\n[img_doc]: https://img.shields.io/badge/rust-documentation-blue.svg\n\n[travis-ci]: https://travis-ci.org/GuillaumeGomez/sysinfo\n[crates]: https://crates.io/crates/sysinfo\n[doc]: https://docs.rs/sysinfo/\n\nA system handler to interact with processes.\n\nSupports the following platforms:\n\n * Linux\n * Raspberry Pi\n * Android\n * macOS\n * Windows\n\nIt also compiles for Android but never been tested on it.\n\n### Running on Raspberry Pi\n\nIt'll be difficult to build on Raspberry Pi. A good way-around is to be build on Linux before sending it to your Raspberry Pi.\n\nFirst install the arm toolchain, for example on Ubuntu: `sudo apt-get install gcc-multilib-arm-linux-gnueabihf`.\n\nThen configure cargo to use the corresponding toolchain:\n\n```bash\ncat << EOF > ~/.cargo/config\n[target.armv7-unknown-linux-gnueabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\nEOF\n```\n\nFinally, cross compile:\n\n```bash\nrustup target add armv7-unknown-linux-gnueabihf\ncargo build --target=armv7-unknown-linux-gnueabihf\n```\n\n### Linux on Docker & Windows Subsystem for Linux (WSL)\n\nVirtual Linux systems, such as those run through Docker and Windows Subsystem for Linux (WSL), do not receive host hardware information via `/sys/class/hwmon` or `/sys/class/thermal`. As such, querying for components may return no results (or unexpected results) when using this library on virtual systems.\n\n## Code example\n\nYou have an example into the `examples` folder. Just run `cargo run` inside the `examples` folder to start it. Otherwise, here is a little code sample:\n\n```rust\nuse sysinfo::{NetworkExt, NetworksExt, ProcessExt, System, SystemExt};\n\nlet mut sys = System::new_all();\n\n// We display the disks:\nprintln!(\"=> disk list:\");\nfor disk in sys.get_disks() {\n    println!(\"{:?}\", disk);\n}\n\n// Network data:\nfor (interface_name, data) in sys.get_networks() {\n    println!(\"{}: {}/{} B\", interface_name, data.get_received(), data.get_transmitted());\n}\n\n// Components temperature:\nfor component in sys.get_components() {\n    println!(\"{:?}\", component);\n}\n\n// Memory information:\nprintln!(\"total memory: {} KiB\", sys.get_total_memory());\nprintln!(\"used memory : {} KiB\", sys.get_used_memory());\nprintln!(\"total swap  : {} KiB\", sys.get_total_swap());\nprintln!(\"used swap   : {} KiB\", sys.get_used_swap());\n\n// Number of processors\nprintln!(\"NB processors: {}\", sys.get_processors().len());\n\n// To refresh all system information:\nsys.refresh_all();\n\n// We show the processes and some of their information:\nfor (pid, process) in sys.get_processes() {\n    println!(\"[{}] {} {:?}\", pid, process.name(), process.disk_usage());\n}\n```\n\n## C interface\n\nIt's possible to use this crate directly from C. Take a look at the `Makefile` and at the `examples/src/simple.c` file.\n\nTo build the C example, just run:\n\n```bash\n> make\n> ./simple\n# If needed:\n> LD_LIBRARY_PATH=target/release/ ./simple\n```\n\n### Benchmarks\n\nYou can run the benchmarks locally with rust **nightly** by doing:\n\n```bash\n> cargo bench\n```\n\nHere are the current results:\n\n**Linux**\n\n<details>\n\n```text\ntest bench_new                     ... bench:     182,536 ns/iter (+/- 21,074)\ntest bench_new_all                 ... bench:  19,911,714 ns/iter (+/- 1,612,109)\ntest bench_refresh_all             ... bench:   5,649,643 ns/iter (+/- 444,129)\ntest bench_refresh_components      ... bench:      25,293 ns/iter (+/- 1,748)\ntest bench_refresh_components_list ... bench:     382,331 ns/iter (+/- 31,620)\ntest bench_refresh_cpu             ... bench:      13,633 ns/iter (+/- 1,135)\ntest bench_refresh_disks           ... bench:       2,509 ns/iter (+/- 75)\ntest bench_refresh_disks_list      ... bench:      51,488 ns/iter (+/- 5,470)\ntest bench_refresh_memory          ... bench:      12,941 ns/iter (+/- 3,023)\ntest bench_refresh_networks        ... bench:     256,506 ns/iter (+/- 37,196)\ntest bench_refresh_networks_list   ... bench:     266,751 ns/iter (+/- 54,535)\ntest bench_refresh_process         ... bench:     117,372 ns/iter (+/- 8,732)\ntest bench_refresh_processes       ... bench:   5,125,929 ns/iter (+/- 560,050)\ntest bench_refresh_system          ... bench:      52,526 ns/iter (+/- 6,786)\ntest bench_refresh_users_list      ... bench:   2,479,582 ns/iter (+/- 1,063,982)\n```\n</details>\n\n**Windows**\n\n<details>\n\n```text\ntest bench_new                     ... bench:   7,119,215 ns/iter (+/- 283,002)\ntest bench_new_all                 ... bench:  27,364,010 ns/iter (+/- 1,353,879)\ntest bench_refresh_all             ... bench:   3,125,085 ns/iter (+/- 92,479)\ntest bench_refresh_components      ... bench:   1,239,478 ns/iter (+/- 45,790)\ntest bench_refresh_components_list ... bench:   3,197,295 ns/iter (+/- 91,662)\ntest bench_refresh_cpu             ... bench:      24,973 ns/iter (+/- 1,844)\ntest bench_refresh_disks           ... bench:      52,321 ns/iter (+/- 1,533)\ntest bench_refresh_disks_list      ... bench:     114,756 ns/iter (+/- 3,900)\ntest bench_refresh_memory          ... bench:         581 ns/iter (+/- 25)\ntest bench_refresh_networks        ... bench:      35,231 ns/iter (+/- 2,210)\ntest bench_refresh_networks_list   ... bench:     661,170 ns/iter (+/- 56,636)\ntest bench_refresh_process         ... bench:       1,531 ns/iter (+/- 154)\ntest bench_refresh_processes       ... bench:   1,070,742 ns/iter (+/- 57,539)\ntest bench_refresh_system          ... bench:   1,303,291 ns/iter (+/- 44,538)\ntest bench_refresh_users_list      ... bench:   2,340,562 ns/iter (+/- 83,992)\n```\n</details>\n\n**macOS**\n\n<details>\n\n```text\ntest bench_new                     ... bench:      87,569 ns/iter (+/- 11,078)\ntest bench_new_all                 ... bench:  21,445,081 ns/iter (+/- 523,973)\ntest bench_refresh_all             ... bench:   1,915,573 ns/iter (+/- 296,132)\ntest bench_refresh_components      ... bench:     293,904 ns/iter (+/- 63,492)\ntest bench_refresh_components_list ... bench:     894,462 ns/iter (+/- 161,599)\ntest bench_refresh_cpu             ... bench:       8,636 ns/iter (+/- 1,244)\ntest bench_refresh_disks           ... bench:         937 ns/iter (+/- 97)\ntest bench_refresh_disks_list      ... bench:      25,116 ns/iter (+/- 990)\ntest bench_refresh_memory          ... bench:       2,172 ns/iter (+/- 67)\ntest bench_refresh_networks        ... bench:     183,552 ns/iter (+/- 2,253)\ntest bench_refresh_networks_list   ... bench:     183,623 ns/iter (+/- 11,183)\ntest bench_refresh_process         ... bench:       5,571 ns/iter (+/- 443)\ntest bench_refresh_processes       ... bench:     764,125 ns/iter (+/- 28,568)\ntest bench_refresh_system          ... bench:     333,610 ns/iter (+/- 53,204)\ntest bench_refresh_users_list      ... bench:  16,816,081 ns/iter (+/- 1,039,374)\n```\n</details>\n\n## Donations\n\nIf you appreciate my work and want to support me, you can do it here:\n\n[![Become a patron](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/GuillaumeGomez)\n", "release_dates": []}, {"name": "terraform-near-relayer", "description": "Terraform module for relayer", "language": "HCL", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# terraform-near-relayer\nTerraform module for Near Relayer\n\n## Overview\nThis repository provides an infrastructure deployment solution for running a Near Protocol Relayer on Cloud Platform \n\n## License\nThis Terraform module is licensed under the MIT License.\n\n## Disclaimer\nThis module is provided as-is and should be thoroughly tested in your own environment before deploying to production. Use it at your own risk.\n\n## Contributing\nWe welcome contributions to this project. If you have any suggestions, bug reports, or feature requests, please create an issue on GitHub and/or submit a pull request.\n\n## Changelog\nSee the CHANGELOG.md file for the release history.", "release_dates": []}, {"name": "the-guard-bot", "description": "The Guard, a Telegram bot to moderate groups.", "language": null, "license": {"key": "agpl-3.0", "name": "GNU Affero General Public License v3.0", "spdx_id": "AGPL-3.0", "url": "https://api.github.com/licenses/agpl-3.0", "node_id": "MDc6TGljZW5zZTE="}, "readme": "<p align=\"center\">\n  <img src=\"assets/logo.png\" width=\"180\" height=\"180\">\n  <h1 align=\"center\">The Guard Bot</h1>\n</p>\nThe Guard is a Telegram bot made to help admins manage their groups.\n\nInitially created to moderate [The Devs Network](https://thedevs.network).\n\n**NOTE: The Guard is in beta phase;**\n**it has known issues, but it's successfully being used in production**\n\nIf you need help with using the Bot or setting it up, join our [Support Chat](https://t.me/theguardsupport).\n\n## Setup\nYou need [Node.js](https://nodejs.org/) (>= 12) to run this bot.\n\n1. Create a bot via [@BotFather](https://t.me/BotFather) and grab a **token**.\n2. Clone this repository or [download zip](https://github.com/TheDevs-Network/the-guard-bot/archive/master.zip).\n3. Install dependencies via `npm install`.\n4. Copy `example.config.js` to `config.js` and edit it.\n5. Start the bot via `npm start`.\n\n## Setup with Docker\nYou need to have [docker](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-from-a-package) installed on your machine.\n\n1. Create a bot via [@BotFather](https://t.me/BotFather) and grab a **token**.\n2. Clone this repository or [download zip](https://github.com/TheDevs-Network/the-guard-bot/archive/master.zip).\n3. Copy `example.config.js` to `config.js` and edit it.\n4. Run `docker build -t the_guard_bot .` to build image.\n5. Run `docker run -v $(pwd)/data:/app/data --rm -itd the_guard_bot` to start the bot.\n\nNow you can add the bot as **administrator** to your groups.\n\n## Features\n* Synchronized database across multiple groups.\n* Adding admins to the bot.\n* Auto-remove and warn channels and groups ads.\n* Kick bots added by users.\n* Warn and ban users to control the group.\n* Commands work with replying, mentioning and ID.\n* Removes commands and temporary bot messages.\n* Ability to create custom commands.\n* Supports plugins.\n\nOverall, keeps the groups clean and healthy to use.\n\n## Commands\nCommand                 | Role       | Available at | Description\n----------------------- | ---------- | ------------ | -----------------\n`/admin`                | _Master_   | _Everywhere_ | Makes the user admin in the bot and groups.\n`/unadmin`              | _Master_   | _Everywhere_ | Demotes the user from admin list.\n`/leave <name\\|id>`     | _Master_   | _Everywhere_ | Make the bot to leave the group cleanly.\n`/hidegroup`            | _Master_   | _Groups_     | Revoke invite link and hide the group from `/groups` list.\n`/showgroup`            | _Master_   | _Groups_     | Make the group accessible via `/groups` list.\n`/del [reason]`         | _Admin_    | _Everywhere_ | Deletes replied-to message.\n`/warn <reason>`        | _Admin_    | _Groups_     | Warns the user.\n`/unwarn`               | _Admin_    | _Everywhere_ | Removes the last warn from the user.\n`/nowarns`              | _Admin_    | _Everywhere_ | Clears warns for the user.\n`/permit`               | _Admin_    | _Everywhere_ | Permits the user to advertise once, within 24 hours.\n`/ban <reason>`         | _Admin_    | _Groups_     | Bans the user from groups.\n`/unban`                | _Admin_    | _Everywhere_ | Removes the user from ban list.\n`/user`                 | _Admin_    | _Everywhere_ | Shows the status of the user.\n`/addcommand <name>`    | _Admin_    | _In-Bot_     | Create a custom command.\n`/removecommand <name>` | _Admin_    | _In-Bot_     | Remove a custom command.\n`/staff`                | _Everyone_ | _Everywhere_ | Shows a list of admins.\n`/link`                 | _Everyone_ | _Everywhere_ | Shows the current group's link.\n`/groups`               | _Everyone_ | _Everywhere_ | Shows a list of groups which the bot is admin in.\n`/report`               | _Everyone_ | _Everywhere_ | Reports the replied-to message to admins.\n`/commands`             | _Everyone_ | _In-Bot_     | Shows a list of available commands.\n`/help` \\| `/start`     | _Everyone_ | _In-Bot_     | How to use the bot.\n\nAll commands and actions are synchronized across all of the groups managed by the owner and they work with **replying**, **mentioning** or **ID** of a user.\n\nIf used by reply, `/ban` and `/warn` would remove the replied-to message.\n\nThe bot is still in beta phase so feel free to [open issues](https://github.com/thedevs-network/the-guard-bot/issues/new) and ask for features.\n\n[**Roadmap**](https://github.com/TheDevs-Network/the-guard-bot/projects/1)\n\n---\n\n> Important Note: Under the AGPL-3.0 license, if you're running your own instance, you should add a link to the source [(this repository)](https://github.com/TheDevs-Network/the-guard-bot) in your bot's bio. If you're modifying this source and making your own bot, you should link to the source of your own version of the bot according to the AGPL-3.0 license. Check [LICENSE](LICENSE) for more info.\n\n`The Guard` icon is from [Entypo+](http://entypo.com/) by Daniel Bruce.\n", "release_dates": []}, {"name": "toml-rs", "description": "A TOML encoding/decoding library for Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# toml-rs\n\n[![Latest Version](https://img.shields.io/crates/v/toml.svg)](https://crates.io/crates/toml)\n[![Documentation](https://docs.rs/toml/badge.svg)](https://docs.rs/toml)\n\nA [TOML][toml] decoder and encoder for Rust. This library is currently compliant\nwith the v0.5.0 version of TOML. This library will also likely continue to stay\nup to date with the TOML specification as changes happen.\n\n[toml]: https://github.com/toml-lang/toml\n\n```toml\n# Cargo.toml\n[dependencies]\ntoml = \"0.5\"\n```\n\nThis crate also supports serialization/deserialization through the\n[serde](https://serde.rs) crate on crates.io. Currently the older `rustc-serialize`\ncrate is not supported in the 0.3+ series of the `toml` crate, but 0.2 can be\nused for that support.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in toml-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "treasury-dao", "description": "All the forming documents and tools for Treasury DAO", "language": "JavaScript", "license": null, "readme": "# Treasury DAO\n\nThis is the place for all the forming documents of Treasury DAO, scripts and tools.\n\n## Constitution\n\nTODO\n\n## Code of Conduct\n\nTODO\n\n## Staking snapshot\n\nStaking snapshot is the code that snapshots the amount staked and delegated by all the users.\nThe amounts in the snapshot are used as a weight for user votes in the voting contract.\nOn chain only merkle root of the snapshot is stored, off-chain path is computed when the vote is cast and provided to the contract.\n\nThe snapshot format is `account_id,amount`, sorted by `account_id` to ensure predictability.\n\nLockup contracts are resolved to the owner. All delegations across mulitple pools are sumed.\n\n## Voting contract\n\nVoting contract that is used to self nominate as candidate and voting.\n\nNext set of APIs are present:\n - `set_snapshot(hash: CryptoHash)` -- can be only called once a quarter by `owner_id`.\n - `self_nominate(gov_forum_link: String)` -- can be used by individual who wants to be candidate into members. Can be called at any point. The critical piece is the link to the governance forum that will link their discussion identity and other info. This requires a small deposit to cover storage of this information.\n - `vote(candidate_id: AccountId, vote_amount: Balance, total_amount: Balance, proof: MerkleProof)` -- given account delegates part of their \"weight\" `vote_amount` to given candidate. `total_amount` and `proof` are required to validate this user in the snapshot.\n\nNext view functions are available:\n - `get_owner() -> AccountId` -- account that can be set `owner_id`\n - `get_snapshot_hash() -> CryptoHash` -- returns hash of the snapshot. Can be used to verify that snapshot is correct.\n - `get_user_votes(account_id: AccountId) -> [(AccountId, Balance)]` -- returns votes of the given user. The available for voting weight is balance of this user minus all already casted votes.\n - `get_candidate_count() -> u32` -- number of candidates.\n - `get_candidates(from_index: u32, limit: u32) -> [Candidate]` -- list of candidates from given interval with their votes.\n - `get_candidate(account_id: AccountId) -> Candidate` -- total number of votes casted for given candidate.\n\nWhere `Candidate { account_id: AccountId, votes: Balance, gov_forum_link: String}`.\n\nUser full balance is retrievable from the snapshot. Frontends and CLI tools must have this snapshot available to retrieve the balance and to compute merkle proof for voting.\n\n> Note, that current voting contract requires manual intervention to set snapshots of the stake due to limitations of lockup/staking contracts pair.\n> This problem will be addressed over time, which will allow to transition to vote without extra snapshotting.\n\n## Voting UI\n\nUser interface to submit self nomination and vote.\n\n", "release_dates": []}, {"name": "twiggy", "description": "Twiggy\ud83c\udf31 is a code size profiler", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<div align=\"center\">\n\n  <h1>Twiggy\ud83c\udf31</h1>\n\n  <strong>A code size profiler for Wasm</strong>\n\n  <p>\n    <a href=\"https://docs.rs/twiggy/\"><img src=\"https://docs.rs/twiggy/badge.svg\"/></a>\n    <a href=\"https://crates.io/crates/twiggy\"><img src=\"https://img.shields.io/crates/v/twiggy.svg\"/></a>\n    <a href=\"https://crates.io/crates/twiggy\"><img src=\"https://img.shields.io/crates/d/twiggy.svg\"/></a>\n    <a href=\"https://travis-ci.org/rustwasm/twiggy\"><img src=\"https://travis-ci.org/rustwasm/twiggy.svg?branch=master\"/></a>\n  </p>\n\n  <h3>\n    <a href=\"https://rustwasm.github.io/twiggy\">Guide</a>\n    <span> | </span>\n    <a href=\"https://rustwasm.github.io/twiggy/contributing/index.html\">Contributing</a>\n    <span> | </span>\n    <a href=\"https://discordapp.com/channels/442252698964721669/443151097398296587\">Chat</a>\n  </h3>\n\n  <sub>Built with \ud83e\udd80\ud83d\udd78 by <a href=\"https://rustwasm.github.io/\">The Rust and WebAssembly Working Group</a></sub>\n</div>\n\n## About\n\nTwiggy is a code size profiler for Wasm. It analyzes a binary's call graph to\nanswer questions like:\n\n* Why was this function included in the binary in the first place? Who calls it?\n\n* What is the *retained size* of this function? I.e. how much space would be\n  saved if I removed it and all the functions that become dead code after its\n  removal.\n\nUse Twiggy to make your binaries slim!\n\n## Install Twiggy\n\nEnsure that you have [the Rust toolchain installed](https://www.rust-lang.org/),\nthen run:\n\n```\ncargo install twiggy\n```\n\n## Learn More!\n\n[**Read the Twiggy guide!**](https://rustwasm.github.io/twiggy)\n\n<div align=\"center\">\n  <img src=\"./guide/src/twiggy.png\"/>\n</div>\n", "release_dates": []}, {"name": "units-js", "description": "Easily parse and format NEAR Tokens and gas units", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "NEAR Units\n==========\n\nTypeScript/JavaScript tools to help parse and format NEAR units. For now, this means NEAR tokens and [gas units](https://docs.near.org/concepts/basics/transactions/gas).\n\n# Install\n\n    npm i --save near-units\n\nOr using [Yarn](https://yarnpkg.com/):\n\n    yarn add near-units\n\n# Parsing strings\n\n```js\nimport { NEAR, Gas, parse } from 'near-units';\n\nconst near = NEAR.parse('1.25 mN');\nconsole.log(near.toHuman()); // 1.25 mN\n\nconst gas = Gas.parse('1 Tgas');\nconsole.log(gas.toHuman()); // 1 Tgas\n\n// equivalent to the above, but TS typings might not be as helpful\nconst near = parse('1.25 mN');\nconst gas = parse('1 Tgas');\n```\n\nSee [\\_\\_tests__](./__tests__) for a full list of examples of inputs that can be parsed and the human-readable version that can be returned by `toHuman`.\n\n# Doing math\n\n`NEAR` and `Gas` both wrap `BN` from [bn.js], so you can perform any math with them that you need:\n\n```js\nimport { NEAR } from 'near-units';\n\nconst amount1 = NEAR.parse('100');\nconst amount2 = NEAR.parse('0.5');\nconst amount3 = amount1.mul(amount2);\n```\n\nSee [the bn.js docs for all possible operations][bn.js].\n\n  [bn.js]: https://github.com/indutny/bn.js/\n\n# Interop\n\nSince they wrap `BN`, they can be passed directly to function calls with [near-api-js](https://github.com/near/near-api-js) or [near-runner](https://github.com/near/runner-js):\n\n```js\n// with an Account object from near-api-js\nsomeAccount.functionCall({\n  contractId: 'example.near',\n  methodName: 'do_something',\n  args: { param1: 'whatever' },\n  gas: Gas.parse('50,000,000,000,000'),\n  attachedDeposit: NEAR.parse('1'),\n});\n\n// with an Account object from near-runner\nsomeAccount.call(\n  'example.near',\n  'do_something',\n  { param1: 'whatever' },\n  {\n    gas: Gas.parse('50,000,000,000,000'),\n    attachedDeposit: NEAR.parse('1'),\n  }\n});\n```\n\n`NEAR` and `Gas` also both override `toJSON` to get to a string version that can be passed as an argument to near-cli and in other contexts.\n\n# CLI\n\nThis package ships with a minimal CLI:\n\n    npm i -g near-units\n\nNow you can `near-units --help`:\n\n    Parse and format NEAR tokens and gas units. Examples:\n\n        near-units 10 N # => 10000000000000000000000000\n        near-units -h 10000000000000000000000000 yN # => 10 N\n        near-units 50 Tgas # => 50000000000000\n        near-units -h 50000000000000 gas # => 50 Tgas\n\nYou can use it anywhere near units are accepted. For example, on macOS & Linux, you can:\n\n```bash\nnear call $LOCKUP transfer '{\n  \"receiver_id\": \"example.near\",\n  \"amount\": \"'$(near-units 1N)'\"\n}' --accountId=$ACCOUNT --gas=$(near-units 50Tgas)\n```\n", "release_dates": []}, {"name": "units-rs", "description": "Rust tools for parsing and printing NEAR related units", "language": "Rust", "license": null, "readme": "NEAR Units\n==========\n\n> Note: It is recommended to use [near-gas](https://crates.io/crates/near-gas) and [near-token](https://crates.io/crates/near-token) crates instead of near-units, as those crates provide strict type wrappers, const constructors, and overall extremely lightweight.\n\nRust tools to help parse and format NEAR units. For now, this means NEAR tokens and [gas units](https://docs.near.org/docs/concepts/gas).\n\n# Install\n\n```toml\nnear-units=\"0.1.0\"\n```\n\n# Parsing strings\n\n", "release_dates": []}, {"name": "useragent-discovery-container", "description": null, "language": "HTML", "license": null, "readme": "---\nname: User-Agent Based Rendering\nslug: edge-functions-user-agent-based-rendering\ndescription: Learn how to render a different page based on the User-Agent header.\nframework: Next.js\nuseCase: Edge Middleware\ncss: Tailwind\ndeployUrl: https://vercel.com/new/clone?repository-url=https://github.com/vercel/examples/tree/main/edge-middleware/user-agent-based-rendering&project-name=user-agent-based-rendering&repository-name=user-agent-based-rendering\ndemoUrl: https://edge-user-agent-based-rendering.vercel.app\nrelatedTemplates:\n  - ab-testing-simple\n---\n\n# User-Agent Based Rendering\n\nThis example shows how to render a different page based on the [User-Agent header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent).\n\n## Demo\n\nhttps://edge-user-agent-based-rendering.vercel.app\n\n## How to Use\n\nYou can choose from one of the following two methods to use this repository:\n\n### One-Click Deploy\n\nDeploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=vercel-examples):\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/vercel/examples/tree/main/edge-middleware/user-agent-based-rendering&project-name=user-agent-based-rendering&repository-name=user-agent-based-rendering)\n\n### Clone and Deploy\n\nExecute [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) with [npm](https://docs.npmjs.com/cli/init) or [Yarn](https://yarnpkg.com/lang/en/docs/cli/create/) to bootstrap the example:\n\n```bash\npnpm create next-app --example https://github.com/vercel/examples/tree/main/edge-middleware/user-agent-based-rendering\n```\n\nNext, run Next.js in development mode:\n\n```bash\npnpm dev\n```\n\nDeploy it to the cloud with [Vercel](https://vercel.com/new?utm_source=github&utm_medium=readme&utm_campaign=edge-middleware-eap) ([Documentation](https://nextjs.org/docs/deployment)).\n", "release_dates": []}, {"name": "wallet-experience", "description": "All epics, issues, and tasks dealing with any Pagoda/NEAR focused wallet work", "language": "TypeScript", "license": null, "readme": "<h1 align=\"center\">\n  <a href=\"https://github.com/shelegdmitriy/boilerplate-template-frontend\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/shelegdmitriy/boilerplate-template-frontend/main/docs/images/pagoda_logo_light.png\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/shelegdmitriy/boilerplate-template-frontend/main/docs/images/pagoda_logo_dark.png\">\n      <img alt=\"\" src=\"https://raw.githubusercontent.com/shelegdmitriy/boilerplate-template-frontend/main/docs/images/pagoda_logo_dark.png\">\n    </picture>\n  </a>\n</h1>\n\n<div align=\"center\">\n  Boilerplate Template Frontend React\n  <br />\n  <br />\n  <a href=\"https://github.com/shelegdmitriy/boilerplate-template-frontend/issues/new?assignees=&labels=bug&template=01_BUG_REPORT.md&title=bug%3A+\">Report a Bug</a>\n  \u00b7\n  <a href=\"https://github.com/shelegdmitriy/boilerplate-template-frontend/issues/new?assignees=&labels=enhancement&template=02_FEATURE_REQUEST.md&title=feat%3A+\">Request a Feature</a>\n  .\n  <a href=\"https://github.com/shelegdmitriy/boilerplate-template-frontend/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+\">Ask a Question</a>\n</div>\n\n<div align=\"center\">\n<br />\n\n[![Pull Requests welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg?style=flat-square)](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)\n[![code with love by shelegdmitriy](https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-shelegdmitriy-ff1414.svg?style=flat-square)](https://github.com/shelegdmitriy)\n\n</div>\n\n<details open=\"open\">\n<summary>Table of Contents</summary>\n\n- [About](#about)\n  - [Built With](#built-with)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n- [Usage](#usage)\n- [Deploy on Vercel](#deploy-on-vercel)\n- [Roadmap](#roadmap)\n- [Support](#support)\n- [Project assistance](#project-assistance)\n- [Contributing](#contributing)\n- [Authors & contributors](#authors--contributors)\n- [Security](#security)\n\n</details>\n\n---\n\n## About\n\nThis is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) and [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs) created for other boilerplate templates to easily set up and maintain a frontend part ony.\n\n### Built With\n\n[`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), [`tailwindcss`](https://tailwindcss.com/docs/guides/nextjs), [`tailwindui`](https://tailwindui.com/), [`@headlessui/react`](https://headlessui.com/), [`@heroicons/react`](https://heroicons.com/), [`amazing-github-template`](https://github.com/dec0dOS/amazing-github-template)\n\nGetting Started\n==================\n\n### Prerequisites\n\nMake sure you have a [current version of Node.js](https://nodejs.org/en/about/releases/) installed \u2013 we are targeting versions `18>`.\n\nRead about other [prerequisites](https://docs.near.org/develop/prerequisites) in our docs.\n\n### Installation\n\n\nInstall all dependencies:\n\n    npm install\n\n\nUsage\n=====\n\nStart your frontend:\n\n    npm run dev\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nExploring The Code\n==================\n\n1. You can start editing the page by modifying `frontend/pages/index.tsx`. The page auto-updates as you edit the file.\n2. [API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `frontend/pages/api/hello.ts`.\n3. The `frontend/pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.\n4. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n\nTroubleshooting\n===============\n\nOn Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.\n\n\n  [create-next-app]: https://github.com/vercel/next.js/tree/canary/packages/create-next-app\n  [Node.js]: https://nodejs.org/en/download/package-manager\n  [tailwindcss]: https://tailwindcss.com/docs/guides/nextjs\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n\n## Roadmap\n\nSee the [open issues](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues) for a list of proposed features (and known issues).\n\n- [Top Feature Requests](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues?q=label%3Aenhancement+is%3Aopen+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Top Bugs](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Areactions-%2B1-desc) (Add your votes using the \ud83d\udc4d reaction)\n- [Newest Bugs](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues?q=is%3Aopen+is%3Aissue+label%3Abug)\n\n## Support\n\nReach out to the maintainer:\n\n- [GitHub issues](https://github.com/shelegdmitriy/boilerplate-template-frontend/issues/new?assignees=&labels=question&template=04_SUPPORT_QUESTION.md&title=support%3A+)\n\n## Project assistance\n\nIf you want to say **thank you** or/and support active development of Boilerplate Template Frontend React:\n\n- Add a [GitHub Star](https://github.com/shelegdmitriy/boilerplate-template-frontend) to the project.\n- Tweet about the Boilerplate Template Frontend React.\n- Write interesting articles about the project on [Dev.to](https://dev.to/), [Medium](https://medium.com/) or your personal blog.\n\nTogether, we can make Boilerplate Template Frontend React **better**!\n\n## Contributing\n\nFirst off, thanks for taking the time to contribute! Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.\n\n\nPlease read [our contribution guidelines](docs/CONTRIBUTING.md), and thank you for being involved!\n\n## Authors & contributors\n\nThe original setup of this repository is by [Dmitriy Sheleg](https://github.com/shelegdmitriy).\n\nFor a full list of all authors and contributors, see [the contributors page](https://github.com/shelegdmitriy/boilerplate-template-frontend/contributors).\n\n## Security\n\nBoilerplate Template Frontend React follows good practices of security, but 100% security cannot be assured.\nBoilerplate Template Frontend React is provided **\"as is\"** without any **warranty**. Use at your own risk.\n\n_For more information and to report security issues, please refer to our [security documentation](docs/SECURITY.md)._\n", "release_dates": []}, {"name": "wallet-selector", "description": "This is a wallet selector modal that allows users to interact with NEAR dApps with a selection of available wallets.", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# NEAR Wallet Selector\n\nNEAR Wallet Selector makes it easy for users to interact with your dApp by providing an abstraction over various wallets within the NEAR ecosystem:\n\n- [My NEAR Wallet](https://www.npmjs.com/package/@near-wallet-selector/my-near-wallet) - Browser wallet.\n- [Mintbase Wallet](https://www.npmjs.com/package/@near-wallet-selector/mintbase-wallet) - Browser wallet.\n- [Ledger](https://www.npmjs.com/package/@near-wallet-selector/ledger) - Hardware wallet.\n- [Sender](https://www.npmjs.com/package/@near-wallet-selector/sender) - Injected wallet.\n- [Math Wallet](https://www.npmjs.com/package/@near-wallet-selector/math-wallet) - Injected wallet.\n- [Nightly](https://www.npmjs.com/package/@near-wallet-selector/nightly) - Injected wallet.\n- [Meteor Wallet](https://www.npmjs.com/package/@near-wallet-selector/meteor-wallet) - Injected wallet.\n- [Metamask Snap](https://www.npmjs.com/package/@near-wallet-selector/near-snap) - Injected wallet.\n- [Narwallets](https://www.npmjs.com/package/@near-wallet-selector/narwallets) - Injected wallet.\n- [WELLDONE Wallet](https://www.npmjs.com/package/@near-wallet-selector/welldone-wallet) - Injected wallet.\n- [Coin98 Wallet](https://www.npmjs.com/package/@near-wallet-selector/coin98-wallet) - Injected wallet.\n- [Neth](https://www.npmjs.com/package/@near-wallet-selector/neth) - Injected wallet.\n- [XDEFI Wallet](https://www.npmjs.com/package/@near-wallet-selector/xdefi) - Injected wallet.\n- [Ramper Wallet](https://www.npmjs.com/package/@near-wallet-selector/ramper-wallet) - Injected wallet.\n- [Bitget Wallet](https://www.npmjs.com/package/@near-wallet-selector/bitget-wallet) - Injected wallet.\n- [Here Wallet](https://www.npmjs.com/package/@near-wallet-selector/here-wallet) - Mobile wallet.\n- [NearFi Wallet](https://www.npmjs.com/package/@near-wallet-selector/nearfi) - Mobile wallet.\n- [Near Mobile Wallet](https://www.npmjs.com/package/@near-wallet-selector/near-mobile-wallet) - Mobile Wallet.\n- [WalletConnect](https://www.npmjs.com/package/@near-wallet-selector/wallet-connect) - Bridge wallet.\n\n## Preview\n\n[React](https://reactjs.org/) / [Next.js](https://nextjs.org/) and [Angular](https://angular.io/) variations of the [Guest Book](https://github.com/near-examples/guest-book/) dApp can be found in the [`examples`](/examples) directory. You can use these to gain a concrete understanding of how to integrate NEAR Wallet Selector into your own dApp.\n\n![Preview](./images/preview.gif)\n\n## Installation and Usage\n\nThe easiest way to use NEAR Wallet Selector is to install the [`core`](https://www.npmjs.com/package/@near-wallet-selector/core) package from the NPM registry, some packages may require `near-api-js` v1.0.0 or above check them at [`packages`](./packages)\n\n```bash\n# Using Yarn\nyarn add near-api-js\n\n# Using NPM.\nnpm install near-api-js\n```\n\n```bash\n# Using Yarn\nyarn add @near-wallet-selector/core\n\n# Using NPM.\nnpm install @near-wallet-selector/core\n```\n\nNext, you'll need to install the wallets you want to support:\n\n```bash\n# Using Yarn\nyarn add \\\n  @near-wallet-selector/bitget-wallet \\\n  @near-wallet-selector/my-near-wallet \\\n  @near-wallet-selector/sender \\\n  @near-wallet-selector/nearfi \\\n  @near-wallet-selector/here-wallet \\\n  @near-wallet-selector/math-wallet \\\n  @near-wallet-selector/nightly \\\n  @near-wallet-selector/meteor-wallet \\\n  @near-wallet-selector/narwallets \\\n  @near-wallet-selector/welldone-wallet \\\n  @near-wallet-selector/near-snap \\\n  @near-wallet-selector/ledger \\\n  @near-wallet-selector/wallet-connect \\\n  @near-wallet-selector/coin98-wallet \\\n  @near-wallet-selector/neth \\\n  @near-wallet-selector/xdefi \\\n  @near-wallet-selector/ramper-wallet \\\n  @near-wallet-selector/near-mobile-wallet  \\\n  @near-wallet-selector/mintbase-wallet\n\n# Using NPM.\nnpm install \\\n  @near-wallet-selector/bitget-wallet \\\n  @near-wallet-selector/my-near-wallet \\\n  @near-wallet-selector/sender \\\n  @near-wallet-selector/nearfi \\\n  @near-wallet-selector/here-wallet \\\n  @near-wallet-selector/math-wallet \\\n  @near-wallet-selector/nightly \\\n  @near-wallet-selector/meteor-wallet \\\n  @near-wallet-selector/narwallets \\\n  @near-wallet-selector/welldone-wallet \\\n  @near-wallet-selector/near-snap \\\n  @near-wallet-selector/ledger \\\n  @near-wallet-selector/wallet-connect \\\n  @near-wallet-selector/coin98-wallet \\\n  @near-wallet-selector/neth \\\n  @near-wallet-selector/xdefi \\\n  @near-wallet-selector/ramper-wallet \\\n  @near-wallet-selector/near-mobile-wallet \\\n  @near-wallet-selector/mintbase-wallet\n```\n\nOptionally, you can install our [`modal-ui`](https://www.npmjs.com/package/@near-wallet-selector/modal-ui) or [`modal-ui-js`](https://www.npmjs.com/package/@near-wallet-selector/modal-ui-js) package for a pre-built interface that wraps the `core` API and presents the supported wallets:\n\n```bash\n# Using Yarn\nyarn add @near-wallet-selector/modal-ui\n\n# Using NPM.\nnpm install @near-wallet-selector/modal-ui\n```\n\nThen in your dApp:\n\n```ts\nimport { setupWalletSelector } from \"@near-wallet-selector/core\";\nimport { setupModal } from \"@near-wallet-selector/modal-ui\";\nimport { setupBitgetWallet } from \"@near-wallet-selector/bitget-wallet\";\nimport { setupMyNearWallet } from \"@near-wallet-selector/my-near-wallet\";\nimport { setupSender } from \"@near-wallet-selector/sender\";\nimport { setupHereWallet } from \"@near-wallet-selector/here-wallet\";\nimport { setupNearSnap } from \"@near-wallet-selector/near-snap\";\nimport { setupMathWallet } from \"@near-wallet-selector/math-wallet\";\nimport { setupNightly } from \"@near-wallet-selector/nightly\";\nimport { setupMeteorWallet } from \"@near-wallet-selector/meteor-wallet\";\nimport { setupNarwallets } from \"@near-wallet-selector/narwallets\";\nimport { setupWelldoneWallet } from \"@near-wallet-selector/welldone-wallet\";\nimport { setupNearSnap } from \"@near-wallet-selector/near-snap\";\nimport { setupLedger } from \"@near-wallet-selector/ledger\";\nimport { setupWalletConnect } from \"@near-wallet-selector/wallet-connect\";\nimport { setupNearFi } from \"@near-wallet-selector/nearfi\";\nimport { setupCoin98Wallet } from \"@near-wallet-selector/coin98-wallet\";\nimport { setupNeth } from \"@near-wallet-selector/neth\";\nimport { setupXDEFI } from \"@near-wallet-selector/xdefi\";\nimport { setupRamperWallet } from \"@near-wallet-selector/ramper-wallet\";\nimport { setupNearMobileWallet } from \"@near-wallet-selector/near-mobile-wallet\"; \nimport { setupMintbaseWallet } from \"@near-wallet-selector/mintbase-wallet\"; \n\nconst selector = await setupWalletSelector({\n  network: \"testnet\",\n  modules: [\n    setupBitgetWallet(),\n    setupMyNearWallet(),\n    setupSender(),\n    setupHereWallet(),\n    setupMathWallet(),\n    setupNightly(),\n    setupMeteorWallet(),\n    setupNearSnap(),\n    setupNarwallets(),\n    setupWelldoneWallet(),\n    setupLedger(),\n    setupNearFi(),\n    setupCoin98Wallet(),\n    setupNeth(),\n    setupXDEFI(),\n    setupWalletConnect({\n      projectId: \"c4f79cc...\",\n      metadata: {\n        name: \"NEAR Wallet Selector\",\n        description: \"Example dApp used by NEAR Wallet Selector\",\n        url: \"https://github.com/near/wallet-selector\",\n        icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n      },\n    }),\n    setupNearMobileWallet(),\n    setupMintbaseWallet({\n          networkId: \"mainnet\",\n          walletUrl: \"https://wallet.mintbase.xyz\",\n          callbackUrl: \"https://www.mywebsite.com\",\n          deprecated: false,\n      }),\n  ],\n});\n\nconst modal = setupModal(selector, {\n  contractId: \"guest-book.testnet\"\n});\n```\n\n## Wallet Package Documentation\n\nEach wallet package contains its own `README` document, please refer inside the [packages folder](https://github.com/near/wallet-selector/tree/main/packages) for extra information.\n\n## Contributing\n\nContributors may find the [`examples`](./examples) directory useful as it provides a quick and consistent way to manually test new changes and/or bug fixes.\n\nMore details around contributing to this project can be found [here](./CONTRIBUTING.md).\n\n## Editor Setup\n\nThis project uses [ESLint](https://eslint.org/) (with [Prettier](https://prettier.io/)) to enforce a consistent coding style. It's important that you configure your editor correctly to avoid issues when you're ready to open a Pull Request.\n\nAlthough this project uses Prettier, it's simply an \"internal\" dependency to our ESLint configuration. This is because we want Prettier to handle code styling while avoiding conflicts with ESLint which specifically focuses on potentially problematic code. As a result, **it's important that you switch off Prettier in your editor and ensure only ESLint is enabled**.\n\n## License\n\nThis repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See [LICENSE-MIT](LICENSE-MIT) and [LICENSE-APACHE](LICENSE-APACHE) for details.\n", "release_dates": ["2024-02-12T10:22:36Z", "2024-02-08T12:09:33Z", "2024-01-23T12:22:52Z", "2024-01-11T10:09:11Z", "2023-12-06T12:10:14Z", "2023-11-27T13:16:41Z", "2023-11-20T11:43:42Z", "2023-11-10T11:42:32Z", "2023-11-07T09:44:35Z", "2023-10-20T09:32:08Z", "2023-10-18T11:18:20Z", "2023-10-11T11:52:08Z", "2023-09-25T12:27:54Z", "2023-09-08T13:55:54Z", "2023-08-23T10:14:54Z", "2023-08-11T13:10:39Z", "2023-08-08T14:31:52Z", "2023-08-03T10:45:48Z", "2023-07-21T15:09:07Z", "2023-06-29T16:18:13Z", "2023-06-14T09:30:05Z", "2023-06-08T15:09:34Z", "2023-06-06T13:43:14Z", "2023-05-18T12:06:19Z", "2023-05-10T12:41:20Z", "2023-04-28T18:54:13Z", "2023-04-26T13:25:04Z", "2023-04-25T17:21:23Z", "2023-04-19T15:43:26Z", "2023-04-06T12:16:39Z"]}, {"name": "wasi-stub", "description": "This tool takes a wasm file, replace all wasi_snapshot_preview1 import to (stub) functions defines in the same module. This is useful when executing wasm in sandbox enviroment where wasi is not available.", "language": "C", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# WASI-STUB\n\nThis tool takes a wasm file, replace all `wasi_snapshot_preview1` import to (stub) functions defines in the same module. This is useful when executing wasm in sandbox enviroment where wasi is not available.\n\n## Build\n\nFirst build binaryen with `cmake . && make -j`. Then:\n```\n./build.sh\n```\n\n## Use\n\n```\n./run.sh file.wasm\n```\n\nThe tool will write file.wasm inplace.", "release_dates": []}, {"name": "wasm", "description": "WebAssembly decoder & disassembler library", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\nwasm\n====\n\nPython module capable of decoding and disassembling WebAssembly modules\nand bytecode, according to the MVP specification of the WASM binary\nformat.\n\nAs there is no official text format defined yet, the text format\nimplemented doesn't correspond to any existing definition and is a\nsimple `mnemonic op1, op2, ...` format. Functions are formatted in a\nway similar to how Google Chrome does in the debug console.\n\n### Installation\n\n```\n# From PyPi\npip install wasm\n\n# From GitHub\npip install git+https://github.com/athre0z/wasm.git\n```\n\n### Examples\n\nParsing a WASM module, printing the types of sections found.\n```python\nfrom wasm import decode_module\n\nwith open('input-samples/hello/hello.wasm', 'rb') as raw:\n    raw = raw.read()\n\nmod_iter = iter(decode_module(raw))\nheader, header_data = next(mod_iter)\n\nfor cur_sec, cur_sec_data in mod_iter:\n    print(cur_sec_data.get_decoder_meta()['types']['payload'])\n```\n\nPossible output:\n```\n<wasm.modtypes.TypeSection object at 0x10dec52e8>\n<wasm.modtypes.ImportSection object at 0x10dec5320>\n<wasm.modtypes.FunctionSection object at 0x10dec5358>\n<wasm.modtypes.GlobalSection object at 0x10dec5400>\n<wasm.modtypes.ExportSection object at 0x10dec5438>\n<wasm.modtypes.ElementSection object at 0x10dec54a8>\n<wasm.modtypes.CodeSection object at 0x10dec54e0>\n<wasm.modtypes.DataSection object at 0x10dec5518>\n```\nParsing specific sections (eg. GlobalSection, ElementSection, DataSection) in WASM module, printing each section's content:\n```python\nfrom wasm import (\n    decode_module,\n    format_instruction,\n    format_lang_type,\n    format_mutability,\n    SEC_DATA,\n    SEC_ELEMENT,\n    SEC_GLOBAL,\n)\n\nwith open('input-samples/hello/hello.wasm', 'rb') as raw:\n     raw = raw.read()\n\nmod_iter = iter(decode_module(raw))\nheader, header_data = next(mod_iter)\n\nfor cur_sec, cur_sec_data in mod_iter:\n    if cur_sec_data.id == SEC_GLOBAL:\n        print(\"GlobalSection:\")\n        for idx, entry in enumerate(cur_sec_data.payload.globals):\n            print(\n                format_mutability(entry.type.mutability),\n                format_lang_type(entry.type.content_type),\n            )\n\n            for cur_insn in entry.init:\n                print(format_instruction(cur_insn))\n\n    if cur_sec_data.id == SEC_ELEMENT:\n        print(\"ElementSection:\")\n        for idx, entry in enumerate(cur_sec_data.payload.entries):\n            print(entry.index, entry.num_elem, entry.elems)\n            for cur_insn in entry.offset:\n                print(format_instruction(cur_insn))\n\n    if cur_sec_data.id == SEC_DATA:\n        print(\"DataSection:\")\n        for idx, entry in enumerate(cur_sec_data.payload.entries):\n            print(entry.index, entry.size, entry.data.tobytes())\n            for cur_insn in entry.offset:\n                print(format_instruction(cur_insn))\n```\nOutput:\n```\nGlobalSection:\nmut i32\nget_global 0\nend\nmut i32\nget_global 1\nend\n...\nmut f32\nf32.const 0x0\nend\nmut f32\nf32.const 0x0\nend\nElementSection:\n0 12576 [856, 856, 856, ..., 888]\ni32.const 0\nend\nDataSection:\n0 16256 b'\\x98&\\x00\\x00\\xfe4\\x00\\x00\\x10\\x04\\x00\\x00\\x00...\\x00N10__cxxabiv121__vmi_class_type_infoE'\nget_global 8\nend\n\n```\n\nManually disassemble WASM bytecode, printing each instruction.\n```python\nfrom wasm import (\n    decode_bytecode,\n    format_instruction,\n    INSN_ENTER_BLOCK,\n    INSN_LEAVE_BLOCK,\n)\n\nraw = bytearray([2, 127, 65, 24, 16, 28, 65, 0, 15, 11])\nindent = 0\nfor cur_insn in decode_bytecode(raw):\n    if cur_insn.op.flags & INSN_LEAVE_BLOCK:\n        indent -= 1\n    print('  ' * indent + format_instruction(cur_insn))\n    if cur_insn.op.flags & INSN_ENTER_BLOCK:\n        indent += 1\n```\n\nOutput:\n```\nblock -1\n  i32.const 24\n  call 28\n  i32.const 0\n  return\nend\n```\n\n### `wasmdump` command-line tool\nThe module also comes with a simple command-line tool called `wasmdump`,\ndumping all module struct in sexy tree format. Optionally, it also\ndisassembles all functions found when invoked with `--disas` (slow).\n\n### Version support\nThe library was successfully tested on Python 2.7, Python 3.7 and\nPyPy 5.4.\n", "release_dates": []}, {"name": "wasm-corpus", "description": "Collection of wasm files used in fuzzing fee estimation", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# wasm-corpus\nCollection of wasm files used in fuzzing fee estimation\n", "release_dates": []}, {"name": "wasm-utils", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# pwasm-utils\n\n[![Build Status](https://travis-ci.org/paritytech/wasm-utils.svg?branch=master)](https://travis-ci.org/paritytech/wasm-utils)\n\nA collection of WASM utilities used in pwasm-ethereum and substrate contract development.\n\nThis repository contains the package `pwasm-utils` which consists of a library crate\nand a collection of cli binaries that make use of this library.\n\n## Installation of cli tools\n```\ncargo install pwasm-utils --features cli\n```\n\nThis will install the following binaries:\n* wasm-build\n* wasm-check\n* wasm-ext\n* wasm-gas\n* wasm-pack\n* wasm-prune\n* wasm-stack-height\n\n## Symbols pruning (wasm-prune)\n\n```\nwasm-prune <input_wasm_binary.wasm> <output_wasm_binary.wasm>\n```\n\nThis will optimize WASM symbols tree to leave only those elements that are used by contract `call` function entry.\n\n## Gas counter (wasm-gas)\n\nFor development puposes, raw WASM contract can be injected with gas counters (the same way as it done by pwasm-ethereum/substrate runtime when running contracts)\n\n```\nwasm-gas <input_wasm_binary.wasm> <output_wasm_binary.wasm>\n```\n\n# License\n\n`wasm-utils` is primarily distributed under the terms of both the MIT\nlicense and the Apache License (Version 2.0), at your choice.\n\nSee LICENSE-APACHE, and LICENSE-MIT for details.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `wasm-utils` by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "wasmer", "description": "\ud83d\ude80 The leading WebAssembly Runtime supporting WASI and Emscripten", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <a href=\"https://wasmer.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img width=\"300\" src=\"https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png\" alt=\"Wasmer logo\">\n  </a>\n\n  <p>\n    <a href=\"https://github.com/wasmerio/wasmer/actions?query=workflow%3Abuild\">\n      <img src=\"https://github.com/wasmerio/wasmer/workflows/build/badge.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://github.com/wasmerio/wasmer/blob/master/LICENSE\">\n      <img src=\"https://img.shields.io/github/license/wasmerio/wasmer.svg\" alt=\"License\">\n    </a>\n    <a href=\"https://docs.wasmer.io\">\n      <img src=\"https://img.shields.io/static/v1?label=Docs&message=docs.wasmer.io&color=blue\" alt=\"Wasmer Docs\">\n    </a>\n    <a href=\"https://slack.wasmer.io\">\n      <img src=\"https://img.shields.io/static/v1?label=Slack&message=join%20us!&color=brighgreen\" alt=\"Slack channel\">\n    </a>\n  </p>\n</div>\n\n<br />\n\nWasmer is a _fast_ and _secure_ [**WebAssembly**](https://webassembly.org) runtime that enables super\n_lightweight containers_ to run anywhere: from *Desktop* to the *Cloud*, *Edge* and *IoT* devices.\n\n> _This document is also available in:\n[\ud83c\udde8\ud83c\uddf3 \u4e2d \u6587 -Chinese](https://github.com/wasmerio/wasmer/blob/master/docs/cn/README.md) \u2022 \n[\ud83c\udde9\ud83c\uddea Deutsch-German](https://github.com/wasmerio/wasmer/blob/master/docs/de/README.md) \u2022 \n[\ud83c\uddea\ud83c\uddf8 Espa\u00f1ol-Spanish](https://github.com/wasmerio/wasmer/blob/master/docs/es/README.md) \u2022 \n[\ud83c\uddeb\ud83c\uddf7 Fran\u00e7ais-French](https://github.com/wasmerio/wasmer/blob/master/docs/fr/README.md) \u2022 \n[\ud83c\uddef\ud83c\uddf5 \u65e5\u672c \u8a9e -Japanese](https://github.com/wasmerio/wasmer/blob/master/docs/ja/README.md) \u2022 \n[\ud83c\uddf0\ud83c\uddf7 \ud55c\uad6d\uc778 -Korean](https://github.com/wasmerio/wasmer/blob/master/docs/ko/README.md)_.\n\n### Features\n\n* Secure by default. No file, network, or environment access, unless explicitly enabled.\n* Supports [WASI](https://github.com/WebAssembly/WASI) and [Emscripten](https://emscripten.org/) out of the box.\n* Fast. Run WebAssembly at near-native speeds.\n* Embeddable in [multiple programming languages](https://github.com/wasmerio/wasmer/#-language-integrations)\n* Compliant with latest WebAssembly Proposals (SIMD, Reference Types, Threads, ...)\n\n### Install\n\nWasmer CLI ships as a single executable with no dependencies.\n\n```sh\ncurl https://get.wasmer.io -sSfL | sh\n```\n\n\n<details>\n  <summary>Other installation options (Powershell, Brew, Cargo, ...)</summary>\n  \n  _Wasmer can be installed from various package managers. Choose the one that fits best for your environment:_\n  \n  * Powershell (Windows)\n    ```powershell\n    iwr https://win.wasmer.io -useb | iex\n    ```\n\n  * <a href=\"https://formulae.brew.sh/formula/wasmer\">Homebrew</a> (macOS, Linux)\n\n    ```sh\n    brew install wasmer\n    ```\n\n  * <a href=\"https://github.com/ScoopInstaller/Main/blob/master/bucket/wasmer.json\">Scoop</a> (Windows)\n\n    ```sh\n    scoop install wasmer\n    ```\n\n  * <a href=\"https://chocolatey.org/packages/wasmer\">Chocolatey</a> (Windows)\n\n    ```sh\n    choco install wasmer\n    ```\n  \n  * <a href=\"https://crates.io/crates/wasmer-cli/\">Cargo</a>\n\n    _Note: All the available\n    features are described in the [`wasmer-cli`\n    crate docs](https://github.com/wasmerio/wasmer/tree/master/lib/cli/README.md)_\n\n    ```sh\n    cargo install wasmer-cli\n    ```\n\n  > Looking for more installation options? See [the `wasmer-install`\n  repository](https://github.com/wasmerio/wasmer-install) to learn\n  more!\n</details>\n\n### Quickstart\n\nYou can start by running\n[QuickJS](https://github.com/bellard/quickjs/), a small and\nembeddable Javascript engine compiled as a WebAssembly module ([`qjs.wasm`](https://registry-cdn.wapm.io/contents/_/quickjs/0.0.3/build/qjs.wasm)):\n\n```bash\n$ wasmer qjs.wasm\nQuickJS - Type \"\\h\" for help\nqjs > const i = 1 + 2;\nqjs > console.log(\"hello \" + i);\nhello 3\n```\n\n#### Here is what you can do next:\n\n- [Use Wasmer from your Rust application](https://docs.wasmer.io/integrations/rust)\n- [Publish a Wasm package on WAPM](https://docs.wasmer.io/ecosystem/wapm/publishing-your-package)\n- [Read more about Wasmer](https://medium.com/wasmer/)\n\n## \ud83d\udce6 Language Integrations\n\nThe Wasmer runtime can be used as a library **embedded in different\nlanguages**, so you can use WebAssembly _anywhere_.\n\n| | Language | Package | Documentation |\n|-|-|-|-|\n| ![Rust logo] | [**Rust**][Rust integration] | [`wasmer` Rust crate] | [Learn][rust docs]\n| ![C logo] | [**C/C++**][C integration] | [`wasmer.h` header] | [Learn][c docs] |\n| ![C# logo] | [**C#**][C# integration] | [`WasmerSharp` NuGet package] | [Learn][c# docs] |\n| ![D logo] | [**D**][D integration] | [`wasmer` Dub package] | [Learn][d docs] |\n| ![Python logo] | [**Python**][Python integration] | [`wasmer` PyPI package] | [Learn][python docs] |\n| ![JS logo] | [**Javascript**][JS integration] | [`@wasmerio` NPM packages] | [Learn][js docs] |\n| ![Go logo] | [**Go**][Go integration] | [`wasmer` Go package] | [Learn][go docs] |\n| ![PHP logo] | [**PHP**][PHP integration] | [`wasm` PECL package] | [Learn][php docs] |\n| ![Ruby logo] | [**Ruby**][Ruby integration] | [`wasmer` Ruby Gem] | [Learn][ruby docs] |\n| ![Java logo] | [**Java**][Java integration] | [`wasmer/wasmer-jni` Bintray package] | [Learn][java docs] |\n| ![Elixir logo] | [**Elixir**][Elixir integration] | [`wasmex` hex package] | [Learn][elixir docs] |\n| ![R logo] | [**R**][R integration] | *no published package* | [Learn][r docs] |\n| ![Postgres logo] | [**Postgres**][Postgres integration] | *no published package* | [Learn][postgres docs] |\n| ![Swift logo] | [**Swift**][Swift integration] | *no published package* | |\n| ![Zig logo] | [**Zig**][Zig integration] | *no published package* | |\n| ![Dart logo] | [**Dart**][Dart integration] | [`wasm` pub package] | |\n| ![Crystal logo] | [**Crystal**][Crystal integration] | *no published package* | [Learn][crystal docs] |\n| ![Lisp logo] | [**Lisp**][Lisp integration] | *under heavy development - no published package* | |\n\n[\ud83d\udc4b&nbsp;&nbsp;Missing a language?](https://github.com/wasmerio/wasmer/issues/new?assignees=&labels=%F0%9F%8E%89+enhancement&template=---feature-request.md&title=)\n\n[rust logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/rust.svg\n[rust integration]: https://github.com/wasmerio/wasmer/tree/master/lib/api\n[`wasmer` rust crate]: https://crates.io/crates/wasmer/\n[rust docs]: https://docs.rs/wasmer/\n\n[c logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/c.svg\n[c integration]: https://github.com/wasmerio/wasmer/tree/master/lib/c-api\n[`wasmer.h` header]: https://github.com/wasmerio/wasmer/blob/master/lib/c-api/wasmer.h\n[c docs]: https://docs.rs/wasmer-c-api/*/wasmer_c_api/wasm_c_api/index.html\n\n[c# logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/csharp.svg\n[c# integration]: https://github.com/migueldeicaza/WasmerSharp\n[`wasmersharp` nuget package]: https://www.nuget.org/packages/WasmerSharp/\n[c# docs]: https://migueldeicaza.github.io/WasmerSharp/\n\n[d logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/d.svg\n[d integration]: https://github.com/chances/wasmer-d\n[`wasmer` Dub package]: https://code.dlang.org/packages/wasmer\n[d docs]: https://chances.github.io/wasmer-d\n\n[python logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/python.svg\n[python integration]: https://github.com/wasmerio/wasmer-python\n[`wasmer` pypi package]: https://pypi.org/project/wasmer/\n[python docs]: https://wasmerio.github.io/wasmer-python/api/wasmer/\n\n[go logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/go.svg\n[go integration]: https://github.com/wasmerio/wasmer-go\n[`wasmer` go package]: https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer\n[go docs]: https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer?tab=doc\n\n[php logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/php.svg\n[php integration]: https://github.com/wasmerio/wasmer-php\n[`wasm` pecl package]: https://pecl.php.net/package/wasm\n[php docs]: https://wasmerio.github.io/wasmer-php/\n\n[js logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/js.svg\n[js integration]: https://github.com/wasmerio/wasmer-js\n[`@wasmerio` npm packages]: https://www.npmjs.com/org/wasmer\n[js docs]: https://docs.wasmer.io/integrations/js/reference-api\n\n[ruby logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/ruby.svg\n[ruby integration]: https://github.com/wasmerio/wasmer-ruby\n[`wasmer` ruby gem]: https://rubygems.org/gems/wasmer\n[ruby docs]: https://wasmerio.github.io/wasmer-ruby/wasmer_ruby/index.html\n\n[java logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/java.svg\n[java integration]: https://github.com/wasmerio/wasmer-java\n[`wasmer/wasmer-jni` bintray package]: https://bintray.com/wasmer/wasmer-jni/wasmer-jni\n[java docs]: https://github.com/wasmerio/wasmer-java/#api-of-the-wasmer-library\n\n[elixir logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/elixir.svg\n[elixir integration]: https://github.com/tessi/wasmex\n[elixir docs]: https://hexdocs.pm/wasmex/api-reference.html\n[`wasmex` hex package]: https://hex.pm/packages/wasmex\n\n[r logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/r.svg\n[r integration]: https://github.com/dirkschumacher/wasmr\n[r docs]: https://github.com/dirkschumacher/wasmr#example\n\n[postgres logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/postgres.svg\n[postgres integration]: https://github.com/wasmerio/wasmer-postgres\n[postgres docs]: https://github.com/wasmerio/wasmer-postgres#usage--documentation\n\n[swift logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/swift.svg\n[swift integration]: https://github.com/AlwaysRightInstitute/SwiftyWasmer\n\n[zig logo]: https://raw.githubusercontent.com/ziglang/logo/master/zig-favicon.png\n[zig integration]: https://github.com/zigwasm/wasmer-zig\n\n[dart logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/dart.svg\n[dart integration]: https://github.com/dart-lang/wasm\n[`wasm` pub package]: https://pub.dev/packages/wasm\n\n[lisp logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/lisp.svg\n[lisp integration]: https://github.com/helmutkian/cl-wasm-runtime\n\n[crystal logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/crystal.svg\n[crystal integration]: https://github.com/naqvis/wasmer-crystal\n[crystal docs]: https://naqvis.github.io/wasmer-crystal/\n\n## Contribute\n\nWe appreciate your help! \ud83d\udc9c\n\nCheck our docs on how to [build Wasmer from\nsource](https://docs.wasmer.io/ecosystem/wasmer/building-from-source) or [test your changes](https://docs.wasmer.io/ecosystem/wasmer/building-from-source/testing).\n\n## Community\n\nWasmer has an amazing community of developers and contributors. Welcome, please join us! \ud83d\udc4b\n\n- [Wasmer Community Slack](https://slack.wasmer.io/)\n- [Wasmer on Twitter](https://twitter.com/wasmerio)\n- [Wasmer on Facebook](https://www.facebook.com/wasmerio)\n- [Email](mailto:hello@wasmer.io)\n", "release_dates": []}, {"name": "wasmtime", "description": "Standalone JIT-style runtime for WebAssembly, using Cranelift", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<div align=\"center\">\n  <h1><code>wasmtime</code></h1>\n\n  <p>\n    <strong>A standalone runtime for\n    <a href=\"https://webassembly.org/\">WebAssembly</a></strong>\n  </p>\n\n  <strong>A <a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a> project</strong>\n\n  <p>\n    <a href=\"https://github.com/bytecodealliance/wasmtime/actions?query=workflow%3ACI\"><img src=\"https://github.com/bytecodealliance/wasmtime/workflows/CI/badge.svg\" alt=\"build status\" /></a>\n    <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\"><img src=\"https://img.shields.io/badge/zulip-join_chat-brightgreen.svg\" alt=\"zulip chat\" /></a>\n    <img src=\"https://img.shields.io/badge/rustc-stable+-green.svg\" alt=\"supported rustc stable\" />\n    <a href=\"https://docs.rs/wasmtime\"><img src=\"https://docs.rs/wasmtime/badge.svg\" alt=\"Documentation Status\" /></a>\n  </p>\n\n  <h3>\n    <a href=\"https://bytecodealliance.github.io/wasmtime/\">Guide</a>\n    <span> | </span>\n    <a href=\"https://bytecodealliance.github.io/wasmtime/contributing.html\">Contributing</a>\n    <span> | </span>\n    <a href=\"https://wasmtime.dev/\">Website</a>\n    <span> | </span>\n    <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">Chat</a>\n  </h3>\n</div>\n\n## Installation\n\nThe Wasmtime CLI can be installed on Linux and macOS (locally) with a small install\nscript:\n\n```sh\ncurl https://wasmtime.dev/install.sh -sSf | bash\n```\n\nWindows or otherwise interested users can download installers and\nbinaries directly from the [GitHub\nReleases](https://github.com/bytecodealliance/wasmtime/releases) page.\n\n## Example\n\nIf you've got the [Rust compiler\ninstalled](https://www.rust-lang.org/tools/install) then you can take some Rust\nsource code:\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nand compile/run it with:\n\n```sh\n$ rustup target add wasm32-wasi\n$ rustc hello.rs --target wasm32-wasi\n$ wasmtime hello.wasm\nHello, world!\n```\n\n(Note: make sure you installed Rust using the `rustup` method in the official\ninstructions above, and do not have a copy of the Rust toolchain installed on\nyour system in some other way as well (e.g. the system package manager). Otherwise, the `rustup target add...`\ncommand may not install the target for the correct copy of Rust.)\n\n## Features\n\n* **Fast**. Wasmtime is built on the optimizing [Cranelift] code generator to\n  quickly generate high-quality machine code either at runtime or\n  ahead-of-time. Wasmtime is optimized for efficient instantiation, low-overhead\n  calls between the embedder and wasm, and scalability of concurrent instances.\n\n* **[Secure]**. Wasmtime's development is strongly focused on correctness and\n  security. Building on top of Rust's runtime safety guarantees, each Wasmtime\n  feature goes through careful review and consideration via an [RFC\n  process]. Once features are designed and implemented, they undergo 24/7\n  fuzzing donated by [Google's OSS Fuzz]. As features stabilize they become part\n  of a [release][release policy], and when things go wrong we have a\n  well-defined [security policy] in place to quickly mitigate and patch any\n  issues. We follow best practices for defense-in-depth and integrate\n  protections and mitigations for issues like Spectre. Finally, we're working to\n  push the state-of-the-art by collaborating with academic researchers to\n  formally verify critical parts of Wasmtime and Cranelift.\n\n* **[Configurable]**. Wasmtime uses sensible defaults, but can also be\n  configured to provide more fine-grained control over things like CPU and\n  memory consumption. Whether you want to run Wasmtime in a tiny environment or\n  on massive servers with many concurrent instances, we've got you covered.\n\n* **[WASI]**. Wasmtime supports a rich set of APIs for interacting with the host\n  environment through the [WASI standard](https://wasi.dev).\n\n* **[Standards Compliant]**. Wasmtime passes the [official WebAssembly test\n  suite](https://github.com/WebAssembly/testsuite), implements the [official C\n  API of wasm](https://github.com/WebAssembly/wasm-c-api), and implements\n  [future proposals to WebAssembly](https://github.com/WebAssembly/proposals) as\n  well. Wasmtime developers are intimately engaged with the WebAssembly\n  standards process all along the way too.\n\n[Wasmtime]: https://github.com/bytecodealliance/wasmtime\n[Cranelift]: https://cranelift.dev/\n[Google's OSS Fuzz]: https://google.github.io/oss-fuzz/\n[security policy]: https://bytecodealliance.org/security\n[RFC process]: https://github.com/bytecodealliance/rfcs\n[release policy]: https://docs.wasmtime.dev/stability-release.html\n[Secure]: https://docs.wasmtime.dev/security.html\n[Configurable]: https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html\n[WASI]: https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/\n[Standards Compliant]: https://docs.wasmtime.dev/stability-wasm-proposals-support.html\n\n## Language Support\n\nYou can use Wasmtime from a variety of different languages through embeddings of\nthe implementation.\n\nLanguages supported by the Bytecode Alliance:\n\n* **[Rust]** - the [`wasmtime` crate]\n* **[C]** - the [`wasm.h`, `wasi.h`, and `wasmtime.h` headers][c-headers], [CMake](crates/c-api/CMakeLists.txt) or [`wasmtime` Conan package]\n* **C++** - the [`wasmtime-cpp` repository][wasmtime-cpp] or use [`wasmtime-cpp` Conan package]\n* **[Python]** - the [`wasmtime` PyPI package]\n* **[.NET]** - the [`Wasmtime` NuGet package]\n* **[Go]** - the [`wasmtime-go` repository]\n* **[Ruby]** - the [`wasmtime` gem]\n\nLanguages supported by the community:\n\n* **[Elixir]** - the [`wasmex` hex package]\n* **Perl** - the [`Wasm` Perl package's `Wasm::Wasmtime`]\n\n[Rust]: https://bytecodealliance.github.io/wasmtime/lang-rust.html\n[C]: https://bytecodealliance.github.io/wasmtime/examples-c-embed.html\n[`wasmtime` crate]: https://crates.io/crates/wasmtime\n[c-headers]: https://bytecodealliance.github.io/wasmtime/c-api/\n[Python]: https://bytecodealliance.github.io/wasmtime/lang-python.html\n[`wasmtime` PyPI package]: https://pypi.org/project/wasmtime/\n[.NET]: https://bytecodealliance.github.io/wasmtime/lang-dotnet.html\n[`Wasmtime` NuGet package]: https://www.nuget.org/packages/Wasmtime\n[Go]: https://bytecodealliance.github.io/wasmtime/lang-go.html\n[`wasmtime-go` repository]: https://pkg.go.dev/github.com/bytecodealliance/wasmtime-go\n[wasmtime-cpp]: https://github.com/bytecodealliance/wasmtime-cpp\n[`wasmtime` Conan package]: https://conan.io/center/wasmtime\n[`wasmtime-cpp` Conan package]: https://conan.io/center/wasmtime-cpp\n[Ruby]: https://bytecodealliance.github.io/wasmtime/lang-ruby.html\n[`wasmtime` gem]: https://rubygems.org/gems/wasmtime\n[Elixir]: https://docs.wasmtime.dev/lang-elixir.html\n[`wasmex` hex package]: https://hex.pm/packages/wasmex\n[`Wasm` Perl package's `Wasm::Wasmtime`]: https://metacpan.org/pod/Wasm::Wasmtime\n\n## Documentation\n\n[\ud83d\udcda Read the Wasmtime guide here! \ud83d\udcda][guide]\n\nThe [wasmtime guide][guide] is the best starting point to learn about what\nWasmtime can do for you or help answer your questions about Wasmtime. If you're\ncurious in contributing to Wasmtime, [it can also help you do\nthat][contributing]!\n\n[contributing]: https://bytecodealliance.github.io/wasmtime/contributing.html\n[guide]: https://bytecodealliance.github.io/wasmtime\n\n---\n\nIt's Wasmtime.\n", "release_dates": []}, {"name": "wasm_sizer", "description": null, "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "Finds reasons of bloat in the WebAssembly binaries.\n\n### Prerequisites\n\nInstall dependencies:\n\n    pip3 install octopus numpy matplotlib itanium-demangler\n    brew install graphviz\n\nOn Linux machines with evince PDF viewer use this command to allow zooming in.\n\n    gsettings set org.gnome.Evince page-cache-size 1000\n\n### Running\n\nRun `sizer.py`, it could either show what instructions are most popular in largest functions,\nor show the control flow graph, marking few largest functions per `--count` parameter in red.\n", "release_dates": []}, {"name": "wiki", "description": "NEAR Wiki", "language": "JavaScript", "license": null, "readme": "<br />\n<br />\n\n<p align=\"center\">\n<img src=\"website/static/img/near-img.png\" width=\"600\">\n</p>\n\n<br />\n<br />\n\n## NEAR Protocol - scalable and usable blockchain\n\n[![Discord](https://img.shields.io/discord/490367152054992913.svg)](http://near.chat)\n[![CI](https://github.com/near/wiki/actions/workflows/build.yml/badge.svg)](https://github.com/near/wiki/actions/workflows/build.yml)\n\n* \u2696\ufe0f NEAR Protocol is a new smart-contract platform that delivers scalability and usability.\n* \ud83d\udee0 Through sharding, it will linearly scale with the number of validation nodes on the network.\n* \ud83d\udddd Leveraging WebAssembly (via Rust and AssemblyScript), more sane contract management, ephemeral accounts and many other advancements, NEAR\nfinally makes using a blockchain protocol easy for both developers and consumers.\n\n## Quick start\n\nCheck out the following links\n\n- Deployed, live Wiki: https://wiki.near.org\n- Example applications: https://near.dev\n- Community chat: https://near.chat\n\n## Contributing\n\nNEAR uses [Docusaurus](https://docusaurus.io) for documentation.  Please refer to their documentation for details on major structural contributions to the documentation.\n\nFor simple content changes you have 2 options\n\n- [Submit an issue](https://github.com/near/wiki/issues)\n- [Submit a pull request](https://github.com/near/wiki/pulls) *(we prefer PRs of course)*\n\n### The instant PR\n\nThis is the fastest way to submit content changes directly from the page where you notice a mistake.\n\n1. Open any page in the docs on https://wiki.near.org\n2. Click the `[ Edit ]` button at the top right hand side of _every_ content page\n3. Make your edits to the document that opens in GitHub by clicking the \u270e (pencil) icon\n4. Submit a PR with your changes and comments for context\n\n### The typical PR\n\nThis is the standard fork-branch-commit workflow for submitting pull requests to open source repositories\n\n1. Fork this repo to your own GitHub account (or just clone it directly if you are currently a member of NEAR)\n\n2. Open your editor to the _top level repo folder_ to view the directory structure as seen below\n\n3. Move into the `/website` folder where you will run the following commands:\n\n   - Make sure all the dependencies for the website are installed:\n\n     ```sh\n     # Install dependencies\n     yarn\n     ```\n\n   - Run the local docs development server\n\n      ```sh\n      # Start the site\n      yarn start\n      ```\n\n      _Expected Output_\n\n      ```sh\n      # Website with live reload is started\n      Docusaurus server started on port 3000\n      ```\n\n      The website for docs will open your browser locally to port `3000` \n\n4. Make changes to the docs\n\n5. Observe those changes reflected in the local docs\n\n6. Submit a pull request with your changes\n", "release_dates": []}, {"name": "zkevm-rom", "description": "This repo contains the zkasm source code of the zkEVM", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# zkevm-rom\nThis repository contains the zkasm source code of the polygon-hermez zkevm\n\n## Usage\n````\nnpm i\nnpm run build\n````\nThe resulting `json` file will be created in the `./build` directory\n\n### Advanced options\n- `-i ${input zkasm file}`: specify input source `zkasm` path\n  - default value: `main/main.zkasm`\n- `-o ${destination rom file}`: specify output path for the resulting `json`\n  - default value: `build/rom.json`\n- `-s ${steps}`: specify steps as $2^{steps}$\n  - default value: current steps in `constants.zkasm`\n\nExample:\n```\nnpm run build -- -i ${path} -o ${path} -s ${steps}\n```\n\n", "release_dates": []}]