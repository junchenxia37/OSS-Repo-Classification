[{"name": ".allstar", "description": null, "language": null, "license": null, "readme": "Default Allstar configuration that points to [google/allstar-config](https://github.com/google/allstar-config).\n", "release_dates": []}, {"name": ".github", "description": null, "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "appengine", "description": "Go App Engine packages", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Go App Engine packages\n\n[![CI Status](https://github.com/golang/appengine/actions/workflows/ci.yml/badge.svg)](https://github.com/golang/appengine/actions/workflows/ci.yml)\n\nThis repository supports the Go runtime on *App Engine standard*.\nIt provides APIs for interacting with App Engine services.\nIts canonical import path is `google.golang.org/appengine`.\n\nSee https://cloud.google.com/appengine/docs/go/\nfor more information.\n\nFile issue reports and feature requests on the [GitHub's issue\ntracker](https://github.com/golang/appengine/issues).\n\n## Upgrading an App Engine app to the flexible environment\n\nThis package does not work on *App Engine flexible*.\n\nThere are many differences between the App Engine standard environment and\nthe flexible environment.\n\nSee the [documentation on upgrading to the flexible environment](https://cloud.google.com/appengine/docs/flexible/go/upgrading).\n\n## Directory structure\n\nThe top level directory of this repository is the `appengine` package. It\ncontains the\nbasic APIs (e.g. `appengine.NewContext`) that apply across APIs. Specific API\npackages are in subdirectories (e.g. `datastore`).\n\nThere is an `internal` subdirectory that contains service protocol buffers,\nplus packages required for connectivity to make API calls. App Engine apps\nshould not directly import any package under `internal`.\n\n## Updating from legacy (`import \"appengine\"`) packages\n\nIf you're currently using the bare `appengine` packages\n(that is, not these ones, imported via `google.golang.org/appengine`),\nthen you can use the `aefix` tool to help automate an upgrade to these packages.\n\nRun `go get google.golang.org/appengine/cmd/aefix` to install it.\n\n### 1. Update import paths\n\nThe import paths for App Engine packages are now fully qualified, based at `google.golang.org/appengine`.\nYou will need to update your code to use import paths starting with that; for instance,\ncode importing `appengine/datastore` will now need to import `google.golang.org/appengine/datastore`.\n\n### 2. Update code using deprecated, removed or modified APIs\n\nMost App Engine services are available with exactly the same API.\nA few APIs were cleaned up, and there are some differences:\n\n* `appengine.Context` has been replaced with the `Context` type from `context`.\n* Logging methods that were on `appengine.Context` are now functions in `google.golang.org/appengine/log`.\n* `appengine.Timeout` has been removed. Use `context.WithTimeout` instead.\n* `appengine.Datacenter` now takes a `context.Context` argument.\n* `datastore.PropertyLoadSaver` has been simplified to use slices in place of channels.\n* `delay.Call` now returns an error.\n* `search.FieldLoadSaver` now handles document metadata.\n* `urlfetch.Transport` no longer has a Deadline field; set a deadline on the\n  `context.Context` instead.\n* `aetest` no longer declares its own Context type, and uses the standard one instead.\n* `taskqueue.QueueStats` no longer takes a maxTasks argument. That argument has been\n  deprecated and unused for a long time.\n* `appengine.BackendHostname` and `appengine.BackendInstance` were for the deprecated backends feature.\n  Use `appengine.ModuleHostname`and `appengine.ModuleName` instead.\n* Most of `appengine/file` and parts of `appengine/blobstore` are deprecated.\n  Use [Google Cloud Storage](https://godoc.org/cloud.google.com/go/storage) if the\n  feature you require is not present in the new\n  [blobstore package](https://google.golang.org/appengine/blobstore).\n* `appengine/socket` is not required on App Engine flexible environment / Managed VMs.\n  Use the standard `net` package instead.\n\n## Key Encode/Decode compatibility to help with datastore library migrations\n\nKey compatibility updates have been added to help customers transition from google.golang.org/appengine/datastore to cloud.google.com/go/datastore.\nThe `EnableKeyConversion` enables automatic conversion from a key encoded with cloud.google.com/go/datastore to google.golang.org/appengine/datastore key type.\n\n### Enabling key conversion\n\nEnable key conversion by calling `EnableKeyConversion(ctx)` in the `/_ah/start` handler for basic and manual scaling or any handler in automatic scaling.\n\n#### 1. Basic or manual scaling\n\nThis start handler will enable key conversion for all handlers in the service.\n\n```\nhttp.HandleFunc(\"/_ah/start\", func(w http.ResponseWriter, r *http.Request) {\n    datastore.EnableKeyConversion(appengine.NewContext(r))\n})\n```\n\n#### 2. Automatic scaling\n\n`/_ah/start` is not supported for automatic scaling and `/_ah/warmup` is not guaranteed to run, so you must call `datastore.EnableKeyConversion(appengine.NewContext(r))`\nbefore you use code that needs key conversion.\n\nYou may want to add this to each of your handlers, or introduce middleware where it's called.\n`EnableKeyConversion` is safe for concurrent use. Any call to it after the first is ignored.", "release_dates": ["2023-08-31T16:45:49Z", "2023-09-05T20:58:37Z", "2023-07-11T20:44:31Z", "2023-04-13T19:09:08Z", "2022-08-05T22:21:49Z", "2021-11-10T00:22:22Z", "2021-06-04T00:31:40Z", "2021-06-03T22:26:54Z", "2020-10-13T18:41:03Z", "2020-04-22T17:38:22Z", "2019-10-07T22:35:21Z", "2019-09-26T22:02:18Z", "2019-09-20T21:39:54Z", "2019-08-28T20:49:45Z", "2019-06-06T23:49:54Z", "2019-05-14T17:35:15Z", "2019-03-20T22:13:07Z", "2018-12-20T17:45:51Z", "2018-11-01T14:35:02Z"]}, {"name": "arch", "description": "[mirror] architecture code", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# arch\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/arch.svg)](https://pkg.go.dev/golang.org/x/arch)\n\nThis repository holds machine architecture information used by the Go toolchain.\nThe parts needed in the main Go repository are copied in.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the arch repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/arch:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "benchmarks", "description": "Benchmarks for the perf dashboard", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "This subrepository holds macro-benchmarks used for Go performance\ndevelopment and monitoring.\n\nEach benchmark is compiled into a separate binary. To build and\ninstall them all in the current directory, execute:\n\n\t$ GOBIN=$PWD go get golang.org/x/benchmarks/...\n\nTo run a benchmark, simply execute its binary.\n\nEach binary has a number of flags to control benchmark duration, etc.\nRun with '-help' to get the full list of flags.\n\nWhen the benchmarking finishes, the binary prints results in the\nstandard Go benchmark format [1]:\n\n\t$ garbage\n\tBenchmarkGarbage/benchmem-MB=64-4     2000\t   6443223 ns/op\t   6008832 GC-bytes-from-system\t    230521 STW-ns/GC\t     15329 STW-ns/op\t   2780501 allocated-bytes/op\t     68636 allocs/op\t 119041368 bytes-from-system\t 104202240 heap-bytes-from-system\t   8109400 other-bytes-from-system\t 112427008 peak-RSS-bytes\t 121511936 peak-VM-bytes\t    720896 stack-bytes-from-system\t  25194000 user+sys-ns/op\n\nThis format can be processed by tools like benchstat\n(https://golang.org/x/perf/cmd/benchstat) and benchplot\n(https://godoc.org/github.com/aclements/go-misc/benchplot).\n\nRequired extra tools:\n  For Linux, you need \"perf\". On Debian/Ubuntu, you can install\n  package \"perf-tools-common\" to get it. Run \"perf\" once with no\n  arguments to check if it requires additional packages to be installed.\n\nTo submit changes to this repository, see http://golang.org/doc/contribute.html.\n\n[1] https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md\n", "release_dates": []}, {"name": "blog", "description": "[mirror] Go Blog (obsolete)", "language": null, "license": null, "readme": "# Go Blog (obsolete)\n\nThis repository formerly held the Go Blog server code and content.\n\nThat material has since moved to [golang.org/x/website](https://golang.org/x/website).\n", "release_dates": []}, {"name": "build", "description": "[mirror] Go's continuous build and release infrastructure (no stability promises)", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Build Tools\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/build.svg)](https://pkg.go.dev/golang.org/x/build)\n\nThis repository holds the source for various packages and tools that support\nGo's build system and the development of the Go programming language.\n\n**Warning:** Packages here are internal to Go's build system and its needs.\nSome may one day be promoted to another `golang.org/x` repository,\nor they may be modified arbitrarily or even disappear altogether.\nIn short, code in this repository is not subject to the Go 1 compatibility\npromise nor the [Release Policy](https://go.dev/doc/devel/release#policy).\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To contribute, see\nhttps://golang.org/doc/contribute.html.\n\nThe main issue tracker for the blog is located at\nhttps://github.com/golang/go/issues. Prefix your issue with\n\"`x/build/DIR: `\" in the subject line.\n\n## Overview\n\nThe main components of the Go build system are:\n\n* The **coordinator**, in\n  [cmd/coordinator/](https://dev.golang.org/dir/build/cmd/coordinator/),\n  serves https://farmer.golang.org/ and https://build.golang.org/.\n  It runs on GKE and coordinates the whole build system. It finds work\n  to do (both pre-submit \"TryBot\" work, and post-submit work) and executes\n  builds, allocating machines to run the builds. It is the owner of all machines.\n  It holds the state for which builds passed or failed, and the build logs.\n\n* The Go package in [buildenv/](https://dev.golang.org/dir/build/buildenv/)\n  contains constants for where the dashboard and coordinator run, for prod,\n  staging, and local development.\n\n* The **buildlet**, in\n  [cmd/buildlet/](https://dev.golang.org/dir/build/cmd/buildlet/), is the\n  HTTP server that runs on each worker machine to execute builds on the\n  coordinator's behalf. This runs on every possible GOOS/GOARCH value. The\n  buildlet binaries are stored on Google Cloud Storage and fetched\n  per-build, so we can update the buildlet binary independently of the\n  underlying machine images. The buildlet is the most insecure server\n  possible: it has HTTP handlers to read & write arbitrary content to disk,\n  and to execute any file on disk. It also has an SSH tunnel handler. The\n  buildlet must never be exposed to the Internet. The coordinator provisions\n  buildlets in one of three ways:\n\n  1. by creating VMs on Google Compute Engine (GCE) with custom images\n  configured to fetch & run the buildlet on boot, listening on port 80 in a\n  private network.\n\n  2. by running Linux containers (on either Google Kubernetes Engine\n  or GCE with the Container-Optimized OS image), with the container\n  images configured to fetch & run the buildlet on start, also\n  listening on port 80 in a private network.\n\n  3. by taking buildlets out of a pool of connected, dedicated machines. The\n  buildlet can run in either *listen mode* (as on GCE and GKE) or in\n  *reverse mode*. In reverse mode, the buildlet connects out to\n  https://farmer.golang.org/ and registers itself with the coordinator. The\n  TCP connection is then logically reversed (using\n  [revdial](https://dev.golang.org/dir/build/revdial/) and when the\n  coordinator needs to do a build, it makes HTTP requests to the coordinator\n  over the already-open TCP connection.\n\n  These three pools can be viewed at the coordinator's\n  https://farmer.golang.org/#pools.\n\n\n* The [env/](https://dev.golang.org/dir/build/env/) directory describes\n  build environments. It contains scripts to create VM images, Dockerfiles\n  to create Kubernetes containers, and instructions and tools for dedicated\n  machines.\n\n\n* **maintner** in [maintner/](https://dev.golang.org/dir/build/maintner) is\n  a library for slurping all of Go's GitHub and Gerrit state into memory.\n  The daemon **maintnerd** in\n  [maintner/maintnerd/](https://dev.golang.org/dir/build/maintner/maintnerd)\n  runs on GKE and serves https://maintner.golang.org/. The daemon watches\n  GitHub and Gerrit and appends to a mutation log whenever it sees new\n  activity. The logs are stored on GCS and served to clients.\n\n\n* The [godata package](https://godoc.org/golang.org/x/build/maintner/godata)\n  in [maintner/godata/](https://dev.golang.org/dir/build/maintner/godata)\n  provides a trivial API to let anybody write programs against\n  Go's maintner corpus (all of our GitHub and Gerrit history), live up\n  to the second. It takes a few seconds to load into memory and a few hundred\n  MB of RAM after it downloads the mutation log from the network.\n\n\n* **pubsubhelper** in\n  [cmd/pubsubhelper/](https://dev.golang.org/dir/build/cmd/pubsubhelper/) is\n  a dependency of maintnerd. It runs on GKE, is available at\n  https://pubsubhelper.golang.org/, and runs an HTTP server to receive\n  Webhook updates from GitHub on new activity and an SMTP server to receive\n  new activity emails from Gerrit. It then is a pubsub system for maintnerd\n  to subscribe to.\n\n\n* The **gitmirror** server in\n  [cmd/gitmirror/](https://dev.golang.org/dir/build/cmd/gitmirror) mirrors\n  Gerrit to GitHub, and also serves a mirror of the Gerrit code to the\n  coordinator for builds, so we don't overwhelm Gerrit and blow our quota.\n\n\n* The Go **gopherbot** bot logic runs on GKE. The code is in\n  [cmd/gopherbot](https://dev.golang.org/dir/build/cmd/gopherbot). It\n  depends on maintner via the godata package.\n\n\n* The **developer dashboard** at https://dev.golang.org/ runs on GKE.\n  Its code is in [devapp/](https://dev.golang.org/dir/build/devapp/).\n  It also depends on maintner via the godata package.\n\n\n* **cmd/retrybuilds**: a Go client program to delete build results from the\n    dashboard\n\n\n* The **perfdata** server, in\n  [perfdata/appengine](https://dev.golang.org/dir/build/perfdata/appengine)\n  serves https://perfdata.golang.org/. It runs on App Engine and\n  serves the benchmark result storage system.\n\n\n* The **perf** server, in\n  [perf/appengine](https://dev.golang.org/dir/build/perf/appengine)\n  serves https://perf.golang.org/. It runs on App Engine and serves\n  the benchmark result analysis system. See [its\n  README](perf/README.md) for how to start a local testing instance.\n\n\n### Adding a Go Builder\n\nIf you wish to run a Go builder, please email\n[golang-dev@googlegroups.com](mailto:golang-dev@googlegroups.com) first. There\nis documentation at https://golang.org/wiki/DashboardBuilders, but depending\non the type of builder, we may want to run it ourselves, after you prepare an\nenvironment description (resulting in a VM image) of it. See the env directory.\n\n", "release_dates": []}, {"name": "crypto", "description": "[mirror] Go supplementary cryptography libraries", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Cryptography\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/crypto.svg)](https://pkg.go.dev/golang.org/x/crypto)\n\nThis repository holds supplementary Go cryptography libraries.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/crypto/...`. You\ncan also manually git clone the repository to `$GOPATH/src/golang.org/x/crypto`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the crypto repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/crypto:\" in the\nsubject line, so it is easy to find.\n\nNote that contributions to the cryptography package receive additional scrutiny\ndue to their sensitive nature. Patches may take longer than normal to receive\nfeedback.\n", "release_dates": []}, {"name": "cwg", "description": "Community outreach Working Group", "language": null, "license": null, "readme": "# cwg\nCommunity outreach Working Group\n", "release_dates": []}, {"name": "debug", "description": "[mirror] debugging tools", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Debug\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/debug.svg)](https://pkg.go.dev/golang.org/x/debug)\n\nThis repository holds utilities and libraries for debugging Go programs.\n\n**WARNING!**\nPlease expect breaking changes and unstable APIs.\nMost of them are currently are at an early, *experimental* stage.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the debug repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/debug:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "dep", "description": "Go dependency management tool experiment (deprecated)", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "<p align=\"center\"><img src=\"docs/assets/DigbyShadows.png\" width=\"360\"></p>\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/golang/dep\"><img src=\"https://travis-ci.org/golang/dep.svg?branch=master\" alt=\"Build Status\"></img></a>\n  <a href=\"https://ci.appveyor.com/project/golang/dep\"><img src=\"https://ci.appveyor.com/api/projects/status/github/golang/dep?svg=true&branch=master&passingText=Windows%20-%20OK&failingText=Windows%20-%20failed&pendingText=Windows%20-%20pending\" alt=\"Windows Build Status\"></a>\n  <a href=\"https://goreportcard.com/report/github.com/golang/dep\"><img src=\"https://goreportcard.com/badge/github.com/golang/dep\" /></a>\n</p>\n\n## Dep\n\n`dep` is a dependency management tool for Go. It requires Go 1.9 or newer to compile.\n\n**NOTE:** Dep was an official experiment to implement a package manager for Go.\nAs of 2020, Dep is deprecated and archived in favor of Go modules, which have\nhad official support since Go 1.11. For more details, see https://golang.org/ref/mod.\n\nFor guides and reference materials about `dep`, see [the documentation](https://golang.github.io/dep).\n\n## Installation\n\nYou should use an officially released version. Release binaries are available on\nthe [releases](https://github.com/golang/dep/releases) page.\n\nOn MacOS you can install or upgrade to the latest released version with Homebrew:\n\n```sh\n$ brew install dep\n$ brew upgrade dep\n```\n\nOn Debian platforms you can install or upgrade to the latest version with apt-get:\n\n```sh\n$ sudo apt-get install go-dep\n```\n\nOn Windows, you can download a tarball from\n[go.equinox.io](https://go.equinox.io/github.com/golang/dep/cmd/dep).\n\nOn other platforms you can use the `install.sh` script:\n\n```sh\n$ curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n```\n\nIt will install into your `$GOPATH/bin` directory by default or any other directory you specify using the `INSTALL_DIRECTORY` environment variable.\n\nIf your platform is not supported, you'll need to build it manually or let the team know and we'll consider adding your platform\nto the release builds.\n\nIf you're interested in getting the source code, or hacking on `dep`, you can\ninstall via `go get`:\n\n```sh\ngo get -u github.com/golang/dep/cmd/dep\n```\n", "release_dates": ["2019-07-01T06:02:45Z", "2019-05-13T16:35:53Z", "2019-05-08T21:41:39Z", "2019-03-11T05:18:17Z", "2018-07-26T04:51:38Z", "2018-01-25T00:59:44Z", "2018-01-25T00:53:59Z", "2017-10-19T09:33:23Z", "2017-09-19T04:23:00Z", "2017-08-04T14:38:31Z", "2017-08-03T04:45:02Z", "2017-07-25T04:27:02Z"]}, {"name": "dl", "description": "[mirror] go install golang.org/dl/go1.N@latest", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# golang.org/dl\n\nThis repository holds the Go wrapper programs that run specific versions of Go, such\nas `go install golang.org/dl/go1.10.3@latest` and `go install golang.org/dl/gotip@latest`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit\nchanges to this repository, see https://golang.org/doc/contribute.html.\nThe main issue tracker for the net repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"dl:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "example", "description": "Go example projects", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go example projects\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/example.svg)](https://pkg.go.dev/golang.org/x/example)\n\nThis repository contains a collection of Go programs and libraries that\ndemonstrate the language, standard libraries, and tools.\n\n## Clone the project\n\n```\n$ git clone https://go.googlesource.com/example\n$ cd example\n```\nhttps://go.googlesource.com/example is the canonical Git repository.\nIt is mirrored at https://github.com/golang/example.\n\n## [hello](hello/) and [hello/reverse](hello/reverse/)\n\n```\n$ cd hello\n$ go build\n$ ./hello -help\n```\nA trivial \"Hello, world\" program that uses a library package.\n\nThe [hello](hello/) command covers:\n\n* The basic form of an executable command\n* Importing packages (from the standard library and the local repository)\n* Printing strings ([fmt](//golang.org/pkg/fmt/))\n* Command-line flags ([flag](//golang.org/pkg/flag/))\n* Logging ([log](//golang.org/pkg/log/))\n\nThe [reverse](hello/reverse/) reverse covers:\n\n* The basic form of a library\n* Conversion between string and []rune\n* Table-driven unit tests ([testing](//golang.org/pkg/testing/))\n\n## [helloserver](helloserver/)\n\n```\n$ cd helloserver\n$ go run .\n```\n\nA trivial \"Hello, world\" web server.\n\nTopics covered:\n\n* Command-line flags ([flag](//golang.org/pkg/flag/))\n* Logging ([log](//golang.org/pkg/log/))\n* Web servers ([net/http](//golang.org/pkg/net/http/))\n\n## [outyet](outyet/)\n\n```\n$ cd outyet\n$ go run .\n```\nA web server that answers the question: \"Is Go 1.x out yet?\"\n\nTopics covered:\n\n* Command-line flags ([flag](//golang.org/pkg/flag/))\n* Web servers ([net/http](//golang.org/pkg/net/http/))\n* HTML Templates ([html/template](//golang.org/pkg/html/template/))\n* Logging ([log](//golang.org/pkg/log/))\n* Long-running background processes\n* Synchronizing data access between goroutines ([sync](//golang.org/pkg/sync/))\n* Exporting server state for monitoring ([expvar](//golang.org/pkg/expvar/))\n* Unit and integration tests ([testing](//golang.org/pkg/testing/))\n* Dependency injection\n* Time ([time](//golang.org/pkg/time/))\n\n## [appengine-hello](appengine-hello/)\n\nA trivial \"Hello, world\" App Engine application intended to be used as the\nstarting point for your own code. Please see\n[Google App Engine SDK for Go](https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go)\nand [Quickstart for Go in the App Engine Standard Environment](https://cloud.google.com/appengine/docs/standard/go/quickstart).\n\n## [gotypes](gotypes/)\n\nThe `go/types` package is a type-checker for Go programs. It is one of the most\ncomplex packages in Go's standard library, so we have provided this tutorial to\nhelp you find your bearings. It comes with several example programs that you\ncan obtain using `go get` and play with as you learn to build tools that analyze\nor manipulate Go programs.\n\n## [template](template/)\n\nA trivial web server that demonstrates the use of the\n[`template` package](https://golang.org/pkg/text/template/)'s `block` feature.\n\n## [slog-handler-guide](slog-handler-guide/)\n\nThe `log/slog` package supports structured logging.\nIt features a flexible backend in the form of a `Handler` interface.\nThis guide can help you write your own handler.\n", "release_dates": []}, {"name": "exp", "description": "[mirror] Experimental and deprecated packages", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# exp\n\n[![PkgGoDev](https://pkg.go.dev/badge/golang.org/x/exp)](https://pkg.go.dev/golang.org/x/exp)\n\nThis subrepository holds experimental and deprecated (in the `old`\ndirectory) packages.\n\nThe idea for this subrepository originated as the `pkg/exp` directory\nof the main repository, but its presence there made it unavailable\nto users of the binary downloads of the Go installation. The\nsubrepository has therefore been created to make it possible to `go\nget` these packages.\n\n**Warning:** Packages here are experimental and unreliable. Some may\none day be promoted to the main repository or other subrepository,\nor they may be modified arbitrarily or even disappear altogether.\n\nIn short, code in this subrepository is not subject to the Go 1\ncompatibility promise. (No subrepo is, but the promise is even more\nlikely to be violated by go.exp than the others.)\n\nCaveat emptor.\n", "release_dates": []}, {"name": "freetype", "description": "The Freetype font rasterizer in the Go programming language.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "The Freetype font rasterizer in the Go programming language.\n\nTo download and install from source:\n$ go get github.com/golang/freetype\n\nIt is an incomplete port:\n  * It only supports TrueType fonts, and not Type 1 fonts nor bitmap fonts.\n  * It only supports the Unicode encoding.\n\nThere are also some implementation differences:\n  * It uses a 26.6 fixed point co-ordinate system everywhere internally,\n    as opposed to the original Freetype's mix of 26.6 (or 10.6 for 16-bit\n    systems) in some places, and 24.8 in the \"smooth\" rasterizer.\n\nFreetype-Go is derived from Freetype, which is written in C. Freetype is\ncopyright 1996-2010 David Turner, Robert Wilhelm, and Werner Lemberg.\nFreetype-Go is copyright The Freetype-Go Authors, who are listed in the\nAUTHORS file.\n\nUnless otherwise noted, the Freetype-Go source files are distributed\nunder the BSD-style license found in the LICENSE file.\n", "release_dates": []}, {"name": "gddo", "description": "Go Doc Dot Org", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": null, "release_dates": []}, {"name": "geo", "description": "S2 geometry library in Go", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Overview\n\nS2 is a library for spherical geometry that aims to have the same robustness,\nflexibility, and performance as the best planar geometry libraries.\n\nThis is a library for manipulating geometric shapes. Unlike many geometry\nlibraries, S2 is primarily designed to work with *spherical geometry*, i.e.,\nshapes drawn on a sphere rather than on a planar 2D map. (In fact, the name S2\nis derived from the mathematical notation for the unit sphere *S\u00b2*.) This makes\nit especially suitable for working with geographic data.\n\nMore details about S2 in general are available on the S2 Geometry Website\n[s2geometry.io](https://s2geometry.io/).\n\n## Scope\n\nThe library provides the following:\n\n*   Representations of angles, intervals, latitude-longitude points, unit\n    vectors, and so on, and various operations on these types.\n\n*   Geometric shapes over the unit sphere, such as spherical caps (\"discs\"),\n    latitude-longitude rectangles, polylines, and polygons. These are\n    collectively known as \"regions\".\n\n*   A hierarchical decomposition of the sphere into regions called \"cells\". The\n    hierarchy starts with the six faces of a projected cube and recursively\n    subdivides them in a quadtree-like fashion.\n\n*   Robust constructive operations (e.g., union) and boolean predicates (e.g.,\n    containment) for arbitrary collections of points, polylines, and polygons.\n\n*   Fast in-memory indexing of collections of points, polylines, and polygons.\n\n*   Algorithms for measuring distances and finding nearby objects.\n\n*   Robust algorithms for snapping and simplifying geometry (with accuracy and\n    topology guarantees).\n\n*   A collection of efficient yet exact mathematical predicates for testing\n    relationships among geometric objects.\n\n*   Support for spatial indexing, including the ability to approximate regions\n    as collections of discrete \"S2 cells\". This feature makes it easy to build\n    large distributed spatial indexes.\n\nOn the other hand, the following are outside the scope of S2:\n\n*   Planar geometry.\n\n*   Conversions to/from common GIS formats.\n\n### Robustness\n\nWhat do we mean by \"robust\"?\n\nIn the S2 library, the core operations are designed to be 100% robust. This\nmeans that each operation makes strict mathematical guarantees about its output,\nand is implemented in such a way that it meets those guarantees for all possible\nvalid inputs. For example, if you compute the intersection of two polygons, not\nonly is the output guaranteed to be topologically correct (up to the creation of\ndegeneracies), but it is also guaranteed that the boundary of the output stays\nwithin a user-specified tolerance of true, mathematically exact result.\n\nRobustness is very important when building higher-level algorithms, since\nunexpected results from low-level operations can be very difficult to handle. S2\nachieves this goal using a combination of techniques from computational\ngeometry, including *conservative error bounds*, *exact geometric predicates*,\nand *snap rounding*.\n\nThe implementation attempts to be precise both in terms of mathematical\ndefinitions (e.g. whether regions include their boundaries, and how degeneracies\nare handled) and numerical accuracy (e.g. minimizing cancellation error).\n\nNote that the intent of this library is to represent geometry as a mathematical\nabstraction. For example, although the unit sphere is obviously a useful\napproximation for the Earth's surface, functions that are specifically related\nto geography are not part of the core library (e.g. easting/northing\nconversions, ellipsoid approximations, geodetic vs. geocentric coordinates,\netc).\n\nSee http://godoc.org/github.com/golang/geo for specific package documentation.\n\nFor an analogous library in C++, see https://github.com/google/s2geometry, in\nJava, see https://github.com/google/s2-geometry-library-java, and Python, see\nhttps://github.com/google/s2geometry/tree/master/src/python\n\n# Status of the Go Library\n\nThis library is principally a port of the\n[C++ S2 library](https://github.com/google/s2geometry), adapting to Go idioms\nwhere it makes sense. We detail the progress of this port below relative to that\nC++ library.\n\nLegend:\n\n*   \u2705 - Feature Complete\n*   \ud83d\udfe1 - Mostly Complete\n*   \u274c - Not available\n\n## [\u211d\u00b9](https://godoc.org/github.com/golang/geo/r1) - One-dimensional Cartesian coordinates\n\nC++ Type   | Go\n:--------- | ---\nR1Interval | \u2705\n\n## [\u211d\u00b2](https://godoc.org/github.com/golang/geo/r2) - Two-dimensional Cartesian coordinates\n\nC++ Type | Go\n:------- | ---\nR2Point  | \u2705\nR2Rect   | \u2705\n\n## [\u211d\u00b3](https://godoc.org/github.com/golang/geo/r3) - Three-dimensional Cartesian coordinates\n\nC++ Type      | Go\n:------------ | ---\nR3Vector      | \u2705\nR3ExactVector | \u2705\nMatrix3x3     | \u2705\n\n## [S\u00b9](https://godoc.org/github.com/golang/geo/s1) - Circular Geometry\n\nC++ Type     | Go\n:----------- | ---\nS1Angle      | \u2705\nS1ChordAngle | \u2705\nS1Interval   | \u2705\n\n## [S\u00b2](https://godoc.org/github.com/golang/geo/s2) - Spherical Geometry\n\n### Basic Types\n\nC++ Type             | Go\n:------------------- | ---\nS2Cap                | \u2705\nS2Cell               | \u2705\nS2CellId             | \u2705\nS2CellIdVector       | \u274c\nS2CellIndex          | \ud83d\udfe1\nS2CellUnion          | \u2705\nS2Coords             | \u2705\nS2DensityTree        | \u274c\nS2DistanceTarget     | \u2705\nS2EdgeVector         | \u2705\nS2LatLng             | \u2705\nS2LatLngRect         | \u2705\nS2LaxLoop            | \ud83d\udfe1\nS2LaxPolygon         | \ud83d\udfe1\nS2LaxPolyline        | \ud83d\udfe1\nS2Loop               | \u2705\nS2PaddedCell         | \u2705\nS2Point              | \u2705\nS2PointIndex         | \u274c\nS2PointSpan          | \u274c\nS2PointRegion        | \u274c\nS2PointVector        | \u2705\nS2Polygon            | \ud83d\udfe1\nS2Polyline           | \u2705\nS2R2Rect             | \u274c\nS2Region             | \u2705\nS2RegionCoverer      | \u2705\nS2RegionIntersection | \u274c\nS2RegionUnion        | \u2705\nS2Shape              | \u2705\nS2ShapeIndex         | \u2705\nS2ShapeIndexRegion   | \u274c\nEncodedLaxPolygon    | \u274c\nEncodedLaxPolyline   | \u274c\nEncodedShapeIndex    | \u274c\nEncodedStringVector  | \u274c\nEncodedUintVector    | \u274c\nIdSetLexicon         | \u274c\nValueSetLexicon      | \u274c\nSequenceLexicon      | \u274c\nLaxClosedPolyline    | \u274c\nVertexIDLaxLoop      | \u274c\n\n### Query Types\n\nC++ Type             | Go\n:------------------- | ---\nS2ChainInterpolation | \u274c\nS2ClosestCell        | \u274c\nS2FurthestCell       | \u274c\nS2ClosestEdge        | \u2705\nS2FurthestEdge       | \u2705\nS2ClosestPoint       | \u274c\nS2FurthestPoint      | \u274c\nS2ContainsPoint      | \u2705\nS2ContainsVertex     | \u2705\nS2ConvexHull         | \u2705\nS2CrossingEdge       | \u2705\nS2HausdorffDistance  | \u274c\nS2ShapeNesting       | \u274c\n\n### Supporting Types\n\nC++ Type                         | Go\n:------------------------------- | ---\nS2BooleanOperation               | \u274c\nS2BufferOperation                | \u274c\nS2Builder                        | \u274c\nS2BuilderClosedSetNormalizer     | \u274c\nS2BuilderFindPolygonDegeneracies | \u274c\nS2BuilderGraph                   | \u274c\nS2BuilderLayers                  | \u274c\nS2BuilderSnapFunctions           | \u274c\nS2BuilderTesting                 | \u274c\nS2Builderutil\\*                  | \u274c\nS2Coder                          | \u274c\nS2EdgeClipping                   | \u2705\nS2EdgeCrosser                    | \u2705\nS2EdgeCrossings                  | \u2705\nS2EdgeDistances                  | \u2705\nS2EdgeTessellator                | \u2705\nS2LoopMeasures                   | \u274c\nS2Measures                       | \u2705\nS2MemoryTracker                  | \u274c\nS2Metrics                        | \u274c\nS2PointUtil                      | \ud83d\udfe1\nS2PolygonBuilder                 | \u274c\nS2PolylineAlignment              | \u274c\nS2PolylineMeasures               | \u2705\nS2PolylineSimplifier             | \u274c\nS2Predicates                     | \u2705\nS2Projections                    | \u274c\nS2rectBounder                    | \u274c\nS2RegionTermIndexer              | \u274c\nS2ShapeIndexMeasures             | \u274c\nS2ShapeIndexUtil\\*               | \ud83d\udfe1\nS2ShapeMeasures                  | \u274c\nS2ShapeUtil\\*                    | \ud83d\udfe1\nS2Stats                          | \u274c\nS2Testing                        | \u2705\nS2TextFormat                     | \u2705\nS2WedgeRelations                 | \u2705\nS2WindingOperation               | \u274c\n\n### Encode/Decode\n\nEncoding and decoding of S2 types is fully implemented and interoperable with\nC++ and Java.\n", "release_dates": []}, {"name": "glog", "description": "Leveled execution logs for Go", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# glog\n\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/golang/glog)](https://pkg.go.dev/github.com/golang/glog)\n\nLeveled execution logs for Go.\n\nThis is an efficient pure Go implementation of leveled logs in the\nmanner of the open source C++ package [_glog_](https://github.com/google/glog).\n\nBy binding methods to booleans it is possible to use the log package without paying the expense of evaluating the arguments to the log. Through the `-vmodule` flag, the package also provides fine-grained\ncontrol over logging at the file level.\n\nThe comment from `glog.go` introduces the ideas:\n\nPackage _glog_ implements logging analogous to the Google-internal C++ INFO/ERROR/V setup.  It provides the functions Info, Warning, Error, Fatal, plus formatting variants such as Infof. It also provides V-style loggingcontrolled by the `-v` and `-vmodule=file=2` flags.\n\t\nBasic examples:\n\n```go\nglog.Info(\"Prepare to repel boarders\")\n\t\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\t\nSee the documentation for the V function for an explanation of these examples:\n\n```go\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\nThe repository contains an open source version of the log package used inside Google. The master copy of the source lives inside Google, not here. The code in this repo is for export only and is not itself under development. Feature requests will be ignored.\n\nSend bug reports to golang-nuts@googlegroups.com.\n", "release_dates": ["2023-11-22T11:24:40Z", "2023-08-09T10:10:28Z", "2023-03-22T16:00:58Z", "2023-03-03T14:57:56Z", "2021-08-20T11:54:35Z"]}, {"name": "go", "description": "The Go programming language", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# The Go Programming Language\n\nGo is an open source programming language that makes it easy to build simple,\nreliable, and efficient software.\n\n![Gopher image](https://golang.org/doc/gopher/fiveyears.jpg)\n*Gopher image by [Renee French][rf], licensed under [Creative Commons 4.0 Attributions license][cc4-by].*\n\nOur canonical Git repository is located at https://go.googlesource.com/go.\nThere is a mirror of the repository at https://github.com/golang/go.\n\nUnless otherwise noted, the Go source files are distributed under the\nBSD-style license found in the LICENSE file.\n\n### Download and Install\n\n#### Binary Distributions\n\nOfficial binary distributions are available at https://go.dev/dl/.\n\nAfter downloading a binary release, visit https://go.dev/doc/install\nfor installation instructions.\n\n#### Install From Source\n\nIf a binary distribution is not available for your combination of\noperating system and architecture, visit\nhttps://go.dev/doc/install/source\nfor source installation instructions.\n\n### Contributing\n\nGo is the work of thousands of contributors. We appreciate your help!\n\nTo contribute, please read the contribution guidelines at https://go.dev/doc/contribute.\n\nNote that the Go project uses the issue tracker for bug reports and\nproposals only. See https://go.dev/wiki/Questions for a list of\nplaces to ask questions about the Go language.\n\n[rf]: https://reneefrench.blogspot.com/\n[cc4-by]: https://creativecommons.org/licenses/by/4.0/\n", "release_dates": []}, {"name": "go-get-issue-15410", "description": "go-get-issue-15410", "language": "Go", "license": null, "readme": "For a cmd/go test. Nothing to see here. Move along.\n", "release_dates": []}, {"name": "gofrontend", "description": "Go compiler frontend (gccgo)", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# A Go frontend\n\nIan Lance Taylor\nLast update 15 June 2014\n\nThis is a compiler frontend for the [Go programming language](http://golang.org/). The frontend was originally developed at Google, and was released in November 2009. It was originally written by Ian Lance Taylor.\n\nIt was originally written for [GCC](http://gcc.gnu.org/). As of this writing it only supports GCC, but the GCC support has been separated from the rest of the frontend, so supporting another compiler is feasible.\n\nThe go subdirectory holds the frontend source code. This is mirrored to the gcc/go subdirectory in the GCC repository.\n\nThe libgo subdirectory holds the library source code. This is a copy of the main Go library with various changes appropriate for this compiler. The main Go library is hosted at <http://go.googlesource.com/go>, in the src directory. The libgo subdirectory is mirrored to the libgo subdirectory in the gcc repository.\n\n## Legal Matters\n\nTo contribute patches to the files in this directory, please see [Contributing to the gccgo frontend](http://golang.org/doc/gccgo_contribute.html).\n\nThe master copy of these files is hosted in [Gerrit](http://go.googlesource.com/gofrontend) (there is a mirror at [Github](http://github.com/golang/gofrontend)). Changes to these files require signing a Google contributor license agreement. If you are the copyright holder, you will need to agree to the [Google Individual Contributor License Agreement](http://code.google.com/legal/individual-cla-v1.0.html). This agreement can be completed online.\n\nIf your organization is the copyright holder, the organization will need to agree to the [Google Software Grant and Corporate Contributor License Agreement](http://code.google.com/legal/corporate-cla-v1.0.html).\n\nIf the copyright holder for your code has already completed the agreement in connection with another Google open source project, it does not need to be completed again.\n\nThe authors of these files may be found in the [AUTHORS](./AUTHORS) and [CONTRIBUTORS](./CONTRIBUTORS) files.\n", "release_dates": []}, {"name": "govulncheck-action", "description": "[mirror] GitHub action for govulncheck", "language": null, "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# GitHub Action for govulncheck\n\nThis repository holds the GitHub Action for govulncheck.\n\n[Govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) provides a\nlow-noise, reliable way for Go users to learn about known vulnerabilities that\nmay affect their dependencies. See details on [Go's support for vulnerability\nmanagement](https://go.dev/blog/vuln).\n\nThe govulncheck GitHub Action is currently experimental and is under active\ndevelopment.\n\n## Using the govulncheck GitHub Action\n\nTo use the govulncheck GitHub Action add the following step to your workflow:\n\n```yaml\n- id: govulncheck\n  uses: golang/govulncheck-action@v1\n```\n\nBy default the govulncheck Github Action will run with the\n[latest version of Go](https://go.dev/doc/install) and analyze all packages in\nthe provided Go module. Assuming you have the latest Go version installed\nlocally, this is equivalent to running the following on your command line:\n\n```\n$ govulncheck ./...\n```\n\nTo specify a specific Go version, directory in which to run govulncheck, or\n[package pattern](https://pkg.go.dev/cmd/go#hdr-Package_lists_and_patterns),\nuse the following syntax:\n\n```yaml\n- id: govulncheck\n  uses: golang/govulncheck-action@v1\n  with:\n     go-version-input: <your-Go-version>\n     go-package: <your-package-pattern>\n```\n\nFor example, the code snippet below can be used to run govulncheck against a\nrepository on every push:\n\n```yaml\non: [push]\n\njobs:\n  govulncheck_job:\n    runs-on: ubuntu-latest\n    name: Run govulncheck\n    steps:\n      - id: govulncheck\n        uses: golang/govulncheck-action@v1\n        with:\n           go-version-input: 1.20.6\n           go-package: ./...\n```\n\ngovulncheck Github Action accepts several other optional inputs:\n\n```yaml\nwork-dir: directory in which to run govulncheck, default '.'\nrepo-checkout: checkout the repository, default true\ncheck-latest: check for the latest Go version, default false\ngo-version-file: go.mod or go.work file specifying Go version, default ''\n```\nThe precedence for inputs `go-version-input`, `go-version-file`, and `check-latest`\nspecifying Go version is inherited from [actions/setup-go](https://github.com/actions/setup-go).\n\nWhen a vulnerability is found, an error will be displayed for that\n[GitHub job](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow)\nwith information about the vulnerability and how to fix it. For example:\n\n![image](https://github.com/bkessler-go/prototype-repo/assets/107496148/932a2e5c-730e-4583-90f3-edab3ca06f60)\n\n## Contributing\n\nOur canonical Git repository is located at\nhttps://go.googlesource.com/govulncheck-action. There is a mirror of the\nrepository at https://github.com/golang/govulncheck-action. See\nhttps://go.dev/doc/contribute.html for details on how to contribute.\n\n## Feedback\n\nThe main issue tracker for the time repository is located at\n\nIf you want to report a bug or have a feature suggestion, please file an issue\nat https://github.com/golang/go/issues, prefixed with `govulncheck-action:` in the title.\n\n## License\n\nUnless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the [LICENSE](LICENSE) file.\n", "release_dates": ["2023-09-08T16:00:35Z", "2023-07-13T15:30:11Z", "2023-06-27T19:47:13Z", "2023-05-30T20:27:07Z"]}, {"name": "groupcache", "description": "groupcache is a caching and cache-filling library, intended as a replacement for memcached in many cases.", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# groupcache\n\n## Summary\n\ngroupcache is a distributed caching and cache-filling library, intended as a\nreplacement for a pool of memcached nodes in many cases.\n\nFor API docs and examples, see http://godoc.org/github.com/golang/groupcache\n\n## Comparison to memcached\n\n### **Like memcached**, groupcache:\n\n * shards by key to select which peer is responsible for that key\n\n### **Unlike memcached**, groupcache:\n\n * does not require running a separate set of servers, thus massively\n   reducing deployment/configuration pain.  groupcache is a client\n   library as well as a server.  It connects to its own peers, forming\n   a distributed cache.\n\n * comes with a cache filling mechanism.  Whereas memcached just says\n   \"Sorry, cache miss\", often resulting in a thundering herd of\n   database (or whatever) loads from an unbounded number of clients\n   (which has resulted in several fun outages), groupcache coordinates\n   cache fills such that only one load in one process of an entire\n   replicated set of processes populates the cache, then multiplexes\n   the loaded value to all callers.\n\n * does not support versioned values.  If key \"foo\" is value \"bar\",\n   key \"foo\" must always be \"bar\".  There are neither cache expiration\n   times, nor explicit cache evictions.  Thus there is also no CAS,\n   nor Increment/Decrement.  This also means that groupcache....\n\n * ... supports automatic mirroring of super-hot items to multiple\n   processes.  This prevents memcached hot spotting where a machine's\n   CPU and/or NIC are overloaded by very popular keys/values.\n\n * is currently only available for Go.  It's very unlikely that I\n   (bradfitz@) will port the code to any other language.\n\n## Loading process\n\nIn a nutshell, a groupcache lookup of **Get(\"foo\")** looks like:\n\n(On machine #5 of a set of N machines running the same code)\n\n 1. Is the value of \"foo\" in local memory because it's super hot?  If so, use it.\n\n 2. Is the value of \"foo\" in local memory because peer #5 (the current\n    peer) is the owner of it?  If so, use it.\n\n 3. Amongst all the peers in my set of N, am I the owner of the key\n    \"foo\"?  (e.g. does it consistent hash to 5?)  If so, load it.  If\n    other callers come in, via the same process or via RPC requests\n    from peers, they block waiting for the load to finish and get the\n    same answer.  If not, RPC to the peer that's the owner and get\n    the answer.  If the RPC fails, just load it locally (still with\n    local dup suppression).\n\n## Users\n\ngroupcache is in production use by dl.google.com (its original user),\nparts of Blogger, parts of Google Code, parts of Google Fiber, parts\nof Google production monitoring systems, etc.\n\n## Presentations\n\nSee http://talks.golang.org/2013/oscon-dl.slide\n\n## Help\n\nUse the golang-nuts mailing list for any discussion or questions.\n", "release_dates": []}, {"name": "image", "description": "[mirror] Go supplementary image libraries", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Images\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/image.svg)](https://pkg.go.dev/golang.org/x/image)\n\nThis repository holds supplementary Go image libraries.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/image/...`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/image`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the image repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/image:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "leveldb", "description": "The LevelDB key-value database in the Go programming language.", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# WARNING: This is an incomplete work-in-progress.\n\n## It is not ready for production use. Some features aren't implemented yet. Documentation is missing.\n\nThe LevelDB key-value database in the Go programming language.\n\nTo download and install from source:\n$ go get github.com/golang/leveldb\n\nUnless otherwise noted, the LevelDB-Go source files are distributed\nunder the BSD-style license found in the LICENSE file.\n", "release_dates": []}, {"name": "lint", "description": "[mirror] This is a linter for Go source code. (deprecated)", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "**NOTE:** Golint is [deprecated and frozen](https://github.com/golang/go/issues/38968).\nThere's no drop-in replacement for it, but tools such as [Staticcheck](https://staticcheck.io/)\nand `go vet` should be used instead.\n\nGolint is a linter for Go source code.\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/lint.svg)](https://pkg.go.dev/golang.org/x/lint)\n[![Build Status](https://travis-ci.org/golang/lint.svg?branch=master)](https://travis-ci.org/golang/lint)\n\n## Installation\n\nGolint requires a\n[supported release of Go](https://golang.org/doc/devel/release.html#policy).\n\n    go get -u golang.org/x/lint/golint\n\nTo find out where `golint` was installed you can run `go list -f {{.Target}} golang.org/x/lint/golint`. For `golint` to be used globally add that directory to the `$PATH` environment setting.\n\n## Usage\n\nInvoke `golint` with one or more filenames, directories, or packages named\nby its import path. Golint uses the same\n[import path syntax](https://golang.org/cmd/go/#hdr-Import_path_syntax) as\nthe `go` command and therefore\nalso supports relative import paths like `./...`. Additionally the `...`\nwildcard can be used as suffix on relative and absolute file paths to recurse\ninto them.\n\nThe output of this tool is a list of suggestions in Vim quickfix format,\nwhich is accepted by lots of different editors.\n\n## Purpose\n\nGolint differs from gofmt. Gofmt reformats Go source code, whereas\ngolint prints out style mistakes.\n\nGolint differs from govet. Govet is concerned with correctness, whereas\ngolint is concerned with coding style. Golint is in use at Google, and it\nseeks to match the accepted style of the open source Go project.\n\nThe suggestions made by golint are exactly that: suggestions.\nGolint is not perfect, and has both false positives and false negatives.\nDo not treat its output as a gold standard. We will not be adding pragmas\nor other knobs to suppress specific warnings, so do not expect or require\ncode to be completely \"lint-free\".\nIn short, this tool is not, and will never be, trustworthy enough for its\nsuggestions to be enforced automatically, for example as part of a build process.\nGolint makes suggestions for many of the mechanically checkable items listed in\n[Effective Go](https://golang.org/doc/effective_go.html) and the\n[CodeReviewComments wiki page](https://golang.org/wiki/CodeReviewComments).\n\n## Scope\n\nGolint is meant to carry out the stylistic conventions put forth in\n[Effective Go](https://golang.org/doc/effective_go.html) and\n[CodeReviewComments](https://golang.org/wiki/CodeReviewComments).\nChanges that are not aligned with those documents will not be considered.\n\n## Contributions\n\nContributions to this project are welcome provided they are [in scope](#scope),\nthough please send mail before starting work on anything major.\nContributors retain their copyright, so we need you to fill out\n[a short form](https://developers.google.com/open-source/cla/individual)\nbefore we can accept your contribution.\n\n## Vim\n\nAdd this to your ~/.vimrc:\n\n    set rtp+=$GOPATH/src/golang.org/x/lint/misc/vim\n\nIf you have multiple entries in your GOPATH, replace `$GOPATH` with the right value.\n\nRunning `:Lint` will run golint on the current file and populate the quickfix list.\n\nOptionally, add this to your `~/.vimrc` to automatically run `golint` on `:w`\n\n    autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow\n\n\n## Emacs\n\nAdd this to your `.emacs` file:\n\n    (add-to-list 'load-path (concat (getenv \"GOPATH\")  \"/src/golang.org/x/lint/misc/emacs/\"))\n    (require 'golint)\n\nIf you have multiple entries in your GOPATH, replace `$GOPATH` with the right value.\n\nRunning M-x golint will run golint on the current file.\n\nFor more usage, see [Compilation-Mode](http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html).\n", "release_dates": []}, {"name": "mobile", "description": "[mirror] Go on Mobile", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go support for Mobile devices\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/mobile.svg)](https://pkg.go.dev/golang.org/x/mobile)\n\nThe Go mobile repository holds packages and build tools for using Go on mobile platforms.\n\nPackage documentation as a starting point:\n\n- [Building all-Go apps](https://golang.org/x/mobile/app)\n- [Building libraries for SDK apps](https://golang.org/x/mobile/cmd/gobind)\n\n![Caution image](doc/caution.png)\n\nThe Go Mobile project is experimental. Use this at your own risk.\nWhile we are working hard to improve it, neither Google nor the Go\nteam can provide end-user support.\n\nThis is early work and installing the build system requires Go 1.5.\nFollow the instructions on\n[golang.org/wiki/Mobile](https://golang.org/wiki/Mobile)\nto install the gomobile command, build the\n[basic](https://golang.org/x/mobile/example/basic)\nand the [bind](https://golang.org/x/mobile/example/bind) example apps.\n\n--\n\nContributions to Go are appreciated. See https://golang.org/doc/contribute.html.\n\n* Bugs can be filed at the [Go issue tracker](https://golang.org/issue/new?title=x/mobile:+).\n* Feature requests should preliminary be discussed on\n[golang-nuts](https://groups.google.com/forum/#!forum/golang-nuts)\nmailing list.\n", "release_dates": []}, {"name": "mock", "description": "GoMock is a mocking framework for the Go programming language.", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# gomock\n\n**Update, June 2023**: _This repo and tool are no longer maintained.\nPlease see [go.uber.org/mock](https://github.com/uber/mock) for a maintained fork instead._\n\n[![Build Status][ci-badge]][ci-runs] [![Go Reference][reference-badge]][reference]\n\ngomock is a mocking framework for the [Go programming language][golang]. It\nintegrates well with Go's built-in `testing` package, but can be used in other\ncontexts too.\n\n## Installation\n\nOnce you have [installed Go][golang-install], install the `mockgen` tool.\n\n**Note**: If you have not done so already be sure to add `$GOPATH/bin` to your\n`PATH`.\n\nTo get the latest released version use:\n\n### Go version < 1.16\n\n```bash\nGO111MODULE=on go get github.com/golang/mock/mockgen@v1.6.0\n```\n\n### Go 1.16+\n\n```bash\ngo install github.com/golang/mock/mockgen@v1.6.0\n```\n\nIf you use `mockgen` in your CI pipeline, it may be more appropriate to fixate\non a specific mockgen version. You should try to keep the library in sync with\nthe version of mockgen used to generate your mocks.\n\n## Running mockgen\n\n`mockgen` has two modes of operation: source and reflect.\n\n### Source mode\n\nSource mode generates mock interfaces from a source file.\nIt is enabled by using the -source flag. Other flags that\nmay be useful in this mode are -imports and -aux_files.\n\nExample:\n\n```bash\nmockgen -source=foo.go [other options]\n```\n\n### Reflect mode\n\nReflect mode generates mock interfaces by building a program\nthat uses reflection to understand interfaces. It is enabled\nby passing two non-flag arguments: an import path, and a\ncomma-separated list of symbols.\n\nYou can use \".\" to refer to the current path's package.\n\nExample:\n\n```bash\nmockgen database/sql/driver Conn,Driver\n\n# Convenient for `go:generate`.\nmockgen . Conn,Driver\n```\n\n### Flags\n\nThe `mockgen` command is used to generate source code for a mock\nclass given a Go source file containing interfaces to be mocked.\nIt supports the following flags:\n\n- `-source`: A file containing interfaces to be mocked.\n\n- `-destination`: A file to which to write the resulting source code. If you\n  don't set this, the code is printed to standard output.\n\n- `-package`: The package to use for the resulting mock class\n  source code. If you don't set this, the package name is `mock_` concatenated\n  with the package of the input file.\n\n- `-imports`: A list of explicit imports that should be used in the resulting\n  source code, specified as a comma-separated list of elements of the form\n  `foo=bar/baz`, where `bar/baz` is the package being imported and `foo` is\n  the identifier to use for the package in the generated source code.\n\n- `-aux_files`: A list of additional files that should be consulted to\n  resolve e.g. embedded interfaces defined in a different file. This is\n  specified as a comma-separated list of elements of the form\n  `foo=bar/baz.go`, where `bar/baz.go` is the source file and `foo` is the\n  package name of that file used by the -source file.\n\n- `-build_flags`: (reflect mode only) Flags passed verbatim to `go build`.\n\n- `-mock_names`: A list of custom names for generated mocks. This is specified\n  as a comma-separated list of elements of the form\n  `Repository=MockSensorRepository,Endpoint=MockSensorEndpoint`, where\n  `Repository` is the interface name and `MockSensorRepository` is the desired\n  mock name (mock factory method and mock recorder will be named after the mock).\n  If one of the interfaces has no custom name specified, then default naming\n  convention will be used.\n\n- `-self_package`: The full package import path for the generated code. The\n  purpose of this flag is to prevent import cycles in the generated code by\n  trying to include its own package. This can happen if the mock's package is\n  set to one of its inputs (usually the main one) and the output is stdio so\n  mockgen cannot detect the final output package. Setting this flag will then\n  tell mockgen which import to exclude.\n\n- `-copyright_file`: Copyright file used to add copyright header to the resulting source code.\n\n- `-debug_parser`: Print out parser results only.\n\n- `-exec_only`: (reflect mode) If set, execute this reflection program.\n\n- `-prog_only`: (reflect mode) Only generate the reflection program; write it to stdout and exit.\n\n- `-write_package_comment`: Writes package documentation comment (godoc) if true. (default true)\n\nFor an example of the use of `mockgen`, see the `sample/` directory. In simple\ncases, you will need only the `-source` flag.\n\n## Building Mocks\n\n```go\ntype Foo interface {\n  Bar(x int) int\n}\n\nfunc SUT(f Foo) {\n // ...\n}\n\n```\n\n```go\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n\n  // Assert that Bar() is invoked.\n  defer ctrl.Finish()\n\n  m := NewMockFoo(ctrl)\n\n  // Asserts that the first and only call to Bar() is passed 99.\n  // Anything else will fail.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    Return(101)\n\n  SUT(m)\n}\n```\n\nIf you are using a Go version of 1.14+, a mockgen version of 1.5.0+, and are\npassing a *testing.T into `gomock.NewController(t)` you no longer need to call\n`ctrl.Finish()` explicitly. It will be called for you automatically from a self\nregistered [Cleanup](https://pkg.go.dev/testing?tab=doc#T.Cleanup) function.\n\n## Building Stubs\n\n```go\ntype Foo interface {\n  Bar(x int) int\n}\n\nfunc SUT(f Foo) {\n // ...\n}\n\n```\n\n```go\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n  defer ctrl.Finish()\n\n  m := NewMockFoo(ctrl)\n\n  // Does not make any assertions. Executes the anonymous functions and returns\n  // its result when Bar is invoked with 99.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    DoAndReturn(func(_ int) int {\n      time.Sleep(1*time.Second)\n      return 101\n    }).\n    AnyTimes()\n\n  // Does not make any assertions. Returns 103 when Bar is invoked with 101.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(101)).\n    Return(103).\n    AnyTimes()\n\n  SUT(m)\n}\n```\n\n## Modifying Failure Messages\n\nWhen a matcher reports a failure, it prints the received (`Got`) vs the\nexpected (`Want`) value.\n\n```shell\nGot: [3]\nWant: is equal to 2\nExpected call at user_test.go:33 doesn't match the argument at index 1.\nGot: [0 1 1 2 3]\nWant: is equal to 1\n```\n\n### Modifying `Want`\n\nThe `Want` value comes from the matcher's `String()` method. If the matcher's\ndefault output doesn't meet your needs, then it can be modified as follows:\n\n```go\ngomock.WantFormatter(\n  gomock.StringerFunc(func() string { return \"is equal to fifteen\" }),\n  gomock.Eq(15),\n)\n```\n\nThis modifies the `gomock.Eq(15)` matcher's output for `Want:` from `is equal\nto 15` to `is equal to fifteen`.\n\n### Modifying `Got`\n\nThe `Got` value comes from the object's `String()` method if it is available.\nIn some cases the output of an object is difficult to read (e.g., `[]byte`) and\nit would be helpful for the test to print it differently. The following\nmodifies how the `Got` value is formatted:\n\n```go\ngomock.GotFormatterAdapter(\n  gomock.GotFormatterFunc(func(i interface{}) string {\n    // Leading 0s\n    return fmt.Sprintf(\"%02d\", i)\n  }),\n  gomock.Eq(15),\n)\n```\n\nIf the received value is `3`, then it will be printed as `03`.\n\n[golang]:              http://golang.org/\n[golang-install]:      http://golang.org/doc/install.html#releases\n[gomock-reference]:    https://pkg.go.dev/github.com/golang/mock/gomock\n[ci-badge]:            https://github.com/golang/mock/actions/workflows/test.yaml/badge.svg\n[ci-runs]:             https://github.com/golang/mock/actions\n[reference-badge]:     https://pkg.go.dev/badge/github.com/golang/mock.svg\n[reference]:           https://pkg.go.dev/github.com/golang/mock\n\n## Debugging Errors\n\n### reflect vendoring error\n\n```text\ncannot find package \".\"\n... github.com/golang/mock/mockgen/model\n```\n\nIf you come across this error while using reflect mode and vendoring\ndependencies there are three workarounds you can choose from:\n\n1. Use source mode.\n2. Include an empty import `import _ \"github.com/golang/mock/mockgen/model\"`.\n3. Add `--build_flags=--mod=mod` to your mockgen command.\n\nThis error is due to changes in default behavior of the `go` command in more\nrecent versions. More details can be found in\n[#494](https://github.com/golang/mock/issues/494).\n", "release_dates": ["2021-06-11T20:35:27Z", "2021-02-19T23:13:12Z", "2020-07-28T20:56:53Z", "2020-03-16T15:07:16Z", "2020-03-13T22:16:57Z", "2020-02-27T03:34:08Z", "2020-01-22T03:07:13Z", "2019-05-08T16:24:58Z", "2019-05-02T19:38:00Z", "2018-12-08T05:51:01Z", "2018-04-05T22:01:57Z", "2018-04-04T18:38:36Z", "2018-04-03T17:42:02Z"]}, {"name": "mod", "description": "[mirror] Go module mechanics libraries", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# mod\n\n[![PkgGoDev](https://pkg.go.dev/badge/golang.org/x/mod)](https://pkg.go.dev/golang.org/x/mod)\n\nThis repository holds packages for writing tools\nthat work directly with Go module mechanics.\nThat is, it is for direct manipulation of Go modules themselves.\n\nIt is NOT about supporting general development tools that\nneed to do things like load packages in module mode.\nThat use case, where modules are incidental rather than the focus,\nshould remain in [x/tools](https://pkg.go.dev/golang/org/x/tools),\nspecifically [x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages).\n\nThe specific case of loading packages should still be done by\ninvoking the go command, which remains the single point of\ntruth for package loading algorithms.\n", "release_dates": []}, {"name": "net", "description": "[mirror] Go supplementary network libraries", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Networking\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/net.svg)](https://pkg.go.dev/golang.org/x/net)\n\nThis repository holds supplementary Go networking libraries.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/net`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/net`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit\nchanges to this repository, see https://golang.org/doc/contribute.html.\nThe main issue tracker for the net repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/net:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "oauth2", "description": "Go OAuth2", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# OAuth2 for Go\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/oauth2.svg)](https://pkg.go.dev/golang.org/x/oauth2)\n[![Build Status](https://travis-ci.org/golang/oauth2.svg?branch=master)](https://travis-ci.org/golang/oauth2)\n\noauth2 package contains a client implementation for OAuth 2.0 spec.\n\n## Installation\n\n~~~~\ngo get golang.org/x/oauth2\n~~~~\n\nOr you can manually git clone the repository to\n`$(go env GOPATH)/src/golang.org/x/oauth2`.\n\nSee pkg.go.dev for further documentation and examples.\n\n* [pkg.go.dev/golang.org/x/oauth2](https://pkg.go.dev/golang.org/x/oauth2)\n* [pkg.go.dev/golang.org/x/oauth2/google](https://pkg.go.dev/golang.org/x/oauth2/google)\n\n## Policy for new endpoints\n\nWe no longer accept new provider-specific packages in this repo if all\nthey do is add a single endpoint variable. If you just want to add a\nsingle endpoint, add it to the\n[pkg.go.dev/golang.org/x/oauth2/endpoints](https://pkg.go.dev/golang.org/x/oauth2/endpoints)\npackage.\n\n## Report Issues / Send Patches\n\nThe main issue tracker for the oauth2 repository is located at\nhttps://github.com/golang/oauth2/issues.\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html. In particular:\n\n* Excluding trivial changes, all contributions should be connected to an existing issue.\n* API changes must go through the [change proposal process](https://go.dev/s/proposal-process) before they can be accepted.\n* The code owners are listed at [dev.golang.org/owners](https://dev.golang.org/owners#:~:text=x/oauth2).\n", "release_dates": []}, {"name": "perf", "description": "[mirror] Performance measurement, storage, and analysis.", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go benchmark analysis tools\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/perf.svg)](https://pkg.go.dev/golang.org/x/perf)\n\nThis subrepository holds tools and packages for analyzing [Go\nbenchmark results](https://golang.org/design/14313-benchmark-format),\nsuch as the output of [testing package\nbenchmarks](https://pkg.go.dev/testing).\n\n## Tools\n\nThis subrepository contains command-line tools for analyzing benchmark\nresult data.\n\n[cmd/benchstat](cmd/benchstat) computes statistical summaries and A/B\ncomparisons of Go benchmarks.\n\n[cmd/benchfilter](cmd/benchfilter) filters the contents of benchmark\nresult files.\n\n[cmd/benchsave](cmd/benchsave) publishes benchmark results to\n[perf.golang.org](https://perf.golang.org).\n\nTo install all of these commands, run\n`go install golang.org/x/perf/cmd/...@latest`.\nYou can also\n`git clone https://go.googlesource.com/perf` and run\n`go install ./cmd/...` in the checkout.\n\n## Packages\n\nUnderlying the above tools are several packages for working with\nbenchmark data. These are designed to work together, but can also be\nused independently.\n\n[benchfmt](benchfmt) reads and writes the Go benchmark format.\n\n[benchunit](benchunit) manipulates benchmark units and formats numbers\nin those units.\n\n[benchproc](benchproc) provides tools for filtering, grouping, and\nsorting benchmark results.\n\n[benchmath](benchmath) provides tools for computing statistics over\ndistributions of benchmark measurements.\n\n## Deprecated packages\n\nThe following packages are deprecated and no longer supported:\n\n[storage](storage) contains a deprecated version of the\nhttps://perfdata.golang.org/ benchmark result storage system. These\npackages have moved to https://golang.org/x/build.\n\n[analysis](analysis) contains a deprecated version of the\nhttps://perf.golang.org/ benchmark result analysis system. These\npackages have moved to https://golang.org/x/build.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the perf repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/perf:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "pkgsite", "description": "[mirror] Home of the pkg.go.dev website", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# golang.org/x/pkgsite\n\nThis repository hosts the source code of the [pkg.go.dev](https://pkg.go.dev) website,\nand [`pkgsite`](https://pkg.go.dev/golang.org/x/pkgsite/cmd/pkgsite), a documentation\nserver program.\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/pkgsite.svg)](https://pkg.go.dev/golang.org/x/pkgsite)\n\n## pkg.go.dev: a site for discovering Go packages\n\nPkg.go.dev is a website for discovering and evaluating Go packages and modules.\n\nYou can check it out at [https://pkg.go.dev](https://pkg.go.dev).\n\n## pkgsite: a documentation server\n\n`pkgsite` program extracts and generates documentation for Go projects.\n\nExample usage:\n\n```\n$ go install golang.org/x/pkgsite/cmd/pkgsite@latest\n$ cd myproject\n$ pkgsite -open .\n```\n\nFor more information, see the [pkgsite documentation](https://pkg.go.dev/golang.org/x/pkgsite/cmd/pkgsite).\n\n## Requirements\n\nPkgsite requires Go 1.19 to run.\nThe last commit that works with Go 1.18 is\n9ffe8b928e4fbd3ff7dcf984254629a47f8b6e63.\nThe last commit that works with Go 1.17 is\n4d836c6a652cde92f433967680dfd6171a91ec12.\n\n## Issues\n\nIf you want to report a bug or have a feature suggestion, please first check\nthe [known issues](https://github.com/golang/go/labels/pkgsite) to see if your\nissue is already being discussed. If an issue does not already exist, feel free\nto [file an issue](https://golang.org/s/pkgsite-feedback).\n\nFor answers to frequently asked questions, see [pkg.go.dev/about](https://pkg.go.dev/about).\n\nYou can also chat with us on the\n[#pkgsite Slack channel](https://gophers.slack.com/archives/C0166L4QGJV) on the\n[Gophers Slack](https://invite.slack.golangbridge.org).\n\n## Contributing\n\nWe would love your help!\n\nOur canonical Git repository is located at\n[go.googlesource.com/pkgsite](https://go.googlesource.com/pkgsite).\nThere is a mirror of the repository at\n[github.com/golang/pkgsite](https://github.com/golang/pkgsite).\n\nTo contribute, please read our [contributing guide](CONTRIBUTING.md).\n\n## License\n\nUnless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the [LICENSE](LICENSE) file.\n\n## Links\n\n- [Homepage](https://pkg.go.dev)\n- [Feedback](https://golang.org/s/pkgsite-feedback)\n- [Issue Tracker](https://golang.org/s/pkgsite-issues)\n", "release_dates": []}, {"name": "pkgsite-metrics", "description": "Code to serve pkg.go.dev/metrics [mirror]", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# pkgsite-metrics\n\nThis repository contains code that serves pkg.go.dev/metrics.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the time repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with\n\"x/pkgsite-metrics:\" in the subject line, so it is easy to find.\n", "release_dates": []}, {"name": "playground", "description": "[mirror] The Go Playground", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# playground\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/playground.svg)](https://pkg.go.dev/golang.org/x/playground)\n\nThis subrepository holds the source for the Go playground:\nhttps://go.dev/play/\n\n## Building\n\n```bash\n# build the image\ndocker build -t golang/playground .\n```\n\n## Running\n\n```bash\ndocker run --name=play --rm -p 8080:8080 golang/playground &\n# run some Go code\ncat /path/to/code.go | go run client.go | curl -s --upload-file - localhost:8080/compile\n```\n\nTo run the \"gotip\" version of the playground, set `GOTIP=true`\nin your environment (via `-e GOTIP=true` if using `docker run`).\n\n## Deployment\n\n### Deployment Triggers\n\nPlayground releases automatically triggered when new Go repository tags are pushed to GitHub, or when master is pushed\non the playground repository.\n\nFor details, see [deploy/go_trigger.yaml](deploy/go_trigger.yaml),\n[deploy/playground_trigger.yaml](deploy/playground_trigger.yaml),\nand [deploy/deploy.json](deploy/deploy.json).\n\nChanges to the trigger configuration can be made to the YAML files, or in the GCP UI, which should be kept in sync\nusing the `push-cloudbuild-triggers` and `pull-cloudbuild-triggers` make targets.\n\n### Deploy via Cloud Build\n\nThe Cloud Build configuration will always build and deploy with the latest supported release of Go.\n\n```bash\ngcloud --project=golang-org builds submit --config deploy/deploy.json .\n```\n\nTo deploy the \"Go tip\" version of the playground, which uses the latest\ndevelopment build, use `deploy_gotip.json` instead:\n\n```bash\ngcloud --project=golang-org builds submit --config deploy/deploy_gotip.json .\n```\n\n### Deploy via gcloud app deploy\n\nBuilding the playground Docker container takes more than the default 10 minute time limit of cloud build, so increase\nits timeout first (note, `app/cloud_build_timeout` is a global configuration value):\n\n```bash\ngcloud config set app/cloud_build_timeout 1200  # 20 mins\n```\n\nAlternatively, to avoid Cloud Build and build locally:\n\n```bash\nmake docker\ndocker tag golang/playground:latest gcr.io/golang-org/playground:latest\ndocker push gcr.io/golang-org/playground:latest\ngcloud --project=golang-org --account=you@google.com app deploy app.yaml --image-url=gcr.io/golang-org/playground:latest\n```\n\nThen:\n\n```bash\ngcloud --project=golang-org --account=you@google.com app deploy app.yaml\n```\n\n## Contributing\n\nTo submit changes to this repository, see\nhttps://golang.org/doc/contribute.html.\n", "release_dates": []}, {"name": "proposal", "description": "Go Project Design Documents", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Proposing Changes to Go\n\n## Introduction\n\nThe Go project's development process is design-driven.\nSignificant changes to the language, libraries, or tools\n(which includes API changes in the main repo and all golang.org/x repos,\nas well as command-line changes to the `go` command)\nmust be first discussed, and sometimes formally documented,\nbefore they can be implemented.\n\nThis document describes the process for proposing, documenting, and\nimplementing changes to the Go project.\n\nTo learn more about Go's origins and development process, see the talks\n[How Go Was Made](https://talks.golang.org/2015/how-go-was-made.slide),\n[The Evolution of Go](https://talks.golang.org/2015/gophercon-goevolution.slide),\nand [Go, Open Source, Community](https://blog.golang.org/open-source)\nfrom GopherCon 2015.\n\n## The Proposal Process\n\nThe proposal process is the process for reviewing a proposal and reaching\na decision about whether to accept or decline the proposal.\n\n1. The proposal author [creates a brief issue](https://golang.org/issue/new) describing the proposal.\\\n   Note: There is no need for a design document at this point.\\\n   Note: A non-proposal issue can be turned into a proposal by simply adding the proposal label.\\\n   Note: [Language changes](#language-changes) should follow a separate [template](go2-language-changes.md)\n\n2. A discussion on the issue tracker aims to triage the proposal into one of three outcomes:\n     - Accept proposal, or\n     - decline proposal, or\n     - ask for a design doc.\n\n   If the proposal is accepted or declined, the process is done.\n   Otherwise the discussion is expected to identify concerns that\n   should be addressed in a more detailed design.\n\n3. The proposal author writes a [design doc](#design-documents) to work out details of the proposed\n   design and address the concerns raised in the initial discussion.\n\n4. Once comments and revisions on the design doc wind down, there is a final\n   discussion on the issue, to reach one of two outcomes:\n    - Accept proposal or\n    - decline proposal.\n\nAfter the proposal is accepted or declined (whether after step 2 or step 4),\nimplementation work proceeds in the same way as any other contribution.\n\n## Detail\n\n### Goals\n\n- Make sure that proposals get a proper, fair, timely, recorded evaluation with\n  a clear answer.\n- Make past proposals easy to find, to avoid duplicated effort.\n- If a design doc is needed, make sure contributors know how to write a good one.\n\n### Definitions\n\n- A **proposal** is a suggestion filed as a GitHub issue, identified by having\n  the Proposal label.\n- A **design doc** is the expanded form of a proposal, written when the\n  proposal needs more careful explanation and consideration.\n\n### Scope\n\nThe proposal process should be used for any notable change or addition to the\nlanguage, libraries and tools.\n\u201cNotable\u201d includes API changes in the main repo and all golang.org/x repos,\nas well as command-line changes to the `go` command.\nIt also includes visible behavior changes in existing functionality.\nSince proposals begin (and will often end) with the filing of an issue, even\nsmall changes can go through the proposal process if appropriate.\nDeciding what is appropriate is matter of judgment we will refine through\nexperience.\nIf in doubt, file a proposal.\n\nThere is a short list of changes that are typically not in scope for the proposal process:\n\n- Making API changes in internal packages, since those APIs are not publicly visible.\n- Making API or command-line changes in golang.org/x/build, since that is code to run the Go project, not for users to import and depend on.\n- Adding new system call numbers or direct system call wrappers (`//sys` lines) in golang.org/x/sys.\n- Adding new C-equivalent data structures to support those system calls.\n\nAgain, if in doubt, file a proposal.\n\n### Compatibility\n\nPrograms written for Go version 1.x must continue to compile and work with\nfuture versions of Go 1.\nThe [Go 1 compatibility document](https://golang.org/doc/go1compat) describes\nthe promise we have made to Go users for the future of Go 1.x.\nAny proposed change must not break this promise.\n\n### Language changes\n\nIn 2018 we started a Go 2 process during which we may change the\nlanguage, as described on [the Go\nblog](https://blog.golang.org/go2-here-we-come).\nLanguage changes should follow the proposal process described here.\nAs explained in the blog entry, language change proposals should\n\n- address an important issue for many people,\n- have minimal impact on everybody else, and\n- come with a clear and well-understood solution.\n\nProposals should follow the [Go 2 template](go2-language-changes.md).\nSee the [Go 2 review minutes](https://golang.org/issue/33892)\nand the [release notes](https://golang.org/doc/devel/release.html) for\nexamples of recent language changes.\n\n### Design Documents\n\nAs noted above, some (but not all) proposals need to be elaborated in a design document.\n\n- The design doc should be checked in to [the proposal repository](https://github.com/golang/proposal/) as `design/NNNN-shortname.md`,\nwhere `NNNN` is the GitHub issue number and `shortname` is a short name\n(a few dash-separated words at most).\nClone this repository with `git clone https://go.googlesource.com/proposal`\nand follow the usual [Gerrit workflow for Go](https://golang.org/doc/contribute.html#Code_review).\n\n- The design doc should follow [the template](design/TEMPLATE.md).\n\n- The design doc should address any specific concerns raised during the initial discussion.\n\n- It is expected that the design doc may go through multiple checked-in revisions.\nNew design doc authors may be paired with a design doc \"shepherd\" to help work on the doc.\n\n- For ease of review with Gerrit, design documents should be wrapped around the\n80 column mark.\n[Each sentence should start on a new line](http://rhodesmill.org/brandon/2012/one-sentence-per-line/)\nso that comments can be made accurately and the diff kept shorter.\n  - In Emacs, loading `fill.el` from this directory will make `fill-paragraph` format text this way.\n\n- Comments on Gerrit CLs should be restricted to grammar, spelling,\nor procedural errors related to the preparation of the proposal itself.\nAll other comments should be addressed to the related GitHub issue.\n\n\n### Quick Start for Experienced Committers\n\nExperienced committers who are certain that a design doc will be\nrequired for a particular proposal\ncan skip steps 1 and 2 and include the design doc with the initial issue.\n\nIn the worst case, skipping these steps only leads to an unnecessary design doc.\n\n### Proposal Review\n\nA group of Go team members holds \u201cproposal review meetings\u201d\napproximately weekly to review pending proposals.\n\nThe principal goal of the review meeting is to make sure that proposals\nare receiving attention from the right people,\nby cc'ing relevant developers, raising important questions,\npinging lapsed discussions, and generally trying to guide discussion\ntoward agreement about the outcome.\nThe discussion itself is expected to happen on the issue tracker,\nso that anyone can take part.\n\nThe proposal review meetings also identify issues where\nconsensus has been reached and the process can be\nadvanced to the next step (by marking the proposal accepted\nor declined or by asking for a design doc).\n\nMinutes are posted to [golang.org/s/proposal-minutes](https://golang.org/s/proposal-minutes)\nafter the conclusion of the weekly meeting, so that anyone\ninterested in which proposals are under active consideration\ncan follow that issue.\n\nProposal issues are tracked in the\n[Proposals project](https://github.com/orgs/golang/projects/17) on the Go issue tracker.\nThe current state of the proposal is captured by the columns in that project,\nas described below.\n\nThe proposal review group can, at their discretion, make exceptions for\nproposals that need not go through all the stages, fast-tracking them\nto Likely Accept/Likely Decline or even Accept/Decline, such as for\nproposals that do not merit the full review or that need to be considered\nquickly due to pending releases.\n\n#### Incoming\n\nNew proposals are added to the Incoming column.\n\nThe weekly proposal review meetings aim to look at all the issues\nin the Active, Likely Accept, and Likely Decline columns.\nIf time is left over, then proposals from Incoming are selected\nto be moved to Active.\n\nHolding proposals in Incoming until attention can be devoted to them\n(at which they move to Active, and then onward) ensures that\nprogress is made moving active proposals out to Accepted or Declined,\nso we avoid [receive livelock](http://www.news.cs.nyu.edu/~jinyang/sp09/readings/mogul96usenix.pdf),\nin which accepting new work prevents finishing old work.\n\n#### Active\n\nIssues in the Active column are reviewed at each weekly proposal meeting\nto watch for emerging consensus in the discussions.\nThe proposal review group may also comment, make suggestions,\nask clarifying questions, and try to restate the proposals to make sure\neveryone agrees about what exactly is being discussed.\n\n#### Likely Accept\n\nIf an issue discussion seems to have reached\na consensus to accept the proposal, the proposal review group\nmoves the issue to the Likely Accept column\nand posts a comment noting that change.\nThis marks the final period for comments that might\nchange the recognition of consensus.\n\n#### Likely Decline\n\nIf a proposal discussion seems to have reached\na consensus to decline the proposal, the proposal review group\nmoves the issue to the Likely Decline column.\nAn issue may also be moved to Likely Decline if the\nproposal review group identifies that no consensus\nis likely to be reached and that the default of not accepting\nthe proposal is appropriate.\n\nJust as for Likely Accept, the group posts a comment noting the change,\nand this marks the final period for comments that might\nchange the recognition of consensus.\n\n#### Accepted\n\nA week after a proposal moves to Likely Accept, absent a change in consensus,\nthe proposal review group moves the proposal to the Accepted column.\nIf significant discussion happens during that week,\nthe proposal review group may leave the proposal\nin Likely Accept for another week or even move the proposal back to Active.\n\nOnce a proposal is marked Accepted, the Proposal-Accepted label is applied,\nit is moved out of the Proposal milestone into a work milestone,\nand the issue is repurposed to track the work of implementing the proposal.\n\nThe default work milestone is Backlog, indicating\nthat the work applies to the Go release itself but is not slated for a particular release.\nAnother common next milestone is Unreleased, used for work that is not part\nof any Go release (for example, work in parts of golang.org/x that are not vendored\ninto the standard releases).\n\n#### Declined\n\nA week after a proposal moves to Likely Decline, absent a change in consensus,\nthe proposal review group moves the proposal to the Declined column.\nIf significant discussion happens during that week,\nthe proposal review group may leave the proposal\nin Likely Decline for another week or even move the proposal back to Active.\nOnce a proposal is marked Declined, it is closed.\n\n#### Declined as Duplicate\n\nIf a proposal duplicates a previously decided proposal,\nthe proposal review group may decline the proposal as a duplicate\nwithout progressing through the Active or Likely Decline stages.\n\nGenerally speaking, our approach to reconsidering previously decided proposals\nfollows John Ousterhout's advice in his post\n\u201c[Open Decision-Making](https://web.stanford.edu/~ouster/cgi-bin/decisions.php),\u201d\nin particular the \u201cReconsideration\u201d section.\n\n#### Declined as Infeasible\n\nIf a proposal directly contradicts the core design of the language or of a package,\nor if a proposal is impossible to implement efficiently or at all,\nthe proposal review group may decline the proposal as infeasible\nwithout progressing through the Active or Likely Decline stages.\n\nIf it seems like there is still general interest from others,\nor that discussion may lead to a feasible proposal,\nthe proposal may also be kept open and the discussion continued.\n\n#### Declined as Retracted\n\nIf a proposal is closed or retracted in a comment by the original author,\nthe proposal review group may decline the proposal as retracted\nwithout progressing through the Active or Likely Decline stages.\n\nIf it seems like there is still general interest from others, the proposal\nmay also be kept open and the discussion continued.\n\n#### Declined as Obsolete\n\nIf a proposal is obsoleted by changes to Go that have been made\nsince the proposal was filed, the proposal review group may decline\nthe proposal as obsolete without progressing through the Active or\nLikely Decline stages.\n\nIf it seems like there is still general interest from others,\nor that discussion may lead to a different, non-obsolete proposal,\nthe proposal may also be kept open and the discussion continued.\n\n#### Hold\n\nIf discussion of a proposal requires design revisions or additional information\nthat will not be available for a couple weeks or more, the proposal review group\nmoves the proposal to the Hold column with a note of what it is waiting on.\nOnce that thing is ready, anyone who can edit the issue tracker can move the\nproposal back to the Active column for consideration at the next proposal review meeting.\n\n### Consensus and Disagreement\n\nThe goal of the proposal process is to reach general consensus about the outcome\nin a timely manner.\n\nIf proposal review cannot identify a general consensus\nin the discussion of the issue on the issue tracker,\nthe usual result is that the proposal is declined.\nIt can happen that proposal review may not identify a\ngeneral consensus and yet it is clear that the proposal\nshould not be outright declined.\nAs one example, there may be a consensus that some solution\nto a problem is important, but no consensus on which of\ntwo competing solutions should be adopted.\n\nIf the proposal review group cannot identify a consensus\nnor a next step for the proposal, the decision about the path forward\npasses to the Go architects (currently [gri@](mailto:gri@golang.org),\n[iant@](mailto:iant@golang.org), and [rsc@](mailto:rsc@golang.org)),\nwho review the discussion and aim to reach a consensus among themselves.\nIf so, they document the decision and its rationale on the issue.\n\nIf consensus among the architects cannot be reached,\nwhich is even more unusual,\nthe arbiter (currently [rsc@](mailto:rsc@golang.org))\nreviews the discussion and decides the next step,\ndocumenting the decision and its rationale on the issue.\n\n## Help\n\nIf you need help with this process, please contact the Go contributors by posting\nto the [golang-dev mailing list](https://groups.google.com/group/golang-dev).\n(Note that the list is moderated, and that first-time posters should expect a\ndelay while their message is held for moderation.)\n\nTo learn about contributing to Go in general, see the\n[contribution guidelines](https://golang.org/doc/contribute.html).\n", "release_dates": []}, {"name": "protobuf", "description": "Go support for Google's protocol buffers", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go support for Protocol Buffers\n\n[![GoDev](https://img.shields.io/static/v1?label=godev&message=reference&color=00add8)](https://pkg.go.dev/mod/github.com/golang/protobuf)\n[![Build Status](https://travis-ci.org/golang/protobuf.svg?branch=master)](https://travis-ci.org/golang/protobuf)\n\nThis module\n([`github.com/golang/protobuf`](https://pkg.go.dev/mod/github.com/golang/protobuf))\ncontains Go bindings for protocol buffers.\n\nIt has been superseded by the\n[`google.golang.org/protobuf`](https://pkg.go.dev/mod/google.golang.org/protobuf)\nmodule, which contains an updated and simplified API,\nsupport for protobuf reflection, and many other improvements.\nWe recommend that new code use the `google.golang.org/protobuf` module.\n\nVersions v1.4 and later of `github.com/golang/protobuf` are implemented\nin terms of `google.golang.org/protobuf`.\nPrograms which use both modules must use at least version v1.4 of this one.\n\nSee the\n[developer guide for protocol buffers in Go](https://developers.google.com/protocol-buffers/docs/gotutorial)\nfor a general guide for how to get started using protobufs in Go.\n\nSee\n[release note documentation](https://github.com/golang/protobuf/releases)\nfor more information about individual releases of this project.\n\nSee\n[documentation for the next major revision](https://pkg.go.dev/mod/google.golang.org/protobuf)\nfor more information about the purpose, usage, and history of this project.\n\n## Package index\n\nSummary of the packages provided by this module:\n\n*   [`proto`](https://pkg.go.dev/github.com/golang/protobuf/proto): Package\n    `proto` provides functions operating on protobuf messages such as cloning,\n    merging, and checking equality, as well as binary serialization and text\n    serialization.\n*   [`jsonpb`](https://pkg.go.dev/github.com/golang/protobuf/jsonpb): Package\n    `jsonpb` serializes protobuf messages as JSON.\n*   [`ptypes`](https://pkg.go.dev/github.com/golang/protobuf/ptypes): Package\n    `ptypes` provides helper functionality for protobuf well-known types.\n*   [`ptypes/any`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/any):\n    Package `any` is the generated package for `google/protobuf/any.proto`.\n*   [`ptypes/empty`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/empty):\n    Package `empty` is the generated package for `google/protobuf/empty.proto`.\n*   [`ptypes/timestamp`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/timestamp):\n    Package `timestamp` is the generated package for\n    `google/protobuf/timestamp.proto`.\n*   [`ptypes/duration`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/duration):\n    Package `duration` is the generated package for\n    `google/protobuf/duration.proto`.\n*   [`ptypes/wrappers`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/wrappers):\n    Package `wrappers` is the generated package for\n    `google/protobuf/wrappers.proto`.\n*   [`ptypes/struct`](https://pkg.go.dev/github.com/golang/protobuf/ptypes/struct):\n    Package `structpb` is the generated package for\n    `google/protobuf/struct.proto`.\n*   [`protoc-gen-go/descriptor`](https://pkg.go.dev/github.com/golang/protobuf/protoc-gen-go/descriptor):\n    Package `descriptor` is the generated package for\n    `google/protobuf/descriptor.proto`.\n*   [`protoc-gen-go/plugin`](https://pkg.go.dev/github.com/golang/protobuf/protoc-gen-go/plugin):\n    Package `plugin` is the generated package for\n    `google/protobuf/compiler/plugin.proto`.\n*   [`protoc-gen-go`](https://pkg.go.dev/github.com/golang/protobuf/protoc-gen-go):\n    The `protoc-gen-go` binary is a protoc plugin to generate a Go protocol\n    buffer package.\n\n## Reporting issues\n\nThe issue tracker for this project\n[is located here](https://github.com/golang/protobuf/issues).\n\nPlease report any issues with a sufficient description of the bug or feature\nrequest. Bug reports should ideally be accompanied by a minimal reproduction of\nthe issue. Irreproducible bugs are difficult to diagnose and fix (and likely to\nbe closed after some period of time). Bug reports must specify the version of\nthe\n[Go protocol buffer module](https://github.com/protocolbuffers/protobuf-go/releases)\nand also the version of the\n[protocol buffer toolchain](https://github.com/protocolbuffers/protobuf/releases)\nbeing used.\n\n## Contributing\n\nThis project is open-source and accepts contributions. See the\n[contribution guide](https://github.com/golang/protobuf/blob/master/CONTRIBUTING.md)\nfor more information.\n\n## Compatibility\n\nThis module and the generated code are expected to be stable over time. However,\nwe reserve the right to make breaking changes without notice for the following\nreasons:\n\n*   **Security:** A security issue in the specification or implementation may\n    come to light whose resolution requires breaking compatibility. We reserve\n    the right to address such issues.\n*   **Unspecified behavior:** There are some aspects of the protocol buffer\n    specification that are undefined. Programs that depend on unspecified\n    behavior may break in future releases.\n*   **Specification changes:** It may become necessary to address an\n    inconsistency, incompleteness, or change in the protocol buffer\n    specification, which may affect the behavior of existing programs. We\n    reserve the right to address such changes.\n*   **Bugs:** If a package has a bug that violates correctness, a program\n    depending on the buggy behavior may break if the bug is fixed. We reserve\n    the right to fix such bugs.\n*   **Generated additions**: We reserve the right to add new declarations to\n    generated Go packages of `.proto` files. This includes declared constants,\n    variables, functions, types, fields in structs, and methods on types. This\n    may break attempts at injecting additional code on top of what is generated\n    by `protoc-gen-go`. Such practice is not supported by this project.\n*   **Internal changes**: We reserve the right to add, modify, and remove\n    internal code, which includes all unexported declarations, the\n    [`generator`](https://pkg.go.dev/github.com/golang/protobuf/protoc-gen-go/generator)\n    package, and all packages under\n    [`internal`](https://pkg.go.dev/github.com/golang/protobuf/internal).\n\nAny breaking changes outside of these will be announced 6 months in advance to\n[protobuf@googlegroups.com](https://groups.google.com/forum/#!forum/protobuf).\n", "release_dates": ["2023-03-08T16:15:32Z", "2021-03-29T19:29:54Z", "2021-03-18T01:17:37Z", "2021-03-18T00:15:51Z", "2020-10-15T06:27:06Z", "2020-05-14T20:46:11Z", "2020-05-04T19:39:58Z", "2020-04-13T19:47:04Z", "2020-03-12T22:10:11Z", "2020-03-09T20:25:41Z", "2020-03-02T20:06:08Z", "2020-02-29T00:19:59Z", "2020-02-26T19:29:56Z", "2020-02-13T22:44:14Z", "2020-01-29T21:16:26Z", "2019-07-09T20:43:53Z", "2019-03-14T19:14:12Z", "2019-02-26T21:28:57Z", "2018-08-20T20:07:13Z", "2018-04-30T22:18:49Z", "2018-04-30T22:19:50Z"]}, {"name": "review", "description": "[mirror] Tool for working with Gerrit code reviews", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# git-codereview\n\nThe git-codereview tool is a command-line tool for working with Gerrit.\n\n## Download/Install\n\nThe easiest way to install is to run `go install golang.org/x/review/git-codereview@latest`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/review`.\n\nRun `git codereview hooks` to install Gerrit hooks for your git repository.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the review repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/review:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "scratch", "description": "[mirror] repository used for testing", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Scratch Repository\n\nThis repository is mainly for use by people learning how to use Gerrit and\ncontribute to Go.\n\n[Click here for a tutorial][gophercon-tutorial] on how to get started with a\ncontribution to this repository.\n\nA fuller, text-based tutorial based around the [core Go project can be found\nhere][core-go-tutorial].\n\n## What should I add?\n\nAdd a folder with your username, and put a main function in there. You can\nput whatever you want in your main function; see the existing directories for\nexamples.\n\nAll files should have the standard licensing header, and add appropriate\ndocumentation see the other files in this repository for an example.\n\n## Notes about Gerrit\n\nIf you have needed to change a Github pull request, you probably just added a\nsecond commit with the requested changes and pushed it. By contrast, all changes\nopened in Gerrit are a single commit, which means you need to [amend your\ncommit][amend] if the reviewer requests feedback.\n\n[amend]: http://www.joinfu.com/2013/06/pushing-revisions-to-a-gerrit-code-review/\n\nTo amend a previous commit, run `git add (list of files you changed)` to add\nyour changes, then run `git commit --amend` to amend the commit to add new\ndata. Your commit message should still summarize the entire commit (\"Add\nkevinburke/main.go\"), not just the change a reviewer asked for (\"Fix typo\").\n\nAfter you amend the commit, re-run `git codereview mail` to push that change\nto the server. Then in the Gerrit UI, find the in-line comments left by your\nreviewer, click \"Done\", go back to the main PR page, and click \"Reply\" => \"Send\"\nto tell your reviewer that you've addressed your feedback.\n\nOnce you get a \"Code-Review: +2\" from a Go contributor, your change will be\nmerged!\n\n## Need help?\n\nGerrit is not easy to get started with, and we want to help you out. If you are\nhaving trouble with Gerrit, contact the [golang-devexp][devexp] mailing list for\nhelp!\n\n[gophercon-tutorial]: https://golang.org/s/gophercon2017\n[core-go-tutorial]: https://golang.org/doc/contribute.html\n[devexp]: https://groups.google.com/forum/#!forum/golang-devexp\n", "release_dates": []}, {"name": "snappy", "description": "The Snappy compression format in the Go programming language.", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "The Snappy compression format in the Go programming language.\n\nTo use as a library:\n$ go get github.com/golang/snappy\n\nTo use as a binary:\n$ go install github.com/golang/snappy/cmd/snappytool@latest\n$ cat decoded | ~/go/bin/snappytool -e > encoded\n$ cat encoded | ~/go/bin/snappytool -d > decoded\n\nUnless otherwise noted, the Snappy-Go source files are distributed\nunder the BSD-style license found in the LICENSE file.\n\n\n\nBenchmarks.\n\nThe golang/snappy benchmarks include compressing (Z) and decompressing (U) ten\nor so files, the same set used by the C++ Snappy code (github.com/google/snappy\nand note the \"google\", not \"golang\"). On an \"Intel(R) Core(TM) i7-3770 CPU @\n3.40GHz\", Go's GOARCH=amd64 numbers as of 2016-05-29:\n\n\"go test -test.bench=.\"\n\n_UFlat0-8         2.19GB/s \u00b1 0%  html\n_UFlat1-8         1.41GB/s \u00b1 0%  urls\n_UFlat2-8         23.5GB/s \u00b1 2%  jpg\n_UFlat3-8         1.91GB/s \u00b1 0%  jpg_200\n_UFlat4-8         14.0GB/s \u00b1 1%  pdf\n_UFlat5-8         1.97GB/s \u00b1 0%  html4\n_UFlat6-8          814MB/s \u00b1 0%  txt1\n_UFlat7-8          785MB/s \u00b1 0%  txt2\n_UFlat8-8          857MB/s \u00b1 0%  txt3\n_UFlat9-8          719MB/s \u00b1 1%  txt4\n_UFlat10-8        2.84GB/s \u00b1 0%  pb\n_UFlat11-8        1.05GB/s \u00b1 0%  gaviota\n\n_ZFlat0-8         1.04GB/s \u00b1 0%  html\n_ZFlat1-8          534MB/s \u00b1 0%  urls\n_ZFlat2-8         15.7GB/s \u00b1 1%  jpg\n_ZFlat3-8          740MB/s \u00b1 3%  jpg_200\n_ZFlat4-8         9.20GB/s \u00b1 1%  pdf\n_ZFlat5-8          991MB/s \u00b1 0%  html4\n_ZFlat6-8          379MB/s \u00b1 0%  txt1\n_ZFlat7-8          352MB/s \u00b1 0%  txt2\n_ZFlat8-8          396MB/s \u00b1 1%  txt3\n_ZFlat9-8          327MB/s \u00b1 1%  txt4\n_ZFlat10-8        1.33GB/s \u00b1 1%  pb\n_ZFlat11-8         605MB/s \u00b1 1%  gaviota\n\n\n\n\"go test -test.bench=. -tags=noasm\"\n\n_UFlat0-8          621MB/s \u00b1 2%  html\n_UFlat1-8          494MB/s \u00b1 1%  urls\n_UFlat2-8         23.2GB/s \u00b1 1%  jpg\n_UFlat3-8         1.12GB/s \u00b1 1%  jpg_200\n_UFlat4-8         4.35GB/s \u00b1 1%  pdf\n_UFlat5-8          609MB/s \u00b1 0%  html4\n_UFlat6-8          296MB/s \u00b1 0%  txt1\n_UFlat7-8          288MB/s \u00b1 0%  txt2\n_UFlat8-8          309MB/s \u00b1 1%  txt3\n_UFlat9-8          280MB/s \u00b1 1%  txt4\n_UFlat10-8         753MB/s \u00b1 0%  pb\n_UFlat11-8         400MB/s \u00b1 0%  gaviota\n\n_ZFlat0-8          409MB/s \u00b1 1%  html\n_ZFlat1-8          250MB/s \u00b1 1%  urls\n_ZFlat2-8         12.3GB/s \u00b1 1%  jpg\n_ZFlat3-8          132MB/s \u00b1 0%  jpg_200\n_ZFlat4-8         2.92GB/s \u00b1 0%  pdf\n_ZFlat5-8          405MB/s \u00b1 1%  html4\n_ZFlat6-8          179MB/s \u00b1 1%  txt1\n_ZFlat7-8          170MB/s \u00b1 1%  txt2\n_ZFlat8-8          189MB/s \u00b1 1%  txt3\n_ZFlat9-8          164MB/s \u00b1 1%  txt4\n_ZFlat10-8         479MB/s \u00b1 1%  pb\n_ZFlat11-8         270MB/s \u00b1 1%  gaviota\n\n\n\nFor comparison (Go's encoded output is byte-for-byte identical to C++'s), here\nare the numbers from C++ Snappy's\n\nmake CXXFLAGS=\"-O2 -DNDEBUG -g\" clean snappy_unittest.log && cat snappy_unittest.log\n\nBM_UFlat/0     2.4GB/s  html\nBM_UFlat/1     1.4GB/s  urls\nBM_UFlat/2    21.8GB/s  jpg\nBM_UFlat/3     1.5GB/s  jpg_200\nBM_UFlat/4    13.3GB/s  pdf\nBM_UFlat/5     2.1GB/s  html4\nBM_UFlat/6     1.0GB/s  txt1\nBM_UFlat/7   959.4MB/s  txt2\nBM_UFlat/8     1.0GB/s  txt3\nBM_UFlat/9   864.5MB/s  txt4\nBM_UFlat/10    2.9GB/s  pb\nBM_UFlat/11    1.2GB/s  gaviota\n\nBM_ZFlat/0   944.3MB/s  html (22.31 %)\nBM_ZFlat/1   501.6MB/s  urls (47.78 %)\nBM_ZFlat/2    14.3GB/s  jpg (99.95 %)\nBM_ZFlat/3   538.3MB/s  jpg_200 (73.00 %)\nBM_ZFlat/4     8.3GB/s  pdf (83.30 %)\nBM_ZFlat/5   903.5MB/s  html4 (22.52 %)\nBM_ZFlat/6   336.0MB/s  txt1 (57.88 %)\nBM_ZFlat/7   312.3MB/s  txt2 (61.91 %)\nBM_ZFlat/8   353.1MB/s  txt3 (54.99 %)\nBM_ZFlat/9   289.9MB/s  txt4 (66.26 %)\nBM_ZFlat/10    1.2GB/s  pb (19.68 %)\nBM_ZFlat/11  527.4MB/s  gaviota (37.72 %)\n", "release_dates": []}, {"name": "sublime-build", "description": "The official Sublime Text package for Go build system integration.", "language": "Python", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Golang Build\n\n*Golang Build* is a Sublime Text package for compiling Go projects. It provides\nintegration between Sublime Text and the command line `go` tool.\n\nThe package consists of the following features:\n\n - A Sublime Text build system for executing:\n   - `go build`\n   - `go run`\n   - `go install`\n   - `go test` to run Tests or Benchmarks\n   - `go clean`\n   - Cross-compilation using `go build` with `GOOS` and `GOARCH`\n - Sublime Text command palette commands to:\n   - Execute `go get`\n   - Open a terminal into a Go workspace\n\n## Installation\n\nThe *Golang Build* package is installed by using\n[Package Control](https://packagecontrol.io).\n\n - If Package Control is not installed, follow the [Installation Instructions](https://packagecontrol.io/installation)\n - Open the Sublime Text command palette and run the `Package Control: Install\n   Package` command\n - Type `Golang Build` and select the package to perform the installation\n\n## Documentation\n\n### End User\n\n - [Usage](docs/usage.md)\n - [Configuration](docs/configuration.md)\n - [Commands](docs/commands.md)\n - [Changelog](changelog.md)\n - [License](LICENSE)\n - [Patents](PATENTS)\n\n### Contributor\n\n - [Contributing](CONTRIBUTING.md)\n - [Design](docs/design.md)\n - [Development](docs/development.md)\n - [Contributors](CONTRIBUTORS)\n - [Authors](AUTHORS)\n", "release_dates": []}, {"name": "sublime-config", "description": "A library for Go environment configuration in Sublime Text", "language": "Python", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# golangconfig\n\n`golangconfig` is a Sublime Text dependency designed to be a common API for\nconfiguration of Go environment variables. It is intended to be used by any and\nall Go-related Sublime Text packages in an effort to help reduce duplication\nof user configuration.\n\nThe documentation for the package is split into two audiences:\n\n - [User documentation](docs/user.md) describing how to configure Sublime Text\n   to properly work with your Go environment\n - [Package developer documentation](docs/package_developer.md) containing API\n   documentation and instructions on how to require `golangconfig` for your\n   package\n\nOther documentation:\n\n - [Changelog](docs/changelog.md)\n - [License](LICENSE)\n - [Design](docs/design.md)\n - [Development](docs/development.md)\n", "release_dates": []}, {"name": "sync", "description": "[mirror] concurrency primitives", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Sync\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/sync.svg)](https://pkg.go.dev/golang.org/x/sync)\n\nThis repository provides Go concurrency primitives in addition to the\nones provided by the language and \"sync\" and \"sync/atomic\" packages.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/sync`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/sync`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the sync repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/sync:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "sys", "description": "[mirror] Go packages for low-level interaction with the operating system", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# sys\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/sys.svg)](https://pkg.go.dev/golang.org/x/sys)\n\nThis repository holds supplemental Go packages for low-level interactions with\nthe operating system.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/sys`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/sys`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the sys repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/sys:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "talks", "description": "Go talks", "language": null, "license": null, "readme": "# Go Talks (obsolete)\n\nThe content of this repository has moved to [golang.org/x/website/_content/talks/](https://cs.opensource.google/go/x/website/+/master:_content/talks/).\n", "release_dates": []}, {"name": "telemetry", "description": "[mirror] Go Telemetry services and libraries", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Telemetry\n\nThis repository holds the Go Telemetry server code and libraries.\n\n## Linting & Formatting\n\nThis repository uses [eslint](https://eslint.org/) to format TS files,\n[stylelint](https://stylelint.io/) to format CSS files, and\n[prettier](https://prettier.io/) to format TS, CSS, Markdown, and YAML files.\n\nSee the style guides:\n\n- [TypeScript](https://google.github.io/styleguide/tsguide.html)\n- [CSS](https://go.dev/wiki/CSSStyleGuide)\n\nIt is encouraged that all TS and CSS code be run through formatters before\nsubmitting a change. However, it is not a strict requirement enforced by CI.\n\n### Installing npm Dependencies:\n\n1. Install [docker](https://docs.docker.com/get-docker/)\n2. Run `./npm install`\n\n### Run ESLint, Stylelint, & Prettier\n\n    ./npm run all\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the time repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/telemetry:\" in\nthe subject line, so it is easy to find.\n", "release_dates": []}, {"name": "term", "description": "Go terminal and console support", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go terminal/console support\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/term.svg)](https://pkg.go.dev/golang.org/x/term)\n\nThis repository provides Go terminal and console support packages.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/term`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/term`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the term repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/term:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "text", "description": "[mirror] Go text processing support", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Text\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/text.svg)](https://pkg.go.dev/golang.org/x/text)\n\nThis repository holds supplementary Go libraries for text processing, many involving Unicode.\n\n## CLDR Versioning\n\nIt is important that the Unicode version used in `x/text` matches the one used\nby your Go compiler. The `x/text` repository supports multiple versions of\nUnicode and will match the version of Unicode to that of the Go compiler. At the\nmoment this is supported for Go compilers from version 1.7.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/text`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/text`.\n\n## Contribute\nTo submit changes to this repository, see http://golang.org/doc/contribute.html.\n\nTo generate the tables in this repository (except for the encoding tables),\nrun go generate from this directory. By default tables are generated for the\nUnicode version in core and the CLDR version defined in\ngolang.org/x/text/unicode/cldr.\n\nRunning go generate will as a side effect create a DATA subdirectory in this\ndirectory, which holds all files that are used as a source for generating the\ntables. This directory will also serve as a cache.\n\n## Testing\nRun\n\n    go test ./...\n\nfrom this directory to run all tests. Add the \"-tags icu\" flag to also run\nICU conformance tests (if available). This requires that you have the correct\nICU version installed on your system.\n\nTODO:\n- updating unversioned source files.\n\n## Generating Tables\n\nTo generate the tables in this repository (except for the encoding\ntables), run `go generate` from this directory. By default tables are\ngenerated for the Unicode version in core and the CLDR version defined in\ngolang.org/x/text/unicode/cldr.\n\nRunning go generate will as a side effect create a DATA subdirectory in this\ndirectory which holds all files that are used as a source for generating the\ntables. This directory will also serve as a cache.\n\n## Versions\nTo update a Unicode version run\n\n    UNICODE_VERSION=x.x.x go generate\n\nwhere `x.x.x` must correspond to a directory in https://www.unicode.org/Public/.\nIf this version is newer than the version in core it will also update the\nrelevant packages there. The idna package in x/net will always be updated.\n\nTo update a CLDR version run\n\n    CLDR_VERSION=version go generate\n\nwhere `version` must correspond to a directory in\nhttps://www.unicode.org/Public/cldr/.\n\nNote that the code gets adapted over time to changes in the data and that\nbackwards compatibility is not maintained.\nSo updating to a different version may not work.\n\nThe files in DATA/{iana|icu|w3|whatwg} are currently not versioned.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the image repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/text:\" in the\nsubject line, so it is easy to find.\n", "release_dates": ["2018-02-21T17:04:52Z", "2017-12-14T12:54:14Z", "2017-09-14T09:29:24Z"]}, {"name": "time", "description": "[mirror] Go supplementary time packages", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Time\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/time.svg)](https://pkg.go.dev/golang.org/x/time)\n\nThis repository provides supplementary Go time packages.\n\n## Download/Install\n\nThe easiest way to install is to run `go get -u golang.org/x/time`. You can\nalso manually git clone the repository to `$GOPATH/src/golang.org/x/time`.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the time repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/time:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "tools", "description": "[mirror] Go Tools", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Tools\n\n[![PkgGoDev](https://pkg.go.dev/badge/golang.org/x/tools)](https://pkg.go.dev/golang.org/x/tools)\n\nThis repository provides the `golang.org/x/tools` module, comprising\nvarious tools and packages mostly for static analysis of Go programs,\nsome of which are listed below.\nUse the \"Go reference\" link above for more information about any package.\n\nIt also contains the\n[`golang.org/x/tools/gopls`](https://pkg.go.dev/golang.org/x/tools/gopls)\nmodule, whose root package is a language-server protocol (LSP) server for Go.\nAn LSP server analyses the source code of a project and\nresponds to requests from a wide range of editors such as VSCode and\nVim, allowing them to support IDE-like functionality.\n\n<!-- List only packages of general interest below. -->\n\nSelected commands:\n\n- `cmd/goimports` formats a Go program like `go fmt` and additionally\n  inserts import statements for any packages required by the file\n  after it is edited.\n- `cmd/callgraph` prints the call graph of a Go program.\n- `cmd/digraph` is a utility for manipulating directed graphs in textual notation.\n- `cmd/stringer` generates declarations (including a `String` method) for \"enum\" types.\n- `cmd/toolstash` is a utility to simplify working with multiple versions of the Go toolchain.\n\nThese commands may be fetched with a command such as\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\nSelected packages:\n\n- `go/ssa` provides a static single-assignment form (SSA) intermediate\n  representation (IR) for Go programs, similar to a typical compiler,\n  for use by analysis tools.\n\n- `go/packages` provides a simple interface for loading, parsing, and\n  type checking a complete Go program from source code.\n\n- `go/analysis` provides a framework for modular static analysis of Go\n  programs.\n\n- `go/callgraph` provides call graphs of Go programs using a variety\n  of algorithms with different trade-offs.\n\n- `go/ast/inspector` provides an optimized means of traversing a Go\n  parse tree for use in analysis tools.\n\n- `go/cfg` provides a simple control-flow graph (CFG) for a Go function.\n\n- `go/expect` reads Go source files used as test inputs and interprets\n  special comments within them as queries or assertions for testing.\n\n- `go/gcexportdata` and `go/gccgoexportdata` read and write the binary\n  files containing type information used by the standard and `gccgo` compilers.\n\n- `go/types/objectpath` provides a stable naming scheme for named\n  entities (\"objects\") in the `go/types` API.\n\nNumerous other packages provide more esoteric functionality.\n\n<!-- Some that didn't make the cut:\n\ngolang.org/x/tools/benchmark/parse\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/go/types/typeutil\ngolang.org/x/tools/playground\ngolang.org/x/tools/present\ngolang.org/x/tools/refactor/importgraph\ngolang.org/x/tools/refactor/rename\ngolang.org/x/tools/refactor/satisfy\ngolang.org/x/tools/txtar\n\n-->\n\n## Contributing\n\nThis repository uses Gerrit for code changes.\nTo learn how to submit changes, see https://golang.org/doc/contribute.html.\n\nThe main issue tracker for the tools repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/tools/(your\nsubdir):\" in the subject line, so it is easy to find.\n\n### JavaScript and CSS Formatting\n\nThis repository uses [prettier](https://prettier.io/) to format JS and CSS files.\n\nThe version of `prettier` used is 1.18.2.\n\nIt is encouraged that all JS and CSS code be run through this before submitting\na change. However, it is not a strict requirement enforced by CI.\n", "release_dates": ["2024-02-26T17:28:31Z", "2024-02-13T18:59:27Z", "2023-11-16T18:20:57Z", "2023-10-30T16:41:40Z", "2023-10-25T14:29:02Z", "2023-10-17T14:57:53Z", "2023-08-14T17:11:12Z", "2023-08-01T18:08:26Z", "2023-07-31T14:01:14Z", "2023-07-27T20:54:31Z", "2023-06-23T16:09:17Z", "2023-06-22T15:49:49Z", "2023-06-02T15:32:26Z", "2023-06-02T15:00:13Z", "2023-05-30T18:01:03Z", "2023-05-24T19:31:11Z", "2023-05-16T21:32:13Z", "2023-04-25T13:53:56Z", "2022-12-14T16:51:08Z", "2022-11-01T19:35:06Z", "2022-10-31T16:23:10Z", "2022-10-21T15:04:37Z", "2022-09-08T20:00:18Z", "2022-08-15T17:18:22Z", "2022-08-11T17:37:11Z", "2022-08-10T17:23:41Z", "2022-07-13T17:18:41Z", "2022-07-06T17:01:23Z", "2022-05-19T14:55:24Z", "2022-04-12T16:01:28Z"]}, {"name": "tour", "description": "[mirror] A Tour of Go", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Tour\n\nThe actual web pages for\n\u201cA Tour of Go\u201d moved to [golang.org/x/website](https://golang.org/x/website).\n\nThis repo still holds the supporting packages like\n[golang.org/x/tour/pic](https://golang.org/x/tour/pic).\n", "release_dates": []}, {"name": "vgo", "description": "[mirror] Versioned Go Prototype", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Versioned Go Command (vgo)\n\nThis repository holds a standalone implementation of a version-aware `go` command,\nallowing users with a Go 1.10 toolchain to use the new Go 1.11 module support.\n\nThe code in this repo is auto-generated from and should behave exactly like\nthe Go 1.11 `go` command, with two changes:\n\n  - It behaves as if the `GO111MODULE` variable defaults to `on`.\n  - When using a Go 1.10 toolchain, `go` `vet` during `go` `test` is disabled.\n\n## Download/Install\n\nUse `go get -u golang.org/x/vgo`.\n\nYou can also manually\ngit clone the repository to `$GOPATH/src/golang.org/x/vgo`.\n\n## Report Issues / Send Patches\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\nPlease file bugs in the main Go issue tracker,\n[golang.org/issue](https://golang.org/issue),\nand put the prefix `x/vgo:` in the issue title,\nor `cmd/go:` if you have confirmed that the same\nbug is present in the Go 1.11 module support.\n\nThank you.\n", "release_dates": []}, {"name": "vscode-go", "description": "Go extension for Visual Studio Code", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Go for Visual Studio Code\n\n[![Slack](https://img.shields.io/badge/slack-gophers-green.svg?style=flat)](https://gophers.slack.com/messages/vscode/)\n\n<!--TODO: We should add a badge for the build status or link to the build dashboard.-->\n\n[The VS Code Go extension](https://marketplace.visualstudio.com/items?itemName=golang.go)\nprovides rich language support for the\n[Go programming language](https://go.dev/).\n\n## Requirements\n\n* Visual Studio Code 1.75 or newer (or editors compatible with VS Code 1.75+ APIs)\n* Go 1.18 or newer\n\n## Quick Start\n\nWelcome! \ud83d\udc4b\ud83c\udffb<br/>\nWhether you are new to Go or an experienced Go developer, we hope this\nextension fits your needs and enhances your development experience.\n\n1.  Install [Go](https://go.dev) 1.18 or newer if you haven't already.\n\n1.  Install the [VS Code Go extension].\n\n1.  Open any Go file or go.mod file to automatically activate the extension. The\n    [Go status bar](https://github.com/golang/vscode-go/wiki/ui) appears in the\n    bottom right corner of the window and displays your Go version.\n\n1.  The extension depends on `go`, `gopls` (the Go language server), and optional\n    tools depending on your settings. If `gopls` is missing, the extension will\n    try to install it. The :zap: sign next to the Go version indicates\n    the language server is running, and you are ready to go.\n\n<p align=\"center\">\n<img src=\"docs/images/gettingstarted.gif\" width=75%>\n<br/>\n<em>(Install Missing Tools)</em>\n</p>\n\nYou are ready to Go :-) &nbsp;&nbsp; \ud83c\udf89\ud83c\udf89\ud83c\udf89\n\n## What's next\n\n* Explore more [features][full feature breakdown] of the VS Code Go extension.\n* View the\n  [settings documentation](https://github.com/golang/vscode-go/wiki/settings)\n\tand [advanced topics](https://github.com/golang/vscode-go/wiki/advanced) to\n\tcustomize the extension.\n* View the [tools documentation](https://github.com/golang/vscode-go/wiki/tools)\n  for a complete list of tools the VS Code Go extension depends on. You can\n  install additional tools and update them by using \"Go: Install/Update Tools\".\n* Solve issues with the\n  [general troubleshooting](https://github.com/golang/vscode-go/wiki/troubleshooting)\n\tand [debugging troubleshooting](https://github.com/golang/vscode-go/wiki/debugging#troubleshooting)\n\tguides.\n* [file an issue](https://github.com/golang/vscode-go/issues/new/choose) for\n  problems with the extension.\n* Start a [GitHub discussion](https://github.com/golang/vscode-go/discussions)\n  or get help on [Stack Overflow].\n* Explore Go language resources on [go.dev/learn](https://go.dev/learn) and\n  [golang.org/help](https://golang.org/help).\n\nIf you are new to Go, [this article](https://golang.org/doc/code.html) provides\nthe overview on Go code organization and basic `go` commands. Watch [\"Getting\nstarted with VS Code Go\"] for an explanation of how to build your first Go\napplication using VS Code Go.\n\n## Feature highlights\n\n* [IntelliSense] - Results appear for symbols as you type.\n* [Code navigation] - Jump to or peek at a symbol's declaration.\n* [Code editing] - Support for saved snippets, formatting and code organization,\n  and automatic organization of imports.\n* [Diagnostics] -  Build, vet, and lint errors shown as you type or on save.\n* Enhanced support for [testing] and [debugging]\n\nSee the [full feature breakdown] for more details.\n\n<p align=center>\n<img src=\"docs/images/completion-signature-help.gif\" width=75%>\n<br/>\n<em>(Code completion and Signature Help)</em>\n</p>\n\nIn addition to integrated editing features, the extension provides several\ncommands for working with Go files. You can access any of these by opening the\nCommand Palette (`Ctrl+Shift+P` on Linux/Windows and `Cmd+Shift+P` on Mac), and\nthen typing in the command name. See the\n[full list of commands](https://github.com/golang/vscode-go/wiki/commands#detailed-list) provided by this\nextension.\n\n<p align=center>\n<img src=\"docs/images/toggletestfile.gif\" width=75%>\n<br/><em>(Toggle Test File)</em></p>\n\n**\u26a0\ufe0f Note**: the default syntax highlighting for Go files is provided by a\n[TextMate rule](https://github.com/jeff-hykin/better-go-syntax) embedded in VS\nCode, not by this extension.\n\nFor better syntax highlighting, we recommend enabling\n[semantic highlighting](https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide)\nby turning on [Gopls' `ui.semanticTokens` setting](https://github.com/golang/vscode-go/wiki/settings#uisemantictokens).\n    ```\n    \"gopls\": { \"ui.semanticTokens\": true }\n    ```\n\n## Setting up your workspace\n\nThe VS Code Go extension supports both `GOPATH` and Go modules modes.\n\n[Go modules](https://golang.org/ref/mod) are used to manage dependencies in\nrecent versions of Go. Modules replace the `GOPATH`-based approach to specifying\nwhich source files are used in a given build, and they are the default build\nmode in go1.16+. We highly recommend Go development in module mode. If you are\nworking on existing projects, please consider migrating to modules.\n\nUnlike the traditional `GOPATH` mode, module mode does not require the workspace\nto be located under `GOPATH` nor to use a specific structure. A module is\ndefined by a directory tree of Go source files with a `go.mod` file in the\ntree's root directory.\n\nYour project may involve one or more modules. If you are working with multiple\nmodules or uncommon project layouts, you will need to configure your workspace\nby using [Workspace Folders]. See the\n[Supported workspace layouts documentation] for more information.\n\n## Preview version\n\nIf you'd like to get early access to new features and bug fixes, you can use the\nnightly build of this extension. Learn how to install it in by reading the\n[Go Nightly documentation](https://github.com/golang/vscode-go/wiki/nightly).\n\n## Telemetry\n\nVS Code Go extension relies on the [Go Telemetry](https://telemetry.go.dev) to\nlearn insights about the performance and stability of the extension and the\nlanguage server (`gopls`).\n**Go Telemetry data uploading is disabled by default** and can be enabled\nwith the following command:\n\n```\ngo run golang.org/x/telemetry/cmd/gotelemetry@latest on\n```\n\nAfter telemetry is enabled, the language server will upload metrics and stack\ntraces to [telemetry.go.dev](https://telemetry.go.dev). You can inspect what\ndata is collected and can be uploaded by running:\n\n```\ngo run golang.org/x/telemetry/cmd/gotelemetry@latest view\n```\n\nIf we get enough adoption, this data can significantly advance the pace of\nthe Go extension development, and help us meet a higher standard\nof reliability. For example:\n\n- Even with [semi-automated crash\n  reports](https://github.com/golang/vscode-go/issues?q=is%3Aissue+is%3Aopen+label%3AautomatedReport)\n  in VS Code, we've seen several crashers go unreported for weeks or months.\n- Even with [a suite of\n  benchmarks](https://perf.golang.org/dashboard/?benchmark=all&repository=tools&branch=release-branch.go1.20),\n  some performance regressions don't show up in our benchmark environment (such\n  as the [completion bug](https://go.dev/issue/62665) mentioned below!).\n- Even with [lots of great\n  ideas](https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3Agopls+label%3Afeaturerequest)\n  for how to improve gopls, we have limited resources. Telemetry can help us\n  identify which new features are most important, and which existing features\n  aren't being used or aren't working well.\n\nThese are just a few ways that telemetry can improve gopls. The [telemetry blog\npost series](https://research.swtch.com/telemetry-uses) contains many more.\n\nGo telemetry is designed to be transparent and privacy-preserving. If you have\nconcerns about enabling telemetry, you can learn more at\n[https://telemetry.go.dev/privacy](https://telemetry.go.dev/privacy).\n\n## Contributing\n\nWe welcome your contributions and thank you for working to improve the Go\ndevelopment experience in VS Code. If you would like to help work on the VS Code\nGo extension, see our\n[contribution guide](https://github.com/golang/vscode-go/wiki/contributing) to\nlearn how to build and run the VS Code Go extension locally and contribute to\nthe project.\n\n## Code of Conduct\n\nThis project follows the\n[Go Community Code of Conduct](https://golang.org/conduct). If you encounter a\nconduct-related issue, please mail conduct@golang.org.\n\n## License\n\n[MIT](LICENSE)\n\n[Stack Overflow]: https://stackoverflow.com/questions/tagged/go+visual-studio-code\n[`gopls`]: https://golang.org/s/gopls\n[`go`]: https://golang.org/cmd/go\n[Managing extensions in VS Code]: https://code.visualstudio.com/docs/editor/extension-gallery\n[VS Code Go extension]: https://marketplace.visualstudio.com/items?itemName=golang.go\n[Go installation guide]: https://golang.org/doc/install\n[\"Getting started with VS Code Go\"]: https://youtu.be/1MXIGYrMk80\n[IntelliSense]: https://github.com/golang/vscode-go/wiki/features#intellisense\n[Code navigation]: https://github.com/golang/vscode-go/wiki/features#code-navigation\n[Code editing]: https://github.com/golang/vscode-go/wiki/features#code-editing\n[diagnostics]: https://github.com/golang/vscode-go/wiki/features#diagnostics\n[testing]: https://github.com/golang/vscode-go/wiki/features#run-and-test-in-the-editor\n[debugging]: https://github.com/golang/vscode-go/wiki/debugging#features\n[full feature breakdown]: https://github.com/golang/vscode-go/wiki/features\n[workspace documentation]: https://github.com/golang/tools/blob/master/gopls/doc/workspace.md\n[`Go: Install/Update Tools` command]: https://github.com/golang/vscode-go/wiki/commands#go-installupdate-tools\n[Supported workspace layouts documentation]: https://github.com/golang/tools/blob/master/gopls/doc/workspace.md\n[Workspace Folders]: https://code.visualstudio.com/docs/editor/multi-root-workspaces\n", "release_dates": ["2024-02-22T15:40:32Z", "2024-02-21T22:01:22Z", "2024-02-14T19:04:57Z", "2024-02-14T16:09:27Z", "2024-02-12T14:50:08Z", "2024-01-24T00:06:58Z", "2024-01-22T16:03:06Z", "2023-12-21T15:24:24Z", "2023-12-19T21:06:31Z", "2023-11-16T18:37:55Z", "2023-11-09T17:12:53Z", "2023-07-17T14:54:46Z", "2023-07-17T13:53:09Z", "2023-06-13T17:33:59Z", "2023-06-08T21:46:08Z", "2023-02-28T17:56:28Z", "2023-02-24T19:05:25Z", "2023-01-17T21:41:32Z", "2023-01-17T21:31:26Z", "2023-01-17T18:20:01Z", "2022-12-19T16:07:55Z", "2022-12-14T19:53:07Z", "2022-11-07T17:48:54Z", "2022-11-03T14:10:03Z", "2022-08-16T17:32:47Z", "2022-08-15T16:31:17Z", "2022-07-19T15:56:41Z", "2022-07-19T15:31:34Z", "2022-07-18T16:35:26Z", "2022-07-14T19:04:24Z"]}, {"name": "vuln", "description": "[mirror] the database client and tools for the Go vulnerability database", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go Vulnerability Management\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/vuln.svg)](https://pkg.go.dev/golang.org/x/vuln)\n\nGo's support for vulnerability management includes tooling for analyzing your\ncodebase and binaries to surface known vulnerabilities in your dependencies.\nThis tooling is backed by the Go vulnerability database, which is curated by\nthe Go security team. Go\u2019s tooling reduces noise in your results by only\nsurfacing vulnerabilities in functions that your code is actually calling.\n\nYou can install the latest version of govulncheck using\n[go install](https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies)\n\n```\ngo install golang.org/x/vuln/cmd/govulncheck@latest\n```\n\nThen, run govulncheck inside your module:\n```\ngovulncheck ./...\n```\n\nSee [the govulncheck tutorial](https://go.dev/doc/tutorial/govulncheck) to get\nstarted, and [https://go.dev/security/vuln](https://go.dev/security/vuln) for\nmore information about Go's support for vulnerability management. The API\ndocumentation can be found at\n[https://pkg.go.dev/golang.org/x/vuln/scan](https://pkg.go.dev/golang.org/x/vuln/scan).\n\n## Privacy Policy\n\nThe privacy policy for `govulncheck` can be found at\n[https://vuln.go.dev/privacy](https://vuln.go.dev/privacy).\n\n## License\n\nUnless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the LICENSE file.\n\nDatabase entries available at https://vuln.go.dev are distributed under the\nterms of the [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/) license.\n", "release_dates": []}, {"name": "vulndb", "description": "[mirror] The Go Vulnerability Database", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# The Go Vulnerability Database\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/vulndb.svg)](https://pkg.go.dev/golang.org/x/vulndb)\n\nThis repository contains the infrastructure and internal reports to create the\n[Go Vulnerability Database](https://vuln.go.dev).\n\nCheck out [https://go.dev/security/vuln](https://go.dev/security/vuln) for more\ninformation about the Go vulnerability management system.\n\n## Reporting a vulnerability or feedback\n\n[Click here](https://github.com/golang/vulndb/issues/new/choose) to report a\npublic vulnerability in the Go ecosystem, or give feedback about the project.\n\n## Privacy Policy\n\nThe privacy policy for `govulncheck` can be found at\n[https://vuln.go.dev/privacy](https://vuln.go.dev/privacy.html).\n\n## License\n\nUnless otherwise noted, the Go source files are distributed under\nthe BSD-style license found in the LICENSE file.\n\nDatabase entries are distributed under the terms of the\n[CC-BY-4.0](https://creativecommons.org/licenses/by/4.0/) license. See\n[go.dev/security/vuln/database](https://go.dev/security/vuln/database) for\ninformation on how to access these entries.\n", "release_dates": []}, {"name": "website", "description": "[mirror] Home of the go.dev and golang.org websites", "language": "HTML", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Go website\n\n[![Go Reference](https://pkg.go.dev/badge/golang.org/x/website.svg)](https://pkg.go.dev/golang.org/x/website)\n\nThis repo holds content and serving programs for the go.dev and golang.org web sites.\n\nContent is in \\_content/ (go.dev) and tour/ (go.dev/tour).\nServer code is in cmd/ and internal/.\n\nTo run the combined go.dev+golang.org server to preview local content changes, use:\n\n    go run ./cmd/golangorg\n\nThe supporting programs cmd/admingolangorg and cmd/googlegolangorg\nare the servers for admin.golang.org and google.golang.org.\n(They do not use the \\_content/ directories.)\n\nEach command directory has its own README.md explaining deployment.\n\n## JS/TS/CSS Formatting\n\nThis repository uses [eslint](https://eslint.org/) to format JS and TS files,\nand [stylelint](https://stylelint.io/) to format CSS files.\n\nSee also:\n\n- [CSS](https://go.dev/wiki/CSSStyleGuide)\n- [JavaScript](https://google.github.io/styleguide/jsguide.html)\n- [TypeScript](https://google.github.io/styleguide/tsguide.html)\n\nIt is encouraged that all JS, TS, and CSS code be run through formatters before\nsubmitting a change. However, it is not a strict requirement enforced by CI.\n\n### Installing npm Dependencies:\n\n1. Install [docker](https://docs.docker.com/get-docker/)\n2. Create a .gitignore file at repo root\n3. Add .gitignore and node_modules to .gitignore\n4. Run `./npm install`\n\n### Run ESlint\n\n    ./npx eslint [options] [file] [dir]\n\n### Run Stylelint\n\n    ./npx stylelint [input] [options]\n\n## TypeScript Support\n\nTypeScript files served from _content are transformed into JavaScript.\nReference .ts files in html templates as module code.\n\n  `<script type=\"module\" src=\"/ts/filename.ts\">`\n\nWrite unit tests for TypeScript code using the [jest](https://jestjs.io/)\ntesting framework.\n\n### Run Jest\n\n    ./npx jest [TestPathPattern]\n\n## Deploying\n\nEach time a CL is reviewed and submitted, the code is deployed to App Engine.\nSee [cmd/golangorg/README.md](cmd/golangorg/README.md#deploying-to-go_dev-and-golang_org) for details.\n\n## Report Issues / Send Patches\n\nThis repository uses Gerrit for code changes. To learn how to submit changes to\nthis repository, see https://go.dev/doc/contribute.\n\nThe main issue tracker for the website repository is located at\nhttps://github.com/golang/go/issues. Prefix your issue with \"x/website:\" in the\nsubject line, so it is easy to find.\n", "release_dates": []}, {"name": "wiki", "description": "[mirror] Go Wiki", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "winstrap", "description": "Bootstrapping tools for windows builders", "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "This tool bootstraps a fresh Windows VM into being a Go buildbot.\n\nWe cross-compile this into a Windows exe from Mac or Linux or whatever\nand then on Windows do something like this:\n\n  http://golang.org/s/windowsbuilderhowto\n\nThe latest windows executable is:\n\n  https://storage.googleapis.com/winstrap/winstrap-2015-02-11-046f2a8.exe\n", "release_dates": []}, {"name": "xerrors", "description": null, "language": "Go", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "This repository holds the transition packages for the new Go 1.13 error values.\nSee golang.org/design/29934-error-values.\n", "release_dates": []}]