[{"name": ".github", "description": "Readme for https://github.com/ipfs", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "2019.ipfs.camp", "description": "IPFS Camp 2019 Website", "language": "TypeScript", "license": null, "readme": "# IPFS Camp 2019 \ud83c\udfd5\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n\n### Build distribution release\n\n    yarn && yarn run build\n\n### Developing\n\n    yarn && yarn start\n\n### React + TypeScript cheatsheet\n\n    https://github.com/sw-yx/react-typescript-cheatsheet\n", "release_dates": []}, {"name": "aegir", "description": "AEgir - Automated JavaScript project building", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/aegir.svg?style=flat-square)](https://codecov.io/gh/ipfs/aegir)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/aegir/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/aegir/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> JavaScript project management\n\n## Install\n\n```console\n$ npm i aegir\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `Aegir` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/aegir/dist/index.min.js\"></script>\n```\n\n## Project Structure\n\nThe project structure when using this is quite strict, to ease replication and configuration overhead.\n\nAll source code should be placed under `src`, with the main entry point being `src/index.js` or `src/index.ts`.\n\nAll test files should be placed under `test`. Individual test files should end in `.spec.js` or `.spec.ts` and will be ran in all environments (node, browser, webworker, electron-main and electron-renderer). To run node specific tests a file named `test/node.js` or `test/node.ts` should be used to require all node test files and the same thing for the other environments with a file named `test/browser.js` or `test/browser.ts`.\n\nYour `package.json` should have the following entries and should pass `aegir lint-package-json`.\n\n```json\n\"main\": \"src/index.js\",\n\"files\": [\n  \"src\",\n  \"dist\"\n],\n\"scripts\": {\n  \"lint\": \"aegir lint\",\n  \"release\": \"aegir release\",\n  \"build\": \"aegir build\",\n  \"test\": \"aegir test\",\n  \"test:node\": \"aegir test --target node\",\n  \"test:browser\": \"aegir test --target browser\"\n}\n```\n\n## CLI\n\nRun `aegir --help`\n\n```bash\nUsage: aegir <command> [options]\n\nCommands:\n  aegir completion                   generate completion script\n  aegir build                        Builds a browser bundle and TS type declara\n                                     tions from the `src` folder.\n  aegir check-project                Ensure your project has the correct config.\n  aegir check                        Check project\n  aegir clean [files..]              Remove created build artifacts.\n  aegir dependency-check [input...]  Run `dependency-check` cli with aegir defau\n                                     lts.              [aliases: dep-check, dep]\n  aegir docs                         Generate documentation from TS type declara\n                                     tions.\n  aegir document-check [input...]    Run `document-check` cli with aegir default\n                                     s.                     [aliases: doc-check]\n  aegir lint-package-json            Lint package.json with aegir defaults.\n                                                    [aliases: lint-package, lpj]\n  aegir lint                         Lint all project files\n  aegir release                      Release using semantic-release\n  aegir release-rc                   Release an RC version of the current module\n                                      or monorepo\n  aegir test-dependant [repo]        Run the tests of an module that depends on\n                                     this module to see if the current changes h\n                                     ave caused a regression\n  aegir test                         Test your code in different environments\n  aegir exec <command>               Run a command in each project of a monorepo\n  aegir run <scripts..>              Run one or more npm scripts in each project\n                                      of a monorepo\n\nGlobal Options:\n  -h, --help     Show help                                             [boolean]\n  -v, --version  Show version number                                   [boolean]\n  -d, --debug    Show debug output.                   [boolean] [default: false]\n\nExamples:\n  aegir build                               Runs the build command to bundle JS\n                                            code for the browser.\n  npx aegir build                           Can be used with `npx` to use a loca\n                                            l version\n  aegir test -t webworker -- --browser fir  If the command supports `--` can be\n  efox                                      used to forward options to the under\n                                            lying tool.\n  npm test -- -- --browser firefox          If `npm test` translates to `aegir t\n                                            est -t browser` and you want to forw\n                                            ard options you need to use `-- --`\n                                            instead.\n\nUse `aegir <command> --help` to learn more about each command.\n```\n\n## Configuration\n\nAegir can be fully configured using a config file named `.aegir.js` or the package.json using the property `aegir`.\n\n```js\n// file: .aegir.js\n\n/** @type {import('aegir').PartialOptions} */\nmodule.exports = {\n  tsRepo: true,\n  release: {\n    build: false\n  }\n}\n```\n\n```json\n// file: package.json\n\"main\": \"src/index.js\",\n\"files\": [\n  \"src\",\n  \"dist\"\n],\n\"scripts\": {\n  \"lint\": \"aegir lint\",\n  \"release\": \"aegir release\",\n  \"build\": \"aegir build\",\n  \"test\": \"aegir test\",\n  \"test:node\": \"aegir test --target node\",\n  \"test:browser\": \"aegir test --target browser\"\n},\n\"aegir\" : {\n  \"tsRepo\": false\n}\n```\n\nYou can find the complete default config [here](https://github.com/ipfs/aegir/blob/master/src/config/user.js#L12) and the types [here](https://github.com/ipfs/aegir/blob/master/src/types.d.ts).\n\n## Continuous Integration\n\nCheck this template for Github Actions <https://github.com/ipfs/aegir/blob/master/md/github-actions.md>\n\n## Testing helpers\n\nIn addition to running the tests `aegir` also provides several helpers to be used by the tests.\n\nCheck the [documentation](https://ipfs.github.io/aegir/)\n\n## Typescript\n\nAegir will detect the presence of `tsconfig.json` files and build typescript as appropriate.\n\n## Release steps\n\n1. Run linting\n2. Run type check\n3. Run tests\n4. Bump the version in `package.json`\n5. Build everything\n6. Update contributors based on the git history\n7. Generate a changelog based on the git log\n8. Commit the version change & `CHANGELOG.md`\n9. Create a git tag\n10. Run `git push` to `origin/master`\n11. Publish a release to Github releases\n12. Generate documentation and push to Github Pages\n13. Publish to npm\n\n```bash\naegir release --help\n```\n\n## API Docs\n\n- <https://ipfs.github.io/aegir>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/aegir/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-27T13:09:18Z", "2024-02-12T11:24:07Z", "2024-02-06T07:59:25Z", "2024-01-17T12:39:11Z", "2024-01-17T09:59:48Z", "2024-01-15T11:04:48Z", "2024-01-12T14:16:12Z", "2024-01-12T13:26:53Z", "2024-01-12T08:46:39Z", "2024-01-08T14:43:14Z", "2024-01-06T09:02:10Z", "2024-01-06T08:50:38Z", "2023-12-30T11:29:56Z", "2023-12-30T11:04:44Z", "2023-12-30T07:26:56Z", "2023-12-20T11:24:19Z", "2023-12-20T09:15:43Z", "2023-12-20T08:43:58Z", "2023-12-12T19:57:25Z", "2023-12-03T08:49:47Z", "2023-11-30T16:47:32Z", "2023-11-30T16:31:00Z", "2023-11-30T08:37:55Z", "2023-11-27T09:58:55Z", "2023-11-06T07:11:55Z", "2023-11-02T13:25:25Z", "2023-11-02T12:27:52Z", "2023-11-02T10:12:20Z", "2023-11-02T07:15:58Z", "2023-10-30T16:32:12Z"]}, {"name": "aegir-typedoc-theme", "description": "Aegir themes for TypeDoc.", "language": "Handlebars", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Default themes for TypeDoc\n\nThis module contains the default themes of TypeDoc.\nVisit https://typedoc.org/ to learn more about TypeDoc.\n\n\n## Contributing\n\nContributions are welcome and appreciated. You can find TypeDoc on GitHub, feel free to start\nan issue or create a pull requests:<br>\n[https://github.com/TypeStrong/typedoc](https://github.com/TypeStrong/typedoc)\n\nTo use a local build of this project, run the `npm pack` command in this directory. Then\nin the project where you want to use your local build run `npm install ../path/to/typedoc-default-themes-VERSION.tgz`\n\n\n## License\n\nCopyright (c) 2015 [Sebastian Lenz](http://www.sebastian-lenz.de).<br>\nCopyright (c) 2016-2020 [TypeDoc Contributors](https://github.com/TypeStrong/typedoc/graphs/contributors).<br>\nLicensed under the Apache License 2.0.", "release_dates": ["2020-11-12T16:59:56Z", "2020-05-26T14:20:51Z"]}, {"name": "apps", "description": "Coordinating writing apps on top of ipfs, and their concerns.", "language": null, "license": null, "readme": "# apps\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![](https://img.shields.io/badge/discussion_repo-go_to_issues-brightgreen.svg?style=flat-square)](https://github.com/ipfs/apps/issues)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> Coordinating writing apps on top of ipfs, and their concerns.\n\nThis is a **discussion repo**. That means that all of the work gets done in the [issues](https://github.com/ipfs/apps/issues).\n\n## Contribute\n\nFeel free to join in. All welcome.\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[CC-BY 3.0](https://creativecommons.org/licenses/by/3.0/us/) Protocol Labs\n", "release_dates": []}, {"name": "areweinterplanetaryyet.org", "description": "is IPFS actually InterPlanetary yet?", "language": "HTML", "license": null, "readme": "## Is IPFS actually InterPlanetary yet?\n\n**YES. IPFS has reached earth orbit at least once.**\n\nThis is the source for the website areweinterplanetaryyet.org\n", "release_dates": []}, {"name": "artwork", "description": "Open-licensed IPFS-related artwork", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# IPFS Artwork\nOpen-licensed IPFS-related artwork\n", "release_dates": []}, {"name": "awesome-ipfs", "description": "Community list of awesome projects, apps, tools, pinning services and more related to IPFS.", "language": "JavaScript", "license": {"key": "cc0-1.0", "name": "Creative Commons Zero v1.0 Universal", "spdx_id": "CC0-1.0", "url": "https://api.github.com/licenses/cc0-1.0", "node_id": "MDc6TGljZW5zZTY="}, "readme": "# Awesome IPFS [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\nThis is a community list of awesome projects, apps, tools, and services related to IPFS.\n\nTo submit your project, read the [Content Policy](https://github.com/ipfs/awesome-ipfs/blob/main/CONTRIBUTING.md#content-policy), and [**submit a PR**](https://github.com/ipfs/awesome-ipfs/edit/main/README.md)\n\n## Table of Contents\n\n- [Implementations](#implementations)\n- [Apps](#apps)\n- [Browsers](#browsers)\n- [Tools](#tools)\n- [Services & Platforms](#services--platforms)\n- [Pinning Services](#pinning-services)\n- [Stale Projects](#stale-projects)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Implementations\nIPFS is an open-source project that encourages the development of multiple implementations of the protocol, each of which seeks to optimize for various use cases.\n\nCheck out the list of [IPFS implementations](https://docs.ipfs.tech/concepts/ipfs-implementations/#popular-or-actively-maintained) in the IPFS docs.\n\n## Apps\n\n- [Agregore](https://github.com/AgregoreWeb/agregore-browser) - A minimal web browser for the distributed web. Supports downloading/uploading data from IPFS using the browser's `fetch()` API\n- [Anytype](https://github.com/anyproto) - Anytype is a no-code, modular web builder designed to give ownership back to creators. It's built on our private, local-first, p2p-synced and open Anysync protocol.\n- [archiveweb.page](https://github.com/webrecorder/archiveweb.page) - A High-Fidelity Web Archiving Extension for Chrome and Chromium based browsers with support for IPFS.\n- [Autonomica \"IPFS Social Proof\"](https://github.com/IBM/ipfs-social-proof) - Autonomica is a Keybase-like Dapp for creating an identity and proving this identity via published social media and web proofs.\n- [brig](https://github.com/sahib/brig) - File synchronization with git like interface and FUSE filesystem.\n- [Diffuse](https://github.com/icidasset/diffuse) - Play music from your IPFS node, or any other cloud/distributed storage service you use.\n- [Durin](https://durin.site/) - Mobile app for accessing and uploading content on the IPFS network.\n- [Hardbin](https://github.com/jes/hardbin) - Hardbin is an encrypted pastebin, with the decryption key passed in the URL fragment\n- [InterPlanetary Wayback](https://github.com/oduwsdl/ipwb) - Web Archive (WARC) indexing and replay using IPFS.\n- [Interplanetary Wiki](https://github.com/jamescarlyle/ipfs-wiki) - Wiki built on top of IPFS\n- [IPFessay](https://gitlab.com/stavros/IPFessay) - A simple way to publish uncensorable essays on IPFS.\n- [IPFS Desktop](https://github.com/ipfs-shipyard/ipfs-desktop) - IPFS Desktop gives you all the power of IPFS in a convenient desktop app: a complete IPFS node, plus handy OS menubar/taskbar shortcuts and an all-in-one file manager, peer map, and content explorer.\n- [ipfs-chat](https://github.com/SomajitDey/ipfs-chat) - Terminal-based, encrypted chatrooms. Allows private messaging & secure in-chat file/directory sharing. Server/broker-less (no signaling/rendezvous server needed). Works over LAN/internet(w/ NAT-traversal).\n- [IPFS-FPS](https://github.com/underscoredLabs/webgl-ipfs-fps) - A completely decentralized first person shooter. Built with Unity, Fleek, Unstoppable Domans and Pinata.\n- [killcord](https://github.com/nomasters/killcord) - A censorship resistant deadman's switch\n- [Mintter](https://github.com/MintterHypermedia/mintter) - Mintter\u00a0Hypermedia\u00a0is an\u00a0open system, built on\u00a0IPFS, that allows communities to collaborate on content that is structured and deeply linked. All content in the system is cryptographically signed, versioned, and made permanent with IPFS.\n- [orbitchat.dev](https://github.com/cppshane/orbit-chat) - Ultra simple chatrooms on the web.\n- [Peer Web Site](https://github.com/Weedshaker/PeerWebSite) - Peer to Peer Web Site hosting at your fingertips! Send full featured HTML (incl. CSS, JS) sites from your browser and attach files eg. videos, images, etc.\n- [Peergos](https://github.com/Peergos/Peergos) - End-to-end encrypted, peer-to-peer file storage and sharing.\n- [PushToTalk](http://timothy.hobbs.cz/push-to-talk/index.html) - Push to Talk lets you edit audio essays and publish them with IPFS.\n- [Quiet](https://tryquiet.org/) - Privacy focused, end-to-end encrypted chat app that runs a private IPFS network over Tor connections. Desktop and mobile iOS and Android apps available.\n- [Skiff](https://github.com/skiff-org/skiff-mail) - Privacy-first, end-to-end encrypted email, file storage, and collaboration platform using IPFS storage.\n\n## Browsers\nA list of web browsers with IPFS integrations\n- [Agregore](https://github.com/AgregoreWeb/agregore-browser) - A minimal web browser for the distributed web. Supports downloading/uploading data from IPFS using the browser's `fetch()` API\n- [Brave](https://brave.com/ipfs-support/) - A privacy-focused browser with many future forward features.\n- [galacteek](https://github.com/pinnaculum/galacteek) - A multi-platform Qt5-based browser for the distributed web.\n- [Opera](https://blogs.opera.com/tips-and-tricks/2021/02/opera-crypto-files-for-keeps-ipfs-unstoppable-domains/) - Opera browser added support for `ipfs://` in 2021\n\n## Tools\n\n- [bifrost-gateway](https://github.com/ipfs/bifrost-gateway) - [EXPERIMENTAL] A lightweight IPFS Gateway daemon backed by a remote data store.\n- [create-ipfs-app](https://github.com/alexbakers/create-ipfs-app) - Set up a decentralized web3 app by running one command.\n- [dScan](https://github.com/p2plabsxyz/dscan) - A browser extension that uploads the content to Web3.Storage and generates QR codes for CIDs.\n- [dump-ipfs](https://github.com/quasarch/dump-ipfs) - A decentralized encrypted backup agent for popular databases supported by IPFS and Filecoin.\n- [gatsby-plugin-ipfs](https://github.com/moxystudio/gatsby-plugin-ipfs) - Adds support for deploying Gatsby websites to IPFS by ensuring that assets are relative.\n- [git-ipfs-rehost](https://github.com/whyrusleeping/git-ipfs-rehost) - A script to rehost your git repos in ipfs.\n- [git-remote-ipfs](https://github.com/cryptix/git-remote-ipfs) - push/pull repositories from/to IPFS.\n- [Git IPFS Remote Bridge](https://github.com/ElettraSciComp/Git-IPFS-Remote-Bridge) - set of programs written in Python 3 which allow Git user to clone, push, fetch, self-host or release Git repositories over IPFS decentralized data storage system.\n- [go-orbit-db](https://github.com/berty/go-orbit-db) - This is a Golang port of OrbitDB that intends to be fully compatible with the original JavaScript version. OrbitDB is a serverless, distributed, peer-to-peer database.\n- [gomobile-ipfs](https://github.com/ipfs-shipyard/gomobile-ipfs) - IPFS and libp2p on Mobile, with Gomobile.\n- [http2ipfs](https://github.com/jbenet/http2ipfs-web) - This is a simple webtool to add URLs to an IPFS node.\n- [IPDR](https://github.com/miguelmota/ipdr) - IPFS-backed Docker Registry.\n- [IPFS Setup Action](https://github.com/ibnesayeed/setup-ipfs) - A GitHub Action to install and initialize go-ipfs to provision a cross-platform test environment on GitHub's CI platform.\n- [ipfs-action](https://github.com/aquiladev/ipfs-action) - GitHub Action for delivery of static websites.\n- [ipfs-add-from-encrypted](https://github.com/TroyWilson1/ipfs-add-from-encrypted) - Encrypt a file or directory with AES256 then add to IPFS.\n- [ipfs-companion](https://github.com/ipfs/ipfs-companion) - Browser extension that simplifies access to IPFS resources.\n- [ipfs-deploy](https://github.com/agentofuser/ipfs-deploy) - Zero-config CLI to deploy static websites: cd my-static-website && npx @agentofuser/ipfs-deploy\n- [ipfs-encrypted-share](https://github.com/whs/ipfs-encrypted-share) - Easy to use encrypted file uploader.\n- [ipfs-mount](https://github.com/richardschneider/net-ipfs-mount) - Mount IPFS as a mapped drive on Windows.\n- [ipfs-paste](https://github.com/jbenet/ipfs-paste) - Paste stdin and clipboard to IPFS.\n- [ipfs-pinner](https://github.com/wabarc/ipfs-pinner) - A toolkit help upload files to IPFS pinning services.\n- [ipfs-publish](https://github.com/auhau/ipfs-publish/) - Continuous Delivery tool for delivery of static websites from Git providers to IPFS.\n- [ipfs-screencap](https://github.com/jbenet/ipfs-screencap) - Capture screenshots, publish them to IPFS, and copy the link to the clipboard.\n- [ipfs-video-gateway](https://github.com/bneijt/ipfs-video-gateway) - Cloud-init your own IPFS gateway on a cloud provider and easily pin content through a simple web interface.\n- [ipfsecret](https://github.com/shlemph/ipfsecret) - Encrypt and decrypt IPFS files with a secret passphrase.\n- [ipget](https://github.com/ipfs/ipget) - :satellite: wget for IPFS: retrieve files over IPFS and save them locally.\n- [IPLD Explorer](https://github.com/ipfs-shipyard/ipld-explorer) - Explore the Merkle Forest from the comfort of your browser.\n- [ipns-pin](https://github.com/justicenode/node-ipns-pin) - A command-line tool to pin stuff via ipns.\n- [IPRedirect](https://github.com/JayBrown/IPRedirect) - Browser userscript for redirecting IPFS/IPNS addresses to your local gateway. This should work on any browser that hasn't had an extension written for it yet and has support for userscripts.\n- [iprfc](https://github.com/RTradeLtd/iprfc) - IETF RFC downloader which stores RFCs on IPFS and indexes them with RTradeLtd/Lens.\n- [mahuta](https://github.com/ConsenSys/Mahuta) - Mahuta is a plug and play service for your micro-service architecture allowing to collect, store and index data on IPFS and offering search functionalities (full text, query).\n- [Multiverse](https://github.com/multiverse-vcs/go-multiverse) - Multiverse is a decentralized version control system that enables peer-to-peer software development.\n- [orbit-db](https://github.com/orbitdb/orbit-db) - OrbitDB is a serverless, distributed, peer-to-peer database that uses IPFS as its data storage and IPFS Pubsub to automatically sync databases with peers.\n- [Pin Tweet to IPFS](https://github.com/meandavejustice/pin-tweet-to-ipfs) - Web Extension which creates a WebArchiveZip of a tweet and adds to IPFS network.\n- [Public Gateway Checker](https://github.com/ipfs/public-gateway-checker) - Checks which public gateways are online or not.\n- [rivet](https://github.com/wabarc/rivet) - A toolkit makes it easier to archive webpages to IPFS.\n- [sourcify](https://github.com/ethereum/sourcify) - Decentralized Solidity contract source code verification service\n- [SimpleAsWater Bot](https://github.com/simpleaswater/twitter-pinbot) - A twitter bot that adds, pins, unpins your tweets to public IPFS network using IPFS Cluster.\n- [solid-ipfs](https://github.com/Eximua/solid-ipfs) - Using Solid to store IPFS Hash privately or publicly.\n- [Tellit](https://gitlab.com/terceranexus6/tellit) - Encrypt files before uploading them using a keypair or a passphrase.\n- [VIPFS](https://github.com/Ideea-inc/vipfs) - Publish your Vue apps easily to IPFS.\n- [wbipfs](https://github.com/wabarc/wbipfs) - A command-line tool and Go package interface for wayback webpage to IPFS.\n- [youtube2ipfs](https://github.com/dokterbob/youtube2ipfs) - Download videos from YouTube (and similar video platforms) and add them to IPFS.\n\n## Services & Platforms\n\n- [Apillon](http://apillon.io/) - a Web3 development platform, offering IPFS gateways, IPFS file-pinning via Crust network and IPFS powered hosting services for websites and apps.\n- [Ceramic](https://ceramic.network/) - Ceramic combines IPFS content addressing with advanced cryptography and blockchain timestamps to guarantee security and verifiability of data.\n- [dAppling](https://www.dappling.network/) - Hosting platform with automated deployments from GitHub to IPFS\n- [Fileverse](https://fileverse.io/) - Encrypted file sharing based on IPFS. Share any files with or without a wallet\n- [Fleek](http://fleek.co/) - Open Web development platform for building, hosting, and storing sites and apps on IPFS, Filecoin, and the Internet Computer.\n- [Fission](https://fission.codes) - Fission builds open source protocols and managed solutions that empower developers to construct scalable and secure software applications.\n- [Matters.town](https://matters.town/) - Decentralized content publication ecosystem.\n- [Peergos](https://peergos.org) - Your private, but social, space online. Store and edit documents and media. Share files or folders with friends.\n- [Valist](https://www.valist.io/) - A trustless universal package repository enabling you to digitally sign and distribute software in just a few steps.\n\n## Pinning services\n- [4EVERLAND](https://www.4everland.org/) - 4EVERLAND is a pinning service that provides IPFS infrastructure and tooling making it easier and faster to host frontends, store data/NFT/file and fetch data with IPFS.\n- [Filebase](https://filebase.com/) - Pinning data to IPFS can be hard. Filebase removes that complexity.\n- [Gateway3](https://gw3.app/) - A decentralized IPFS pinning service designed for developers. Supports content pinning, IPNS hosting, DAG operations, pinning tweets, and web hosting.\n- [NFT.Storage](https://nft.storage/) - Free decentralized storage and bandwidth for NFTs on IPFS & Filecoin.\n- [Pinata](https://pinata.cloud) - Build and manage your dapp through Pinata\u2019s REST API and IPFS toolkit.\n- [Infura](https://infura.io) - Scalable and distributed storage infrastructure for your application.\n- [Kriptonio](https://kriptonio.com/) - Pinning service & Web3 Platform for building Web3 apps.\n- [QuickNode](https://www.quicknode.com/ipfs) - IPFS gateways and pinning\n- [Scaleway](https://labs.scaleway.com/en/ipfs-pinning/) - A multi-region, multi-az redundant IPFS pinning service.\n- [Spheron](https://spheron.network) - Spheron offers IPFS pinning service and dedicated gateways.\n- [thirdweb](https://thirdweb.com/storage) - Easily upload and pin files to IPFS.\n- [Web3.storage](https://web3.storage/) - Simple file storage with IPFS & Filecoin.\n\n## Stale Projects\nWe maintain a list of no longer maintained projects for reference. If you see something on this list that's no longer maintained, please submit a PR moving the entry into [stale.md](./stale.md) and optionally add the reason why it's marked as stale with an indented comment.\n\n[View the list of stale projects here](./stale.md)\n\n## Contribute\n\nContributions are welcome!\n\nSee the [**Contribution Guidelines**](./CONTRIBUTING.md).\n\n## License\n\n[![CC0](https://licensebuttons.net/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n", "release_dates": []}, {"name": "bbloom", "description": "go/golang: fast bit set Bloom filter ", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "## bbloom: a bitset Bloom filter for go/golang\n===\n\npackage implements a fast bloom filter with real 'bitset' and JSONMarshal/JSONUnmarshal to store/reload the Bloom filter. \n\nNOTE: the package uses unsafe.Pointer to set and read the bits from the bitset. If you're uncomfortable with using the unsafe package, please consider using my bloom filter package at github.com/AndreasBriese/bloom\n\n===\n\nchangelog 11/2015: new thread safe methods AddTS(), HasTS(), AddIfNotHasTS() following a suggestion from Srdjan Marinovic (github @a-little-srdjan), who used this to code a bloomfilter cache.  \n\nThis bloom filter was developed to strengthen a website-log database and was tested and optimized for this log-entry mask: \"2014/%02i/%02i %02i:%02i:%02i /info.html\". \nNonetheless bbloom should work with any other form of entries. \n\n~~Hash function is a modified Berkeley DB sdbm hash (to optimize for smaller strings). sdbm  http://www.cse.yorku.ca/~oz/hash.html~~\n\nFound sipHash (SipHash-2-4, a fast short-input PRF created by Jean-Philippe Aumasson and Daniel J. Bernstein.) to be about as fast. sipHash had been ported by Dimtry Chestnyk to Go (github.com/dchest/siphash )\n\nMinimum hashset size is: 512 ([4]uint64; will be set automatically). \n\n###install\n\n```sh\ngo get github.com/AndreasBriese/bbloom\n```\n\n###test\n+ change to folder ../bbloom \n+ create wordlist in file \"words.txt\" (you might use `python permut.py`)\n+ run 'go test -bench=.' within the folder\n\n```go\ngo test -bench=.\n```\n\n~~If you've installed the GOCONVEY TDD-framework http://goconvey.co/ you can run the tests automatically.~~\n\nusing go's testing framework now (have in mind that the op timing is related to 65536 operations of Add, Has, AddIfNotHas respectively)\n\n### usage\n\nafter installation add\n\n```go\nimport (\n\t...\n\t\"github.com/AndreasBriese/bbloom\"\n\t...\n\t)\n```\n\nat your header. In the program use\n\n```go\n// create a bloom filter for 65536 items and 1 % wrong-positive ratio \nbf := bbloom.New(float64(1<<16), float64(0.01))\n\n// or \n// create a bloom filter with 650000 for 65536 items and 7 locs per hash explicitly\n// bf = bbloom.New(float64(650000), float64(7))\n// or\nbf = bbloom.New(650000.0, 7.0)\n\n// add one item\nbf.Add([]byte(\"butter\"))\n\n// Number of elements added is exposed now \n// Note: ElemNum will not be included in JSON export (for compatability to older version)\nnOfElementsInFilter := bf.ElemNum\n\n// check if item is in the filter\nisIn := bf.Has([]byte(\"butter\"))    // should be true\nisNotIn := bf.Has([]byte(\"Butter\")) // should be false\n\n// 'add only if item is new' to the bloomfilter\nadded := bf.AddIfNotHas([]byte(\"butter\"))    // should be false because 'butter' is already in the set\nadded = bf.AddIfNotHas([]byte(\"buTTer\"))    // should be true because 'buTTer' is new\n\n// thread safe versions for concurrent use: AddTS, HasTS, AddIfNotHasTS\n// add one item\nbf.AddTS([]byte(\"peanutbutter\"))\n// check if item is in the filter\nisIn = bf.HasTS([]byte(\"peanutbutter\"))    // should be true\nisNotIn = bf.HasTS([]byte(\"peanutButter\")) // should be false\n// 'add only if item is new' to the bloomfilter\nadded = bf.AddIfNotHasTS([]byte(\"butter\"))    // should be false because 'peanutbutter' is already in the set\nadded = bf.AddIfNotHasTS([]byte(\"peanutbuTTer\"))    // should be true because 'penutbuTTer' is new\n\n// convert to JSON ([]byte) \nJson := bf.JSONMarshal()\n\n// bloomfilters Mutex is exposed for external un-/locking\n// i.e. mutex lock while doing JSON conversion\nbf.Mtx.Lock()\nJson = bf.JSONMarshal()\nbf.Mtx.Unlock()\n\n// restore a bloom filter from storage \nbfNew, _ := bbloom.JSONUnmarshal(Json)\n\nisInNew := bfNew.Has([]byte(\"butter\"))    // should be true\nisNotInNew := bfNew.Has([]byte(\"Butter\")) // should be false\n\n```\n\nto work with the bloom filter.\n\n### why 'fast'? \n\nIt's about 3 times faster than William Fitzgeralds bitset bloom filter https://github.com/willf/bloom . And it is about so fast as my []bool set variant for Boom filters (see https://github.com/AndreasBriese/bloom ) but having a 8times smaller memory footprint: \n\n\t\n\tBloom filter (filter size 524288, 7 hashlocs)\n\tgithub.com/AndreasBriese/bbloom 'Add' 65536 items (10 repetitions): 6595800 ns (100 ns/op)\n    github.com/AndreasBriese/bbloom 'Has' 65536 items (10 repetitions): 5986600 ns (91 ns/op)\n\tgithub.com/AndreasBriese/bloom 'Add' 65536 items (10 repetitions): 6304684 ns (96 ns/op)\n\tgithub.com/AndreasBriese/bloom 'Has' 65536 items (10 repetitions): 6568663 ns (100 ns/op)\n\t\n\tgithub.com/willf/bloom 'Add' 65536 items (10 repetitions): 24367224 ns (371 ns/op)\n\tgithub.com/willf/bloom 'Test' 65536 items (10 repetitions): 21881142 ns (333 ns/op)\n\tgithub.com/dataence/bloom/standard 'Add' 65536 items (10 repetitions): 23041644 ns (351 ns/op)\n\tgithub.com/dataence/bloom/standard 'Check' 65536 items (10 repetitions): 19153133 ns (292 ns/op)\n\tgithub.com/cabello/bloom 'Add' 65536 items (10 repetitions): 131921507 ns (2012 ns/op)\n\tgithub.com/cabello/bloom 'Contains' 65536 items (10 repetitions): 131108962 ns (2000 ns/op)\n\n(on MBPro15 OSX10.8.5 i7 4Core 2.4Ghz)\n\n\nWith 32bit bloom filters (bloom32) using modified sdbm, bloom32 does hashing with only 2 bit shifts, one xor and one substraction per byte. smdb is about as fast as fnv64a but gives less collisions with the dataset (see mask above). bloom.New(float64(10 * 1<<16),float64(7)) populated with 1<<16 random items from the dataset (see above) and tested against the rest results in less than 0.05% collisions.   \n", "release_dates": []}, {"name": "benchmarks", "description": "Benchmarking for IPFS", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": " # js-ipfs Benchmarks [![CircleCI](https://circleci.com/gh/ipfs/benchmarks.svg?style=svg)](https://circleci.com/gh/ipfs/benchmarks)\n\nThis is a set of benchmarks tests to track [js-ipfs](https://github.com/ipfs/js-ipfs) Benchmarks in a Grafana [Dashboard](https://benchmarks.ipfs.team).\n\n## Purpose\n\nThe IPFS team needs a historical view of various performance metrics around `js-ipfs`\nand how it compares to the reference implementation written in `go`. This project\nimplements benchmark tests for `js-ipfs` and publishes the results in a dashboard.\nThe artifacts are also made available on the IPFS network. Over time the historical\nview will expose how `js-ipfs` is hopefully approaching the `go` implementation\nand which areas need improvement.\n\n![Architecture](architecture.png)\n\nThe goal is to provide immediate feedback and long-term tracking around performance\nto developers and the community with an extremely low barrier.\nThe CI system integrating code changes will trigger benchmark runs as well a scheduled\nrun every night. Each run will provide a URL where the results will be visible.\n\nThis project also provides a possibility to run tests locally on a development\nversion of `js-ipfs`. Developers can then examine individual output files before\nsubmitting code to the community.\n\n## Documentation Index\n\n* The [dashboard](infrastructure/grafana/README.md) documentation\n* [Architecture](infrastructure/README.md) of the `js-ipfs` benchmark system\n* Reference on how this [Repository](CONTRIBUTING.md) is organized\n* Using the [Runner](runner/README.md) to manage benchmark runs remotely, which includes an [API](https://benchmarks.ipfs.team/runner/docs/index.html) available [here](https://benchmarks.ipfs.team/runner)\n* Description of [tests](tests/README.md)\n* Convenience [scripts](scripts/README.md) for the docker-compose [deployment](infrastructure/deploy/README.md)\n* Overview [video](https://ipfs.io/ipfs/QmSZgcL7dyjcifZ5uJYmBDCCACfzQD5Ve2RFSoB4RdYATp) hosted on the IPFS network.\n* [Introduction to Clinic.js in the context of IPFS](https://github.com/ipfs/team-mgmt/issues/796) [Recording](https://nearform.zoom.us/recording/play/A-4Vn3jA5aeK9BCPwKCA44IfwpLZePIBlzvD1bUYF7JqTXnG2JptVaLEVcRUmQ1i)\n\n## Benchmarks on the web\n\nThe dashboard is available at [https://benchmarks.ipfs.team](https://benchmarks.ipfs.team) and can be viewed without a user account.\nA `Continuous Integration` server can trigger benchmark runs using the endpoint exposed on [https://benchmarks.ipfs.team/runner](https://benchmarks.ipfs.team/runner). A commit from the [js-ipfs](https://github.com/ipfs/js-ipfs) repository can be supplied to run the benchmarks against. An api key is also required to be able to trigger a run. Please check [Runner](runner/README.md) docs on how to configure an api key for the runner. An example invocation using curl is provided below.\n\n```bash\n> curl -XPOST -d '{\"commit\":\"adfy3hk\"}' \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-ipfs-benchmarks-api-key: <api-key>\" \\\n  https://benchmarks.ipfs.team/runner\n```\n\nThe response provides links to the output produced by the benchmark tests:\n\n```\nTBD\n```\n\nFor more details about the dashboard see the [Grafana](infrastructure/grafana/README.md) doc.\n\n## Quickstart\n\nClone Benchmark tests and install:\n\n```bash\n>  git clone https://github.com/ipfs/benchmarks.git\n>  cd benchmarks/runner\n>  npm install\n>  cd ../tests\n>  npm install\n```\n\n### Generate test files\n\nThe files are defined in [fixtures](tests/lib/fixtures.js).\n\n```bash\n> npm run generateFiles\n```\n\n### Add test files\n\nHere is the file object for a single test:\n\n```js\n{ size: KB, name: 'OneKBFile' }\n```\n\nTo add multiple test files add a count property:\n\n```js\n{ size: KB, name: 'OneHundredKBFile', count: 100 }\n```\n\n### Run tests locally\n\nFrom the `benchmarks/tests` directory:\n\n```bash\n> node local-add\n> node local-extract\n> node local-transfer\n```\n\nRun all benchmarks:\n\n```bash\n> npm run benchmark\n```\n\nCreate a pre-generated key:\n\n```bash\n> node util/create-privateKey\n```\n\n#### FILESET\n\nUse env variable `FILESET` to run test just against that specific set of file(s).  Options of `FILESET` are defined in the config.\n\n```bash\n> FILESET=\"One64MBFile\" node local-add\n```\n\n#### VERIFYOFF\n\nUse env variable `VERIFYOFF=true` to skip the pre-generation of test files.\n\n```js\n> VERIFYOFF=true node local-add\n```\n\n#### Run tests locally on a js-ipfs branch\n\nInside the `benchmarks/tests` dir is a script to pull down master branch and install:\n\n```bash\n> ./getIpfs.sh ../\n```\n\nDirectory structure now :\n```\n\u251c\u2500\u2500 benchmarks\n\u251c\u2500\u2500\u2500\u2500 js-ipfs\n\u251c\u2500\u2500\u2500\u2500 tests\n```\n\nRun tests against branch\n\n```bash\n> cd benchmarks/tests\n> STAGE=local REMOTE=true node local-add\n```\n\n#### FLAGS\n\nBelow is a list of optional flags used by the tests to run a specific strategy or transport module in Libp2p.\n\n- `-s` DAG strategy (balanced | trickle)\n- `-t` Transport (tcp | ws)\n- `-m` Stream muxer (mplex, spdy)\n- `-e` Connection encryption (secio)\n\n### Adding new tests\n\nSee [README](tests/README.md).\n\n###  Results\n\nResults will be written to out directory under `benchmarks/tests`\n\n* `name`: Name of test\n* `warmup`: Flag for if we warm up db\n* `description`: Description of benchmark\n* `fileSet`: Set of files to be used in a test\n* `date`: Date of benchmark\n* `file`: Name of file used in benchmark\n* `meta.project`: Repo that are benchmarked\n* `meta.commit`: Commit used to trigger benchmark\n* `meta.version`: Version of js-ipfs\n* `duration.s`: The number of seconds for benchmark\n* `duration.ms`: The number of millisecs the benchmark took\n* `cpu`: Information about cpu benchmark was run on\n* `loadAvg`: The load average of machine\n\n## License\n\nCopyright (c) Protocol Labs, Inc. under the MIT license. See [LICENSE file](./LICENSE) for details.\n", "release_dates": []}, {"name": "bifrost-gateway", "description": "[EXPERIMENTAL] A lightweight IPFS Gateway daemon backed by a remote data store.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "bifrost-gateway\n=======================\n\n> A lightweight IPFS Gateway daemon backed by a remote data store.\n\n- [About](#about)\n- [Usage](#usage)\n  - [Local build](#local-build)\n  - [Configuration](#configuration)\n  - [Docker](#docker)\n- [FAQ](#faq)\n  - [How to use other gateway as a block backend](#how-to-use-other-gateway-as-a-block-backend)\n  - [How to run with Saturn CDN backend](#how-to-run-with-saturn-cdn-backend)\n  - [How to debug](#how-to-debug)\n  - [How to use tracing](#how-to-use-tracing)\n  - [How could this work for hosting a public IPFS gateway](#how-could-this-work-for-hosting-a-public-ipfs-gateway)\n  - [How does high level overview look like](#how-does-high-level-overview-look-like)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Maintainers\n\nIPFS Stewards\n\n## About\n\n`bifrost-gateway` provides a single binary daemon implementation of [HTTP+Web Gateway Specs](https://specs.ipfs.tech/http-gateways/).\n\nIt is capable of serving requests to:\n- [path gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#path-gateway) at `127.0.0.1`\n- [subdomain gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#subdomain-gateway) requests with `Host: localhost`\n- [DNSLink gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#dnslink-gateway) based on `Host` header\n\nSupported response types include both deserialized flat files, and [verifiable Block/CAR](https://docs.ipfs.tech/reference/http/gateway/#trustless-verifiable-retrieval).\n\nFor more information about IPFS Gateways, see:\n\n- Specifications at [specs.ipfs.tech/http-gateways](https://specs.ipfs.tech/http-gateways/)\n- Conformance tests at [ipfs/gateway-conformance](https://github.com/ipfs/gateway-conformance)\n- Go implementation at [boxo/gateway](https://github.com/ipfs/boxo/tree/main/gateway)\n\n## Usage\n\n### Local build\n\n```console\n$ go build\n$ ./bifrost-gateway --help\n```\n\n### Configuration\n\nSee `./bifrost-gateway --help` and [`./docs/environment-variables.md`](./docs/environment-variables.md)\n\n\n### Docker\n\nOfficial Docker images are provided at [hub.docker.com/r/ipfs/bifrost-gateway](https://hub.docker.com/r/ipfs/bifrost-gateway/tags).\n\n- \ud83d\udfe2 Releases\n  - `latest` and `release` always point at the latest release\n  - `vN.N.N` point at a specific [release tag](https://github.com/ipfs/bifrost-gateway/releases)\n- \ud83d\udfe0 Developer builds\n  - `main-latest` always points at the `HEAD` of the `main` branch\n  - `main-YYYY-DD-MM-GITSHA` points at a specific commit from the `main` branch\n- \u26a0\ufe0f Experimental, unstable builds\n  - `staging-latest` always points at the `HEAD` of the `staging` branch\n  - `staging-YYYY-DD-MM-GITSHA` points at a specific commit from the `staging` branch\n  - This tag is used by developers for internal testing, not intended for end users\n\nWhen using Docker, make sure to pass necessary config via `-e`:\n```console\n$ docker pull ipfs/bifrost-gateway:release\n$ docker run --rm -it --net=host -e PROXY_GATEWAY_URL=http://127.0.0.1:8080  ipfs/bifrost-gateway:release\n```\n\nSee [`./docs/environment-variables.md`](./docs/environment-variables.md).\n\n## FAQ\n\n### How to use other gateway as a block backend\n\nAll you need is a [trustless gateway](https://specs.ipfs.tech/http-gateways/trustless-gateway/) endpoint that supports [verifiable response types](https://docs.ipfs.tech/reference/http/gateway/#trustless-verifiable-retrieval).\nThe minimum requirement is support for `GET /ipfs/cid` with [application/vnd.ipld.raw](https://www.iana.org/assignments/media-types/application/vnd.ipld.raw) (block by block).\n\nTo run against a compatible, local trustless gateway provided by [Kubo](https://github.com/ipfs/kubo) or [IPFS Desktop](https://docs.ipfs.tech/install/ipfs-desktop/):\n\n```console\n$ PROXY_GATEWAY_URL=\"http://127.0.0.1:8080\" ./bifrost-gateway\n```\n\nSee [_Proxy Backend_ in `./docs/environment-variables.md`](./docs/environment-variables.md#proxy-backend)\n\n### How to run with Saturn CDN backend\n\n[Saturn](https://saturn.tech) is a CDN that provides a pool of [trustless gateways](https://specs.ipfs.tech/http-gateways/trustless-gateway/).\n\n`bifrost-gateway` supports it via the [Caboose](https://github.com/filecoin-saturn/caboose) backend,\nwhich takes care of discovering and evaluating Block/CAR gateways (in Saturn called L1 nodes/peers) for increased availability.\n\nSee [_Saturn Backend_ in `./docs/environment-variables.md`](./docs/environment-variables.md#saturn-backend)\n\n### How to debug\n\nSee [`GOLOG_LOG_LEVEL`](./docs/environment-variables.md#golog_log_level).\n\n### How to use tracing\n\nFor tracing configuration, please check\n[boxo/docs/tracing.md](https://github.com/ipfs/boxo/blob/main/docs/tracing.md)\non how to generate the `traceparent` HTTP header in order to be able to easily\nidentify specific requests.\n\n\n### How could this work for hosting a public IPFS gateway\n\nThis is WIP, but the high level architecture is to move from\n\n**Old Kubo-based architecture:**\n\n```mermaid\ngraph LR\n    A(((fa:fa-person HTTP</br>clients)))\n    K[[Kubo]]\n    N(((BGP Anycast,<br>HTTP load-balancers,<br>TLS termination)))\n\n    D(((DHT)))\n\n    P((( IPFS<br>Peers)))\n\n    A -->| Accept: text/html, *| N\n    A -->| Accept: application/vnd.ipld.raw | N\n    A -->| Accept: application/vnd.ipld.car | N\n    A -->| Accept: application/vnd.ipld.dag-json | N\n    A -->| Accept: application/vnd.ipld.dag-cbor | N\n    A -->| Accept: application/json | N\n    A -->| Accept: application/cbor | N\n    A -->| Accept: application/x-tar | N\n    A -->| Accept: application/vnd.ipfs.ipns-record | N\n    A -->| DNSLink Host: en.wikipedia-on-ipfs.org | N\n    A -->| Subdomain Host: cid.ipfs.dweb.link | N\n\n    N ==>| fa:fa-link HTTP GET <br> Content Path | K\n\n    K -.- D\n    K ===|fa:fa-cube bitswapl | P\n    P -.- D\n```\n\n**New Rhea architecture:**\n```mermaid\ngraph LR\n    A(((fa:fa-person HTTP</br>clients)))\n    B[[bifrost-gateway]]\n    N(((BGP Anycast,<br>HTTP load-balancers,<br>TLS termination)))\n    S(((Saturn<br>CDN)))\n    I[[IPNI]]\n    D(((DHT)))\n\n    P((( IPFS<br>Peers)))\n\n    A -->| Accept: text/html, *| N\n    A -->| Accept: application/vnd.ipld.raw | N\n    A -->| Accept: application/vnd.ipld.car | N\n    A -->| Accept: application/vnd.ipld.dag-json | N\n    A -->| Accept: application/vnd.ipld.dag-cbor | N\n    A -->| Accept: application/json | N\n    A -->| Accept: application/cbor | N\n    A -->| Accept: application/x-tar | N\n    A -->| Accept: application/vnd.ipfs.ipns-record | N\n    A -->| DNSLink Host: en.wikipedia-on-ipfs.org | N\n    A -->| Subdomain Host: cid.ipfs.dweb.link | N\n\n    N ==>| fa:fa-link HTTP GET <br> Content Path | B\n    \n    B ==>|fa:fa-cube HTTP GET <br> Blocks | S\n    S -.- I \n    I -.- D \n    D -.- P -.- I\n  \n    P ===|fa:fa-cube the best block/dag <br> transfer protocol | S\n```\n\n`bifrost-gateway` nodes are responsible for processing requests to:\n\n- [path gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#path-gateway) (like `ipfs.io`)\n- [subdomain gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#subdomain-gateway) (like `dweb.link`)\n- [selected DNSLink websites](https://github.com/protocol/bifrost-infra/blob/b6f85a54fddf1c21a966f8d5e5a3e31f54ad5431/ansible/inventories/bifrost/group_vars/collab_cluster.yml#L140-L271) on their own domain names.\n\nCaveats:\n\n- IPFS Gateway interface based on reference implementation from [boxo/gateway](https://github.com/ipfs/boxo/tree/main/gateway#readme).\n- IPFS Backend based on https://saturn.tech and HTTP client talking to it  via [caboose](https://github.com/filecoin-saturn/caboose) with `STRN_LOGGER_SECRET`.\n  - Learn more at [Project Rhea (decentralized IPFS gateway)](https://pl-strflt.notion.site/Project-Rhea-decentralized-IPFS-gateway-3d5906e7a0d84bea800d5920005dfea6)\n- Remaining functional gaps facilitated by:\n  - (initially) temporary delegation to legacy Kubo RPC (`/api/v0`) at `https://node[0-3].delegate.ipfs.io` infra (legacy nodes used by js-ipfs, in process of deprecation).\n  - (long-term) `IPNS_RECORD_GATEWAY_URL` endpoint capable of resolving `GET /ipns/{name}` with `Accept: application/vnd.ipfs.ipns-record`\n\n### How does high level overview look like\n\nSome high level areas:\n\n```mermaid\nmindmap\n  root[bifrost-gateway]\n    (boxo/gateway.IPFSBackend)\n        Block Backend\n        CAR Backend\n    Ephemeral Storage\n        Block Cache\n        Exchange Backend\n            Plain HTTP Fetch\n            Caboose Saturn Fetch\n    Resolving Content Paths\n        Raw\n        CAR\n        UnixFS\n        IPLD Data Model\n            [DAG-JSON]\n            [DAG-CBOR]\n        Web\n            HTTP Host Header\n            HTML dir listings\n            index.html\n            _redirects\n            HTTP Range Requests\n        Namesys\n            DNSLink\n                EoDoH<br>ENS over DNS over HTTPS\n            IPNS Records\n    Metrics and Tracing\n        Prometheus\n            Counters\n            Histograms\n        OpenTelemetry\n            Spans\n            Exporters\n            Trace Context\n```\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": ["2023-10-04T14:36:31Z", "2023-09-21T13:03:28Z", "2023-09-13T17:34:38Z", "2023-09-08T17:29:49Z", "2023-08-24T09:19:55Z", "2023-08-17T11:13:18Z", "2023-08-15T21:33:45Z", "2023-06-22T14:01:36Z", "2023-06-08T07:43:22Z", "2023-06-05T14:44:22Z", "2023-05-30T21:27:01Z", "2023-05-25T15:50:30Z", "2023-05-24T09:47:50Z", "2023-05-19T11:47:29Z", "2023-05-02T08:58:06Z", "2023-04-27T15:36:19Z", "2023-04-24T19:30:14Z", "2023-04-06T22:14:05Z", "2023-03-31T14:36:00Z"]}, {"name": "boxo", "description": "A set of reference libraries for building IPFS applications and implementations in Go.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<h1 align=\"center\">\n  <br>\n  <a href=\"#readme\"><img src=\"https://github.com/ipfs/boxo/assets/157609/3c5e7391-fbc2-405b-9efc-920f4fd13b39\" alt=\"Boxo logo\" title=\"Boxo logo\" width=\"200\"></a>\n  <br>\n  BOXO: IPFS SDK for GO\n  <br>\n</h1>\n\n<p align=\"center\" style=\"font-size: 1.2rem;\">A set of libraries for building IPFS applications and implementations in GO.</p>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://discuss.ipfs.tech\"><img alt=\"Discourse Forum\" src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fdiscuss.ipfs.tech\"></a>\n  <a href=\"https://matrix.to/#/#ipfs-space:ipfs.io\"><img alt=\"Matrix\" src=\"https://img.shields.io/matrix/ipfs-space%3Aipfs.io?server_fqdn=matrix.org\"></a>\n  <a href=\"https://github.com/ipfs/boxo/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/boxo/go-test.yml?branch=main\" alt=\"ci\"></a>\n  <a href=\"https://codecov.io/gh/ipfs/boxo\"><img src=\"https://codecov.io/gh/ipfs/boxo/branch/main/graph/badge.svg?token=9eG7d8fbCB\" alt=\"coverage\"></a>\n  <a href=\"https://github.com/ipfs/boxo/releases\"><img alt=\"GitHub release\" src=\"https://img.shields.io/github/v/release/ipfs/boxo?filter=!*rc*\"></a>\n  <a href=\"https://godoc.org/github.com/ipfs/boxo\"><img src=\"https://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square\" alt=\"godoc reference\"></a>  \n</p>\n\n<hr />\n\n<!-- TOC -->\n\n- [About](#about)\n  - [Motivation](#motivation)\n- [Scope](#scope)\n  - [What kind of components does Boxo have?](#what-kind-of-components-does-boxo-have)\n  - [Does Boxo == IPFS?](#does-boxo--ipfs)\n  - [Is everything related to IPFS in the Go ecosystem in this repo?](#is-everything-related-to-ipfs-in-the-go-ecosystem-in-this-repo)\n- [Consuming](#consuming)\n  - [Getting started](#getting-started)\n  - [Migrating to Boxo](#migrating-to-boxo)\n  - [What is the deprecation and breaking change policy?](#what-is-the-deprecation-and-breaking-change-policy)\n- [Development](#development)\n  - [Should I add my IPFS component to Boxo?](#should-i-add-my-ipfs-component-to-boxo)\n  - [Release Process](#release-process)\n  - [Why is the code coverage so bad?](#why-is-the-code-coverage-so-bad)\n- [General](#general)\n  - [Help](#help)\n  - [What is the response time for issues or PRs filed?](#what-is-the-response-time-for-issues-or-prs-filed)\n  - [What are some projects that depend on this project?](#what-are-some-projects-that-depend-on-this-project)\n  - [Governance and Access](#governance-and-access)\n  - [Why is this named \"Boxo\"?](#why-is-this-named-boxo)\n  - [Additional FAQs](#additional-faqs)\n  - [License](#license)\n\n<!-- /TOC -->\n\n## About\n\nBoxo is a component library for building IPFS applications and implementations in Go.\n\nSome scenarios in which you may find Boxo helpful:\n\n* You are building an application that interacts with the IPFS network\n* You are building an IPFS implementation\n* You want to reuse some components of IPFS such as its Kademlia DHT, Bitswap, data encoding, etc.\n* You want to experiment with IPFS\n\nBoxo powers [Kubo](https://github.com/ipfs/kubo), which is [the most popular IPFS implementation](https://github.com/protocol/network-measurements/tree/master/reports),\nso its code has been battle-tested on the IPFS network for years, and is well-understood by the community.\n\n### Motivation\n\n**TL;DR** The goal of this repo is to help people build things.  Previously users struggled to find existing useful code or to figure out how to use what they did find.  We observed many running Kubo and using its HTTP RPC API.  This repo aims to do better.  We're taking the libraries that many were already effectively relying on in production and making them more easily discoverable and usable.\n\nThe maintainers primarily aim to help people trying to build with IPFS in Go that were previously either giving up or relying on the [Kubo HTTP RPC API](https://docs.ipfs.tech/reference/kubo/rpc/). Some of these people will end up being better served by IPFS tooling in other languages (e.g., Javascript, Rust, Java, Python), but for those who are either looking to write in Go or to leverage the set of IPFS tooling we already have in Go we\u2019d like to make their lives easier.\n\nWe\u2019d also like to make life easier on ourselves as the maintainers by reducing the maintenance burden that comes from being the owners on [many repos](https://github.com/ipfs/kubo/issues/8543) and then use that time to contribute more to the community in the form of easier to use libraries, better implementations, improved protocols, new protocols, etc.\n\nBoxo is not exhaustive nor comprehensive--there are plenty of useful IPFS protocols, specs, libraries, etc. that are not in Boxo. The goal of Boxo is to provide cohesive and well-maintained components for common IPFS use cases.\n\nMore details can also be found in the [Rationale FAQ](./docs/FAQ.md#rationale-faq).\n\n## Scope\n\n### What kind of components does Boxo have?\n\nBoxo includes high-quality components useful for interacting with IPFS protocols, public and private IPFS networks, and content-addressed data, such as:\n\n- Content routing (DHT, delegated content routing, providing)\n- Data transfer (gateways, Bitswap, incremental verification)\n- Naming and mutability (name resolution, IPNS)\n- Interacting with public and private IPFS networks\n- Working with content-addressed data\n\nBoxo aims to provide a cohesive interface into these components. Note that not all of the underlying components necessarily reside in this respository.\n\n### Does Boxo == IPFS?\n\nNo. This repo houses some IPFS functionality written in Go that has been useful in practice, and is maintained by a group that has long term commitments to the IPFS project\n\n### Is everything related to IPFS in the Go ecosystem in this repo?\n\nNo. Not everything related to IPFS is intended to be in Boxo. View it as a starter toolbox (potentially among multiple). If you\u2019d like to build an IPFS implementation with Go, here are some tools you might want that are maintained by a group that has long term commitments to the IPFS project. There are certainly repos that others maintain that aren't included here (e.g., ipfs/go-car) which are still useful to IPFS implementations. It's expected and fine for new IPFS functionality to be developed that won't be part of Boxo.\n\n## Consuming\n\n### Getting started\n\nSee [examples](./examples/README.md).\n\nIf you are migrating to Boxo, see [Migrating to Boxo](#migrating-to-boxo).\n\n### Migrating to Boxo\n\nMany Go modules under github.com/ipfs have moved here. Boxo provides a tool to ease this migration, which does most of the work for you:\n\n* `cd` into the root directory of your module (where the `go.mod` file is)\n* Run: `go run github.com/ipfs/boxo/cmd/boxo-migrate@latest update-imports`\n  * This will upgrade your module to Boxo v0.8.0 and rewrite your import paths\n* Run: `go run github.com/ipfs/boxo/cmd/boxo-migrate@latest check-dependencies`\n  * This will print unmaintained dependencies you still have\n  * These aren't necessarily an immediate problem, but you should eventually get them out of your dependency graph\n  \nThis tool only upgrades your module to Boxo v0.8.0, to minimize backwards-incompatible changes. Depending on the versions of IPFS modules before the upgrade, your code may require additional changes to build.\n\nWe recommend upgrading to v0.8.0 first, and _then_ upgrading to the latest Boxo release.\n\nIf you encounter any challenges, please [open an issue](https://github.com/ipfs/boxo/issues/new/choose) and Boxo maintainers will help you.\n\n### Deprecations & Breaking Changes\n\nSee [RELEASE.md](./RELEASE.md).\n\n## Development\n\n### Should I add my IPFS component to Boxo?\n\nWe happily accept external contributions! However, Boxo maintains a high quality bar, so code accepted into Boxo must meet some minimum maintenance criteria:\n\n* Actively maintained\n  * Must be actively used by, or will be included in software that is actively used by, a significant number of users or production systems. Code that is not actively used cannot be properly maintained.\n  * Must have multiple engineers who are willing and able to maintain the relevant code in Boxo for a long period of time.\n  * If either of these changes, Boxo maintainers will consider removing the component from Boxo.\n* Adequately tested\n  * At least with unit tests\n  * Ideally also including integration tests with other components\n* Adequately documented\n  * Godocs at minimum\n  * Complex components should have their own doc.go or README.md describing the component, its use cases, tradeoffs, design rationale, etc.\n* If the maintainers are not Boxo maintainers, then the component must include a CODEOWNERS file with at least two code owners who can commit to reviewing PRs\n\nIf you have some experimental component that you think would benefit the IPFS community, we suggest you build the component in your own repository until it's clear that there's community demand for it, and then open an issue/PR in this repository to discuss including it in Boxo.\n\n### Release Process\n\nSee [RELEASE.md](./RELEASE.md).\n\n### Why is the code coverage so bad?\n\nThe code coverage of this repo is not currently representative of the actual test coverage of this code. Much of the code in this repo is currently covered by integration tests in [Kubo](https://github.com/ipfs/kubo). We are in the process of moving those tests here, and as that continues the code coverage will significantly increase.\n\n## General\n\n### Help\n\nIf you have questions, feel free to open an issue. You can also find the Boxo maintainers in [Filecoin Slack](https://filecoin.io/slack/) at #Boxo-maintainers.  (If you would like to engage via IPFS Discord or ipfs.io Matrix, please drop into the #ipfs-implementers channel/room or file an issue, and we'll get bridging from #Boxo-maintainers to these other chat platforms.)\n\n### What is the response time for issues or PRs filed?\n\nNew issues and PRs to this repo are usually looked at on a weekly basis as part of [Kubo triage](https://pl-strflt.notion.site/Kubo-Issue-Triage-Notes-7d4983e8cf294e07b3cc51b0c60ede9a). However, the response time may vary.\n\n### What are some projects that depend on this project?\n\nThe exhaustive list is https://github.com/ipfs/boxo/network/dependents. Some notable projects include:\n\n1. [Kubo](https://github.com/ipfs/kubo), an IPFS implementation in Go\n2. [Lotus](https://github.com/filecoin-project/lotus), a Filecoin implementation in Go\n6. [rainbow](https://github.com/ipfs/rainbow), a specialized IPFS gateway\n4. [ipfs-check](https://github.com/ipfs-shipyard/ipfs-check), checks IPFS data availability\n5. [someguy](https://github.com/ipfs-shipyard/someguy), a dedicated Delegated Routing V1 server and client\n3. [Bifrost Gateway](https://github.com/ipfs/bifrost-gateway), a dedicated IPFS Gateway daemon backed by a remote datastore\n\n### Governance and Access\n\nSee [CODEOWNERS](./docs/CODEOWNERS) for the current maintainers list. Governance for graduating additional maintainers hasn't been established. Repo permissions are all managed through [ipfs/github-mgmt](https://github.com/ipfs/github-mgmt).\n\n### Why is this named \"Boxo\"?\n\nSee https://github.com/ipfs/boxo/issues/215. \n\n### Additional Docs & FAQs\n\nSee [the wiki](https://github.com/ipfs/boxo/wiki).\n\n### License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": ["2024-02-20T08:46:56Z", "2024-01-10T15:41:11Z", "2023-12-06T09:27:56Z", "2023-11-03T08:15:52Z", "2023-11-01T09:40:45Z", "2023-09-21T14:56:01Z", "2023-09-20T07:06:51Z", "2023-08-22T11:06:51Z", "2023-08-08T11:58:31Z", "2023-07-27T07:15:27Z", "2023-06-29T15:14:48Z", "2023-06-19T12:19:02Z", "2023-06-09T10:16:02Z", "2023-06-08T09:51:26Z", "2023-04-25T08:22:40Z", "2023-04-05T16:24:23Z", "2023-04-03T13:43:27Z", "2023-03-28T22:06:47Z", "2023-03-27T22:00:03Z", "2023-03-20T12:36:15Z", "2023-03-16T16:16:43Z", "2023-03-07T18:18:09Z", "2023-02-17T17:07:28Z", "2023-02-10T16:59:19Z"]}, {"name": "browser-design-guidelines", "description": "Guidelines and recommendations for browser vendor design and implementation of IPFS", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n# IPFS Browser Design Guidelines\n\nIn preparation for a 2020 expansion of Protocol Lab\u2019s IPFS browser integrations and standardisation efforts, there needs to be guidelines and recommendations on hand in order to get to our first billion users.\n\n### What the guidelines are\n\nThe IPFS Browser Design Guidelines will be an implementation kit for browser security and design teams and for standards groups such as the W3C and IETF. It will contain research, use-cases, UX patterns, and examples of iconography. This implementation kit for IPFS will be specifically tailored to how browser URL bars are implemented today.\n\n### How the guidelines will be used\n\nInitially this material will guide Protocol Labs\u2019s own projects (Desktop, Companion). Additionally, it will help guide the smaller and more experimental browser implementations where we can learn, test and iterate. That will set us up for working with larger browser vendors and the standards groups later in 2020, putting this material to use in broader ways.\n\n## Research\n\nWhile the browser landscape has never been bigger, with increased specialisation in terms of privacy or blockchain, there doesn\u2019t seem to be any investigation or development in terms of P2P or distributed enabled browsers. \n\nThe intent of the research phase is to examine and explore the use-cases for IPFS in browsers, P2P usage in browsers at large in order to create and publish design guidelines and recommendations for browser vendor implementation and standards bodies.\n\n### [Survey review][1]\n\nOne of the first things to research was the [existing browser landscape][2], in this case concentrating primarily on current (2019-Nov) releases of Mozilla Firefox, Apple Safari, Google Chrome and Microsoft Edge, the aim of which was to establish the commonalities and baselines between the current browser stack. From this we could continue into exploring in detail through user research what works and what doesn\u2019t with that.\n\n### [Exploratory workshop][3]\n\nAn expert/stakeholder workshop was conducted in conjunction to the ongoing expert interviews to explore the problem space, relevant technology and possible solutions.\n\nThe user research was split into three parts. The first was an [exploratory and scoping workshop][4] with three key developers of IPFS to look at where the leading developmental issues may lay.\n\n### [Non-expert research][5]\n\nAfterwards, the second phase was non-expert research with average users, in this case defined as non-developers or people working on internet protocol level issues. This covered their browser use, their understanding of location and addressing in the browser and knowledge and opinion on P2P in general.\n99\nWe conducted research with seven participants, spread geographically and across genders and occupations to determine their conceptions, concerns and ideas about addressing conventions and P2P technologies in modern browsers. In depth interviews with notes and findings are found in the [wiki][6].\n\n### [Expert research][7]\n\nLastly, a small cohort of expert users involved directly with P2P or IPFS development, cryptography or browser development were interviewed to gather specialist knowledge and opinions on the domain and technological and user landscape. In depth interviews with notes and findings are found in the [wiki][8].\n\n## Research findings\n\n### Initial assumptions\n\n- The URL as a mechanism and way to understand location on the Internet is fairly well understood and usable\n- A URL is at least partially human-readable by most people\n- Privacy and encryption is a concern for the majority of users but many if not most don\u2019t explicitly care where the data comes from, just as long as it\u2019s authentic or credible\n- What is going on in a browser with privacy and a secure connection is largely understood\n- Domains are signs of trust and at least partially comprehended in terms of what is going on, for instance .com, .org, etc.\n- P2P in a browser is largely only understood by developers\n- P2P is easy to understand\n- The use cases of P2P in terms of a browser are clearly understood\n\n### Research findings and themes\n\n- The URL is only important as a backup and source of credibility that the right things are happening in the browser, thus although not always entirely understood is found to be likely fine the way it is\n- The URL is understood as an address and pointing to a location, with content at that location\n- URLs are rarely typed in and the URL bar is used for search as a primary means of navigation\n- HTTPS is something all users are aware of although they might not fully understand it\u2019s implications or understand why, but trust that it means \u201csecure\u201d\n- Privacy and security are a great concern to users. However, ad tracking and surveillance is not greatly understood by non-experts and they often have misconceptions and are thus largely left feeling hopeless and defeated.\n- Very long URLs are generally regarded as suspicious, such as having tracking in them, and shorted URLs are likewise not very trusted as they lack context with a domain\n- Blogs have created a better understanding of URLs with non-expert users as they are quite readable. Likewise the URL is perceived to be potentially very useful if it had certain standard conventions or features such as having topic, author or title included\n- P2P is largely understood to be about files that are in many places at the same time by many people\n- Most assume P2P makes things faster and somehow more secure\n- P2P is largely thought of by non-experts and some expert participants as a tool for media piracy which could have potentially given a good technology a bad name\n- How files and folders work in P2P, especially in terms of the URL isn\u2019t understood\n- Privacy on the Internet is understood differently in different parts of the world\n- When in P2P mode, it may be very beneficial to the user to have a drastically user or visual experience to differentiate\n- There are potential opportunities with P2P in terms of lowering (CDN) costs and lessening or potentially eliminating the need for invasive advertising\n- Expert users believe P2P participation models and value propositions need to be explored much more and better communicated\n- P2P might be initially suited to use that is more niche, such as scientific and academic publishing\n\n#### Key design questions\n\nHow might we best communicate in interaction and design that P2P is about in terms of being distributed and about files being in many places at the same time with many people?\n\n- How best do we show this is the key value of P2P?\n- Showing users what is going on (ie. how many people, who can see what, what I'm sharing)\n- Graphical, quick and largely in the background\n\nHow might we replicate users's vague but useful understanding that HTTPS is secure with P2P without them having to know all the implications?\n\n- Can we explore what \"safe\" means in the context of IPFS?\n- Can we communicate that \"S\" goes with a control indication like the padlock?\n\nHow might we help users not feel defeated and hopeless amongst an internet full of ad tracking and surveillance?\n\n- Can we show the core benefit of P2P (IPFS) is privacy without being bogged down in technical details?\n- Can we show that external threat actors can not track them when they use P2P?\n\nHow might we show P2P is not only more secure, but that in some cases, is faster than HTTP?\n\n- Can we indicate the transfer is encrypted, but your activity is visible?\n- Can we display when it will be faster/slower to the user?\n\nHow might we communicate P2P is not just a tool for piracy?\n\n- Can we replace language to describe how P2P works so it's not \"it's like bittorrent\"?\n\nHow might we make P2P addresses trustable?\n\n- Can we make them not too long or looking as if they're hiding something?\n- Could addresses be made more human-readable through things like IPNS?\n- We are adding something new to the location bar, which changes it's name even.\n\nHow might we utilise the current convention of using the URL bar for search as a primary means of navigation for P2P?\n\n- Is there a way to get around search not being good for IPFS?\n- Is there an interaction design opportunity around autocomplete?\n\nHow might we show that P2P can lessen CDN costs and also lessen the need for advertising and tracking-based business content models?\n\n\n## Design\n\nThe intent of the design phase of the IPFS Browser Design Guidelines is to examine and explore the use-cases for IPFS in browsers, and publish design guidelines and recommendations for browser vendor implementation\n\n### Programme of work\n\n- Interaction and user experience design work to solve the researched issues, mapping out user flows, design patterns and use cases\n- Interface design\n\n### Deliverables\n\n- Screen designs including recommendations, iconographic and design treatments for existing browser URL bars\n- User experience flows\n- Design guidelines and component design to inform and help further development efforts\n- Recommendations for further work\n\n---- \n\n#### Credits\n\nFree stuff used in this repo\n\nIcons: [Font Awesome][9]\n\n[Firefox Quantum Browser Mockup Sketch Resource](https://www.sketchappsources.com/free-source/3775-firefox-quantum-browser-mockup-sketch-freebie-resource.html)\n\n[1]:\thttps://github.com/ipfs/browser-design-guidelines/wiki#browser-survey\n[2]:\thttps://github.com/ipfs/browser-design-guidelines/wiki#browser-survey\n[3]:\thttps://github.com/ipfs/browser-design-guidelines/wiki/Stakeholders-workshop\n[4]:\thttps://github.com/ipfs/browser-design-guidelines/wiki/Stakeholders-workshop\n[5]:\thttps://github.com/ipfs/browser-design-guidelines/wiki#non-expert-interviews\n[6]:\thttps://github.com/ipfs/browser-design-guidelines/wiki\n[7]:\thttps://github.com/ipfs/browser-design-guidelines/wiki#expert-interviews\n[8]:\thttps://github.com/ipfs/browser-design-guidelines/wiki\n[9]:\thttps://fontawesome.com/\n", "release_dates": []}, {"name": "camp", "description": "\ud83c\udfd5 IPFS Camp is a 3 day hacker retreat designed for the builders of the Distributed Web.", "language": "JavaScript", "license": null, "readme": "<p align=\"center\">\n  <a href=\"https://camp.ipfs.io\">\n    <img src=\"https://gateway.ipfs.io/ipfs/QmfWNnayqgzFKP3Lf4Ganka5fxjwitVHD7fPgsL7qnR2As\" alt=\"IPFS Camp Banner\" width=\"250\" />\n  </a>\n</p>\n<br/>\n\n__note - if you are looking for content for 2022 IPFS Camp, it is located at https://github.com/ipfs/ipfs-camp-2022__\n\nIPFS Camp 2019 is over! Thank you to everyone that joined us for 3 days of amazing conferencing, we are so proud and joyful for being part of such a wonderful community.\n\nIf you missed IPFS Camp or want to revisit its content, everything will remain available in this repo. Soon we will start publishing the videos as well.\n\n# Camp Content\n\nYou can find the content description, speakers and trainers at:\n\n## \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 Keynotes // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtSkKM3Rzp4MQ0Z1nf5Kq0tl)\n| Title | Recording |\n| :---- |  :-------- |\n| Introduction to IPFS Camp - Molly Mackinlay |  [Video](https://youtu.be/cQJXnJDbXv4) |\n| Welcome to IPFS Camp 2019 - David Dias |   [Video](https://youtu.be/gUE5vhZoavQ) |\n| Why IPFS? - Juan Benet |   [Video](https://youtu.be/zE_WSLbqqvo) |\n| IPFS Ecosystem Progress Report - Molly Mackinlay |   [Video](https://youtu.be/jpQnQbfhuBc) |\n| Space Training Program & IPFS Camp Content - David Dias |   [Video](https://youtu.be/AJvng8Z2W2I) |\n| Camp Sendoff - Juan Benet |   [Video](https://youtu.be/HDc7kEYHang) |\n| Space Training Program Graduation & Awards - David Dias & Molly Mackinlay |   [Video](https://youtu.be/INVQPepMMMU) |\n\n\n## [\ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb Core & Elective Courses](CORE_AND_ELECTIVE_COURSES) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtSsHMhjeWpfOzr8tonPaePu)\n\n| Course | Title  | Trainers  | Short Description  | Materials  | Video Recording |\n|------- | :-------: |------------------- | ---------- | --------- | --- | \n| **CORE** | | | | |\n| Core A | Understanding how the InterPlanetary File System deals with Files  | @alanshaw @Stebalien @mikeal         | Deep exploration of the reasons behind immutable data, how we address immutable data, the data structures IPFS creates and the different ways of interacting with files in IPFS. | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_A), Slides ([PDF](https://github.com/ipfs/camp/blob/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_A/IPFS_Camp_Core_Course_A_Slides.pdf))| [Video](https://youtu.be/Z5zNPwMDYGg) |\n| Core B | Solving distributed networking problems with libp2p                | @bigs @jacobheun @achingbrain        | An interactive deep dive into the capabilities of libp2p | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_B), Slides ([Google Slides](https://docs.google.com/presentation/d/1a_BjIM4ORQchnMNjOMO-wCDW2VS5nXeKXIbWSEqf9jY/edit?usp=sharing))| [Video](https://youtu.be/Q4IH5rWEO-E) |\n| Core C | Developing Apps with IPFS API                                      | @lidel @jimpick @hugomrdias          |   Local, Remote or Embedded? go-ipfs or js-ipfs? Core API interface in command-line and HTTP contexts  | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_C), Slides ([PDF](https://github.com/ipfs/camp/files/3525750/IPFS.Camp.2019.-.Core.Course.C.-.Slide.Deck.pdf), [Google Slides](https://docs.google.com/presentation/d/1cbJD5j_jRpm3yJiE6hLIOzMn8iMhvzyci7Ut3NLjqxs/edit?usp=sharing))| [Video](https://youtu.be/6EHBOnFQJN4)|\n| Core D | The lifecycle of data in DWeb.                                     | @olizilla @kishansagathiya @meiqimichelle | Providing (Share), Pinning (Store) and Blocking (Delete) Data  | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_D), Slides ([Google Slides](https://docs.google.com/presentation/d/1UOX-a1lCxi-LOyEOe9VEFRcxg_j93Xkywwa4Y95TJaw/edit?usp=sharing), [PDF](https://github.com/ipfs/camp/blob/master/CORE_AND_ELECTIVE_COURSES/CORE_COURSE_D/IPFS_Camp_Core_Course_D_Slides.pdf)) | [Video](https://youtu.be/fLUq0RkiTBA)|\n| **ELECTIVE**  | | | | |\n| Elective A | Identity on the DWeb                                               | @satazor @paulobmarcos @joaosantos15 | Understand the state of decentralized identity on the DWeb and current efforts on creating open and interoperable models to solve self-sovereign identities. | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_A), Slides ([Google Slides](https://docs.google.com/presentation/d/1HbydOI0w-T_FY23zCACAyHmzDq1ZvyG2tklpPSm6OQQ))| [Video](https://youtu.be/EsLqjFEN-MM)|\n| Elective B |Managing pinsets with IPFS Cluster                                 | @hsanjuan @lanzafame @meiqimichelle  | A workshop on operating and using IPFS Cluster to orchestrate a common pinset among multiple IPFS nodes | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_B), Slides ([PDF](https://github.com/ipfs/camp/blob/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_B/slides.pdf)) | [Video](https://youtu.be/wmxaVrAFfeE) |\n| Elective C |TBA (But will have cats with lasers...)                            | @gorhgorhi                           |                | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_C) | [Video](https://youtu.be/kVzHE4MRPOM) |\n| Elective D |Building DApps with Textile, the iCloud for the DWeb               | @balupton @carsonfarmer @andrewxhill |                | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_D), Slides ([PDF](https://github.com/ipfs/camp/blob/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_D/Slides.pdf)) | [Video](https://youtu.be/4r7_lOyv4W8) |\n| Elective E |Deploying IPFS Infrastructure                                      | @mburns @obo20                       | Take your IPFS game to the next level by learning how to deploy and manage your very own IPFS node in the cloud.                                                               | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_E) | [Video](https://youtu.be/PD0e89b4NBk) |\n| Elective F |Starting, Growing, and Stewarding your IPFS Community              | @nukemandan @kk3wong @stefanhans     | Let's get Meta! A workshop on effective workshops! And how to foster a community                                                                | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_F), Slides ([Google Slides](https://docs.google.com/presentation/d/1OLmSfOMjffl7z2ODxHaBcQBmyVEGdt8O7h3bxYv_VVI/edit?usp=sharing))| [Video](https://youtu.be/crTa1j3FRac)|\n| Elective G |Managing Datasets with QRI                                         | @b5                                  | An open source tool for versioned, scriptable, exportable, collaborative datasets | [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_G) | [Video](https://youtu.be/ZN1mPBECsvA) |\n| Elective H |Making the Browser a True User Agent                               | @autonome @Gozala @soapdog           | We\u2019ll show how browsers act as a value filter on our world, teach some approaches to making the browser truly be an agent that represents you, and break into groups to start building our own true user agents.| [Course Repo](https://github.com/ipfs/camp/tree/master/CORE_AND_ELECTIVE_COURSES/ELECTIVE_COURSE_H), Slides ([HackMD](https://hackmd.io/@dietrich/rkrZEKFRV#/)) | N/A |\n\n## [\ud83d\udcc3 Poster Projects](POSTER_PROJECTS) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtRIawC2wSJVo9nbfjypTaDh)\n\n| Topic | Owner | Description | Recording |\n| :---- | :---: | :---------- | :-------- |\n| [HTTP gateways](POSTER_PROJECTS/topic-HTTP-gateways.md)                          | <a href=\"https://github.com/autonome\"><img src=\"https://github.com/autonome.png?size=200\" alt=\"autonome\" width=\"100\" /></a>                   <br>[@autonome](https://github.com/autonome)             | An IPFS Gateway acts as a bridge between traditional web browsers and IPFS.                                                                                                               | [Video](https://youtu.be/uoI39GpwxVI) |\n| [The intricacies of DWeb Addressing](POSTER_PROJECTS/topic-dweb-addressing.md)   | <a href=\"https://github.com/lidel\"><img src=\"https://github.com/lidel.png?size=200\" alt=\"lidel\" width=\"100\" /></a>                            <br>[@lidel](https://github.com/lidel)                   | Systems like IPFS use hashes of data to reference content by itself, rather than by an arbitrary location/name. With this comes compatability and human concerns around referencing data. | [Video](https://youtu.be/Qm-ekNHIYcs) |\n| [IPLD Selectors](POSTER_PROJECTS/topic-IPLD-selectors.md)                        | <a href=\"https://github.com/maparent\"><img src=\"https://github.com/maparent.png?size=200\" alt=\"maparent\" width=\"100\" /></a>                   <br>[@maparent](https://github.com/maparent)             | IPLD Selectors are expressions that identify (\"select\") a subset of nodes in an IPLD dag. i.e. subsets of IPLD objects.                                                                   | [Video](https://youtu.be/ywGgBbydkwU) |\n| [Graphsync](POSTER_PROJECTS/topic-graphsync.md)                                  | <a href=\"https://github.com/b5\"><img src=\"https://github.com/b5.png?size=200\" alt=\"b5\" width=\"100\" /></a>                                     <br>[@b5](https://github.com/b5)                         | A protocol to synchronize graphs across peers.                                                                                                                                            | [Video](https://youtu.be/dHN3JwrwUZg) |\n| [KeyStore](POSTER_PROJECTS/topic-keystore.md)                                    | <a href=\"https://github.com/gozala\"><img src=\"https://github.com/gozala.png?size=200\" alt=\"gozala\" width=\"100\" /></a>                         <br>[@gozala](https://github.com/gozala)                 | A secure and simple way of storing and managing keypairs (for IPFS services).                                                                                                             | [Video](https://youtu.be/lJmUPXJYEpM) |\n| [NPM-on-IPFS](POSTER_PROJECTS/topic-NPM-on-IPFS.md)                              | <a href=\"https://github.com/achingbrain\"><img src=\"https://github.com/achingbrain.png?size=200\" alt=\"achingbrain\" width=\"100\" /></a>          <br>[@achingbrain](https://github.com/achingbrain)       | Let's take NPM and put it on IPFS.                                                                                                                                                        | [Video](https://youtu.be/Yck2LimWcAY) |\n| [DAG walking facilities in IPLD](POSTER_PROJECTS/topic-DAG-walking-in-IPLD.md)   | <a href=\"https://github.com/warpfork\"><img src=\"https://github.com/warpfork.png?size=200\" alt=\"warpfork\" width=\"100\" /></a>                   <br>[@warpfork](https://github.com/warpfork)             | The goal of IPLD is to enable decentralized data-structures that are universally addressable and linkable.                                                                                | [Video](https://youtu.be/sTPNcET5k20) |\n| [IPFS/libp2p PubSub](POSTER_PROJECTS/topic-pubsub.md)                            | <a href=\"https://github.com/whyrusleeping\"><img src=\"https://github.com/whyrusleeping.png?size=200\" alt=\"whyrusleeping\" width=\"100\" /></a>    <br>[@whyrusleeping](https://github.com/whyrusleeping)   | Publish-Subscribe, called \u2018pubsub\u2019 for short, is a pattern often used to handle events in large-scale networks.                                                                           | [Video](https://youtu.be/mY-VXRu14vk) |\n| [CRDTs](POSTER_PROJECTS/topic-CRDT.md)                                           | <a href=\"https://github.com/parkan\"><img src=\"https://github.com/parkan.png?size=200\" alt=\"parkan\" width=\"100\" /></a>                         <br>[@parkan](https://github.com/parkan)                 | A \"Conflict-free replicated data type\" is a data structure which can be replicated across multiple computers in a network, without conflicts!                                             | [Video](https://youtu.be/aljPiArs0Pw) |\n| [IPFS Nodes](POSTER_PROJECTS/topic-IPFS-node.md)                                 | <a href=\"https://github.com/carsonfarmer\"><img src=\"https://github.com/carsonfarmer.png?size=200\" alt=\"carsonfarmer\" width=\"100\" /></a>       <br>[@carsonfarmer](https://github.com/carsonfarmer)     | A general overview of what it means to be/implement an IPFS node.                                                                                                                         | [Video](https://youtu.be/bMNOopHhDiE) |\n| [IPFS DHT](POSTER_PROJECTS/topic-IPFS-DHT.md)                                    | <a href=\"https://github.com/gpestana\"><img src=\"https://github.com/gpestana.png?size=200\" alt=\"gpestana\" width=\"100\" /></a>                   <br>[@gpestana](https://github.com/gpestana)             | IPFS uses a Distributed Hash Table (DHT) to keep track of various types of data, such as content provider records.                                                                        | [Video](https://youtu.be/DeR9xbWP3uk) |\n| [Mutable File System (MFS)](POSTER_PROJECTS/topic-MFS.md)                        | <a href=\"https://github.com/leshokunin\"><img src=\"https://github.com/leshokunin.png?size=200\" alt=\"leshokunin\" width=\"100\" /></a>             <br>[@leshokunin](https://github.com/leshokunin)         | Mutable File System (MFS) is a tool built into IPFS that lets you treat files like you would a normal name-based filesystem.                                                              | [Video](https://youtu.be/qwDiBLE3jBk) |\n| [Bitswap](POSTER_PROJECTS/topic-bitswap.md)                                      | <a href=\"https://github.com/jacobheun\"><img src=\"https://github.com/jacobheun.png?size=200\" alt=\"jacobheun\" width=\"100\" /></a>                <br>[@jacobheun](https://github.com/jacobheun)           | Bitswap is the data trading module for IPFS. Its purpose is to request blocks from and send blocks to other peers in the network.                                                         | [Video](https://youtu.be/ImYoVprEg5E) |\n| [PeerPad internals](POSTER_PROJECTS/topic-peerpad.md)                            | <a href=\"https://github.com/jimpick\"><img src=\"https://github.com/jimpick.png?size=200\" alt=\"jimpick\" width=\"100\" /></a>                      <br>[@jimpick](https://github.com/jimpick)               | PeerPad is a decentralized editor that allows concurrent writing of text.                                                                                                                 | [Video](https://youtu.be/mSkJIsK1jvI) |\n| [go-ipfs Infrastructure](POSTER_PROJECTS/topic-go-ipfs-infra.md)                 | <a href=\"https://github.com/stebalien\"><img src=\"https://github.com/stebalien.png?size=200\" alt=\"stebalien\" width=\"100\" /></a>                <br>[@stebalien](https://github.com/stebalien)           | This topic should cover what it takes to initialize a go-IPFS node, and connect it to a public P2P network.                                                                               | [Video](https://youtu.be/U2c8Mvowj2Q) |\n| [IPFS Cluster](POSTER_PROJECTS/topic-cluster.md)                                 | <a href=\"https://github.com/meiqimichelle\"><img src=\"https://github.com/meiqimichelle.png?size=200\" alt=\"meiqimichelle\" width=\"100\" /></a>    <br>[@meiqimichelle](https://github.com/meiqimichelle)   | IPFS Cluster is a stand-alone application and a CLI client that allocates, replicates, and tracks pins across a cluster of IPFS daemons.                                                  | [Video Part-1](https://youtu.be/5q4Zl4JQh3Y)<br>[Video Part-2](https://youtu.be/SZbHBgYARHI)|\n| [Textile internals](POSTER_PROJECTS/topic-textile.md)                            | <a href=\"https://github.com/andrewxhill\"><img src=\"https://github.com/andrewxhill.png?size=200\" alt=\"andrewxhill\" width=\"100\" /></a>          <br>[@andrewxhill](https://github.com/andrewxhill)       | Textile is a set of tools and trust-less infrastructure for building censorship resistant and privacy preserving applications.                                                            | [Video](https://youtu.be/oTsM2qkdcJ4) |\n| [The design of the IPFS Repo](POSTER_PROJECTS/topic-IPFS-repo.md)                | <a href=\"https://github.com/dignifiedquire\"><img src=\"https://github.com/dignifiedquire.png?size=200\" alt=\"dignifiedquire\" width=\"100\" /></a> <br>[@dignifiedquire](https://github.com/dignifiedquire) | A repo is the storage repository of an IPFS node. It is the subsystem that actually stores the data IPFS nodes use.                                                                       | [Video](https://youtu.be/oA4P47elw6w) |\n| [IPFS/Libp2p content routing](POSTER_PROJECTS/topic-content-provider-records.md) | <a href=\"https://github.com/bigs\"><img src=\"https://github.com/bigs.png?size=200\" alt=\"bigs\" width=\"100\" /></a>                               <br>[@bigs](https://github.com/bigs)                     | The IPFS routing system utilizes \"content provider records\" hosted on a distributed key-value store to resolve content providers.                                                         | [Video](https://youtu.be/XNNuSg5SCTg) |\n| [Circuit Relay](POSTER_PROJECTS/topic-circuit-relay.md)                          | <a href=\"https://github.com/ianopolous\"><img src=\"https://github.com/ianopolous.png?size=200\" alt=\"ianopolous\" width=\"100\" /></a>             <br>[@ianopolous](https://github.com/ianopolous)         | The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.             | [Video](https://youtu.be/YiKAawnpgEs) |\n| [Swarming (concept)](POSTER_PROJECTS/topic-swarming.md)                          | <a href=\"https://github.com/mburns\"><img src=\"https://github.com/mburns.png?size=200\" alt=\"mburns\" width=\"100\" /></a>                         <br>[@mburns](https://github.com/mburns)                 | Swarming is a software method that takes advantage of multiple peers (the \"swarm\") to fulfill a task which may be easily distributed.                                                     | [Video](https://youtu.be/1yboo0T16IU) |\n| [IPNS](POSTER_PROJECTS/topic-IPNS.md)                                            | <a href=\"https://github.com/aschmahmann\"><img src=\"https://github.com/aschmahmann.png?size=200\" alt=\"aschmahmann\" width=\"100\" /></a>          <br>[@aschmahmann](https://github.com/aschmahmann)       | IPNS is a system for creating and updating mutable links to IPFS content.                                                                                                                 | [Video](https://youtu.be/51eacKgZjak) |\n\n## [\ud83d\udc0b Deep Dives](DEEP_DIVES) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtTkiVb-pfIb9Lk7VLWp4Giq)\n\n| Topic | Owner | Description | Recording |\n| :---- | :---: | :---------- | :-------- |\n| [Scaling up the DHT \ud83d\udce6](DEEP_DIVES/02-scaling-up-the-dht.md) | <a href=\"https://github.com/Kubuxu\"><img src=\"https://github.com/Kubuxu.png?size=200\" alt=\"Kubuxu\" width=\"100\" /></a> | What can we do to optimise the performance of our DHT? Are there alternatives? | [Video](https://youtu.be/b2dtKOR_cn0) |\n| [IPID - Master key security and user-experience \ud83d\udce6](DEEP_DIVES/05-ipid-master-key-ux.md) | <a href=\"https://github.com/satazor\"><img src=\"https://github.com/satazor.png?size=200\" alt=\"satazor\" width=\"100\" /></a> |  [IDM](https://github.com/ipfs-shipyard/pm-idm) (Identity Manager) aims to support several [DIDs](https://w3c-ccg.github.io/did-spec/) methods and [IPID](https://did-ipid.github.io/ipid-did-method) was chosen as the first DID method to be integrated. | [Video](https://youtu.be/hLE08nQigx8) |\n| [Package Managers: What Now, What Next? \ud83d\udce6](DEEP_DIVES/09-package-managers-what-now-what-next.md) | <a href=\"https://github.com/jessicaschilling\"><img src=\"https://github.com/jessicaschilling.png?size=200\" alt=\"jessicaschilling\" width=\"100\" /></a> |  Community evaluation and ideation session to recap the current (as of late June) state of the IPFS-enabled package manager landscape, discuss happiness and pain points, and do some ideation/co-creation  around the direction of our next rounds of package manager efforts. | [Video](https://youtu.be/yWR8vbEIt8Q) |\n| [IPFS on Mobile](DEEP_DIVES/10-ipfs-on-mobile.md) | <a href=\"https://github.com/carsonfarmer\"><img src=\"https://github.com/carsonfarmer.png?size=200\" alt=\"carsonfarmer\" width=\"100\" /></a> |  Increasingly, everyday computing is happening in mobile environments. At the same time, many features of IPFS and related technologies work best on an 'always-connected' network that simply doesn't exist in the mobile world. In this deep dive, we will explore the issues inherent to p2p systems operating in mobile environments, discuss some existing solutions, and hopefully outline a research/development agenda that will help catalyze a wave of new IPFS-based mobile solutions. | [Video](https://youtu.be/RfXRn8RTLh4) |\n| [Private content on IPFS \ud83d\udce6](DEEP_DIVES/11-private-content-on-ipfs.md) | <a href=\"https://github.com/ianopolous\"><img src=\"https://github.com/ianopolous.png?size=200\" alt=\"ianopolous\" width=\"100\" /></a> | Can we have a private group chat implemented on IPFS? | [Video](https://youtu.be/oiEhyw17_OI) |\n| [Building the IPFS Community](DEEP_DIVES/12-building-the-ipfs-community.md) | <a href=\"https://github.com/stefanhans\"><img src=\"https://github.com/stefanhans.png?size=200\" alt=\"stefanhans\" width=\"100\" /></a> | Community, evangelism, engagement, on ramp. | [Video](https://youtu.be/R81ePQQ2pqA) |\n| [IPFS for websites (static, dynamic, search, etc)](DEEP_DIVES/13-ipfs-for-websites-static-dynamic-search-etc.md) | <a href=\"https://github.com/autonome\"><img src=\"https://github.com/autonome.png?size=200\" alt=\"dietrich\" width=\"100\" /></a> | What are the best practices and open questions for using IPFS for static / dynamic websites? What about indexing and searching? | [Video](https://youtu.be/K8dHuZEL3Q0) |\n| [Revocation/Rotating of IPNS Keys](DEEP_DIVES/16-revocation-rotating-of-ipns-keys.md) | <a href=\"https://github.com/aschmahmann\"><img src=\"https://github.com/aschmahmann.png?size=200\" alt=\"aschmahmann\" width=\"100\" /></a> | The idea of using a public key to identify mutable data is cool, but what happens when that key becomes compromised? | Presenter Opted Out of Recording |\n| [How can IPFS support sharding \ud83d\udce6](DEEP_DIVES/20-how-can-ipfs-support-sharding.md) | <a href=\"https://github.com/jacobheun\"><img src=\"https://github.com/hsanjuan.png?size=200\" alt=\"hsanjuan\" width=\"100\" /></a> |  How to best pin an arbitrary part of a DAG. | [Video](https://youtu.be/tMejHAZVT-I) |\n| [Replication protocol \ud83d\udce6](DEEP_DIVES/24-replication-protocol.md) | <a href=\"https://github.com/hannahhoward\"><img src=\"https://github.com/hannahhoward.png?size=200\" alt=\"hannahhoward\" width=\"100\" /></a> | How can we more quickly sync a DAG or part of a DAG between two nodes? A compliment to bitswap, affectionately overloaded as GraphSync | [Video](https://youtu.be/6Mwa3AMEPYc) |\n| [Do not replicate lists - DNR](DEEP_DIVES/25-do-not-replicate-lists-dnr.md) | <a href=\"https://github.com/olizilla\"><img src=\"https://github.com/olizilla.png?size=200\" alt=\"olizilla\" width=\"100\" /></a> | How to stop your node from replicating content due to take down notices or other reasons | [Video](https://youtu.be/XpwmB-44zPI) |\n| [Fast IPNS \ud83d\udce6](DEEP_DIVES/26-fast-ipns.md) | <a href=\"https://github.com/hugomrdias\"><img src=\"https://github.com/hugomrdias.png?size=200\" alt=\"hugomrdias\" width=\"100\" /></a> |  How to increase the IPNS resolution speed | Moved to Lightning Talk |\n| [IPFS Education and Documentation](DEEP_DIVES/30-ipfs-education-and-documentation.md) | <a href=\"https://github.com/meiqimichelle\"><img src=\"https://github.com/meiqimichelle.png?size=200\" alt=\"meiqimichelle\" width=\"100\" /></a> | What are the biggest improvements we can make to documentation for IPFS? | [Video](https://youtu.be/SlD3eL8js80) |\n| [Mounting an IPFS filesystem \ud83d\udce6](DEEP_DIVES/31-mounting-an-ipfs-filesystem.md) | <a href=\"https://github.com/djdv\"><img src=\"https://github.com/djdv.png?size=200\" alt=\"djdv\" width=\"100\" /></a> | Is there a way to efficiently mount IPFS as a filesystem? FUSE support is [here](https://github.com/ipfs/go-ipfs/blob/v0.4.21-rc3/docs/fuse.md). What are current limitations, challenges? What needs to happen to enable mounting of MFS? [WebDAV](https://github.com/ipfs/in-web-browsers/issues/146) is often used in network storage drives, and mainstream operating systems come with native support for mounting WebDAV as drives. It could supersede Writable Gateway and create a surface for interop with apps that provide built-in client-side support for WebDAV. | [Video](https://youtu.be/lucNzPhIDUU) |\n| [IPNS link rot](DEEP_DIVES/34-ipns-link-rot.md) | <a href=\"https://github.com/alanshaw\"><img src=\"https://github.com/alanshaw.png?size=200\" alt=\"alanshaw\" width=\"100\" /></a> |  Right now, IPNS needs to be refreshed by original publisher every day, otherwise it stops working. There should be a way to pin IPNS address so that other peers keep refreshing the last valid entry when original node goes offline, keeping the last version alive even if the original publisher disappears forever. | [Video](https://youtu.be/7urDcbLnpTc) |\n| [Deterministic CIDs! Reproducible File Imports! Verifable HTTP Gateways!](DEEP_DIVES/35-deterministic-cids-reproducible-file-imports-verifiable-http-gateways.md) | <a href=\"https://github.com/lidel\"><img src=\"https://github.com/lidel.png?size=200\" alt=\"lidel\" width=\"100\" /></a> |  How to deterministically get the same CID for the same data, even if default parameters of `ipfs.add` change? How to validate data read via HTTP Gateway without running full IPFS node? | [Video](https://youtu.be/w5vPvccOstg) |\n| [IPFS in Web Workers](DEEP_DIVES/37-ipfs-in-web-workers.md) | <a href=\"https://github.com/gozala\"><img src=\"https://github.com/gozala.png?size=200\" alt=\"gozala\" width=\"100\" /></a> | Where we are, limitations, known problems. | [Video](https://youtu.be/SA8dl98X3Yk) |\n| [UnixFS v2 \ud83d\udce6](DEEP_DIVES/38-unixfs-v2.md) | <a href=\"https://github.com/mikeal\"><img src=\"https://github.com/mikeal.png?size=200\" alt=\"mikeal\" width=\"100\" /></a> |  [Latest spec iteration](https://github.com/ipfs/unixfs-v2/pull/27) and [implementation work](https://github.com/ipld/js-unixfsv2/pull/3) | [Video](https://youtu.be/Sy8IUtPJH3w) |\n| [Using CRDTs to build real-time collaborative DApps](DEEP_DIVES/39-using-crdts-to-build-real-time-collaborative-dapps.md) | <a href=\"https://github.com/jimpick\"><img src=\"https://github.com/jimpick.png?size=200\" alt=\"jimpick\" width=\"100\" /></a> |  What are the hurdles to using CRDTs in dapps with IPFS? How can we make peer-base easier to understand and use? | [Video](https://youtu.be/j_vdp3Rzms0) |\n| [Better NAT traversal so that Relay servers are a last (not first) resort](DEEP_DIVES/40-better-nat-traversal-so-that-relay-servers-are-a-last-not-first-resort.md) | <a href=\"https://github.com/raulk\"><img src=\"https://github.com/raulk.png?size=200\" alt=\"raulk\" width=\"100\" /></a> | The current cost of running relay servers for IPFS is unsustainable.  We need to implement better NAT hole punching mechanisms in libp2p to reduce the usage of relay servers by NAT\u2019d hosts.  TCP hole punching has a success rate of ~60%, so we should be preferentially hole punching. TCP simultaneous open is one example. STUN servers are another example; yet another is making every non-NATed host in a libp2p network a relay node. | [Video](https://youtu.be/Q-uRlotUzcc) |\n| [libp2p message orientation](DEEP_DIVES/42-libp2p-message-orientation.md) | <a href=\"https://github.com/bigs\"><img src=\"https://github.com/bigs.png?size=200\" alt=\"bigs\" width=\"100\" /></a> | libp2p is currently stream-oriented. We want to enable message-oriented communication (e.g. UDP). Help us envision what the APIs would look like, and how an application could simultaneously hold stream-based and message-based conversations with peers in the world via libp2p. | Did not Present |\n| [IPFS metrics and usage statistics \ud83d\udce6](DEEP_DIVES/43-ipfs-metrics-and-usage-statistics.md) | <a href=\"https://github.com/lanzafame\"><img src=\"https://github.com/lanzafame.png?size=200\" alt=\"lanzafame\" width=\"100\" /></a> | How to collect telemetry like application metrics and usage in a distributed world | [Video](https://youtu.be/pp817bm3wek) |\n| [Decentralized Data Processing](DEEP_DIVES/44-decentralized-data-processing.md) | <a href=\"https://github.com/alari\"><img src=\"https://github.com/alari.png?size=200\" alt=\"alari\" width=\"100\" /></a> | How could we process large amounts of data in permissionless networks? Use cases, verifiable state transitions, aggregations and bulk updates, etc. | [Video](https://youtu.be/DmKE79pwkps) |\n| [Building Dynamic P2P Applications](DEEP_DIVES/45-building-dynamic-p2p-applications.md) | <a href=\"https://github.com/jkarni\"><img src=\"https://github.com/jkarni.png?size=200\" alt=\"jkarni\" width=\"100\" /></a> |  IPFS and its associated technologies are mostly static. Radicle is an attempt to build a dynamic P2P web on top of IPFS; one which can host applications with the same abilities of the centralized servers of today to receive inputs from various people or sources. | [Video](https://youtu.be/yboQAMwvtVs) |\n| [Better file chunking \ud83d\udce6](DEEP_DIVES/46-better-file-chunking.md) | <a href=\"https://github.com/mib-kd743naq\"><img src=\"https://github.com/mib-kd743naq.png?size=200\" alt=\"mib-kd743naq\" width=\"100\" /></a> | Within the IPFS stack/ecosystem, just as within computing as a whole, an uncompressed stream of untagged octets is a fundamental unit of exchange. As a general-purpose data storage system IPFS needs to handle an unbounded variety of content represented by such streams. Handling the maximum amount of this variety efficiently ( ideally by default ) would likely have an outsized impact on the future adoption of IPFS as a long-term data interchange medium/format. | [Video](https://youtu.be/_cw4jx2jJrY) |\n| [Dynamic DAG traversal](DEEP_DIVES/47-dynamic-dag-traversal.md) | <a href=\"https://github.com/maparent\"><img src=\"https://github.com/maparent.png?size=200\" alt=\"maparent\" width=\"100\" /></a> | Extend IPLD to cross between immutable and mutable references | [Video](https://youtu.be/W3Kz3QSVRlY) |\n| [Design Patterns for DWeb Apps](DEEP_DIVES/48-design-patterns-for-dweb-apps.md) | <a href=\"https://github.com/leshokunin\"><img src=\"https://github.com/leshokunin.png?size=200\" alt=\"leshokunin\" width=\"100\" /></a> | Most IPFS apps have UX issues. We will pick a feature of an existing app, and improve its UX by simplifying how to interact with it, how it works. Textile.io lowered the permission and roles system from ~15 methods to 2 this way! | [Video](https://youtu.be/w07JvGVeHpM) |\n| [IPFS and Guix \ud83d\udce6](DEEP_DIVES/49-ipfs-and-guix.md) | <a href=\"https://github.com/ambrevar\"><img src=\"https://github.com/ambrevar.png?size=200\" alt=\"ambrevar\" width=\"100\" /></a> | Exploration into existing or potential issues with integrating IPFS with Guix | [Video](https://youtu.be/ZvJYYZ1aEDU) |\n\n**Note**: topics relevant to package managers have a \ud83d\udce6 suffix.\n\n## [\u26a1\ufe0f Lightning Talks](LIGHTNING_TALKS) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtQVNQcBaCKg5kKhfOBv45Jb)\n\n| Presenter     | Name & GitHub handle  | Topic         | Slides | Recording |\n| ------------- | --------------------- | ------------- | --------- | --------- |\n| <img src=\"https://avatars1.githubusercontent.com/u/607609?s=460&v=4\" width=\"100\" /> | Justin Maier ([@justmaier](https://github.com/JustMaier)) and Victor Rortvedt ([@twoirtter](https://github.com/vrortvedt))  | Introducing The Gathering, a web app built with Libp2p to improve in-person networking at conferences and gatherings  | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-thegathering.pdf) | [Video](https://youtu.be/pt1RtMzSEIg) |\n| <img src=\"https://avatars0.githubusercontent.com/u/665810?s=460&v=4\" width=\"100\" /> | Alex Potsides ([@achingbrain](https://github.com/achingbrain))  | npm on IPFS: Using IPFS to install your JavaScript dependencies \ud83d\udce6  | [HTML](https://achingbrain.github.io/npm-on-ipfs-talk/) | [Video](https://youtu.be/PLbIsYZDOTM) |\n| <img src=\"https://avatars1.githubusercontent.com/u/30949000?s=400&v=4\" width=\"100\" /> | Shokunin ([@leshokunin](https://github.com/leshokunin)) | Building a Dropbox replacement on IPFS and Textile | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-dropboxreplacement.pdf) | [Video](https://youtu.be/uTk12jnIboY) |\n| <img src=\"https://avatars0.githubusercontent.com/u/2630?s=460&v=4\" width=\"100\" /> | Makoto Inoue ([@makoto](https://github.com/makoto))  | ENS + IPFS: Using ENS as a naming system for IPFS  | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-ensipfs.pdf) | [Video](https://youtu.be/3AS2BD22DZg) |\n| <img src=\"https://avatars1.githubusercontent.com/u/40496?s=460&v=4\" width=\"100\" /> | Benjamin Kampmann ([@gnunicorn](https://github.com/gnunicorn)) | Changing the record: Using substrate to add a custom blockchain to your IPFS dweb app | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/IPFSCamp%202019%20Lightning%20Talk_%20_Changing%20the%20record_%20Using%20substrate%20to%20add%20a%20custom%20blockchain%20to%20your%20IPFS%20dweb%20app_.pdf) - [Google Slides](https://docs.google.com/presentation/d/14bC3t4BxV4raYG-HyFuYcxcuv5leciX36lc0B98WAvs/edit?usp=sharing) | [Video](https://youtu.be/dpe3MeH3I5k) |\n| <img src=\"https://avatars2.githubusercontent.com/u/1060?s=460&v=4\" width=\"100\" /> | Andrew Nesbitt ([@andrew](https://github.com/andrew))  | Republishing a project's npm dependencies to IPFS as a micro-registry \ud83d\udce6  | N/A (video talk) | [Video](https://drive.google.com/a/protocol.ai/file/d/1ExdN_t7xV2mEldjri5WXNDPU5hL4wa4q/view?usp=sharing) |\n| <img src=\"https://avatars1.githubusercontent.com/u/11023317?s=460&v=4\" width=\"100\" /> | Blake Joyce ([@bjoyce3](https://github.com/bjoyce3)) | Who wins in a fight: Superman, HTTPS, or IPFS? | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-whowins.pdf) | [Video](https://youtu.be/uhAkb9FgTBg) |\n| <img src=\"https://avatars0.githubusercontent.com/u/1489143?s=460&v=4\" width=\"100\" /> | Pierre Neidhardt ([@ambrevar](https://github.com/ambrevar)) | Package distribution using IPFS on Guix \ud83d\udce6 | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-guix.pdf) | [Video](https://youtu.be/RxMSJ8YfjB8) |\n| <img src=\"https://avatars2.githubusercontent.com/u/5924712?s=460&v=4\" width=\"100\" /> | Adrian Lanzafame ([@lanzafame](https://github.com/Lanzafame))  | A quick look into the Pinning API proposal | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-pinningapi.pdf) | [Video](https://youtu.be/zdAvXTpBIfc) |\n| <img src=\"https://avatars1.githubusercontent.com/u/410789?s=460&v=4\" width=\"100\" /> | Dmitry Starodubcev ([@xhipster](https://github.com/xhipster))  | CYB: Your personal robot on the Great Web  | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/cyb.pdf) | [Video](https://youtu.be/YEQy_qcmARQ) |\n| <img src=\"https://avatars0.githubusercontent.com/u/627638?s=460&v=4\" width=\"100\" /> | Eric Myhre ([@warpfork](https://github.com/warpfork))  | Solving the distributed naming problem (!) in the applied cases of package management \ud83d\udce6 | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-distributednaming.pdf) | [Video](https://youtu.be/z7VKDD0pbJU) |\n| <img src=\"https://avatars0.githubusercontent.com/u/1027022?s=460&v=4\" width=\"100\" /> | H\u00e9ctor Sanju\u00e1n ([@hsanjuan](https://github.com/hsanjuan)) | go-ds-crdt: CRDT KV stores arrive in go-land  | [HTML](https://hector.link/presentations/go-ds-crdt-ligthning/) | [Video](https://youtu.be/kGB0VtfSMWs) |\n| <img src=\"https://avatars1.githubusercontent.com/u/1154390?s=460&v=4\" width=\"100\" /> | Brendan O'Brien ([@b5](https://github.com/b5))  | Using dsync for point-to-point DAG transfer | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-dsync.pdf) | [Video](https://youtu.be/JIA661e8oO8) |\n| <img src=\"https://avatars3.githubusercontent.com/u/370259?s=460&v=4\" width=\"100\" /> | Andrew Hill ([@andrewxhill](https://github.com/andrewxhill)) | Content addressing and personal data sovereignty | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/Andrew_Hill_IPFS_Personal_data_ownership.pdf) | [Video](https://youtu.be/0pXiyXuPUZM) |\n| <img src=\"https://avatars0.githubusercontent.com/u/860295?s=460&v=4\" width=\"100\" /> | Kinuko Yasuda ([@kinu](https://github.com/kinu)) and Jim Pick ([@jimpick](https://github.com/jimpick)) | Signed exchanges in Chrome | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-signedexchangeschrome.pdf) | [Video](https://youtu.be/zYjsVe4s1JA) |\n| <img src=\"https://avatars2.githubusercontent.com/u/6493975?s=460&v=4\" width=\"100\" /> | Edgar Lee ([@hinshun](https://github.com/hinshun)) | Containerd meets IPFS | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-containerd.pdf) | [Video](https://youtu.be/nvO1MMRxu1Q) |\n| <img src=\"https://avatars1.githubusercontent.com/u/5222525?s=460&v=4\" width=\"100\" /> | Antoine Eddi ([@aeddi](https://github.com/aeddi)) | Implementing libp2p over Bluetooth Low Energy | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-bluetoothle.pdf) | [Video](https://youtu.be/aaSFHxpwm9A) |\n| <img src=\"https://avatars1.githubusercontent.com/u/21236?s=460&v=4\" width=\"100\" /> | Irakli Gozalishvili ([@gozala](https://github.com/gozala))  | Inter Planetary Data Feed (IPDF) | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-ipdf.pdf) | [Video](https://youtu.be/KBwR0I7i4Wg) |\n| <img src=\"https://avatars1.githubusercontent.com/u/1398860?s=460&v=4\" width=\"100\" /> | Gon\u00e7alo Pestana ([@gpestana](https://github.com/gpestana)) | Privacy in P2P networks: DHTs and IPFS | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-privacyp2p.pdf) | [Video](https://youtu.be/lGk6OErtDFY) |\n| <img src=\"https://avatars2.githubusercontent.com/u/81581?s=460&v=4\" width=\"100\" /> | Victor Grishchenko ([@gritzko](https://github.com/gritzko))  | An overview of RON | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-ron.pdf) | [Video](https://youtu.be/KJTGv1h-nUM) |\n| <img src=\"https://avatars3.githubusercontent.com/u/248257?s=460&v=4\" width=\"100\" /> | R\u00fcdiger Klaehn ([@rklaehn](https://github.com/rklaehn))  | Actyx's experiences on building with IPFS | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-actyx.pdf) | [Video](https://youtu.be/Qzu0xtCT-R0) |\n| <img src=\"https://avatars3.githubusercontent.com/u/11004800?s=460&v=4\" width=\"100\" /> | Jonathan Budd ([@cesarosum](https://github.com/cesarosum)) | Peergos: E2E encrypted storage and social network on IPFS | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-peergos.pdf) | [Video](https://youtu.be/MBHsJlx7knA) |\n| <img src=\"https://avatars3.githubusercontent.com/u/1017236?s=460&v=4\" width=\"100\" /> | Andr\u00e9 Cruz ([@satazor](https://github.com/satazor)) | Introducing Nomios | [Website](https://nomios.io/) | [Video](https://youtu.be/EEIq6Eu9ug4) |\n| <img src=\"https://avatars0.githubusercontent.com/u/17089485?s=460&v=4\" width=\"100\" /> | Alexandre Trottier ([@postables](https://github.com/postables)) | Why open source matters and how individuals can further the movement | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-opensource.pdf) | [Video](https://youtu.be/usa796ebEnI) |\n| <img src=\"https://avatars3.githubusercontent.com/u/370259?s=460&v=4\" width=\"100\" /> | Andrew Hill ([@andrewxhill](https://github.com/andrewxhill)) | Textile | [PDF](https://github.com/ipfs/camp/blob/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-textile.pdf) | [Video](https://youtu.be/uI9eEZQZpfw)\n| <img src=\"https://avatars2.githubusercontent.com/u/7811297\" width=\"100\" /> | Matt Ober ([@obo20](https://github.com/obo20)) | IPFS Industry Trends |  | [Video](https://youtu.be/LumqUfWd6g0)\n| <img src=\"https://avatars1.githubusercontent.com/u/687840\" width=\"100\" /> | Zhanna Sharipova ([@sharipova](https://github.com/sharipova)) | Anytype |  | [Video](https://youtu.be/NAF-4AFSqIo)\n\nNote: topics relevant to package managers have a \ud83d\udce6 suffix.\n\n## [\ud83e\uddec Sci-Fi Fair](SCI-FI_FAIR) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtTWCyJcTgLFhsg8Bi2dFPCo)\n\n| Project           | Presenter         | Description | Interview\n| -------------     | -------------     | ------------- | -- |\n| RPi cluster       | @hsanjuan, @lanzafame   | ipfs-cluster... on Raspberry Pi | [video](https://youtu.be/7pFf5gUnQ24) |\n| Actyx             |  @rklaehn  | Industrial automation on IPFS | n/a\u2122 |\n| npm-in-a-box      | @achingbrain | what is says on the tin | n/a\u2122 |\n| The Gathering     | @JustMaier | conference networking on decentralized networks | n/a\u2122 |\n| Textile Photos    | @andrewxhill, @carsonfarmer, @balupton | a decentralized photo booth | [video](https://youtu.be/34lVgp1snvg) |\n| Lazer Catbot      | @gorhgorh | \ud83d\ude3c | n/a\u2122 |\n| FAPRS             | @MarneeDear | IPFS over Ham Radio | n/a\u2122 |\n| Brave             | @yrliou, @darkdh, @emerick | native IPFS in Brave browser! | [video](https://youtu.be/JTAMeBrul6k) |\n| ENS               | @makoto | resolving ENS/IPFS with DNS | [video](https://youtu.be/8aC4eaI7Lx4) |\n| IPFS Spider       | @magnshen | crawling the IPFS network | n/a\u2122 |\n| Cluster Labs Horizon + more | @vasa-develop | viz for the RPi cluster + more | n/a\u2122 |\n| Berty | @aeddi | IPFS over other kinds of radio! | [video](https://youtu.be/B3fUHtdVBn0)  |\n| MetaMask | @kumavis | DHT visualizer and more | [video](https://youtu.be/7HDVgjQnNdM) |\n| Janus    | @solangegueiros | an IPFS search engine | [video](https://youtu.be/hRTBQd_o1oM) |\n\n## [\ud83e\udde9 Unconf](UNCONF)\n\n| Host     | GitHub handle  | Topic | Notes/Artifacts |\n| ------------- | --------------------- | ------------- | --------- |\n| <img src=\"https://avatars3.githubusercontent.com/u/28847087?s=460&v=4\" width=\"100\" /> | [@vasa-develop](https://github.com/vasa-develop) | Dappbase: Firebase for Dapps | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-dappbase.md) |\n| <img src=\"https://avatars1.githubusercontent.com/u/3278772?s=460&v=4\" width=\"100\" /> | [@pepoospina](https://github.com/pepoospina) | Underscore Protocol | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-knowledge-graphs_and_uprtcl.md) |\n| <img src=\"https://avatars2.githubusercontent.com/u/47656053?s=460&v=4\" width=\"100\" /> | [@caojingbin](https://github.com/caojingbin) | Video Website Based on IPNS |  |\n| <img src=\"https://avatars1.githubusercontent.com/u/37121519?s=460&v=4\" width=\"100\" /> | [@mairkur](https://github.com/mairkur) | Medwish: A Decentralized Health Ecosystem | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-medwish-decentralized-health-ecosystem.md) |\n| <img src=\"https://avatars3.githubusercontent.com/u/23247?s=460&v=4\" width=\"100\" /> | [@soapdog](https://github.com/soapdog) | Secure Scuttlebutt | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-secure-scuttlebutt.md) |\n| <img src=\"https://avatars1.githubusercontent.com/u/10411723?s=460&v=4\" width=\"100\" /> | [@steven004](https://github.com/steven004) | ForcePlatform: A New Layer to Bridge IPFS and HTTP Apps and Users | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/A%20new%20layer%20to%20bridge%20IPFS%20and%20HTTP%20Apps%20n%20Users.md) |\n| <img src=\"https://avatars0.githubusercontent.com/u/468729?s=460&v=4\" width=\"100\" /> | [@xavivives](https://github.com/xavivives) | Knowledge Graphs | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-knowledge-graphs_and_uprtcl.md) |\n| <img src=\"https://avatars1.githubusercontent.com/u/40496?s=460&v=4\" width=\"100\" /> | [@gnunicorn](https://github.com/gnunicorn) | Blockchain & IPFS, yay?!? | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/blockchain-ipfs-unconf.md) |\n| <img src=\"https://avatars3.githubusercontent.com/u/477149?s=460&v=4\" width=\"100\" /> | [@shishkabab](https://github.com/shishkabab),  [@worldbrain](https://github.com/worldbrain) | Don't Get Punished for Early Architecture Decisions |  |\n| <img src=\"https://avatars1.githubusercontent.com/u/138401?s=460&v=4\" width=\"100\" /> | [@jbenet](https://github.com/jbenet) | Structuring IPFS Research | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-ipfs-research.md) |\n| <img src=\"https://avatars1.githubusercontent.com/u/1398860?s=460&v=4\" width=\"100\" /> | [@gpestana](https://github.com/gpestana) | P3LIB: Privacy-Preserving Primitives for libp2p | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-p3lib.md) |\n| <img src=\"https://avatars0.githubusercontent.com/u/1489143?s=460&v=4\" width=\"100\" /> | [@ambrevar](https://github.com/ambrevar) | Next Browser | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfs-next.md) |\n| <img src=\"https://avatars2.githubusercontent.com/u/30993489?s=460&v=4\" width=\"100\" /> | [@solangegueiros](https://github.com/solangegueiros) | Index and Search in Web3 | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-janusproj-index-and-search-inweb3.md) |\n| <img src=\"https://avatars3.githubusercontent.com/u/5526331?s=460&v=4\" width=\"100\" /> | [@adria0](https://github.com/adria0) | Zk-Snarks & IDEN3 Circom Compiler | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/Materials/zkSnarks.pdf) |\n| <img src=\"https://avatars2.githubusercontent.com/u/1657498?s=460&v=4\" width=\"100\" /> | [@jkarni](https://github.com/jkarni) | The Radicle Stack |  |\n| <img src=\"https://avatars2.githubusercontent.com/u/13193437?s=460&v=4\" width=\"100\" /> | [@prtfw](https://github.com/Prtfw) | Federated Learning on the Chain/IPFS | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/ipfscamp2019-unconf-federatedlearning.md) |\n| <img src=\"https://avatars2.githubusercontent.com/u/6885592?s=460&v=4\" width=\"100\" /> | [@codynhat](https://github.com/codynhat) | Retiring Web 2.0 | [Notes](https://github.com/ipfs/camp/blob/master/UNCONF/retiring-web2.md) |\n\n## \ud83c\udfa4 Project Interviews\n\nWe will be listing the interviews done throughout camp as we publish them.\n\n## [\ud83d\udc1a Quiet Room](QUIET_ROOM)\n\nThe quiet room was a place for resting, reflecting, and taking space from the excitement of camp. Let your brain cool after a full day of learning. Learn more about it at [\ud83d\udc1a Quiet Room](QUIET_ROOM).\n\n## Wanna join the Community Conversation?\n\nMeet us at:\n\n- [IPFS Weekly Call](https://github.com/ipfs/team-mgmt#-ipfs-weekly-call--formerly-known-as-ipfs-all-hands-call)\n- #ipfs@freenode using any IRC client or [through the Matrix bridge](https://riot.im/app/#/room/#freenode_#ipfs:matrix.org)\n\n### Photos and Media\n\nFor \ud83d\udcf8 Photos, join our [Textile feed with this invite url](https://www.textile.photos/invites/new#id=QmNfArKoyCUN5z32P9v3ZkHrhnBa8oT3MJm6gGCumnQN8v&key=26s37NuiZWJ6Eforqk7ufGQhBscyQVeQhcSiEFMw3CpXe4pmBjt9B6uuFQVKp&inviter=P4obBwkeJZvQuB2S4grkFNugfXC1Ab9j6fMW18GKgB3ddMoc&name=IPFS%20Camp%202019&referral=MSCES)\n\nYou can upload photos, videos, documents, etc. at our [public Peergos folder](https://alpha.peergos.net/#6MDZhRRPT4ugkJuUfcP12suSaesn7NQbhXPgso4xQHSmcPdtqcZzxow4jUWUnt/6MDZhRRPT4ugkJuUfcRm7NkdVKjjHRqXKs6zQiXFTAYvkjVeMy7ArynWvX7kyM/J2GwDq4QrxuN3gW9tfS1r7RvKzHzGkoX6uTzw9XmMikD/5Pf7SvDMcknYfgfaBmBzC6wrxrFUMLTPCnXsQj6BvsWi9kTqE8B/5Pf7SugU4Jr1othwSwEFSwTy6JgEV5vaCJ4tfgoJWP6ipYQ1T6T).\n\nYou can edit an [\\_Prtcl-powered](www.uprtcl.io) shared notepad for the IPFS Camp. Just make sure you have a web3 provider (like Metamask) connected to the Rinkeby Testnet and head to [The Notepad](https://demo.uprtcl.io).\n\n## Schedule Overview\n\nThe schedule for the event can be found at **https://camp.ipfs.io/schedule**\n\nChat #ipfs-camp@freenode using any IRC client or [through the Matrix bridge](https://riot.im/app/#/room/#freenode_#ipfs-camp:matrix.org)\n", "release_dates": []}, {"name": "choco-go-ipfs", "description": "Automation for publishing go-ipfs releases to Chocolatey", "language": "PowerShell", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "\u2757 Kubo is not distributed through Chocolatey anymore (https://github.com/ipfs/kubo/issues/9341).\nPlease download Kubo from https://dist.ipfs.tech/#kubo.\n\n# choco-go-ipfs\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n\n> automatically publish Kubo (go-ipfs) releases to Chocolatey for MS Windows\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Contribute](#contributing)\n- [License](#license)\n\n\n## Usage\n\nThis repo does everything automatically.\n\nThe Github Action runs periodically and detects a new `go-ipfs` version at\nhttps://dist.ipfs.tech and publishes a new chocolatey package with it.\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": []}, {"name": "ci-helpers", "description": "Helper scripts for C.I.", "language": "Shell", "license": null, "readme": "This repo contains helper scripts for C.I.\n\n", "release_dates": []}, {"name": "communications", "description": "A repository with information and documents about the Communications Working Group.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Communications Working Group Charter\nv0.1.0\n\nChair: Dame (dame@protocol.ai)\n\n## Mission & Scope\n\nThe mission of the IPFS Communications Working Group is to collaborate on and oversee IPFS communication channels (email, social media, blog, website, forums, chat) and the content which is disseminated through them. The Working Group\u2019s efforts and output are meant to play a part in fostering a healthy and growing ecosystem that supports the protocol\u2019s overall success. \n\n## Objectives & Goals\n- To provide greater levels of transparency, accessibility, and community around how IPFS communicates about itself to the world.\n- To report on the outcomes of communication initiatives and projects on a regular basis.\n- To ensure important angles, topics, and news are communicated on a timely basis.\n- To foster faster growth of the ecosystem and adoption of the technology through buzz and the dissemination of noteworthy content.\n\n## Conduct\n- Meetings will be open to all who adhere to the [IPFS Community Code of Conduct](https://ipfs.fyi/coc).\n- Meetings will be facilitated by the Chair.\n- Meetings will occur weekly at a regular time, day, and location unless otherwise communicated.\n- The IPFS Forums will be the primary channel where announcements, discussions, and meta communications about the working group will happen.\n- Meetings will end with a clear understanding of expectations and assignments for next steps.\n- The Chair will keep a record of meeting attendees, key discussions, and actions required. A verbatim record of the meeting will not be prepared.\n- Goal setting and planning will occur on a quarterly basis.\n\n## Decision Making\nThe working group is primarily advisory. In areas where it reasonably has some decision-making input, members will strive to reach agreement by consensus at a level that indicates that all partners are willing to \u201clive with\u201d the proposed action. If agreement cannot be reached on an issue, the Chair will retain final decision-making authority.\n\n", "release_dates": []}, {"name": "community", "description": "Discussion and documentation on community practices", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "---\n\u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f  \n\nMuch of this repo - including this readme - is not accurate to the current state of affairs in 202211.\nWe will be pruning/archiving old content in 2022Q4.\nIn the interim, the [official IPFS community docs](https://docs.ipfs.io/community/) have relevant ways to engage with the community.\n---\n\n# Community\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\nIPFS Community Processes and Resources. \n\n## Table of Contents\n\n- [About](#about)\n- [People](#people)\n- [Contributing Guidelines](#contributing-guidelines)\n- Events\n  - [IPFS Meetups](#ipfs-meetups)\n  - [ProtoSchool Workshops](#protoschool-workshops)\n  - [IPFS Event Materials](#ipfs-event-materials)\n  - [Community Calendar](#community-calendar)\n- [Contribute](#contribute)\n- [Ecosystem Projects](#ecosystem-projects)\n- [License](#license)\n\n## About\n\nThe IPFS community is growing, and already has many resources. We ought to maintain them, build more, and improve all the things. This repository is for meta, non-code discussions (in the [issues](issues)) and for documents used by multiple repositories, such as the various Contributing guidelines.\n\n**NOTE:** If you're interested in discussing code, jumping on our community calls, or talking to developers about our overall project management, go to [ipfs/team-mgmt](https://github.com/ipfs/team-mgmt). You can also open issues in specific repositories (like [Kubo](https://github.com/ipfs/kubo)), and come talk to us on [Forums and Chat](https://docs.ipfs.io/community/).\n\nOur goals here are to work on resources that help us with:\n\n- **Building and Maintaining [Community Infrastructure](https://github.com/ipfs/infrastructure)**\n  - Public Gateways\n  - Testing + CI Services\n  - Websites\n  - Communication Channels\n- **Improving documentation of various projects**\n  - Docs on the repos\n  - [Docs on the websites](https://ipfs.io/docs)\n  - [Examples](https://ipfs.io/docs/examples)\n  - Demos\n  - [Papers to read to understand IPFS](https://github.com/ipfs/reading-list)\n- **Making it easy to jump in and participate**\n  - Improving documentation for users\n  - Improving issues for collaborators\n  - Adding papers to the [Understanding IPFS Reading List](https://github.com/ipfs/reading-list)\n- **Keeping the Community Informed and Engaged**\n  - Community Resources - https://docs.ipfs.io/community\n  - Discussion Forums - https://discuss.ipfs.io/\n  - Blog - https://blog.ipfs.io\n  - Twitter - [@IPFS](https://twitter.com/IPFS)\n\n## People\n\nIPFS is an open source project with a large and open community. Listing out all the names of the contributors would result in a very long list, so we made a very large hex grid instead!\n\n[![](https://ipfs.io/ipfs/QmPNkiTxa8V2vaRLmTBJte5RZzkNYjiUYnvht6BUpqs8au/ipfs-people.jpg)](https://ipfs.io/ipfs/QmVNsFGDQPa2kJHUHxQmYJddzwDZdX2twpvwFF2jaChAix/)\n\nThe grid keeps growing, find the latest always at the [Contributors Hex Grid repo](https://github.com/ipfs/contributors-hex-grid#interplanetary-contributors-webpage).\n\n## Contributing Guidelines\n\n- [Contributing Guidelines](./CONTRIBUTING.md)\n- [Contributing Guidelines for JavaScript Projects](./CONTRIBUTING_JS.md)\n- [Contributing Guidelines for Golang Projects](./CONTRIBUTING_GO.md)\n- [Code of Conduct](./code-of-conduct.md).\n\n## Events\n\n### IPFS Meetups\n\nThere are several community meetups in different areas of the world, organized by the IPFS developers and enthusiasts. Everyone is welcome to participate in their local meetup or be the ones organizing one.\n\nFind the list at:\n\n- [This repo](https://github.com/ipfs/community/issues?q=is%3Aissue+is%3Aopen+label%3Ameetup)\n- [Meetup.com](https://meetup.com/pro/ipfs)\n\n### ProtoSchool Workshops\n\n[ProtoSchool](https://proto.school) is a community-driven open source project dedicated to making it easy to get started with decentralized web technologies like IPFS through [interactive online tutorials](https://proto.school/#/tutorials) and local learning events led by community groups around the world. To locate a workshop near you, check out our [event listings](https://proto.school/#/events). Don't see a ProtoSchool workshop in your neighborhood? [Host your own!](https://proto.school/#/host)\n\n### IPFS Event Materials\nWant to host an event to share IPFS with others, or bring IPFS to another event? Feel free to use these materials to make your event(s) awesome! Everything here is [Creative Commons 4.0](https://creativecommons.org/licenses/by-sa/4.0/) - so feel free to adapt or remix!\n\n- **How IPFS Works Overview:** [@stebalien](http://github.com/stebalien) created a great presentation template for \"[How IPFS Works (approximately)](https://docs.google.com/presentation/d/1wyrTNTERJV23R7PyLrNloBauygdq1SXerijvEUG62xI/edit)\". _Feel free to reuse or fork this deck to help break down the inner magic of IPFS for others._ [Here's a recording](https://youtu.be/0IGzEYixJHk) of this deck being used in practice to explain how IPFS works (from the October 2019 Osaka IPFS Meetup).\n  - Still have questions? [IPFS Simply Explained](https://www.youtube.com/watch?v=5Uj6uR3fp-U) does a great job visualizing how IPFS addresses some key use cases and needs to upgrade the internet.\n- **IPFS Deep Dive Workshops:** These two videos - [How IPFS Deals with Files](https://www.youtube.com/watch?v=Z5zNPwMDYGg&list=PLuhRWgmPaHtSsHMhjeWpfOzr8tonPaePu&index=2&t=0s) and [The Lifecycle of Data on the Dweb](https://www.youtube.com/watch?v=fLUq0RkiTBA&list=PLuhRWgmPaHtSsHMhjeWpfOzr8tonPaePu&index=3&t=8s) - are great workshops on how core components of the IPFS network fit together. Feel free to watch these together, or just use as inspiration.\n- **Context and Vision for IPFS:** In [Why IPFS?](https://www.youtube.com/watch?v=zE_WSLbqqvo) and [Building Web3](https://www.youtube.com/watch?v=pJOG5Ql7ZD0), Juan Benet talks about how IPFS fits into a longer-scale evolution of technology and our progress on building the new set of capabilities to power web3. The amazing video in \"Why IPFS\" that sets the stage for our place in the cosmos is \"[Our Story in 1 Minute](https://www.youtube.com/watch?v=ZSt9tm3RoUU)\" by melodysheep.\n- **IPFS Intro with Interactive Demo** [@NukeManDan](http://github.com/nukemandan) gives a basic overview and provides and interactive demo with [PeerPad](https://peerpad.net/) for the audience. Here is a [video](https://www.youtube.com/watch?v=D3MjB45YZsM) to model after and the [slides](https://docs.google.com/presentation/d/1NyDePRHlP1Gqnf-5GvVAMnR4VFvbqVxAUH3lMsoHrB0/) used. To generate nice looking QR codes to replace in the slides for your own, check out https://qrcode-monkey.com/ . You are also encouraged to reach out to [@NukeManDan](http://github.com/nukemandan) for assistance or feedback on these materials.\n\n### Community Calendar\n\nWe have a community [Google Calendar](https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84@group.calendar.google.com&ctz=UTC), where you can watch for events and sync to. We will add relevant events concerning IPFS to it, both with geographical and interplanetary (online) locations. \n\n[![Screen Shot 2019-05-23 at 3 34 09 PM](https://user-images.githubusercontent.com/618519/58290901-3b86a600-7d70-11e9-98d0-03f25b58c7aa.png)](https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84@group.calendar.google.com&ctz=UTC)\n\nIf you know of an event that has a set date and location and is _not_ listed on the calendar, please open an issue on this repository requesting that it be added to the calendar.\n\n## Contribute\n\nFeel free to join in! All welcome. Your best to start is probably either in [contributing.md](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md) or in [the issues](https://github.com/ipfs/community/issues).\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n**Want to hack on IPFS?**\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## Ecosystem Projects\n\nIf your project/product uses IPFS, you're in the IPFS ecosystem! We'd love to see all projects in the IPFS ecosystem be discoverable and used by the broader community! \n\n### Showcase Your Project!\n\nFollow the steps below to submit your projects to be featured in this [repo](https://github.com/ipfs/community/tree/master/projects):\n- Create a project profile here in the ipfs/community repository using the [project submission template here](https://github.com/ipfs/community/blob/master/templates/project-submission-template.md). Name the file name after your project and fill in as much information as you can.  Use your project name as the file name so the community can find your project easily!\n- Create a project discussion in the Discussion board on this repo, with the category as `Show and tell - Developers`  and title as `[Category] Project Name`(i.e: `[Application] Slate`), link the discussion in the How the community can engage section of your project submission. This is to create a place to interact with the community, share your updates and gain feedback on your projects! If you update your project Discussion regularly, those updates can be picked up in the IPFS newsletter, social sharing, get invites to speak at IPFS meetups or other events, and more!\n- Once the project profile is ready, create a [PR](https://github.com/ipfs/community/pulls), prefix `[Project Submission]` in the title\n- If everything looks good, the repo maintainers will merge the PR and voila, as simple as that your project is now featured here!\n\n### Updates and Newsletter\n\nWe'd encourage all projects featured in this repo to share all of your thrilling updates with the community! Start a new comment with header `Project Name Update/Newsletter - Date` (i.e `## Slate Update - Feb, 2021`) in your project discussion to share the exciting news with the community!\n\n## License\n\nThis repository is mainly for documents. All of these are licensed under the [CC-BY-SA 3.0](https://ipfs.io/ipfs/QmVreNvKsQmQZ83T86cWSjPu2vR3yZHGPm5jnxFuunEB9u) license \u00a9 2019 Protocol Labs Inc. Any code is under an [MIT license](LICENSE) \u00a9 2019 Protocol Labs Inc.\n", "release_dates": []}, {"name": "dapps-wg", "description": "Notes from the IPFS DApps Working Group ", "language": null, "license": null, "readme": "# IPFS DApps Working Group\n\n[![hackmd-github-sync-badge](https://hackmd.io/LS4eUSZXTriQ0j8UIjDl4A/badge)](https://hackmd.io/LS4eUSZXTriQ0j8UIjDl4A)\n\n- [\ud83d\udcc6 **Join the WG meetings**](https://lu.ma/ipfs-dapps)\n- [\ud83c\udfa5 **Watch previous meetings**](https://youtube.com/playlist?list=PLuhRWgmPaHtRdxz9aOAJyJxbO7hJZVPL6&feature=shared)\n\n\n\n### Problem statement: trust or verify\n\nToday, IPFS stands out as the predominant decentralized network for hosting dapp frontends and static assets, such as NFT images. Nevertheless, users commonly retrieve these CIDs from trusted gateways with browsers without verifying. This undermines the benefits of verifiablity in IPFS, as users place implicit trust in gateways, leaving them vulnerable to various attacks.\n\nThe challenge of verifying CIDs within the browser context varies depending on what the CID is. It proves more straightforward to verify static assets like images and JSON compared to verifying the CID of a frontend. In the case of a frontend's CID, the only viable method involves running a separate IPFS node that exposes a gateway for verification purposes.\n\n\n### High level goals for the IPFS Dapps WG\n\n- Establish verified retrieval as the norm for retrieving CIDs on the web\n- Decrease the reliance on trusted gateways\n- Improve the experience of Dapps on IPFS with better tooling, both for developers and users\n\n### Concrete goals for Q1\n\n- **IPFS Shipyard:** Fetch like library [`@helia/verified-fetch`](https://github.com/ipfs/helia/tree/main/packages/verified-fetch) for verified in-browser retrieval of CIDs with better DX\n    - Initially support configurable [trustless gateways](https://specs.ipfs.tech/http-gateways/trustless-gateway/), e.g. ipfs.io and cloudflare-ipfs.com or self hosted.\n    - Later uses delegated routing HTTP endpoint and direct retrieval\n    - Can be integrated into a service worker\n    - See [`@helia/verified-fetch`](https://github.com/ipfs/helia/tree/main/packages/verified-fetch)\n- Research and prototype tooling to help users of dapps on IPFS reduce trust through verification\n    - \u201cTop level\u201d/\u201dend-to-end integrity\u201d Dapp verification **without** Kubo\n        - Ed (liquity): [Local Dapp installer](https://www.liquity.org/blog/decentralizing-defi-frontends-protecting-users-and-protocol-authors)\n        - Ed: [Browser extension using Chrome\u2019s debugger api to verify hash of initial payload](https://github.com/edmulraney/app-integrity-verifier-extension)\n    - **IPFS Shipyard:** Service worker in-browser gateway built on top of  `helia-fetch`\n- Advocate for verified retrieval\n    - Read-to-run examples\n    - Docs\n    - Blog posts\n\n## Meeting 8 (27-2-2024)\n\n### Agenda\n* Status updates on ongoing initiatives\n    * [Service worker gateway](https://github.com/ipfs-shipyard/helia-service-worker-gateway/)\n        * Development deployment for tracking progress at `inbrowser.dev`. \n            * Demo: https://docs.ipfs.tech/ website loaded and verified in SW: https://docs-ipfs-tech.ipns.inbrowser.dev\n            * Remaining work for MVP: https://github.com/ipfs-shipyard/helia-service-worker-gateway/issues/31\n        * We will move it at some point to the ipfs org, but postponing this to avoid breaking deployment to fleek.\n* [@verified-fetch](https://github.com/ipfs/helia/tree/main/packages/verified-fetch)\n    * Besides the HAMT fix, we should be good to go\n    * Could release the more flexible API after (with support for traditional HTTPS gateway urls) \n    * Could move out of the helia mono-repo\n\n## Meeting 7 (13-2-2024)\n\n### Agenda\n* Status updates on ongoing initiatives\n    * @helia/verified-fetch\n        * Merged [initial PR](https://github.com/ipfs/helia/pull/392/)\n        * Open discussion around how to handle [dag-json and dag-cbor](https://github.com/ipfs/helia/pull/426)\n        * [Browser example PR in helia-example repo](https://github.com/ipfs-examples/helia-examples/pull/285) \n    * Service worker gateway\n        * https://github.com/ipfs-shipyard/helia-service-worker-gateway/pull/17\n        * Demo: https://blog-libp2p-io.ipns.sw.sgtpooki.com/\n\n### Meeting notes\n\n- Try loading the following CID from the SW gateway: https://ipfs.io/ipfs/QmYXenhk6uREiF6zWDCCEv3doNYManYTaqiJBqPLJwUBbq\n\n### Attendees\n - Achingbrain\n - Tj (https://tap.spaceaware.io/ https://github.com/digitalarsenal/spacedatastandards.org)\n - Russel\n - Adin\n - Lidel\n - Kanishk (Fleek)\n - Mohsin (Ceramic)\n\n## Meeting 6 (30-1-2024)\n\n[**\u25b6\ufe0f Meeting Recording**](https://www.youtube.com/watch?v=5n3ieAb-FWE)\n\n### Agenda\n\n* Status updates on ongoing initiatives\n   * https://github.com/ipfs/helia/pull/392/\n   * https://github.com/ipfs/helia-http-gateway/pull/63\n   * https://github.com/ipfs-shipyard/helia-service-worker-gateway/pull/17\n   * blog.ipfs.tech: [The State of Dapps on IPFS: Trust vs. Verification](https://blog.ipfs.tech/dapps-ipfs/)\n* Russell: What we want to initially test against\n   * ipns://app.aave.com\n   * ipns://app.spark.fi\n   * ipns://app.olympusdao.finance\n* https://www.dpid.org/ (CID-based,  ISBN-like decentralized identifiers with greated transparency and verifiability)\n    * https://desci.com/ example https://nodes.desci.com/dpid/46\n\n## Meeting 5 (16-1-2024)\n\n[**\u25b6\ufe0f Meeting Recording**](https://www.youtube.com/watch?v=mAha0YR9Qqk)\n\n### Agenda\n\n* Daniel: Update on the WG's goal\n* Status updates on ongoing initiatives\n    * https://github.com/ipfs/helia/pull/372\n    * https://github.com/ipfs/web3-fetch/pull/1\n* Hannah: Trustless CAR Verification via ipfs-unixfs-exporter\n    * Lack of DFS: https://github.com/ipfs/js-ipfs-unixfs/issues/359\n        * Saturn Fork Implementation: https://github.com/filecoin-saturn/js-ipfs-unixfs/commit/ee5a574742b6958d8699f8f0807be023d80a49a0\n        * PR with blockReadConcurrency option: https://github.com/ipfs/js-ipfs-unixfs/pull/361\n    * Range requests appear to work! (previous report was fake news)\n        * Additional Saturn work to make range requests go all the way to service worker\n            * https://github.com/filecoin-saturn/js-client/pull/48\n            * https://github.com/filecoin-saturn/browser-client/pull/28\n\n### Meeting notes\n\n- Adin: Good news here is the UnixFS/CARs/etc. story is roughly the same story as happened in Go (with bifrost-gateway, etc.). Can mostly replicate the solutions here too \ud83d\ude04\n- Alex: You can control concurrency to replicate DFS with the regular importer - set these both to 1\n    - https://github.com/ipfs/js-ipfs-unixfs/blob/master/packages/ipfs-unixfs-importer/src/index.ts#L137\n    - https://github.com/ipfs/js-ipfs-unixfs/blob/master/packages/ipfs-unixfs-importer/src/index.ts#L143\n- Alex (16 Jan 2024, 4:22\u202fpm) As in, you can use those settings to write blocks to the blockstore one at a time, in the order the CAR file expects\n- Adin: I recall Rod making some comment about this working for files, but that if downloading an entire directory would traverse the directory as BFS instead of DFS. Might be wrong here though.  Either way Saturn seems unlikely to care here\n- Oli: some curious goodies from the dag.haus\n    - a CAR-centric re-write of unixfs-importer - https://github.com/ipld/js-unixfs (we use that in the web3.storage upload client as we're focused on streaming CARs rather than persistent blockstores\n    - work just started on extracting a block (not unixfs-entity centric) the ipfs dag traversal logic to a stand alone library from unix-fs-exporter and trustless gateway spec (currently trapped in dagula, soon to be standalone lib)\n- Hannah\n    - Complete work on range requests\n    - Ideally they'd like to avoid continuing to use a fork of js-ipfs-unixfs.\n- Ben from eth.limo\n    - Working on a migration of their infra for better performance\n    - Seeing some problems with IPNS records\n    - For Q2, exploring trustless gateways, maybe exploring Rainbow\n    - Also exploring local installers to reduce trust reliance\n    - According to a query on Dune, a large percentage of ENS names are using IPNS\n- \n## Meeting 4 (2-1-2024)\n\n[**\u25b6\ufe0f Meeting Recording**](https://youtu.be/uQQZtW3SOuI)\n\n### Attendees\n- adin (@aschmahmann)\n- lidel\n- Daniel\n- Henrique\n- Derrick Hammer\n- Fred\n- Robin\n\n\n### Agenda & Meeting notes\n\n- Recap previous session\n    - Debugger API in Ed's extension\n    - Lidel: using the API comes with a performance penalty\n        - The debugger API is used by WebRecorder to take a snapshot of the page. In that instance it's ok in terms of the user experience.\n        - This may be a problem for users \n        - What do you do when the verification fails?\n    - How could this be productized: \n        - Extension per Dapp which has the trust anchored through a hard coded CID\n        - Make it more generic and use an external trust anchor, i.e. DNSLink/ENS resolution. \n    - The Blocking API\n        - Only allows blocking or redirection.\n        - With manifest v3 we have less capabilities, even though you can still do the same things in an extension with more steps.\n    - What we're missing:\n        - https://github.com/ipfs/in-web-browsers/issues/212\n        - This would take time\n    - Derrick:\n        - Work on the extension and overcome some challenges around origin isolation: https://git.lumeweb.com/LumeWeb/extension\n        - https://git.lumeweb.com/LumeWeb/libkernel/src/branch/develop\n        - https://github.com/SkynetLabs/skynet-kernel\n- Moving this meeting an hour earlier \n    - No opposition based on vote in call.\n### Links\n\n\n\n---\n\n## Meeting 3 (19-12-2023)\n\n[**\u25b6\ufe0f Meeting Recording**](https://www.youtube.com/watch?v=3HLpjGpq94U)\n\n### Attendees\n\n- Ed\n- Adin\n- Robin Berjon\n- Bengo\n- David Justice\n- Daniel Norman\n- Hannah \n- Mosh\n- Rohit\n- Harrison Hines\n\n### Agenda\n\n- Ed: [app-integrity-verifier-extension](https://github.com/edmulraney/app-integrity-verifier-extension)\n    - This is currently relying on Chrome specific APIs\n    - What about supply chain attacks on the distribution of the extension source\n        - no concrete thoughtsd\n    - next steps:\n        - combine this with ipfs:// protocol handler\n        - See https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/protocol_handlers\n        - Since this is just for verifying the top level resource, when doing this with IPFS, using a raw block for the top level document would ensure easy matching of the CIDs\n- https://www.liquity.org//blog/decentralizing-defi-frontends-protecting-users-and-protocol-authors\n    - Robin: This is super interesting. A few questions to make sure that I understand the proposal well:\n    1. The apps that are installed using this mechanism are then fully offline and can only interact with browser APIs (including the wallet), right? I assume that they are served locally with a strict CSP of sorts?\n        - No restrictions or changes. The main difference is that the service worker is pulling the front end's source code and making it available on the local device.\n    3. I got a covid booster so my brain isn't fully there, but it seems unclear to me what the installer is in terms of format. Does it need to be more than a manifest?\n    4. I'm guessing it's not an immediate concern, but is there interest in private loading of installers? It seems like it could be a plus. (Especially if installing an app means it will regularly phone home to check for updates.)\n    5. As always, the client is the weak spot (c.f. what Chrome does with people's data). Have you considered what (legal) rules it needs to operate under to durably ensure alignment with the user?\n    6. One of IPFS's weak spots in security is media types. If everyone's on the exact same client it might be less of an issue but to build something rock solid it would be good to nail this. Have you given thought to that?\n    - Adin: What are the downsides/limitations to `chrome.debugging`? Example, why isn't everyone struggling with the move from blocking requests in MV3 doing this?\n    - \n    - Ed: The idea is to make this as simple as possible without making too many assumptions about the app. \n    - There's obviously still the risk of dapps doing \"stupid things\" that expose them to a wider risk surface by loading subresources from other origins and supply chain attacks. \n    - This was not build to improve the security of the dapp. Rather it's focused on ensuring local operation and verifiability/integrity. \n    - Robin: not sure if the legal side is solved without ensuring that none of the sub-resources are also not hosted on centralised infrastructure.\n    - Ed: This is addressing the problem of ensuring the user is running the same code published by the dapp developer. It doesn't solve the supply chain problem of attacks on specific dependencies, e.g. the ledger SDK.\n    - Hannah: would be nice to have the web subresource integrity spec support images and other tags. \n    - Ben: Could we just pass static files around, i.e. index.html\n    - Robin: You need the extension to verify the root resource you\u2019re loading.\n-  Helia Fetch efforts\n    - https://github.com/ipfs/helia/issues/348\n- [IPFS Signer](https://signer.ipfs.garden/): \n    - Experimental playground for IPFS & Dapp patterns in browsers\n\n### Action items\n- Investigate whether we have any problems with range requests using the js-unixfs-exporter\n- \n\n### Links\n* https://github.com/edmulraney/app-integrity-verifier-extension?tab=readme-ov-file\n* https://blog.ipfs.tech/2023-ipfs-companion-mv3-update/#what-is-mv3\n* https://github.com/olizilla/see-other\n* This is a good video of Mauve's ipfs `fetch` from Iceland 2022 https://www.youtube.com/watch?v=_omtM02_uYw\n* https://github.com/web3-storage/dagula\n* https://github.com/pknowles/ImageFilter/blob/master/imagefinder.js\n* https://github.com/filecoin-saturn/js-client\n* https://github.com/filecoin-saturn/browser-client\n* \"Here\u2019s some helia fetching via bitswap via content-claims in js 'helia bitswap + content-claims' hot off the press\" -bengo  https://github.com/web3-storage/hoverboard/pull/20/files#diff-0386cb667aac3b2cdcfcbc94c8ff1027f42ed5945e2835d9fe3d3f40565f919cR136\n\n---\n## Meeting 2 (5-12-2023)\n\n[**Recording**](https://www.youtube.com/watch?v=eiGGnOdcAVs)\n\n### Attendees\n* Adin\n* Ed (Liquity)\n* Daniel Norman\n* David Justice\n* Dietrich Ayala\n* Lidel\n* Russell\n\n\n### Agenda\n- Revisit the next steps from the previous session\n  - Library for fully compliant gateway resolution in JS (_redirects, index.html, ...) that can be used by Dapp developers and imported into their service worker.\n    - There's some progress on the base components in Helia. \n    - This includes work on the [Helia gateway implementation](https://github.com/ipfs/helia-http-gateway/)\n        - Conformance tests to ensure compatibility\n    - Additionally there's work by ProbeLab to monitor performance\n  - Service worker integration that handles relative paths, trustless gateway fetching, etc.\n      - https://github.com/ipfs-shipyard/helia-service-worker-gateway\n  - Installer UX integration with service worker\n - adin: Reach out around the verifiable ETH RPC\n   - I've reached out to some people working on Helios (https://github.com/a16z/helios)\n - lidel: spec local pet names proposal for gateways\n     - Some progress on the proposal, working to ensure it fits into the web's security model\n     - Still some open questions to resolve before sharing the draft\n     - Some research on where to store the pet name mappings and making them available in the different subdomains\n  - Ed: install.land ENS deploy + architecture diagram \n      - Some progress on the [architecture diagram](https://excalidraw.com/#json=g8BJsFitQRcMOAmpKqX5p,MMwIbiLamBNPiuMwm03hjg)\n- Pet Names: a local \"user-friendly\" mapping from a user-provided string to a CID\n- Ed:\n    - Working on a write-up\n    - Working with their legal council to determine whether the approach that their exploring meets the legal requirements of the current regulation.\n- Ed:\n    - Top level integrity is one of the main challenges facing \n- Adin:\n    - Reached out to Helios devs\n    - Seems feasible to verify ENS names in the browser\n\n\n### Next steps\n- Russell:\n    - Working on the Helia gateway\n    - Monitoring Helia gateway performance with the help of ProbeLab\n    - Abstracting some of the IPFS fetch stuff to be more generic and usable in the browser too\n- Daniel: \n    - Write up on the current state of matters for IPFS docs\n- Lidel:\n    - Work on a the draft spec for the pet name proposal and local resolution \n- Ed:\n    - Continue with the architecture diagram and the article\n    - Hopefuly get to deploying the install.land approach to IPFS\n    - Liquity hosting a Twitter space with some of legal folks. Rokti devs will also be joining. Would be good to get us to also join.\n\n\n## Meeting 1 (28-11-2023)\n\n[**Recording**](https://www.youtube.com/watch?v=KVYze_VqWnI)\n\n### Attendees\n* Adin\n* Russell\n* lidel\n* Yiannis\n* Ed (Liquity)\n* Daniel Norman\n* David Justice\n* Henrique Dias\n* Luke Schoen\n\n\n### Agenda\n\n- Group Intro\n- People Intros\n- Discussion topics\n  - What is the highest priority from now to end of 2024Q1? (question to find answers? spec to design? thign to prototype? tool/library to write?)\n      - how does end game look like for loading dapp trustlessly (e.g. Brave user and native ipfs:// and ipns://)\n  - What are some example dApps with issues that Adin mentioned?\n  - Should we build (a) IPFS dApp Hackathon template(s) for hackers? (starter kit, etc) \n  - We are still dependent upon DNS for accessing \"apps\", is there a way around that (without all browsers natively supporting IPFS) or will we always be limited to centralizing where DNS is concerned?\n  - ADD ITEM HERE\n\n### Meeting Notes\n\n- ED: The part of the stack that was hardest to decentralise the frontend\n- Figuring out what are the basic tools we need to give developers publishing their dapps through IPFS\n- Dapps are using IPFS to varying degrees as part of their frontend distribution. Some are just publishing to IPFS as a plan B\n- A big part of what we want to do is figure out what it *could* look like\n- Ed: \n    - Ideally browsers would be able to speak IPFS natively without developing too many custom solutions\n    - How to achieve maximum trustlessness while recognising that with existing browsers some trust is delegated. \n    - Can we move away from trusted hosts serving the frontends, to a world where **normal** users can download and verify frontends while being compatible with the web2 experience.\n    - Why?\n        - User protection: DNS takeovers leading to lost funds due to malicious frontends being served to users.\n        - Legal: MiCA and the European legislation coming to DeFi has criteria for what gets categorised as decentralised, e.g., number of frontends being hosted.\n- Adin: \n    - Some of the work that brings us closer to EOY goals\n    - Currently, Liquidy has the install.land experiment.\n    - Step 1: \n        - We should get it to fetch from a trusless gateway\n        - Support ENS resolution\n        - Supporting the various frontend requirements\n        - With this, we still rely on a centralised point to do the ENS resolution and verification \n        - Get UX feedback \n    - Step 2:\n        - Move more of the fetching and verification to the browser\n- Ed:\n    - Many users already have some browser extensions or Brave which assist in ENS resolution\n    - If a user doesn't have any of those, and you end up using a single resolver like eth.limo or eth.link \n- Lidel:\n    - Do we know when the MiCA is getting rattified and its implications on projects?\n    - How can we leverage the fact that you can prove that you have multiple providers for a given CID. \n    - How do we design the scenario where we don't make trust concession and work back from that giving the user the full spectrum of trustlessness \n    - How do we leverage the fact that we already have multiple gateways \n- Ed: \n    - install.land is **not** the thing we actually want it to be\n    - The goal would for install.land to be a frontend deployed to IPFS with an ENS link\n    - \"real installer should be requested from installer.eth (browser can somehow resolve ENS) or installer.eth.limo - we degrade to a public ENS gateway. In both cases the installer is an IPFS CID\"\n    - The weakest link would be the ENS resolver\n- Possible user journeys for loading a Dapp:\n    - Immmutable request: user asks for a CID\n    - mutable request: First resolve ENS/IPNS/DNSLink, and then the CID\n    - Pet name: user asks for a CID only the first time, user gives a pet name and the\n- Ed: DNS vs. ENS\n    - We see those as different, where DNS is opaque in comparison to ENS which is open source and transparent\n- Ed: \n    - Installer isn't the ideal use\n- Lidel:\n    - The benefits of mutable pet names is that they allow upgrades that retain the origin which is important because of all local browser data associated with the origin, e.g. localstorage\n-  ED: \n    - immutable pet names: uniswap.installer.eth <- auto routes uniswap.eth contentsource IPFS CID and stores it immutably - doesn't matter if uniswap.eth record is mutable, wouldn't affect existing users, only new users.\n- Adin:\n    - The only way for Kubo to resolve the _redirects or the basic web pathing (index.html resolution) is via the gateway. Not possible via the CLI\n    - Currently, it's tied to the gateway implementation\n    - It should be possible to do all of this independently of a gateway\n\n### Next steps:\n  - Library for fully compliant gateway resolution in JS (_redirects, index.html, ...) that can be used by Dapp developers and imported into their service worker.\n  - Service worker integration that handles relative paths, trustless gateway fetching, etc.\n  - Installer UX integration with service worker\n  - Background tasks\n     - adin: Reach out around the verifiable ETH RPC\n     - lidel: spec local pet names proposal for gateways\n  - Ed: install.land ENS deploy + architecture diagram \n", "release_dates": []}, {"name": "devgrants", "description": "The IPFS Grant platform connects funding organizations with builders and researchers in the IPFS community.", "language": null, "license": null, "readme": "## IPFS Devgrants\n\nDeveloper grants for IPFS are currently on hold during the development of [the new governance structure][governance-post] for the protocol. We look forward to your ideas and projects to make IPFS ever better when we re-open in 2024!\n\nFor now, share your ideas on the [IPFS forum][ipfs-discourse], [Discord][ipfs-discord] or [Matrix][ipfs-matrix].\n\nIPFS developer grants currently funded by the [Filecoin Grant Platform][ff-grants] will continue until completed, but no new proposals will be accepted. New proposals that do not have a Filecoin component will be evaluated by the respective IPFS and libp2p foundations once they are launched.\n\n[governance-post]: https://protocol.ai/blog/advancing-ipfs-and-libp2p-governance/\n[ipfs-discourse]: https://discuss.ipfs.tech/\n[ipfs-discord]: https://discord.gg/vZTcrFePpt\n[ipfs-matrix]: https://matrix.to/#/#ipfs-space:ipfs.io\n[ff-grants]: https://github.com/filecoin-project/devgrants/\n", "release_dates": []}, {"name": "dht-node", "description": "[ARCHIVED] Run just an ipfs dht node (Or many nodes at once!)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "## This repository has been archived!\n\n*This IPFS-related repository has been archived, and all issues are therefore frozen*. If you want to ask a question or open/continue a discussion related to this repo, please visit the [official IPFS forums](https://discuss.ipfs.io).\n\nWe archive repos for one or more of the following reasons:\n\n- Code or content is unmaintained, and therefore might be broken\n- Content is outdated, and therefore may mislead readers\n- Code or content evolved into something else and/or has lived on in a different place\n- The repository or project is not active in general\n\nPlease note that in order to keep the primary IPFS GitHub org tidy, most archived repos are moved into the [ipfs-inactive](https://github.com/ipfs-inactive) org.\n\nIf you feel this repo should **not** be archived (or portions of it should be moved to a non-archived repo), please [reach out](https://ipfs.io/help) and let us know. Archiving can always be reversed if needed.\n\n---\n   \n# Libp2p DHT Node\nRun a libp2p dht node for the good of the network!\n\n## Installation\n```\n[openssl support (lower CPU usage)]\ngo get -u -tags=openssl github.com/ipfs/dht-node\n\n[standard (sub-optimal)]\ngo get -u github.com/ipfs/dht-node\n```\n\n## Usage\n`dht-node` has two modes. A 'single dht' mode that has a nicer UI, this is intended to be run in a tmux window or something so you can see statistics about your contribution to the network.\n\nThe second mode is called 'many mode'. Passing the `-many=N` allows you to run N dhts at a time in the same process. It periodically prints out a status line with information about total peers, uptime, and memory usage.\n\n## Best Practices\nTry to only run a dht-node on machines with public IP addresses. Having more\ndht nodes behind NATs makes dht queries in general slower, as connecting in\ngenerally takes longer and sometimes doesnt even work (resulting in a timeout).\n\nWhen running with `-many`, please make sure to bump the ulimit to something\nfairly high. Expect ~500 connections per node youre running (so with\n`-many=10`, try setting `ulimit -n 5000`)\n\n## License\nMIT - @whyrusleeping\n", "release_dates": []}, {"name": "dir-index-html", "description": "Directory listing HTML for go-ipfs gateways", "language": "HTML", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "## Archived.\n\nThis repo got [merged back into go-ipfs](https://github.com/ipfs/go-ipfs/pull/8555) and can be found in [go-ipfs/assets/dir-index-html](https://github.com/ipfs/go-ipfs/tree/master/assets/dir-index-html).\n", "release_dates": ["2021-10-01T16:34:43Z", "2020-09-28T22:06:13Z", "2020-07-27T21:29:12Z", "2020-07-24T15:35:43Z", "2020-06-25T22:11:41Z", "2020-05-05T17:22:30Z", "2020-04-21T22:14:38Z"]}, {"name": "distributed-wikipedia-mirror", "description": "Putting Wikipedia Snapshots on IPFS", "language": "TypeScript", "license": null, "readme": "<p align=\"center\">\n<img src=\"https://bafybeia6plrlomsxobezyatrbie3f7rgucidbomfeuyv6lcqhv3pdc24qi.ipfs.dweb.link/?filename=wikipedia-on-ipfs.jpg\" width=\"40%\" />\n</p>\n\n<h1 align=\"center\">Distributed Wikipedia Mirror Project</h1>\n<p align=\"center\">\nPutting Wikipedia Snapshots on IPFS and working towards making it fully read-write.\n<br />\n<br />\n\n## Existing Mirrors\n\nThere are various ways one can access the mirrors: through a [DNSLink](https://docs.ipfs.tech/concepts/glossary/#dnslink), public [gateway](https://docs.ipfs.tech/concepts/glossary/#gateway) or directly with a [CID](https://docs.ipfs.tech/concepts/glossary/#cid). \n\nYou can [read all about the available methods here](https://blog.ipfs.tech/2021-05-31-distributed-wikipedia-mirror-update/#improved-access-to-wikipedia-mirrors).\n\n### DNSLinks\n\n- https://en.wikipedia-on-ipfs.org\n- https://tr.wikipedia-on-ipfs.org\n- https://my.wikipedia-on-ipfs.org\n- https://ar.wikipedia-on-ipfs.org\n- https://zh.wikipedia-on-ipfs.org\n- https://uk.wikipedia-on-ipfs.org\n- https://ru.wikipedia-on-ipfs.org\n- https://fa.wikipedia-on-ipfs.org\n\n### CIDs\n\nThe latest CIDs that the DNSLinks point at can be found in [snapshot-hashes.yml](snapshot-hashes.yml).\n\n---\n\nEach mirror has a link to the original [Kiwix](https://kiwix.org) ZIM archive in the footer. It can be dowloaded and opened offline with the [Kiwix Reader](https://www.kiwix.org/en/download/).\n\n## Table of Contents\n\n- [Purpose](#purpose)\n- [How to add new Wikipedia snapshots to IPFS](#how-to-add-new-wikipedia-snapshots-to-ipfs)\n  - [Manual build](#manual-build)\n  - [Docker](#docker-build)\n- [How to help](#how-to-help)\n  - [Cohost a lazy copy](#cohost-a-lazy-copy)\n  - [Cohost a full copy](#cohost-a-full-copy)\n\n## Purpose\n\n\u201cWe believe that information\u2014knowledge\u2014makes the world better. That when we ask questions, get the facts, and are able to understand all perspectives on an issue, it allows us to build the foundation for a more just and tolerant society\u201d\n-- Katherine Maher, Executive Director of the Wikimedia Foundation\n\n## Wikipedia on IPFS -- Background\n\n### What does it mean to put Wikipedia on IPFS?\n\nThe idea of putting Wikipedia on IPFS has been around for a while. Every few months or so someone revives the threads. You can find such discussions in [this github issue about archiving wikipedia](https://github.com/ipfs/archives/issues/20), [this issue about possible integrations with Wikipedia](https://github.com/ipfs/notes/issues/46), and [this proposal for a new project](https://github.com/ipfs/notes/issues/47#issuecomment-140587530).\n\nWe have two consecutive goals regarding Wikipedia on IPFS: Our first goal is to create periodic read-only snapshots of Wikipedia. A second goal will be to create a full-fledged read-write version of Wikipedia. This second goal would connect with the Wikimedia Foundation\u2019s bigger, longer-running conversation about decentralizing Wikipedia, which you can read about at https://strategy.wikimedia.org/wiki/Proposal:Distributed_Wikipedia\n\n### (Goal 1) Read-Only Wikipedia on IPFS\n\nThe easy way to get Wikipedia content on IPFS is to periodically -- say every week -- take snapshots of all the content and add it to IPFS. That way the majority of Wikipedia users -- who only read wikipedia and don\u2019t edit -- could use all the information on wikipedia with all the benefits of IPFS. Users couldn't edit it, but users could download and archive swaths of articles, or even the whole thing. People could serve it to each other peer-to-peer, reducing the bandwidth load on Wikipedia servers. People could even distribute it to each other in closed, censored, or resource-constrained networks -- with IPFS, peers do not need to be connected to the original source of the content, being connected to anyone who has the content is enough. Effectively, the content can jump from computer to computer in a peer-to-peer way, and avoid having to connect to the content source or even the internet backbone. We've been in discussions with many groups about the potential of this kind of thing, and how it could help billions of people around the world to access information better -- either free of censorship, or circumventing serious bandwidth or latency constraints.\n\nSo far, we have achieved part of this goal: we have static snapshots of all of Wikipedia on IPFS. This is already a huge result that will help people access, keep, archive, cite, and distribute lots of content. In particular, we hope that this distribution helps people in Turkey, who find themselves in a tough situation. We are still working out a process to continue updating these snapshots, we hope to have someone at Wikimedia in the loop as they are the authoritative source of the content. **If you could help with this, please get in touch with us at `wikipedia-project <AT> ipfs.io`**\n\n### (Goal 2) Fully Read-Write Wikipedia on IPFS\n\nThe long term goal is to get the full-fledged read-write Wikipedia to work on top of IPFS. This is much more difficult because for a read-write application like Wikipedia to leverage the distributed nature of IPFS, we need to change how the applications write data. A read-write wikipedia on IPFS would allow it to be completely decentralized, and create an extremely difficult to censor operation. In addition to all the benefits of the static version above, the users of a read-write Wikipedia on IPFS could write content from anywhere and publish it, even without being directly connected to any wikipedia.org servers. There would be automatic version control and version history archiving. We could allow people to view, edit, and publish in completely encrypted contexts, which is important to people in highly repressive regions of the world.\n\nA full read-write version (2) would require a strong collaboration with Wikipedia.org itself, and finishing work on important dynamic content challenges -- we are working on all the technology (2) needs, but it's not ready for prime-time yet. We will update when it is.\n\n# How to add new Wikipedia snapshots to IPFS\n\nThe process can be nearly fully automated, however it consists of many stages\nand understanding what happens during each stage is paramount if ZIM format\nchanges and our build toolchain requires a debug and update.\n\n- [Manual build](#manual-build) are useful in debug situations, when specific stage  needs to be executed multiple times to fix a bug.\n  - [mirrorzim.sh](#mirrorzimsh) automates some steps for QA purposes and ad-hoc experimentation\n<!--\n- [Docker build](#docker-build) is fully automated blackbox which takes ZIM file and produces CID and `IPFS_PATH` with datastore.\n-->\n\n**Note: This is a work in progress.**. We intend to make it easy for anyone to\ncreate their own wikipedia snapshots and add them to IPFS, making sure those\nbuilds are deterministic and auditable, but our first emphasis has been to get\nthe initial snapshots onto the network. This means some of the steps aren't as\neasy as we want them to be. If you run into trouble, seek help through a github\nissue, commenting in [chat](https://docs.ipfs.tech/community/#chat), or by posting a thread on\n[https://discuss.ipfs.tech](https://discuss.ipfs.tech/c/help/13).\n\n## Manual build\n\nIf you would like to create an updated Wikipedia snapshot on IPFS, you can follow these steps.\n\n\n### Step 0: Clone this repository\n\nAll commands assume to be run inside a cloned version of this repository\n\nClone the distributed-wikipedia-mirror git repository\n\n```sh\n$ git clone https://github.com/ipfs/distributed-wikipedia-mirror.git\n```\n\nthen `cd` into that directory\n\n```sh\n$ cd distributed-wikipedia-mirror\n```\n\n### Step 1: Install dependencies\n\n`Node` and `yarn` are required. On Mac OS X you will need `sha256sum`, available in coreutils.\n\nInstall the node dependencies:\n\n```sh\n$ yarn\n```\n\nThen, download the latest [zim-tools](https://download.openzim.org/release/zim-tools/) and add `zimdump` to your `PATH`.\nThis tool is necessary for unpacking ZIM.\n\n### Step 2: Configure your IPFS Node\n\nIt is advised to use separate IPFS node for this:\n\n```console\n$ export IPFS_PATH=/path/to/IPFS_PATH_WIKIPEDIA_MIRROR\n$ ipfs init -p server,local-discovery,flatfs,randomports --empty-repo\n```\n\n#### Tune DHT for speed\n\nWikipedia has a lot of blocks, to publish them as fast as possible,\nenable [Accelerated DHT Client](https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#accelerated-dht-client):\n\n```console\n$ ipfs config --json Experimental.AcceleratedDHTClient true\n```\n\n#### Tune datastore for speed\n\nMake sure repo uses `flatfs` with  `sync` set to `false`:\n\n```console\n$ ipfs config --json 'Datastore.Spec.mounts' \"$(ipfs config 'Datastore.Spec.mounts' | jq -c '.[0].child.sync=false')\"\n```\n\n**NOTE:** While badgerv1 datastore is faster is nome configurations, we choose to avoid using it with bigger builds like English because of [memory issues due to the number of files](https://github.com/ipfs/distributed-wikipedia-mirror/issues/85). Potential workaround is to use [`filestore`](https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#ipfs-filestore) that avoids duplicating data and reuses unpacked files as-is.\n\n#### HAMT sharding\n\nMake sure you use go-ipfs 0.12 or later, it has automatic sharding of big directories.\n\n### Step 3: Download the latest snapshot from kiwix.org\n\nSource of ZIM files is at https://download.kiwix.org/zim/wikipedia/\nMake sure you download `_all_maxi_` snapshots, as those include images.\n\nTo automate this, you can also use the `getzim.sh` script:\n\nFirst, download the latest wiki lists using `bash ./tools/getzim.sh cache_update`\n\nAfter that create a download command using `bash ./tools/getzim.sh choose`, it should give an executable command e.g.\n\n```sh\nDownload command:\n    $ ./tools/getzim.sh download wikipedia wikipedia tr all maxi latest\n```\n\nRunning the command will download the choosen zim file to the `./snapshots` directory.\n\n\n\n### Step 4: Unpack the ZIM snapshot\n\nUnpack the ZIM snapshot using `extract_zim`:\n\n```sh\n$ zimdump dump ./snapshots/wikipedia_tr_all_maxi_2021-01.zim --dir ./tmp/wikipedia_tr_all_maxi_2021-01\n```\n\n> ### \u2139\ufe0f ZIM's main page\n>\n> Each ZIM file has \"main page\" attribute which defines the landing page set for the ZIM archive.\n> It is often different than the \"main page\" of upstream Wikipedia.\n> Kiwix Main page needs to be passed in the next step, so until there is an automated way to determine \"main page\" of ZIM, you need to open ZIM in Kiwix reader and eyeball the name of the landing page.\n\n### Step 5: Convert the unpacked zim directory to a website with mirror info\n\nIMPORTANT: The snapshots must say who disseminated them. This effort to mirror Wikipedia snapshots is not affiliated with the Wikimedia foundation and is not connected to the volunteers whose contributions are contained in the snapshots. The snapshots must include information explaining that they were created and disseminated by independent parties, not by Wikipedia.\n\nThe conversion to a working website and the appending of necessary information is is done by the node program under `./bin/run`.\n\n```sh\n$ node ./bin/run --help\n```\n\nThe program requires main page for ZIM and online versions as one of inputs. For instance, the ZIM file for Turkish Wikipedia has a main page of `Kullan\u0131c\u0131:The_other_Kiwix_guy/Landing` but `https://tr.wikipedia.org` uses `Anasayfa` as the main page. Both must be passed to the node script.\n\nTo determine the original main page use `./tools/find_main_page_name.sh`:\n\n```console\n$ ./tools/find_main_page_name.sh tr.wikiquote.org\nAnasayfa\n```\n\nTo determine the main page in ZIM file open in in a [Kiwix reader](https://www.kiwix.org/en/kiwix-reader) or use `zimdump info` (version 3.0.0 or later) and ignore the `A/` prefix:\n\n```console\n$ zimdump info wikipedia_tr_all_maxi_2021-01.zim\ncount-entries: 1088190\nuuid: 840fc82f-8f14-e11e-c185-6112dba6782e\ncluster count: 5288\nchecksum: 50113b4f4ef5ddb62596d361e0707f79\nmain page: A/Kullan\u0131c\u0131:The_other_Kiwix_guy/Landing\nfavicon: -/favicon\n\n$ zimdump info wikipedia_tr_all_maxi_2021-01.zim | grep -oP 'main page: A/\\K\\S+'\nKullan\u0131c\u0131:The_other_Kiwix_guy/Landing\n```\n\nThe conversion is done on the unpacked zim directory:\n\n```sh\nnode ./bin/run ./tmp/wikipedia_tr_all_maxi_2021-02 \\\n  --hostingdnsdomain=tr.wikipedia-on-ipfs.org \\\n  --zimfile=./snapshots/wikipedia_tr_all_maxi_2021-02.zim \\\n  --kiwixmainpage=Kullan\u0131c\u0131:The_other_Kiwix_guy/Landing \\\n  --mainpage=Anasayfa\n```\n\n### Step 6: Import website directory to IPFS\n\n#### Increase the limitation of opening files\n\nIn some cases, you will meet an error like `could not create socket: Too many open files` when you add files to the IPFS store. It happens when IPFS needs to open more files than it is allowed by the operating system and you can temporarily increase this limitation to avoid this error using this command.\n\n```sh\nulimit -n 65536\n```\n\n#### Add immutable copy\n\nAdd all the data to your node using `ipfs add`. Use the following command, replacing `$unpacked_wiki` with the path to the website that you created in Step 4 (`./tmp/wikipedia_en_all_maxi_2018-10`).\n\n```sh\n$ ipfs add -r --cid-version 1 --offline $unpacked_wiki\n```\n\nSave the last hash of the output from the above process. It is the CID of the website.\n\n### Step 7: Share the root CID\n\nShare the CID of your new snapshot so people can access it and replicate it onto their machines.\n\n### Step 8: Update *.wikipedia-on-ipfs.org\n\nMake sure at least two full reliable copies exist before updating DNSLink.\n\n## mirrorzim.sh\n\nIt is possible to automate steps 3-6 via a wrapper script named `mirrorzim.sh`.\nIt will download the latest snapshot of specified language (if needed), unpack it, and add it to IPFS.\n\nTo see how the script behaves try running it on one of the smallest wikis, such as `cu`:\n\n```console\n$ ./mirrorzim.sh --languagecode=cu --wikitype=wikipedia --hostingdnsdomain=cu.wikipedia-on-ipfs.org\n```\n\n## Docker build\n\nA `Dockerfile` with all the software requirements is provided.\nFor now it is only a handy container for running the process on non-Linux\nsystems or if you don't want to pollute your system with all the dependencies.\nIn the future it will be end-to-end blackbox that takes ZIM and spits out CID\nand repo.\n\nTo build the docker image:\n\n```sh\ndocker build . -t distributed-wikipedia-mirror-build\n```\n\nTo use it as a development environment:\n\n```sh\ndocker run -it -v $(pwd):/root/distributed-wikipedia-mirror --net=host --entrypoint bash distributed-wikipedia-mirror-build\n```\n\n# How to Help\n\nIf you don't mind command line interface and have a lot of disk space,\nbandwidth, or code skills, continue reading.\n\n## Share mirror CID with people who can't trust DNS\n\nSharing a CID instead of a DNS name is useful when DNS is not reliable or\ntrustworthy.  The latest CID for specific language mirror can be found via\nDNSLink:\n\n```console\n$ ipfs resolve -r /ipns/tr.wikipedia-on-ipfs.org\n/ipfs/bafy..\n```\n\nCID can then be opened via `ipfs://bafy..` in a web browser with [IPFS Companion](https://github.com/ipfs-shipyard/ipfs-companion) extension\nresolving IPFS addresses via [IPFS Desktop](https://docs.ipfs.tech/install/ipfs-desktop/) node.\n\nYou can also try [Brave browser](https://brave.com), which ships with [native support for IPFS](https://brave.com/ipfs-support/).\n\n## Cohost a lazy copy\n\nUsing MFS makes it easier to protect snapshots from being garbage collected\nthan low level pinning because you can assign meaningful names and it won't\nprefetch any blocks unless you explicitly ask.\n\nEvery mirrored Wikipedia article you visit will be added to your lazy\ncopy, and will be contributing to your partial mirror. , and you won't need to host\nthe entire thing.\n\nTo cohost a lazy copy, execute:\n\n```console\n$ export LNG=\"tr\"\n$ ipfs files mkdir -p /wikipedia-mirror/$LNG\n$ ipfs files cp $(ipfs resolve -r /ipns/$LNG.wikipedia-on-ipfs.org) /wikipedia-mirror/$LNG/$LNG_$(date +%F_%T)\n```\n\nThen simply start browsing the `$LNG.wikipedia-on-ipfs.org` site via your node.\nEvery visited page will be cached, cohosted, and protected from garbage collection.\n\n## Cohost a full copy\n\nSteps are the same as  for a lazy copy, but you execute additional preload\nafter a lazy copy is in place:\n\n```console\n$ # export LNG=\"tr\"\n$ ipfs refs -r /ipns/$LNG.wikipedia-on-ipfs.org\n```\n\nBefore you execute this, check if you have enough disk space to fit `CumulativeSize`:\n\n```console\n$ # export LNG=\"tr\"\n$ ipfs object stat --human /ipns/$LNG.wikipedia-on-ipfs.org                                                                                                                                 ...rror MM?fix/build-2021\nNumLinks:       5\nBlockSize:      281\nLinksSize:      251\nDataSize:       30\nCumulativeSize: 15 GB\n```\n\nWe are working on improving deduplication between snapshots, but for now YMMV.\n\n## Code\n\nIf you would like to contribute more to this effort, look at the [issues](https://github.com/ipfs/distributed-wikipedia-mirror/issues) in this github repo. Especially check for [issues marked with the \"wishlist\" label](https://github.com/ipfs/distributed-wikipedia-mirror/labels/wishlist) and issues marked [\"help wanted\"](https://github.com/ipfs/distributed-wikipedia-mirror/labels/help%20wanted).\n", "release_dates": []}, {"name": "distributions", "description": "Legacy dist.ipfs.tech website and artifact build tools", "language": "Less", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS distributions\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech/)\n[![](https://img.shields.io/badge/matrix%20chat-%23lobby:ipfs.io-blue.svg?style=flat-square)](https://matrix.to/#/#lobby:ipfs.io )\n\n> Source for building https://dist.ipfs.tech\n\n**Table of Contents**\n\n- [IPFS distributions](#ipfs-distributions)\n  - [Install](#install)\n  - [Managing `golang` and `nodejs` versions](#managing-golang-and-nodejs-versions)\n  - [Running in Docker](#running-in-docker)\n  - [Usage](#usage)\n    - [Adding a version](#adding-a-version)\n    - [Adding a new (go) distribution](#adding-a-new-go-distribution)\n    - [Publishing](#publishing)\n  - [Background](#background)\n    - [Notes on reproducible builds](#notes-on-reproducible-builds)\n  - [Contribute](#contribute)\n    - [Want to hack on IPFS?](#want-to-hack-on-ipfs)\n  - [License](#license)\n\n## Install\n\nClone the repo and use Docker via `./dockerized <cmd>` wrapper.\n\nIf you don't want to run `./dockerized` build, install\nthe following dependencies via your favorite package manager:\n\n* `go`\n* `npm` (v7.13.0+ with nodejs v16.2.0+)\n* `jq`  (v1.6+)\n* `ipfs`\n* `awk`\n\n## Managing `golang` and `nodejs` versions\n\nThere is a `.tool-versions` file for the [asdf](https://asdf-vm.com/#/) version\nmanager, which the Docker build environment will also use.\n\n## Running in Docker\n\nThere is a `./dockerize` script, you can run it without arguments and be in a\nshell with the correct software installed in an Ubuntu 20.04 in a directory\nthat is mapped to the present working directory\n\nNote that we use host networking so you must run an IPFS daemon locally as the\nbuild process assumes a fairly long-lived ipfs node has the CIDs (we give them\nto the collab cluster to pin)\n\nYou can also do `./dockerized <COMAND>`, for instance:\n\n```\n./dockerized make clean\n./dockerized ./dist.sh add-version go-ipfs v0.9.0\n./dockerized make publish\n```\n\nNote that you can't use bash in the command, so \n\n```\n./dockerized make clean && ./dist.sh go-ipfs add-version v0.9.0\n# Does not work\n```\nand\n\n```\n./dockerized \"make clean && ./dist.sh go-ipfs add-version v0.9.0\"\n# Does not work\n```\n\n\n## Usage\n\nAdd a new version or a new distribution with `./dist.sh` then let CI run `make publish` to update DNSLink at dist.ipfs.tech.\n\n### Adding a version\n\nRun:\n\n```sh\n> ./dist.sh add-version <dist> <version>\n```\n\nThis will add the version to `dists/<dist>/versions`, set it as the current version in `dists/<dist>/current`, and build it locally.\n\nExample:\n```sh\n> ./dist.sh add-version fs-repo-99-to-100 v1.0.1\n```\n\nTo produce a signed, **official build** for use in DNSLink at `dist.ipfs.tech`:\n\n1. Run `./dist.sh add-version` locally.\n2. Commit created changes to `dists/<dist>` and open a PR against `ipfs/distributions`.\n3. Wait for Github Action to finish PR build. It runs `./dockerized` build, then signs macOS binaries and spits out updated root CID at the end.\n4. If everything looks good, merge PR and wait for CI running on `master` to update the DNSlink at `dist.ipfs.tech`.\n\n### Adding a new (go) distribution\n\nRun:\n\n```sh\n> ./dist.sh new-go-dist <dist> <git-repo> [sub_package]\n```\n\nAnd follow the prompts.\n\nThe optional `sub_package` argument is used to specify a module within a repo.  The script looks to see if the subpackage is tagged separately from the repo by looking for `sub_package/version` tags. Example:\n```sh\n> ./dist.sh new-go-dist fs-repo-99-to-100 github.com/ipfs/fs-repo-migrations fs-repo-99-to-100\n```\n\n- If the distribution should not show up on the website (e.g. go-ipfs migrations) add a `no-site` file into the `dists/<repo>` folder.\n- Manually create a repo-owner file\n- Reminder that for submodules the version numbers will look like fs-repo-x-to-y/v1.0.0\n\n### Publishing\n\nTo produce a CID (`<NEW_HASH>`) that includes binaries for all versions defined in `./dists/`, in the root of the repository, run:\n\n```sh\n> make publish\n```\n\n- This will build any new binaries defined by dist and the website to the `releases` dir, add it to ipfs and patch it into the existing DAG for the published `/ipns/dist.ipfs.tech`.\n- Versions that are already present on the website will be reused, speeding up the build.\n- Updated CID (`<NEW_HASH>`) will be printed at the end. That's the new hash for `dist.ipfs.tech`. We also append it to a file called `versions` in the repo root (*not* checked into git).\n\nAfter the local build is done, make a quick inspection:\n\n2. Load the dists website in your browser to make sure everything looks right: `http://localhost:8080/ipfs/<NEW_HASH>`.\n3. Compare `<NEW_HASH>` with the current `dist.ipfs.tech` to make sure nothing is amiss: `ipfs object diff /ipns/dist.ipfs.tech /ipfs/<NEW_HASH>`\n\nFinally,\n\n1. Commit your changes and make a PR. Specifically, the changes to `dists/<dist>/versions` and `dists/<dist>/current`.\n2. Wait for [Github Action](https://github.com/ipfs/distributions/actions/) on your PR to build **signed** binaries. `<NEW_SIGNED_HASH>` will be different than one from local build.\n3. Confirm that [Github Action](https://github.com/ipfs/distributions/actions/) triggered by `master` branch push updated the DNSLink for `dist.ipfs.tech`.\n\n## Background\n\nThe goal is to generate a file hierarchy that looks like this:\n\n| **File**                                                              | **Description**                                    |\n| --------------------------------------------------------------------- | -------------------------------------------------- |\n| `releases/index.html`                                                 | listing of all bundles available                   |\n| `releases/<dist>`                                                     | all versions of `<dist>`                           |\n| `releases/<dist>/versions`                                            | textual list of all versions of `<dist>`           |\n| `releases/<dist>/<version>`                                           | dist version                                       |\n| `releases/<dist>/<version>/<dist>_<version>_<platform>.tar.gz`        | archive for `<platform>`                           |\n| `releases/<dist>/<version>/<dist>_<version>_<platform>.tar.gz.cid`    | text file with CID of the archive                  |\n| `releases/<dist>/<version>/<dist>_<version>_<platform>.tar.gz.sha512` | text file with SHA-512 of the archive              |\n| `releases/<dist>/<version>/dist.json`                                 | json file describing all archives in this release. |\n| `releases/<dist>/<version>/build-info`                                | information about the build and build machine      |\n| `releases/<dist>/<version>/build-log-*`                               | logs from the platforms that failed to build.      |\n| `releases/<dist>/<version>/results`                                   | list of platforms successfully built               |\n\nDefinitions:\n- `<dist>` is a distribution, meaning a program or library we release.\n- `<version>` is the version of the `<dist>`.\n- `<platform>` is a supported platform of `<dist>@<version>`\n\nSo for example, if we had `<dist>` `go-ipfs` and `fs-repo-migrations`, we might see a hierarchy like:\n\n```\n.\n\u251c\u2500\u2500 fs-repo-migrations\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v1.3.0\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 build-info\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dist.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_darwin-386.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_darwin-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_freebsd-386.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_freebsd-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_freebsd-arm.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_linux-386.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_linux-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_linux-arm.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_windows-386.zip\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fs-repo-migrations_v1.3.0_windows-amd64.zip\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 results\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 versions\n\u251c\u2500\u2500 go-ipfs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 v0.4.9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 build-info\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 build-log-freebsd-386\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 build-log-freebsd-arm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dist.json\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_darwin-386.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_darwin-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_freebsd-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_linux-386.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_linux-amd64.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_linux-arm.tar.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_windows-386.zip\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-ipfs_v0.4.9_windows-amd64.zip\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 results\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 versions\n\u2514\u2500\u2500 index.html\n85 directories, 943 files\n```\n\nWe call this the **distribution index**, the listing of all distributions, their versions, and platform assets.\n\n### Notes on reproducible builds\n\nRunning `./dockerized make publish` will produce binaries using the same\nruntime as CI. The main difference between local build and official CI one is\nsigning step on platforms such as `darwin` (macOS).\n\nSignatures are attached at the end of macOS binaries, which means\n`*_darwin-*.tar.gz` produced by CI will have additional bytes when compared\nwith local build.\n\n## Contribute\n\nIssues and PRs welcome! Please [check out the issues](https://github.com/ipfs/distributions/issues).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT \u00a9 IPFS\n", "release_dates": []}, {"name": "download-ipfs-distribution-action", "description": null, "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Download IPFS Distribution Action\n\nThe action downloads a distribution from [dist.ipfs.tech](https://dist.ipfs.tech) and puts it on `PATH`.\n\n## Inputs\n\n| Name | Description | Default |\n| --- | --- | --- |\n| name | Name of the distribution to download | go-ipfs |\n| version | Version of the distribution to download | *last stable version* |\n| working-directory | Directory where the action is going to be performed; the downloaded artifacts are cleaned up afterwards | runner.temp |\n| install-directory | Directory where the executable is going to be copied | **linux, macos:** /usr/local/bin; **windows:** /usr/bin |\n| cache | A boolean value to indicate the archive cache should be used | true |\n\n## Outputs\n\n| Name | Description | Example |\n| --- | --- | --- |\n| executable | The name of the executable | ipfs |\n| executables | The names of all the executables | [\"ipfs\"] |\n| cache-hit | A boolean value to indicate the archive was downloaded from cache | true |\n\n## Example\n\n```\n- uses: ipfs/download-ipfs-distribution-action@v1\n  with:\n    name: go-ipfs\n- run: ipfs --help\n  shell: bash\n```\n", "release_dates": ["2023-08-11T21:12:42Z", "2023-02-08T10:14:07Z", "2022-08-29T12:51:44Z", "2022-03-23T09:54:08Z", "2022-03-07T14:48:41Z", "2022-02-03T13:48:23Z", "2021-12-16T11:00:23Z", "2021-12-15T10:26:40Z", "2021-12-14T13:31:43Z"]}, {"name": "ecosystem-directory", "description": "Interactive showcase of projects and products built using IPFS, the InterPlanetary File System.", "language": "HTML", "license": null, "readme": "# IPFS Ecosystem Directory\n\nInteractive IPFS ecosystem directory and showcase\n\n**Just want to add a new project to the IPFS ecosystem directory? [Use this form](https://ipfs.fyi/ecosystem-form).**\n\n***\n\n## Project Add/Change Workflow\n\nThe existing workflow for adding a project to the ecosystem directory, or amending an existing project, is as described below.\n\n### Adding a New Project\n- Project info is added to the [master IPFS project database](https://airtable.com/tblxBjPTzHXiUVZAA/viwpijXTIFraPRkhE?blocks=hide) in one of two ways:\n     - Directly in the base as a new row\n     - By requesting a project's representative fill in the [IPFS Ecosystem Directory Submission Form](https://airtable.com/shrjwvk9pAeAk0Ci7)\n- Once a record is added to the database, an IPFS core team member reviews the record for accuracy, consistency, typos, etc, as well as determining whether the project should be included in the directory (a decision largely based on project maturity)\n- If the project is approved to be included in the directory (the \"Include in directory\" checkbox is ticked), a PR will be created automatically with the JSON by the [script](./scripts/fetch-from-airtable.js) which is run by [GitHub Actions](https://github.com/ipfs/ecosystem-directory/actions/workflows/airtable-pull.yml).\n\n### Amending an Existing Project\n\n- Project info should be amended in the [IPFS Builder Database (Ecosystem page)](https://airtable.com/tblxBjPTzHXiUVZAA/viwpijXTIFraPRkhE?blocks=hide) as a single source of truth\n- From there, update the project details and a PR will be created automatically by GitHub Actions (within 24 hours). You can also trigger the [GitHub Action](https://github.com/ipfs/ecosystem-directory/actions/workflows/airtable-pull.yml) manually by clicking `Run workflow`.\n\n***\n\n## Generating the Showcase Grid\n\nTo view all projects in the ecosystem directory in a \"logo parade\" showcase format suitable for including in a slide deck, [see the instructions below](#Showcase) \u2014 this includes how to customize the grid to get the representation that's most useful for you.\n\nTLDR: https://ecosystem.ipfs.tech/showcase/?category=focus is a general-purpose, useful grid if you don't want to build a custom one.\n\n## Behavior\n\n- The showcase view is visible in its bare form at [ecosystem.ipfs.tech/showcase](https://ecosystem.ipfs.tech/showcase)\n- It provides a logo-based visual summary of the projects in the app by category\n- Each tag within the selected category is assigned a block\n- The container for the tag is sized based on whether there's a small, medium, or large quantity of projects within it\n\n## Customization\n\n### Category\n\nCustomizing the view is done using GET parameters. You might notice that the base showcase link feels a little empty.\n\nAdding a target top-level `category` param to showcase solves this issue. Examples:\n- [/showcase/?category=industry](https://ecosystem.ipfs.tech/showcase/?category=industry)\n- [/showcase/?category=focus](https://ecosystem.ipfs.tech/showcase/?category=focus)\n- [/showcase/?category=benefits](https://ecosystem.ipfs.tech/showcase/?category=benefits)\n\n> Note: This category selection will work for _both_ categories that allow one tag per project (category in which tags are mutually exclusive) and categories that allow multiple tags.\n\n### Containers\n\nInstances of this app may have varying quantities of projects. To help the showcase address both large and small ecosystems, there are params that define container limits. These define what the limits are in terms of number of projects that fit into medium, or large containers.\n\n- `md` minimum projects with a tag to display in a medium container (default is 10, if no value is provided)\n- `lg` minimum projects with a tag to display in a large container ((default is 25, if no value is provided)\n\nExample use case: [/showcase/?category=focus&md=5&lg=15](https://ecosystem.ipfs.tech/showcase/?category=focus&md=5&lg=15)\n\n> Note: The Showcase view is designed to support rows of 5 logos, so setting `lg` and `md` as multiples of 5 is recommended for the ideal visual appearance.\n\n### Location\n\n- The showcase path may be redefined in the app's `settings.json` under the key `showcaseBaseRoute`\n  - Currently implemented as: `\"showcaseBaseRoute\": \"/showcase\"`\n- The showcase has no links, and is not discoverable by search engines\n\n***\n\n## General Developer Information\n\n### Deployment\n\nThis repo is currently deployed to Fleek on the following URLs:\n\n`main` branch: https://ecosystem.ipfs.tech/\n\n`develop` branch: https://ipfs-ecosystem-develop.on.fleek.co/\n\nPushes made to the `main` or `develop` branches of this repo will automatically be reflected in the URLs above. Please allow 2-5 minutes for the application to re-build before seeing changes in your browser.\n\n\n### Server\n\n**Ports**\n\nThese apply to local development.\n\n```\ndevelopment: 20000\nstable: 20001\nproduction: 20002\n```\n\n**Mode**: `static`\n\n**Environment Variables**\n\n```\nNODE_ENV \u2192 development|production\nSERVER_ENV \u2192 development|stable|production\n```\n\n***\n\n## Getting Started\n\n### A. Get Repo\n\nIn a terminal, run the commands below to get set up\n\n```bash\n# Navigate to directory within which to clone the git repo.\n$ cd ~/Desktop\n\n# Clone the repo\n$ git clone git@github.com:ipfs/ecosystem-directory.git\n\n# Enter the repo directory\n$ cd ecosystem-directory\n\n# Add your user information\n$ git config user.name \"Your Name\"\n$ git config user.email \"your.email@example.com\"\n\n# Install npm dependencies\n$ npm ci\n```\n\n### B. Generating a self-signed SSL certificate\n\nUsed for development in a local environment (such as on your personal computer). You only need to do this once. If you've already done this for a different project, just copy your existing `localhost_cert.pem` and `localhost_key.pem` files from `~/.ssh` into the root directory of this repo and skip the rest of this step.\n\n1. [Install mkcert and generate certificate](https://github.com/FiloSottile/mkcert) by running the commands below, in that order:\n\n  ```bash\n  $ cd ~/.ssh\n  $ brew install mkcert\n  $ mkcert -install\n  $ mkcert -key-file localhost_key.pem -cert-file localhost_cert.pem localhost 127.0.0.1\n  $ cat localhost_cert.pem > localhost_fullchain.pem\n  $ cat \"$(mkcert -CAROOT)/rootCA.pem\" >> localhost_fullchain.pem\n  ```\n\n2. Copy the new `localhost_cert.pem` and `localhost_key.pem` files to the root directory of this repo\n3. Start the server and navigate to `https://localhost:<your_port>`\n\n### C. Environment variables\n\nCreate a file called `.env` and put it into the root directory of this repo. Add the following environment variables:\n\n```\nNODE_ENV=development\nSERVER_ENV=development\n```\n\n### D. Start the app\n\n```bash\n$ npm run dev\n```\n\n***\n\n## Project Model\n\nBelow is an outline of the project model. A boilerplate JSON file can be found in `@/static/project-template.json`. This template file can be duplicated, filled out and renamed to create a new project. It is not necessary to generate a project ID since the filename of each project will serve as a project `slug`. The project logo must be placed in the `@/static/images/projects` directory and committed to git. Just the logo name (ex: `project-logo.svg`) needs to be added to the project JSON file, no need to write out the full path.\n\n### Naming Convention\n\nThis means that file names must be named after project names, and use lowercase and kebab-case. For example, an appropriate project `slug` would be `world-wide-web`, and therefore the corresponding file would be `world-wide-web.json`. It's important to not deviate between the file name and the `name` of the project.\n\n### Keys\n\nKeys should be retained when not in  use. This ensures that if anyone wants to add to the project, they immediately see all keys available in other projects, rather than searching for the model or accidentally using a data structure that doesn't match the model perfectly. This means empty and type checking is done by the app in a strict fashion.\n\n- `display`: toggle whether or not to display or hide the project from the results\n\n- `featured`: toggle whether this appears in the featured slider\n\n- `sortNumbers`: these labels and numbers will be used in the sort-by filter\n\n- `logo`: all logos will be in SVG format and must be placed in the `@/static/images` directory\n\n- `name`: name of the product\n\n- `org`: a product can belong to multiple organizations\n\n- `description`: 2 descriptions are needed. A long description that will be visible on the Project Single page and a short description that is visible in the card format (such as the Featured slider). If none provided, a truncated version of the long description will be used.\n\n- `primaryLink`: this is the 1st link found directly under the project description\n\n- `links`: these links will always appear at the top of the **Key Info** section, however, these links could be extended to use elsewhere in the future\n\n- `keyInfo`: these key/value pairs will always appear below the links in the **Key Info** section\n\n- `video`: can be a URL to either a YouTube or Vimeo video, the video must be publicly accessible and embeddable\n\n- `stats`:  general statistics with short descriptions, also known as \"big numbers\"\n\n- `ctaCard`: this card will always be displayed as the last block in the stats section. The button text can be changed in `@/content/pages/project.json`\n\n- `taxonomies`: the taxonomies contain a `slug` that will match a master taxonomy object (found in: `@/content/pages/taxonomy.json`); if a tag does not match, it will not be displayed. In other words, `taxonomy.json` acts as a source of truth, regardless of the tags assiged in a particular project's content.\n\n### Schema\n\nThe schema can be found [here](https://github.com/ipfs-shipyard/nuxt-module-ecosystem-directory/blob/main/content/data/project-schema.json) and _must_ be updated if the schema ever changes. The `$setProjectDefaults()` global method (found [here](https://github.com/ipfs-shipyard/nuxt-module-ecosystem-directory/blob/main/plugins/helpers.js)) uses [`project-schema.json`](https://github.com/ipfs-shipyard/nuxt-module-ecosystem-directory/blob/main/content/data/project-schema.json) in order to perform type checking.\n\n```ts\n{\n  display: Boolean,\n  featured: Boolean,\n  sortNumbers: {\n    label: Number\n  },\n  logo: {\n    icon: String,\n    full: String\n  },\n  name: String,\n  org: [String],\n  description: {\n    short: String,\n    long: String\n  },\n  primaryCta: {\n    url: String,\n    text: String\n  },\n  links: [ {\n    label: String,\n    links: [ {\n      url: String,\n      text: String\n    } ]\n  } ],\n  keyInfo: [ {\n    label: String,\n    value: String\n  } ],\n  video: String,\n  stats: [ {\n    label: String,\n    value: String\n  } ],\n  ctaCard: {\n    title: String,\n    description: String,\n    buttonText: String,\n    url: String\n  },\n  taxonomies: [{\n    slug: String,\n    tags: [String]\n  }]\n}\n```\n\n***\n\n## Transforming Project Data\n\nEach project that is to be included in the ecosystem must have a `json` file in `@/content/projects`, with the project name in `kebab-case`. For instance, `@/content/projects/foo-bar.json`.\n\n***\n\n## Embeddable View\n\nAn interactive summary of the state of the app can be injected into external sites. It contains a slider with sample projects that can be filtered by one dimension, and sorted. This view is embeddable in 2 steps:\n\n1. Include a single Javascript file in the external site, from the path `/embeddable-view.js`\n\n2. Specify a target container on the external site, with either a class or _id_ as follows\n  - `class=\"ipfs-ecosystem-embed\"`\n  - `id=\"ipfs-ecosystem-embed\"`\n\n\n### Customization\n\nThe content for the embeddable view, and target category for the dropdown, can be specified in the `embeddable-view-settings.json` file.\n\nThe embeddable view inherits the theming from the Ecosystem itself, but is also available in a light and a dark mode\n- For light mode (default), `data-theme=\"light\"` can be added to the target container\n- For dark mode, add `data-theme=\"dark\"` to the target container\n\nOn the external site, it might be useful to provide a `max-width` for the container\n```css\n.ipfs-ecosystem-embed, #ipfs-ecosystem-embed {\n  max-width: 600px;\n}\n```\n\nIf a class is used, multiple embeddable views can be instantiated on a single page. This is also useful for support of single page applications. The following HTML will call in two embeddable views, one light, and the other dark.\n\n```html\n  <div class=\"ipfs-ecosystem-embed\" data-theme=\"light\"></div>\n  <div class=\"ipfs-ecosystem-embed\" data-theme=\"dark\"></div>\n```\n\n- The embeddable view is namespaced to avoid conflicts\n- This view calls in VueJS on the target site. If Vue is already loaded, it does not call it in\n- As such, this view is loosely compatible with legacy Vue 1 as well as Vue 3 sites (more extensive testing may need to be performed)\n- This view is compatible with all modern browsers, and many older browsers, including Internet Explorer 11\n\n***\n\n## Showcase\n\nThis application is shipped with an alternative data visualization, for the purpose of use in presentations and other media where a visual summary of the projects in the ecosystem is needed.\n\nBy default this view is called the _Showcase_, which is also the URL through which it's accessed. This path _can_ be changed.\n\n### Behavior\n\n- The showcase view is visible in its bare form at [ecosystem.ipfs.tech/showcase](https://ecosystem.ipfs.tech/showcase)\n- It provides a logo-based visual summary of the projects in the app by category\n- Each tag within the selected category is assigned a block\n- The container for the tag is sized based on whether there's a small, medium, or large quantity of projects within it\n\n### Customization\n\n#### Category\n\nCustomizing the view is done using GET parameters. The base showcase path will render projects, but may seem bare if no arguments are passed in the URI.\n\nAdding a target top-level `category` param to showcase solves this issue. Examples:\n- [/showcase/?category=industry](https://ecosystem.ipfs.tech/showcase/?category=industry)\n- [/showcase/?category=focus](https://ecosystem.ipfs.tech/showcase/?category=focus)\n- [/showcase/?category=benefits](https://ecosystem.ipfs.tech/showcase/?category=benefits)\n\n> Note: This category selection will work for _both_ categories that allow one tag per project (category in which tags are mutually exclusive) and categories that allow multiple tags.\n\n#### Containers\n\nInstances of this app may have varying quantities of projects. To help the showcase address both large and small ecosystems, there are params that define container limits. These define what the limits are in terms of number of projects that fit into medium, or large containers.\n\n- `md` minimum projects with a tag to display in a medium container (default is 10, if no value is provided)\n- `lg` minimum projects with a tag to display in a large container ((default is 25, if no value is provided)\n\nExample use case: [/showcase/?category=focus&md=5&lg=15](https://ecosystem.ipfs.tech/showcase/?category=focus&md=5&lg=15)\n\n> Note: The Showcase view is designed to support rows of 5 logos, so setting `lg` and `md` as multiples of 5 is recommended for the ideal visual appearance.\n\n#### Location\n\n- The showcase path may be redefined in the app's `settings.json` under the key `showcaseBaseRoute`\n  - Currently implemented as: `\"showcaseBaseRoute\": \"/showcase\"`\n- The showcase has no links, and is _not_ discoverable (`noindex, nofollow`) by search engines\n\n\n***\n\n## Analytics\n\nAnalytics are implemented through Countly, using the Web SDK.\n\nThe following environment variables are required:\n\n```bash\nNODE_ENV=<production|development>\nCOUNTLY_APP_KEY=<key>\nCOUNTLY_SITE_URL=<url>\n```\n\nThe following `nuxt.config.js` entries are required:\n\n```js\n{\n  countly: {\n    initialize: true, // if set to false, Countly will be DISABLED\n    debug: Boolean,\n    disableInDevelopment: Boolean,\n    suppressErrorLogs: Boolean\n  }\n}\n```\n\nBelow is a breakdown of all events captured by Countly.\n\n### \u2192 General\n\n```js\nCountly.track_sessions()\nCountly.track_pageview()\nCountly.track_links()\n```\n\n### \u2192 Segment Chart\n\n**Segment clicked**\n\n`name: <category_label>`\n\n`slug: <category_slug>`\n\n```js\nCountly.trackEvent('Segment Chart | Segment Clicked', { label, slug })\n```\n\n**View All button clicked**\n\n`name: <category_label>`\n\n`slug: <category_slug>`\n\n```js\nCountly.trackEvent('Segment Chart | View All Button Clicked', { label, slug })\n```\n\n### \u2192 Featured Slider\n\n**Project card clicked**\n\n`name: <project_name>`\n\n`slug: <project_slug>`\n\n`from: Home Page | Detail Page`\n\n```js\nCountly.trackEvent('Featured Slider | Project Card Clicked', { name, slug, from })\n```\n\n### \u2192 Events\n\n**Filter Panel Toggled**\n\n`button: filters | x-icon | done`\n\n`state: open | closed`\n\n```js\nCountly.trackEvent('Filter Panel Toggled', { button, state })\n```\n\n**Sort-By Dropdown Toggled**\n\n`state: open | closed`\n\n```js\nCountly.trackEvent('Sort-By Dropdown Toggled', { state })\n```\n\n**Sort-By Option Selected**\n\n`label: <sort_option_label>`\n\n`slug: <sort_option_slug>`\n\n```js\nCountly.trackEvent('Sort-By Option Selected', { label, slug })\n```\n\n**Pagination Button Clicked**\n\n`page: <number>`\n\n```js\nCountly.trackEvent('Pagination Button Clicked', { page })\n```\n\n**Results-Per-Page Dropdown Toggled**\n\n`state: open | closed`\n\n```js\nCountly.trackEvent('Results-Per-Page Dropdown Toggled', { state })\n```\n\n**Results-Per-Page Option Selected**\n\n`option: <number>`\n\n```js\nCountly.trackEvent('Results-Per-Page Option Selected', { option })\n```\n\n**Grid-List View Toggled**\n\n`view: list | grid`\n\n```js\nCountly.trackEvent('Grid-List View Toggled', { view })\n```\n\n**Filter Chiclet Clicked**\n\n`tag: all | <tag>`\n\n`category: <parent_category>`\n\n`state: on | off`\n\n```js\nCountly.trackEvent('Filter Chiclet Clicked', { tag, category, state })\n```\n\n**Clear Filters Button Clicked**\n`count: <number>`\n\n```js\nCountly.trackEvent('Clear Filters Button Clicked', { count })\n```\n\n**Filter Panel Search Input**\n\nThere exists a 500ms debounce function in the search input so as to provide a greater chance of capturing a full rather than partial search query.\n\n`query: <search_term>`\n\n```js\nCountly.trackEvent('Filter Panel Search Input', { query })\n```\n\n### \u2192 Header/Footer\n\nLinks get automatically tracked by `Countly.track_links()`\n\n### \u2192 404\n\n```js\nCountly.trackEvent('404_NOT_FOUND', {\n  path: this.$route.path,\n  referrer: document.referrer\n})\n```\n\n### \u2192 Query params\n\nTrack URL entire query param object when interacting with project filtering system. Since every param change is already tracked individually as per the list above, this tracker exists as an added layer for testing.\n\n`query: Object`\n\n```js\nCountly.trackEvent('Query Param Debug', { query })\n```\n", "release_dates": ["2021-06-28T20:13:55Z"]}, {"name": "eslint-config-ipfs", "description": "An ESLint Shareable Config used by IPFS project", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": ["2024-01-19T09:46:15Z", "2023-09-29T14:48:03Z", "2023-07-26T11:06:37Z", "2023-07-19T12:31:34Z", "2023-05-11T06:18:29Z", "2023-04-27T08:26:47Z", "2023-04-27T07:50:42Z", "2023-04-05T17:10:55Z"]}, {"name": "fs-repo-migrations", "description": "Migrations for the filesystem repository of ipfs clients", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# fs-repo-migrations\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> Migrations for the filesystem repository of Kubo IPFS nodes\n\nThese are migrations for the filesystem repository of [Kubo](https://github.com/ipfs/kubo) IPFS nodes. Each migration builds a separate binary that converts a repository to the next version.  The `fs-repo-migrations` is a tool that downloads individual migrations from the ipfs distribution site and applies them in sequence to migrate the ipfs repository to the target version.  This tool is written in Go, and developed alongside [kubo](https://github.com/ipfs/kubo).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n  - [When should I migrate](#when-should-i-migrate)\n  - [How to Run Migrations](#how-to-run-migrations)\n  - [Developing Migrations](#developing-migrations)\n- [Migration with Plugins](#migration-with-plugins)\n- [Contribute](#contribute)\n  - [Want to hack on IPFS?](#want-to-hack-on-ipfs)\n- [License](#license)\n\n## Install\n\n```sh\nmake install\n```\n\n## Usage\n\n### When should I migrate\n\nWhen you want to upgrade Kubo to a new version, you may need to migrate.\n\nHere is the table showing which repo version corresponds to which Kubo version:\n\n| ipfs repo version | Kubo versions    |\n| ----------------: | :--------------- |\n|                 1 | 0.0.0 - 0.2.3.   |\n|                 2 | 0.3.0 - 0.3.11   |\n|                 3 | 0.4.0 - 0.4.2    |\n|                 4 | 0.4.3 - 0.4.5    |\n|                 5 | 0.4.6 - 0.4.10   |\n|                 6 | 0.4.11 - 0.4.15  |\n|                 7 | 0.4.16 - 0.4.23  |\n|                 8 | 0.5.0 - 0.6.0    |\n|                 9 | 0.5.0 - 0.6.0    |\n|                10 | 0.6.0 - 0.7.0    |\n|                11 | 0.8.0 - 0.11.0   |\n|                12 | 0.12.0 - 0.17.0  |\n|                13 | 0.18.0 - 0.20.0  |\n|                14 | 0.21.0 - 0.22.0  |\n|                15 | 0.23.0 - current |\n\n### How to Run Migrations\n\nPlease see the [migration run guide here](run.md).\n\n### Developing Migrations\n\nMigrations are one of those things that can be extremely painful on users. At the end of the day, we want users never to have to think about it. The process should be:\n\n- SAFE. No data lost. Ever.\n- Revertible. Tools must implement forward and backward migrations.\n- Frozen. After the tool is written, all code must be frozen and vendored.\n- To Spec. The tools must conform to the spec.\n\n#### Build and Test\n\nTo create a new migration, create a go module in a directory named `fs-repo-X-to-Y`, where `X` is the repo \"from\" version and `Y` the repo \"to\" version.  Vendor the module's dependencies. The build tooling will find this module and build the migration binary.\n\nIf the migration directory contains a subdirectory named `sharness`, tests contained in it are run using the sharness test tool. Tests must be named `tNNNN-*.sh`, where NNNN is a 4-digit sequence number.\n\nAfter the migration is merged into the main repo branch, create a version tag for it.  This is necessary for versioning individual migrations within the repo.\n```sh\ngit tag <migration>/v<version>\ngit push origin <migration>/v<version>\n```\n\nExample:\n```sh\ngit tag fs-repo-99-to-100/v1.0.1\ngit push origin fs-repo-99-to-100/v1.0.1\n```\n\n#### Ignoring legacy migrations\n\nWe \"archive\" legacy migrations by adding them to `ignored-migrations` file.\nThis keeps CI fast, and removes issues caused by old, with unsupported go code.\n\n### Dependencies\n\nDependencies must be vendored independently for each migration. Each migration is a separate go module with its own `vendor` directory (created with `go mod vendor` for that migration).  All migrations are built using `go build -mod=vendor` to ensure dependencies come from the module's `vendor` directory.\n\n## Migration with Plugins\nIf IPFS plugins were used to operate your IPFS datastore, such as the [ipfs-ds-s3](https://github.com/ipfs/go-ds-s3) plugin, then migration may require building a custom migration with the plugin built into it.  There is a script to assist with the process: `build-plugin.sh`.\n\n### Build a Migration with a Plugin\nThis requires that you have Go installed.\n\nFirst clone the `fs-repo-migrations` github repo:\n```sh\ngit clone https://github.com/ipfs/fs-repo-migrations.git\n```\n\nThen run the `build-plugin.sh` script, supplying the necessary arguments (run with -h for help).\n\n### Run the Custom Migration\nAfter the custom migration with plugin(s) has built successfully, change to the migration directory and run the migration binary.  You can also copy the migration binary into your `PATH` if you want it to be run by `ipfs-update` or by the `fs-repo-migrations` tool.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/fs-repo-migrations/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2021-08-09T20:58:47Z", "2021-04-01T03:38:38Z", "2021-01-29T00:44:01Z", "2020-12-08T18:33:32Z"]}, {"name": "gateway-conformance", "description": "a vendor-agnostic gateway conformance test suite for implementers of IPFS Gateways to ensure compliance with  https://specs.ipfs.tech/http-gateways/", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<h1 align=\"center\">\n  <br>\n  <a href=\"#readme\"><img src=\"https://github.com/ipfs/gateway-conformance/assets/157609/4e7ba998-c7f7-415b-bd72-eef053474865\" alt=\"Boxo logo\" title=\"Boxo logo\" width=\"300\"></a>\n  <br>\n  Gateway Conformance\n  <br>\n</h1>\n\n<p align=\"center\" style=\"font-size: 1.2rem;\">A set of GO and HTTP tools for testing implementation compliance with https://specs.ipfs.tech</p>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://specs.ipfs.tech\"><img src=\"https://img.shields.io/badge/specs-IPFS-blue.svg?style=flat-square\" alt=\"IPFS Specifications\"></a>\n  <a href=\"https://github.com/ipfs/boxo/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/boxo/go-test.yml?branch=main\" alt=\"ci\"></a>\n  <a href=\"https://github.com/ipfs/gateway-conformance/releases\"><img alt=\"GitHub release\" src=\"https://img.shields.io/github/v/release/ipfs/gateway-conformance?filter=!*rc*\"></a>\n</p>\n\n<hr />\n\n<!-- TOC -->\n\n- [About](#about)\n- [Usage](#usage)\n  - [CLI](#cli)\n  - [Docker](#docker)\n  - [Github Action](#github-action)\n  - [Web Dashboard](#web-dashboard)\n- [Commands](#commands)\n  - [Examples](#examples)\n- [Releases](#releases)\n- [Development](#development)\n  - [Test DSL Syntax](#test-dsl-syntax)\n- [License](#license)\n\n<!-- /TOC -->\n\n## About\n\nGateway Conformance test suite is a set of tools for testing implementation\ncompliance with a subset of [IPFS Specifications](https://specs.ipfs.tech). The\ntest suite is implementation and language-agnostic. Point `gateway conformance\ntest` at HTTP endpoint and specify which tests should run.\n\nIPFS Shipyard uses it for ensuring specification compliance of the `boxo/gateway` library included in [Kubo](https://github.com/ipfs/kubo), [the most popular IPFS implementation](https://github.com/protocol/network-measurements/tree/master/reports),\nthat powers various [public gateways](https://ipfs.github.io/public-gateway-checker/), [IPFS Desktop](https://docs.ipfs.io/install/ipfs-desktop/), and [Brave](https://brave.com/ipfs-support/).\n\n\nSome scenarios in which you may find this project helpful:\n\n* You are building an product that relies on in-house IPFS Gateway and want to ensure HTTP interface is implemented correctly\n* You are building an IPFS implementation and want to leverage existing HTTP test fixtures to tell if you are handling edge cases correctly\n* You want to test if a trustless retrieval endpoint supports partial CARs from [IPIP-402](https://specs.ipfs.tech/ipips/ipip-0402/)\n* You want to confirm a commercial service provider implemented content-addressing correctly\n\n## Usage\n\nThe `gateway-conformance` can be run as a [standalone binary](#cli), a [Docker image](#docker), or a part of [Github Action](#github-actions).\n\nSome of the tests require the tested gateway to be able to resolve specific fixtures CIDs or IPNS records.\n\nTwo high level [commands](/docs/commands.md) exist:\n- [test](/docs/commands.md#test) (test runner with ability to specify a subset of tests to run)\n- [extract-fixtures](/docs/commands.md#extract-fixtures) (allowing for custom provisioning of how test vectors are loaded into tested runtime)\n\n### CLI\n\n```console\n$ # run subdomain-gateway tests against endpoint at http://localhost:8080 output as JSON\n$ gateway-conformance test --gateway-url http://localhost:8080 --json report.json --specs +subdomain-gateway,-path-gateway -- -timeout 30m\n```\n\nIf you are looking for TLDR, see [examples](/docs/examples.md).\n\n### Docker\n\nPrebuilt image at `ghcr.io/ipfs/gateway-conformance` can be used for both `test` and `extract-fixtures` commands:\n\n```console\n$ # extract fixtures to ./fixtures directory\n$ docker run -v \"${PWD}:/workspace\" -w \"/workspace\" ghcr.io/ipfs/gateway-conformance:vA.B.C extract-fixtures --output fixtures --merged false\n\n$ # run subdomain-gateway tests against endpoint at http://localhost:8080\n$ docker run --network host -v \"${PWD}:/workspace\" -w \"/workspace\" ghcr.io/ipfs/gateway-conformance:vA.B.C test --gateway-url http://localhost:8080 --json report.json --specs +subdomain-gateway,-path-gateway -- -timeout 30m\n```\n\n**NOTE:** replace `vA.B.C` with a [semantic version](https://github.com/ipfs/gateway-conformance/releases) version you want to test against\n\n### Github Action\n\nCommon operations are possible via reusable GitHub actions:\n- [`ipfs/gateway-conformance/.github/actions/test`](https://github.com/ipfs/gateway-conformance/blob/main/.github/actions/test/action.yml)\n- [`ipfs/gateway-conformance/.github/actions/extract-fixtures`](https://github.com/ipfs/gateway-conformance/blob/main/.github/actions/extract-fixtures/action.yml)\n\nTo learn how to integrate them in the CI of your project, see real world examples in:\n- [`kubo/../gateway-conformance.yml`](https://github.com/ipfs/kubo/blob/master/.github/workflows/gateway-conformance.yml) (fixtures imported into tested node)\n- [`boxo/../gateway-conformance.yml`](https://github.com/ipfs/boxo/blob/main/.github/workflows/gateway-conformance.yml) (fixtures imported into a sidecar kubo node that is peered with tested library)\n- [`bifrost-gateway/../gateway-conformance.yml`](https://github.com/ipfs/bifrost-gateway/blob/main/.github/workflows/gateway-conformance.yml) (fixtures imported into a kubo node that acts as a delegated block backend)\n\n### Web Dashboard\n\nConformance test suite output can be plain text or JSON, which in turn can be\nrepresented as a web dashboard which aggregates results from many test runs and\nrenders them on a static website.\n\nThe Implementation Dashboard instance at\n[conformance.ipfs.tech](https://conformance.ipfs.tech/) is a view that\nshowcases some of well known and complete implementations of IPFS Gateways\nin the ecosystem.\n\nLearn more at [`/docs/web-dashboard.md`](/docs/web-dashboard.md)\n\n## Commands\n\nSee `test` and `extract-fixtures` documentation at [`/docs/commands.md`](/docs/commands.md)\n\n### Examples\n\nWant to test mature specs, while disabling specific specs?\nOr only test a specific spec (like trustless gateway), while disabling a sub-part of it (only blocks and CARS, no IPNS)?\nSee [`/docs/examples.md`](/docs/examples.md)\n\n## Releases\n\nThe `main` branch may contain tests for features and IPIPs which are not yet\nsupported by stable releases of IPFS implementations.\n\nDue to this, implementations SHOULD test themselves against a stable release\nof this test suite instead.\n\nSee [`/releases`](https://github.com/ipfs/gateway-conformance/releases) for the list of available releases.\n\n## Development\n\nWant to improve the conformance test suite itself? \nSee documentation at [`/docs/development.md`](/docs/development.md)\n\n### Test DSL Syntax\n\nInterested in write a new test case?\nTest cases are written in Domain Specific Language (DLS) based on Golang. \nMore details at [`/docs/test-dsl-syntax.md`](/docs/test-dsl-syntax.md)\n\n## License\n\nThis project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/ipfs/kubo/blob/master/LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](https://github.com/ipfs/kubo/blob/master/LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2024-01-25T16:25:09Z", "2023-11-20T14:31:28Z", "2023-10-11T10:25:45Z", "2023-09-18T13:40:18Z", "2023-07-31T10:00:59Z", "2023-06-27T11:02:39Z", "2023-06-08T16:43:18Z", "2023-06-01T13:47:34Z", "2023-03-27T11:09:29Z"]}, {"name": "gh-issue-form-test", "description": null, "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "github-mgmt", "description": null, "language": "TypeScript", "license": null, "readme": "# GitHub Management via Terraform: ipfs\n\nThis repository is responsible for managing GitHub configuration of `ipfs` organisation as code with Terraform. It was created from [github-mgmt-template](https://github.com/protocol/github-mgmt-template) and it will receive updates from that repository.\n\n**IMPORTANT**: Having write access to GitHub Management repository can be as powerful as having admin access to the organizations managed by that repository.\n\n*NOTE*: Because we don't have merge queue functionality enabled for the repository yet, after a merge, wait for the `Apply` and `Update` workflows to complete before merging any other PRs.\n\nTo learn more, check out:\n- [What is GitHub Management and how does it work?](docs/ABOUT.md)\n- [How to set up GitHub Management?](docs/SETUP.md)\n- [How to work with GitHub Management?](docs/HOWTOS.md)\n", "release_dates": []}, {"name": "go-bitfield", "description": null, "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-bitfield\n\nThis is a simple bitfield package that's about 2-3x faster than using `big.Int`s\nfrom the standard library. It also has a better interface (and, e.g., supports\ncounting ones).\n", "release_dates": ["2023-02-09T18:45:22Z"]}, {"name": "go-bitswap", "description": "The golang implementation of the bitswap protocol", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-bitswap\n==================\n\n> An implementation of the bitswap protocol in go!\n\nThis has been moved to https://github.com/ipfs/go-libipfs/tree/main/bitswap.\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2022-12-09T12:11:51Z", "2022-09-08T16:06:00Z", "2022-08-13T17:00:19Z", "2022-07-28T02:49:48Z", "2022-06-13T17:07:56Z", "2022-03-18T23:22:04Z", "2021-08-18T15:50:45Z", "2021-05-17T17:48:21Z", "2020-11-18T09:14:23Z", "2020-06-10T21:21:09Z", "2020-04-14T23:25:07Z", "2020-04-11T00:36:20Z", "2020-04-03T21:47:35Z", "2020-03-26T01:16:04Z", "2020-03-24T19:40:37Z", "2020-03-19T16:42:21Z", "2020-03-16T21:41:20Z", "2020-03-11T05:19:17Z", "2020-03-11T02:19:00Z", "2020-01-23T14:51:01Z", "2019-12-05T18:25:14Z", "2019-10-28T20:00:07Z"]}, {"name": "go-block-format", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-block-format\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-block-format/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-block-format/branch/master)\n[![Travis CI](https://travis-ci.org/ipfs/go-block-format.svg?branch=master)](https://travis-ci.org/ipfs/go-block-format)\n\n> go-block-format is a set of interfaces that a type needs to implement in order to be a CID addressable block of data.\n\n## Lead Maintainer\n\n[Eric Myhre](https://github.com/warpfork)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nmake install\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2023-08-28T05:39:20Z", "2023-03-22T05:14:23Z"]}, {"name": "go-blockservice", "description": "The go 'blockservice' implementation, combines local and remote storage seamlessly", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-blockservice\n==================\n\n> go-blockservice provides a seamless interface to both local and remote storage backends.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-block-format/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-block-format/branch/master)\n[![Build Status](https://circleci.com/gh/ipfs/go-blockservice.svg?style=svg)](https://circleci.com/gh/ipfs/go-blockservice)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/blockservice.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [TODO](#todo)\n- [License](#license)\n\n## TODO\n\nThe interfaces here really would like to be merged with the blockstore interfaces.\nThe 'dagservice' constructor currently takes a blockservice, but it would be really nice\nif it could just take a blockstore, and have this package implement a blockstore.\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2023-05-25T14:13:20Z", "2023-04-04T16:55:51Z", "2022-12-09T12:43:39Z", "2022-08-12T03:17:23Z", "2022-03-18T23:24:34Z", "2020-03-23T18:02:50Z"]}, {"name": "go-bs-sqlite3", "description": "optimized sqlite3-backed IPFS blockstore ", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# go-bs-sqlite3\noptimized sqlite3-backed IPFS blockstore \n", "release_dates": []}, {"name": "go-cid", "description": "Content ID v1 implemented in go", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-cid\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-cid?status.svg)](https://godoc.org/github.com/ipfs/go-cid)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/go-cid/badge.svg?branch=master)](https://coveralls.io/github/ipfs/go-cid?branch=master)\n[![Travis CI](https://travis-ci.org/ipfs/go-cid.svg?branch=master)](https://travis-ci.org/ipfs/go-cid)\n\n> A package to handle content IDs in Go.\n\nThis is an implementation in Go of the [CID spec](https://github.com/ipld/cid).\nIt is used in `go-ipfs` and related packages to refer to a typed hunk of data.\n\n## Lead Maintainer\n\n[Eric Myhre](https://github.com/warpfork)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-cid` is a standard Go module which can be installed with:\n\n```sh\ngo get github.com/ipfs/go-cid\n```\n\n## Usage\n\n### Running tests\n\nRun tests with `go test` from the directory root\n\n```sh\ngo test\n```\n\n### Examples\n\n#### Parsing string input from users\n\n```go\n// Create a cid from a marshaled string\nc, err := cid.Decode(\"bafzbeigai3eoy2ccc7ybwjfz5r3rdxqrinwi4rwytly24tdbh6yk7zslrm\")\nif err != nil {...}\n\nfmt.Println(\"Got CID: \", c)\n```\n\n#### Creating a CID from scratch\n\n```go\n\nimport (\n  cid \"github.com/ipfs/go-cid\"\n  mc \"github.com/multiformats/go-multicodec\"\n  mh \"github.com/multiformats/go-multihash\"\n)\n\n// Create a cid manually by specifying the 'prefix' parameters\npref := cid.Prefix{\n\tVersion: 1,\n\tCodec: uint64(mc.Raw),\n\tMhType: mh.SHA2_256,\n\tMhLength: -1, // default length\n}\n\n// And then feed it some data\nc, err := pref.Sum([]byte(\"Hello World!\"))\nif err != nil {...}\n\nfmt.Println(\"Created CID: \", c)\n```\n\n#### Check if two CIDs match\n\n```go\n// To test if two cid's are equivalent, be sure to use the 'Equals' method:\nif c1.Equals(c2) {\n\tfmt.Println(\"These two refer to the same exact data!\")\n}\n```\n\n#### Check if some data matches a given CID\n\n```go\n// To check if some data matches a given cid, \n// Get your CIDs prefix, and use that to sum the data in question:\nother, err := c.Prefix().Sum(mydata)\nif err != nil {...}\n\nif !c.Equals(other) {\n\tfmt.Println(\"This data is different.\")\n}\n\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": ["2023-04-04T04:08:33Z", "2023-03-20T08:29:53Z", "2022-09-05T23:02:58Z", "2022-09-04T11:05:01Z", "2022-08-25T03:35:35Z", "2022-04-21T20:41:18Z", "2021-08-18T02:21:17Z"]}, {"name": "go-cidutil", "description": "Utility functions and types for working with CIDs", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-cidutil\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-cidutil?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-cidutil)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-cidutil.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-cidutil)\n\n> go-cidutil implements various utilities and helper functions for working with CIDs\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2022-05-11T14:46:25Z"]}, {"name": "go-dagwriter", "description": null, "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-dagwriter\n\n## This package has been deprecated and archived. See https://pkg.go.dev/github.com/ipld/go-ipld-prime/storage/bsrvadapter for an alternative.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n\n\nDagWriter is the glue for mutating (adding, removing) [ipld](https://github.com/ipld/go-ipld-prime) nodes in a [block service](https://github.com/ipfs/go-blockservice).\n\n## Usage\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/ipfs/go-dagwriter\"\n    \"github.com/ipld/go-ipld-prime\"\n    cidlink \"github.com/ipld/go-ipld-prime/linking/cid\"\n    \"github.com/ipfs/go-cid\"\n)\n\n...\nlinkPrototype := cidlink.LinkPrototype{cid.Prefix{\n    Version: 1, Codec: 0x71, MhType: 0x17, MhLength: 20,\n}}\n\nwriter := dagwriter.NewDagWriter(blockService)\n\n// Store ipldNode in the block service\nlink, err := writer.Store(ipld.LinkContext{}, linkPrototype, ipldNode)\nif err != nil {\n    panic(err)\n}\n...\n\n// Remove the node from the block service.\nif err := writer.Delete(context.Background(), link); err != nil {\n    panic(err)\n}\n\n```\n\n## Contribute\n\nPRs are welcome!\n\n## License\n\nThe go-dagwriter project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/ipfs/go-dagwriter/blob/main/LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](https://github.com/ipfs/go-dagwriter/blob/main/LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2021-07-22T04:07:47Z"]}, {"name": "go-data-transfer-bus", "description": "Simple event bus for data transfers", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "go-datastore", "description": "key-value datastore interfaces", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-datastore\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-datastore?status.svg)](https://godoc.org/github.com/ipfs/go-datastore)\n\n> key-value datastore interfaces\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Table of Contents\n\n- [Background](#background)\n- [Documentation](#documentation)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Background\n\nDatastore is a generic layer of abstraction for data store and database access. It is a simple API with the aim to enable application development in a datastore-agnostic way, allowing datastores to be swapped seamlessly without changing application code. Thus, one can leverage different datastores with different strengths without committing the application to one datastore throughout its lifetime.\n\nIn addition, grouped datastores significantly simplify interesting data access patterns (such as caching and sharding).\n\nBased on [datastore.py](https://github.com/datastore/datastore).\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-datastore\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-datastore/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n\n", "release_dates": ["2022-08-17T21:57:05Z", "2021-11-29T21:44:22Z", "2021-11-29T21:44:00Z", "2020-02-14T16:38:15Z", "2020-02-11T03:12:08Z", "2020-02-11T00:55:12Z", "2019-12-05T22:51:34Z", "2019-12-02T23:37:31Z"]}, {"name": "go-delegated-routing", "description": "See https://github.com/ipfs/go-libipfs/tree/main/routing/http instead.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26a0\ufe0f This repository has been moved to https://github.com/ipfs/go-libipfs/tree/main/routing/http.\n\ngo-delegated-routing\n=======================\n\n> Delegated routing Client and Server over Reframe RPC\n\nThis package provides delegated routing implementation in Go:\n- Client (for IPFS nodes like [Kubo](https://github.com/ipfs/kubo/blob/master/docs/config.md#routingrouters-parameters)),\n- Server (for public indexers such as https://cid.contact)\n\n## Documentation\n\n- Go docs: https://pkg.go.dev/github.com/ipfs/go-delegated-routing\n- What is Reframe? https://blog.ipfs.tech/2022-09-02-introducing-reframe/\n  - Reframe Specs: https://github.com/ipfs/specs/blob/main/reframe/\n\n## Lead Maintainer\n\n\ud83e\udd97\ud83c\udfb6\n\n## Generating\n\nClient and Server code can be (re-)generated via:\n\n```console\ngo generate -v ./...\n```\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": ["2023-03-28T00:11:56Z", "2022-10-19T12:57:51Z", "2022-09-21T11:25:38Z", "2022-09-15T14:19:24Z", "2022-09-15T14:12:22Z", "2022-09-13T13:24:31Z", "2022-09-02T14:33:44Z", "2022-07-07T18:38:48Z", "2022-06-07T19:23:33Z", "2022-05-27T16:18:43Z", "2022-05-09T16:51:20Z", "2021-11-16T18:26:19Z", "2021-11-16T18:10:19Z", "2021-11-16T17:23:50Z", "2021-10-26T22:21:03Z"]}, {"name": "go-detect-race", "description": "detect if compiled with race", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-detect-race\n\nCheck if the race detector is running.\n\nI didnt find a variable to check quickly enough so I made this.\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Usage\n\n```go\nimport (\n  detectrace \"github.com/jbenet/go-detect-race\"\n)\n\nfunc main() {\n  if detectrace.WithRace() {\n    // running with -race\n  } else {\n    // running without -race\n  }\n}\n```\n\n## Why?\n\nBecause the race detector doesnt like massive stress tests. Example:\nhttps://groups.google.com/forum/#!topic/golang-nuts/XDPHUt2LE70\n\n## Why didn't you just use...\n\nPlease tell me about a better way of doing this. It wasn't\nreadily apparent to me, so I made this. But i would much prefer\nan env var or some already existing var from the stdlib :)\n", "release_dates": []}, {"name": "go-dnslink", "description": "dnslink resolution in go-ipfs", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# \u26a0\ufe0f Deprecated in favor of [dnslink-std/go](https://github.com/dnslink-std/go)\n\n- \ud83d\udc49  this project is no longer maintained, greenfield projects should use  [dnslink-std/go](https://github.com/dnslink-std/go)\n- we will convert this repo to a thin arapper around [dnslink-std/go](https://github.com/dnslink-std/go) at some point \u2013 see [#15](https://github.com/ipfs/go-dnslink/issues/15)\n\n# go-dnslink\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n\n> dnslink resolution in go-ipfs\n\n## Table of Contents\n\n- [Background](#background)\n- [Install](#install)\n- [Usage](#usage)\n  - [As a library](#as-a-library)\n  - [As a commandline tool](#as-a-commandline-tool)\n- [Contribute](#contribute)\n  - [Want to hack on IPFS?](#want-to-hack-on-ipfs)\n- [License](#license)\n\n## Background\n\nPackage dnslink implements a DNS link resolver. dnslink is a basic\nstandard for placing traversable links in DNS itself. See dnslink.info\n\nA dnslink is a path link in a DNS TXT record, like this:\n\n```\ndnslink=/ipfs/QmR7tiySn6vFHcEjBeZNtYGAFh735PJHfEMdVEycj9jAPy\n```\n\nFor example:\n\n```\n> dig TXT ipfs.io\nipfs.io.  120   IN  TXT  dnslink=/ipfs/QmR7tiySn6vFHcEjBeZNtYGAFh735PJHfEMdVEycj9jAPy\n```\n\nThis package eases resolving and working with thse DNS links. For example:\n\n```go\nimport (\n  dnslink \"github.com/ipfs/go-dnslink\"\n)\n\nlink, err := dnslink.Resolve(\"ipfs.io\")\n// link = \"/ipfs/QmR7tiySn6vFHcEjBeZNtYGAFh735PJHfEMdVEycj9jAPy\"\n```\n\nIt even supports recursive resolution. Suppose you have three domains with\ndnslink records like these:\n\n```\n> dig TXT foo.com\nfoo.com.  120   IN  TXT  dnslink=/ipns/bar.com/f/o/o\n> dig TXT bar.com\nbar.com.  120   IN  TXT  dnslink=/ipns/long.test.baz.it/b/a/r\n> dig TXT long.test.baz.it\nlong.test.baz.it.  120   IN  TXT  dnslink=/b/a/z\n```\n\nExpect these resolutions:\n\n```go\ndnslink.ResolveN(\"long.test.baz.it\", 0) // \"/ipns/long.test.baz.it\"\ndnslink.Resolve(\"long.test.baz.it\")     // \"/b/a/z\"\n\ndnslink.ResolveN(\"bar.com\", 1)          // \"/ipns/long.test.baz.it/b/a/r\"\ndnslink.Resolve(\"bar.com\")              // \"/b/a/z/b/a/r\"\n\ndnslink.ResolveN(\"foo.com\", 1)          // \"/ipns/bar.com/f/o/o/\"\ndnslink.ResolveN(\"foo.com\", 2)          // \"/ipns/long.test.baz.it/b/a/r/f/o/o/\"\ndnslink.Resolve(\"foo.com\")              // \"/b/a/z/b/a/r/f/o/o\"\n```\n\n## Install\n\n```sh\ngo get github.com/ipfs/go-dnslink\n```\n\n## Usage\n\n### As a library\n\n```go\nimport (\n  log\n  fmt\n\n  dnslink \"github.com/ipfs/go-dnslink\"\n)\n\nfunc main() {\n  link, err := dnslink.Resolve(\"ipfs.io\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(link) // string path\n}\n```\n\n### As a commandline tool\n\nCheck out [the commandline tool](dnslink/), which works like this:\n\n```sh\n> dnslink ipfs.io\n/ipfs/QmR7tiySn6vFHcEjBeZNtYGAFh735PJHfEMdVEycj9jAPy\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-dnslink/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE) \u00a9 Juan Benet-Batiz\n\n", "release_dates": []}, {"name": "go-ds-badger", "description": "Datastore implementation using badger as backend.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ds-badger\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-badger?status.svg)](https://godoc.org/github.com/ipfs/go-ds-badger)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-badger.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-badger)\n\n> Datastore implementation using [badger](https://github.com/dgraph-io/badger) as backend.\n\n## Lead Maintainer\n\n[\u0141ukasz Magiera](https://github.com/magik6k)\n\n## Table of Contents\n\n- [Documentation](#documentation)\n- [Badger2](#badger2)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ds-badger\n\n## Badger2\n\nThis repo contains a datastore implementation using Badger v1. If you are looking for a Badger v2 datastore check out https://github.com/ipfs/go-ds-badger2.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-badger/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2021-06-28T19:46:30Z", "2020-10-12T20:48:40Z", "2020-09-23T22:33:10Z", "2020-04-08T03:07:29Z", "2020-03-28T03:27:09Z", "2020-02-11T16:46:37Z", "2019-12-03T21:42:29Z", "2019-10-22T16:45:13Z"]}, {"name": "go-ds-badger2", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ds-badger\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-badger?status.svg)](https://godoc.org/github.com/ipfs/go-ds-badger)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-badger.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-badger)\n\n> Datastore implementation using [badger](https://github.com/dgraph-io/badger) as backend.\n\n## Lead Maintainer\n\n[Jakub Sztandera](https://github.com/kubuxu)\n\n## Table of Contents\n\n- [Documentation](#documentation)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ds-badger\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-badger/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2021-12-14T21:31:20Z", "2020-04-16T21:24:56Z"]}, {"name": "go-ds-badger3", "description": "Datastore implementation using Badger v3 as backend. ", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ds-badger3\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)[![Go Reference](https://pkg.go.dev/badge/github.com/dgraph-io/badger/v3.svg)](https://pkg.go.dev/github.com/dgraph-io/badger/v3)\n\n> Datastore implementation using [badger v3](https://github.com/dgraph-io/badger) as backend.\n\n## Table of Contents\n\n- [Documentation](#documentation)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Documentation\n\nhttps://pkg.go.dev/github.com/dgraph-io/badger/v3\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-badger3/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT + Apache-2.0\n", "release_dates": []}, {"name": "go-ds-badger4", "description": "Datastore implementation using Badger v4 as backend. ", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ds-badger4\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)[![Go Reference](https://pkg.go.dev/badge/github.com/dgraph-io/badger/v4.svg)](https://pkg.go.dev/github.com/dgraph-io/badger/v4)\n\n> Datastore implementation using [badger v4](https://github.com/dgraph-io/badger) as backend.\n\n## Table of Contents\n\n- [Documentation](#documentation)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Documentation\n\nhttps://pkg.go.dev/github.com/dgraph-io/badger/v4\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-badger3/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT + Apache-2.0\n", "release_dates": ["2023-11-22T11:24:25Z"]}, {"name": "go-ds-bench", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "## go-datastore benchmarks\n\n[WIP, WIP, WIP, WIP]\n\n#### Running\n\nFirst, build the worker:\n```\nmake worker.test\nupx --brute worker.test # optionally pack the worker binary\n```\n\nCreate `systems.json` in run dir (here), Example:\n```json\n{\n  \"c5d.large\": [\n    {\"Type\": \"ssh\", \"Spec\": {\"KeyFile\": \"/home/user/.ssh/bench-ec2.pem\", \"User\": \"ubuntu\", \"Addr\": \"10.1.2.3:22\", \"Vars\": {\"BDEV\": \"/dev/nvme0n1p1\", \"MDIR\": \"/mnt0\"}}},\n    {\"Type\": \"ssh\", \"Spec\": {\"KeyFile\": \"/home/user/.ssh/bench-ec2.pem\", \"User\": \"ubuntu\", \"Addr\": \"10.1.2.4:22\", \"Vars\": {\"BDEV\": \"/dev/nvme0n1p1\", \"MDIR\": \"/mnt1\"}}},\n    {\"Type\": \"ssh\", \"Spec\": {\"KeyFile\": \"/home/user/.ssh/bench-ec2.pem\", \"User\": \"ubuntu\", \"Addr\": \"10.1.2.5:22\", \"Vars\": {\"BDEV\": \"/dev/nvme0n1p1\", \"MDIR\": \"/mnt2\"}}},\n  ]\n}\n```\n\nOpen `master.go`, have a look at `newSpec` optionally adjusting it to run\nspecific benchmarks. If it looks good, run `go run master.go -continue` and\nhope that it does it's thing.\n\nMake sure to install filesystem tools on workers:\n```bash\nsudo apt install e2fsprogs btrfs-progs jfsutils xfsprogs ntfs-3g f2fs-tools\n```\n\n#### \"Architecture\"\n\nTop level directory contains a few important parts:\n* `worker/` - test executor - entrypoint is in `worker_test.go:BenchmarkSpec`\n* `master/` - the thing that runs things (responsible for setting up workers (creating filesystems/crashing kernels), assigning jobs, collecting results, creating plots, not crashing irrecoverably after running benchmarks for days/weeks/months, etc.)\n* `options/` - some shared code\n* `scripts/` - shell scripts that are ran on workers before/after tests\n* `master.go` - benchmark matrix 'config'\n* `systems.json` - worker definition\n  * map[systemType][]system\n  * each systemType runs whole benchmark matrix, jobs are distributed across `system`s which are assumed to have the same hardware\n* `results.json` - usually contains partial results before master crashes\n* `plots/` - contains plots generated after running all benchmarks\n\n##### Master\n\nThe most important struct in master is the `master.BenchSpec`:\n\n```go\ntype master.BatchSpec struct { // results.json\n\tDatastores []options.WorkerDatastore // datastores x filesystems\n\t// instance type -> worker id\n\tWorkers map[string][]Worker // systems.json\n\n\t// instance type -> series id\n\tJobs map[string][]*Series\n}\n```\n\n`master.Series` is another important struct which defines which test and with what params should be ran, and stores the results\n```go\ntype master.Series struct {\n\tOpts     []options.BenchOptions\n\tTest     string // defined in Worker/worker_test.go\n\tPlotName string\n\n\t// ds -> Opts\n\tResults map[string]map[int]*parse.Benchmark\n\n\tlk sync.Mutex\n}\n```\n", "release_dates": []}, {"name": "go-ds-bitcask", "description": "Experimental datastore implementation using Bitcask", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ds-bitcask\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-bitcask?status.svg)](https://godoc.org/github.com/ipfs/go-ds-bitcask)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-bitcask.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-bitcask)\n\n> EXPERIMENTAL Datastore implementation using [bitcask](https://git.mills.io/prologic/bitcask) as backend.\n\n## Lead Maintainer\n\n[\u0141ukasz Magiera](https://github.com/magik6k)\n\n## Table of Contents\n\n- [Documentation](#documentation)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ds-bitcask\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-bitcask/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n", "release_dates": []}, {"name": "go-ds-bolt", "description": "A wrapper for boltdb that implements jbenet/go-datastore's Datastore interface", "language": "Go", "license": null, "readme": null, "release_dates": []}, {"name": "go-ds-crdt", "description": "A distributed go-datastore implementation using Merkle-CRDTs.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ds-crdt\n\n> A distributed [go-datastore](https://github.com/ipfs/go-datastore)\n> implementation using Merkle-CRDTs.\n\n`go-ds-crdt` is a key-value store implementation using Merkle CRDTs, as\ndescribed in\n[the paper by H\u00e9ctor Sanju\u00e1n, Samuli P\u00f6yht\u00e4ri and Pedro Teixeira](https://arxiv.org/abs/2004.00107).\nIt satisfies the\n[`Datastore`](https://pkg.go.dev/github.com/ipfs/go-datastore#Datastore)\nand [`Batching`](https://pkg.go.dev/github.com/ipfs/go-datastore#Batching)\ninterfaces from `go-datastore`.\n\nThis means that you can create a network of nodes that use this datastore, and \nthat each key-value pair written to it will automatically replicate to every\nother node. Updates can be published by any node. Network messages can be dropped, \nreordered, corrupted or duplicated. It is not necessary to know beforehand\nthe number of replicas participating in the system. Replicas can join and leave \nat will, without informing any other replica. There can be network partitions \nbut they are resolved as soon as connectivity is re-established between replicas.\n\nInternally it uses a delta-CRDT Add-Wins Observed-Removed set. The current\nvalue for a key is the one with highest priority. Priorities are defined as\nthe height of the Merkle-CRDT node in which the key was introduced.\n\nImplementation is independent from Broadcaster and DAG syncer layers, although the \neasiest is to use out of the box components from the IPFS stack (see below).\n\n## Performance\n\nUsing batching, Any `go-ds-crdt` replica can easily process and sync 400 keys/s at least. The largest known deployment has 100M keys.\n\n`go-ds-crdt` is used in production as state-synchronization layer for [IPFS Clusters](https://ipfscluster.io).\n\n## Usage\n\n`go-ds-crdt` needs:\n  * A user-provided, thread-safe,\n    [`go-datastore`](https://github.com/ipfs/go-datastore) implementation to\n    be used as permanent storage. We recommend using the\n    [Badger implementation](https://pkg.go.dev/github.com/ipfs/go-ds-badger).\n  * A user-defined `Broadcaster` component to broadcast and receive updates\n    from a set of replicas. If your application uses\n    [libp2p](https://libp2p.io), you can use\n    [libp2p PubSub](https://pkg.go.dev/github.com/libp2p/go-libp2p-pubsub) and\n    the provided\n    [`PubsubBroadcaster`](https://pkg.go.dev/github.com/ipfs/go-ds-crdt?utm_source=godoc#PubSubBroadcaster).\n  * A user-defined \"DAG syncer\" component ([`ipld.DAGService`](https://pkg.go.dev/github.com/ipfs/go-ipld-format?utm_source=godoc#DAGService)) to publish and\n    retrieve Merkle DAGs to the network. For example, you can use\n    [IPFS-Lite](https://github.com/hsanjuan/ipfs-lite) which casually\n    satisfies this interface.\n\nThe permanent storage layout is optimized for KV stores with fast indexes and\nkey-prefix support.\n\nSee https://pkg.go.dev/github.com/ipfs/go-ds-crdt for more information.\n\n## Captain\n\nThis project is captained by @hsanjuan.\n\n## License\n\nThis library is dual-licensed under Apache 2.0 and MIT terms.\n\nCopyright 2019. Protocol Labs, Inc.\n\n", "release_dates": ["2023-10-03T16:48:51Z", "2023-08-10T15:24:29Z", "2023-04-12T09:39:53Z", "2023-02-26T13:42:51Z", "2023-01-27T13:06:44Z", "2022-09-06T13:03:17Z", "2022-06-21T17:09:17Z", "2022-06-20T13:41:26Z", "2022-03-22T09:55:32Z", "2022-03-15T10:00:08Z", "2022-02-16T13:20:32Z", "2022-02-15T15:49:51Z", "2022-02-01T22:14:26Z", "2022-01-11T17:06:09Z", "2021-12-17T10:22:25Z", "2021-11-30T05:16:40Z", "2021-11-30T04:07:41Z", "2021-08-16T15:34:42Z", "2021-07-06T08:58:25Z", "2021-04-05T18:34:33Z", "2020-10-20T07:07:52Z", "2020-09-02T09:55:03Z", "2020-08-17T14:43:33Z"]}, {"name": "go-ds-dynamodb", "description": "DynamoDB datastore implementation", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "go-ds-dynamodb\n=======================\n\n> A DynamoDB Datastore Implementation\n\nThis is an implementation of [go-datastore](https://github.com/ipfs/go-datastore) that is backed by DynamoDB.\n\nddbds includes support for optimized prefix queries. When you setup your table's key schema correctly and register it with ddbds, then incoming queries that match the schema will be converted into DynamoDB queries instead of table scans, enabling high performance, ordered, high-cardinality prefix queries.\n\nNote that ddbds currently only stores values up to 400 kb (the DynamoDB maximum item size). This makes ddbds inappropriate for block storage. It could be extended to fall back to S3, but that is not yet implemented. Within the InterPlanetary ecosystem, it's designed for storing DHT records, IPNS records, peerstore records, etc.\n\n## Setup ##\n\n### Simple Setup with Unoptimized Queries ###\nddbds can be used as a simple key-value store, without optimized queries.\n\nIn this case, all datastore queries will result in full table scans using the ParallelScan API, and filtering/ordering/etc. will be performed client-side.\n\nThis is a good option if your table is small or your data and access patterns would not significantly benefit from optimized queries.\n\n```go\nvar ddbClient *dynamodb.DynamoDB = ...\ntableName := \"datastore-table\"\nddbDS := ddbds.New(ddbClient, tableName)\n```\n\nBy default the expected partition key is `DSKey` of type `string`. The name can be customized with the `WithPartitionKey()` option.\n\n\n### Optimized Queries ###\nTo use optimized prefix queries, you must specify a sort key. \n\nAlso, elements written into the datastore should have at least 2 parts, such as `/a/b` and not `/a`. \n\n`ddbds` splits the key into partition and sort keys.  Examples:\n\n* `/a` -> error (not enough parts)\n* `/a/b` -> [`a`, `b`]\n* `/a/b/c` -> [`a`, `b/c`]\n* etc.\n\nTo use optimized queries, simply specify the sort key name using the `WithSortKey()` option:\n\n```go\nvar ddbClient *dynamodb.DynamoDB = ...\ntableName := \"datastore-table\"\nddbDS := ddbds.New(\n\tddbClient, \n\ttableName,\n\tddbds.WithPartitionKey(\"PartitionKey\"),\n\tddbds.WithSortKey(\"SortKey\"),\n)\n```\n\n### Composing Datastores ###\nThis datastore can be composed using mount datastores for optimized prefix queries under different namespaces and DynamoDB tables.\n\nExample:\n\n```go\nddbDS := mount.New([]mount.Mount{\n\t{\n\t\tPrefix: ds.NewKey(\"/peers/addrs\"),\n\t\tDatastore: ddbds.New(\n\t\t\tddbClient,\n\t\t\t\"datastore-peers-addrs\",\n\t\t\tddbds.WithPartitionkey(\"PeerID\"),\n\t\t),\n\t},\n\t{\n\t\tPrefix: ds.NewKey(\"/providers\"),\n\t\tDatastore: ddbds.New(\n\t\t\tddbClient,\n\t\t\t\"datastore-providers\",\n\t\t\tddbds.WithPartitionkey(\"ContentHash\"),\n\t\t\tddbds.WithSortKey(\"PeerID\"),\n\t\t),\n\t},\n\t{\n\t\tPrefix: ds.NewKey(\"/\"),\n\t\tDatastore: ddbds.New(\n\t\t\tddbClient,\n\t\t\t\"datastore-all\",\n\t\t),\n\t},\n})\n```\n\n### IAM Permissions ###\nThe following describes the IAM actions and the datastore methods that use them:\n\n* dynamodb:GetItem\n  * `Get()`\n  * `GetExpiration()`\n  * `GetSize()`\n  * `Has()`\n* dynamodb:PutItem\n  * `Put()`\n  * `PutWithTTL()`\n* dynamodb:DeleteItem\n  * `Delete()`\n* dynamodb:Scan\n  * `Scan()` (if there is no sort key defined)\n* dynamodb:Query\n  * `Query()` (if there is a sort key defined)\n* dynamodb:DescribeTable\n  * `DiskUsage()`\n* dynamodb:UpdateItem\n  * `SetTTL()`\n* dynamodb:BatchWriteItem\n  * `Batch.Commit()`\n\n## Datastore Features ##\n\n* [x] Batching\n* [x] TTL\n* [x] Disk Usage\n* [ ] Transactions\n* [ ] Checked (not applicable)\n* [ ] Scrubbed (not applicable)\n* [ ] GC (not applicable)\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": []}, {"name": "go-ds-flatfs", "description": "A datastore implementation using sharded directories and flat files to store data", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ds-flatfs\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-flatfs?status.svg)](https://godoc.org/github.com/ipfs/go-ds-flatfs)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-flatfs.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-flatfs)\n[![Coverage Status](https://img.shields.io/codecov/c/github/ipfs/go-ds-flatfs.svg)](https://codecov.io/gh/ipfs/go-ds-flatfs)\n\n\n> A datastore implementation using sharded directories and flat files to store data\n\n`go-ds-flatfs` is used by `go-ipfs` to store raw block contents on disk. It supports several sharding functions (prefix, suffix, next-to-last/*).\n\nIt is _not_ a general-purpose datastore and has several important restrictions.\nSee the restrictions section for details.\n\n## Lead Maintainer\n\n[Jakub Sztandera](https://github.com/kubuxu)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-ds-flatfs` can be used like any Go module:\n\n\n```\nimport \"github.com/ipfs/go-ds-flatfs\"\n```\n\n## Usage\n\nCheck the [GoDoc module documentation](https://godoc.org/github.com/ipfs/go-ds-flatfs) for an overview of this module's\nfunctionality.\n\n### Restrictions\n\nFlatFS keys are severely restricted. Only keys that match `/[0-9A-Z+-_=]\\+` are\nallowed. That is, keys may only contain upper-case alpha-numeric characters,\n'-', '+', '_', and '='. This is because values are written directly to the\nfilesystem without encoding.\n\nImportantly, this means namespaced keys (e.g., /FOO/BAR), are _not_ allowed.\nAttempts to write to such keys will result in an error.\n\n### DiskUsage and Accuracy\n\nThis datastore implements the [`PersistentDatastore`](https://godoc.org/github.com/ipfs/go-datastore#PersistentDatastore) interface. It offers a `DiskUsage()` method which strives to find a balance between accuracy and performance. This implies:\n\n* The total disk usage of a datastore is calculated when opening the datastore\n* The current disk usage is cached frequently in a file in the datastore root (`diskUsage.cache` by default). This file is also\nwritten when the datastore is closed.\n* If this file is not present when the datastore is opened:\n  * The disk usage will be calculated by walking the datastore's directory tree and estimating the size of each folder.\n  * This may be a very slow operation for huge datastores or datastores with slow disks\n  * The operation is time-limited (5 minutes by default).\n  * Upon timeout, the remaining folders will be assumed to have the average of the previously processed ones.\n* After opening, the disk usage is updated in every write/delete operation.\n\nThis means that for certain datastores (huge ones, those with very slow disks or special content), the values reported by\n`DiskUsage()` might be reduced accuracy and the first startup (without a `diskUsage.cache` file present), might be slow.\n\nIf you need increased accuracy or a fast start from the first time, you can manually create or update the\n`diskUsage.cache` file.\n\nThe file `diskUsage.cache` is a JSON file with two fields `diskUsage` and `accuracy`.  For example the JSON file for a\nsmall repo might be:\n\n```\n{\"diskUsage\":6357,\"accuracy\":\"initial-exact\"}\n```\n\n`diskUsage` is the calculated disk usage and `accuracy` is a note on the accuracy of the initial calculation.  If the\ninitial calculation was accurate the file will contain the value `initial-exact`.  If some of the directories have too\nmany entries and the disk usage for that directory was estimated based on the first 2000 entries, the file will contain\n`initial-approximate`.  If the calculation took too long and timed out as indicated above, the file will contain\n`initial-timed-out`.\n\nIf the initial calculation timed out the JSON file might be:\n```\n{\"diskUsage\":7589482442898,\"accuracy\":\"initial-timed-out\"}\n\n```\n\nTo fix this with a more accurate value you could do (in the datastore root):\n\n    $ du -sb .\n    7536515831332    .\n    $ echo -n '{\"diskUsage\":7536515831332,\"accuracy\":\"initial-exact\"}' > diskUsage.cache\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2022-04-07T22:59:02Z", "2022-04-07T22:58:37Z", "2020-08-10T18:14:48Z", "2020-04-17T21:39:23Z", "2020-04-10T22:54:48Z", "2020-04-10T04:40:01Z", "2020-04-01T16:06:27Z", "2020-02-14T17:06:49Z"]}, {"name": "go-ds-leveldb", "description": "An implementation of go-datastore using leveldb", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ds-leveldb\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-leveldb?status.svg)](https://godoc.org/github.com/ipfs/go-ds-leveldb)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-leveldb.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-leveldb)\n\n> A go-datastore implementation using LevelDB\n\n`go-ds-leveldb` implements the [go-datastore](https://github.com/ipfs/go-datastore) interface using a LevelDB backend.\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\nThis module can be installed like a regular go module:\n\n```\ngo get github.com/ipfs/go-ds-leveldb\n```\n\nIt uses [Gx](https://github.com/whyrusleeping/gx) to manage dependencies. You can use `make deps` to rewrite imports to the gx-specified versions.\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ds-leveldb\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ds-leveldb)\n\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2020-03-08T19:51:03Z", "2020-02-11T16:47:27Z", "2019-12-03T21:41:28Z"]}, {"name": "go-ds-measure", "description": "A datastore implementation that keeps metrics on all calls made", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": ["2019-12-03T21:40:40Z"]}, {"name": "go-ds-pebble", "description": "A datastore implementation backed by https://github.com/cockroachdb/pebble (experimental)", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ds-pebble: Pebble-backed datastore\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-pebble?status.svg)](https://godoc.org/github.com/ipfs/go-ds-pebble)\n[![Build Status](https://travis-ci.org/ipfs/go-ds-pebble.svg?branch=master)](https://travis-ci.org/ipfs/go-ds-pebble)\n\n> \ud83d\udc23 Status: experimental\n> A datastore implementation using [cockroachdb/pebble](https://github.com/cockroachdb/pebble) (a native-Go RocksDB equivalent) as a backend.\n\nThis is a simple adapter to plug in [cockroachdb/pebble](https://github.com/cockroachdb/pebble) as a backend\nanywhere that accepts a [go-datastore](https://github.com/ipfs/go-datastore).\n\nAmongst other software, this includes:\n\n* [go-ipfs](https://github.com/ipfs/go-ipfs/)\n* [go-libp2p](https://github.com/libp2p/go-libp2p/)\n* [Lotus](https://github.com/filecoin-project/lotus), the reference Filecoin implementation written in Go.\n\n## Status\n\nThis implementation is experimental. It is currently exercised against the test\nsuite under [go-datastore](https://github.com/ipfs/go-datastore).\n\nThe road to maturity includes:\n \n * Benchmarks against go-ds-badger, go-ds-badger2, and go-ds-leveldb.\n * Exposing metrics.\n * Testing it in IPFS, libp2p, and Lotus, and characterising its behaviour,\n   performance and footprint under real, practical workloads.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-pebble/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nDual-licensed under [MIT](https://github.com/filecoin-project/test-vectors/blob/master/LICENSE-MIT) + [Apache 2.0](https://github.com/filecoin-project/test-vectors/blob/master/LICENSE-APACHE)\n", "release_dates": ["2024-01-10T11:23:44Z", "2024-01-10T11:21:44Z", "2024-01-10T09:25:22Z", "2023-11-23T20:57:58Z", "2023-03-08T15:50:40Z", "2023-03-06T11:49:21Z", "2020-09-17T15:12:01Z"]}, {"name": "go-ds-redis", "description": "A datastore implementation using redis", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": ["2019-12-03T21:41:04Z"]}, {"name": "go-ds-s3", "description": "An s3 datastore implementation", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# S3 Datastore Implementation\n\nThis is an implementation of the datastore interface backed by amazon s3.\n\n**NOTE:** Plugins only work on Linux and MacOS at the moment. You can track the progress of this issue here: https://github.com/golang/go/issues/19282\n\n## Quickstart\n\n  1. Grab a plugin release from the [releases](https://github.com/ipfs/go-ds-s3/releases) section matching your Kubo version and install the plugin file in `~/.ipfs/plugins`.\n  2. Follow the instructions in the plugin's [README.md](go-ds-s3-plugin/README.md)\n\n\n## Building and installing\n\n\nThe plugin can be manually built/installed for different versions of Kubo (starting with 0.23.0) with:\n\n```\ngit checkout go-ds-s3-plugin/v<kubo-version>\nmake plugin\nmake install-plugin\n```\n\n## Updating to a new version\n\n  1. `go get` the Kubo release you want to build for. Make sure any other\n     dependencies are aligned to what Kubo uses.\n  2. `make install` and test.\n\n\nIf you are building against dist-released versions of Kubo, you need to build using the same version of go that was used to build the release ([here](https://github.com/ipfs/distributions/blob/master/.tool-versions)).\n\nIf you are building against your own build of Kubo you must align your plugin to use it.\n\nIf you are updating this repo to produce a new version of the plugin:\n\n  1. Submit a PR so that integration tests run\n  2. Make a new tag `go-ds-s3-plugin/v<kubo_version>` and push it. This will build and release the plugin prebuilt binaries.\n\n## Bundling\n\nAs go plugins can be finicky to correctly compile and install, you may want to consider bundling this plugin and re-building kubo. If you do it this way, you won't need to install the `.so` file in your local repo, i.e following the above Building and Installing section, and you won't need to worry about getting all the versions to match up.\n\n```bash\n# We use go modules for everything.\n> export GO111MODULE=on\n\n# Clone kubo.\n> git clone https://github.com/ipfs/kubo\n> cd kubo\n\n# Pull in the datastore plugin (you can specify a version other than latest if you'd like).\n> go get github.com/ipfs/go-ds-s3@latest\n\n# Add the plugin to the preload list.\n> echo -en \"\\ns3ds github.com/ipfs/go-ds-s3/plugin 0\" >> plugin/loader/preload_list\n\n# ( this first pass will fail ) Try to build kubo with the plugin\n> make build\n\n# Update the deptree\n> go mod tidy\n\n# Now rebuild kubo with the plugin\n> make build\n\n# (Optionally) install kubo\n> make install\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ipfs-example-plugin/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2024-01-31T18:38:06Z", "2024-01-12T10:54:59Z", "2024-01-12T10:47:18Z", "2023-11-27T12:12:19Z", "2023-11-07T12:59:25Z", "2023-10-06T21:31:27Z", "2023-10-06T21:36:55Z", "2021-12-13T21:34:18Z", "2021-02-19T16:47:13Z", "2020-09-23T22:11:52Z", "2020-04-29T23:40:40Z", "2020-01-16T16:37:26Z"]}, {"name": "go-ds-sql", "description": "An implementation of ipfs/go-datastore that can be backed by any SQL database.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# SQL Datastore\n\n[![CircleCI](https://circleci.com/gh/ipfs/go-ds-sql.svg?style=shield)](https://circleci.com/gh/ipfs/go-ds-sql)\n[![Coverage](https://codecov.io/gh/ipfs/go-ds-sql/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-ds-sql)\n[![Standard README](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](http://img.shields.io/badge/godoc-reference-5272B4.svg)](https://godoc.org/github.com/ipfs/go-ds-sql)\n[![golang version](https://img.shields.io/badge/golang-%3E%3D1.14.0-orange.svg)](https://golang.org/)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ipfs/go-ds-sql)](https://goreportcard.com/report/github.com/ipfs/go-ds-sql)\n\nAn implementation of [the datastore interface](https://github.com/ipfs/go-datastore)\nthat can be backed by any sql database.\n\n## Install\n\n```sh\ngo get github.com/ipfs/go-ds-sql\n```\n\n## Usage\n\n### PostgreSQL\n\nEnsure a database is created and a table exists with `key` and `data` columns. For example, in PostgreSQL you can create a table with the following structure (replacing `table_name` with the name of the table the datastore will use - by default this is `blocks`):\n\n```sql\nCREATE TABLE IF NOT EXISTS table_name (key TEXT NOT NULL UNIQUE, data BYTEA)\n```\n\nIt's recommended to create an index on the `key` column that is optimised for prefix scans. For example, in PostgreSQL you can create a `text_pattern_ops` index on the table:\n\n```sql\nCREATE INDEX IF NOT EXISTS table_name_key_text_pattern_ops_idx ON table_name (key text_pattern_ops)\n```\n\nImport and use in your application:\n\n```go\nimport (\n\t\"database/sql\"\n\t\"github.com/ipfs/go-ds-sql\"\n\tpg \"github.com/ipfs/go-ds-sql/postgres\"\n)\n\nmydb, _ := sql.Open(\"yourdb\", \"yourdbparameters\")\n\n// Implement the Queries interface for your SQL impl.\n// ...or use the provided PostgreSQL queries\nqueries := pg.NewQueries(\"blocks\")\n\nds := sqlds.NewDatastore(mydb, queries)\n```\n\n### SQLite\n\nThe [SQLite](https://sqlite.org) wrapper tries to create the table automatically\n\nPrefix scans are optimized by using GLOB\n\nImport and use in your application:\n\n```go\npackage main\n\nimport (\n\tsqliteds \"github.com/ipfs/go-ds-sql/sqlite\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\topts := &sqliteds.Options{\n\t\tDSN: \"db.sqlite\",\n\t}\n\n\tds, err := opts.Create()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer func() {\n\t\tif err := ds.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}\n```\n\nIf no `DSN` is specified, an unique in-memory database will be created\n\n### SQLCipher\n\nThe SQLite wrapper also supports the [SQLCipher](https://www.zetetic.net/sqlcipher/) extension\n\nImport and use in your application:\n\n```go\npackage main\n\nimport (\n\tsqliteds \"github.com/ipfs/go-ds-sql/sqlite\"\n\t_ \"github.com/mutecomm/go-sqlcipher/v4\"\n)\n\nfunc main() {\n\topts := &sqliteds.Options{\n\t\tDSN: \"encdb.sqlite\",\n\t\tKey: ([]byte)(\"32_very_secure_bytes_0123456789a\"),\n\t}\n\n\tds, err := opts.Create()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer func() {\n\t\tif err := ds.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}\n```\n\n## API\n\n[GoDoc Reference](https://godoc.org/github.com/ipfs/go-ds-sql)\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/ipfs/go-ds-sql/issues/new) or submit PRs.\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": ["2022-01-28T12:25:56Z", "2020-05-13T09:07:20Z", "2020-04-15T18:12:07Z"]}, {"name": "go-ds-swift", "description": "Experimental Swift / Openstack Object Storage datastore", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ds-swift\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ds-badger?status.svg)](https://godoc.org/github.com/ipfs/go-ds-swift)\n\n> Datastore implementation using [swift](https://github.com/ncw/swift/) as backend.\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ds-swift\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ds-swift/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n\n", "release_dates": []}, {"name": "go-fetcher", "description": "Handles IPLD prime graph data retrieval accross IPFS.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "go-fetcher\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/fetcher.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\nGo-fetcher is a library to retrieve IPLD prime nodes from IPFS using data exchange protocols\n\n## License\n\nThe go-fetcher project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/ipfs/go-fetcher/blob/master/LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](https://github.com/ipfs/go-fetcher/blob/master/LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2023-05-25T14:17:56Z"]}, {"name": "go-filestore", "description": null, "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "## \u2757 This repository is no longer maintained.\n\nThis repository is no longer maintained and the filestore implementation has been copied over to [`github.com/ipfs/boxo/filestore`](https://github.com/ipfs/boxo/tree/main/filestore).  \n\nIn an effort to avoid noise and crippling in the Boxo repo from the weight of issues of the past, we are closing most issues and PRs in this repo.  Please feel free to open a new issue in Boxo (and reference this issue) if resolving this issue is still critical for unblocking or improving your usecase.\n\nYou can learn more in the [FAQs for the Boxo repo copying/consolidation effort](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n", "release_dates": ["2023-05-25T14:14:28Z", "2022-03-18T23:25:30Z"]}, {"name": "go-fs-lock", "description": "Filesystem based locking", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-fs-lock\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-fs-lock?status.svg)](https://godoc.org/github.com/ipfs/go-fs-lock)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/go-fs-lock/badge.svg?branch=master)](https://coveralls.io/github/ipfs/go-fs-lock?branch=master)\n[![Travis CI](https://travis-ci.org/ipfs/go-fs-lock.svg?branch=master)](https://travis-ci.org/ipfs/go-fs-lock)\n\n> Filesystem based locking\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-fs-lock` is a standard Go module which can be installed with:\n\n```sh\ngo get github.com/ipfs/go-fs-lock\n```\n\nNote that `go-fs-lock` is packaged with Gx, so it is recommended to use Gx to install and use it (see Usage section).\n\n## Usage\n\n### Using Gx and Gx-go\n\nThis module is packaged with [Gx](https://github.com/whyrusleeping/gx). In order to use it in your own project it is recommended that you:\n\n```sh\ngo get -u github.com/whyrusleeping/gx\ngo get -u github.com/whyrusleeping/gx-go\ncd <your-project-repository>\ngx init\ngx import github.com/ipfs/go-fs-lock\ngx install --global\ngx-go --rewrite\n```\n\nPlease check [Gx](https://github.com/whyrusleeping/gx) and [Gx-go](https://github.com/whyrusleeping/gx-go) documentation for more information.\n\n### Running tests\n\nBefore running tests, please run:\n\n```sh\nmake deps\n```\n\nThis will make sure that dependencies are rewritten to known working versions.\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2020-08-10T18:20:53Z", "2020-05-26T20:29:02Z", "2020-01-16T23:38:02Z"]}, {"name": "go-graphsync", "description": "Initial Implementation Of GraphSync Wire Protocol", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-graphsync\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-graphsync/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-graphsync/branch/master)\n[![Build Status](https://circleci.com/gh/ipfs/go-bitswap.svg?style=svg)](https://circleci.com/gh/ipfs/go-graphsync)\n\n> An implementation of the [graphsync protocol](https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md) in go!\n\n## Table of Contents\n\n- [Background](#background)\n- [Install](#install)\n- [Usage](#usage)\n- [Architecture](#architecture)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Background\n\n[GraphSync](https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md) is a protocol for synchronizing IPLD graphs among peers. It allows a host to make a single request to a remote peer for all of the results of traversing an [IPLD selector](https://ipld.io/specs/selectors/) on the remote peer's local IPLD graph. \n\n`go-graphsync` provides an implementation of the Graphsync protocol in go.\n\n### Go-IPLD-Prime\n\n`go-graphsync` relies on `go-ipld-prime` to traverse IPLD Selectors in an IPLD graph. `go-ipld-prime` implements the [IPLD specification](https://github.com/ipld/specs) in go and is an alternative to older implementations such as `go-ipld-format` and `go-ipld-cbor`. In order to use `go-graphsync`, some understanding and use of `go-ipld-prime` concepts is necessary. \n\nIf your existing library (i.e. `go-ipfs` or `go-filecoin`) uses these other older libraries, you can largely use go-graphsync without switching to `go-ipld-prime` across your codebase, but it will require some translations\n\n## Install\n\n`go-graphsync` requires Go >= 1.13 and can be installed using Go modules\n\n## Usage\n\n### Initializing a GraphSync Exchange\n\n```golang\nimport (\n  graphsync \"github.com/ipfs/go-graphsync/impl\"\n  gsnet \"github.com/ipfs/go-graphsync/network\"\n  ipld \"github.com/ipld/go-ipld-prime\"\n)\n\nvar ctx context.Context\nvar host libp2p.Host\nvar lsys ipld.LinkSystem\n\nnetwork := gsnet.NewFromLibp2pHost(host)\nexchange := graphsync.New(ctx, network, lsys)\n```\n\nParameter Notes:\n\n1. `context` is just the parent context for all of GraphSync\n2. `network` is a network abstraction provided to Graphsync on top\nof libp2p. This allows graphsync to be tested without the actual network\n3. `lsys` is an go-ipld-prime LinkSystem, which provides mechanisms loading and constructing go-ipld-prime nodes from a link, and saving ipld prime nodes to serialized data\n\n### Using GraphSync With An IPFS BlockStore\n\nGraphSync provides a convenience function in the `storeutil` package for\nintegrating with BlockStore's from IPFS.\n\n```golang\nimport (\n  graphsync \"github.com/ipfs/go-graphsync/impl\"\n  gsnet \"github.com/ipfs/go-graphsync/network\"\n  storeutil \"github.com/ipfs/go-graphsync/storeutil\"\n  ipld \"github.com/ipld/go-ipld-prime\"\n  blockstore \"github.com/ipfs/go-ipfs-blockstore\"\n)\n\nvar ctx context.Context\nvar host libp2p.Host\nvar bs blockstore.Blockstore\n\nnetwork := gsnet.NewFromLibp2pHost(host)\nlsys := storeutil.LinkSystemForBlockstore(bs)\n\nexchange := graphsync.New(ctx, network, lsys)\n```\n\n### Calling Graphsync\n\n```golang\nvar exchange graphsync.GraphSync\nvar ctx context.Context\nvar p peer.ID\nvar selector ipld.Node\nvar rootLink ipld.Link\n\nvar responseProgress <-chan graphsync.ResponseProgress\nvar errors <-chan error\n\nresponseProgress, errors = exchange.Request(ctx context.Context, p peer.ID, root ipld.Link, selector ipld.Node)\n```\n\nParamater Notes:\n1. `ctx` is the context for this request. To cancel an in progress request, cancel the context.\n2. `p` is the peer you will send this request to\n3. `link` is an IPLD Link, i.e. a CID (cidLink.Link{Cid})\n4. `selector` is an IPLD selector node. Recommend using selector builders from go-ipld-prime to construct these\n\n### Response Type\n\n```golang\n\ntype ResponseProgress struct {\n  Node      ipld.Node // a node which matched the graphsync query\n  Path      ipld.Path // the path of that node relative to the traversal start\n\tLastBlock struct {  // LastBlock stores the Path and Link of the last block edge we had to load. \n\t\tipld.Path\n\t\tipld.Link\n\t}\n}\n\n```\n\nThe above provides both immediate and relevant metadata for matching nodes in a traversal, and is very similar to the information provided by a local IPLD selector traversal in `go-ipld-prime`\n\n## Contribute\n\nPRs are welcome!\n\nBefore doing anything heavy, checkout the [Graphsync Architecture](docs/architecture.md)\n\nSee our [Contributing Guidelines](https://github.com/ipfs/go-graphsync/blob/master/CONTRIBUTING.md) for more info.\n\n## License\n\nThis library is dual-licensed under Apache 2.0 and MIT terms.\n\nCopyright 2019. Protocol Labs, Inc.\n", "release_dates": ["2023-11-03T07:52:14Z", "2023-09-21T07:43:10Z", "2023-09-21T07:37:22Z", "2023-09-19T10:32:20Z", "2023-09-19T10:22:03Z", "2023-08-29T06:39:03Z", "2023-08-02T00:47:51Z", "2023-04-22T17:58:28Z", "2023-04-13T17:49:26Z", "2023-03-29T20:06:55Z", "2023-03-21T08:55:45Z", "2023-03-08T15:45:09Z", "2023-03-01T03:33:45Z", "2023-02-09T04:32:54Z", "2021-08-23T05:09:14Z", "2021-08-06T15:18:21Z", "2021-08-04T17:13:35Z", "2021-07-22T22:45:06Z", "2020-03-12T23:24:38Z"]}, {"name": "go-hamt-ipld", "description": "An implementation of a HAMT using ipld", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# DEPRECATION NOTICE\n\nThis package has moved to the Filecoin org at https://github.com/filecoin-project/go-hamt-ipld. The package here is now just a shim.\n\ngo-hamt-ipld\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://libp2p.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://travis-ci.org/ipfs/go-hamt-ipld.svg?branch=master)](https://travis-ci.org/ipfs/go-hamt-ipld)\n\n**This package is a reference implementation of the IPLD HAMT used in the\nFilecoin blockchain.** It includes some optional flexibility such that it may\nbe used for other purposes outside of Filecoin.\n\nHAMT is a [\"hash array mapped trie\"](https://en.wikipedia.org/wiki/Hash_array_mapped_trie).\nThis implementation extends the standard form by including buckets for the\nkey/value pairs at storage leaves and [CHAMP mutation semantics](https://michael.steindorfer.name/publications/oopsla15.pdf).\nThe CHAMP invariant and mutation rules provide us with the ability to maintain\ncanonical forms given any set of keys and their values, regardless of insertion\norder and intermediate data insertion and deletion. Therefore, for any given\nset of keys and their values, a HAMT using the same parameters and CHAMP\nsemantics, the root node should always produce the same content identifier\n(CID).\n\n**See https://godoc.org/github.com/ipfs/go-hamt-ipld for more information and\nAPI details.**\n\n## License\n\nMIT \u00a9 Whyrusleeping\n", "release_dates": []}, {"name": "go-ipfs-api", "description": "The go interface to ipfs's HTTP API", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "## \u26a0\ufe0f This package is no longer being maintained \u26a0\ufe0f\n\nPlease use [`kubo/client/rpc`](https://github.com/ipfs/kubo/tree/master/client/rpc) instead. In rare case the new library does not offer a feature this one does, fill issue in Kubo, or better, submit a PR that adds it to [`kubo/client/rpc`](https://github.com/ipfs/kubo/tree/master/client/rpc).\n\nFor more details about the decision, see https://github.com/ipfs/kubo/issues/9124.\n\n# go-ipfs-api\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![](https://img.shields.io/badge/matrix-%23ipfs-blue.svg?style=flat-square)](https://app.element.io/#/room/#ipfs:matrix.org)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-api?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-api)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-api.svg)](https://travis-ci.org/ipfs/go-ipfs-api) \n\n![](https://camo.githubusercontent.com/651f7045071c78042fec7f5b9f015e12589af6d5/68747470733a2f2f697066732e696f2f697066732f516d514a363850464d4464417367435a76413155567a7a6e3138617356636637485676434467706a695343417365)\n\n> The go interface to ipfs's HTTP API\n\n## Install\n\n```sh\ngo install github.com/ipfs/go-ipfs-api@latest\n```\n\nThis will download the source into `$GOPATH/src/github.com/ipfs/go-ipfs-api`.\n\n## Usage\n\nSee [the godocs](https://godoc.org/github.com/ipfs/go-ipfs-api) for details on available methods. This should match the specs at [ipfs/specs (Core API)](https://github.com/ipfs/specs/blob/master/API_CORE.md); however, there are still some methods which are not accounted for. If you would like to add any of them, see the contribute section below. See also the [HTTP API](https://docs.ipfs.io/reference/http/api/).\n\n### Example\n\nAdd a file with the contents \"hello world!\":\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n    \t\"os\"\n\n    \tshell \"github.com/ipfs/go-ipfs-api\"\n)\n\nfunc main() {\n\t// Where your local node is running on localhost:5001\n\tsh := shell.NewShell(\"localhost:5001\")\n\tcid, err := sh.Add(strings.NewReader(\"hello world!\"))\n\tif err != nil {\n        fmt.Fprintf(os.Stderr, \"error: %s\", err)\n        os.Exit(1)\n\t}\n    fmt.Printf(\"added %s\", cid)\n}\n```\n\nFor a more complete example, please see: https://github.com/ipfs/go-ipfs-api/blob/master/tests/main.go\n\n## Contribute\n\nContributions are welcome! Please check out the [issues](https://github.com/ipfs/go-ipfs-api/issues).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2023-08-22T14:14:48Z", "2023-07-31T13:18:25Z", "2023-04-06T11:41:06Z", "2023-03-28T10:05:54Z", "2023-03-07T11:11:46Z", "2021-12-02T21:56:24Z", "2020-08-26T20:56:59Z", "2020-06-22T19:27:27Z"]}, {"name": "go-ipfs-archived", "description": "Archived branches of go-ipfs", "language": null, "license": null, "readme": "# go-ipfs-archive\n\nIn order to keep the [ipfs/go-ipfs](https://github.com/ipfs/go-ipfs) project relatively easy to navigate, manage, and quick to clone, we periodically remove branches that nobody is actively working on. We think keeping that work available is important, though, so we archive those branches here.\n\nBranches archived here get renamed to: `<branchname>/<archival date>`. For example, `feat/fix-offline-mount` \u2192 `feat/fix-offline-mount/2017-08-10` if it was archived on August 10, 2017.\n\nIf you need to use any of this archived work, add this repo as a remote to your local clone of `go-ipfs` and and then check out the branch you need:\n\n```sh\n# Add this repo as a remote\n$ git remote add archived git@github.com:ipfs/go-ipfs-archived.git\n# Check out the branch you need, for example:\n$ git checkout feat/fix-offline-mount/2017-08-10\n```\n\nIf you\u2019re curious about or want to propose changes to the archival process, take a look at the [`bin/archive-branches.sh` script](https://github.com/ipfs/go-ipfs/blob/master/bin/archive-branches.sh) in `go-ipfs`.\n", "release_dates": []}, {"name": "go-ipfs-blockstore", "description": "[ARCHIVED] This module provides a thin wrapper over a datastore and provides caching strategies.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-blockstore\n\n> go-ipfs-blockstore implements a thin wrapper over a datastore, giving a clean interface for Getting and Putting block objects.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-blockstore?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-blockstore)\n[![Build Status](https://travis-ci.com/ipfs/go-ipfs-blockstore.svg?branch=master)](https://travis-ci.com/ipfs/go-ipfs-blockstore)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/blockstore.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-blockstore` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-blockstore\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-blockstore\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-blockstore)\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:16:57Z", "2023-03-08T10:48:53Z", "2022-03-18T23:21:38Z", "2021-12-09T17:05:27Z", "2021-12-09T17:04:59Z", "2021-06-18T18:14:44Z", "2021-06-18T18:11:59Z", "2020-11-16T15:18:09Z", "2020-11-10T16:31:34Z"]}, {"name": "go-ipfs-blocksutil", "description": "Utility functions for working with Blocks", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-blocksutil\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-blocksutil?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-blocksutil)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-blocksutil.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-blocksutil)\n\n> go-ipfs-blocksutil provides provides utility functions for working with Blocks.\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-ipfs-blocksutil` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-blocksutil\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-blocksutil\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-blocksutil)\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": []}, {"name": "go-ipfs-chunker", "description": "go-ipfs-chunkers provides Splitter implementations for data before being ingested to IPFS", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-chunker\n\n> go-ipfs-chunker implements data Splitters for go-ipfs.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-chunker?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-chunker)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-chunker.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-chunker)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/chunker.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\n## Summary\n\n`go-ipfs-chunker` provides the `Splitter` interface. IPFS splitters read data from a reader an create \"chunks\". These chunks are used to build the ipfs DAGs (Merkle Tree) and are the base unit to obtain the sums that ipfs uses to address content.\n\nThe package provides a `SizeSplitter` which creates chunks of equal size and it is used by default in most cases, and a `rabin` fingerprint chunker. This chunker will attempt to split data in a way that the resulting blocks are the same when the data has repetitive patterns, thus optimizing the resulting DAGs.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-chunker` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-chunker\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-chunker\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-chunker)\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:14:00Z", "2020-03-26T20:44:11Z", "2020-02-07T22:30:19Z"]}, {"name": "go-ipfs-cmdkit", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-cmdkit\n\n**[DEPRECATED]**\n\nThese types have been merged into [go-ipfs-cmds](https://github.com/ipfs/go-ipfs-cmds) and are now simply re-exports.\n\n## License\n\nMIT\n\n", "release_dates": []}, {"name": "go-ipfs-cmds", "description": "IPFS commands package", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-cmds\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> ipfs commands library\n\ncmds offers tools for describing and calling commands both locally and remotely, as well as encoding, formatting and transferring the result. It is the successor of go-ipfs/commands and contains a legacy layer such that it can handle previously defined commands.\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ipfs-cmds\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ipfs-cmds/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n\n", "release_dates": ["2023-08-22T11:39:16Z", "2023-03-27T22:30:14Z", "2022-03-22T19:16:10Z", "2021-01-27T17:05:01Z", "2020-12-08T18:43:28Z", "2020-09-09T17:18:19Z", "2020-08-04T21:01:53Z", "2020-04-29T20:50:24Z", "2020-04-04T00:56:32Z", "2020-03-20T16:21:22Z", "2020-03-17T00:24:11Z"]}, {"name": "go-ipfs-config", "description": "[ARCHIVED] config is now part of go-ipfs repo", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-ipfs-config\n==================\n\n\nThis repository is archived.\n\ngo-ipfs-config got [merged](https://github.com/ipfs/go-ipfs/pull/8756) into go-ipfs repo and can now be found at https://github.com/ipfs/go-ipfs/tree/master/config\n", "release_dates": ["2022-01-25T21:28:44Z", "2021-11-23T18:27:32Z", "2021-11-16T20:02:59Z", "2021-08-18T15:54:42Z", "2021-08-16T14:44:43Z", "2021-05-14T06:02:17Z", "2021-01-28T23:08:57Z", "2020-12-08T19:45:03Z", "2020-10-12T05:59:10Z", "2020-07-14T17:54:09Z", "2020-06-16T22:14:46Z", "2020-06-03T19:45:45Z", "2020-05-26T06:13:02Z", "2020-05-26T02:15:42Z", "2020-05-22T23:40:15Z", "2020-05-22T03:06:07Z", "2020-04-15T03:30:32Z", "2020-04-15T03:27:26Z", "2020-04-09T20:51:04Z", "2020-03-30T01:55:13Z"]}, {"name": "go-ipfs-delay", "description": "A module to add (threadsafe) configurable delays to other objects", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-delay\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-delay?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-delay)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-delay.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-delay)\n\n> go-ipfs-delay makes it easy to add (threadsafe) configurable delays to other objects.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-ipfs-delay` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-delay\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-delay\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-delay)\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": []}, {"name": "go-ipfs-ds-help", "description": "Utilities for parsing and creating datastore keys used by go-ipfs", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-ds-help\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-ds-help?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-ds-help)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-ds-help.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-ds-help)\n\n> go-ipfs-ds-help provides utilities for parsing and creating datastore keys used by go-ipfs.\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/datastore/dshelp.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-ds-help` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-ds-help\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-ds-help\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-ds-help)\n\nThis module uses [Gx](https://github.com/whyrusleeping/gx) to manage dependencies. You can use `make all` to build it with the `gx` dependencies.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:09:07Z"]}, {"name": "go-ipfs-example-plugin", "description": "Demo plugin for Kubo IPFS daemon", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-example-plugin\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-example-plugin?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-example-plugin)\n\n> example plugin for Kubo\n\nThis repository contains a set of example Kubo plugins, demonstrating how to integrate external plugins into Kubo.\n\nPackages:\n\n* delaystore: an example datastore plugin that wraps an inner datastore in a \"delayed\" datastore.\n* greeter: an example daemon plugin that prints \"Hello!\" on start and \"Goodbye!\" on exit.\n\n**NOTE 1:** Plugins only work on Linux and MacOS at the moment. You can track the progress of this issue here: https://github.com/golang/go/issues/19282. MacOS users will need to compile Kubo themselves too, as official MacOS releases of Kubo are cross-compiled and do not support loading plugins. Also, only amd64 architecture is supported.\n\n**NOTE 2:** This plugin exists as an *example* and a starting point for new plugins. It isn't particularly useful by itself.\n\n## Building and Installing\n\nGo plugin system is very whiny. The following constellation need to align:\n\n* You need to be using the same Go version to compile Kubo and the plugin. Upstream releases of Kubo use [whatever it says here](https://github.com/ipfs/distributions/blob/master/.tool-versions#L2) (v0.19.10) at the time of writing.\n* The dependencies in go.mod need to be exactly the same as in the Kubo version that we want the plugin to work with. In this example, the following need to be the same as in [Kubo's go.mod](https://github.com/ipfs/kubo/blob/master/go.mod):\n  * github.com/ipfs/boxo\n  * github.com/ipfs/go-datastore\n  * github.com/ipfs/go-ipfs-delay\n  * github.com/ipfs/kubo\n* There are additional consideration with -trimpath etc (see below).\n* Failure to do so will cause errors when loading the plugin.\n\n\n### Using official Kubo releases\n\nAs provided the plugin is designed to work with a default version (whatever is used in the [go.mod](go.mod) file). You can use:\n\n```\nmake build\nmake install\n```\n\nto build and install this version.\n\nIf you want to upgrade or use a different official release of Kubo:\n\n  1. `go get github.com/ipfs/kubo@<version>`\n  2. Verify `boxo`, `datastore` and other dependencies are aligned with the version of Kubo. Otherwise set the right versions manually.\n  3. `go mod tidy`.\n\nIn some cases, fully removing the second, \"indirect requires\" block in `go.mod` and running `go mod tidy` will fix wrong indirect requires.\n\n### Using local Kubo builds\n\nThis is more tricky.\n\n  1. Ensure full dependency alignment\n  2. If you are building Kubo somewhere else (on a different computer), ensure it is built using `-trimpath` when doing `go build` (i.e. `go build -trimpath`)\n  3. You may need to build the plugin using `-trimpath` or not, depending on how you are building the Kubo binary and where. i.e. you can use a `replace` directive in go.mod to point to a local version of Kubo and then it is possibly fine to build the plugin and Kubo without `trimpath` altogether.\n\nIf Go versions and dependencies are aligned, usually errors have to do with `-trimpath` stuff. You can also try `-asmflags=all=-trimpath=\"$(GOPATH)\" -gcflags=all=-trimpath=\"$(GOPATH)\"` and setting $(GOPATH) to what `go env` says etc. and try to get both the plugin and Kubo binaries to reference modules with exactly the same paths.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ipfs-example-plugin/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": []}, {"name": "go-ipfs-exchange-interface", "description": "The IPFS Exchange interface", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-exchange-interface\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-exchange-interface?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-exchange-interface)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-exchange-interface.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-exchange-interface)\n\n> go-ipfs-exchange-interface defines the IPFS exchange interface\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/exchange.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-ipfs-exchange-interface` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-exchange-interface\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-exchange-interface\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-exchange-interface)\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-23T08:43:45Z"]}, {"name": "go-ipfs-exchange-offline", "description": "An offline IPFS exchange implementation", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-exchange-offline\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-exchange-offline?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-exchange-offline)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-exchange-offline.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-exchange-offline)\n\n> go-ipfs-exchange-offline implements the go-ipfs-exchange-interface\n\nThis is an offline exchange implementation which will not perform any request.\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/exchange/offline.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-exchange-offline` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-exchange-offline\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-exchange-offline\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-exchange-offline)\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:09:34Z", "2022-08-12T03:17:40Z", "2022-03-18T23:24:54Z"]}, {"name": "go-ipfs-files", "description": "An old files library, please migrate to `github.com/ipfs/go-libipfs/files` instead.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "> ## \u26a0\ufe0f This repository has been moved to https://github.com/ipfs/go-libipfs/tree/main/files.\n\n# go-ipfs-files\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> File interfaces and utils used in IPFS\n\n## Lead Maintainer\n\n[Steven Allen](https://github.com/Stebalien)\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ipfs-files\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ipfs-files/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n\n", "release_dates": ["2023-02-01T09:39:14Z", "2022-11-09T16:33:28Z", "2022-11-09T15:36:54Z", "2022-11-09T15:36:39Z", "2021-10-05T21:16:48Z", "2020-03-30T01:31:35Z"]}, {"name": "go-ipfs-gateway", "description": "Go implementation of the HTTP-to-IPFS gateway -- currently lives in go-ipfs", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-gateway\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> Go implementation of an IPFS-to-HTTP gateway\n\n## Install\n\nTODO\n\n## Usage\n\nTODO\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-ipfs-gateway/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": []}, {"name": "go-ipfs-http-client", "description": "[archived] Legacy Kubo RPC client, use kubo/client/rpc instead.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-http-api\n\n# \u26a0\ufe0f This package is no longer being maintained here. \u26a0\ufe0f\n\nIt has been moved into kubo's repo at [`github.com/ipfs/kubo/client/rpc`](https://pkg.go.dev/github.com/ipfs/kubo/client/rpc).\n\nThis allows that any updates or change to kubo's coreapi is immediately reflected on the client too.\n\n## License\n\nMIT\n", "release_dates": ["2023-06-12T18:40:35Z", "2023-05-22T13:36:40Z", "2023-02-10T02:37:25Z", "2022-06-23T20:46:30Z", "2022-04-21T20:19:48Z", "2022-04-21T20:19:31Z", "2021-12-02T21:57:00Z", "2021-09-21T11:08:04Z", "2021-09-22T06:40:20Z", "2020-08-26T22:30:39Z"]}, {"name": "go-ipfs-keystore", "description": "go-ipfs-keystore provides an interface and implementation of key storage for IPFS", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ipfs-keystore\n\n> go-ipfs-keystore implements keystores for ipfs\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![Travis CI](https://travis-ci.com/ipfs/go-ipfs-keystore.svg?branch=master)](https://travis-ci.com/ipfs/go-ipfs-keystore)\n[![Go Reference](https://pkg.go.dev/badge/github.com/ipfs/go-ipfs-keystore.svg)](https://pkg.go.dev/github.com/ipfs/go-ipfs-keystore)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/keystore.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\ngo-ipfs-keystore provides the Keystore interface for key management.  Keystores support adding, retrieving, and deleting keys as well as listing all keys and checking for membership.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-keystore` works like a regular Go module:\n```\n> go get github.com/ipfs/go-ipfs-keystore\n```\n\n## Usage\n```\nimport \"github.com/ipfs/go-ipfs-keystore\"\n```\n\n## License\n\nThis project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2023-05-25T14:07:12Z"]}, {"name": "go-ipfs-pinner", "description": "go-ipfs-pinner provides an interface and implementation of a Pinner for IPFS ", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ipfs-pinner\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-ipfs-pinner/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-ipfs-pinner)\n[![Travis CI](https://travis-ci.org/ipfs/go-ipfs-pinner.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-pinner)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/pinning/pinner.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Background\n\nThe pinner system is responsible for keeping track of which objects a user wants to keep stored locally\n\n## Install\n\nVia `go get`:\n\n```sh\n$ go get github.com/ipfs/go-ipfs-pinner\n```\n\n> Requires Go 1.13\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ipfs-pinner\n\n## License\n\nThis library is dual-licensed under Apache 2.0 and MIT terms.\n\nCopyright 2019. Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:11:55Z", "2023-02-22T14:53:56Z", "2021-11-11T18:44:08Z", "2021-07-29T15:42:46Z", "2021-01-27T19:43:46Z", "2020-11-30T22:40:45Z", "2020-02-17T17:40:15Z", "2019-12-16T18:12:58Z"]}, {"name": "go-ipfs-posinfo", "description": "Posinfo wraps offset information for ipfs filestore nodes", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-posinfo\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-posinfo?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-posinfo)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-posinfo.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-posinfo)\n\n>  Posinfo wraps offset information for ipfs filestore nodes\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/filestore/posinfo.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n```\ngo get github.com/ipfs/go-ipfs-posinfo\n```\n\n## Usage\n\nSee the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-posinfo)\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:16:11Z"]}, {"name": "go-ipfs-pq", "description": "A priority queue used by go-ipfs", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-pq\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-pq?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-pq)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-pq.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-pq)\n\n> go-ipfs-pq implements a priority queue.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n`go-ipfs-pq` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-ipfs-pq\n```\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-ipfs-pq\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-ipfs-pq)\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-02-17T16:56:01Z"]}, {"name": "go-ipfs-provider", "description": null, "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-ipfs-provider\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-ipfs-provider/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-ipfs-provider)\n[![Travis CI](https://travis-ci.org/ipfs/go-ipfs-provider.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-provider)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/provider.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Background\n\nThe provider system is responsible for announcing and reannouncing to the ipfs network that a node has content.\n\n## Install\n\nVia `go get`:\n\n```sh\n$ go get github.com/ipfs/go-ipfs-provider\n```\n\n> Requires Go 1.12\n\n## Usage\n\nHere's how you create, start, interact with, and stop the provider system:\n\n```golang\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/ipfs/go-ipfs-provider\"\n\t\"github.com/ipfs/go-ipfs-provider/queue\"\n\t\"github.com/ipfs/go-ipfs-provider/simple\"\n)\n\nrsys := (your routing system here)\ndstore := (your datastore here)\ncid := (your cid to provide here)\n\nq := queue.NewQueue(context.Background(), \"example\", dstore)\n\nreprov := simple.NewReprovider(context.Background(), time.Hour * 12, rsys, simple.NewBlockstoreProvider(dstore))\nprov := simple.NewProvider(context.Background(), q, rsys)\nsys := provider.NewSystem(prov, reprov)\n\nsys.Run()\n\nsys.Provide(cid)\n\nsys.Close()\n```\n\n## License\n\nThis library is dual-licensed under Apache 2.0 and MIT terms.\n\nCopyright 2019. Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:15:23Z", "2022-12-09T12:03:58Z", "2021-11-18T18:11:18Z", "2021-11-11T18:47:16Z", "2021-08-17T11:18:11Z", "2021-08-12T16:05:55Z", "2021-05-27T17:40:40Z", "2021-05-14T08:07:53Z", "2020-04-28T00:56:20Z", "2020-04-06T19:59:47Z", "2019-11-18T17:49:53Z"]}, {"name": "go-ipfs-redirects-file", "description": "IPFS Web Gateway _redirects file format parser", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS `_redirects` File Parser\n\nThis is a parser for the IPFS Web Gateway's `_redirects` file format.\n\n## Specification\n\nFollow specification work at https://github.com/ipfs/specs/pull/290\n\n## Format\nCurrently only supports `from`, `to` and `status`.\n\n```\nfrom to [status]\n```\n\n## Example\n\n```sh\n# Implicit 301 redirects\n/home              /\n/blog/my-post.php  /blog/my-post\n/news              /blog\n/google            https://www.google.com\n\n# Redirect with a 301\n/home         /              301\n\n# Redirect with a 302\n/my-redirect  /              302\n\n# Redirect with wildcard (splat placeholder)\n/splat/* /redirected-splat/:splat 301\n\n# Redirect with multiple named placeholder\n/posts/:year/:month/:day/:title  /articles/:year/:month/:day/:title  301\n\n# Show a custom 404 for everything under this path\n/ecommerce/*  /store-closed.html  404\n\n# Single page app rewrite (SPA, PWA)\n/*    /index.html   200\n```\n\n## Notes for contributors\n\n- `make all` builds and runs tests\n- `FUZZTIME=1m make fuzz` runs fuzzing for specified amount of time\n\n---\n\n## Credit\nThis project was forked from [tj/go-redirects](https://github.com/tj/go-redirects).  Thank you TJ for the initial work. \ud83d\ude4f\n", "release_dates": ["2022-09-23T16:00:44Z", "2022-09-22T14:58:46Z"]}, {"name": "go-ipfs-regression", "description": "This repo provides definitions of regression statistics produced by IPFS testground experiments", "language": "Go", "license": null, "readme": null, "release_dates": ["2021-09-29T19:04:30Z"]}, {"name": "go-ipfs-routing", "description": "go-ipfs-routing provides go-libp2p-routing implementations used in go-ipfs.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-routing\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Build Status](https://travis-ci.org/ipfs/go-ipfs-routing.svg?branch=master)](https://travis-ci.org/ipfs/go-ipfs-routing)\n\n> go-ipfs-routing provides go-libp2p-routing implementations used in go-ipfs.\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/routing.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-ipfs-routing` works like a set of regular Go packages:\n\n```\n> go get github.com/ipfs/go-ipfs-routing/...\n```\n\nThis module uses [Gx](https://github.com/whyrusleeping/gx) to manage\ndependencies. You can use `make all` to build it with the `gx` dependencies.\n\n## Usage\n\nThis repo contains 3 different packages.\n\n### Mock\n\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-routing/mock?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-routing/mock)\n\n```\nimport \"github.com/ipfs/go-ipfs-routing/mock\"\n```\n\nMock is a fake router useful for tests. It provides a mock client that\nimplements the `IpfsRouting` interface and a mock server from which the client\nretrieves routing records.\n\n\n### Offline\n\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-routing/offline?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-routing/offline)\n\n```\nimport \"github.com/ipfs/go-ipfs-routing/offline\"\n```\n\nOffline is an offline router that can put and get records to and from a local\n`Datastore` but can't retrieve them from the network.\n\n### None\n\n[![GoDoc](https://godoc.org/github.com/ipfs/go-ipfs-routing/none?status.svg)](https://godoc.org/github.com/ipfs/go-ipfs-routing/none)\n\n```\nimport \"github.com/ipfs/go-ipfs-routing/none\"\n```\n\nNone is a router no-op router that doesn't do anything. Puts always succeed and\nlookups always fail.\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:04:37Z"]}, {"name": "go-ipfs-util", "description": "Common utilities used by go-ipfs and other related go packages", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipfs-util\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![](https://img.shields.io/badge/discussion_repo-go_to_issues-brightgreen.svg?style=flat-square)](https://github.com/ipfs/NAME/issues)\n\n> Common utilities used by go-ipfs and other related go packages\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/util.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Install\n\nThis is a Go module which can be installed with `go get github.com/ipfs/go-ipfs-util`. `go-ipfs-util` is however packaged with Gx, so it is recommended to use Gx to install it (see Usage section).\n\n## Usage\n\nThis module is packaged with [Gx](https://github.com/whyrusleeping/gx).\nIn order to use it in your own project do:\n\n```\ngo get -u github.com/whyrusleeping/gx\ngo get -u github.com/whyrusleeping/gx-go\ncd <your-project-repository>\ngx init\ngx import github.com/ipfs/go-ipfs-util\ngx install --global\ngx-go --rewrite\n```\n\nPlease check [Gx](https://github.com/whyrusleeping/gx) and [Gx-go](https://github.com/whyrusleeping/gx-go) documentation for more information.\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n", "release_dates": ["2023-05-25T14:06:59Z", "2020-06-06T03:47:20Z"]}, {"name": "go-ipld-cbor", "description": "A cbor implementation of the go-ipld-format", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-ipld-cbor\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://libp2p.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/libp2p/js-libp2p-floodsub/badge.svg?branch=master)](https://coveralls.io/github/libp2p/js-libp2p-floodsub?branch=master)\n[![Travis CI](https://travis-ci.org/libp2p/js-libp2p-floodsub.svg?branch=master)](https://travis-ci.org/libp2p/js-libp2p-floodsub)\n\n> An implementation of a cbor encoded merkledag object.\n\n## Status\n\nThis library **has alternatives available**: For new projects, prefer using the [cbor codec](https://github.com/ipld/go-ipld-prime/tree/master/codec/dagcbor) included with [go-ipld-prime](https://github.com/ipld/go-ipld-prime).\n\nThis library is in **standby** mode.  It works, but we recommend migrating to alternatives if possible.  New features are unlikely to be added here.\n\n## Lead Maintainer\n\n[Eric Myhre](https://github.com/warpfork)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nmake install\n```\n\n## Usage\n\nNote: This package isn't the easiest to use.\n```go\n// Make an object\nobj := map[interface{}]interface{}{\n\t\"foo\": \"bar\",\n\t\"baz\": &Link{\n\t\tTarget: myCid,\n\t},\n}\n\n// Parse it into an ipldcbor node\nnd, err := WrapMap(obj)\n\nfmt.Println(nd.Links())\n\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": ["2023-08-28T03:32:20Z", "2020-11-10T16:21:26Z", "2020-01-31T00:09:27Z"]}, {"name": "go-ipld-eth", "description": "Plugin of the Go IPFS Client for Ethereum Blockchain IPLD objects", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n# Deprecated\nNote that this repo is archived and been eclipsed by https://github.com/vulcanize/go-codec-dageth\n\n\ngo-ipld-eth\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n\n> go-ipld-eth is the set of Ethereum elements as a part of the IPLD merkle-forest\n\n## Table of Contents\n\n- [Install](#install)\n- [Maintainers](#maintainers)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Maintainers\n\nCaptain: [@hermanjunge](https://github.com/hermanjunge)\n\n## Install\n\nPlease check the guide at [this document](plugin/README.md) in the `/plugin` directory.\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": []}, {"name": "go-ipld-eth-import", "description": ":globe_with_meridians: Bring Ethereum to IPFS :globe_with_meridians:", "language": "Go", "license": null, "readme": "go-ipld-eth-import\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n\n> go-ipld-eth-import is the set of tools that will help us to bring the Ethereum magic to the IPLD merkle forest.\n\n## Project Status\n\nPlease note that this project is **not actively maintained**.\n\nFor the latest IPLD for Ethereum see:\n\n* Specification: https://ipld.io/specs/codecs/dag-eth/\n* Codec: https://github.com/vulcanize/go-codec-dageth\n\nhttps://github.com/vulcanize/eth-block-extractor/ is a similar project to this but is also not actively maintained, these two projects may be merged into one, or one of them retired when / if work is resumed.\n\nIf you are interested in contributing to further development of this project, please open an issue for discussion, we would love to hear from you!\n\n## Table of Contents\n\n- [Install](#install)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\nPlease check the guide at [this document](USAGE.md).\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Herman Junge\n", "release_dates": []}, {"name": "go-ipld-format", "description": "IPLD Node and Resolver interfaces in Go", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-ipld-format\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-ipld-format/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-ipld-format/branch/master)\n[![Travis CI](https://travis-ci.org/ipfs/go-ipld-format.svg?branch=master)](https://travis-ci.org/ipfs/go-ipld-format)\n\n> go-ipld-format is a set of interfaces that a type needs to implement in order to be a part of the ipld merkle-forest.\n\n## Lead Maintainer\n\n[Eric Myhre](https://github.com/warpfork)\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nmake install\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": ["2023-08-28T04:18:44Z", "2023-06-07T18:47:13Z", "2022-03-18T23:21:06Z", "2020-04-07T22:18:17Z"]}, {"name": "go-ipld-git", "description": "ipld handlers for git objects", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "Git ipld format\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n\n> An IPLD codec for git objects allowing path traversals across the git graph.\n\n## Table of Contents\n\n- [Install](#install)\n- [About](#about)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\ngo get github.com/ipfs/go-ipld-git\n```\n\n## About\n\nThis is an IPLD codec which handles git objects. Objects are transformed\ninto IPLD graph as detailed below. Objects are demonstrated here using both\n[IPLD Schemas](https://ipld.io/docs/schemas/) and example JSON forms.\n\n### Commit\n\n```ipldsch\ntype GpgSig string\n\ntype PersonInfo struct {\n  date String\n  timezone String\n  email String\n  name String\n}\n\ntype Commit struct {\n  tree &Tree # see \"Tree\" section below\n  parents [&Commit]\n  message String\n  author optional PersonInfo\n  committer optional PersonInfo\n  encoding optional String\n  signature optional GpgSig\n  mergetag [Tag]\n  other [String]\n}\n```\n\nAs JSON, real data would look something like:\n\n```json\n{\n  \"author\": {\n    \"date\": \"1503667703\",\n    \"timezone\": \"+0200\",\n    \"email\": \"author@mail\",\n    \"name\": \"Author Name\"\n  },\n  \"committer\": {\n    \"date\": \"1503667703\",\n    \"timezone\": \"+0200\",\n    \"email\": \"author@mail\",\n    \"name\": \"Author Name\"\n  },\n  \"message\": \"Commit Message\\n\",\n  \"parents\": [\n    <LINK>, <LINK>, ...\n  ],\n  \"tree\": <LINK>\n}\n```\n\n### Tag\n\n```ipldsch\ntype Tag struct {\n  object &Any\n  type String\n  tag String\n  tagger PersonInfo\n  message String\n}\n```\n\nAs JSON, real data would look something like:\n\n```json\n{\n  \"message\": \"message\\n\",\n  \"object\": {\n    \"/\": \"baf4bcfg3mbz3yj3njqyr3ifdaqyfv3prei6h6bq\"\n  },\n  \"tag\": \"tagname\",\n  \"tagger\": {\n    \"date\": \"1503667703 +0200\",\n    \"email\": \"author@mail\",\n    \"name\": \"Author Name\"\n  },\n  \"type\": \"commit\"\n}\n```\n\n### Tree\n\n```ipldsch\ntype Tree {String:TreeEntry}\n\ntype TreeEntry struct {\n  mode String\n  hash &Any\n}\n```\n\nAs JSON, real data would look something like:\n\n```json\n{\n  \"file.name\": {\n    \"mode\": \"100664\",\n    \"hash\": <LINK>\n  },\n  \"directoryname\": {\n    \"mode\": \"40000\",\n    \"hash\": <LINK>\n  },\n  ...\n}\n```\n\n### Blob\n\n```ipldsch\ntype Blob bytes\n```\n\nAs JSON, real data would look something like:\n\n```json\n\"<base64 of 'blob <size>\\0<data>'>\"\n```\n\n## Lead Maintainers\n\n* [Will Scott](https://github.com/willscott)\n* [Rod Vagg](https://github.com/rvagg)\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": ["2021-09-09T16:54:51Z", "2021-08-12T16:54:19Z"]}, {"name": "go-ipld-legacy", "description": "A translation layer between go-ipld-prime nodes and go-ipld-format legacy interface", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Go-ipld-legacy\n=======================\n\n> A compatibility layer between go-ipld-prime and go-ipld-format\n\n## Lead Maintainer\n\n[Hannah Howard](https://github.com/hannahhoward)\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": ["2023-06-01T04:00:59Z", "2023-05-31T05:44:55Z"]}, {"name": "go-ipld-zcash", "description": "An implementation of the zcash block and transaction datastructures for ipld", "language": "Go", "license": null, "readme": "Zcash ipld format\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/go-ipld-zcash/badge.svg?branch=master)](https://coveralls.io/github/ipfs/go-ipld-zcash?branch=master)\n[![Travis CI](https://travis-ci.org/ipfs/go-ipld-zcash.svg?branch=master)](https://travis-ci.org/ipfs/go-ipld-zcash)\n\n> An ipld codec for Zcash blocks and transactions allowing path traversals across the blockchain!\n\nNote: This is WIP and may not be an entirely correct parser.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nmake install\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 Jeromy Johnson\n", "release_dates": []}, {"name": "go-ipns", "description": "Utilities for creating, parsing, and validating IPNS records", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-ipns\n\n> ipns record definitions\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-datastore?status.svg)](https://godoc.org/github.com/ipfs/go-ipns)\n\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/ipns.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\nThis package contains all of the components necessary to create, understand, and validate IPNS records. It does *not* publish or resolve those records. [Kubo](https://github.com/ipfs/kubo) uses this package internally to manipulate records.\n\n## Usage\n\nTo create a new IPNS record:\n\n```go\nimport (\n\t\"time\"\n\n\tipns \"github.com/ipfs/go-ipns\"\n\tcrypto \"github.com/libp2p/go-libp2p-crypto\"\n)\n\n// Generate a private key to sign the IPNS record with. Most of the time, \n// however, you'll want to retrieve an already-existing key from IPFS using the\n// go-ipfs/core/coreapi CoreAPI.KeyAPI() interface.\nprivateKey, publicKey, err := crypto.GenerateKeyPair(crypto.RSA, 2048)\nif err != nil {\n  panic(err)\n}\n\n// Create an IPNS record that expires in one hour and points to the IPFS address\n// /ipfs/Qme1knMqwt1hKZbc1BmQFmnm9f36nyQGwXxPGVpVJ9rMK5\nipnsRecord, err := ipns.Create(privateKey, []byte(\"/ipfs/Qme1knMqwt1hKZbc1BmQFmnm9f36nyQGwXxPGVpVJ9rMK5\"), 0, time.Now().Add(1*time.Hour))\nif err != nil {\n\tpanic(err)\n}\n```\n\nOnce you have the record, you\u2019ll need to use IPFS to *publish* it.\n\nThere are several other major operations you can do with `go-ipns`. Check out the [API docs](https://godoc.org/github.com/ipfs/go-ipns) or look at the tests in this repo for examples.\n\n## Documentation\n\nhttps://godoc.org/github.com/ipfs/go-ipns\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nCopyright (c) Protocol Labs, Inc. under the **MIT license**. See [LICENSE file](./LICENSE) for details.\n", "release_dates": ["2023-05-25T14:12:41Z", "2022-09-20T22:44:01Z", "2021-07-27T16:56:33Z", "2021-05-12T20:06:39Z"]}, {"name": "go-jaeger-plugin", "description": "A Jaeger plugin for IPFS", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-jaeger-plugin\n==================\n\nAllows usage of Jaeger Bindings for Go OpenTracing API\nFor more information on Jaeger - https://github.com/jaegertracing/jaeger-client-go\n\n## Setup\n\n* NOTE: As of [2017.08.09](https://golang.org/pkg/plugin/) the plugins lib\nin Go only works in Linux.\n\nBuild the plugin:\n\n```\n$ cd plugin\n```\n\n```\n$ make\n```\n\n## Installing\n\nMake plugin executable:\n\n```\n$ chmod +x jaeger-plugin.so\n```\n\nCopy the plugin to ./ipfs:\n\n```\n$ cp jaeger-plugin.so $IPFS_PATH/plugins/jaeger-plugin.so\n```\n\nSet the tracer name environment variable\n```\n$ export IPFS_TRACER_NAME=$(ipfs id | jq '.ID')\n```\n\n## Viewing Traces\n\nStart the [All in One Jaeger UI](https://jaeger.readthedocs.io/en/latest/getting_started/#all-in-one-docker-image) to view the Traces\n\n```\ndocker run -d -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p5775:5775/udp -p6831:6831/udp -p6832:6832/udp \\\n  -p5778:5778 -p16686:16686 -p14268:14268 -p9411:9411 jaegertracing/all-in-one:latest\n```\n\nOpen `localhost:16686` in browser.\n\nFor more information on getting started with Jaeger UI\n- https://jaeger.readthedocs.io/en/latest/getting_started/\n\n### I don't have linux but I want to do this somehow!\n\nAs stated above, the plugin library only works in Linux. Bug the go team to\nsupport your system!\n\n* Or use a linux virtualbox, and mount this directory.\n", "release_dates": []}, {"name": "go-libipfs-rapide", "description": "A fork of go-libipfs with experimental RAPIDE client.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<h1 align=\"center\">\nBoxo \ud83c\udf4c\n<br>\n<img src=\"https://raw.githubusercontent.com/ipfs/boxo/main/logo.svg\" alt=\"Boxo logo\" title=\"Boxo logo\" width=\"200\">\n<br>\n</h1>\n<p align=\"center\" style=\"font-size: 1.2rem;\">A library for building IPFS applications and implementations.</p>\n\n<hr />\n\n[![Go Test](https://github.com/ipfs/boxo/actions/workflows/go-test.yml/badge.svg)](https://github.com/ipfs/boxo/actions/workflows/go-test.yml)\n[![Go Docs](https://img.shields.io/badge/godoc-reference-blue.svg)](https://pkg.go.dev/github.com/ipfs/boxo)\n[![codecov](https://codecov.io/gh/ipfs/boxo/branch/main/graph/badge.svg?token=9eG7d8fbCB)](https://codecov.io/gh/ipfs/boxo)\n\n<!-- TOC -->\n\n- [About](#about)\n    - [Motivation](#motivation)\n- [What kind of components does Boxo have?](#what-kind-of-components-does-boxo-have)\n    - [Does Boxo == IPFS?](#does-boxo--ipfs)\n    - [Is everything related to IPFS in the Go ecosystem in this repo?](#is-everything-related-to-ipfs-in-the-go-ecosystem-in-this-repo)\n- [Getting started](#getting-started)\n- [Should I add my IPFS component to Boxo?](#should-i-add-my-ipfs-component-to-boxo)\n- [Help](#help)\n- [Governance and Access](#governance-and-access)\n- [Release Process](#release-process)\n- [Related Items](#related-items)\n- [License](#license)\n\n<!-- /TOC -->\n\n## About\n\nBoxo is a component library for building IPFS applications and implementations in Go.\n\nSome scenarios in which you may find Boxo helpful:\n\n* You are building an application that interacts with the IPFS network\n* You are building an IPFS implementation\n* You want to reuse some components of IPFS such as its Kademlia DHT, Bitswap, data encoding, etc.\n* You want to experiment with IPFS\n\nBoxo powers [Kubo](https://github.com/ipfs/kubo), which is [the most popular IPFS implementation](https://github.com/protocol/network-measurements/tree/master/reports),\nso its code has been battle-tested on the IPFS network for years, and is well-understood by the community.\n\n### Motivation\n**TL;DR** The goal of this repo is to help people build things.  Previously users struggled to find existing useful code or to figure out how to use what they did find.  We observed many running Kubo and using its HTTP RPC API.  This repo aims to do better.  We're taking the libraries that many were already effectively relying on in production and making them more easily discoverable and usable.\n\nThe maintainers primarily aim to help people trying to build with IPFS in Go that were previously either giving up or relying on the [Kubo HTTP RPC API](https://docs.ipfs.tech/reference/kubo/rpc/). Some of these people will end up being better served by IPFS tooling in other languages (e.g., Javascript, Rust, Java, Python), but for those who are either looking to write in Go or to leverage the set of IPFS tooling we already have in Go we\u2019d like to make their lives easier.\n\nWe\u2019d also like to make life easier on ourselves as the maintainers by reducing the maintenance burden that comes from being the owners on [many repos](https://github.com/ipfs/kubo/issues/8543) and then use that time to contribute more to the community in the form of easier to use libraries, better implementations, improved protocols, new protocols, etc.\n\nBoxo is not exhaustive nor comprehensive--there are plenty of useful IPFS protocols, specs, libraries, etc. that are not in Boxo. The goal of Boxo is to provide cohesive and well-maintained components for common IPFS use cases.\n\n## What kind of components does Boxo have?\n\nBoxo includes high-quality components useful for interacting with IPFS protocols, public and private IPFS networks, and content-addressed data, such as:\n\n- Content routing (DHT, delegated content routing, providing)\n- Data transfer (gateways, Bitswap, incremental verification)\n- Naming and mutability (name resolution, IPNS)\n- Interacting with public and private IPFS networks\n- Working with content-addressed data\n\nBoxo aims to provide a cohesive interface into these components. Note that not all of the underlying components necessarily reside in this respository.\n\n### Does Boxo == IPFS?\nNo.  This repo houses some IPFS functionality written in Go that has been useful in practice, and is maintained by a group that has long term commitments to the IPFS project\n\n### Is everything related to IPFS in the Go ecosystem in this repo?\n\nNo.  Not everything related to IPFS is intended to be in Boxo. View it as a starter toolbox (potentially among multiple).  If you\u2019d like to build an IPFS implementation with Go, here are some tools you might want that are maintained by a group that has long term commitments to the IPFS project.  There are certainly repos that others maintainer that aren't included here (e.g., ipfs/go-car) which are still useful to IPFS implementations. It's expected and fine for new IPFS functionality to be developed that won't be part of Boxo.  \n\n## Getting started\nSee [examples](./examples/README.md).\n\n## Should I add my IPFS component to Boxo?\nWe happily accept external contributions! However, Boxo maintains a high quality bar, so code accepted into Boxo must meet some minimum maintenance criteria:\n\n* Actively maintained\n  * Must be actively used by, or will be included in software that is actively used by, a significant number of users or production systems. Code that is not actively used cannot be properly maintained.\n  * Must have multiple engineers who are willing and able to maintain the relevant code in Boxo for a long period of time.\n  * If either of these changes, Boxo maintainers will consider removing the component from Boxo.\n* Adequately tested\n  * At least with unit tests\n  * Ideally also including integration tests with other components\n* Adequately documented\n  * Godocs at minimum\n  * Complex components should have their own doc.go or README.md describing the component, its use cases, tradeoffs, design rationale, etc.\n* If the maintainers are not Boxo maintainers, then the component must include a CODEOWNERS file with at least two code owners who can commit to reviewing PRs\n\nIf you have some experimental component that you think would benefit the IPFS community, we suggest you build the component in your own repository until it's clear that there's community demand for it, and then open an issue/PR in this repository to discuss including it in Boxo.\n\n## Help\n\nIf you have questions, feel free to open an issue. You can also find the Boxo maintainers in [Filecoin Slack](https://filecoin.io/slack/) at #Boxo-maintainers.  (If you would like to engage via IPFS Discord or ipfs.io Matrix, please drop into the #ipfs-implementers channel/room or file an issue, and we'll get bridging from #Boxo-maintainers to these other chat platforms.)\n\n## Governance and Access\nSee [CODEOWNERS](./docs/CODEOWNERS) for the current maintainers list.  Governance for graduating additional maintainers hasn't been established.  Repo permissions are all managed through [ipfs/github-mgmt](https://github.com/ipfs/github-mgmt).\n\n## Release Process\nTo be documented: https://github.com/ipfs/boxo/issues/170\n\n## Related Items\n* [Initial proposal for \"Consolidate IPFS Repositories\" that spawned this project](https://github.com/ipfs/kubo/issues/8543)\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": []}, {"name": "go-libp2p-dns-router", "description": "Under construction /!\\", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-libp2p-dns-router\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-libp2p-yellow.svg?style=flat-square)](https://libp2p.io/)\n[![](https://img.shields.io/badge/freenode-%23libp2p-yellow.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23libp2p)\n[![GoDoc](https://godoc.org/github.com/libp2p/go-libp2p-pubsub-router?status.svg)](https://godoc.org/github.com/libp2p/go-libp2p-pubsub-router)\n[![Coverage Status](https://img.shields.io/codecov/c/github/libp2p/go-libp2p-pubsub-router.svg?style=flat-square&branch=master)](https://codecov.io/github/libp2p/go-libp2p-pubsub-router?branch=master)\n[![Build Status](https://travis-ci.org/libp2p/go-libp2p-pubsub-router.svg?branch=master)](https://travis-ci.org/libp2p/go-libp2p-pubsub-router)\n[![Discourse posts](https://img.shields.io/discourse/https/discuss.libp2p.io/posts.svg)](https://discuss.libp2p.io)\n\nA libp2p router that uses DNS.\n\n## Documenation\n\nSee https://godoc.org/github.com/ipfs/go-libp2p-dns-router.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/libp2p/go-libp2p-dns-router/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": []}, {"name": "go-log", "description": "A logging library used by go-ipfs", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-log\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![GoDoc](https://pkg.go.dev/badge/github.com/ipfs/go-log/v2.svg)](https://pkg.go.dev/github.com/ipfs/go-log/v2)\n\n> The logging library used by go-ipfs\n\ngo-log wraps [zap](https://github.com/uber-go/zap) to provide a logging facade. go-log manages logging\ninstances and allows for their levels to be controlled individually.\n\n## Install\n\n```sh\ngo get github.com/ipfs/go-log\n```\n\n## Usage\n\nOnce the package is imported under the name `logging`, an instance of `EventLogger` can be created like so:\n\n```go\nvar log = logging.Logger(\"subsystem name\")\n```\n\nIt can then be used to emit log messages in plain printf-style messages at seven standard levels:\n\nLevels may be set for all loggers:\n\n```go\nlvl, err := logging.LevelFromString(\"error\")\nif err != nil {\n\tpanic(err)\n}\nlogging.SetAllLoggers(lvl)\n```\n\nor individually:\n\n```go\nerr := logging.SetLogLevel(\"net:pubsub\", \"info\")\nif err != nil {\n\tpanic(err)\n}\n```\n\nor by regular expression:\n\n```go\nerr := logging.SetLogLevelRegex(\"net:.*\", \"info\")\nif err != nil {\n\tpanic(err)\n}\n```\n\n### Environment Variables\n\nThis package can be configured through various environment variables.\n\n#### `GOLOG_LOG_LEVEL`\n\nSpecifies the log-level, both globally and on a per-subsystem basis.\n\nFor example, the following will set the global minimum log level to `error`, but reduce the minimum\nlog level for `subsystem1` to `info` and reduce the minimum log level for `subsystem2` to debug.\n\n```bash\nexport GOLOG_LOG_LEVEL=\"error,subsystem1=info,subsystem2=debug\"\n```\n\n`IPFS_LOGGING` is a deprecated alias for this environment variable.\n\n#### `GOLOG_FILE`\n\nSpecifies that logs should be written to the specified file. If this option is _not_ specified, logs are written to standard error.\n\n```bash\nexport GOLOG_FILE=\"/path/to/my/file.log\"\n```\n\n#### `GOLOG_OUTPUT`\n\nSpecifies where logging output should be written. Can take one or more of the following values, combined with `+`:\n\n- `stdout` -- write logs to standard out.\n- `stderr` -- write logs to standard error.\n- `file` -- write logs to the file specified by `GOLOG_FILE`\n\nFor example, if you want to log to both a file and standard error:\n\n```bash\nexport GOLOG_FILE=\"/path/to/my/file.log\"\nexport GOLOG_OUTPUT=\"stderr+file\"\n```\n\nSetting _only_ `GOLOG_FILE` will prevent logs from being written to standard error.\n\n#### `GOLOG_LOG_FMT`\n\nSpecifies the log message format. It supports the following values:\n\n- `color` -- human readable, colorized (ANSI) output\n- `nocolor` -- human readable, plain-text output.\n- `json` -- structured JSON.\n\nFor example, to log structured JSON (for easier parsing):\n\n```bash\nexport GOLOG_LOG_FMT=\"json\"\n```\n\nThe logging format defaults to `color` when the output is a terminal, and `nocolor` otherwise.\n\n`IPFS_LOGGING_FMT` is a deprecated alias for this environment variable.\n\n#### `GOLOG_LOG_LABELS`\n\nSpecifies a set of labels that should be added to all log messages as comma-separated key-value\npairs. For example, the following add `{\"app\": \"example_app\", \"dc\": \"sjc-1\"}` to every log entry.\n\n```bash\nexport GOLOG_LOG_LABELS=\"app=example_app,dc=sjc-1\"\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-log/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT\n", "release_dates": ["2022-01-09T06:12:42Z", "2022-01-07T12:02:47Z", "2021-07-07T09:01:49Z", "2021-03-18T23:42:04Z", "2021-03-18T23:42:42Z", "2021-03-18T23:41:18Z", "2020-05-26T23:06:19Z", "2020-05-25T17:36:21Z", "2020-05-13T04:16:45Z", "2020-05-04T15:59:01Z", "2020-04-21T17:14:01Z"]}, {"name": "go-merkledag", "description": "The go-ipfs merkledag 'service' implementation", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-merkledag\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-merkledag/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-merkledag/branch/master)\n\n> go-merkledag implements the 'DAGService' interface and adds two ipld node types, Protobuf and Raw \n\n## Status\n\n\u2757 This library is maintained, but not actively developed. It will continue to receive fixes and security updates for users that depend on it. However, it may be deprecated in the future and it is recommended that you use alternatives to the functionality in go-merkledag, including:\n\n* A fork of this library for use by Kubo is being maintained here: [github.com/ipfs/boxo/ipld/merkledag](https://pkg.go.dev/github.com/ipfs/boxo/ipld/merkledag)\n* Working directly with DAG-PB (ProtoNode) should directly use [github.com/ipld/go-codec-dagpb](https://pkg.go.dev/github.com/ipld/go-codec-dagpb) in conjunction with [github.com/ipld/go-ipld-prime](https://pkg.go.dev/github.com/ipld/go-ipld-prime)\n* Traversals / DAG walking should use [github.com/ipld/go-ipld-prime/traversal](https://pkg.go.dev/github.com/ipld/go-ipld-prime/traversal)\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2023-06-09T23:40:22Z", "2023-02-17T00:01:46Z", "2023-01-11T23:53:45Z", "2022-11-23T22:43:00Z", "2022-10-04T08:08:57Z", "2022-08-29T04:49:32Z", "2022-03-18T23:25:11Z", "2021-09-30T19:48:11Z", "2021-08-12T15:31:08Z", "2020-04-23T07:19:21Z", "2019-12-07T03:08:10Z", "2019-12-02T20:36:45Z"]}, {"name": "go-metrics-interface", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": []}, {"name": "go-metrics-prometheus", "description": "Prometheus bindings for go-metrics-interface", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": []}, {"name": "go-mfs", "description": "An in memory model of a mutable IPFS filesystem", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-mfs\n\n> go-mfs implements an in-memory model of a mutable IPFS filesystem.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](https://godoc.org/github.com/ipfs/go-mfs?status.svg)](https://godoc.org/github.com/ipfs/go-mfs)\n[![Build Status](https://travis-ci.com/ipfs/go-mfs.svg?branch=master)](https://travis-ci.com/ipfs/go-mfs)\n\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/mfs.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-mfs` works like a regular Go module:\n\n```\n> go get github.com/ipfs/go-mfs\n```\n\nIt uses [Gx](https://github.com/whyrusleeping/gx) to manage dependencies. You can use `make all` to build it with the `gx` dependencies.\n\n## Usage\n\n```\nimport \"github.com/ipfs/go-mfs\"\n```\n\nCheck the [GoDoc documentation](https://godoc.org/github.com/ipfs/go-mfs)\n\n## Documentation\n\nDocumentation around the MFS and the Files API in general around IPFS is a work in progress the following links may be of use:\n\n* [UnixFS](https://docs.ipfs.io/guides/concepts/unixfs/)\n* [MFS](https://docs.ipfs.io/guides/concepts/mfs/)\n* [General concept document about how are files handled in IPFS (WIP)](https://github.com/ipfs/docs/issues/133)\n\n## Repository Structure\nThis repository contains many files, all belonging to the root `mfs` package.\n\n* `file.go`: MFS `File`.\n* `dir.go`: MFS `Directory`.\n* `fd.go`: `FileDescriptor` used to operate on `File`s.\n* `ops.go`: Functions that do not belong to either `File` nor `Directory` (although they mostly operate on them) that contain common operations to the MFS, e.g., find, move, add a file, make a directory.\n* `root.go`: MFS `Root` (a `Directory` with republishing support).\n* `repub.go`: `Republisher`.\n* `mfs_test.go`: General tests (needs a [revision](https://github.com/ipfs/go-mfs/issues/9)).\n* `repub_test.go`: Republisher-specific tests (contains only the `TestRepublisher` function).\n\n## License\n\nMIT \u00a9 Protocol Labs, Inc.\n", "release_dates": ["2023-05-25T14:11:40Z", "2021-11-18T23:18:39Z", "2021-11-16T15:32:29Z", "2020-05-14T23:53:22Z"]}, {"name": "go-namesys", "description": "go-namesys provides publish and resolution support for the /ipns/ namespace in go-ipfs", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-namesys\n\n> go-namesys provides publish and resolution support for the /ipns/ namespace \n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![Go Reference](https://pkg.go.dev/badge/github.com/ipfs/go-namesys.svg)](https://pkg.go.dev/github.com/ipfs/go-namesys)\n[![Travis CI](https://travis-ci.com/ipfs/go-namesys.svg?branch=master)](https://travis-ci.com/ipfs/go-namesys)\n\n## \u2757 This repo is no longer maintained.\n\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/namesys.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Summary\n\nPackage namesys defines `Resolver` and `Publisher` interfaces for IPNS paths, that is, paths in the form of `/ipns/<name_to_be_resolved>`. A \"resolved\" IPNS path becomes an `/ipfs/<cid>` path.\n\nTraditionally, these paths would be in the form of `/ipns/{libp2p-key}`, which references an IPNS record in a distributed `ValueStore` (usually the IPFS DHT).\n\nAdditionally, the `/ipns/` namespace can also be used with domain names that use DNSLink (`/ipns/en.wikipedia-on-ipfs.org`, see https://docs.ipfs.io/concepts/dnslink/).\n\nThe package provides implementations for all three resolvers.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [License](#license)\n\n## Install\n\n`go-namesys` works like a regular Go module:\n```\n> go get github.com/ipfs/go-namesys\n```\n\n## Usage\n```\nimport \"github.com/ipfs/go-namesys\"\n```\n\nSee the [Pkg.go.dev documentation](https://pkg.go.dev/github.com/ipfs/go-namesys)\n\n## License\n\nThis project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2023-05-25T14:10:25Z", "2023-01-25T00:21:29Z", "2022-04-27T23:34:26Z", "2021-08-17T13:15:52Z", "2021-05-12T20:55:03Z", "2021-04-07T20:37:40Z", "2021-03-23T14:26:00Z"]}, {"name": "go-path", "description": "Utilities for dealing with ipfs paths", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-path\n==================\n\n> go-path is a helper package that provides utilities for parsing and using ipfs paths\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-path/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-path/branch/master)\n[![Travis CI](https://travis-ci.org/ipfs/go-path.svg?branch=master)](https://travis-ci.org/ipfs/go-path)\n\n## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/path.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [API](#api)\n- [License](#license)\n\n## TODO\n\nThis package could probably be merged into go-ipld, or something along those lines. It\ndoesnt really make sense as its own standalone thing.\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2023-05-25T14:06:28Z", "2023-02-23T16:24:57Z", "2022-03-24T12:04:17Z", "2022-02-10T23:50:18Z", "2021-09-27T16:57:27Z", "2021-01-07T19:12:35Z", "2020-08-26T18:35:18Z"]}, {"name": "go-peertaskqueue", "description": "A prioritized queue of abstract tasks distributed among peers", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": ["2023-02-17T16:58:10Z", "2021-08-18T11:34:10Z", "2021-07-22T13:48:18Z"]}, {"name": "go-pinning-service-http-client", "description": "An IPFS Pinning Service HTTP Client", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-pinning-service-http-client\n\n> This repo is contains a reference implementation of a client for the [IPFS Pinning Services API Spec](https://github.com/ipfs/pinning-services-api-spec)\n\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![](https://img.shields.io/badge/status-draft-yellow.svg?style=flat-square)](https://github.com/ipfs/specs/#understanding-the-meaning-of-the-spec-badges-and-their-lifecycle)\n\n## \u2757 This repo is no longer maintained.\n\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/pinning/remote.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n\n## Updating Pinning Service Spec\n\nDownload the openapi-generator from https://github.com/OpenAPITools/openapi-generator and generate the code using:\n\nCurrent code generated with: openapi-generator 5.0.0-beta\n\n```\nopenapi-generator generate -g go-experimental -i https://raw.githubusercontent.com/ipfs/pinning-services-api-spec/master/ipfs-pinning-service.yaml -o openapi\nrm openapi/go.mod openapi/go.sum\n```\n\nNotes:\nDue to https://github.com/OpenAPITools/openapi-generator/issues/7473 the code generator the http error codes processing\nmay need some manual editing.\n\n`go-experimental` is becoming mainstream and so in later versions will be replaced with `go`\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": ["2023-05-25T14:08:28Z", "2022-09-01T11:48:06Z", "2022-09-01T11:47:46Z", "2020-11-30T23:20:50Z", "2020-11-30T20:27:02Z"]}, {"name": "go-poll-endpoint", "description": "Unix util to poll an endpoint", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-poll-endpoint is an Unix util to poll an endpoint\n\nThis small unix tool aims to make it easy to check if an http endpoint\nis reachable. It waits for a http endpoint to be reachable and return\nwith \"http.StatusOK\".\n\n### Install\n\n```sh\ngo install github.com/ipfs/go-poll-endpoint\n```\n\n### Usage:\n\n```\n> go-poll-endpoint --help\nUsage of go-poll-endpoint:\n  -ep string\n        which http endpoint path to hit (default \"/version\")\n  -host string\n        the multiaddr host to dial on (default \"/ip4/127.0.0.1/tcp/5001\")\n  -tout duration\n        how long to wait between attempts (default 1s)\n  -tries int\n        how many tries to make before failing (default 10)\n  -v    verbose logging\n> go-poll-endpoint -v\n19:11:45.285 DEBUG pollEndpoi: starting at %s, tries: %d, timeout: %s, url: %s2017-09-23 19:11:45.285640066 +0200 CEST m=+0.001535252 10 1s {http  <nil> 127.0.0.1:5001 /version  false  } go-poll-endpoint.go:57\n19:11:45.286 DEBUG pollEndpoi: ok -  endpoint reachable with 10 tries remaining, took 565.206\u00b5s go-poll-endpoint.go:63\n> go-poll-endpoint\n> echo $?\n0\n```\n\n### License\n\nMIT\n", "release_dates": []}, {"name": "go-protocolnetwork", "description": "Extracted generic networking code from go-bitswap and go-graphsync", "language": "Go", "license": null, "readme": null, "release_dates": []}, {"name": "go-qringbuf", "description": "An implementation of a Quantized Ring Buffer", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "q(uantized)ringbuf(fer)\n=======================\n\n> A thread-safe variant of a classic circular buffer with a double-twist\n\nqringbuf is a circular buffer variant, similar to (but not a derivative of)\n[Bip Buffer][1] and [spsc-bip-buffer/bbqueue][2]. It provides a\nconcurrency-friendly, zero-copy abstraction of [io.ReadAtLeast()][3] over a\npre-allocated ring-buffer, populated asynchronously by a standalone goroutine.\nRefer to the [implementation-notes diagrams][4] to get a quick overview of\nhow this works in practice.\n\nThis library is primarily designed for processing a series of arbitrary\nstreams, each comprised of variable-length records. Refer to the [Examples][5]\nand to the [StartFill(\u2026)][6] / [NextRegion(\u2026)][7] combo for a crash-course in\nusage patterns.\n\n## Documentation\n\nhttps://pkg.go.dev/github.com/ipfs/go-qringbuf\n\n## Lead Maintainer\n\n[Peter Rabbitson](https://github.com/ribasushi)\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n\n[1]: https://www.codeproject.com/Articles/3479/The-Bip-Buffer-The-Circular-Buffer-with-a-Twist\n[2]: https://andrea.lattuada.me/blog/2019/the-design-and-implementation-of-a-lock-free-ring-buffer-with-contiguous-reservations.html\n[3]: https://pkg.go.dev/io?tab=doc#ReadAtLeast\n[4]: https://pkg.go.dev/github.com/ipfs/go-qringbuf#hdr-Implementation_notes\n[5]: https://pkg.go.dev/github.com/ipfs/go-qringbuf?tab=doc#hdr-Examples\n[6]: https://pkg.go.dev/github.com/ipfs/go-qringbuf?tab=doc#QuantizedRingBuffer.StartFill\n[7]: https://pkg.go.dev/github.com/ipfs/go-qringbuf?tab=doc#QuantizedRingBuffer.NextRegion\n", "release_dates": []}, {"name": "go-sbs", "description": "static block store (very experimental)", "language": "Go", "license": null, "readme": null, "release_dates": []}, {"name": "go-todocounter", "description": "A threadsafe counter", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# go-todocounter\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> A threadsafe counter\n\n## Documenation\n\nSee https://godoc.org/github.com/ipfs/go-todocounter.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/go-todocounter/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT", "release_dates": ["2019-09-26T05:11:39Z"]}, {"name": "go-unixfs", "description": "Implementation of a unix-like filesystem on top of an ipld merkledag", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "go-unixfs\n==================\n\n> go-unixfs implements unix-like filesystem utilities on top of an ipld merkledag\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://codecov.io/gh/ipfs/go-unixfs/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/go-unixfs/branch/master)\n[![Travis CI](https://travis-ci.org/ipfs/go-unixfs.svg?branch=master)](https://travis-ci.org/ipfs/go-unixfs)\n\n## \u2757 This repo is no longer maintained.\n\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/ipld/unixfs.\n\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n\n## Table of Contents\n\n- [Directory](#directory)\n- [Install](#install)\n- [License](#license)\n\n## Package Directory\nThis package contains many subpackages, each of which can be very large on its own.\n\n### Top Level\nThe top level unixfs package defines the unixfs format datastructures, and some helper methods around it.\n\n### importers\nThe `importer` subpackage is what you'll use when you want to turn a normal file into a unixfs file.\n\n### io\nThe `io` subpackage provides helpers for reading files and manipulating directories. The `DagReader` takes a\nreference to a unixfs file and returns a file handle that can be read from and seeked through. The `Directory`\ninterface allows you to easily read items in a directory, add items to a directory, and do lookups.\n\n### mod\nThe `mod` subpackage implements a `DagModifier` type that can be used to write to an existing unixfs file, or\ncreate a new one. The logic for this is significantly more complicated than for the dagreader, so its a separate\ntype. (TODO: maybe it still belongs in the `io` subpackage though?)\n\n### hamt\nThe `hamt` subpackage implements a CHAMP hamt that is used in unixfs directory sharding.\n\n### archive\nThe `archive` subpackage implements a `tar` importer and exporter. The objects created here are not officially unixfs,\nbut in the future, this may be integrated more directly.\n\n### test\nThe `test` subpackage provides several utilities to make testing unixfs related things easier.\n\n## Install\n\n```sh\ngo get github.com/ipfs/go-unixfs\n```\n\n## License\n\nMIT \u00a9 Juan Batiz-Benet\n", "release_dates": ["2023-05-25T15:18:10Z", "2023-03-24T01:16:58Z", "2023-03-02T08:27:17Z", "2023-02-09T18:59:09Z", "2022-11-14T11:58:43Z", "2022-06-16T09:43:04Z", "2021-11-22T22:23:52Z", "2021-11-15T22:25:15Z", "2020-01-06T00:42:21Z"]}, {"name": "go-unixfsnode", "description": "An ADL IPLD prime node that wraps go-codec-dagpb's implementation of protobuf to enable pathing", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# go-unixfsnode\n\nThis is an IPLD ADL that provides string based pathing for protobuf nodes. The top level node behaves like a map where LookupByString returns the Hash property on the Link in the protobufs list of Links whos Name property matches the key. This should enable selector traversals that work based of paths.\n\nNote that while it works internally with go-codec-dagpb, the Reify method (used to get a UnixFSNode from a DagPB node should actually work successfully with go-ipld-prime-proto nodes)\n\n## Usage\n\nThe primary interaction with this package is to register an ADL on a link system. This is done with via a helper method.\n\n```go\nAddUnixFSReificationToLinkSystem(lsys *ipld.LinkSystem)\n```\n\nFor link systems which have UnixFS reification registered, two ADLs will be available to the [`InterpretAs`](https://ipld.io/specs/selectors/) selector: 'unixfs' and 'unixfs-preload'. The different between these two ADLs is that the preload variant will access all blocks within a UnixFS Object (file or directory) when that object is accessed by a selector traversal. The non-preload variant in contrast will only access the subset of blocks strictly needed for the traversal. In practice, this means the subset of a sharded directory needed to access a specific file, or the sub-range of a file directly accessed by a range selector.\n\n\n## License\n\nApache-2.0/MIT \u00a9 Protocol Labs\n", "release_dates": ["2023-09-27T01:01:13Z", "2023-08-26T00:04:32Z", "2023-08-10T10:29:15Z", "2023-07-25T06:52:25Z", "2023-07-07T14:34:45Z", "2023-06-02T14:12:26Z", "2023-05-17T10:38:48Z", "2023-03-13T20:57:36Z", "2023-02-09T19:42:53Z", "2023-01-09T12:13:52Z", "2021-09-27T21:32:47Z", "2021-08-12T15:44:36Z"]}, {"name": "go-verifcid", "description": "Temporary repo to provide cid security code prior to it getting merged into go-cid", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "## \u2757 This repo is no longer maintained.\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/verifcid.\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n", "release_dates": ["2023-05-25T14:05:53Z", "2022-08-12T16:16:28Z"]}, {"name": "gomod", "description": "Tips, tricks and scripts for gomod", "language": null, "license": null, "readme": "### Go Modules\n\nGo Modules introduce new way to manage dependencies but also new hurdles\nof using them. In here we will gather knowledge, tools and other bits to ease up use of\ngo modules.\n\n\n#### Updating modules\n\nTo simply update dependency to newer tagged version:\n```\ngo get github.com/ipfs/go-cid@v0.0.2\n```\n\nIt is not required to update all after a new version is released.\nIn general update update modules that use the new functionality or require fixes.\n\n##### Dev workflow\n\nUse local replace [directives](https://github.com/golang/go/wiki/Modules#when-should-i-use-the-replace-directive) for developing.\nExample:\n```\nreplace github.com/ipfs/go-cid => ../go-cid\n```\n\nTo test out in CI, commit and push the dependency to a branch and then run:\n```\ngo get github.com/ipfs/go-cid@$HASH\n```\nto update the version. You can also replace `$HASH` with branch name.\n\nIf for some reason version in the build did not change\n(caused by off master tags). Use replace directive like this:\n```\nreplace github.com/ipfs/go-cid => github.com/ipfs/go-cid@$HASH\n```\n\n#### How to release\n\nTo create a release follow this checklist:\n\n1. Run `go mod tidy` on master. If there are changes, create a branch and PR them.\n2. Create a git tag on master branch (after above changes are merged).\nIt is important that the tag is created on master branch. You can use `git tag -as $TAG` or\n`git tag -s -m \"$RELEASE_MESSAGE\"`.\n3. Congratulations, you are done with creating a release.\n\n\n#### CI Config\n\nHere is a config for Travis CI: [travis.example.yml](https://github.com/ipfs/ci-helpers/blob/master/travis-ci/travis.example.yml)\n\n#### Git hook to prevent pushing local replace directives\n\nThe [pre-commit](https://gist.github.com/Kubuxu/3fc5639db27f4b072b33a84b51048ff8)\nhook will alert you, when you are trying to commit go.mod file with local replace directives.\nThis is useful pattern for developing but has no place on remote.\n\nIt is best to install it as global githook. Instructions [here](https://stackoverflow.com/questions/1977610/change-default-git-hooks/37293001#37293001)\n\n\n", "release_dates": []}, {"name": "hang-fds", "description": null, "language": "Go", "license": null, "readme": "# hang-fds - stress test your network listeners\n\nThis module will open a bunch of connections to a given [multiaddr](https://github.com/multiformats/multiaddr), and hang them. It is meant to stress test your network listeners.\n\n### Install\n\n```sh\ngo get github.com/jbenet/hang-fds\n```\n\n### Usage\n\n```sh\n# open 2048 connections to /ip4/127.0.0.1/tcp/8080\nhang-fds 2048 /ip4/127.0.0.1/tcp/8080\n```\n\nThere is a test listener in the [test_server](./test_server) directory.\n\n```sh\n# accept any connections and hang them\n> test-server /ip4/0.0.0.0/tcp/1234\n```\n\n### License\n\nMIT\n", "release_dates": ["2022-04-22T20:33:56Z", "2020-03-09T04:59:52Z"]}, {"name": "helia", "description": "An implementation of IPFS in JavaScript", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia/main.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia/actions/workflows/main.yml?query=branch%3Amain)\n\n[Helia](https://github.com/ipfs/helia) is a lean, modular, and modern TypeScript implementation of IPFS for the prolific JS and browser environments.\n\nSee the [Manifesto](https://github.com/ipfs/helia/wiki/Manifesto), the [FAQ](https://github.com/ipfs/helia/wiki/FAQ), and the [State of IPFS in JS blog post from October 2022](https://blog.ipfs.tech/state-of-ipfs-in-js/) for more info.\n\n# \ud83c\udf1f Usage\n\nA quick overview of how to get different types of data in and out of your Helia\nnode.\n\n## \ud83e\udea2 Strings\n\nYou can use the [@helia/strings](https://www.npmjs.com/package/@helia/strings)\nmodule to easily add and get strings from your Helia node:\n\n```js\nimport { createHelia } from 'helia'\nimport { strings } from '@helia/strings'\n\nconst helia = await createHelia()\nconst s = strings(helia)\n\nconst myImmutableAddress = await s.add('hello world')\n\nconsole.log(await s.get(myImmutableAddress))\n// hello world\n```\n\n## \ud83c\udf03 JSON\n\nThe [@helia/json](https://www.npmjs.com/package/@helia/json) module lets you add\nor get plain JS objects:\n\n```js\nimport { createHelia } from 'helia'\nimport { json } from '@helia/json'\n\nconst helia = await createHelia()\nconst j = json(helia)\n\nconst myImmutableAddress = await j.add({ hello: 'world' })\n\nconsole.log(await j.get(myImmutableAddress))\n// { hello: 'world' }\n```\n\n## \ud83c\udf20 DAG-JSON\n\nThe [@helia/dag-json](https://www.npmjs.com/package/@helia/dag-json) allows you\nto store references to linked objects as\n[CIDs](https://docs.ipfs.tech/concepts/content-addressing):\n\n```js\nimport { createHelia } from 'helia'\nimport { dagJson } from '@helia/dag-json'\n\nconst helia = await createHelia()\nconst d = dagJson(helia)\n\nconst object1 = { hello: 'world' }\nconst myImmutableAddress1 = await d.add(object1)\n\nconst object2 = { link: myImmutableAddress1 }\nconst myImmutableAddress2 = await d.add(object2)\n\nconst retrievedObject = await d.get(myImmutableAddress2)\nconsole.log(retrievedObject)\n// { link: CID(baguqeerasor...) }\n\nconsole.log(await d.get(retrievedObject.link))\n// { hello: 'world' }\n```\n\n## \ud83c\udf0c DAG-CBOR\n\n[@helia/dag-cbor](https://www.npmjs.com/package/@helia/dag-cbor) works in a\nsimilar way to `@helia/dag-json` but stores objects using\n[Concise Binary Object Representation](https://cbor.io/):\n\n```js\nimport { createHelia } from 'helia'\nimport { dagCbor } from '@helia/dag-cbor'\n\nconst helia = await createHelia()\nconst d = dagCbor(helia)\n\nconst object1 = { hello: 'world' }\nconst myImmutableAddress1 = await d.add(object1)\n\nconst object2 = { link: myImmutableAddress1 }\nconst myImmutableAddress2 = await d.add(object2)\n\nconst retrievedObject = await d.get(myImmutableAddress2)\nconsole.log(retrievedObject)\n// { link: CID(baguqeerasor...) }\n\nconsole.log(await d.get(retrievedObject.link))\n// { hello: 'world' }\n```\n\n# \ud83d\udc3e Next steps\n\nCheck out the [helia-examples](https://github.com/ipfs-examples/helia-examples)\nrepo for how to do mostly anything with your Helia node.\n\n# \ud83c\udfc3\u200d\u2640\ufe0f Getting Started\n\nCheck out the [Helia examples repo](https://github.com/ipfs-examples/helia-examples#examples), which covers a wide variety of use cases. If you feel something has been missed, follow the [contribution guide](https://github.com/ipfs-examples/helia-examples#contributing) and create a PR to the examples repo.\n\n# \ud83d\udcd7 Project Docs\n\n- See the [project wiki](https://github.com/ipfs/helia/wiki).\n\n# \ud83d\udcd2 API Docs\n\n- https://ipfs.github.io/helia\n\n# \ud83d\udcd0 System diagram\n\n```mermaid\ngraph TD;\n    User[\"User or application\"]-->IPNS[\"@helia/ipns\"];\n    User-->UnixFS[\"@helia/unixfs\"];\n    User-->Libp2p;\n    User-->Datastore;\n    User-->Blockstore;\n    UnixFS-->Blockstore;\n    IPNS-->Datastore;\n    subgraph helia [Helia]\n      Datastore\n      Blockstore-->BlockBrokers;\n      BlockBrokers-->Bitswap;\n      BlockBrokers-->TrustlessGateways;\n      Libp2p-->DHT;\n      Libp2p-->PubSub;\n      Libp2p-->IPNI;\n      Libp2p-->Reframe;\n    end\n    Blockstore-->BlockStorage[\"File system/IDB/S3/etc\"];\n    Datastore-->DataStorage[\"Level/S3/IDB/etc\"];\n    Bitswap-->Network;\n    TrustlessGateways-->Gateway1;\n    TrustlessGateways-->GatewayN;\n    DHT-->Network;\n    PubSub-->Network;\n    IPNI-->Network;\n    Reframe-->Network;\n```\n\n# \ud83c\udfed Code Structure\n\nHelia embraces a modular approach and encourages users to bring their own implementations of various APIs to suit their needs.\n\nThe basic Helia API is defined in:\n\n- [`/packages/interface`](./packages/interface) The Helia API\n\nThe API is implemented by:\n\n- [`/packages/helia`](./packages/helia) An peer to peer implementation that uses [bitswap](https://docs.ipfs.tech/concepts/bitswap/), [libp2p](https://www.npmjs.com/package/libp2p) and [HTTP gateways](https://docs.ipfs.tech/reference/http/gateway/) as fallback\n- [`/packages/http`](./packages/http) A lightweight implementation that uses [HTTP gateways](https://docs.ipfs.tech/reference/http/gateway/) exclusively\n\nHelia also ships a number of supplemental libraries and tools that can be combined with Helia API implementations to accomplish tasks in distributed and trustless ways.\n\nThese libraries are not intended to be the \"one true implementation\" of any given API, but are made available for users to include depending on the need of their particular application:\n\n- [./packages/car](./packages/car) The `@helia/car` module\n- [./packages/dag-cbor](./packages/dag-cbor) The `@helia/dag-cbor` module\n- [./packages/dag-json](./packages/dag-json) The `@helia/dag-json` module\n- [./packages/ipns](./packages/ipns) The `@helia/ipns` module\n- [./packages/json](./packages/json) The `@helia/json` module\n- [./packages/mfs](./packages/mfs) The `@helia/mfs` module\n- [./packages/strings](./packages/strings) The `@helia/strings` module\n- [./packages/unixfs](./packages/unixfs) The `@helia/unixfs` module\n\nAn interop suite ensures everything is compatible:\n\n- [`/packages/interop`](./packages/interop) Interop tests for Helia\n\n## Other modules\n\nThere are several other modules available outside this repo:\n\n- [`@helia/verified-fetch`](https://github.com/ipfs/helia-verified-fetch) A [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)-like API for retrieving trustless, verified content from the distributed web\n- [`@helia/delegated-routing-v1-http-api`](https://github.com/ipfs/helia-delegated-routing-v1-http-api) An implementation of the [Delegated Routing v1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) including a server and a client\n- [Helia WNFS](https://github.com/shovelers/helia-wnfs) a [WNFS](https://guide.fission.codes/developers/webnative/file-system-wnfs) implementation built on top of Helia\n- [`@helia/remote-pinning`](https://github.com/ipfs/helia-remote-pinning) A Helia client for communicating with [IPFS Pinning Services](https://ipfs.github.io/pinning-services-api-spec/)\n- [`@helia/http-gateway`](https://github.com/ipfs/helia-http-gateway) An implentation of the [IPFS HTTP Gateway API](https://docs.ipfs.tech/concepts/ipfs-gateway/#gateway-types) built with Helia\n\n# \ud83d\udce3 Project status\n\nHelia v1 shipped in 202303 (see [releases](https://github.com/ipfs/helia/releases)), and development keeps on trucking as we work on initiatives in the [roadmap](#roadmap) and make performance improvements and bug fixes along the way.\n\n# \ud83d\udee3\ufe0f Roadmap\n\nPlease find and comment on [the Roadmap here](https://github.com/ipfs/helia/issues/5).\n\n# \ud83d\udc6b Get involved\n\n- Watch our Helia Demo Day presentations [here](https://www.youtube.com/playlist?list=PLuhRWgmPaHtQAnt8INOe5-kV9TLVaUJ9v)\n- We are sharing about the progress at periodic [Helia Demos](https://lu.ma/helia).  This is a good place to find out the latest and learn of ways to get involved.  We'd love to see you there!\n- Pick up one of the [issues](https://github.com/ipfs/helia/issues).\n- Come chat in Filecoin Slack #ip-js.  (Yes, we should bridge this to other chat environments.  Please comment [here](https://github.com/ipfs/helia/issues/33) if you'd like this.)\n\n# \ud83e\udd32 Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n# \ud83d\udecd\ufe0f Notable Consumers/Users\n\n- See [Projects using Helia](https://github.com/ipfs/helia/wiki/Projects-using-Helia).\n\n# \ud83c\udf1e Branding\n\n- See [Branding](https://github.com/ipfs/helia/wiki/Branding).\n\n# \ud83e\udeaa License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n", "release_dates": ["2024-02-28T11:43:43Z", "2024-02-28T11:43:42Z", "2024-02-28T11:43:41Z", "2024-02-28T11:43:39Z", "2024-02-28T11:43:38Z", "2024-02-28T11:43:37Z", "2024-02-28T11:43:36Z", "2024-02-28T11:43:34Z", "2024-02-28T11:43:33Z", "2024-02-28T11:43:32Z", "2024-02-28T11:43:31Z", "2024-02-28T11:43:30Z", "2024-02-28T11:43:28Z", "2024-02-28T11:43:27Z", "2024-02-28T11:43:26Z", "2024-01-31T17:31:51Z", "2024-01-31T17:31:50Z", "2024-01-31T17:31:49Z", "2024-01-31T17:31:48Z", "2024-01-31T17:31:47Z", "2024-01-24T15:43:38Z", "2024-01-24T15:43:36Z", "2024-01-24T15:43:35Z", "2024-01-24T15:43:33Z", "2024-01-24T15:43:32Z", "2024-01-24T15:43:30Z", "2024-01-24T15:43:29Z", "2024-01-24T15:43:27Z", "2024-01-24T15:43:26Z", "2024-01-24T15:43:24Z"]}, {"name": "helia-car", "description": "Import/export car files from Helia", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/car)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/car <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-car.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-car)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-car/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-car/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Import/export car files from Helia\n\n# Packages\n\n- [`/packages/car`](./packages/car) Import/export car files from Helia\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/car\n\n# API Docs\n\n- <https://ipfs.github.io/helia-car>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-car/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T09:27:09Z", "2023-10-07T10:14:55Z", "2023-08-27T11:36:46Z", "2023-08-27T09:22:45Z", "2023-08-14T07:04:08Z", "2023-06-07T10:23:23Z"]}, {"name": "helia-cli", "description": "Run helia as a daemon process", "language": null, "license": null, "readme": "# helia-cli <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-cli.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-cli)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-cli/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-cli/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Run helia as a daemon process\n\n## Table of contents <!-- omit in toc -->\n\n- [Structure](#structure)\n- [Project status](#project-status)\n- [Name](#name)\n- [Background](#background)\n- [Roadmap](#roadmap)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Structure\n\n- [`/packages/cli-utils`](./packages/cli-utils) Common code for Helia CLI tools\n- [`/packages/helia-cli`](./packages/helia-cli) Run a Helia node on the cli\n- [`/packages/rpc-client`](./packages/rpc-client) An implementation of IPFS in JavaScript\n- [`/packages/rpc-protocol`](./packages/rpc-protocol) RPC protocol for use by @helia/rpc-client and @helia/rpc-server\n- [`/packages/rpc-server`](./packages/rpc-server) An implementation of IPFS in JavaScript\n- [`/packages/unixfs-cli`](./packages/unixfs-cli) Run unixfs commands against a Helia node on the CLI\n\n## Project status\n\nThis project is pre-alpha and is currently in development. An initial v1 release is planned for [late Q1 2023](/ROADMAP.md#late-q1-march). Helia is being built in the open; community contributors are welcome!\n\nThe core of IPFS is the [Files API](https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md), which will likewise be implemented in Helia. These initial building blocks are in development now; have a look at this repo's PR(s). For more info about Helia, please see the [Roadmap](https://github.com/ipfs/helia/issues/5) and the [Manifesto](MANIFESTO.md).\n\nWe are also sharing about the progress so far, and discussing how you can get involved, at [Helia Demo Day](https://lu.ma/helia) every couple weeks. We'd love to see you there!\n\n## Name\n\nHelia (*HEE-lee-ah*) is the Latin spelling of \u1f29\u03bb\u03b9\u03b7 -- in Greek mythology, one of the [Heliades](https://www.wikidata.org/wiki/Q12656412): the daughters of the sun god Helios. When their brother Phaethon died trying to drive the sun chariot across the sky, their tears of mourning fell to earth as amber, which is yellow (sort of), and so is JavaScript. They were then turned into [poplar](https://en.wiktionary.org/wiki/poplar) trees and, well, JavaScript is quite popular.\n\nIn Oct\u2013Dec 2022, IP Stewards [sought](https://github.com/ipfs/pomegranate/issues/3) community input for the name of this project. After considering 20 suggestions and holding a couple of polls, the name **Helia** was chosen. Here's [why it's not named IPFS](https://github.com/ipfs/ipfs/issues/470).\n\n## Background\n\nThis project aims to build a lean, modular, and modern implementation of IPFS, the Interplanetary File System.\n\nFor more information, see the [State of IPFS in JS (blog post)](https://blog.ipfs.tech/state-of-ipfs-in-js/).\n\n## Roadmap\n\nPlease find and comment on [the Roadmap here](https://github.com/ipfs/helia/issues/5).\n\nThis IPFS implementation in JavaScript is a work in progress. [Here are some ways you can help](https://blog.ipfs.tech/state-of-ipfs-in-js/#%F0%9F%A4%9D-ways-you-can-help)!\n\n## API Docs\n\n- <https://ipfs.github.io/helia-cli>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-cli/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": []}, {"name": "helia-dag-cbor", "description": "Add/get IPLD blocks containing dag-cbor with your Helia node", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/dag-cbor)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/dag-cbor\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-dag-cbor.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-dag-cbor)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-dag-cbor/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-dag-cbor/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Add/get IPLD blocks containing dag-cbor with your Helia node\n\n# Packages\n\n- [`/packages/dag-cbor`](./packages/dag-cbor) Add/get IPLD blocks containing dag-cbor with your Helia node\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/dag-cbor\n\n> Add/get IPLD blocks containing json with your Helia node\n\n# API Docs\n\n- <https://ipfs.github.io/helia-dag-cbor>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-dag-cbor/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T09:32:43Z", "2023-10-07T10:14:04Z", "2023-08-27T09:49:19Z", "2023-08-27T09:32:31Z", "2023-08-27T08:56:52Z"]}, {"name": "helia-dag-json", "description": "Add/get IPLD blocks containing dag-json with your Helia node", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/dag-json)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/dag-json\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-dag-json.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-dag-json)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-dag-json/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-dag-json/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Add/get IPLD blocks containing dag-json with your Helia node\n\n# Packages\n\n- [`/packages/dag-json`](./packages/dag-json) Add/get IPLD blocks containing dag-json with your Helia node\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/dag-json\n\n# API Docs\n\n- <https://ipfs.github.io/helia-dag-json>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-dag-json/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T09:29:57Z", "2023-10-07T10:10:02Z", "2023-08-27T09:41:11Z", "2023-08-27T09:16:35Z", "2023-05-03T11:52:04Z"]}, {"name": "helia-delegated-routing-v1-http-api", "description": "The Routing V1 HTTP API powered by Helia", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-delegated-routing-v1-http-api.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-delegated-routing-v1-http-api)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-delegated-routing-v1-http-api/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-delegated-routing-v1-http-api/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> The Delegated Routing V1 HTTP API powered by Helia\n\n## About\n\nThis repo contains a server implementation of the IPFS [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) along with a client that can be used to interact with any compliant server implementation.\n\n## Packages\n\n- [`/packages/client`](./packages/client) A Delegated Routing V1 HTTP API client\n- [`/packages/interop`](./packages/interop) Interop tests for the Delegated Routing V1 HTTP API server powered by Helia\n- [`/packages/server`](./packages/server) A Delegated Routing V1 HTTP API server powered by Helia\n\n## API Docs\n\n- <https://ipfs.github.io/helia-delegated-routing-v1-http-api>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-delegated-routing-v1-http-api/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-01T14:14:11Z", "2024-01-31T08:08:50Z", "2024-01-18T13:30:07Z", "2024-01-18T13:29:50Z", "2024-01-18T10:40:09Z", "2024-01-16T10:54:38Z", "2024-01-16T10:41:15Z", "2024-01-15T14:25:05Z", "2024-01-15T11:52:48Z", "2024-01-15T14:24:53Z", "2024-01-15T11:52:23Z", "2023-12-05T11:25:04Z", "2023-12-03T11:26:19Z", "2023-12-03T10:45:22Z", "2023-12-03T10:45:06Z", "2023-11-06T13:28:23Z", "2023-11-02T11:44:51Z", "2023-10-30T16:36:47Z", "2023-10-30T16:36:27Z", "2023-10-26T08:06:01Z", "2023-10-25T17:50:24Z", "2023-10-25T17:49:49Z", "2023-10-07T10:26:54Z", "2023-10-07T10:26:33Z", "2023-09-14T12:37:35Z", "2023-09-14T12:38:04Z", "2023-06-02T12:49:53Z", "2023-06-01T17:27:05Z", "2023-06-01T17:27:25Z"]}, {"name": "helia-http-gateway", "description": "Run Helia NodeJS in a Docker Container.", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# helia-http-gateway\n\nDocker images for Helia.\n\n## Purpose\n\nThis container image hosts helia in a node container. It implements [HTTP IPFS-gateway API](https://docs.ipfs.tech/concepts/ipfs-gateway/#gateway-types) and responds to the incoming requests using helia to fetch the content from IPFS.\n\n## Run from the github container registry\n\n```sh\n$ docker run -it -p 8080:8080 ghcr.io/ipfs/helia-http-gateway:latest\n```\n\nSee https://github.com/ipfs/helia-http-gateway/pkgs/container/helia-http-gateway for more information.\n\n## Run Using Docker Compose\n\n```sh\n$ docker-compose up\n```\n\n## Run Using Docker\n\n### Build\n```sh\n$ docker build . --tag helia-http-gateway:local\n```\n\nPass the explicit platform when building on a Mac.\n\n```sh\n$ docker build . --platform linux/arm64 --tag helia-http-gateway:local-arm64\n```\n\n### Running\n\n```sh\n$ docker run -it -p 8080:8080 -e DEBUG=\"helia-http-gateway*\" helia-http-gateway:local # or helia-http-gateway:local-arm64\n```\n\n## Supported Environment Variables\n\n| Variable | Description | Default |\n| --- | --- | --- |\n| `DEBUG` | Debug level | `''`|\n| `FASTIFY_DEBUG` | Debug level for fastify's logger | `''`|\n| `PORT` | Port to listen on | `8080` |\n| `HOST` | Host to listen on | `0.0.0.0` |\n| `USE_SUBDOMAINS` | Whether to use [origin isolation](https://docs.ipfs.tech/how-to/gateway-best-practices/#use-subdomain-gateway-resolution-for-origin-isolation) | `true` |\n| `METRICS` | Whether to enable prometheus metrics. Any value other than 'true' will disable metrics. | `true` |\n| `USE_BITSWAP` | Use bitswap to fetch content from IPFS | `true` |\n| `USE_TRUSTLESS_GATEWAYS` | Whether to fetch content from trustless-gateways or not | `true` |\n| `TRUSTLESS_GATEWAYS` | Comma separated list of trusted gateways to fetch content from | [Defined in Helia](https://github.com/ipfs/helia/blob/main/packages/helia/src/block-brokers/trustless-gateway/index.ts) |\n| `USE_LIBP2P` | Whether to use libp2p networking | `true` |\n| `ECHO_HEADERS` | A debug flag to indicate whether you want to output request and response headers | `false` |\n| `DELEGATED_ROUTING_V1_HOST` | Hostname to use for delegated routing v1 | `https://delegated-ipfs.dev` |\n\n<!--\nTODO: currently broken when used in docker, but they work when running locally (you can cache datastore and blockstore locally to speed things up if you want)\n| `FILE_DATASTORE_PATH` | Path to use with a datastore-level passed to Helia as the datastore | `null`; memory datastore is used by default. |\n| `FILE_BLOCKSTORE_PATH` | Path to use with a blockstore-level passed to Helia as the blockstore | `null`; memory blockstore is used by default. |\n-->\n\nSee the source of truth for all `process.env.<name>` environment variables at [src/constants.ts](src/constants.ts).\n\nYou can also see some recommended environment variable configurations at:\n\n- [./.env-all](./.env-all)\n- [./.env-delegated-routing](./.env-delegated-routing)\n- [./.env-gwc](./.env-gwc)\n- [./.env-trustless-only](./.env-trustless-only)\n\n### Running with custom configurations\n\nNote that any of the following calls to docker can be replaced with something like `MY_ENV_VAR=\"MY_VALUE\" npm run start`\n\n#### Disable libp2p\n```sh\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e USE_LIBP2P=\"false\" helia\n```\n\n#### Disable bitswap\n```sh\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e USE_BITSWAP=\"false\" helia\n```\n\n#### Disable trustless gateways\n```sh\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e USE_TRUSTLESS_GATEWAYS=\"false\" helia\n```\n\n#### Customize trustless gateways\n```sh\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e TRUSTLESS_GATEWAYS=\"https://ipfs.io,https://dweb.link\" helia\n```\n\n<!--\n#### With file datastore and blockstore\n\n**NOTE:** Not currently supported due to docker volume? issues.\n\n```sh\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e FILE_DATASTORE_PATH=\"./datastore\" -e FILE_BLOCKSTORE_PATH=\"./blockstore\" helia\n# and if you want to re-use a volume from your host:\n$ docker run -it -p $PORT:8080 -e DEBUG=\"helia-http-gateway*\" -e FILE_DATASTORE_PATH=\"./datastore\" -e FILE_BLOCKSTORE_PATH=\"./blockstore\" -v ./datastore:/datastore -v ./blockstore:/blockstore helia\n```\n-->\n\n## E2E Testing\n\nWe have some tests enabled that simulate running inside of [ProbeLab's Tiros](https://github.com/plprobelab/tiros), via playwright. These tests request the same paths from ipfs.io and ensure that the resulting text matches. This is not a direct replacement for [gateway conformance testing](https://github.com/ipfs/gateway-conformance), but helps us ensure the helia-http-gateway is working as expected.\n\nBy default, these tests:\n\n1. Run in serial\n2. Allow for up to 5 failures before failing the whole suite run.\n3. Have an individual test timeout of two minutes.\n\n### Run e2e tests locally\n\n```sh\n$ npm run test:e2e # run all tests\n$ npm run test:e2e -- ${PLAYWRIGHT_OPTIONS} # run tests with custom playwright options.\n\n```\n\n### Get clinicjs flamecharts and doctor reports from e2e tests\n\n```sh\n$ npm run test:e2e-doctor # Run the dev server with clinicjs doctor, execute e2e tests, and generate a report.\n$ npm run test:e2e-flame # Run the dev server with clinicjs flame, execute e2e tests, and generate a report.\n```\n\n## Author\n\n- [whizzzkid](https://github.com/whizzzkid)\n", "release_dates": []}, {"name": "helia-ipns", "description": "An implementation of IPNS for Helia", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/ipns)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/ipns <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-ipns.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-ipns)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-ipns/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-ipns/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> An implementation of IPNS for Helia\n\n# Packages\n\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/ipns\n- [`/packages/ipns`](./packages/ipns) An implementation of IPNS for Helia\n\n# API Docs\n\n- <https://ipfs.github.io/helia-ipns>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-ipns/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T08:36:01Z", "2023-12-08T00:52:08Z", "2023-12-05T23:25:32Z", "2023-10-26T14:52:45Z", "2023-10-24T16:35:04Z", "2023-10-07T10:13:53Z", "2023-09-22T12:42:57Z", "2023-09-15T17:09:39Z", "2023-09-15T16:31:11Z", "2023-09-11T09:18:26Z", "2023-09-11T09:02:18Z", "2023-05-24T11:38:40Z", "2023-05-09T08:13:30Z", "2023-05-05T16:58:04Z", "2023-03-29T15:09:34Z", "2023-03-21T10:55:02Z", "2023-02-15T07:31:25Z"]}, {"name": "helia-json", "description": "Add/get IPLD blocks containing dag-json with your Helia node", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/json)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/json\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-json.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-json)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-json/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-json/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Add/get IPLD blocks containing json with your Helia node\n\n# Packages\n\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/json\n- [`/packages/json`](./packages/json) Add/get IPLD blocks containing json with your Helia node\n\n# API Docs\n\n- <https://ipfs.github.io/helia-json>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-json/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T09:31:02Z", "2023-10-07T10:17:46Z", "2023-08-27T12:27:41Z", "2023-08-27T11:40:23Z", "2023-05-03T11:51:05Z"]}, {"name": "helia-mfs", "description": "A mutable filesystem powered by Helia", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/mfs)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/mfs\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-mfs.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-mfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-mfs/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-mfs/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> A mutable filesystem powered by Helia\n\n# Packages\n\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/mfs\n- [`/packages/mfs`](./packages/mfs) A mutable filesystem powered by Helia\n\n# API Docs\n\n- <https://ipfs.github.io/helia-mfs>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-mfs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T08:09:46Z", "2023-10-07T10:12:44Z", "2023-09-08T15:39:10Z", "2023-08-14T16:50:35Z"]}, {"name": "helia-remote-pinning", "description": "A library that helps Helia consumers pin content via the https://ipfs.github.io/pinning-services-api-spec/. Initial design at https://pl-strflt.notion.site/create-interface-API-example-for-helia-remote-pinning-library-71011845a7b9476cb95ab425bb54455c", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# @helia/remote-pinning <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-remote-pinning.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-remote-pinning)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-remote-pinning/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-remote-pinning/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> A library that helps Helia users pin content via the IPFS pinning-services-api-spec\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Documentation](#documentation)\n  - [Create remote pinner](#create-remote-pinner)\n  - [Add a pin](#add-a-pin)\n  - [Replace a pin](#replace-a-pin)\n- [Lead Maintainer](#lead-maintainer)\n- [Contributing](#contributing)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i @helia/remote-pinning\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `HeliaRemotePinning` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/@helia/remote-pinning/dist/index.min.js\"></script>\n```\n\n## Documentation\n\n### Create remote pinner\n\n```typescript\nimport { unixfs } from '@helia/unixfs'\nimport { Configuration, RemotePinningServiceClient } from '@ipfs-shipyard/pinning-service-client'\nimport { createHelia } from 'helia'\nimport { createRemotePinner } from '@helia/remote-pinning'\n\nconst helia = await createHelia()\nconst pinServiceConfig = new Configuration({\n  endpointUrl: `${endpointUrl}`, // the URI for your pinning provider, e.g. `http://localhost:3000`\n  accessToken: `${accessToken}` // the secret token/key given to you by your pinning provider\n})\n\nconst remotePinningClient = new RemotePinningServiceClient(pinServiceConfig)\nconst remotePinner = createRemotePinner(helia, remotePinningClient)\n```\n\n### Add a pin\n\n```typescript\nconst heliaFs = unixfs(helia)\nconst cid = await heliaFs.addBytes(encoder.encode('hello world'))\nconst addPinResult = await remotePinner.addPin({\n  cid,\n  name: 'helloWorld'\n})\n```\n\n### Replace a pin\n\n```typescript\nconst newCid = await heliaFs.addBytes(encoder.encode('hi galaxy'))\nconst replacePinResult = await remotePinner.replacePin({\n  newCid,\n  name: 'hiGalaxy',\n  requestid: addPinResult.requestid\n})\n```\n\n## Lead Maintainer\n\n[SgtPooki](https://github.com/sgtpooki)\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-remote-pinning/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-07T22:42:25Z", "2024-02-07T22:41:43Z", "2023-09-06T07:37:13Z", "2023-09-06T07:02:17Z"]}, {"name": "helia-strings", "description": "Add/get IPLD blocks containing strings with your Helia node", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/strings)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/strings\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-strings.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-strings)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-strings/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-strings/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Add/get IPLD blocks containing strings with your Helia node\n\n# Packages\n\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/strings\n- [`/packages/strings`](./packages/strings) Add/get IPLD blocks containing strings with your Helia node\n\n# API Docs\n\n- <https://ipfs.github.io/helia-strings>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-strings/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T09:28:33Z", "2023-10-06T23:35:58Z", "2023-05-03T11:44:39Z"]}, {"name": "helia-unixfs", "description": "UnixFS commands for helia", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \ud83d\udcc1 Archived - this repo has been merged into [helia](https://github.com/ipfs/helia/tree/main/packages/unixfs)\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# @helia/unixfs\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-unixfs.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-unixfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-unixfs/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-unixfs/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> An implementation of Unixfs for Helia\n\n# Packages\n\n- [`/packages/interop`](./packages/interop) Interop tests for @helia/unixfs\n- [`/packages/unixfs`](./packages/unixfs) A Helia-compatible wrapper for UnixFS\n\n# API Docs\n\n- <https://ipfs.github.io/helia-unixfs>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-unixfs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-08T07:54:11Z", "2023-12-03T09:44:24Z", "2023-09-14T13:28:12Z", "2023-07-25T06:53:25Z", "2023-06-30T14:31:34Z", "2023-06-07T14:45:19Z", "2023-06-07T10:53:25Z", "2023-06-07T09:50:51Z", "2023-04-12T07:29:34Z", "2023-03-23T17:48:04Z", "2023-03-17T11:37:06Z", "2023-03-15T17:33:35Z", "2023-03-14T10:40:47Z", "2023-02-27T16:07:14Z", "2023-02-25T15:26:16Z", "2023-02-24T14:54:49Z", "2023-02-17T07:26:40Z", "2023-02-16T10:34:48Z"]}, {"name": "helia-verified-fetch", "description": "A fetch-like API for obtaining verified & trustless IPFS CIDs on the web", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<p align=\"center\">\n  <a href=\"https://github.com/ipfs/helia\" title=\"Helia\">\n    <img src=\"https://raw.githubusercontent.com/ipfs/helia/main/assets/helia.png\" alt=\"Helia logo\" width=\"300\" />\n  </a>\n</p>\n\n# helia-verified-fetch\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/helia-verified-fetch.svg?style=flat-square)](https://codecov.io/gh/ipfs/helia-verified-fetch)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/helia-verified-fetch/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/helia-verified-fetch/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n\n## About\n\nThis monorepo contains the `@helia/verified-fetch` package and its corresponding interop tests.\n\n# Getting started\n\nSee the [**`@helia/verified-fetch`**](./packages/verified-fetch#readme) package for how to get started with the package including usage examples.\n\n# Packages\n\n- [`@helia/verified-fetch`](./packages/verified-fetch) A fetch-like API for obtaining verified & trustless IPFS content on the web\n- [`@helia/verified-fetch-interop`](./packages/interop) Interop tests for @helia/verified-fetch\n\n# API Docs\n\n- <https://ipfs.github.io/helia-verified-fetch/modules.html>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/helia-verified-fetch/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-03-03T00:09:36Z", "2024-03-03T00:09:15Z", "2024-02-29T14:34:33Z", "2024-02-29T12:39:05Z", "2024-02-29T14:33:18Z", "2024-02-29T12:38:42Z", "2024-02-28T12:30:44Z", "2024-02-28T12:30:25Z"]}, {"name": "in-web-browsers", "description": "Tracking the endeavor towards getting web browsers to natively support IPFS and content-addressing", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# The IPFS web browsers integration group\n*Informal group working on improving IPFS presence in web browsers*\n\n[![Made by icon.](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat)](https://protocol.ai/)\n[![Project icon.](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat)](https://ipfs.tech/)\n[![](https://img.shields.io/badge/matrix%20chat-%23lobby:ipfs.io-blue.svg?style=flat-square)](https://matrix.to/#/#lobby:ipfs.io)\n[![](https://img.shields.io/badge/forums-discuss.ipfs.io-blue.svg?style=flat-square)](https://discuss.ipfs.tech)\n\nOur goal is to **facilitate native support for IPFS and other decentralized protocols in web browsers in order to benefit ...**. \n\n- **Browser users**: Browser extensions and native-included IPFS alike expose IPFS features in a robust and intuitive way\n- **Web developers**: Web developers can enjoy a smooth experience working with IPFS in browser contexts\n- **Browser vendors**: Browser developers are empowered to meet the requirements of the distributed web\n\n## Contents\n\n- [Current projects](#current-projects)\n   - [IPFS Companion browser extension](#ipfs-companion-browser-extension)\n   - [IPFS and the JavaScript ecosystem](#ipfs-and-the-javascript-ecosystem)\n   - [How to address IPFS on the web](#how-to-address-ipfs-on-the-web)\n   - [How to run own HTTP Gateway](#how-to-run-own-http-gateway)\n   - [How to implement HTTP Gateway](#how-to-implement-http-gateway)\n   - [DNSLink](#dnslink)\n   - [Collaborations](#collaborations)\n     - [W3C](#w3c)\n     - [IPFS and Igalia collaborate on dweb in browsers](#ipfs-and-igalia-collaborate-on-dweb-in-browsers)\n     - [Brave](#brave)\n     - [IPFS in Chromium](#ipfs-chromium)\n     - [Opera](#opera)\n- [Get involved!](#get-involved) \n- [Resources](#resources)\n\n## Current projects\n\n### IPFS Companion browser extension\n\n[IPFS Companion](https://github.com/ipfs/ipfs-companion#ipfs-companion) is a browser extension that simplifies access to IPFS resources and adds browser support for the IPFS protocol. It runs in <img src=\"https://unpkg.com/@browser-logos/firefox@2.0.0/firefox_16x16.png\" width=\"16\" height=\"16\">Firefox (desktop and Android) and Chromium-based browsers including\n<img src=\"https://unpkg.com/@browser-logos/chrome@1.0.4/chrome_16x16.png\" width=\"16\" height=\"16\">Chrome or\n<img src=\"https://unpkg.com/@browser-logos/brave@3.0.0/brave_16x16.png\" width=\"16\" height=\"16\">Brave. Check out all of [IPFS Companion's features](https://github.com/ipfs/ipfs-companion#ipfs-companion-features) and [**install it**](https://github.com/ipfs/ipfs-companion#install) today!\n\n\n\n\n| <img src=\"https://unpkg.com/@browser-logos/firefox/firefox_16x16.png\" width=\"16\" height=\"16\"> [Firefox](https://www.mozilla.org/firefox/new/) \\| [Firefox for Android](https://play.google.com/store/apps/details?id=org.mozilla.firefox) | <img src=\"https://unpkg.com/@browser-logos/chrome/chrome_16x16.png\" width=\"16\" height=\"16\"> [Chrome](https://www.google.com/chrome/) \\| <img src=\"https://unpkg.com/@browser-logos/brave/brave_16x16.png\" width=\"16\" height=\"16\"> [Brave](https://brave.com/) \\| <img src=\"https://unpkg.com/@browser-logos/opera/opera_16x16.png\" width=\"16\" height=\"16\"> [Opera](https://www.opera.com/)  \\| <img src=\"https://unpkg.com/@browser-logos/edge/edge_16x16.png\" width=\"16\" height=\"16\"> [Edge](https://www.microsoftedgeinsider.com/)\n|------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [![Install From AMO](https://ipfs.io/ipfs/QmWNa64XjA78QvK3zG2593bSMizkDXXcubDHjnRDYUivqt)<br>![](https://img.shields.io/amo/users/ipfs-companion?label=AMO%20users&style=social)](https://addons.mozilla.org/firefox/addon/ipfs-companion/) | [![Install from Chrome Store](https://ipfs.io/ipfs/QmU4Qm5YEKy5yHmdAgU2fD7PjZLgrYTUUbxTydqG2QK3TT)<br>![](https://img.shields.io/chrome-web-store/users/nibjojkomfdiaoajekhjakgkdhaomnch?label=Chrome%20Web%20Store%20users&style=social)](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch) |\n\n#### Notable past web extension experiments\n- Mozilla hosted a community effort called [`libdweb`](https://github.com/mozilla/libdweb/) to implement experimental APIs for Firefox WebExtensions, with a goal of enabling dweb protocols in Firefox through browser add-ons:\n  - IPFS [libdweb experiments](https://github.com/ipfs-shipyard/ipfs-companion/blob/libdweb/docs/libdweb.md), including a [native protocol handler](https://github.com/ipfs-shipyard/ipfs-companion/pull/533), [local DNS-SD discovery and TCP transport](https://github.com/ipfs-shipyard/ipfs-companion/pull/553)\n  - The long-term goal of this project was to integrate these APIs into the WebExtensions ecosystem, but as of Q3 2020 it is not yet in Firefox Nightly\n- Exposing the IPFS API via [`window.ipfs`](https://docs.ipfs.io/how-to/companion-window-ipfs/) (experiment ended in 2020)\n- Support for [`chrome.sockets.*` APIs](https://github.com/ipfs-shipyard/ipfs-companion/issues/664) in Chromium browsers (ended due to [EOL 2022](https://9to5google.com/2020/01/15/google-killing-chrome-apps/))\n\n### IPFS and the JavaScript ecosystem\n\nAt present, in order to interact with IPFS in a web browser, you must either bundle [`js-ipfs-core`](https://www.npmjs.com/package/ipfs-core) (a full IPFS node in JavaScript) with your client-side application, or use the [`js-ipfs-http-client`](https://www.npmjs.com/package/ipfs-http-client) HTTP [RPC API](https://docs.ipfs.io/reference/http/api/) client library to connect to an external daemon running on a local or remote machine. \n\n- To learn more, make sure to check the `browser-*` examples at [`ipfs-examples/js-ipfs-examples`](https://github.com/ipfs-examples/js-ipfs-examples/tree/master/examples)\n  - Highlight: an advanced, end-to-end example of using js-ipfs node in `SharedWorker` from `ServiceWorker` can be found at [`js-ipfs-examples/browser-service-worker`](https://github.com/ipfs-examples/js-ipfs-examples/tree/master/examples/browser-service-worker)\n\n### How to address IPFS on the web\n\n- For regular users, see\n  - this [guide to how to address IPFS content paths on the web](https://docs.ipfs.io/how-to/address-ipfs-on-web/)\n  - this [reference about HTTP Gateway API](https://docs.ipfs.tech/reference/http/gateway/)\n- For browser vendors and user agent developers, see this [memo](ADDRESSING.md) for the current set of URL conventions for the IPFS community; we invite everyone to submit questions and suggestions for improvements via issues/PRs\n\n### How to run own HTTP Gateway\n\nUse the latest [Kubo daemon](https://github.com/ipfs/kubo) and follow [gateway recipes](https://github.com/ipfs/kubo/blob/master/docs/config.md#gateway-recipes).\n\n### How to implement HTTP Gateway\n\nSee specification and implementer notes at [ipfs/specs/http-gateways](https://github.com/ipfs/specs/blob/main/http-gateways/README.md).\n\n#### DNSLink\n\n[DNSLink](https://dnslink.dev) enables you to map a domain name to an IPFS address (CID or IPNS libp2p-key) by means of a DNS TXT record. \n\n- Read the [DNSLink guide](https://docs.ipfs.tech/concepts/dnslink/) for details, including how to set it up on your own website \n- See details on [DNSLink in IPFS Companion](https://docs.ipfs.tech/how-to/dnslink-companion/) to see additional benefits of using IPFS Companion with DNSLink support\n\n### Collaborations\n\n#### W3C\n\nProtocol Labs is a [W3C Member](https://www.w3.org/Consortium/Member/List). \nCurrent focus is to watch, learn, and participate in [WebExtensions Community Group](https://www.w3.org/community/webextensions/).\n\n- 2023-Q3: [ServiceWorker-like protocol handlers for WebExtensions](https://github.com/ipfs/in-web-browsers/issues/212) mentioned during [WECG TPAC 2023 (notes)](https://github.com/w3c/webextensions/blob/main/_minutes/2023-09-11-wecg-tpac.md)\n\n#### IPFS and Igalia collaborate on dweb in browsers\n\nIn 2020 IPFS and Igalia started a collaboration that continues to this day. \nRead more: https://blog.ipfs.tech/2021-01-15-ipfs-and-igalia-collaborate-on-dweb-in-browsers/  \n\nThe most notable highlights (chronological order):\n\n* IPFS and [Igalia](https://www.igalia.com/) started a collaboration that will continue beyond 2021+\n* [Distributed web schemes have been safelisted in Chrome 86](https://www.chromestatus.com/feature/4776602869170176)\u2019s implementation of [custom handlers](https://html.spec.whatwg.org/multipage/system-state.html#custom-handlers) and [registered at IANA](https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml).\n* Chrome 89 will allow browser extensions to register cross-origin handlers or handlers for schemes with prefix `ext+`. Refinement is pending for the [permission UI](https://bugs.chromium.org/p/chromium/issues/detail?id=1079333).\n* Firefox 84 marks `http://*.localhost/` URLs as [secure context](https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts), which means websites loaded from local [subdomain gateway](https://docs.ipfs.tech/how-to/address-ipfs-on-web/#subdomain-gateway) will have access to the same Web APIs as HTTPS version.\n* Firefox 84 has improved support for [loading locally delivered mixed-resources](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content#Loading_locally_delivered_mixed-resources). Patches have also been submitted to WebKit but are pending on reviews and discussions.\n* Work is in progress to improve Chromium\u2019s consistency and specification compliance regarding the notion of [secure contexts](https://w3c.github.io/webappsec-secure-contexts/), including removing non-standard [localhost](https://chromestatus.com/feature/5698580851458048) [names](https://chromestatus.com/feature/5668106045227008).\n* Miscellaneous other fixes have landed for the Firefox and Chromium\u2019s implementations of custom handlers.\n* WIP refactor to make it easier to register custom protocol handlers ([example](https://chromium-review.googlesource.com/c/chromium/src/+/2992306), related talk: [Integrating New Protocol Handlers into Chrome [BlinkOn 15]](https://www.youtube.com/watch?v=kHIN6FkLAS8))\n* 2022-05-10: HTML spec PR: [add IPFS and IPNS as safelisted schemes for `registerProtocolHandler()`](https://github.com/whatwg/html/pull/7911)\n* 2022-05-18: Chromium status update: [New Custom Handlers Component (BlinkOn 16)](https://youtu.be/o1pJJuQiCmQ?t=2771)\n* 2022-06-28: [Explainer: Predefined Custom Handlers](https://github.com/Igalia/explainers/tree/main/custom-protocol-handlers/PredefinedHandlers) + [Chromium discussion thread](https://groups.google.com/a/chromium.org/g/content-owners/c/KIFf1EdM-4c/m/7tGJmPiaAAAJ)\n* 2022-07-20: Chromium SchemeRegistry patch MERGED: [New list in SchemeRegistry to manage schemes with predefined handlers](https://chromium-review.googlesource.com/c/chromium/src/+/3652049/) \n* 2022-08-03: After refactors, adding predefined, redirect-based handlers is 2 LOC \u2013 demo [Implement Predefined Handlers for IPFS schemes using the SchemeRegistry](https://chromium-review.googlesource.com/c/chromium/src/+/3650554)\n* 2022-08-01: Blogpost: [New Custom Handlers component for Chrome](https://blogs.igalia.com/jfernandez/2022/08/10/new-custom-handlers-component-for-chrome/)\n* 2022-09-28: [Intent to Prototype: Curve25519 in Web Cryptography](https://groups.google.com/a/chromium.org/g/blink-dev/c/n0uKIqfypW0/m/xu5UBbaBAwAJ)\n* 2023-Q3: Kick-off work with Igalia on prototyping [ServiceWorker-like protocol handlers for WebExtensions](https://github.com/ipfs/in-web-browsers/issues/212)\n\n#### Brave\n\n[Brave v1.19 has integrated IPFS into their desktop web browser](https://brave.com/brave-integrates-ipfs/) for Windows, macOS and Linux. When Brave detects an address which is an HTTP gateway URL to IPFS content or a native IPFS address such as `ipfs://` or `ipns://` it will prompt the user to install and enable the native IPFS node, or to use an HTTP gateway. \nDiagnostic UI can be found at `brave://ipfs`, we suggest enabling IPFS Companion for the best experience\n\nTLDR integration status:\n\n- Initial release (v1.19) is focused on daemon orchestration and on URI support (read [blogs and press](https://github.com/ipfs/in-web-browsers/issues/64#issuecomment-763016248))\n- Demo: Opening `ipfs://{cid}` will trigger install prompt for go-ipfs managed by Brave itself.\n- For the best experience enable IPFS Companion and switch it to IPFS Node Type [\"Provided by Brave\"](https://docs.ipfs.tech/how-to/companion-node-types/#provided-by-brave). \n  When Companion is enabled all IPFS resources will be resolved by the local node.\n\n#### ipfs-chromium\n\n* 2023-Q3: Project introduction blogpost at [IPFS Multi-Gateway Experiment in Chromium](https://blog.ipfs.tech/2023-05-multigateway-chromium-client/)\n* 2023-Q3: [ipfs-chromium](https://github.com/little-bear-labs/ipfs-chromium) project ships first builds\n* 2023-08-30: [Intent to Experiment: Verifying IPFS client via HTTP APIs](https://chromestatus.com/feature/5105580464668672)\n\n#### Opera\n\nOpera for Android 57 introduced support for resolving `ipfs://` or `ipns://` via a customizable gateway.  \nRead more: https://blog.ipfs.tech/2020-03-30-ipfs-in-opera-for-android/\n\n## Get involved!\n\n<!-- TODO: well, maybe we can bring this back one day...\n\n### Join a meeting\n\nWe'd love to meet you in person at one of our open Web Browsers & GUI Working Group meetings. They're a great way to get quickly up to speed on our work, including latest developments and awesome demos. \n\n- Meeting details at https://github.com/ipfs/team-mgmt/issues/790\n\nYou can also explore [recordings](https://www.youtube.com/playlist?list=PLuhRWgmPaHtRIXVTy_ngBwvsXvWw10mR8) and [notes](https://github.com/ipfs/team-mgmt/tree/master/meeting-notes) from past meetings any time.\n\n-->\n\n### Contribute to an issue\n\nContributions to our work are more than welcome! Every IPFS Project repo makes use of the project-wide [global issue labeling scheme](https://github.com/ipfs/community/blob/master/ISSUE_LABELS.md). Good labels to look for are ...\n- `help wanted`\n- `good first issue`\n- and there are even occasional `bounty` labels for issues with rewards as part of the [IPFS Bounty Board](https://github.com/ipfs/devgrants/projects/1)!\n\nIf you see an issue that catches your eye, leave a comment so we know you're interested, and we'll go from there!\n\nWe're an open project and a friendly group, so please be nice and **read the [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md)** when you're ready to jump in.\n\n### Discuss\n\nFor the sake of async communication, archiving, and searchability, we encourage browser-related technical discussions to happen in the context of GitHub issue comments whenever practical.\n\nIf you want to ask support question, or just chat informally to learn and brainstorm, feel free to join chat community in [#lobby:ipfs.io](https://matrix.to/#/#lobby:ipfs.io) or discussion forum at https://discuss.ipfs.io \n\n\n### Improve docs\n\nhttps://docs.ipfs.io is backed by the repo at https://github.com/ipfs/ipfs-docs \u2013 any help in improving docs related to browsers (or not) is appreciated!\n\n\n### Improve specs\n\nProof-read [ipfs/specs](https://github.com/ipfs/specs/)  and fill an issue for: (1) outdated specs (2) missing specs (3) bits that are confusing and need to be clarified.\n\n## Resources\n\nIf you're looking for endeavors related to IPFS browser integration work, these resources may be helpful.\n\n- [IPFS in Brave Browser](https://brave.com/ipfs-support/): TLDR explanation how Brave supports IPFS out of the box (either as local node, or by delegating to a public gateway of user's choice)\n- [IPFS Companion](https://github.com/ipfs-shipyard/ipfs-companion): Harness the power of your local IPFS daemon directly inside your favorite Chromium or Firefox browser, enabling support for ipfs:// addresses, automatic IPFS gateway loading of websites and file paths, easy IPFS file import and sharing, and more\n- [IPFS Web UI](https://github.com/ipfs-shipyard/ipfs-webui): The IPFS dashboard shipped with the IPFS daemon or IPFS Desktop\n- [js-ipfs-core](https://www.npmjs.com/package/ipfs-core): Core IPFS implementation in JavaScript for use in browser (without Nodejs daemon parts)\n- [HTTP Gateway API docs](https://docs.ipfs.tech/reference/http/gateway/) - implementation-agnostic interface for trusted and trustless data retrieval\n- [HTTP RPC API docs](https://docs.ipfs.tech/reference/kubo/rpc/): Guide to the RPC over HTTP API exposed when a Kubo IPFS node (go-ipfs) is running as a daemon; allows you to control the node and run the same commands you can from the command line\n  - For up-to-date info about which JS client to use, see https://github.com/ipfs/kubo/issues/9125\n- [IPFS GUI group](https://github.com/ipfs-shipyard/pm-ipfs-gui) - The other half of the IPFS Web Browsers & GUI Working Group, dedicated to creating and implementing standards and patterns for IPFS that are simple, accessible, reusable, and beautiful\n", "release_dates": []}, {"name": "infra", "description": "Tools and systems for the IPFS community", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Infrastructure\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> Tools for maintaining infrastructure for the IPFS community.\n\n- Introduction\n- Getting started\n- Usage\n- Known issues\n- Common tasks\n\n## Progress and Tracking\n\n\n[![Throughput Graph](https://graphs.waffle.io/ipfs/infra/throughput.svg)](https://waffle.io/ipfs/infra/metrics/throughput)\n\n## Introduction\n\nThis repository contains the technical infrastructure of the IPFS community.\n\n- Public HTTP-to-IPFS Gateway: https://ipfs.io\n- Default bootstrap used by IPFS: `ipfs bootstrap`\n- Private networking between the hosts (cjdns with nginx access control)\n- Monitoring of services and hosts: http://metrics.ipfs.team\n- Pinbot, an IRC bot in chat.freenode.net/#ipfs-pinbot\n\nInfrastructure that isn't contained here:\n\n- Websites deployment: ipfs.io, dist.ipfs.io, blog.ipfs.io, chat.ipfs.io\n- DNS settings for ipfs.io, ipld.io, multiformats.io, libp2p.io, orbit.chat, ipfs.team, protocol.ai\n- TeamCity CI: http://ci.ipfs.team:8111\n\n## Getting started\n\nWe use a tool called Provsn to maintain the setup of hosts and services.\nThe fundamental principle of Provsn is that hosts are in a certain state,\nand units of code are run to transition into a different state.\n\nProvsn is a plain shell script, and each unit consists of shell scripts too:\n- The `env` script exposes variables and functions to the unit itself, and other units.\n- The `build` script is run on the client and builds container images, config files, etc.\n- The `install` script is run on the host and transitions it into the desired state.\n\n**Note:** there are a few bits of Ansible code left over, which are to be migrated to Provsn.\nYou can find them in the `ansible/` directory.\n\nTo test whether you're all set up, execute a simple command on all hosts.\n\n```sh\n> ./provsn exec all 'whoami'\npluto: root\nuranus: root\n[...]\n```\n\nTwo environment variables can be used to alter Provsn's operation:\n\n- `PROVSN_JOBS` -- this controls the number of hosts to run on in parallel, and defaults to 4.\n- `PROVSN_TRACE` -- if set, this enables Bash tracing (`set -x`) for extensive debugging information.\n  Note that this *will contain sensitive information and secrets*.\n\n## Usage\n\n### Known issues\n\n- no verbose option, need to comment out dev-null-redirections in unit scripts\n- if container that's supposed to be restarted is in a restart loop, we don't notice it's kinda running, and try to start it, and that fails because the name is already in use\n\n### Common tasks\n\n- gathering ipfs debug info\n- updating ipfs\n- deploying a website\n- adding a root user\n- adding hashes to the blocklist\n\n### How can I get ssh access to the instances?\n\nAdd you ssh-key to the list of keys available in `base/env.sh`, like this: https://github.com/ipfs/infrastructure/blob/master/base/env.sh#L9 and then submit a PR with the changes.\n\n### Other community infrastructure:\n\nMore info in https://github.com/ipfs/community\n\n- Github\n  - https://github.com/ipfs\n  - https://github.com/libp2p\n  - https://github.com/ipld\n  - https://github.com/multiformats\n  - https://github.com/protocol\n  - https://github.com/ipfsbot\n- Communication\n  - IRC: chat.freenode.net/#ipfs and https://chat.ipfs.io\n  - ipfs-users group: https://groups.google.com/forum/#!forum/ipfs-users\n  - Slack\n  - https://twitter.com/ipfsbot\n- CI / Testing\n  - GitCop\n  - TeamCity: http://ci.ipfs.team:8111\n  - Travis CI\n  - Circle CI\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/infrastructure/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\nMIT\n", "release_dates": []}, {"name": "integrations", "description": null, "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Integrations tracking\nHere we track the application in which we want to support IPFS.\n\n## Submit applications\nAs a general rule of thumb, any application that can use web resources (http/https) is a potential candidate to integrate IPFS support into.\nCreate an issue in the issue tracker of this repository to let us know which application needs IPFS integration.\n\n## Integrations roadmap\nWe have a sheet [here](https://github.com/ipfs/integrations/issues) detailing the value of having an integration. These are all the issues represented in a sort of table to determine the value an integration can have. Feel free to edit this, add your criteria, add an integration candidate or just refine it in general!\n\n## Completed integrations\nThese integrations have been fully developed and merged in their upstream projects. A release might or might not have been made yet.\n* [FFmpeg](https://ffmpeg.org/) 5.1 has IPFS support.\n  * Usage: `ffplay ipfs://<cid>` or your regular `ffmpeg` command where any input source can be an IPFS resource now.\n  * Example usecase: Your video encode/transcode can now use input resources from IPFS.\n  * Docs can be found [here](https://ffmpeg.org/ffmpeg-protocols.html#ipfs) and the commit enabling IPFS support can be found [here](https://github.com/FFmpeg/FFmpeg/commit/f889837e00d3b2388a24c0a9d075ad62f47da825).\n* [MPV](https://mpv.io/)\n  * Usage: `mpv ipfs://<cid>`\n  * Example usecase: This is purely a mediaplayer on top of FFmpeg. `mpv ipfs://<cid>` would start playing your media.\n  * There are no specific `mpv` docs with `IPFS` because it's a protocol passthrough from mpv directly to FFmpeg. The commit enabling IPFS support can be found [here](https://github.com/mpv-player/mpv/commit/3458651010a68c2384a19ba485e81e22c825782f).\n* [cURL](https://curl.se/) 8.4.0 [PR](https://github.com/curl/curl/pull/8805#issuecomment-1179758610)\n  * Usage: `curl ipfs://<cid>`\n  * Example usecase: Download/access data from cURL. You can use this in scripts or even just as a quick way to download data from IPFS.\n", "release_dates": []}, {"name": "interface-datastore", "description": "datastore interface", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# \u26d4\ufe0f DEPRECATED: This module has been merged into by the [ipfs-interfaces](https://github.com/ipfs/js-ipfs-interfaces) module <!-- omit in toc -->\n\n# interface-datastore <!-- omit in toc -->\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/interface-datastore.svg?style=flat-square)](https://codecov.io/gh/ipfs/interface-datastore)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/ipfs/interface-datastore/ci?label=ci&style=flat-square)](https://github.com/ipfs/interface-datastore/actions?query=branch%3Amaster+workflow%3Aci+)\n\n> Implementation of the [datastore](https://github.com/ipfs/go-datastore) interface in JavaScript\n\n## Lead Maintainer <!-- omit in toc -->\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Table of Contents <!-- omit in toc -->\n\n- [Implementations](#implementations)\n- [Adapter](#adapter)\n- [Install](#install)\n- [Usage](#usage)\n  - [Wrapping Stores](#wrapping-stores)\n  - [Test suite](#test-suite)\n  - [Aborting requests](#aborting-requests)\n  - [Concurrency](#concurrency)\n  - [Keys](#keys)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Implementations\n\n- Backed Implementations\n  - Memory: [`src/memory`](src/memory.js)\n  - level: [`datastore-level`](https://github.com/ipfs/js-datastore-level) (supports any levelup compatible backend)\n  - File System: [`datstore-fs`](https://github.com/ipfs/js-datastore-fs)\n- Wrapper Implementations\n  - Mount: [`datastore-core/src/mount`](https://github.com/ipfs/js-datastore-core/tree/master/src/mount.js)\n  - Keytransform: [`datstore-core/src/keytransform`](https://github.com/ipfs/js-datastore-core/tree/master/src/keytransform.js)\n  - Sharding: [`datastore-core/src/sharding`](https://github.com/ipfs/js-datastore-core/tree/master/src/sharding.js)\n  - Tiered: [`datstore-core/src/tiered`](https://github.com/ipfs/js-datastore-core/blob/master/src/tiered.js)\n  - Namespace: [`datastore-core/src/namespace`](https://github.com/ipfs/js-datastore-core/tree/master/src/namespace.js)\n\nIf you want the same functionality as [go-ds-flatfs](https://github.com/ipfs/go-ds-flatfs), use sharding with fs.\n\n```js\nconst FsStore = require('datastore-fs')\nconst ShardingStore = require('datastore-core').ShardingDatastore\nconst NextToLast = require('datastore-core').shard.NextToLast\n\nconst fs = new FsStore('path/to/store')\n\n// flatfs now works like go-flatfs\nconst flatfs = await ShardingStore.createOrOpen(fs, new NextToLast(2))\n```\n\n## Adapter\n\nAn adapter is made available to make implementing your own datastore easier:\n\n```javascript\nconst { Adapter } = require('interface-datastore')\n\nclass MyDatastore extends Adapter {\n  constructor () {\n    super()\n  }\n\n  async put (key, val) {\n    // your implementation here\n  }\n\n  async get (key) {\n    // your implementation here\n  }\n\n  // etc...\n}\n```\n\nSee the [MemoryDatastore](./src/memory.js) for an example of how it is used.\n\n## Install\n\n```sh\n$ npm install interface-datastore\n```\n\n## Usage\n\n### Wrapping Stores\n\n```js\nconst MemoryStore = require('interface-datastore').MemoryDatastore\nconst MountStore = require('datastore-core').MountDatastore\nconst Key = require('interface-datastore').Key\n\nconst store = new MountStore({ prefix: new Key('/a'), datastore: new MemoryStore() })\n```\n\n### Test suite\n\nAvailable under [`src/tests.js`](src/tests.js)\n\n```js\ndescribe('mystore', () => {\n  require('interface-datastore/src/tests')({\n    async setup () {\n      return instanceOfMyStore\n    },\n    async teardown () {\n      // cleanup resources\n    }\n  })\n})\n```\n\n### Aborting requests\n\nMost API methods accept an [AbortSignal][] as part of an options object.  Implementations may listen for an `abort` event emitted by this object, or test the `signal.aborted` property. When received implementations should tear down any long-lived requests or resources created.\n\n### Concurrency\n\nThe streaming `(put|get|delete)Many` methods are intended to be used with modules such as [it-parallel-batch](https://www.npmjs.com/package/it-parallel-batch) to allow calling code to control levels of parallelisation.  The batching method ensures results are returned in the correct order, but interface implementations should be thread safe.\n\n```js\nconst batch = require('it-parallel-batch')\nconst source = [{\n  key: ..,\n  value: ..\n}]\n\n// put values into the datastore concurrently, max 10 at a time\nfor await (const { key, data } of batch(store.putMany(source), 10)) {\n  console.info(`Put ${key}`)\n}\n```\n\n### Keys\n\nTo allow a better abstraction on how to address values, there is a `Key` class which is used as identifier. It's easy to create a key from a `Uint8Array` or a `string`.\n\n```js\nconst a = new Key('a')\nconst b = new Key(new Uint8Array([0, 1, 2, 3]))\n```\n\nThe key scheme is inspired by file systems and Google App Engine key model. Keys are meant to be unique across a system. They are typically hierarchical, incorporating more and more specific namespaces. Thus keys can be deemed 'children' or 'ancestors' of other keys:\n\n- `new Key('/Comedy')`\n- `new Key('/Comedy/MontyPython')`\n\nAlso, every namespace can be parameterized to embed relevant object information. For example, the Key `name` (most specific namespace) could include the object type:\n\n- `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n\n## API\nhttps://ipfs.github.io/interface-datastore/\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT 2017 \u00a9 IPFS\n\n\n[Key]: #Keys\n[Object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n[Uint8Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[AbortSignal]: https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n[AsyncIterator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\n[AsyncIterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n[String]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n[Number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n[Boolean]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n", "release_dates": ["2021-06-10T18:05:33Z", "2021-05-04T10:14:45Z", "2021-04-15T11:08:33Z", "2021-04-14T11:56:57Z", "2021-04-06T16:50:51Z", "2021-02-05T16:39:09Z", "2021-01-22T18:01:34Z", "2021-01-22T16:56:51Z", "2021-01-17T10:53:11Z", "2021-01-15T16:36:05Z", "2020-11-09T16:33:15Z", "2020-07-29T12:30:10Z", "2020-06-10T18:23:49Z", "2020-06-10T17:12:07Z", "2020-05-07T14:54:31Z", "2020-05-07T12:36:21Z", "2020-05-07T11:21:29Z", "2020-04-07T15:35:31Z", "2020-04-01T12:28:03Z", "2020-02-17T19:37:51Z", "2019-08-09T16:11:49Z", "2019-05-01T10:11:52Z", "2018-09-17T22:29:45Z", "2017-12-05T08:06:33Z", "2017-11-04T14:42:40Z", "2017-11-03T13:26:33Z", "2017-09-07T18:19:28Z", "2017-07-22T21:50:14Z", "2017-06-03T14:39:53Z", "2017-05-23T01:28:07Z"]}, {"name": "interface-go-ipfs-core", "description": "[ARCHIVED] this interface is now part of boxo and kubo/client/rpc", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "### interface-go-ipfs-core\n\n> Legacy CoreAPI interfaces from Kubo (go-ipfs)\n\n# \u2757 This repo is no longer maintained.\n\n\ud83d\udc49 We highly recommend switching to the maintained version at https://github.com/ipfs/boxo/tree/main/coreiface.\n\n\ud83c\udfce\ufe0f Good news!  There is [tooling and documentation](https://github.com/ipfs/boxo#migrating-to-boxo) to expedite a switch in your repo to boxo version, if you depend on this one. \n\n\u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided (unless someone steps in to maintain it).\n\n\ud83d\udcda Learn more, including how to take the maintainership mantle or ask questions, [here](https://github.com/ipfs/boxo/wiki/Copied-or-Migrated-Repos-FAQ).\n", "release_dates": ["2023-05-25T15:14:09Z", "2023-02-10T02:31:49Z", "2023-02-09T06:52:56Z", "2023-01-27T01:20:38Z", "2023-01-24T23:00:43Z", "2022-12-12T20:13:03Z", "2022-12-09T12:49:03Z", "2022-04-21T15:51:39Z", "2021-08-18T03:52:09Z", "2021-08-12T16:44:36Z", "2020-07-29T18:16:56Z", "2020-05-05T00:34:10Z", "2020-02-18T16:50:18Z", "2019-11-25T18:36:19Z", "2019-08-03T01:45:19Z", "2019-05-30T16:27:52Z"]}, {"name": "interop", "description": "Interoperability tests for IPFS Implementations (on-the-wire interop)", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26a0\ufe0f This package is outdated and no longer maintained. \u26a0\ufe0f\n\nThis package contains tests between `{Kubo,js-ipfs} <-> {Kubo,js-ipfs}`.\n\n[Js-ipfs is no longer being maintained](https://github.com/ipfs/js-ipfs/issues/4336) and therefore Kubo <-> Helia [interop](https://github.com/ipfs/helia/tree/main/packages/interop) tests are used instead both within Helia and [within Kubo](https://github.com/ipfs/kubo/issues/10013) CI testing.\n\n# ipfs-interop <!-- omit in toc -->\n\n[![ipfs.io](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io)\n[![IRC](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Discord](https://img.shields.io/discord/806902334369824788?style=flat-square)](https://discord.gg/ipfs)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/interop.svg?style=flat-square)](https://codecov.io/gh/ipfs/interop)\n[![CI](https://img.shields.io/github/workflow/status/ipfs/interop/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/ipfs/interop/actions/workflows/js-test-and-release.yml)\n\n> Interoperability Tests for IPFS\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Run the tests](#run-the-tests)\n  - [Run a particular test locally](#run-a-particular-test-locally)\n- [Testing with different versions of go/js IPFS](#testing-with-different-versions-of-gojs-ipfs)\n  - [As a project](#as-a-project)\n  - [As environmental variables](#as-environmental-variables)\n  - [As a custom runtime](#as-a-custom-runtime)\n- [Releasing a new version](#releasing-a-new-version)\n- [Interop release process for when breaking changes are introduced](#interop-release-process-for-when-breaking-changes-are-introduced)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-interop\n```\n\nThis repository will be used for interop tests. Please jump into the issues if you'd like to help out setting this up!\n\n## Usage\n\n### Run the tests\n\n```console\n$ ipfs-interop\n```\n\n### Run a particular test locally\n\n```console\n$ node bin/ipfs-interop.js -- -t node --grep {substring-test-name}\n```\n\n## Testing with different versions of go/js IPFS\n\n### As a project\n\nThis module declares peer dependencies of `ipfs`, `ipfs-http-client`, `kubo-rpc-client` and `go-ipfs` so if you have `ipfs-interop` as a dependecy of your project, simply add the extra IPFS dependencies:\n\n```json\n{\n  \"name\": \"my-project\",\n  \"scripts\": {\n    \"interop\": \"ipfs-interop\"\n  },\n  \"dependencies\": {\n    \"go-ipfs\": \"...\",\n    \"ipfs\": \"...\",\n    \"ipfs-http-client\": \"...\",\n    \"ipfs-interop\": \"...\",\n    \"kubo-rpc-client\": \"...\"\n  }\n}\n```\n\nThen run:\n\n```console\n$ npm run interop\n```\n\n### As environmental variables\n\nSpecify the following environmental variables to control which versions of IPFS ipfs-interop uses when installed globally:\n\n- `IPFS_GO_EXEC` A path to a go-IPFS binary\n- `IPFS_JS_EXEC` A path to `/src/cli.js` inside a js-IPFS install\n- `IPFS_JS_MODULE` A path to a js-IPFS install\n- `IPFS_JS_HTTP_MODULE` A path to a ipfs-http-client install (optional)\n- `KUBO_RPC_MODULE` A path to a kubo-rpc-client install (optional)\n\nThen run:\n\n```console\n$ npm install -g ipfs-interop\n$ IPFS_GO_EXEC=/path IPFS_JS_EXEC=/path IPFS_JS_MODULE=/path IPFS_JS_HTTP_MODULE=/path ipfs-interop\n```\n\n### As a custom runtime\n\nIf you want to run interop on CI against specific repo and git revision of\ngo-ipfs or js-ipfs\\* then set everything up in `./scripts/custom-runtime.sh`\nand enable it by uncommenting `env:` `IPFS_(..)` definitions in `.github/workflows/test.yml`\n\nIf you want to test against unrelased things locally, make sure the same env\nvariables are set on your machine.\n\nFor example, to run pubsub tests against go-ipfs and js-ipfs revision defined\nin `./scripts/custom-runtime.sh`, one can:\n\n    export IPFS_GO_EXEC=/tmp/go-ipfs/cmd/ipfs/ipfs\n    export IPFS_JS_EXEC=/tmp/js-ipfs/packages/ipfs/src/cli.js\n    export IPFS_JS_MODULE=/tmp/js-ipfs/packages/ipfs/src/index.js\n    export IPFS_JS_HTTP_MODULE=/tmp/js-ipfs/packages/ipfs-http-client/src/index.js\n    export KUBO_RPC_MODULE=/tmp/kubo-rpc-client/src/index.js\n    ./scripts/custom-runtime.sh\n    node bin/ipfs-interop.js -- -t node --grep \"pubsub\"\n\n## Releasing a new version\n\nThis repo does not use aegir for releases.\nUse `npm` directly  and publish entire root (CI in go-ipfs requires it).\n\n    npm version [major|minor|patch]\n    npm publish\n    npm push origin && npm push origin v[N.N.N]\n\n## Interop release process for when breaking changes are introduced\n\n1. Get branches of go-ipfs and js-ipfs working together in interop locally using environment variables to point at the local versions\n2. In this repo make a branch containing the interop changes as well as setting the go/js-ipfs commit hashes to be used by CI. Merge to master.\n3. Update go-ipfs and js-ipfs branches to use interop/master instead of whatever is released\n4. Release go and js-ipfs (not necessarily together) and after each is released (or RC'd) bump interop to use the release instead of the commit hash\n5. Release interop\n6. Bump go and js-ipfs to use released interop instead of master\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipfs-unixfs-importer/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-05-03T10:36:32Z", "2023-05-03T08:30:12Z", "2023-02-23T17:13:02Z", "2023-01-13T17:11:44Z", "2022-11-22T20:10:53Z", "2022-10-06T17:53:50Z", "2022-10-04T18:07:53Z", "2022-09-29T15:36:44Z", "2022-09-22T06:59:43Z", "2022-09-17T15:26:35Z", "2022-09-07T13:15:46Z", "2022-04-19T22:04:58Z", "2022-04-04T09:34:03Z", "2022-01-26T20:43:34Z", "2022-01-26T20:23:31Z", "2022-01-26T20:00:10Z", "2022-01-26T19:39:09Z", "2022-01-26T19:24:59Z", "2022-01-26T19:09:43Z", "2022-01-26T19:00:46Z", "2022-01-26T18:15:33Z", "2020-07-30T10:23:37Z"]}, {"name": "ipfs", "description": "Peer-to-peer hypermedia protocol", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS is an open system to manage data without a central server\n\nCheck out our website at [ipfs.tech](https://ipfs.tech).\n\nFor papers on IPFS, please see the [**Academic Papers**](https://docs.ipfs.tech/concepts/further-reading/academic-papers) section of the [IPFS Docs](https://docs.ipfs.tech).\n\n## License\n\n[MIT](LICENSE).\n", "release_dates": []}, {"name": "ipfs-blog", "description": "IPFS Blog & News", "language": "Vue", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Blog & News\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?)](http://ipfs.io/)\n[![](https://img.shields.io/badge/platform-VuePress-green.svg)](https://vuepress.vuejs.org/)\n[![](https://img.shields.io/badge/cms-Forestry-000000.svg)](https://forestry.io)\n[![](https://img.shields.io/badge/deployed%20on-Fleek-ff69b4.svg)](http://fleek.co/)\n\n![Image of IPFS blog displayed on a laptop](https://user-images.githubusercontent.com/1507828/110040308-d2331580-7cff-11eb-8a05-8f5bad5ca819.png)\n\nThis repository contains code and content for the [IPFS Blog & News](https://blog.ipfs.tech) website. To contribute to the site, please follow the instructions below for _post authors/editors_ and _site developers_.\n\n**If you just want to submit a link (event, academic paper, tutorial, video or news coverage) to add to the site, [use this easy form](https://airtable.com/shrNH8YWole1xc70I)!**\n\n### Creating a new blog post via Github pull request\n\nEach blog post is a markdown file in the [`src/_blog`](./src/_blog) folder, with a little metadata at the top (known as YAML frontmatter) to help us create the post index page.\n\nA blog post looks like this:\n\n```markdown\n---\ntitle: Announcing the New IPFS Community Calendar\ndescription: 'Check out the new IPFS community calendar where you can participate and contribute to one of the many working groups advancing IPFS.'\nauthor: Daniel Norman\ndate: 2022-12-15\npermalink: '/2022-12-ipfs-community-calendar/'\nheader_image: '/ipfs-calendar/ipfs-calendar-cover.png'\ntags:\n  - 'community'\n  - 'calendar'\n  - 'working groups'\n---\n\n## The IPFS community is growing\n\n...\n```\n\n**To create your new post** create a new markdown `md` file in `src/_blog` prefixed with the year and month (as a convention) and change the name to be relevant for your post. e.g.\n\n```console\n$ cd src/_blog\n$ touch 2022-12-community-calendar.md\n```\n\nNow edit the metadata at the top of the file.\n\n- `title` - used as the `h1` and `title` tag on the post-page, and the name of the post on the index page. **required**\n- `description` - used as the meta description tag on the post-page. **required**\n- `date` - the \"_published at_\" date, shown on the [blog index page](https://blog.ipfs.io), please update at posting time to reflect current date - **required** (posts will not be displayed until this date on the live blog, but you will see them locally when using `make dev`)\n- `author` - used to give you credit for your words - **required**\n- `permalink` - the path to the blog post. Please start and end URLs with a `/` (`/my/url/`). **required**\n- `tags` - used to categorize the blog post\n- `header_image` - name of the image displayed on the [blog homepage](https://blog.ipfs.tech/). See [Custom header image](#custom-header-image) for more details.\n\n#### Custom header image\n\nEach post can have a custom image that is shown on the [blog homepage](https://blog.ipfs.tech/). To set an image:\n\n1. Add the image into `assets\\header_images`. Typically the image is `2048\u00d71152px` in jpg/png.\n1. Rename the image to match the file name of your post. For example, the `2022-12-community-calendar.md` post uses `2022-12-community-calendar.png` as the header.\n1. In the post markdown, edit the front-matter to include the `header_image` variable:\n\n\t```markdown\n\theader_image: 2022-12-community-calendar.png\n\t```\n\n#### Creating a pull request\n\nTo create a pull request, you will need to fork this repository. See the GitHub docs on [how to create a pull request from a fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork). If you have the [GitHub CLI](https://cli.github.com/) installed, you can use the [`gh pr create` command](https://cli.github.com/manual/gh_pr_create) from the terminal to conveniently create a pull request.\n\nOnce you create the pull request, await review. If you have permissions to merge, always preview the post first to ensure everything looks right. You can do this by clicking on the \"Details\" link next to the **fleek/build** check that runs automatically. Clicking this link will take you to a staging site where you will then need to click on the intended post in the feed to see it.\n\n### To add a URL redirect for a blog post\n\nPlease add a new line to [`src/.vuepress/redirects`](https://github.com/ipfs/ipfs-blog/blob/main/src/.vuepress/redirects) and make a PR of the change to `main`.\n\n## For site developers\n\n\u26a0\ufe0f **Important!** All _site development work_ (as opposed to blog posts) should be based on and merged into `main`, **not** `staging`.\n\n### Build and run locally\n\nThis site is built in [Vuepress](https://vuepress.vuejs.org/guide/), and uses Vue/JavaScript for functional code and Markdown for post content.\n\nTo build a local copy, run the following:\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/ipfs/ipfs-blog.git\n   ```\n\n1. Move into the `ipfs-blog` folder and install the npm dependencies:\n\n   ```bash\n   cd ipfs-blog\n   npm install\n   ```\n\n1. Start the application in _dev mode_:\n\n   ```bash\n   npm start\n   ```\n\n1. On the latest version of Node (>=18) you'll encounter `ERR_OSSL_EVP_UNSUPPORTED` errors. To fix this, either use Node 16 or:\n\n   ```bash\n   NODE_OPTIONS=--openssl-legacy-provider npm start\n   ```\n\n1. Open [localhost:8080](http://localhost:8080) in your browser.\n\nYou can close the local server with `CTRL` + `c`. To restart the local server, run `npm start` from inside the `ipfs-blog` directory.\n\n### PR and preview\n\nOnce you're happy with your local changes, please make a PR **against the `main` branch**. Including detailed notes on your PR - particularly screenshots to depict any changes in UI - will help speed up approval and deployment.\n\nAll PRs against `main` automatically generate Fleek previews to make it easier to \"check your work\". You can view your PR's preview by clicking `Details` in the `fleek/build` check at the bottom of your PR page:<br/>\n![image](https://user-images.githubusercontent.com/1507828/110034382-9dbb5b80-7cf7-11eb-89a4-7772970677d3.png)\n\nA reviewer will be by shortly to have a look!\n\n## Maintainers\n\nThis site's codebase is under active maintenance by members of the core [IPFS team](https://ipfs.io/team/).\n\n## License\n\n\u00a9 Protocol Labs | Code is licensed with the [MIT](LICENSE) License. Except as noted, other content licensed [CC-BY 3.0](https://creativecommons.org/licenses/by/3.0/us/).\n", "release_dates": []}, {"name": "ipfs-camp-2022", "description": "Conference content and other resources for IPFS Camp 2022 in Lisbon, Portugal", "language": null, "license": null, "readme": "# IPFS Camp 2022 Resources\n\nWelcome to IPFS Camp 2022!\n\nWe are excited to welcome this community to Lisbon, Portugal for 3 days of learning and growing together. This repository will be used as a record of the conference, with links to resources such as videos & slides. Please see the [IPFS Camp 2022](https://2022.ipfs.camp/) website for more info.\n\n## \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc69\u200d\ud83d\ude80 Keynotes (Day 1: Oct 28) // [YouTube Playlist](https://www.youtube.com/playlist?list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0_)\n| Title | Speaker(s) | Description | Links |\n| :---- |  :-------- |  :-------- | :-------- |\n|Welcome|Mosh Lee and Dietrich Ayala (Protocol Labs)|Welcome to IPFS Camp and overview of the Keynotes session!|[Video](https://www.youtube.com/watch?v=yIbZUi7cTX8&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0_) <br/> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g1783b2f697b_2_11)|\n|The State of the IPFS Ecosystem|Molly Mackinlay (Protocol Labs)|Short overview of the state of the IPFS world by the numbers, highlighting major events and network growth from the past few years.|[Video](https://www.youtube.com/watch?v=fGwhPLik3_4&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0_) <br/> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g12b77ef2beb_0_18)|\n|Decentralization and Human Rights Panel|Jonathan Dotan (Starling Lab), Phoebe Poon (Liker Land), |In this session, we'll hear from 3 speakers across 3 continents who use IPFS for human rights documentation and censorship resistance, energizing and imbuing all our work with purpose.|[Video](https://www.youtube.com/watch?v=0gbMYNEIVZ8&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0) <br /> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g12b77ef2beb_0_63)|\n|IPFS Applications Showcase|Jay Graber (Bluesky), Manos (WeatherXM), Francis (Omnilingo)|Three IPFS applications show off what they've built and share the critical needs the protocol and implementations must deliver on in order to succeed.|[Video](https://www.youtube.com/watch?v=wzowGDUMC_g&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0) <br /> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g12b77ef2beb_0_53)|\n|IPFS Implementations|Gus Eggert (kubo), Brendan O'Brien (Iroh), Alan Shaw (Elastic IPFS), Alex Potsides (js-ipfs), Juan Benet (IPFS inventor)|Lightning talks from the lead maintainers of key IPFS implementations on the current state and future of each, followed by a look forward the future from IPFS inventor Juan Benet.|[Video](https://www.youtube.com/watch?v=HRYREdsLt5k&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0) <br /> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g12b77ef2beb_0_82)|\n|IPFS Fund Announcement|Dietrich Ayala, Juan Benet, Mosh Lee|Learn about a new funding effort to expand IPFS implementations into new and different areas and support broad ecosystem initiatives such as education, developer tooling, and more.|[Video](https://www.youtube.com/watch?v=dBnmUiKc3P0&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0) <br /> [Slides](https://docs.google.com/presentation/d/16_a-OnZ32xS5vjVvVEM2WB4OvquhAcHSafsmno3LbrY/edit#slide=id.g17806b07603_3_15)|\n|Track-o-Rama|All track leads|With over 15 tracks and a choose-your-own adventure format, how will you choose? In this session, you'll hear 60-second pitches from each track.|[Video](https://www.youtube.com/watch?v=O7sRMO1UpTE&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0)|\n|Voice Gems: A 1000 Year Archive|Harry Yeff (Reeps100)|In 2020 Harry Yeff and Trung Bao set out to preserve a set of human voices for 1000 years, a feat that evokes many challenges and questions. In this talk & performance, artist and technologist Harry Yeff (Reeps100) showcases his portfolio of speed-of-light radio transmission, AI synthetic voices and how emerging technologies provide an artistically explosive and vital discussion on new methods of preservation.|[Video](https://www.youtube.com/watch?v=SumKPB7VUDA&list=PLuhRWgmPaHtTQlocvCwd0gamK3ZgdRX0)|\n\n## Day 1 Tracks: Friday, Oct 28, 2022\n\n### [Decentralized Science (DeSci)](Decentralized%20Science%20(DeSci))\nDecentralized Science (DeSci) is one of the fastest growing communities within the Web3 ecosystem, which aims to accelerate scientific breakthroughs and foster open collaboration by leveraging modern Web3 technologies (IPFS) and crypto-incentives (IP-NFTs).\n\n### [IPFS 101 and User Apps](IPFS%20101%20and%20User%20Apps)\nA hands on session on getting started with IPFS, including what it is, how to set up an IPFS node, CLI commands, pinning, gateways and more. If you've been wanting to try out IPFS - now's your chance!<br> The User Apps component is a highlights reel of the most exciting and useful user and developer tools for IPFS\n\n### [IPFS Implementations](IPFS%20Implementations)\nA wave of new IPFS implementations has grown in the past year. Meet the teams taking IPFS to the next level and find your on-ramp to working on the protocol\n\n### [Measurement & Performance](Measurement%20&%20Performance)\nA data-driven approach to the design and operation of IPFS and libp2p through rigorous network measurements, performance evaluation and recommendations for builders and operators.\n\n## Day 2 Tracks: Saturday, Oct 29, 2022\n\n### [Browsers & Platforms](Browsers%20&%20Platforms)\nLearn the current status, ongoing challenges, and upcoming work to integrate IPFS and related technologies into browsers and the web itself.\n\n### [Compute over Data](Compute%20over%20Data)\nProducing data without leaving the Merkle Forest -- How do we do it?  How do we make it manageable at scale?  How do we make the results useful and discoverable?  In this track, see what others are up to, and share your own dreams!\n\n### [Content Routing](Content%20Routing)\nApproaches and protocols to content routing in IPFS, what we've learned so far, and talks about possible directions for the future.\n\n### [Data Transfer](Data%20Transfer)\nGetting and sending content. Moving data across the wire.\n\n### [IPFS 201: Design Patterns & Developer Tools](./IPFS%20201%20Design%20Patterns%20%26%20Develops%20Tools/README.md)\nWorkshops, demos, and an expert panel covering IPFS app architectures, developer tools design patterns, developer experience and everything you need to know to build and deploy robust production-grade content-addressed apps.\n\n### [IPFS Operators & Enterprise](IPFS%20Operators%20&%20Enterprise)\nExplore applications & deployments of IPFS in large scale cloud & enterprise use cases with talks from IPFS operators about their experiences and best practices.\n\n### [Decentralized Job Fair](Decentralized%20Job%20Fair)\nWhether you are looking for a new role, hiring for your project, or simply want to learn more about open source projects that you can contribute to, the Decentralized Job Fair is for you. Signup: https://lu.ma/ipfscamp22.jobfair\n\n### Measurement and Performance Unconf\n\n## Day 3 Tracks: Sunday, Oct 30, 2022\n\n### [Gaming, Metaverse, & Video](Gaming,%20Metaverse,%20&%20Video)\nDemos of how IPFS can save bandwidth and increase flexibility. Talks about directions for the future.\n\n### [Growing with IPFS](Growing%20with%20IPFS)\nBuilding, Funding & Contributing with IPFS. Hear from the team, founders & leading web3 investors on how to contribute to IPFS, where to build, how to get funded (e.g. grants), how to get accelerated, how to get investment, how to get hired, learn from a notable startup that's done it, and also hear from leading web3 investors on how to fundraise. \n\n### [Libp2p Day](Libp2p%20Day)\nThe first ever libp2p Day: a gathering for libp2p builders, contributors, and maintainers!\n\n### [Libp2p Privacy](Libp2p%20Privacy)\nDive into the current privacy work happening on libp2p and get the chance to provide feedback on direction and next steps and hear from experts in the field.\n\n### [Lightning Talks Session 1](Lightning%20Talks%20Session%201)\nHear a fantastic lineup of 15-minute talks covering a range of IPFS-related topics!\n\n### [Lightning Talks Session 2](Lightning%20Talks%20Session%202)\nHear a fantastic lineup of 15-minute talks covering a range of IPFS-related topics!\n\n## Wanna join the Community Conversation?\n\nCheck out [our community page](https://docs.ipfs.tech/community/) for all the ways you can engage.\n\n### Photos and Media\n\nFor \ud83d\udcf8 Photos, head to **INSERT HOW TO SEE PHOTOS HERE**\n\n## Schedule Overview\n\nThe schedule for the event can be found at **https://2022.ipfs.camp/#schedule**\n\nJoin other campers and stay connected on the [IPFS Camp Slack](https://join.slack.com/t/ipfs-camp/shared_invite/zt-1gh6dc0ua-T0oVLSHNkvteGheH7cyiDg)!\n", "release_dates": []}, {"name": "ipfs-companion", "description": "Browser extension that simplifies access to IPFS resources on the web", "language": "JavaScript", "license": {"key": "cc0-1.0", "name": "Creative Commons Zero v1.0 Universal", "spdx_id": "CC0-1.0", "url": "https://api.github.com/licenses/cc0-1.0", "node_id": "MDc6TGljZW5zZTY="}, "readme": "<h1 align=\"center\">IPFS Companion Browser Extension</h1>\n\n<p align=\"center\" style=\"font-size: 1.2rem;\">Harness the power of <a href=\"https://ipfs.tech\">IPFS</a> in your browser!</p>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://discuss.ipfs.tech\"><img alt=\"Discourse Forum\" src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fdiscuss.ipfs.tech&amp;color=blue\"></a>\n  <a href=\"https://matrix.to/#/#ipfs-space:ipfs.io\"><img alt=\"Matrix Chat\" src=\"https://img.shields.io/matrix/ipfs-space%3Aipfs.io?server_fqdn=matrix.org&amp;color=blue\"></a>\n  <a href=\"https://github.com/ipfs/ipfs-companion/releases\"><img alt=\"GitHub release\" src=\"https://img.shields.io/github/v/release/ipfs/ipfs-companion?filter=!*rc*\"></a>\n  <a href=\"https://github.com/ipfs-shipyard/ipfs-companion/blob/main/docs/LOCALIZATION-NOTES.md\"><img src=\"https://img.shields.io/badge/i18n-translated-blue.svg\" alt=\"i18n status\"></a>\n  <a href=\"https://github.com/ipfs/ipfs-companion/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/ipfs-companion/ci.yml?branch=main\" alt=\"ci\"></a>\n</p>\n\n<a href=\"https://docs.ipfs.tech/install/ipfs-companion/\"><img src=\"https://gateway.ipfs.io/ipfs/QmSsGphTN1eWMhkFFNFb23jWTXyhNbo47PF9FbmC6ZaRNg\" alt=\"Companion UX demo\" title=\"Companion UX demo\" width=\"100%\"></a>\n\n<div align=\"center\">\n  \n| <img src=\"https://unpkg.com/@browser-logos/firefox/firefox_16x16.png\" width=\"16\" height=\"16\"> [Firefox](https://www.mozilla.org/firefox/new/) \\| [Firefox for Android](https://play.google.com/store/apps/details?id=org.mozilla.firefox) | <img src=\"https://unpkg.com/@browser-logos/chrome/chrome_16x16.png\" width=\"16\" height=\"16\"> [Chrome](https://www.google.com/chrome/) \\| <img src=\"https://unpkg.com/@browser-logos/brave/brave_16x16.png\" width=\"16\" height=\"16\"> [Brave](https://brave.com/) \\| <img src=\"https://unpkg.com/@browser-logos/opera/opera_16x16.png\" width=\"16\" height=\"16\"> [Opera](https://www.opera.com/)  \\| <img src=\"https://unpkg.com/@browser-logos/edge/edge_16x16.png\" width=\"16\" height=\"16\"> [Edge](https://www.microsoftedgeinsider.com/)\n|------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [![Install From AMO](https://ipfs.io/ipfs/QmWNa64XjA78QvK3zG2593bSMizkDXXcubDHjnRDYUivqt)<br>![](https://img.shields.io/amo/users/ipfs-companion?label=AMO%20users&style=social)](https://addons.mozilla.org/firefox/addon/ipfs-companion/) | [![Install from Chrome Store](https://ipfs.io/ipfs/QmU4Qm5YEKy5yHmdAgU2fD7PjZLgrYTUUbxTydqG2QK3TT)<br>![](https://img.shields.io/chrome-web-store/users/nibjojkomfdiaoajekhjakgkdhaomnch?label=Chrome%20Web%20Store%20users&style=social)](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch) |\n\n</div>\n\n<hr />\n\n## Table of contents\n\n- [About IPFS Companion](#about-ipfs-companion)\n- [Features](#ipfs-companion-features)\n- [Install](#install-ipfs-companion)\n- [Contribute](#contribute)\n- [Help & Troubleshooting](#help--troubleshooting)\n- [Privacy & Licenses](#privacy--license-info)\n\n## About IPFS Companion\n\nIPFS Companion harnesses the power of your locally running IPFS node (either through the [IPFS Desktop](https://docs.ipfs.io/install/ipfs-desktop/) app or the [command-line daemon](https://docs.ipfs.io/install/command-line/)) directly inside your favorite Chromium-based or Firefox browser, enabling support for [`ipfs://` addresses](https://docs.ipfs.io/how-to/address-ipfs-on-web/#native-urls), redirecting content-addressed  websites and file paths to your local [Gateway](https://docs.ipfs.io/concepts/glossary/#gateway), easy IPFS file import and sharing, and more.\n\nIPFS is a peer-to-peer hypermedia protocol designed to make the web faster, safer, more resilient, and more open. It enables the creation and dissemination of completely distributed sites and applications that don\u2019t rely on centralized hosting and stay true to the original vision of an open, flat web. Visit [the IPFS Project website](https://ipfs.io) to learn more.\n\n## IPFS Companion features\n\n### Automatically detect and redirect IPFS resources\n\n#### Detect URLs with IPFS paths\n\nIPFS Companion detects and tests requests for IPFS-like paths ( such as `/ipfs/{cid}` or `/ipns/{peerid_or_host-with-dnslink}`) on any website. If a path is a [valid IPFS address](https://github.com/ipfs/is-ipfs), it is redirected to load from your local gateway. The gateway at `localhost` will also automatically switch to a subdomain to provide a unique origin for each website:\n> `https://ipfs.io/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR`\n> \u2192 `http://localhost:8080/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR`\n> \u2192 `http://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi.ipfs.localhost:8080`\n\n#### Detect DNSLink-enabled URLs\n\nIPFS Companion [detects DNSLink info](http://docs.ipfs.io/how-to/dnslink-companion/) in the DNS records of websites. If a site uses DNSLink (a few examples are https://docs.ipfs.io, https://ipld.io, and http://tr.wikipedia-on-ipfs.org), IPFS Companion redirects the HTTP request to your local gateway:\n\n> `http://docs.ipfs.tech`\n> \u2192 `http://localhost:8080/ipns/docs.ipfs.tech` \u2192 `http://docs.ipfs.tech.ipns.localhost:8080/`\n\n#### Detect pages with `x-ipfs-path` headers\n\nIPFS Companion also upgrades transport to IPFS if it finds the `x-ipfs-path` in any HTTP response headers; this also acts as a fallback for cases when an IPFS path is not present in the URL. [Learn more.](http://docs.ipfs.io/how-to/companion-x-ipfs-path-header/)\n\n\n#### Toggle redirects globally or per site\n\nYou can disable and re-enable local gateway redirects by several means:\n- Suspend redirects **globally** in IPFS Companion's preferences\n- Suspend redirects **per site** using the toggle under \"Current tab\" ([illustrated below](#toggle-gateway-redirects-on-a-per-website-basis)) or in IPFS Companion's preferences\n- Add `x-ipfs-companion-no-redirect` to the URL itself as a hash ([example](https://ipfs.io/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR#x-ipfs-companion-no-redirect)) or query parameter ([example](https://ipfs.io/ipfs/QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR?x-ipfs-companion-no-redirect))\n\n### Access frequently-used IPFS actions from your browser bar\n\nIPFS Companion enables you to quickly and easily access common actions from your browser bar with just a few clicks:\n\n- See how many peers you're connected with a glance at the cube icon in your browser bar\n- Check your IPFS API and gateway status by clicking the cube icon to reveal the main menu\n- Right-click images and other page assets to easily add them to IPFS (including the option to preserve file names)\n- Choose the _Import_ option in the main menu for quick drag-and-drop import from a browser tab\n- Pin or unpin IPFS resources (via API) directly from the main menu\n- Copy shareable public gateway links, IPFS content paths, or CIDs of IPFS resources directly from the main menu\n- Launch the [IPFS Web UI dashboard](https://github.com/ipfs-shipyard/ipfs-webui) from the main menu with a single click\n- Toggle gateway redirects or switch all IPFS Companion features on/off quickly and easily from the main menu (illustrations below)\n\n#### Toggle gateway redirects on a per-website basis\n\nYou can toggle redirects (of any IPFS sub-resources) for an individual website under the _Current Tab_ section of the main menu. If that site uses DNSLink, toggling off will restore the site's original URL, too.\n\n![Toggle per-site opt-out](https://gateway.ipfs.io/ipfs/QmYWXd4TSjk1RSzqzpaUbYp42obYjWtRme1oeYaTUdqkWu)\n\n#### Switch all IPFS Companion features on/off\n\nTo temporarily suspend all IPFS integrations (redirects, API status content scripts, protocol handlers, etc.), use the on/off button at the top of the IPFS Companion menu.\n\n![Turn IPFS Companion off and on again](https://gateway.ipfs.io/ipfs/QmZqyBnLY1jatj2ppJEbJqyj8oJecZt7chNB62jhhq8f9g)\n\n### Try out experiments!\n\nIPFS Companion ships with a variety of experimental features. Some are disabled by default, so be sure to check out IPFS Companion's Preferences to see them all.\n\n- Make plaintext IPFS links clickable ([demo](https://ipfs.io/ipfs/bafybeidvtwx54qr44kidymvhfzefzxhgkieigwth6oswk75zhlzjdmunoy/linkify-demo.html))\n- Re-route requests made via the following [experimental protocols](https://github.com/ipfs/ipfs-companion/issues/164) to an HTTP gateway (public or custom):\n    - `ipfs://$cid`\n    - `ipns://$cid_or_fqdn`\n\n## Install IPFS Companion\n\n### Latest stable release\n\n| <img src=\"https://unpkg.com/@browser-logos/firefox/firefox_16x16.png\" width=\"16\" height=\"16\"> [Firefox](https://www.mozilla.org/firefox/new/) \\| [Firefox for Android](https://play.google.com/store/apps/details?id=org.mozilla.firefox) | <img src=\"https://unpkg.com/@browser-logos/chrome/chrome_16x16.png\" width=\"16\" height=\"16\"> [Chrome](https://www.google.com/chrome/) \\| <img src=\"https://unpkg.com/@browser-logos/brave/brave_16x16.png\" width=\"16\" height=\"16\"> [Brave](https://brave.com/) \\| <img src=\"https://unpkg.com/@browser-logos/opera/opera_16x16.png\" width=\"16\" height=\"16\"> [Opera](https://www.opera.com/) \\| <img src=\"https://unpkg.com/@browser-logos/edge/edge_16x16.png\" width=\"16\" height=\"16\"> [Edge](https://www.microsoftedgeinsider.com/)\n|------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [![Install From AMO](https://ipfs.io/ipfs/QmWNa64XjA78QvK3zG2593bSMizkDXXcubDHjnRDYUivqt)<br>![](https://img.shields.io/amo/users/ipfs-companion?label=AMO%20users&style=social)](https://addons.mozilla.org/firefox/addon/ipfs-companion/) | [![Install from Chrome Store](https://ipfs.io/ipfs/QmU4Qm5YEKy5yHmdAgU2fD7PjZLgrYTUUbxTydqG2QK3TT)<br>![](https://img.shields.io/chrome-web-store/users/nibjojkomfdiaoajekhjakgkdhaomnch?label=Chrome%20Web%20Store%20users&style=social)](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch) |\n\n**Important!** Make sure you have [IPFS installed](https://ipfs.io/#install) on your computer as well. Because IPFS Companion (in its standard configuration) talks to your computer\u2019s local IPFS node to work its browser magic, you\u2019ll need to have IPFS running on your computer, too.\n\nIt's also possible to grab [vendor-specific packages for each release](https://github.com/ipfs-shipyard/ipfs-companion/releases),\nbut these builds are not signed, nor will automatically update. `.zip` bundles are meant only to be manually loaded via `chrome://extensions` (Chromium) or `about:debugging` (Firefox) for smoke-testing.\n\n### Development\n\nTo work on IPFS Companion's code, you'll need to install it from source. Quick steps are below, but see the full [developer notes](./docs/DEVELOPER-NOTES.md) for more detailed instructions and tips.\n\n1. Clone https://github.com/ipfs-shipyard/ipfs-companion.git\n2. Run this all-in-one dev build to install dependencies, build, and launch in the browser of your choice:\n    * Chromium\n        ```console\n        $ npm run dev-build chromium\n        ```\n    * Firefox\n        ```console\n        $ npm run dev-build firefox    # firefox:nightly works too!\n        ```\n\n## Contribute\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](./docs/CONTRIBUTING.md)\n\nAll are welcome to help make IPFS Companion even better!\n- Check out the [contribution guide](./docs/CONTRIBUTING.md) for how to get started as a developer\n- Open an [issue](https://github.com/ipfs/ipfs-companion/issues)\n- Make sure you read and abide by the [IPFS Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md)\n\n## Release Process\n\nThe release process has been [documented here](./docs/RELEASE-PROCESS.md).\n\n## Help & troubleshooting\n\n### Ask a question\nThe best place to ask about IPFS Companion (or IPFS in general!) is in the [official IPFS Forums](https://discuss.ipfs.io/), where you can search past discussions for others who may have had the same questions, too. There's also an active [#ipfs](https://webchat.freenode.net/?channels=ipfs) community on IRC.\n\n### Common troubleshooting steps\nThese frequently encountered troubleshooting situations may be helpful:\n- **Import via right-click does not work in Firefox:** See [this workaround](https://github.com/ipfs/ipfs-companion/issues/227).\n- **HTTP-to-HTTPS redirects fail when using Ghostery:** [Ghostery](https://addons.mozilla.org/en-US/firefox/addon/ghostery/) is known to toy with HTTP-to-HTTPS redirect, which in some setups breaks websites utilizing public gateways [(more details)](https://github.com/ipfs-shipyard/ipfs-companion/issues/466). Until this is fixed upstream, a workaround is to [whitelist](https://user-images.githubusercontent.com/157609/39089525-5834c104-45c9-11e8-9e17-4459a97e5676.png) affected sites.\n- **NoScript breaks IPFS Companion:** By default, [NoScript](https://addons.mozilla.org/en-US/firefox/addon/noscript/) breaks IPFS Companion by blocking assets loaded from an IPFS gateway running on localhost. To fix this, extend the SYSTEM ruleset and prepend it with IPFS whitelist (feel free to modify this, but get familiar with [ABE rule syntax](https://noscript.net/abe/abe_rules.pdf) first):\n```\n# Enable IPFS redirect to LOCAL\nSite ^http://127.0.0.1:8080/(ipfs|ipns)*\nAnonymize\n\n# Prevent Internet sites from requesting LAN resources.\nSite LOCAL\nAccept from LOCAL\nDeny\n```\n\n## Privacy & license info\n\n- IPFS Companion [Privacy policy](./PRIVACY-POLICY.md)\n- The IPFS logo belongs to the [IPFS Project](https://github.com/ipfs) and is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/legalcode\">CC-BY-SA 3.0</a> license\n- [is-ipfs](https://github.com/ipfs-shipyard/is-ipfs), [js-multihash](https://github.com/multiformats/js-multihash), and other npm dependencies are under MIT license, unless stated otherwise\n- IPFS Companion itself is released under [CC0](LICENSE); to the extent possible under law, the author has waived all copyright and related or neighboring rights to this work, effectively placing it in the public domain\n", "release_dates": ["2023-09-25T20:28:37Z", "2023-09-25T19:34:44Z", "2023-09-21T21:36:38Z", "2023-02-22T21:05:28Z", "2023-02-15T21:37:44Z", "2023-01-27T22:09:21Z", "2022-12-19T00:28:21Z", "2022-11-24T17:58:03Z", "2021-06-30T15:56:55Z", "2021-05-10T12:59:20Z", "2021-03-11T21:05:03Z", "2021-01-29T15:07:41Z", "2021-01-20T23:00:16Z", "2021-01-18T20:56:55Z", "2021-01-18T04:10:43Z", "2021-01-11T14:06:29Z", "2021-01-07T14:34:03Z", "2020-11-28T00:04:20Z", "2020-11-18T21:13:17Z", "2020-11-09T23:40:41Z", "2020-10-29T22:25:26Z", "2020-10-20T13:35:47Z", "2020-10-16T14:32:18Z", "2020-07-21T21:16:09Z", "2020-07-10T18:25:22Z", "2020-07-09T00:05:31Z", "2020-06-15T22:30:28Z", "2020-06-13T13:33:33Z", "2020-06-04T18:36:11Z", "2020-05-28T19:50:11Z"]}, {"name": "ipfs-desktop", "description": "An unobtrusive and user-friendly desktop application for IPFS on Windows, Mac and Linux. ", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Desktop\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai/)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech/)\n[![total download count](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/total.svg?style=flat-square&label=all%20downloads)](https://github.com/ipfs/ipfs-desktop/releases)\n[![latest release download count](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/total.svg?style=flat-square)](https://github.com/ipfs/ipfs-desktop/releases/tag/v0.33.0)\n\n**IPFS Desktop gives you all the power of [IPFS](https://ipfs.io) in a convenient desktop app: a complete IPFS node, plus handy OS menubar/taskbar shortcuts and an all-in-one file manager, peer map, and content explorer.**\n\nUse IPFS Desktop to get acquainted with IPFS without needing to touch the terminal \u2014 or, if you're already experienced, use the powerful menubar/taskbar shortcuts alongside the command line to make your IPFS workflow faster.\n\n![Status screen of IPFS Desktop](https://gateway.ipfs.io/ipfs/QmYHuXitXMf5xTjiQXmXdqszvMTADvrM5zA7EqoDj3d3RH)\n\n| Files screen | Explore screen | Peers screen | Settings screen | Menubar/taskbar |\n|-------|---------|-------|----------|------|\n| ![Screenshot of the Files screen](https://gateway.ipfs.io/ipfs/QmRN82RPWHKuSuBadijTQuaCjFKAGaymt3aFBoG6Du9Vi3) | ![Screenshot of the Explore screen](https://gateway.ipfs.io/ipfs/Qmaerxh9UKf9F3YPKnV2cBEnPQoJdVmkswFdz7kNQGncKt) | ![Screenshot of the Peers screen](https://gateway.ipfs.io/ipfs/QmaVbBYsEBb34HMP1YWeErrS7X3TB6Y9t1iQ4sBRnTvSwa) | ![Screenshot of the Settings screen](https://gateway.ipfs.io/ipfs/Qmby5RuN7K9s5W9RVLdrQSE8gRKQ66EX8c39iC31DLAxN6) | ![Screenshot of Mac/Windows menus](https://gateway.ipfs.io/ipfs/QmbT2YtuNo17Qaq31FJWRZgRMY4E6N9cdfBwzZTFSHUoBP) |\n\n### Quick-install shortcuts\n\nWhen in doubt, pick one of package formats with built-in automatic update mechanism:\n\n- **Mac:** [ipfs-desktop-0.33.0-mac.dmg](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-mac.dmg)\n- **Windows:** [IPFS-Desktop-Setup-0.33.0.exe](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/IPFS-Desktop-Setup-0.33.0.exe)\n- **Linux:**  [ipfs-desktop-0.33.0-linux-x86_64.AppImage](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.AppImage)\n  - If you prefer to manage updates on your own, see [other package formats](#install) below.\n\n### Table of Contents\n\n- [IPFS Desktop](#ipfs-desktop)\n    - [Quick-install shortcuts](#quick-install-shortcuts)\n    - [Table of Contents](#table-of-contents)\n  - [Features](#features)\n    - [Start your node at system startup and control it from your OS](#start-your-node-at-system-startup-and-control-it-from-your-os)\n    - [Quickly import files, folders, and screenshots to IPFS](#quickly-import-files-folders-and-screenshots-to-ipfs)\n    - [Easily manage the contents of your node](#easily-manage-the-contents-of-your-node)\n    - [Visualize your IPFS peers worldwide](#visualize-your-ipfs-peers-worldwide)\n    - [Explore the \"Merkle Forest\" of IPFS files](#explore-the-merkle-forest-of-ipfs-files)\n    - [Enjoy OS-wide support for IPFS files and links](#enjoy-os-wide-support-for-ipfs-files-and-links)\n    - [Learn IPFS commands as you go](#learn-ipfs-commands-as-you-go)\n  - [Install](#install)\n    - [Mac](#mac)\n    - [Windows](#windows)\n    - [Linux/FreeBSD](#linuxfreebsd)\n    - [Install from source](#install-from-source)\n  - [Contribute](#contribute)\n    - [Translations](#translations)\n    - [Developer notes](#developer-notes)\n  - [FAQ & Troubleshooting](#faq--troubleshooting)\n    - [Why am I missing the system tray menu on Linux?](#why-am-i-missing-the-system-tray-menu-on-linux)\n    - [Why can't I install IPFS Desktop under Debian 11?](#why-cant-i-install-ipfs-desktop-under-debian-11)\n    - [Why can't I start IPFS Desktop under Debian 10?](#why-cant-i-start-ipfs-desktop-under-debian-10)\n    - [Where are my IPFS configuration and log files?](#where-are-my-ipfs-configuration-and-log-files)\n    - [How does IPFS Desktop select the IPFS repo location?](#how-does-ipfs-desktop-select-the-ipfs-repo-location)\n    - [Which version of IPFS does IPFS Desktop use?](#which-version-of-ipfs-does-ipfs-desktop-use)\n    - [Which flags does IPFS Desktop boot with?](#which-flags-does-ipfs-desktop-boot-with)\n    - [I got a `repo.lock` error. How do I resolve this?](#i-got-a-repolock-error-how-do-i-resolve-this)\n    - [I got a network error (e.g. `Error fetching`). What should I do?](#i-got-a-network-error-eg-error-fetching-what-should-i-do)\n    - [I need more help!](#i-need-more-help)\n  - [License](#license)\n\n## Features\n\nIPFS Desktop combines a complete IPFS node (running [kubo](https://github.com/ipfs/kubo)) and the [IPFS Web UI](https://github.com/ipfs-shipyard/ipfs-webui) into a single, convenient desktop app \u2014 plus adds a menu to your OS menubar/system tray for easy access to a variety of common IPFS tasks.\n\nIf you already have an IPFS node on your computer, IPFS Desktop will act as a control panel and file browser for that node. If you don't have a node, it'll install one for you. And either way, IPFS Desktop will automatically check for updates.\n\n### Start your node at system startup and control it from your OS\n\nIPFS Desktop enables you to stop or restart your node straight from the IPFS logo menu in your OS menubar/system tray. For Mac and Windows users, IPFS Desktop can also be set to launch at system startup, ensuring that your node is running whenever your computer is on.\n\n### Quickly import files, folders, and screenshots to IPFS\n\nImport files and folders to your IPFS node in a variety of convenient ways:\n- Drag and drop items onto IPFS Desktop's `Files` screen\n- Click the `Import` button on the `Files` screen to add items from your computer or an IPFS [content ID (CID)](https://docs.ipfs.tech/concepts/content-addressing/#identifier-formats)\n- (Windows) Right-click a file/folder's icon to add it to IPFS from the pop-up menu\n- (Mac) Drag and drop a file/folder onto the IPFS logo in your menubar\n\nPlus, you can use the `Take Screenshot` command under the IPFS logo menu to take a screenshot, import it to your node, and copy a shareable link to your clipboard with one click.\n\n### Easily manage the contents of your node\n\nIPFS Desktop's `Files` screen gives you an easy, familiar interface for working with the contents of your node:\n- Easily rename, move, or remove files and folders\n- Preview many common file formats directly in IPFS Desktop\n- Copy a file/folder's IPFS [content ID (CID)](https://docs.ipfs.tech/concepts/content-addressing/#identifier-formats) or a shareable link to your clipboard\n- [\"Pin\"](https://docs.ipfs.tech/concepts/persistence/) files to your IPFS node or (coming soon!) to a third-party pinning service\n\n### Visualize your IPFS peers worldwide\n\nVisit the `Peers` screen to see what nodes you're connected to, where they are, the connections they're using, and more.\n\n### Explore the \"Merkle Forest\" of IPFS files\n\nUse the `Explore` screen to explore some example datasets \u2014 or your own files \u2014 and see firsthand how items stored on IPFS are broken down into content-addressed pieces.\n\n### Enjoy OS-wide support for IPFS files and links\n\nIPFS Desktop enables most operating systems (Mac, Windows and some Linux flavors) to support protocols including `ipfs://` and `ipns://`. This means that if an app on your computer tries to open a link starting with one of those protocol identifiers (for example, if your web browser encounters a link to `ipns://en.wikipedia-on-ipfs.org`), it'll automatically open in IPFS Desktop.\n\nFor an even better experience with `ipfs://`, and `ipns://` addresses, we also recommend installing [IPFS Companion](https://github.com/ipfs-shipyard/ipfs-companion) to add support in your favorite browser!\n\n### Learn IPFS commands as you go\n\nIf you're interested in learning how to use IPFS from the command line, IPFS Desktop's CLI Tutor Mode can show you common IPFS commands as you go. Just check the `CLI Tutor Mode` box on the `Settings` screen to switch on this feature.\n\n## Install\n\nRelease notes and older versions of IPFS Desktop can be found on the [releases page](https://github.com/ipfs/ipfs-desktop/releases).\n\nDon't see your favorite package manager? Visit our [package managers page](https://github.com/ipfs/ipfs-desktop/issues/691) and help us add support for it!\n\n### Mac\n- **Installer:** [ipfs-desktop-0.33.0-mac.dmg](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-mac.dmg)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-mac.dmg.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-mac.dmg)\n- **Homebrew** (community-maintained): `brew install --cask ipfs`\n\n### Windows\n- **Installer:** [IPFS-Desktop-Setup-0.33.0.exe](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/IPFS-Desktop-Setup-0.33.0.exe)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/IPFS-Desktop-Setup-0.33.0.exe.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/IPFS-Desktop-Setup-0.33.0.exe)\n- **Chocolatey** (community-maintained): `choco install ipfs-desktop`\n- **Scoop** (community-maintained): `scoop bucket add extras; scoop install extras/ipfs-desktop`\n- **WinGet** (community-maintained): `winget install IPFS.IPFS-Desktop`\n\n### Linux/FreeBSD\n- **AppImage**: [ipfs-desktop-0.33.0-linux-x86_64.AppImage](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.AppImage)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.AppImage.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.AppImage)\n- **Tarball** (use this for building packages for distros): [ipfs-desktop-0.33.0-linux-x64.tar.xz](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x64.tar.xz)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-linux-x64.tar.xz.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x64.tar.xz)\n- **Debian** (experimental): [ipfs-desktop-0.33.0-linux-amd64.deb](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-amd64.deb)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-linux-amd64.deb.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-amd64.deb)\n- **Red Hat** (experimental): [ipfs-desktop-0.33.0-linux-x86_64.rpm](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.rpm)\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.rpm.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x86_64.rpm)\n- **FreeBSD** (experimental): [ipfs-desktop-0.33.0-linux-x64.freebsd](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x64.freebsd) (requires [Linux Binary Compatibility to be enabled](https://docs.freebsd.org/en/books/handbook/linuxemu/))\\\n[![](https://img.shields.io/github/downloads/ipfs/ipfs-desktop/v0.33.0/ipfs-desktop-0.33.0-linux-x64.freebsd.svg?style=flat-square&label=downloads)](https://github.com/ipfs/ipfs-desktop/releases/download/v0.33.0/ipfs-desktop-0.33.0-linux-x64.freebsd)\n- **Snapcraft** support is deprecated and discouraged due to [confinement issues](https://github.com/ipfs/ipfs-desktop/issues/2031), use `.AppImage` instead\n\nAdditional third-party packages exist, but have the built-in auto-update mechanism disabled.\nInstead, update cycle is maintained by respective communities:\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/ipfs-desktop.svg)](https://repology.org/project/ipfs-desktop/versions)\n\n### Install from source\n\nTo install and run IPFS Desktop from source, you'll also need:\n- [Node.js](https://nodejs.org/en/) \u2013 pick the current LTS\n- Any [platform-specific dependencies](https://github.com/nodejs/node-gyp#installation) required by [`node-gyp`](https://github.com/nodejs/node-gyp)\n\nThen, follow the steps below to clone the source code, install dependencies, and run the app.\n\n```bash\ngit clone https://github.com/ipfs/ipfs-desktop.git\ncd ipfs-desktop\nnpm ci\nnpm run build\nnpm start\n```\n\n> **Build Note:** `npm ci` will download the webui code to run in electron from IPFS using the [ipfs-or-gateway](https://www.npmjs.com/package/ipfs-or-gateway) npm package.  For details, see the [build process](`.github/workflows/ci.yml`) and the [webui code](https://github.com/ipfs/ipfs-webui).\n\nIPFS Desktop in itself is a simple container that makes sure Kubo and IPFS Webui can work together in a standalone fashion and has access to other os-specfic features like tray and contextual integrations.\nThere are multiple ways to access IPFS Webui:\n\n- https://webui.ipfs.io/#/welcome\n- http://127.0.0.1:5001/webui (shipped with kubo)\n- IPFS Desktop itself\n\nAll of these instances of IPFS Webui are the same but shipped slightly differently. The file you're seeing being downloaded is a specific release of IPFS Webui, i.e. v4.1.1 has content identifiers (CID) `bafybeiamycmd52xvg6k3nzr6z3n33de6a2teyhquhj4kspdtnvetnkrfim` which can be verified on the [IPFS Webui release page](https://github.com/ipfs/ipfs-webui/releases).\n\n## Contribute\n\nWe welcome all contributions to IPFS Desktop! The best way to get started is to check the current [open issues](https://github.com/ipfs/ipfs-desktop/issues) (or drill down specifically for [issues labeled \"help wanted\"](https://github.com/ipfs/ipfs-desktop/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)) and find something interesting. All issues are categorized by the [standard label taxonomy](https://github.com/ipfs/community/blob/master/ISSUE_LABELS.md) used across the IPFS project, so you can also drill by topic (for example, [UX-related issues](https://github.com/ipfs/ipfs-desktop/issues?q=is%3Aissue+is%3Aopen+label%3Atopic%2Fdesign-ux)).\n\nNo matter how you contribute, please be sure you read and follow the [IPFS Contributing Guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md) and the [IPFS Community Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Translations\n\nContributing translations in your language is particularly valuable! We use Transifex to manage internationalization, which means you don't need to change a single line of code to add your translations \u2014 just sign up for a Transifex account.\n\nBecause IPFS Desktop app includes text from [IPFS Web UI](https://github.com/ipfs-shipyard/ipfs-webui) and [IPLD Explorer](https://github.com/ipfs-shipyard/ipld-explorer), you'll want to join all three Transifex projects in order to see all the text:\n- https://www.transifex.com/ipfs/ipfs-desktop/\n- https://www.transifex.com/ipfs/ipfs-webui/\n- https://www.transifex.com/ipfs/ipld-explorer/\n\n*Note for developers: We use English as our source of truth. This means that if you add any new text, make those additions in [`./assets/locales/en.json`](./assets/locales/en.json) and they will automatically propagate in Transifex for other languages.*\n\n### Developer notes\n\nFor more detailed information about hacking on IPFS Desktop, including a release checklist, please see the full [developer notes](DEVELOPER-NOTES.md).\n\n## FAQ & Troubleshooting\n\n### Why am I missing the system tray menu on Linux?\n\nIPFS Desktop is built using Electron, and unfortunately, poor system tray support has been a [longstanding problem with Electron apps](https://github.com/electron/electron/issues/21445).\n\nYou may wish to try troubleshooting according to the [Electron v9.3.0 docs](https://github.com/electron/electron/blob/v9.3.0/docs/api/tray.md#class-tray):\n\n- On Linux, the app indicator will be used if it is supported; otherwise `GtkStatusIcon` will be used\n- On Linux distributions that only have app indicator support, you must install `libappindicator1` to make the tray icon work\n\nIf you've noticed that the old system tray is back in IPFS Desktop v0.13, this is because the Electron team [removed support for `StatusNotifier` and restored the old tray interface on Linux called `XEmbed`](https://github.com/electron/electron/issues/21445#issuecomment-634163402).\n\n### Why can't I install IPFS Desktop under Debian 11?\n\nDebian package depends on `libappindicator3-1` which does not exist in Debian 11 anymore.\n\nYou need to install this missing dependency [on your own](https://gist.github.com/keyle/b4536dc922bb13d7b5dce16a7db7e328), or use `.AppImage` instead.\n\n### Why can't I start IPFS Desktop under Debian 10?\n\nSome Linux users may see one of the following errors when trying to launch IPFS Desktop:\n\nWhen launching by double-clicking the app icon:\n> The SUID sandbox helper binary was found, but is not configured correctly.\nRather than run without sandboxing I'm aborting now. You need to make sure that\nchrome-sandbox is owned by root and has mode 4755.\n\nWhen launching from the terminal:\n```console\n$ ipfs-desktop\n$Trace/breakpoint trap\n```\n\nThis is a known issue with Electron/Chrome and some hardened kernels. More details can be found [here](https://github.com/ipfs/ipfs-desktop/issues/1362#issuecomment-596857282), but a fix is to start IPFS Desktop from the terminal with the following additional parameter:\n```console\n$ ipfs-desktop --no-sandbox\n```\n\n### Where are my IPFS configuration and log files?\n\nYou can open these files from the IPFS logo menu by selecting `Open Logs Directory` or `Open Configuration File` from the `Advanced` submenu. Or, find them in your OS as follows:\n- **Mac:** `~/Library/Application Support/IPFS Desktop/`\n- **Windows:** `%appdata%/IPFS Desktop/`\n- **Linux:** `~/.config/IPFS Desktop/`\n\n### How does IPFS Desktop select the IPFS repo location?\n\nIPFS Desktop uses [ipfsd-ctl](https://github.com/ipfs/js-ipfsd-ctl), which, by default, checks the `IPFS_PATH` environment variable. If that isn't set, it falls back to `$HOME/.ipfs`. As soon as the first run has succeeded, repository location info is saved in the configuration file, which becomes the source of truth.\n\nTo open your repo directory from the IPFS logo menu, select `Open Repository Directory` from the `Advanced` submenu.\n\n### Which version of IPFS does IPFS Desktop use?\n\nIPFS Desktop includes its own embedded binary of Kubo (`kubo` version defined in `package.json`); this is the latest version of [Kubo](https://github.com/ipfs/kubo) that has passed QA for IPFS Desktop use.\n\nYou can check which version of IPFS you're running from the IPFS logo menu by looking in the `About` submenu.\n\n### Which flags does IPFS Desktop boot with?\n\nBy default, IPFS Desktop starts the IPFS daemon with the flags `--migrate=true --enable-gc=true`.\n\nYou can change this in the IPFS Desktop config file by selecting `Open Configuration File` from the `Advanced` submenu.\n\n### I got a `repo.lock` error. How do I resolve this?\n\nIn general, this means that a previous process was unable to remove the repository lock (indicator that file is in use) from the repository directory. This is supposed to be handled automatically, but sometimes it isn't. If you get this error, you can generally safely delete this file after shutting down any running IPFS daemon's or applications. Simple process is as follows:\n\n1. Stop ipfs processes;\n2. Manually delete lock file, located within the [repository](#how-does-ipfs-desktop-select-the-ipfs-repo-location);\n3. Attempt to start ipfs desktop (or other process that received the `repo.lock` error) again.\n\n### I got a network error (e.g. `Error fetching`). What should I do?\n\nWhen upgrading, IPFS may need to perform migrations and for that we need a stable connection to download the required information for the migrations. Sometimes, the Internet connection may fail or be blocked by firewalls or antiviruses, and then you will run into a network error. Before submitting an issue, please try the following:\n\n1. Check if you are connected to the Internet;\n2. Make sure your firewall or antivirus is not blocking requests, such as P2P traffic;\n3. Try again, by restarting IPFS Desktop.\n\n### Error: Initializing daemon...\n\nThese errors pop up from [ipfsd-ctl](https://github.com/ipfs/js-ipfsd-ctl) when the Kubo daemon fails to start up. Below are some scenarios where you may run into this error.\n\n#### Error: Your programs version (N) is lower than your repos (N+x).\n\nThis means you are attempting to run an older version of ipfs-desktop or Kubo than you have previously ran on your machine. Each Kubo version (which is included with ipfs-desktop) is tied to a specific IPFS repo version, which you can see at https://github.com/ipfs/fs-repo-migrations#when-should-i-migrate.\n\nThe ideal solution is to ensure you're running the latest version of ipfs-desktop, as upward migrations happen automatically. However, if you need to run the older version that is emitting this error, you will need to run a migration in reverse, manually. You can follow the official instructions [here](https://github.com/ipfs/fs-repo-migrations/blob/master/run.md) but with additional parameters: `fs-repo-migrations -revert-ok -to N`. See `fs-repo-migrations --help` for more information.\n\n#### Found outdated fs-repo, migrations need to be run. - Error fetching: context deadline exceeded\n\nThis happens when there is a problem with downloading migrations needed by [fs-repo-migrations](https://github.com/ipfs/fs-repo-migrations/blob/master/run.md). The errors usually look something like this:\n\n```bash\nError: Initializing daemon...\nKubo version: 0.22.0\nRepo version: 14\nSystem version: amd64/darwin\nGolang version: go1.19.12\nFound outdated fs-repo, migrations need to be run.\nLooking for suitable migration binaries.\nNeed 1 migrations, downloading.\nDownloading migration: fs-repo-13-to-14...\nFetching with HTTP: \"https://ipfs.io/ipfs/QmYerugGRCZWA8yQMKDsd9daEVXUR3C5nuw3VXuX1mggHa/fs-repo-13-to-14/versions\"\nFetching with HTTP: \"https://ipfs.io/ipfs/QmYerugGRCZWA8yQMKDsd9daEVXUR3C5nuw3VXuX1mggHa/fs-repo-13-to-14/versions\"\nFetching with HTTP: \"https://ipfs.io/ipfs/QmYerugGRCZWA8yQMKDsd9daEVXUR3C5nuw3VXuX1mggHa/fs-repo-13-to-14/versions\"\nError fetching: exceeded number of retries. last error was http.DefaultClient.Do error: Get \"https://ipfs.io/ipfs/QmYerugGRCZWA8yQMKDsd9daEVXUR3C5nuw3VXuX1mggHa/fs-repo-13-to-14/versions\": dial tcp 199.16.156.40:443: i/o timeout\nFetching with IPFS: \"fs-repo-13-to-14/versions\"\nError fetching: context deadline exceeded\ncould not get latest version of migration fs-repo-13-to-14: 2 errors occurred:\n\t* exceeded number of retries. last error was http.DefaultClient.Do error: Get \"https://ipfs.io/ipfs/QmYerugGRCZWA8yQMKDsd9daEVXUR3C5nuw3VXuX1mggHa/fs-repo-13-to-14/versions\": dial tcp 199.16.156.40:443: i/o timeout\n\t*\n```\n\nYou can update your Kubo config to try different sources of the migration files.\n\n##### With IPFS-Desktop\n\n1. Go to the Settings tab\n2. Find \"Migrations\" in the config, and update the `DownloadSources` array to be `[\"IPFS\", \"https://dweb.link\", \"https://cloudflare-ipfs.com\", \"HTTP\"]`\n\n##### From the terminal\n\nFor this method, you have to have the `ipfs` binary available on your command line:\n\n```bash\nipfs config --json Migration.DownloadSources '[\"IPFS\", \"https://dweb.link\", \"https://cloudflare-ipfs.com\", \"HTTP\"]'\n```\n\n##### Manually in an editor (not recommended)\n\nYou can also edit the config file (`~/.ipfs/config` or `C:\\Users\\Username\\.ipfs\\config`) manually. Just make sure the json file is valid when you finish.\n\n### I need more help!\n\nIf you need help with using IPFS Desktop, the quickest way to get answers is to post them in the [official IPFS forums](https://discuss.ipfs.tech).\n\nIf you think you've found a bug or other issue with IPFS Desktop itself, please [open an issue](https://github.com/ipfs/ipfs-desktop/issues/new/choose).\n\n## License\n\n[MIT \u2014 Protocol Labs, Inc.](./LICENSE)\n", "release_dates": ["2024-01-22T18:23:59Z", "2023-11-28T18:01:51Z", "2023-10-12T04:34:56Z", "2023-09-13T20:48:34Z", "2023-08-22T23:57:35Z", "2023-08-10T02:00:23Z", "2023-07-04T18:59:52Z", "2023-05-11T04:20:56Z", "2023-05-10T19:47:17Z", "2023-04-27T17:05:47Z", "2023-03-20T21:57:12Z", "2023-02-10T17:47:19Z", "2023-01-28T00:02:30Z", "2022-12-11T21:59:34Z", "2022-11-10T23:27:51Z", "2022-10-03T21:39:04Z", "2022-08-30T18:16:48Z", "2022-07-21T20:29:22Z", "2022-06-13T10:35:37Z", "2022-05-12T16:22:26Z", "2022-04-08T22:50:18Z", "2022-03-28T13:53:55Z", "2022-03-21T22:33:43Z", "2022-03-15T01:09:50Z", "2022-03-07T12:17:31Z", "2022-03-01T22:46:17Z", "2022-02-16T02:04:49Z", "2022-02-16T01:13:10Z", "2022-02-14T11:10:14Z", "2021-12-13T13:31:06Z"]}, {"name": "ipfs-docs", "description": "\ud83d\udcdaIPFS documentation platform", "language": "Go", "license": null, "readme": "<p align=\"center\">\n<img align=\"center\" src=\"./images/ipfs-docs-header.png\" width=\"1000\">\n</p>\n\n<div align=\"center\">\n<h3> IPFS is an open system to manage data without a central server </h3>\n<br>\n\n[![Made by icon.](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai/)\n[![Project icon.](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.tech/)\n[![Build status icon.](https://img.shields.io/circleci/project/github/ipfs/ipfs-docs/master.svg?style=flat-square)](https://circleci.com/gh/ipfs/ipfs-docs)\n![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)\n</div>\n\n<!-- TOC -->\n- [Project set up](#project-set-up)\n  - [Run locally](#run-locally)\n  - [Troubleshooting](#troubleshooting)\n    - [Digital envelope routines initialization error](#digital-envelope-routines-initialization-error)\n- [Contribute to documentation](#contribute-to-documentation)\n  - [Issues](#issues)\n  - [Bounties](#bounties)\n  - [Suggestions](#suggestions)\n  - [Pull requests welcome](#pull-requests-welcome)\n- [Style and configuration guide](#style-and-configuration-guide)\n  - [Static-site generator](#static-site-generator)\n  - [Automated deployments](#automated-deployments)\n  - [Translation](#translation)\n- [Primary maintainers](#primary-maintainers)\n- [License](#license)\n<!-- /TOC -->\n\n---\n\nWelcome to the official IPFS documentation. The Interplanetary File System (IPFS) is a distributed, peer-to-peer network for storing and accessing files, websites, applications, and data. Protocol Labs is the primary maintainer of the IPFS documentation and will review all issues and pull requests created in this repository.\n\n**If you'd just like to read the IPFS documentation, we recommend the [website version](https://docs.ipfs.tech).**\n\n## Project set up\n\n### Run locally\n\nTo build the site locally, follow the steps below.\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/ipfs/ipfs-docs.git\n   ```\n\n1. Move into the `ipfs-docs` folder:\n\n   ```bash\n   cd ipfs-docs\n   ```\n   \n1. Install the NPM dependencies:\n\n   ```bash\n   npm install\n   ```\n\n1. Boot up the application in _dev mode_:\n\n   ```bash\n   npm start\n   ```\n\n1. Open [localhost:8080](http://localhost:8080) in your browser.\n1. Close the local server with `CTRL` + `c`.\n1. To restart the local server, run `npm start` from within the `ipfs-docs` folder.\n\n### Troubleshooting\n\nIf you're having trouble setting up the site locally, check this section for solutions to common issues.\n\n#### Digital envelope routines initialization error\n\nThe following error message may display when using Node.js version 18.0.0 when attempting to deploy this project for the first time:\n\n   ```shell\n   opensslErrorStack: [ 'error:03000086:digital envelope routines::initialization error' ],\n   library: 'digital envelope routines',\n   reason: 'unsupported',\n   code: 'ERR_OSSL_EVP_UNSUPPORTED'\n   ```\n\nTo solve this error, perform the following steps:\n\n1. Open a terminal.\n2. Navigate into the `ipfs-docs` folder:\n\n   ```bash\n   cd ipfs-docs\n   ```\n\n3. Run the following command:\n\n   ```shell\n    export NODE_OPTIONS=--openssl-legacy-provider\n   ```\n\n4. Run `npm start`.\n\n   ```bash\n   npm start\n   ```\n\nYou can return to the [Project set-up](#project-set-up) section above and continue with the steps. You can also check [this issue in the Webpack GitHub repository](https://github.com/webpack/webpack/issues/14532) for more information about this error.\n\n## Contribute to documentation\n\nWe would **love \u2764\ufe0f your help** to improve existing items or make new ones even better! [We also have bounties available](https://github.com/ipfs/devgrants/projects/1)!\n\n### Issues\n\nIf you find something wrong within this repository, please raise an issue [here \u2192](https://github.com/ipfs/ipfs-docs/issues). Unless the issue is urgent, updates will be batch-merged into `main` on Tuesdays or Thursdays.\n\n### Bounties\n\nYou can earn the undying love of the IPFS community, _and_ get rewarded by closing an issue containing the [`bounty` tag](https://github.com/ipfs/ipfs-docs/issues?q=is%3Aopen+is%3Aissue+label%3Abounty). Submissions must be production-ready and meet all the specifications listed on the issue page. To get started, check out the [current list of open bounties \u2192](https://github.com/ipfs/devgrants/projects/1).\n\nIf you are attempting to close an issue, great! Thanks for the help! Please leave a comment within the issue requesting to be assigned to that issue **before** submitting a pull request. This minimizes the chance of multiple contributors duplicating work by submitting pull requests for the same issue. If you submit a pull request to an issue _without_ first being assigned to it, your pull request may not be accepted.\n\n### Suggestions\n\nEveryone has an opinion when it comes to documentation, and **that's a good thing**! Having folks from different backgrounds add to a discussion empowers everyone within that discussion, so if you've got something to add or would like to bring up a topic for discussion about the documentation, please do so! Create an issue using the [`kind/question` tag](https://github.com/ipfs/ipfs-docs/issues?q=is%3Aopen+is%3Aissue+label%3Akind%2Fquestion).\n\n### Pull requests welcome\n\nFeel free to submit pull requests with any changes you'd like to see. We will review and approve, or leave change requests, as soon as we are able.\n\n## Style and configuration guide\n\nA writing style and template guide is in the process of being written that contributors can use as a guideline.\n\n### Static-site generator\n\nThe IPFS documentation site uses the [VuePress static website generator](https://vuepress.vuejs.org/) to convert the Markdown guides into a documentation website. All the documentation is written in Markdown; follow the [VuePress Markdown documentation](https://vuepress.github.io/guide/markdown.html) for information on how to write markdown files for VuePress.\n\n### Automated deployments\n\nWhen opening a pull request, CI scripts will run against your feature branch to test your changes.\n\nThe CI/CD production workflow builds on the `main` branch and deploys the documentation site on [fleek](https://fleek.co/). The site reflects the latest commit on `main`.\n\n## Primary maintainers\n\n- [@2color](https://github.com/2color): Developer relations & technical writing(ecosystem)\n\n## License\n\nAll software code is copyright (c) Protocol Labs, Inc. under the **MIT license**. Other written documentation and content are copyright (c) Protocol Labs, Inc. under the [**Creative Commons Attribution-Share-Alike License**](https://creativecommons.org/licenses/by/4.0/).\n", "release_dates": []}, {"name": "ipfs-ds-convert", "description": "Command-line tool for converting datastores (e.g. from FlatFS to Badger)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "ipfs-ds-convert\n==================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/ipfs-ds-convert/badge.svg)](https://coveralls.io/github/ipfs/ipfs-ds-convert)\n[![Travis CI](https://circleci.com/gh/ipfs/ipfs-ds-convert/tree/master.svg?style=shield)](https://circleci.com/gh/ipfs/ipfs-ds-convert/tree/master)\n\n> Datastore converter for go-ipfs\n\nThis tool is WIP and may damage your data. Make sure to make a backup first.\n\nTODO:\n- [x] Finish basic conversion code\n- [x] package.json for gx\n- [ ] Tests\n  - [x] CI (needs https://github.com/ipfs/go-ipfs/pull/4007, https://github.com/ipfs/go-ipfs/pull/3575)\n  - [ ] Coverage > 80% or more\n- [ ] Review\n- [ ] Standard readme\n- [x] Revert on error / from backup\n- [x] Cleanup backup subcommand\n- [x] Optimize some standard cases\n  - [x] Don't copy directories when not needed\n  - [ ] Detect renames\n    - Not that common\n- [x] Report progress\n- [ ] Don't depend on go-ipfs\n\n## Install\n\n### Build From Source\n\nThese instructions assume that go has been installed as described [here](https://github.com/ipfs/go-ipfs#install-go).\n\n```\n$ GO111MODULE=on go get github.com/ipfs/ipfs-ds-convert@latest\n```\n\n## Usage\n\n### Convert to Badger Datastore\n\nApply the Badger Datastore profile:\n\n\n```\nipfs config profile apply badgerds\n```\n\nThen, start the conversion using\n\n```\n$ ipfs-ds-convert convert\n```\n\nThis can take a very long time to complete depending on the size of the datastore. If running this on a headless server it's recommended to use something like `screen` or `tmux` to run this command in a persistent shell.\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT \u00a9 \u0141ukasz Magiera\n", "release_dates": ["2021-02-18T23:41:51Z", "2020-10-01T15:22:26Z"]}, {"name": "ipfs-ds-postgres", "description": "\ud83d\udc18 PostgreSQL datastore for IPFS", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# ipfs-ds-postgres\n\n[![Build Status](https://travis-ci.org/ipfs/ipfs-ds-postgres.svg?branch=master)](https://travis-ci.org/ipfs/ipfs-ds-postgres)\n[![Coverage](https://codecov.io/gh/ipfs/ipfs-ds-postgres/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/ipfs-ds-postgres)\n[![Standard README](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg)](https://github.com/RichardLitt/standard-readme)\n[![GoDoc](http://img.shields.io/badge/godoc-reference-5272B4.svg)](https://godoc.org/github.com/alanshaw/ipfs-ds-postgres)\n[![golang version](https://img.shields.io/badge/golang-%3E%3D1.14.0-orange.svg)](https://golang.org/)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ipfs/ipfs-ds-postgres)](https://goreportcard.com/report/github.com/ipfs/ipfs-ds-postgres)\n\n> An implementation of [the datastore interface](https://github.com/ipfs/go-datastore) for PostgreSQL that uses the [pgx](https://github.com/jackc/pgx) PostgreSQL driver.\n\n**Note: Currently implements `Datastore` and `Batching` interfaces.**\n\n## Install\n\n```sh\ngo get github.com/ipfs/ipfs-ds-postgres\n```\n\n## Usage\n\nEnsure a database is created and a table exists that has the following structure (replacing `table_name` with the name of the table the datastore will use - by default this is `blocks`):\n\n```sql\nCREATE TABLE IF NOT EXISTS table_name (key TEXT NOT NULL UNIQUE, data BYTEA)\n```\n\nIt's recommended to create a `text_pattern_ops` index on the table:\n\n```sql\nCREATE INDEX IF NOT EXISTS table_name_key_text_pattern_ops_idx ON table_name (key text_pattern_ops)\n```\n\nImport and use in your application:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\tpgds \"github.com/alanshaw/ipfs-ds-postgres\"\n)\n\nconst (\n\tconnString = \"postgresql://user:pass@host:12345/database?sslmode=require\"\n\ttableName  = \"blocks\" // (default)\n)\n\nfunc main() {\n\tds, err := pgds.NewDatastore(context.Background(), connString, pgds.Table(tableName))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n## API\n\n[GoDoc Reference](https://godoc.org/github.com/alanshaw/ipfs-ds-postgres)\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/alanshaw/ipfs-ds-postgres/issues/new) or submit PRs.\n\n## License\n\n[MIT](LICENSE) \u00a9 Alan Shaw\n", "release_dates": []}, {"name": "ipfs-gui", "description": "Creating standards and patterns for IPFS that are simple, accessible, reusable, and beautiful", "language": null, "license": null, "readme": "# IPFS GUIs\n\n[![Made by icon.](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat)](https://protocol.ai/)\n[![Project icon.](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat)](http://ipfs.io/)\n[![#ipfs](https://img.shields.io/badge/irc-%23ipfs-brightgreen.svg)](https://webchat.freenode.net/?channels=ipfs) <a href=\"https://www.irccloud.com/invite?channel=%23ipfs-gui&amp;hostname=irc.freenode.net&amp;port=6697&amp;ssl=1\" target=\"_blank\"><img src=\"https://img.shields.io/badge/irc-%23ipfs--gui-brightgreen.svg?style=flat\"  height=\"20\"></a>\n\nThe IPFS project has an ongoing, long-running ambition to **create visual and interaction standards and patterns for working with IPFS that are ...**\n\n- **Simple**: Present the big ideas of IPFS clearly, without unnecessary complexity\n- **Accessible**: Enable *everyone* to take advantage of what IPFS offers\n- **Reusable**: Offer compelling standards and atomic patterns to the community of IPFS builders\n- **Beautiful**: By their nature, things that are simple, accessible and reusable are also beautiful\n\n## IPFS GUI projects\n\n### Primary projects\n\nAt present, primary focus is on the three \"helper\" apps that provide a GUI for IPFS as a whole, in order to make them useful for seasoned IPFS developers while also offering a welcoming introduction to IPFS for those less experienced.\n\n| IPFS Companion | IPFS Web UI | IPFS Desktop |\n|:-:|:-:|:-:|\n| [<img title=\"IPFS Companion\" src=\"https://ipfs.io/images/ipfs-companion-hex.png\" />][IPFS Companion] | [<img title=\"Web UI screenshot\" src=\"img/webui-hex.png\" />][IPFS Web UI] | [<img title=\"IPFS Desktop\" src=\"https://ipfs.io/images/ipfs-desktop-hex.png\" />][IPFS Desktop] |\n| [Browser extension](https://github.com/ipfs/ipfs-companion) for opening ipfs:// URLs, saving/sharing files, and more| [IPFS file manager and network explorer](https://github.com/ipfs-shipyard/ipfs-webui) in your browser | Launch and manage IPFS from a friendly, intuitive [desktop app](https://www.github.com/ipfs-shipyard/ipfs-desktop) |\n\nFor a more comprehensive overview of the resources that come together to build, support, and provide education around Web UI, Desktop, and Companion, please see the [IPFS GUI Family Mental Model](https://ipfs-gui-mental-model.netlify.app/) and our [June 2020 user research report](https://docs.google.com/document/d/1V5sDSxMqhhplpcB8u8CffiGWHUvw-t4p_sn5vigdR90/edit#).\n\n### Other IPFS GUI & Tools owned projects\n\n- **[ipfs/ipfs-gui](https://www.github.com/ipfs/ipfs-gui)**: This repo, used for overall planning and cross-repo work\n- **[ipfs/distributions/site](https://github.com/ipfs/distributions/tree/master/site)**: Visual side of https://dist.ipfs.io website\n- **[ipfs/public-gateway-checker](https://www.github.com/ipfs/public-gateway-checker)**: Source code for https://ipfs.github.io/public-gateway-checker/\n- **[ipfs/ipfs-companion](https://github.com/ipfs/ipfs-companion)**: Browser extension that simplifies access to IPFS resources on the Web\n- **[ipfs/ipfs-webui](https://github.com/ipfs/ipfs-webui)**: Browser front-end for IPFS nodes\n- **[ipfs/ipfs-desktop](https://github.com/ipfs/ipfs-desktop)**: An unobtrusive and user-friendly desktop application for IPFS on Windows, Mac and Linux\n- **[ipld/explore.ipld.io](https://github.com/ipld/explore.ipld.io)**: Source code for https://explore.ipld.io\n  - **[ipfs/ipld-explorer-components](https://github.com/ipfs/ipld-explorer-components)**: React components for https://explore.ipld.io and ipfs-webui\n- **[ipfs-shipyard/i18n](https://github.com/ipfs-shipyard/i18n)**: Internationalization work across all IPFS projects\n- **[ipfs-shipyard/ipfs-css](https://www.github.com/ipfs-shipyard/ipfs-css)**: Single-purpose CSS rules and font-face config to add the IPFS look and feel to your UI\n- **[ipfs-shipyard/pinning-service-compliance](https://www.github.com/ipfs-shipyard/pinning-service-compliance)**: A test suite to help see which pinning service providers are correctly implementing the [pinning services spec](https://ipfs.github.io/pinning-services-api-spec/).\n- **[ipfs-shipyard/js-pinning-service-http-client](https://github.com/ipfs-shipyard/js-pinning-service-http-client)**: A pinning service client for the browser and node\n- **[ipfs-shipyard/ipfs-dag-builder-vis](https://github.com/ipfs-shipyard/ipfs-dag-builder-vis)**: A tool for creating & modifying IPFS DAG structures visually. See https://dag.ipfs.tech/ \n- **[multiformats/cid-utils-website](https://github.com/multiformats/cid-utils-website)**: A website for decoding CIDs. See https://cid.ipfs.tech/#bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\n\n\n\n### Other GUI projects\n\nIn addition to the apps & repos above, other relevant GUI related tools/apps that are not owned by the IPFS GUI & Tools team are:\n\n- **[kubo/dir-index-html](https://github.com/ipfs/go-ipfs/tree/master/assets/dir-index-html)**: Directory listing HTML for kubo (go-ipfs) gateways\n- **[filecoin-station/filecoin-station](https://github.com/filecoin-station/filecoin-station)**: Filecoin Station connects your computer\u2019s idle resources to the Filecoin network and rewards you with FIL. Taking part is simple, just launch the app and start earning.\n- **[ipfs-shipyard/ipfs-check](https://github.com/ipfs-shipyard/ipfs-check)**: A tool for checking the accessibility of your data by IPFS peers\n- **[laurentsenta/pl-diagnose](https://github.com/laurentsenta/pl-diagnose)**: Reimplementation & extension of https://github.com/aschmahmann/ipfs-check\n- **[ipfs-shipyard/ipfs-ui-style-guide](https://www.github.com/ipfs-shipyard/ipfs-ui-style-guide)**: UI style guide for IPFS apps\n- **[ipfs-shipyard/ipfs-share-files](https://www.github.com/ipfs-shipyard/ipfs-share-files)**: Source code for https://share.ipfs.io\n\n### Visual design guidelines\n\n[![IPFS-Brand-sheet-public](https://user-images.githubusercontent.com/157609/176955199-0f87b9bc-3a8d-4bd0-b9a3-48a9fe38f942.png)](https://www.figma.com/proto/mH0OlgikgKzLmbMNO3noBs/IPFS-Brand-sheet-public)\n\n- [Figma IPFS brand sheet](https://www.figma.com/proto/mH0OlgikgKzLmbMNO3noBs/IPFS-Brand-sheet-public)\n  - [Download PDF (2022)](https://ipfs.io/ipfs/QmcVRX6eArMmyTo2LQ5iDGD1BJ13FwFv8EB1oGaVmSwbwE?filename=ipfs-brand-sheet-2022.pdf)\n  - [Download Assets (2022)](https://ipfs.io/ipfs/QmSwE3QkkQf914n3RRMtCprxS8qMTtxEWFHneYppdAukeR?filename=ipfs-brand-assets-2022.zip)\n\n## Get involved!\n\n### Contribute to an issue\n\nContributions to IPFS GUIs are more than welcome! Each of the repos listed under [\"All projects\"](#all-projects) above makes use of the IPFS Project's [global issue labeling scheme](https://github.com/ipfs/community/blob/master/ISSUE_LABELS.md). Good labels to look for are ...\n- `help wanted`\n- `good first issue`\n- and there are even occasional `bounty` labels for issues with rewards as part of the [IPFS Bounty Board](https://github.com/ipfs/devgrants/projects/1)!\n\nIf you see an issue that catches your eye, leave a comment so we know you're interested, and we'll go from there!\n\nWe're an open project and a friendly group, so please be nice and **read the [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md)** when you're ready to jump in.\n\n### Discuss in GitHub or chat\n\n**For the sake of async communication, archiving, and searchability, we strongly encourage discussions to happen in the context of GitHub issue comments whenever practical.**\n\nFor casual conversation, our official chat rooms in [Matrix](https://app.element.io/#/room/#lobby:ipfs.io) and [Discord](https://discord.gg/Z4H6tdECb9) are bridged, so you can join whichever you prefer. They can be used to ask questions and discuss with the community \u2014 however, while IPFS core developers are usually in these rooms, it can be hard to keep up with the running conversation and questions can be missed or disappear due to a lack of indexing.\n\n## Resources\n\nIf you're looking for high-level research or visual and brand info:\n\n- [IPFS brand sheet](https://www.figma.com/proto/mH0OlgikgKzLmbMNO3noBs/IPFS-Brand-sheet-public?node-id=22%3A2)\n  - see also: [Protocol Labs branding and visual design index](https://www.figma.com/proto/zwiBoppEK16FXV89bqDVgX/PL-%2B-project-branding-master-index?node-id=0%3A6&scaling=min-zoom)\n\nAlso, these historical resources may be helpful:\n\n- [IPFS GUI Family Mental Model](https://ipfs-gui-mental-model.netlify.app/): June 2020 framework for understanding how IPFS\u2019 various GUI-based tools work together to provide cohesive, consistent enablers to using and building on IPFS for a variety of developer and non-developer stakeholder groups\n- [June 2020 user research report](https://docs.google.com/document/d/1V5sDSxMqhhplpcB8u8CffiGWHUvw-t4p_sn5vigdR90/edit#): Survey analysis offering guidance on next actions for enhancements to the IPFS GUI tool family\n- [Original GUI project research](research): Spring 2018 foundational research on IPFS GUIs, including the initial definition of this group's goals\n- [IPFS color palette](https://github.com/ipfs-shipyard/ipfs-css#colors): Official IPFS colors as part of [`ipfs-css`](https://github.com/ipfs-shipyard/ipfs-css)\n- [IPFS logo files](https://github.com/ipfs-inactive/logo): Vector and raster logo assets\n- [IPFS brand book](https://github.com/ipfs-shipyard/ipfs-ui-style-guide/files/1629262/IPFS_brandbook.pdf): IPFS-wide brand guidance, including logo guidelines\n- [IPFS UI Summary](img/ipfs-ui-kit.png): Alpha-version UI style guide summary\n\n## Maintainers\n\nThis `ipfs-gui` repo is intended primarily as a higher-order planning and discussion space, so isn't actively maintained in and of itself; however, consult the readmes of the repos listed under [\"All projects\"](#all-projects) above for more specific maintainer info for individual projects.\n\n\n\n[IPFS Web UI]: https://github.com/ipfs-shipyard/ipfs-webui \"Web-based IPFS file manager and network explorer\"\n[IPFS Desktop]: https://github.com/ipfs-shipyard/ipfs-desktop \"Launch and manage IPFS from a desktop app\"\n[IPFS Companion]: https://github.com/ipfs/ipfs-companion \"Integrate IPFS with your browser\"\n\n## Support goals\n\n### Platforms\n\nDue to the difficulty involved in debugging and development on platforms and versions not supported by github actions (and our CI/CD tests), we can only provide support for the [top 3 (mac, windows, ubuntu) `latest` platforms supported by github](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources). \n\nIf there is a new platform release, we will support bug-fixes and feature enhancements for that new platform, but will prioritize bug-fixes for things we can automate (CI/CD supported bugs/features).\n\n### Languages\n\nDue to a large demand and lack of time, as a general rule, we aim to support the latest (or most popular) officially supported versions of languages. \n\n#### NodeJS\n\n> Production applications should only use Active LTS or Maintenance LTS releases.\n\nSee https://nodejs.org/en/about/releases/ for the officially supported NodeJS Versions. We aim to support Active LTS or Maintenance LTS versions with a best-effort support for Current versions.\n\nSupport priority:\n\n1. Active LTS\n2. Maintenance LTS\n", "release_dates": []}, {"name": "ipfs-project.org", "description": null, "language": "HTML", "license": null, "readme": null, "release_dates": []}, {"name": "ipfs-repository-template", "description": "This is an empty repository template that includes issue templates and license.", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Repository Name\n=======================\n\n> Repository tagline\n\nA longer repository description.\n\n## Documentation\n\n[Insert link to documentation]() or expand with Install, Build, Usage sections.\n\n## Lead Maintainer\n\n[Your name](https://github.com/alinktoyourname)\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": []}, {"name": "ipfs-update", "description": "An updater tool for Kubo IPFS binary", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# ipfs-update\n\n> An updater tool for ipfs. Can fetch and install given versions of Kubo.\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.tech/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://travis-ci.org/ipfs/ipfs-update.svg?branch=master)](https://travis-ci.org/ipfs/ipfs-update)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n## Install\n\nYou can either install a pre-built binary or build `ipfs-update` from source.\n\n### Pre-built Binaries\n\nYou can download pre-built binaries at: https://dist.ipfs.tech/#ipfs-update\n\n### From Source\n\n`ipfs-update` uses go modules and requires Go version 1.12 or higher:\n\n```sh\n# You need to CD to a directory _outside_ of your GOPATH.\n$ cd /\n# Install with go modules enabled\n$ GO111MODULE=on go get github.com/ipfs/ipfs-update\n```\n\nNote: Your $GOPATH/bin should be within $PATH for the result ipfs-update binary\nto be found.\n\n## Usage\n\nIf you do not see the expected version listed by `ipfs-update versions`. Try updating\n`ipfs-update` (either by the above `go get` command or through gobuilder).\n\n#### version\n\n`$ ipfs-update version`\n\nPrints out the version of ipfs that is currently installed.\n\n#### versions\n\n`$ ipfs-update versions`\n\nPrints out all versions of ipfs available for installation.\n\n#### install\n\n`$ ipfs-update install <version>`\n\nDownloads, tests, and installs the specified version (or \"latest\" for\nlatest version) of ipfs. The existing version is stashed in case a revert is needed.\n\n#### revert\n\n`$ ipfs-update revert`\n\nReverts to the previously installed version of ipfs. This\nis useful if the newly installed version has issues and you would like to switch\nback to your older stable installation.\n\n#### fetch\n\n`$ ipfs-update fetch [version]`\n\nDownloads the specified version of ipfs into your current\ndirectory. This is a plumbing command that can be utilized in scripts or by\nmore advanced users.\n\n## Install Location\n\n`ipfs-update` tries to intelligently pick the correct install location for\nKubo.\n\n1. If you have Kubo (`ipfs`) installed, `ipfs-update` will install over your existing install.\n2. If you have a Go development environment setup, it will install Kubo along\n   with all of your other go programs.\n3. Otherwise, it will try to pick a sane, writable install location.\n\nSpecifically, `ipfs-update` will install Kubo according to the following\nalgorithm:\n\n0. If Kubo (`ipfs`) is already installed and in your PATH, `ipfs-update` will\n   replace it. `ipfs-update` will _fail_ if it can't and won't try to install\n   elsewhere.\n1. If Go is installed:\n  1. [GOBIN][go-env] if GOBIN is in your PATH.\n  2. For each `$path` in GOPATH, `$path/bin` if it's in your PATH.\n2. On Windows:\n  1. The current directory if it's writable and in your PATH.\n  2. The directory where the ipfs-update executable lives if it's executable and in your path.\n  3. The directory where the ipfs-update executable lives if it's executable and in your current working directory.\n3. On all platforms _except_ Windows:\n  1. If root:\n    1. `/usr/local/bin` if it exists, is writable, and is in your PATH.\n    2. `/usr/bin` if it exists, is writable, and is in your PATH.\n  2. `$HOME/.local/bin` if it exists, is writable, and is in your PATH.\n  3. `$HOME/bin` if it exists, is writable, and is in your PATH.\n  4. `$HOME/.local/bin` if we can create it and it's in your PATH.\n  5. `$HOME/bin` if we can create it and it's in your PATH.\n\n[go-env]: https://golang.org/cmd/go/#hdr-Environment_variables\n\n## Custom IPFS gateway URL\n\nBy default, `ipfs-update` uses https://ipfs.io as the gateway URL. If you wish to use your own IPFS gateway URL, please export it via the environment variable `IPFS_GATEWAY`.\n\nFor example:\n\n```sh\n$ IPFS_GATEWAY=\"https://dweb.link\" ipfs-update install latest\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/ipfs-update/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n\n", "release_dates": ["2022-08-31T13:13:22Z", "2022-02-18T05:54:20Z", "2021-04-01T01:30:57Z", "2021-04-01T01:20:42Z"]}, {"name": "ipfs-website", "description": "Official IPFS Project website", "language": "Vue", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Website (ipfs.tech)\n\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?)](https://ipfs.tech/)\n[![](https://img.shields.io/badge/framework-Nuxt-green.svg)](https://nuxtjs.org/)\n[![](https://img.shields.io/badge/deployed%20on-Fleek-ff69b4.svg)](https://fleek.co/)\n\n![Image of IPFS website displayed on a laptop](https://user-images.githubusercontent.com/1507828/121082054-c3df1480-c79a-11eb-89f0-681f41ec705c.png)\n\n**This repository contains code and content for the [official IPFS Project website](https://ipfs.tech)**, located at https://ipfs.tech. This site acts as a high-level overview of the IPFS project, offering valuable introductory information and next-steps pathways for prospective and current IPFS users and developers, members of the press, and more.\n\nPlease note that some sites closely related to this primary IPFS website have their own repos:\n- [IPFS Blog & News](https://github.com/ipfs/ipfs-blog)\n- [IPFS Ecosystem Directory](https://github.com/ipfs/ecosystem-directory)\n- [IPFS Documentation](https://github.com/ipfs/ipfs-docs)\n\n## For site developers\n\n### Pre requisites\n\n```bash\n# install node LTS/Current\nhttps://nodejs.org/en/download/\n\n# enable corepack in node > v16.17\ncorepack enable\n\n# install deps\npnpm i\n```\n\n### Run developer mode locally\n\nTo build a local copy, run the following:\n\n```bash\n# serve with hot reload at localhost:3000\npnpm dev\n\n```\n\n### Build for production\n\n```bash\n# build optimised static site\npnpm generate\n\n# launch a webserver to preview the site\npnpm preview\n```\n\n### PR and preview\n\nOnce you're happy with your local changes, please make a PR **against the `main` branch**. Including detailed notes on your PR - particularly screenshots to depict any changes in UI - will help speed up approval and deployment.\n\nAll PRs against `main` automatically generate Fleek previews to make it easier to \"check your work\". You can view your PR's preview by clicking `Details` in the `fleek/build` check at the bottom of your PR page:<br/>\n![image](https://user-images.githubusercontent.com/1507828/110034382-9dbb5b80-7cf7-11eb-89a4-7772970677d3.png)\n\nA reviewer will be by shortly to have a look!\n\n## Maintainers\n\nThis site's codebase is under active maintenance by members of the core [IPFS team](https://ipfs.tech/team/).\n\n## License\n\n\u00a9 Protocol Labs | Code is licensed with the [MIT](LICENSE) License. Except as noted, other content licensed [CC-BY 3.0](https://creativecommons.org/licenses/by/3.0/us/).\n", "release_dates": []}, {"name": "ipfs-webui", "description": "A frontend for an IPFS Kubo node.", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Web UI\n\n> A web interface to [IPFS](https://ipfs.tech), shipped with [Kubo](https://github.com/ipfs/kubo), and [ipfs-desktop](https://github.com/ipfs/ipfs-desktop/).\n>\n> Check on your node stats, explore the IPLD powered merkle forest, see peers around the world and manage your files, without needing to touch the CLI.\n\n![Screenshot of the status page](docs/screenshots/ipfs-webui-status.png)\n\n| Files | Explore | Peers | Settings |\n|-------|---------|-------|----------|\n| ![Screenshot of the file browser page](docs/screenshots/ipfs-webui-files.png) | ![Screenshot of the IPLD explorer page](docs/screenshots/ipfs-webui-explore.png) | ![Screenshot of the swarm peers map](docs/screenshots/ipfs-webui-peers.png) | ![Screenshot of the settings page](docs/screenshots/ipfs-webui-settings.png) |\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg)](https://protocol.ai/) [![](https://img.shields.io/github/release/ipfs/ipfs-webui.svg)](https://github.com/ipfs/ipfs-webui/releases/latest) [![i18n status](https://img.shields.io/badge/i18n-translated-blue.svg)](https://www.transifex.com/ipfs/ipfs-webui/) [![](https://img.shields.io/badge/matrix%20chat-%23lobby:ipfs.io-blue.svg?style=flat-square)](https://matrix.to/#/#lobby:ipfs.io)\n\nThe [latest release version](https://github.com/ipfs/ipfs-webui/releases/latest) is always at https://webui.ipfs.io, and the preview of `main` branch is at https://dev.webui.ipfs.io.\n\nThe IPFS WebUI is a **work-in-progress**. Help us make it better! We use the issues on this repo to track the work.\n\nThe app uses [`kubo-rpc-client`](https://github.com/ipfs/js-kubo-rpc-client) to communicate with your local IPFS node.\n\nThe app is built with [`create-react-app`](https://github.com/facebook/create-react-app). Please read the [docs](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#table-of-contents).\n\n## Install\n\nSupported Node.js versions:\n- [![](https://byob.yarr.is/ipfs/ipfs-webui/node-18.x)](https://github.com/ipfs/ipfs-webui/actions/workflows/node-versions.yml)\n- [![](https://byob.yarr.is/ipfs/ipfs-webui/node-20.x)](https://github.com/ipfs/ipfs-webui/actions/workflows/node-versions.yml)\n- [![](https://byob.yarr.is/ipfs/ipfs-webui/node-21.x)](https://github.com/ipfs/ipfs-webui/actions/workflows/node-versions.yml)\n\n```sh\n> npm install\n```\n\n#### A Note on NodeJS support\nWe aim to support ipfs-webui development and build with  \"Current\" and \"Active LTS\"  Nodejs versions.\n\nSee <https://nodejs.org/en/about/releases/> for more information about which versions have which release statuses.\n\n## Usage\n\n**When working on the code**, run an ipfs daemon, the local [dev server](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#npm-start), the [unit tests](https://facebook.github.io/jest/), and the [storybook](https://storybook.js.org/) component viewer and see the results of your changes as you save files.\n\nIn separate shells run the following:\n\n```sh\n# Run IPFS\n> ipfs daemon\n```\n\n```sh\n# Run the dev server @ http://localhost:3000\n> npm start\n```\n\n```sh\n# Run the unit tests in watch mode\n> npm run test:unit:watch\n```\n\n```sh\n# Run the UI component viewer @ http://localhost:9009\n> npm run storybook\n```\n\n### Configure IPFS API CORS headers\n\nYou must configure your IPFS API at http://127.0.0.1:5001  to allow [cross-origin (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) requests from your dev server at http://localhost:3000\n\nSimilarly if you want to try out pre-release versions at https://dev.webui.ipfs.io you need to add that as an allowed domain too.\n\n#### Easy mode\n\nRun the **[cors-config.sh](./cors-config.sh)** script with:\n\n```sh\n> ./cors-config.sh\n```\n\n#### The manual way\n\n```sh\n> ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:3000\", \"https://webui.ipfs.io\", \"http://127.0.0.1:5001\"]'\n> ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"POST\"]'\n```\n\n#### Reverting\n\nTo reset your config back to the default configuration, run the following command.\n\n```sh\n> ipfs config --json API.HTTPHeaders {}\n```\n\nYou might also like to copy the `~/.ipfs/config` file somewhere with a useful name so you can use `ipfs config replace <file>` to switch your node between default and dev mode easily.\n\n## Running with Docker\n\nIf you need to run IPFS in a Docker container, you can still have Web UI available by exposing both the Gateway and Web UI ports.\n\nUsing the default ports:\n\n```sh\ndocker pull ipfs/kubo\ndocker run -p 8080:8080 -p 5001:5001 -it ipfs/kubo\n```\n\nSee the [kubo page](https://hub.docker.com/r/ipfs/kubo) on Docker Hub to get started using IPFS with Docker.\n\n## Build\n\nTo create an optimized static build of the app, output to the `build` directory:\n\n```sh\n# Build out the html, css & jss to ./build\n> npm run build\n```\n\n## Test\n\nThe following command will run all tests: unit one for React and E2E against real HTTP API:\n\n```sh\n> npm test\n```\n\n## Unit tests\n\nTo watch source files and re-run the tests when changes are made:\n\n```sh\n> npm run test:unit\n```\n\nThe WebUI uses Jest to run the isolated unit tests. Unit test files are located next to the component they test and have the same file name, but with the extension `.test.js`\n\n## E2E tests\n\nThe end-to-end tests (E2E) test the full app in a headless Chromium browser. They spawn real IPFS node for HTTP API and a static HTTP server to serve the app.\nThe purpose of those tests is not being comprehensible, but act as a quick regression and integration suite.\nTest files are located in `test/e2e/`.\n\nMake sure `npm run build` is run before starting E2E tests:\n\n```sh\n> npm run build\n> npm run test:e2e # end-to-end smoke tests (fast, headless, use Kubo)\n```\n\n### Customizing E2E Tests\n\nDefault behavior can be tweaked via env variables below.\n\n#### `IPFS_GO_EXEC`\n\nIt is possible to test against arbitrary versions by tweaking `kubo` in `devDependencies` section of `package.json` and applying the change via `npm i`.\n\nOne can also override the binary used in e2e tests by providing a path to an alternative one via `IPFS_GO_EXEC`:\n\n```sh\n> IPFS_GO_EXEC=$GOPATH/bin/ipfs  npm run test:e2e\n```\n\n#### `E2E_API_URL`\n\nInstead of spawning a disposable node and repo for tests, one can point the E2E test suite at arbitrary HTTP API running on localhost:\n\n```sh\n> E2E_API_URL=http://127.0.0.1:5001 npm run test:e2e\n```\n\n**Caveat 1:** HTTP API used in tests needs to run on the local machine for Peers screen to pass (they test manual swarm connect to ephemeral `/ip4/120.0.0.1/..` multiaddr)\n\n**Caveat 2:** CORS requests from `http://localhost:3001` (static server hosting dev version of webui) need to be added to `Access-Control-Allow-Origin` whitelist array in node's config:\n\n```json\n\"API\": {\n  \"HTTPHeaders\": {\n    \"Access-Control-Allow-Methods\": [\"POST\"],\n    \"Access-Control-Allow-Origin\": [\n      \"http://localhost:5001\",\n      \"http://localhost:3001\"\n    ]\n  }\n}\n```\n\nCan be done ad-hoc via command line:\n\n```sh\n> ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:3001\", \"http://127.0.0.1:5001\"]'\n> ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"POST\"]'\n```\n\n### Debugging E2E tests\n\n#### Show the browser\n\nBy default, the test run headless, so you won't see the browser. To debug test errors, it can be helpful to see the robot clicking around the site.\nTo disable headless mode and see the browser, set the environment variable `DEBUG=true`:\n\n```sh\n> DEBUG=true npm run test:e2e # will show a browser window\n```\n\nTo build and run e2e only for a specific test script, pass its name:\n\n```sh\n> npm run build && npm run test:e2e -- --grep \"Settings\"\n```\n\n#### Breakpoints\n\nIt is possible to set a \"breakpoint\" via `await page.pause()` to stop tests at a specific line.\n\nRead more at <https://playwright.dev/docs/debug#using-pagepause>\n\n## Coverage\n\nTo do a single run of the tests and generate a coverage report, run the following:\n\n```sh\n> npm run test:coverage\n```\n\n## Lint\n\nPerform [`standard`](https://standardjs.com/) linting on the code:\n\n```sh\n> npm run lint\n```\n\n## Analyze\n\nTo inspect the built bundle for bundled modules and their size, first `build` the app then:\n\n```sh\n# Run bundle\n> npm run analyze\n```\n\n## Translations\n\nOne can permanently switch to a different locale via _Settings_ or temporarily via `?lng=<lang-code>` URL parameter.\n\nThe translations are stored on [./public/locales](./public/locales) and the English version is the source of truth. We use Transifex to help us translate WebUI to another languages.\n\n**If you're interested in contributing a translation**, go to [our page on Transifex](https://www.transifex.com/ipfs/ipfs-webui/translate/), create an account, pick a language and start translating. Be sure to change your notification settings to be notified when translation sources change.\n\nYou can read more on how we use Transifex and i18next in this app at [`docs/LOCALIZATION.md`](docs/LOCALIZATION.md)\n\n## Releasing\n\n1. Check that the [Transifex sync action](https://github.com/ipfs/ipfs-webui/actions/workflows/tx-pull.yml) is successful or fails because there are no updates.\n1. If UI is materially different, update screenshots in `README.md` and on docs.ipfs.io [here](https://docs.ipfs.io/how-to/command-line-quick-start/#web-console)\n1. Manually dispatch [ci.yml](https://github.com/ipfs/ipfs-webui/actions/workflows/ci.yml) workflow on `main` branch. This will create a new release.\n1. If release is good enough for LTS, update the CID at projects that use ipfs-webui by submitting PR against below lines:\n   - Kubo: https://github.com/ipfs/kubo/blob/master/core/corehttp/webui.go#L4\n   - IPFS Desktop: https://github.com/ipfs/ipfs-desktop/blob/main/package.json#L20\n\n<!-- DEPRECATED STEPS as of https://github.com/ipfs/ipfs-webui/releases/tag/v2.16.0. Leaving only for posterity:\n1. Check that the [Transifex sync action](https://github.com/ipfs/ipfs-webui/runs/7165373056?check_suite_focus=true) is [successful](https://github.com/ipfs/ipfs-webui/runs/7121497704?check_suite_focus=true) or [fails because there are no updates](https://github.com/ipfs/ipfs-webui/runs/7165373056?check_suite_focus=true).\n1. If UI is materially different, update screenshots in `README.md` and on docs.ipfs.io [here](https://docs.ipfs.io/how-to/command-line-quick-start/#web-console)\n1. Commit changes and ensure everything is merged into `main` branch\n1. Update the version (`npm version [major|minor|patch]`, it will create a new tag `vN.N.N`, note it down)\n1. Push `main` branch and the `vN.N.N` tag to GitHub: `git push && git push origin vN.N.N`\n1. Wait for `vN.N.N` to [build on CI](https://github.com/ipfs/ipfs-webui/actions), and grab the CID produced from the tagged commit\n1. Add release notes to https://github.com/ipfs/ipfs-webui/releases, use the tag and CID you created\n1. If release is good enough for LTS, update the CID at projects that use ipfs-webui by submitting PR against below lines:\n   - Kubo: https://github.com/ipfs/kubo/blob/master/core/corehttp/webui.go#L4\n   - IPFS Desktop: https://github.com/ipfs/ipfs-desktop/blob/master/package.json#L18\n-->\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/ipfs/ipfs-webui/issues/new) or submit PRs.\n\nTo contribute to IPFS in general, see the [contributing guide](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## Browser and device testing\n\n[<img src=\"https://ipfs.io/ipfs/QmbKK6f1cuRfb63dTULVgCvnpGj6Q6T16XyqeC3AXDUH2F/browserstack-logo-600x315.png\" width=\"300px\" />](https://www.browserstack.com/)\n\nWe would like to thank [BrowserStack](https://www.browserstack.com/) for supporting Open Source and making it possible to test the IPFS Web UI on a wide array of operating systems and devices, improving compatibility for everyone.\n\n## License\n\n[MIT](LICENSE) \u00a9 Protocol Labs\n", "release_dates": ["2023-12-02T01:28:50Z", "2023-09-11T18:51:03Z", "2023-07-25T22:27:24Z", "2023-07-03T22:09:03Z", "2023-06-14T07:58:21Z", "2023-06-12T18:59:21Z", "2023-04-24T20:06:34Z", "2023-01-27T18:39:57Z", "2022-12-09T23:17:28Z", "2022-11-09T23:24:40Z", "2022-10-03T19:29:08Z", "2022-09-13T20:28:07Z", "2022-09-09T23:33:13Z", "2022-07-09T20:37:40Z", "2022-07-09T05:13:12Z", "2022-07-09T03:48:09Z", "2022-07-08T19:09:47Z", "2022-06-29T18:16:33Z", "2022-02-11T14:01:11Z", "2022-02-02T19:48:37Z", "2021-09-06T13:12:57Z", "2021-07-05T12:52:31Z", "2021-05-21T16:57:20Z", "2021-04-30T14:10:01Z", "2021-04-27T13:05:27Z", "2021-04-19T20:36:58Z", "2020-10-07T11:55:57Z", "2020-10-06T17:15:05Z", "2020-09-28T15:31:45Z", "2020-09-14T21:53:10Z"]}, {"name": "ipfs.fyi", "description": "IPFS shortlinks", "language": null, "license": null, "readme": "# \ud83d\udcc7 ipfs.fyi shortlinks\n\n<img src=\"./logo.png\" align=\"right\" alt=\"ipfs.fyi logo\" />\n\nipfs.fyi is a short link service that uses the [**`_redirects`**](./_redirects) file to configure redirections.\n\nIt allows creating shortlinks with the `ipfs.fyi` domain\n\n## Example\n\nTo redirect from **`ipfs.fyi/blog`** \u27a1\ufe0f `https://blog.ipfs.tech` with an HTTP `301` code, add the following line to [**`_redirects`**](./_redirects) :\n\n```\n/blog   https://blog.ipfs.tech  301\n```\n\n## `_redirects` file syntax\n\n[`_redirects` syntax docs](https://docs.netlify.com/routing/redirects/redirect-options/)\n\n\n## Deployment details\n\nCurrently deployed to Netlify\n", "release_dates": []}, {"name": "ipget", "description": "Retrieve files over IPFS and save them locally.", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# ipget\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n\n> wget for IPFS: retrieve files over IPFS and save them locally.\n\n`ipget` is a standalone program analogous to [GNU `wget`](https://www.gnu.org/software/wget/). Unlike wget though, `ipget` specializes in downloading files and directory structures from the [IPFS network](https://ipfs.io).\n\n`ipget` includes its own IPFS node, so you don't need IPFS installed on your\nsystem. This makes it ideal for users and projects that want a simple utility\nfor whenever they want to retrieve files from IPFS.\n\n\n## Install\n\nDownload a binary for your platform from [IPFS Distributions](https://dist.ipfs.io/#ipget).\n\n### Install From Source\n\n```\n$ go install github.com/ipfs/ipget@latest\n```\n\n### Example\n\nFind a fun IPFS address and `ipget` away!\n\n```\n$ ipget QmQ2r6iMNpky5f1m4cnm3Yqw8VSvjuKpTcK1X7dBR1LkJF/cat.gif -o nyan.gif\n```\nor with an `/ipfs` prefix:\n```\n$ ipget -o nyan.gif /ipfs/QmQ2r6iMNpky5f1m4cnm3Yqw8VSvjuKpTcK1X7dBR1LkJF/cat.gif\n```\nor even IPNS addresses (note this is an IPNS address example and does not work):\n```\n$ ipget /ipns/QmQG1kwx91YQsGcsa9Z1p6BPJ3amdiSLLmsmAoEMwbX61b/files/cat.gif\n```\n\n## Usage\n\n```\nNAME:\n   ipget - Retrieve and save IPFS objects.\n\nUSAGE:\n   ipget [global options] command [command options] [arguments...]\n\nVERSION:\n   0.9.2\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --output value, -o value  specify output location\n   --node value, -n value    specify ipfs node strategy (\"local\", \"spawn\", \"temp\" or \"fallback\") (default: \"fallback\")\n   --peers value, -p value   specify a set of IPFS peers to connect to\n   --progress                show a progress bar (default: false)\n   --help, -h                show help (default: false)\n   --version, -v             print the version (default: false)\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/ipget/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": ["2023-10-17T17:33:27Z", "2023-04-04T04:41:54Z"]}, {"name": "ipld-explorer-components", "description": "React components for https://explore.ipld.io and ipfs-webui", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# IPLD Explorer Components\n\n> React components for https://explore.ipld.io (https://github.com/ipfs/explore.ipld.io) and ipfs-webui\n\n![Screenshot of the IPLD explorer](https://user-images.githubusercontent.com/58871/43152632-f310763c-8f66-11e8-9449-2e362a9f3047.png)\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg)](https://protocol.ai/) [![](https://img.shields.io/badge/project-IPFS-blue.svg)](http://ipfs.io/) [![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg)](http://webchat.freenode.net/?channels=%23ipfs) [![Build Status](https://img.shields.io/circleci/project/github/ipfs-shipyard/ipld-explorer-components.svg?style=flat-square)](https://circleci.com/gh/ipfs-shipyard/ipld-explorer-components) [![Dependencies Status](https://david-dm.org/ipfs-shipyard/ipld-explorer-components/master/status.svg)](https://david-dm.org/ipfs-shipyard/ipld-explorer-components/master)\n\n## Background\n\nThis module was extracted from the [explore.ipld.io](https://github.com/ipfs/explore.ipld.io) so it could be reused from the [IPFS Web UI](https://github.com/ipfs/ipfs-webui).\n\n## Usage\n\n**WARNING: This module is not intended to be re-used in it's current form by other projects.** There is more work to do to make this a nice set of generic components.\n\nInstall it from npm:\n\n```console\nnpm install ipld-explorer-components\n```\n\nThe ES5 friendly version of the `src` dir is generated to the `dist` dir and the\npage components are all provided as named exports so you can import them like so:\n\n```js\nimport {ExplorePage, StartExploringPage} from `ipld-explorer-components`\n```\n\nThe following Components are available:\n\n```js\nexport {\n  StartExploringPage,\n  ExplorePage,\n  IpldExploreForm,\n  IpldCarExploreForm,\n  CidInfo,\n  IpldGraph\n  ObjectInfo,\n  exploreBundle,\n  heliaBundle\n}\n```\n\nThere are `peerDependencies` so that the parent app can pick the versions of common deps. You'll need to add relevant deps to your project.\n\n\nAnd, assuming you are using `create-react-app` or a similar webpack set up, you'll need the following CSS imports:\n\n```js\nimport 'tachyons'\nimport 'ipfs-css'\nimport 'react-virtualized/styles.css'\nimport 'ipld-explorer-components/dist/components/object-info/LinksTable.css'\nimport 'ipld-explorer-components/dist/components/loader/Loader.css'\n```\n\n### Adding another codec\n\n**NOTE:** PRs adding an old IPLDFormat codec would need the old `blockcodec-to-ipld-format` tool, which has many out-of-date deps. We will only accept PRs for adding BlockCodec interface codecs.\n\nTo add another codec, you will need to update all locations containing the comment `// #WhenAddingNewCodec`:\n\n1. Add a dependency on the codec to this package (if it's not already in multiformats or other package)\n1. Add the codec in the switch statement in [./src/lib/codec-importer.ts](./src/lib/codec-importer.ts)\n1. Update [./src/lib/get-codec-name-from-code.ts](./src/lib/get-codec-name-from-code.ts) to return the codec name for your codec\n1. Add a unit test to [./src/lib/resolve-ipld-path.test.js](./src/lib/resolve-ipld-path.test.js) and ensure that calling `resolveIpldPath` returns the expected results\n    * If the default `resolveFn` in [./src/lib/get-codec-for-cid.ts](./src/lib/get-codec-for-cid.ts) doesn't resolve your paths correctly, you will need to add a resolver method for your codec to the `codecResolverMap` in [./src/lib/get-codec-for-cid.ts](./src/lib/get-codec-for-cid.ts)\n\nsee https://github.com/ipfs/ipld-explorer-components/pull/360#discussion_r1206251817 for history.\n\n### Adding another hasher\n\nTo add another hasher, you will need to update all locations containing the comment `// #WhenAddingNewHasher`:\n\n1. Add a dependency on the hasher to this package (if it's not already in multiformats or other package)\n1. Add the hasher in the switch statement in [./src/lib/get-codec-for-cid.ts](./src/lib/get-codec-for-cid.ts)\n1. Update [./src/lib/hash-importer.ts](./src/lib/hash-importer.ts)\n    - Update `SupportedHashers` to include your hasher type\n    - Update `getHasherForCode` to return your hasher\n1. Update the hasher codes used by the `hashers` property passed to Helia init in [./src/lib/init-helia.ts](./src/lib/init-helia.ts)\n\nsee https://github.com/ipfs/ipld-explorer-components/pull/395 for an example.\n\n### Redux-bundler requirements\n\nThese components use [redux-bundler](https://reduxbundler.com/), and your app will need to use a redux-bundler provider to propagate the properties and selectors. You can find a basic example in ./dev/devPage.jsx.\n\nIn short, these components export two bundles found in ./src/bundles: `explore` and `heliaBundle`. The explore bundle and components herein have a few redux-bundler selector dependencies that you need to make sure exist and are called properly.\n\n| Dependent          | redux-bundler selector | Notes                                                                                                         |\n|--------------------|------------------------|---------------------------------------------------------------------------------------------------------------|\n| explore bundle     | selectHeliaReady        | The explore bundle depends on this selector so it knows when the Helia node is available for use               |\n| explore & other bundles     | selectHelia        | The explore bundle gets the Helia node via this selector |\n| Main page (or any) | doInitHelia             | A consuming app needs to call this selector to tell the bundle that provides the Helia node to instantiate it. |\n\nIf you don't want to use the `heliaBundle`, you must adapt the selectors appropriately.\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/ipfs/ipld-explorer-components/issues/new) or submit PRs.\n\nTo contribute to IPFS in general, see the [contributing guide](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## Releasing\n\n- Run `tx pull -a` to pull the latest translations from Transifex ([i18n#transifex-101)](https://github.com/ipfs-shipyard/i18n#transifex-101))\n- Update the version (`npm version major/minor/patch`)\n- Push the changes (`git push && git push --follow-tags`)\n- Update the [changelog](./CHANGELOG.md)\n- Add release notes to https://github.com/ipfs/ipld-explorer-components/releases, use the tag and copy changelog changes\n- Publish to npm (`npm publish`)\n\n## License\n\n[MIT](LICENSE) \u00a9 Protocol Labs\n", "release_dates": ["2024-02-02T20:37:12Z", "2023-12-01T20:10:49Z", "2023-11-30T07:14:55Z", "2023-11-30T06:37:46Z", "2023-11-30T04:16:02Z", "2023-11-30T03:28:06Z", "2023-07-28T18:53:10Z", "2023-07-24T19:30:31Z", "2023-07-12T17:02:55Z", "2023-06-08T22:31:04Z", "2022-12-06T12:46:38Z", "2022-11-10T17:37:08Z", "2022-10-26T11:41:06Z", "2022-10-05T17:45:41Z", "2022-09-19T17:07:28Z", "2022-09-12T16:31:59Z", "2022-07-12T09:10:28Z", "2022-07-06T13:49:43Z", "2022-06-06T18:31:17Z", "2022-06-06T17:31:40Z", "2022-05-16T10:41:31Z", "2022-04-25T14:12:37Z", "2022-04-25T13:02:34Z", "2022-04-13T21:56:07Z", "2022-04-13T15:50:58Z", "2022-01-17T16:09:55Z", "2021-04-12T00:47:35Z", "2021-04-07T18:50:11Z", "2021-04-02T22:24:41Z", "2020-10-06T17:28:27Z"]}, {"name": "iptb", "description": "InterPlanetary TestBed \ud83c\udf0c\ud83d\udecc", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPTB\n\n`iptb` is a program used to create and manage a cluster of sandboxed nodes\nlocally on your computer. Spin up 1000s of nodes! Using `iptb` makes testing\nlibp2p networks easy!\n\nFor working with IPFS please see [ipfs/iptb-plugins](https://github.com/ipfs/iptb-plugins).\n\n### Example (ipfs)\n\n```\n$ iptb auto -type <plugin> -count 5\n<output removed>\n\n$ iptb start\n\n$ iptb shell 0\n$ echo $IPFS_PATH\n/home/iptb/testbed/testbeds/default/0\n\n$ echo 'hey!' | ipfs add -q\nQmNqugRcYjwh9pEQUK7MLuxvLjxDNZL1DH8PJJgWtQXxuF\n\n$ exit\n\n$ iptb connect 0 4\n\n$ iptb shell 4\n$ ipfs cat QmNqugRcYjwh9pEQUK7MLuxvLjxDNZL1DH8PJJgWtQXxuF\nhey!\n```\n\n### Usage\n```\nNAME:\n   iptb - iptb is a tool for managing test clusters of libp2p nodes\n\nUSAGE:\n   iptb [global options] command [command options] [arguments...]\n\nVERSION:\n   2.0.0\n\nCOMMANDS:\n     auto     create default testbed and initialize\n     testbed  manage testbeds\n     help, h  Shows a list of commands or help for one command\n   ATTRIBUTES:\n     attr  get, set, list attributes\n   CORE:\n     init     initialize specified nodes (or all)\n     start    start specified nodes (or all)\n     stop     stop specified nodes (or all)\n     restart  restart specified nodes (or all)\n     run      run command on specified nodes (or all)\n     connect  connect sets of nodes together (or all)\n     shell    starts a shell within the context of node\n   METRICS:\n     logs    show logs from specified nodes (or all)\n     events  stream events from specified nodes (or all)\n     metric  get metric from node\n\nGLOBAL OPTIONS:\n   --testbed value  Name of testbed to use under IPTB_ROOT (default: \"default\") [$IPTB_TESTBED]\n   --quiet          Suppresses extra output from iptb\n   --help, -h       show help\n   --version, -v    print the version\n```\n\n### Install\n\n_Note: For MacOS golang v1.11 is needed to support plugin loading\n(see [golang/go#24653](https://github.com/golang/go/issues/24653) for more information)_\n\n```\n$ go get github.com/ipfs/iptb\n```\n\n### Plugins\n\nPlugins are now used to implement support for managing nodes. Plugins are\nstored under `$IPTB_ROOT/plugins` (see [configuration](#configuration))\n\nPlugins for the IPFS project can be found in [ipfs/iptb-plugins](https://github.com/ipfs/iptb-plugins).\n\n### Configuration\n\nBy default, `iptb` uses `$HOME/testbed` to store created nodes. This path is configurable via the environment variables `IPTB_ROOT`.\n\n### License\n\nMIT\n", "release_dates": []}, {"name": "iptb-plugins", "description": "IPTB Plugins for IPFS", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPTB Plugins\n\nThis project contains the IPFS plugins for IPTB. Due to the way IPFS manages dependencies,\nthese plugins cannot be easily loaded into a generic build of IPTB, and must be use with\nthe IPTB build in this project.\n\n### Example\n\n```\n$ iptb auto -type localipfs -count 5\n<output removed>\n\n$ iptb start\n\n$ iptb shell 0\n$ echo $IPFS_PATH\n/home/iptb/testbed/testbeds/default/0\n\n$ echo 'hey!' | ipfs add -q\nQmNqugRcYjwh9pEQUK7MLuxvLjxDNZL1DH8PJJgWtQXxuF\n\n$ exit\n\n$ iptb connect 0 4\n\n$ iptb shell 4\n$ ipfs cat QmNqugRcYjwh9pEQUK7MLuxvLjxDNZL1DH8PJJgWtQXxuF\nhey!\n```\n\n### Usage\n```\nNAME:\n   iptb - iptb is a tool for managing test clusters of libp2p nodes\n\nUSAGE:\n   iptb [global options] command [command options] [arguments...]\n\nVERSION:\n   2.0.0\n\nCOMMANDS:\n     auto     create default testbed and initialize\n     testbed  manage testbeds\n     help, h  Shows a list of commands or help for one command\n   ATTRIBUTES:\n     attr  get, set, list attributes\n   CORE:\n     init     initialize specified nodes (or all)\n     start    start specified nodes (or all)\n     stop     stop specified nodes (or all)\n     restart  restart specified nodes (or all)\n     run      run command on specified nodes (or all)\n     connect  connect sets of nodes together (or all)\n     shell    starts a shell within the context of node\n   METRICS:\n     logs    show logs from specified nodes (or all)\n     events  stream events from specified nodes (or all)\n     metric  get metric from node\n\nGLOBAL OPTIONS:\n   --testbed value  Name of testbed to use under IPTB_ROOT (default: \"default\") [$IPTB_TESTBED]\n   --quiet          Suppresses extra output from iptb\n   --help, -h       show help\n   --version, -v    print the version\n```\n\n### Install\n\n```\n$ go get -d github.com/ipfs/iptb-plugins\n$ cd $GOPATH/src/github.com/ipfs/iptb-plugins\n$ make install\n```\n\n### License\n\nMIT\n", "release_dates": ["2023-01-18T20:38:18Z", "2020-07-07T18:22:20Z", "2020-05-01T23:26:29Z", "2019-09-25T22:39:52Z"]}, {"name": "js-blockstore-core", "description": "Contains various implementations of the API contract described in interface-blockstore", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# blockstore-core <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-blockstore-core.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-blockstore-core)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-blockstore-core/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-blockstore-core/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Contains various implementations of the API contract described in interface-blockstore\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Implementations](#implementations)\n- [Usage](#usage)\n  - [BaseBlockstore](#baseblockstore)\n  - [MemoryBlockstore](#memoryblockstore)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i blockstore-core\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `BlockstoreCore` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/blockstore-core/dist/index.min.js\"></script>\n```\n\n## Implementations\n\n- Base: [`src/base`](src/base.js)\n- Memory: [`src/memory`](src/memory.js)\n\n## Usage\n\n### BaseBlockstore\n\nProvides a complete implementation of the Blockstore interface.  You must implement `.get`, `.put`, etc.\n\n```js\nimport { BaseBlockstore } from 'blockstore-core/base'\n\nclass MyCustomBlockstore extends BaseBlockstore {\n  put (key, val, options) {\n    // store a block\n  }\n\n  get (key, options) {\n    // retrieve a block\n  }\n\n  // ...etc\n}\n```\n\n### MemoryBlockstore\n\nA simple Blockstore that stores blocks in memory.\n\n```js\nimport { MemoryBlockstore } from 'blockstore-core/memory'\n\nconst store = new MemoryBlockstore()\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-blockstore-core>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-blockstore-core/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:09:45Z", "2023-03-14T13:32:49Z", "2023-03-13T11:50:40Z", "2023-01-06T13:29:13Z", "2022-10-14T17:29:30Z", "2022-08-13T18:34:47Z", "2022-08-13T17:47:41Z", "2022-01-07T20:13:00Z", "2022-01-07T19:25:55Z", "2022-01-04T19:29:32Z", "2021-09-09T10:29:54Z", "2021-09-09T10:23:47Z", "2021-09-09T07:25:48Z", "2021-09-09T07:12:03Z", "2021-09-09T06:54:24Z"]}, {"name": "js-blockstore-datastore-adapter", "description": "A blockstore that uses a datastore for storage", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# blockstore-datastore-adapter <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-blockstore-datastore-adapter.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-blockstore-datastore-adapter)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-blockstore-datastore-adapter/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-blockstore-datastore-adapter/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> datastore interface\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i blockstore-datastore-adapter\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `BlockstoreDatastoreAdapter` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/blockstore-datastore-adapter/dist/index.min.js\"></script>\n```\n\n## Usage\n\n```js\nimport { MemoryDatastore } from 'datastore-core/memory'\nimport { BlockstoreDatastoreAdapter } from 'blockstore-datastore-adapter'\n\nconst store = new BlockstoreDatastoreAdapter(new MemoryDatastore())\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-blockstore-datastore-adapter>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-blockstore-datastore-adapter/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-01-06T14:00:46Z", "2022-10-18T10:25:56Z", "2022-08-13T18:04:04Z", "2022-08-12T13:55:55Z", "2021-09-29T09:58:41Z", "2021-09-17T09:31:16Z", "2021-09-17T09:28:29Z", "2021-09-09T08:46:18Z", "2021-09-09T08:29:39Z", "2021-09-02T14:39:20Z", "2021-07-06T14:17:26Z", "2021-07-01T10:08:46Z", "2021-06-29T11:06:33Z", "2021-06-28T15:17:24Z", "2021-06-28T14:23:01Z"]}, {"name": "js-blockstore-fs", "description": "Blockstore implementation with file system backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# blockstore-fs <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-blockstore-fs.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-blockstore-fs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-blockstore-fs/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-blockstore-fs/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Blockstore implementation with file system backend\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i blockstore-fs\n```\n\n## Usage\n\n```js\nimport { FSBlockstore } from 'blockstore-fs'\n\nconst store = new FSBlockstore('path/to/store')\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-blockstore-fs>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-blockstore-fs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:29:59Z", "2023-03-13T12:50:05Z"]}, {"name": "js-blockstore-idb", "description": "Blockstore implementation with IndexedDB backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# blockstore-idb <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-blockstore-idb.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-blockstore-idb)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-blockstore-idb/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-blockstore-idb/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Blockstore implementation with IndexedDB backend\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i blockstore-idb\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `BlockstoreIdb` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/blockstore-idb/dist/index.min.js\"></script>\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-blockstore-idb>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-blockstore-idb/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:29:59Z", "2023-03-14T17:48:44Z", "2023-03-14T15:09:27Z"]}, {"name": "js-blockstore-level", "description": "Blockstore implementation with level(up|down) backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# blockstore-level <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-blockstore-level.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-blockstore-level)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-blockstore-level/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-blockstore-level/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Blockstore implementation with level(up|down) backend\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i blockstore-level\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `BlockstoreLevel` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/blockstore-level/dist/index.min.js\"></script>\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-blockstore-level>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-blockstore-level/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:29:28Z", "2023-03-14T13:38:30Z"]}, {"name": "js-core", "description": "\ud83c\udf1f Entry point for coordination of the JS Core working group members", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# JS Core\n\n[![](https://github.com/ipfs/team-mgmt/blob/master/img/badges/js-core.svg)](https://github.com/ipfs/js-core)\n\nEntry point for coordination of the JS Core working group members.\n \n **Responsibilities include**:\n \n - Implement and maintain the IPFS protocol and tools\n - Enable IPFS usage in browsers, Node.js and other JavaScript runtimes\n - Maintain interoperability with other IPFS implementations\n - Incubate and grow projects that will encourage IPFS adoption\n\nSee our current work-in-progress through our [quarterly OKRs](https://github.com/ipfs/team-mgmt/blob/master/OKR/JS_CORE.md)\n\n## Kanban\n\n[Zenhub JS Core Kanban Board](https://app.zenhub.com/workspaces/js-core-5ce2c3b92b8e1f07d1c356e2/)\n\n## Weekly Sync\n\nThis group **meets every Monday at 5:30pm UTC**. The call is listed on the [IPFS Community Calendar](https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84@group.calendar.google.com&ctz=UTC).\n\n- [Notes](https://github.com/ipfs/team-mgmt/issues/650)\n- [Recordings](https://www.youtube.com/playlist?list=PLuhRWgmPaHtQqMRwzpmlDqGs3m03rCSRP)\n\n## Team\n\nIn alphabetical order we are:\n\n- [Alan Shaw](https://github.com/alanshaw)\n- [Alex Potsides](https://github.com/achingbrain)\n- [David Dias](https://github.com/daviddias)\n- [Dirk McCormick](https://github.com/dirkmc)\n- [Jacob Heun](https://github.com/jacobheun)\n- [Vasco Santos](https://github.com/vasco-santos)\n- [Volker Mische](https://github.com/vmx)\n", "release_dates": []}, {"name": "js-dag-service", "description": "Library for storing and replicating hash-linked data over the IPFS network.", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# DAGService\n\n[![Chat on IRC](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Chat on Matrix](https://img.shields.io/badge/matrix-%23ipfs%3Amatrix.org-blue.svg?style=popout-square)](https://riot.im/app/#/room/#ipfs-dev:matrix.org)\n[![GitHub package.json version](https://img.shields.io/github/package-json/v/ipfs/js-dag-service/default.svg?style=popout-square)](./package.json)\n[![npm (scoped)](https://img.shields.io/npm/v/dag-service.svg?style=popout-square)](https://www.npmjs.com/package/dag-service)\n[![Release](https://img.shields.io/github/release/textileio/js-ipfs-lite.svg?style=flat-square)](https://github.com/ipfs/js-dag-service/releases/latest)\n[![docs](https://img.shields.io/badge/docs-master-success.svg?style=popout-square)](https://ipfs.github.io/js-dag-service/)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> DAGService is a library for storing and replicating hash-linked\n> data over the IPFS network.\n\nDAGService is aiming to be a bare minimum needed for [IPLD][]-based applications\nto interact with the IPFS network by getting and putting blocks to it.\n\n**NOTE** For now, this is a highly experimental library. Use with caution.\n\n> This project was originally developed under the [@textileio](https://github.com/textileio/) organization, and was contributed to the IPFS community for ongoing maintenance and development.\n\n## Table of Contents\n\n- [Background](#background)\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Maintainers](#maintainers)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Background\n\nThe goal of DAGService to provied a minimal layer between data model of [IPLD][]\nand full blown [IPFS][]. It provides bare minimum functionality for any\napplication to interact with the IPFS network (by getting and putting [IPLD][]\nblocks) without having to deal with the complexities of operating a full\nIPFS node. It is an attempt to remake core piece of IPFS node reusable on it's\nown.\n\n### Why?\n\nBecause 99% of the time, a browser or mobile (d)App only needs to be able to add and get small bits of data over the IPFS network. This library provides that, in a much smaller package (currently less than 1/2 the size of `js-ipfs` without much optimization -- we will continue to optimize further). It is also highly extensible, so developers need only include the features they _need_, keeping load times fast, and (d)Apps feeling snappy. Additionally, Textile needed a Typescript-based IPFS solution, and we think others will find the type safety useful as well. Feel free to use the [Typescript declarations](https://github.com/ipfs/js-dag-service/tree/default/src/@types) in your own projects.\n\n## Install\n\n```\nnpm install dag-service\n```\n\n## Usage\n\n```typescript\nimport { Peer, BlockStore } from \"dag-service\"\n// Use any interface-datastore compliant store\nimport { MemoryDatastore } from \"interface-datastore\"\nimport Libp2p from \"libp2p\"\n\nconst store = new BlockStore(new MemoryDatastore())\n\nconst main = async () => {\n  // Bring your own libp2p host....\n  const host = new Libp2p({ ...libp2Options })\n  const lite = new Peer(store, host)\n\n  await lite.start()\n\n  const cid = \"QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u\"\n  const data = await lite.getFile(cid)\n  console.log(data.toString())\n  // Hello World\n  await lite.stop()\n}\n```\n\nThere are also several useful examples included in the tests of this repo, with tools for creating a default `libp2p` host exported by default. We've also thrown in some useful interfaces to use when building on IPFS Lite, as well as the Buffer API for use in the browser.\n\n## API\n\nSee [https://ipfs.github.io/js-dag-service/](https://ipfs.github.io/js-dag-service/)\n\n## Maintainers\n\n- [Irakli Gozalishvili](https://github.com/gozala/)\n- [Carson Farmer](https://github.com/carsonfarmer)\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/ipfs/js-dag-service/issues/new) or submit PRs.\n\nTo contribute to IPFS in general, see the [contributing guide](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\nProject follows the [IPFS Community Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md)\n\n## License\n\nThe js-dag-service project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\n\n[ipld]: https://ipld.io/\n[ipfs]: https://ipfs.io/\n", "release_dates": ["2020-01-24T18:30:30Z", "2019-11-20T20:48:20Z", "2019-11-09T05:12:35Z"]}, {"name": "js-datastore-core", "description": "Contains various implementations of the API contract described in interface-datastore ", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# datastore-core <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-core.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-core)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-core/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-core/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Wrapper implementation for interface-datastore\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Implementations](#implementations)\n- [Usage](#usage)\n  - [BaseDatastore](#basedatastore)\n  - [Wrapping Stores](#wrapping-stores)\n- [Contribute](#contribute)\n- [License](#license)\n- [Contribute](#contribute-1)\n\n## Install\n\n```console\n$ npm i datastore-core\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `DatastoreCore` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/datastore-core/dist/index.min.js\"></script>\n```\n\n## Implementations\n\n- Wrapper Implementations\n  - Mount: [`src/mount`](src/mount.js)\n  - Keytransform: [`src/keytransform`](src/keytransform.js)\n  - Sharding: [`src/sharding`](src/sharding.js)\n  - Tiered: [`src/tiered`](src/tirered.js)\n  - Namespace: [`src/namespace`](src/namespace.js)\n\n## Usage\n\n### BaseDatastore\n\nAn base store is made available to make implementing your own datastore easier:\n\n```javascript\nimport { BaseDatastore } from 'datastore-core'\n\nclass MyDatastore extends BaseDatastore {\n  constructor () {\n    super()\n  }\n\n  async put (key, val) {\n    // your implementation here\n  }\n\n  async get (key) {\n    // your implementation here\n  }\n\n  // etc...\n}\n```\n\nSee the [MemoryDatastore](./src/memory.js) for an example of how it is used.\n\n### Wrapping Stores\n\n```js\nimport { Key } from 'interface-datastore'\nimport {\n  MemoryStore,\n  MountStore\n} from 'datastore-core'\n\nconst store = new MountStore({prefix: new Key('/a'), datastore: new MemoryStore()})\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipfs-unixfs-importer/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-core/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:18:46Z", "2023-03-14T17:48:51Z", "2023-03-13T19:13:48Z", "2023-03-13T16:17:27Z", "2023-03-13T15:53:32Z", "2023-01-11T16:39:49Z", "2022-12-23T10:37:26Z", "2022-10-12T15:44:38Z", "2022-08-12T08:47:31Z", "2022-08-12T06:19:17Z", "2022-07-25T11:49:15Z", "2022-07-21T12:01:00Z", "2022-01-28T09:13:56Z", "2022-01-19T12:11:21Z", "2021-09-09T10:22:26Z", "2021-09-09T07:13:00Z", "2021-09-08T15:05:25Z", "2021-09-08T15:01:05Z", "2021-09-08T14:49:15Z", "2021-09-08T14:44:40Z", "2021-09-08T14:41:08Z", "2021-09-08T14:37:57Z", "2021-08-23T06:31:42Z", "2021-07-23T16:46:43Z", "2021-07-06T14:39:24Z", "2021-04-15T11:16:15Z", "2021-01-22T17:36:22Z", "2020-11-09T16:35:51Z", "2020-07-29T12:40:46Z", "2020-05-07T15:35:57Z"]}, {"name": "js-datastore-fs", "description": "Datastore implementation with file system backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# datastore-fs <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-fs.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-fs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-fs/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-fs/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Datastore implementation with file system backend\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i datastore-fs\n```\n\n## Usage\n\n```js\nimport { FSDatastore } from 'datastore-fs'\n\nconst store = new FSDatastore('path/to/store')\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-datastore-fs>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-fs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:50:21Z", "2023-03-14T08:11:21Z", "2022-08-12T09:11:05Z", "2022-01-19T13:17:17Z", "2021-09-09T06:38:46Z", "2021-09-08T16:35:55Z", "2021-07-23T16:44:27Z", "2021-07-10T10:03:33Z", "2021-07-06T14:50:08Z", "2021-05-04T10:18:20Z", "2021-04-15T11:32:28Z", "2021-04-14T12:17:58Z", "2021-04-06T17:02:13Z", "2021-01-22T19:10:48Z", "2020-11-09T16:47:11Z", "2020-08-15T07:51:24Z", "2020-07-29T13:15:31Z", "2020-05-07T16:26:11Z", "2020-04-28T08:10:44Z", "2019-09-09T10:03:42Z", "2019-09-08T06:43:54Z", "2019-05-29T19:50:11Z", "2018-10-25T14:06:30Z", "2018-09-19T21:07:51Z", "2018-05-28T05:19:53Z", "2017-12-05T09:16:01Z", "2017-11-06T07:25:09Z", "2017-11-04T09:20:14Z", "2017-07-23T06:11:55Z", "2017-03-17T12:26:04Z"]}, {"name": "js-datastore-idb", "description": "Datastore implementation with IndexedDB backend.", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# datastore-idb <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-idb.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-idb)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-idb/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-idb/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Datastore implementation with IndexedDB backend.\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i datastore-idb\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `DatastoreIdb` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/datastore-idb/dist/index.min.js\"></script>\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-datastore-idb>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-idb/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:49:55Z", "2023-03-14T18:36:27Z", "2020-05-07T17:07:47Z", "2020-04-24T14:22:18Z", "2020-04-23T17:27:48Z", "2020-04-08T14:49:32Z"]}, {"name": "js-datastore-level", "description": "Datastore implementation with level(up/down) backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# datastore-level <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-level.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-level)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-level/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-level/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Datastore implementation with level(up|down) backend\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n  - [Browser Shimming Leveldown](#browser-shimming-leveldown)\n  - [Database names](#database-names)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i datastore-level\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `DatastoreLevel` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/datastore-level/dist/index.min.js\"></script>\n```\n\n## Usage\n\n```js\nimport { LevelDatastore } from 'datastore-level'\n\n// Default using level as backend for node or the browser\nconst store = new LevelDatastore('path/to/store')\n\n// another leveldown compliant backend like memory-level\nconst memStore = new LevelDatastore(\n  new MemoryLevel({\n    keyEncoding: 'utf8',\n    valueEncoding: 'view'\n  })\n)\n```\n\n### Browser Shimming Leveldown\n\n`LevelStore` uses the `level` module to automatically use `level` if a modern bundler is used which can detect bundle targets based on the `pkg.browser` property in your `package.json`.\n\nIf you are using a bundler that does not support `pkg.browser`, you will need to handle the shimming yourself, as was the case with versions of `LevelStore` 0.7.0 and earlier.\n\n### Database names\n\n`level-js@3` changed the database prefix from `IDBWrapper-` to `level-js-`, so please specify the old prefix if you wish to continue using databases created using `datastore-level` prior to `v0.12.0`.  E.g.\n\n```javascript\nimport leveljs from 'level-js'\nimport browserStore = new LevelDatastore(\n  new Level('my/db/name', {\n    prefix: 'IDBWrapper-'\n  })\n})\n```\n\nMore information: [https://github.com/Level/level-js/blob/master/UPGRADING.md#new-database-prefix](https://github.com/Level/level-js/blob/99831913e905d19e5f6dee56d512b7264fbed7bd/UPGRADING.md#new-database-prefix)\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-level/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T10:49:55Z", "2023-03-14T09:15:52Z", "2023-03-13T19:59:03Z", "2022-11-03T18:11:52Z", "2022-11-03T17:41:19Z", "2022-11-03T17:35:48Z", "2022-08-14T08:11:23Z", "2022-08-12T11:13:48Z", "2022-01-19T13:17:44Z", "2021-09-09T10:00:20Z", "2021-09-08T16:58:21Z", "2021-07-30T15:56:20Z", "2021-07-10T10:27:36Z", "2021-07-06T15:00:52Z", "2021-04-19T07:36:28Z", "2021-04-15T11:30:35Z", "2021-01-29T12:27:13Z", "2021-01-22T18:58:52Z", "2020-07-29T13:32:30Z", "2020-05-07T16:05:49Z", "2020-04-28T08:02:02Z", "2020-01-14T15:28:11Z", "2019-11-29T16:44:27Z", "2019-11-29T11:16:58Z", "2019-06-26T08:26:21Z", "2019-05-29T15:45:38Z", "2018-10-24T20:49:22Z", "2018-09-19T21:02:38Z", "2018-05-29T14:48:59Z", "2017-11-06T06:58:22Z"]}, {"name": "js-datastore-pubsub", "description": "Responsible for providing an interface-datastore compliant api", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# datastore-pubsub <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-pubsub.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-pubsub)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-pubsub/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-pubsub/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Responsible for providing an interface-datastore compliant api to pubsub\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n- [API](#api)\n    - [Setup](#setup)\n    - [Get](#get)\n    - [Put](#put)\n    - [Unsubscribe](#unsubscribe)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i datastore-pubsub\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `DatastorePubsub` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/datastore-pubsub/dist/index.min.js\"></script>\n```\n\n## Usage\n\n```js\nimport { PubSubDatastore } from 'datastore-pubsub'\n\nconst dsPubsub = new PubSubDatastore(pubsub, datastore, peerId, validator)\n```\n\n## API\n\n#### Setup\n\n```js\nnew PubSubDatastore(pubsub, datastore, peerId, validator, subscriptionKeyFn)\n```\n\nCreates a DatastorePubsub instance.\n\nArguments:\n\n- `pubsub` (Object): implementation of a pubsub (must have publish and subscribe functions), such as [libp2p/pubsub](https://github.com/libp2p/js-libp2p/blob/master/src/pubsub.js).\n- `datastore` (Object): datastore compliant with [interface-datastore](https://github.com/ipfs/interface-datastore), such as [datastore-fs](https://github.com/ipfs/js-datastore-fs).\n- `peerId` (`PeerId` [Instance](https://github.com/libp2p/js-peer-id)): peer identifier object.\n- `validator` (Object): containing validate function and select function.\n- `subscriptionKeyFn` (function): function to manipulate the key topic received according to the needs, as well as to block the message received to be published.\n\nNote: `validator` object must be composed by two functions, `validate (record: uint8Array, peerId: PeerId) => boolean` and `select (received: uint8Array, current: uint8Array) => boolean`. `validate` aims to verify if a new record received by pubsub is valid to be stored locally by the node. If it is valid and the node already has a local record stored, `select` is the function provided to be responsible for deciding which record is the best (newer) between the already stored and the received through pubsub. A `validator` example can be found at: TODO (js-ipns)\n\n```js\nconst dsPubsub = new DatastorePubsub(pubsub, datastore, peerId, validator)\n```\n\n#### Get\n\n```js\nconst buf = await dsPubsub.get(key)\n```\n\nTry to subscribe a topic with Pubsub and receive the current local value if available.\n\nArguments:\n\n- `key` (Uint8Array): a key representing a unique identifier of the object to subscribe.\n\nReturns `Promise<Uint8Array>` containing the most recent known record stored.\n\n#### Put\n\n```js\nawait dsPubsub.put(key, val)\n```\n\nPublishes a value through pubsub.\n\nArguments:\n\n- `key` (Uint8Array): a key representing a unique identifier of the object to publish.\n- `val` (Uint8Array): value to be propagated.\n\nReturns `Promise<void>`\n\n#### Unsubscribe\n\n```js\nawait dsPubsub.unsubscribe(key)\n```\n\nUnsubscribe a previously subscribe value.\n\nArguments:\n\n- `key` (Uint8Array): a key representing a unique identifier of the object to publish.\n\nReturns `Promise<void>`\n\n## API Docs\n\n- <https://ipfs.github.io/js-datastore-pubsub>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-pubsub/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-24T08:48:04Z", "2023-01-07T07:49:44Z", "2022-10-17T09:25:35Z", "2022-10-17T09:14:27Z", "2022-08-12T13:41:28Z", "2022-06-30T18:58:57Z", "2022-06-28T14:09:53Z", "2022-05-25T17:53:02Z", "2022-04-28T16:42:04Z", "2022-04-28T12:55:09Z", "2022-04-19T12:31:23Z", "2022-01-19T15:12:02Z", "2021-09-09T13:53:53Z", "2021-08-23T12:29:40Z", "2021-07-09T15:21:17Z", "2021-04-22T14:33:57Z", "2021-04-22T12:50:49Z", "2021-04-15T12:13:26Z", "2021-03-16T12:18:01Z", "2021-02-23T09:37:11Z", "2020-12-29T10:22:44Z", "2020-08-17T07:48:42Z", "2020-07-29T14:51:34Z", "2020-07-01T08:55:27Z", "2020-05-11T09:59:38Z", "2020-04-24T07:04:46Z", "2020-01-09T20:23:32Z", "2020-01-09T20:19:34Z", "2020-01-02T08:13:28Z", "2019-09-25T12:44:34Z"]}, {"name": "js-datastore-s3", "description": "Datastore implementation with S3 backend", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26d4\ufe0f This module is now part of https://github.com/ipfs/js-stores\n\n# datastore-s3 <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-datastore-s3.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-datastore-s3)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-datastore-s3/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-datastore-s3/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> IPFS datastore implementation backed by s3\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n  - [Create a Repo](#create-a-repo)\n  - [Examples](#examples)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i datastore-s3\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `DatastoreS3` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/datastore-s3/dist/index.min.js\"></script>\n```\n\n## Usage\n\nIf the flag `createIfMissing` is not set or is false, then the bucket must be created prior to using datastore-s3. Please see the AWS docs for information on how to configure the S3 instance. A bucket name is required to be set at the s3 instance level, see the below example.\n\n```js\nimport S3 from 'aws-sdk/clients/s3.js'\nimport { S3Datastore } from 'datastore-s3'\n\nconst s3Instance = new S3({ params: { Bucket: 'my-ipfs-bucket' } })\nconst store = new S3Datastore('.ipfs/datastore', {\n  s3: s3Instance\n  createIfMissing: false\n})\n```\n\n### Create a Repo\n\nSee [examples/full-s3-repo](./examples/full-s3-repo) for how to quickly create an S3 backed repo using the `createRepo` convenience function.\n\n### Examples\n\nYou can see examples of S3 backed ipfs in the [examples folder](examples/)\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-datastore-s3/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-03-23T15:47:25Z", "2022-10-18T10:34:38Z", "2022-08-12T14:51:18Z", "2022-01-19T13:09:28Z", "2021-09-09T09:15:26Z", "2021-08-20T15:52:33Z", "2021-07-06T15:18:45Z", "2021-04-15T15:30:54Z", "2021-04-12T16:01:18Z", "2020-09-22T11:57:24Z", "2020-06-19T16:57:44Z", "2020-05-08T16:05:49Z", "2019-08-15T16:28:36Z", "2019-03-27T09:14:21Z", "2019-02-14T13:15:20Z", "2019-02-14T13:03:24Z", "2019-02-07T12:56:01Z", "2018-10-01T17:48:50Z"]}, {"name": "js-fs-pull-blob-store", "description": "pull-blob-store implementation for the filesystem in node.js", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# fs-pull-blob-store\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/js-fs-pull-blob-store/badge.svg?branch=master)](https://coveralls.io/github/ipfs/js-fs-pull-blob-store?branch=master)\n[![Travis CI](https://travis-ci.org/ipfs/js-fs-pull-blob-store.svg?branch=master)](https://travis-ci.org/ipfs/js-fs-pull-blob-store)\n[![Circle CI](https://circleci.com/gh/ipfs/js-fs-pull-blob-store.svg?style=svg)](https://circleci.com/gh/ipfs/js-fs-pull-blob-store)\n[![Dependency Status](https://david-dm.org/ipfs/js-fs-pull-blob-store.svg?style=flat-square)](https://david-dm.org/ipfs/js-fs-pull-blob-store) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> [pull-blob-store](https://github.com/ipfs/interface-pull-blob-store) implementation for the filesystem in node.js\n\n## Lead Maintainer\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Installation\n\n```bash\n$ npm install fs-pull-blob-store\n```\n\n## License\n\nMIT\n", "release_dates": ["2016-10-25T11:34:48Z"]}, {"name": "js-hamt-sharding", "description": "JavaScript implementation of hash array mapped tries for use in sharding", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# hamt-sharding <!-- omit in toc -->\n\n[![codecov](https://img.shields.io/codecov/c/github/ipfs-shipyard/js-hamt-sharding.svg?style=flat-square)](https://codecov.io/gh/ipfs-shipyard/js-hamt-sharding)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs-shipyard/js-hamt-sharding/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-hamt-sharding/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> JavaScript implementation of sharding using hash array mapped tries\n\n# About\n\nA [Hash Mapped Trie](https://en.wikipedia.org/wiki/Hash_array_mapped_trie) implementation for JavaScript.\n\nThis is used by [@helia/unixfs](https://www.npmjs.com/package/@helia/unixfs) for it's HAMT-sharded directory implementation.\n\n## Example\n\n```TypeScript\nimport { createHAMT } from 'hamt-sharding'\nimport crypto from 'crypto-promise'\n\n// decide how to hash buffers made from keys, can return a Promise\nconst hashFn = async (buf) => {\n  return crypto\n    .createHash('sha256')\n    .update(buf)\n    .digest()\n}\n\nconst bucket = createHAMT({\n  hashFn: hashFn\n})\n\nawait bucket.put('key', 'value')\n\nconst output = await bucket.get('key')\n// output === 'value'\n```\n\n# Install\n\n```console\n$ npm i hamt-sharding\n```\n\n## Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `HamtSharding` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/hamt-sharding/dist/index.min.js\"></script>\n```\n\n# API Docs\n\n- <https://ipfs-shipyard.github.io/js-hamt-sharding>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2024-02-06T17:49:48Z", "2024-02-06T15:01:14Z", "2022-10-18T10:11:08Z", "2022-08-11T14:12:11Z", "2022-02-21T14:58:32Z", "2021-08-23T11:16:38Z", "2021-02-18T12:11:43Z", "2020-01-08T14:38:50Z"]}, {"name": "js-idb-pull-blob-store", "description": "IndexedDB implementation for interface-pull-blob-store", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# idb-pull-blob-store\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://travis-ci.org/ipfs/js-idb-pull-blob-store.svg?branch=master)](https://travis-ci.org/ipfs/js-idb-pull-blob-store)\n[![Circle CI](https://circleci.com/gh/ipfs/js-idb-pull-blob-store.svg?style=svg)](https://circleci.com/gh/ipfs/js-idb-pull-blob-store)\n[![Dependency Status](https://david-dm.org/ipfs/js-idb-pull-blob-store.svg?style=flat-square)](https://david-dm.org/ipfs/js-idb-pull-blob-store) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> [pull-blob-store](https://github.com/ipfs/interface-pull-blob-store) implementation for [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API).\n\n## Lead Maintainer\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Installation\n\n```bash\n$ npm install idb-pull-blob-store\n```\n", "release_dates": ["2016-10-25T11:34:29Z", "2016-10-25T11:28:55Z"]}, {"name": "js-ipfs", "description": "IPFS implementation in JavaScript", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "> # \u26d4\ufe0f DEPRECATED: [js-IPFS](https://github.com/ipfs/js-ipfs) has been superseded by [Helia](https://github.com/ipfs/helia)\n>\n> \ud83d\udcda [Learn more about this deprecation](https://github.com/ipfs/js-ipfs/issues/4336) or [how to migrate](https://github.com/ipfs/helia/wiki/Migrating-from-js-IPFS)\n>\n> \u26a0\ufe0f If you continue using this repo, please note that security fixes will not be provided\n\n<p align=\"center\">\n  <a href=\"https://js.ipfs.io\" title=\"JS IPFS\">\n    <img src=\"https://ipfs.io/ipfs/Qme6KJdKcp85TYbLxuLV7oQzMiLremD7HMoXLZEmgo6Rnh/js-ipfs-sticker.png\" alt=\"IPFS in JavaScript logo\" width=\"244\" />\n  </a>\n</p>\n\n<h3 align=\"center\">The JavaScript implementation of the IPFS protocol</h3>\n\n<p align=\"center\">\n  <a href=\"https://github.com/ipfs/js-ipfs/tree/master/packages/interface-ipfs-core\"><img src=\"https://img.shields.io/badge/interface--ipfs--core-API%20Docs-blue.svg\"></a>\n  <a href=\"https://github.com/ipfs/js-ipfs/actions/workflows/test.yml?query=branch%3Amaster\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs/test.yml?branch=master\" /></a>\n  <a href=\"https://codecov.io/gh/ipfs/js-ipfs\"><img src=\"https://badgen.net/codecov/c/github/ipfs/js-ipfs\" /></a>\n  <br>\n</p>\n\n## Getting started\n\n* Read the [docs](https://github.com/ipfs/js-ipfs/tree/master/docs)\n* Ensure CORS is [correctly configured](https://github.com/ipfs/js-ipfs/blob/master/docs/CORS.md) for use with the HTTP client\n* Look into the [examples](https://github.com/ipfs-examples/js-ipfs-examples/tree/master) to learn how to spawn an IPFS node in Node.js and in the Browser\n* Consult the [Core API docs](https://github.com/ipfs/js-ipfs/tree/master/docs/core-api) to see what you can do with an IPFS node\n* Head over to https://proto.school to take the [IPFS course](https://proto.school/course/ipfs) that covers core IPFS concepts and JS APIs\n* Check out https://docs.ipfs.io for [glossary](https://docs.ipfs.io/concepts/glossary), tips, how-tos and more\n* Need help? Please ask 'How do I?' questions on https://discuss.ipfs.io\n* Find out about chat channels, the IPFS newsletter, the IPFS blog, and more in the [IPFS community space](https://docs.ipfs.io/community/).\n\n## Table of Contents <!-- omit in toc -->\n\n- [Getting started](#getting-started)\n  - [Install as a CLI user](#install-as-a-cli-user)\n  - [Install as an application developer](#install-as-an-application-developer)\n- [Documentation](#documentation)\n- [Structure](#structure)\n- [Packages](#packages)\n- [Want to hack on IPFS?](#want-to-hack-on-ipfs)\n- [License](#license)\n\n## Getting Started <!-- omit in toc -->\n\n### Install as a CLI user\n\nInstalling `ipfs` globally will give you the `jsipfs` command which you can use to start a daemon running:\n\n```console\n$ npm install -g ipfs\n$ jsipfs daemon\nInitializing IPFS daemon...\njs-ipfs version: x.x.x\nSystem version: x64/darwin\nNode.js version: x.x.x\nSwarm listening on /ip4/127.0\n.... more output\n```\n\nYou can then add a file:\n\n```console\n$ jsipfs add ./hello-world.txt\nadded QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf hello-world.txt\n```\n\n### Install as an application developer\n\nIf you do not need to run a command line daemon, use the `ipfs-core` package - it has all the features of `ipfs` but in a lighter package:\n\n```console\n$ npm install ipfs-core\n```\n\nThen start a node in your app:\n\n```javascript\nimport * as IPFS from 'ipfs-core'\n\nconst ipfs = await IPFS.create()\nconst { cid } = await ipfs.add('Hello world')\nconsole.info(cid)\n// QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf\n```\n\n## Documentation\n\n* [Concepts](https://docs.ipfs.io/concepts/)\n* [Config](./docs/CONFIG.md)\n* [Core API](./docs/core-api)\n* [Examples](https://github.com/ipfs-examples/js-ipfs-examples/tree/master/examples)\n* [Development](./docs/DEVELOPMENT.md)\n\n## Structure\n\nThis project is broken into several modules, their purposes are:\n\n* [`/packages/interface-ipfs-core`](./packages/interface-ipfs-core) Tests to ensure adherence of an implementation to the spec\n* [`/packages/ipfs`](./packages/ipfs) An aggregator module that bundles the core implementation, the CLI, HTTP API server and daemon\n* [`/packages/ipfs-cli`](./packages/ipfs-cli) A CLI to the core implementation\n* [`/packages/ipfs-core`](./packages/ipfs-core) The core implementation\n* [`/packages/ipfs-core-types`](./packages/ipfs-core-types) Typescript definitions for the core API\n* [`/packages/ipfs-core-utils`](./packages/ipfs-core-utils) Helpers and utilities common to core and the HTTP RPC API client\n* [`/packages/ipfs-daemon`](./packages/ipfs-daemon) Run js-IPFS as a background daemon\n* [`/packages/ipfs-grpc-client`](./packages/ipfs-grpc-client) A gRPC client for js-IPFS\n* [`/packages/ipfs-grpc-protocol`](./packages/ipfs-grpc-protocol) Shared module between the gRPC client and server\n* [`/packages/ipfs-grpc-server`](./packages/ipfs-grpc-server) A gRPC-over-websockets server for js-IPFS\n* [`/packages/ipfs-http-client`](./packages/ipfs-http-client) A client for the RPC-over-HTTP API presented by both js-ipfs and go-ipfs\n* [`/packages/ipfs-http-server`](./packages/ipfs-http-server) JS implementation of the [Kubo RPC HTTP API](https://docs.ipfs.io/reference/kubo/rpc/)\n* [`/packages/ipfs-http-gateway`](./packages/ipfs-http-gateway) JS implementation of the [IPFS HTTP Gateway](https://docs.ipfs.io/concepts/ipfs-gateway/)\n* [`/packages/ipfs-http-response`](./packages/ipfs-http-response) Creates a HTTP response for a given IPFS Path\n* [`/packages/ipfs-message-port-client`](./packages/ipfs-message-port-client) A client for the RPC-over-message-port API presented by js-ipfs running in a shared worker\n* [`/packages/ipfs-message-port-protocol`](./packages/ipfs-message-port-protocol) Code shared by the message port client & server\n* [`/packages/ipfs-message-port-server`](./packages/ipfs-message-port-server) The server that receives requests from ipfs-message-port-client\n\n## Packages\n\nList of the main packages that make up the IPFS ecosystem.\n\n| Package | Version | Deps | CI/Travis | Coverage | Lead Maintainer |\n| ---------|---------|---------|---------|---------|--------- |\n| **Files** |\n| [`ipfs-unixfs`](//github.com/ipfs/js-ipfs-unixfs) | [![npm](https://img.shields.io/npm/v/ipfs-unixfs.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs-unixfs/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs-unixfs.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-unixfs) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-unixfs/master)](https://travis-ci.com/ipfs/js-ipfs-unixfs) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs-unixfs/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-unixfs) | [Alex Potsides](mailto:alex.potsides@protocol.ai) |\n| **Repo** |\n| [`ipfs-repo`](//github.com/ipfs/js-ipfs-repo) | [![npm](https://img.shields.io/npm/v/ipfs-repo.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs-repo/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs-repo.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-repo) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-repo/master)](https://travis-ci.com/ipfs/js-ipfs-repo) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs-repo/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-repo) | [Alex Potsides](mailto:alex@achingbrain.net) |\n| [`ipfs-repo-migrations`](//github.com/ipfs/js-ipfs-repo-migrations) | [![npm](https://img.shields.io/npm/v/ipfs-repo-migrations.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs-repo-migrations/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs-repo-migrations.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-repo-migrations) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-repo-migrations/master)](https://travis-ci.com/ipfs/js-ipfs-repo-migrations) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs-repo-migrations/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-repo-migrations) | N/A |\n| **Exchange** |\n| [`ipfs-bitswap`](//github.com/ipfs/js-ipfs-bitswap) | [![npm](https://img.shields.io/npm/v/ipfs-bitswap.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs-bitswap/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs-bitswap.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-bitswap) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-bitswap/master)](https://travis-ci.com/ipfs/js-ipfs-bitswap) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs-bitswap/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-bitswap) | [Dirk McCormick](mailto:dirk@protocol.ai) |\n| **IPNS** |\n| [`ipns`](//github.com/ipfs/js-ipns) | [![npm](https://img.shields.io/npm/v/ipns.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipns/releases) | [![Deps](https://david-dm.org/ipfs/js-ipns.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipns) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipns/master)](https://travis-ci.com/ipfs/js-ipns) | [![codecov](https://codecov.io/gh/ipfs/js-ipns/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipns) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| **Generics/Utils** |\n| [`ipfs-utils`](//github.com/ipfs/js-ipfs) | [![npm](https://img.shields.io/npm/v/ipfs-utils.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs/master)](https://travis-ci.com/ipfs/js-ipfs) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs) | [Hugo Dias](mailto:hugomrdias@gmail.com) |\n| [`ipfs-http-client`](//github.com/ipfs/js-ipfs) | [![npm](https://img.shields.io/npm/v/ipfs-http-client.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs/master)](https://travis-ci.com/ipfs/js-ipfs) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs) | [Alex Potsides](mailto:alex@achingbrain.net) |\n| [`ipfs-http-response`](//github.com/ipfs/js-ipfs-http-response) | [![npm](https://img.shields.io/npm/v/ipfs-http-response.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfs-http-response/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfs-http-response.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-http-response) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-http-response/master)](https://travis-ci.com/ipfs/js-ipfs-http-response) | [![codecov](https://codecov.io/gh/ipfs/js-ipfs-http-response/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-http-response) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`ipfsd-ctl`](//github.com/ipfs/js-ipfsd-ctl) | [![npm](https://img.shields.io/npm/v/ipfsd-ctl.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/js-ipfsd-ctl/releases) | [![Deps](https://david-dm.org/ipfs/js-ipfsd-ctl.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfsd-ctl) | [![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfsd-ctl/master)](https://travis-ci.com/ipfs/js-ipfsd-ctl) | [![codecov](https://codecov.io/gh/ipfs/js-ipfsd-ctl/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfsd-ctl) | [Hugo Dias](mailto:mail@hugodias.me) |\n| [`is-ipfs`](//github.com/ipfs/is-ipfs) | [![npm](https://img.shields.io/npm/v/is-ipfs.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/is-ipfs/releases) | [![Deps](https://david-dm.org/ipfs/is-ipfs.svg?style=flat-square)](https://david-dm.org/ipfs/is-ipfs) | [![Travis CI](https://flat.badgen.net/travis/ipfs/is-ipfs/master)](https://travis-ci.com/ipfs/is-ipfs) | [![codecov](https://codecov.io/gh/ipfs/is-ipfs/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/is-ipfs) | [Marcin Rataj](mailto:lidel@lidel.org) |\n| [`aegir`](//github.com/ipfs/aegir) | [![npm](https://img.shields.io/npm/v/aegir.svg?maxAge=86400&style=flat-square)](//github.com/ipfs/aegir/releases) | [![Deps](https://david-dm.org/ipfs/aegir.svg?style=flat-square)](https://david-dm.org/ipfs/aegir) | [![Travis CI](https://flat.badgen.net/travis/ipfs/aegir/master)](https://travis-ci.com/ipfs/aegir) | [![codecov](https://codecov.io/gh/ipfs/aegir/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipfs/aegir) | [Hugo Dias](mailto:hugomrdias@gmail.com) |\n| **libp2p** |\n| [`libp2p`](//github.com/libp2p/js-libp2p) | [![npm](https://img.shields.io/npm/v/libp2p.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p/master)](https://travis-ci.com/libp2p/js-libp2p) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`peer-id`](//github.com/libp2p/js-peer-id) | [![npm](https://img.shields.io/npm/v/peer-id.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-peer-id/releases) | [![Deps](https://david-dm.org/libp2p/js-peer-id.svg?style=flat-square)](https://david-dm.org/libp2p/js-peer-id) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-peer-id/master)](https://travis-ci.com/libp2p/js-peer-id) | [![codecov](https://codecov.io/gh/libp2p/js-peer-id/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-peer-id) | [Vasco Santos](mailto:santos.vasco10@gmail.com) |\n| [`libp2p-crypto`](//github.com/libp2p/js-libp2p-crypto) | [![npm](https://img.shields.io/npm/v/libp2p-crypto.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-crypto/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-crypto.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-crypto) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-crypto/master)](https://travis-ci.com/libp2p/js-libp2p-crypto) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-crypto/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-crypto) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`libp2p-floodsub`](//github.com/libp2p/js-libp2p-floodsub) | [![npm](https://img.shields.io/npm/v/libp2p-floodsub.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-floodsub/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-floodsub.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-floodsub) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-floodsub/master)](https://travis-ci.com/libp2p/js-libp2p-floodsub) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-floodsub/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-floodsub) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`libp2p-gossipsub`](//github.com/ChainSafe/gossipsub-js) | [![npm](https://img.shields.io/npm/v/libp2p-gossipsub.svg?maxAge=86400&style=flat-square)](//github.com/ChainSafe/gossipsub-js/releases) | [![Deps](https://david-dm.org/ChainSafe/gossipsub-js.svg?style=flat-square)](https://david-dm.org/ChainSafe/gossipsub-js) | [![Travis CI](https://flat.badgen.net/travis/ChainSafe/gossipsub-js/master)](https://travis-ci.com/ChainSafe/gossipsub-js) | [![codecov](https://codecov.io/gh/ChainSafe/gossipsub-js/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ChainSafe/gossipsub-js) | [Cayman Nava](mailto:caymannava@gmail.com) |\n| [`libp2p-kad-dht`](//github.com/libp2p/js-libp2p-kad-dht) | [![npm](https://img.shields.io/npm/v/libp2p-kad-dht.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-kad-dht/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-kad-dht.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-kad-dht) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-kad-dht/master)](https://travis-ci.com/libp2p/js-libp2p-kad-dht) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-kad-dht/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-kad-dht) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`libp2p-mdns`](//github.com/libp2p/js-libp2p-mdns) | [![npm](https://img.shields.io/npm/v/libp2p-mdns.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-mdns/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-mdns.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-mdns) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-mdns/master)](https://travis-ci.com/libp2p/js-libp2p-mdns) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-mdns/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-mdns) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`libp2p-bootstrap`](//github.com/libp2p/js-libp2p-bootstrap) | [![npm](https://img.shields.io/npm/v/libp2p-bootstrap.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-bootstrap/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-bootstrap.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-bootstrap) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-bootstrap/master)](https://travis-ci.com/libp2p/js-libp2p-bootstrap) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-bootstrap/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-bootstrap) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`@chainsafe/libp2p-noise`](//github.com/ChainSafe/js-libp2p-noise) | [![npm](https://img.shields.io/npm/v/libp2p-noise.svg?maxAge=86400&style=flat-square)](//github.com/ChainSafe/js-libp2p-noise/releases) | [![Deps](https://david-dm.org/ChainSafe/js-libp2p-noise.svg?style=flat-square)](https://david-dm.org/ChainSafe/js-libp2p-noise) | [![Travis CI](https://flat.badgen.net/travis/ChainSafe/js-libp2p-noise/master)](https://travis-ci.com/ChainSafe/js-libp2p-noise) | [![codecov](https://codecov.io/gh/ChainSafe/js-libp2p-noise/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ChainSafe/js-libp2p-noise) | N/A |\n| [`libp2p-tcp`](//github.com/libp2p/js-libp2p-tcp) | [![npm](https://img.shields.io/npm/v/libp2p-tcp.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-tcp/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-tcp.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-tcp) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-tcp/master)](https://travis-ci.com/libp2p/js-libp2p-tcp) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-tcp/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-tcp) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`libp2p-webrtc-star`](//github.com/libp2p/js-libp2p-webrtc-star) | [![npm](https://img.shields.io/npm/v/libp2p-webrtc-star.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-webrtc-star/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-webrtc-star.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-webrtc-star) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-webrtc-star/master)](https://travis-ci.com/libp2p/js-libp2p-webrtc-star) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-webrtc-star/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-webrtc-star) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`libp2p-websockets`](//github.com/libp2p/js-libp2p-websockets) | [![npm](https://img.shields.io/npm/v/libp2p-websockets.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-websockets/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-websockets.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-websockets) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-websockets/master)](https://travis-ci.com/libp2p/js-libp2p-websockets) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-websockets/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-websockets) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`libp2p-mplex`](//github.com/libp2p/js-libp2p-mplex) | [![npm](https://img.shields.io/npm/v/libp2p-mplex.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-mplex/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-mplex.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-mplex) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-mplex/master)](https://travis-ci.com/libp2p/js-libp2p-mplex) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-mplex/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-mplex) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`libp2p-delegated-content-routing`](//github.com/libp2p/js-libp2p-delegated-content-routing) | [![npm](https://img.shields.io/npm/v/libp2p-delegated-content-routing.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-delegated-content-routing/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-delegated-content-routing.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-delegated-content-routing) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-delegated-content-routing/master)](https://travis-ci.com/libp2p/js-libp2p-delegated-content-routing) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-delegated-content-routing/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-delegated-content-routing) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| [`libp2p-delegated-peer-routing`](//github.com/libp2p/js-libp2p-delegated-peer-routing) | [![npm](https://img.shields.io/npm/v/libp2p-delegated-peer-routing.svg?maxAge=86400&style=flat-square)](//github.com/libp2p/js-libp2p-delegated-peer-routing/releases) | [![Deps](https://david-dm.org/libp2p/js-libp2p-delegated-peer-routing.svg?style=flat-square)](https://david-dm.org/libp2p/js-libp2p-delegated-peer-routing) | [![Travis CI](https://flat.badgen.net/travis/libp2p/js-libp2p-delegated-peer-routing/master)](https://travis-ci.com/libp2p/js-libp2p-delegated-peer-routing) | [![codecov](https://codecov.io/gh/libp2p/js-libp2p-delegated-peer-routing/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/libp2p/js-libp2p-delegated-peer-routing) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n| **IPLD** |\n| [`@ipld/dag-pb`](//github.com/ipld/js-dag-pb) | [![npm](https://img.shields.io/npm/v/@ipld/dag-pb.svg?maxAge=86400&style=flat-square)](//github.com/ipld/js-dag-pb/releases) | [![Deps](https://david-dm.org/ipld/js-dag-pb.svg?style=flat-square)](https://david-dm.org/ipld/js-dag-pb) | [![Travis CI](https://flat.badgen.net/travis/ipld/js-dag-pb/master)](https://travis-ci.com/ipld/js-dag-pb) | [![codecov](https://codecov.io/gh/ipld/js-dag-pb/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipld/js-dag-pb) | N/A |\n| [`@ipld/dag-cbor`](//github.com/ipld/js-dag-cbor) | [![npm](https://img.shields.io/npm/v/@ipld/dag-cbor.svg?maxAge=86400&style=flat-square)](//github.com/ipld/js-dag-cbor/releases) | [![Deps](https://david-dm.org/ipld/js-dag-cbor.svg?style=flat-square)](https://david-dm.org/ipld/js-dag-cbor) | [![Travis CI](https://flat.badgen.net/travis/ipld/js-dag-cbor/master)](https://travis-ci.com/ipld/js-dag-cbor) | [![codecov](https://codecov.io/gh/ipld/js-dag-cbor/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/ipld/js-dag-cbor) | N/A |\n| **Multiformats** |\n| [`multiformats`](//github.com/multiformats/js-multiformats) | [![npm](https://img.shields.io/npm/v/multiformats.svg?maxAge=86400&style=flat-square)](//github.com/multiformats/js-multiformats/releases) | [![Deps](https://david-dm.org/multiformats/js-multiformats.svg?style=flat-square)](https://david-dm.org/multiformats/js-multiformats) | [![Travis CI](https://flat.badgen.net/travis/multiformats/js-multiformats/master)](https://travis-ci.com/multiformats/js-multiformats) | [![codecov](https://codecov.io/gh/multiformats/js-multiformats/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/multiformats/js-multiformats) | N/A |\n| [`mafmt`](//github.com/multiformats/js-mafmt) | [![npm](https://img.shields.io/npm/v/mafmt.svg?maxAge=86400&style=flat-square)](//github.com/multiformats/js-mafmt/releases) | [![Deps](https://david-dm.org/multiformats/js-mafmt.svg?style=flat-square)](https://david-dm.org/multiformats/js-mafmt) | [![Travis CI](https://flat.badgen.net/travis/multiformats/js-mafmt/master)](https://travis-ci.com/multiformats/js-mafmt) | [![codecov](https://codecov.io/gh/multiformats/js-mafmt/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/multiformats/js-mafmt) | [Vasco Santos](mailto:vasco.santos@moxy.studio) |\n| [`multiaddr`](//github.com/multiformats/js-multiaddr) | [![npm](https://img.shields.io/npm/v/multiaddr.svg?maxAge=86400&style=flat-square)](//github.com/multiformats/js-multiaddr/releases) | [![Deps](https://david-dm.org/multiformats/js-multiaddr.svg?style=flat-square)](https://david-dm.org/multiformats/js-multiaddr) | [![Travis CI](https://flat.badgen.net/travis/multiformats/js-multiaddr/master)](https://travis-ci.com/multiformats/js-multiaddr) | [![codecov](https://codecov.io/gh/multiformats/js-multiaddr/branch/master/graph/badge.svg?style=flat-square)](https://codecov.io/gh/multiformats/js-multiaddr) | [Jacob Heun](mailto:jacobheun@gmail.com) |\n\n> This table is generated using the module [`package-table`](https://www.npmjs.com/package/package-table) with `package-table --data=package-list.json`.\n\n## Want to hack on IPFS?\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\nThe IPFS implementation in JavaScript needs your help! There are a few things you can do right now to help out:\n\nRead the [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md) and [JavaScript Contributing Guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md).\n\n- **Check out existing issues** The [issue list](https://github.com/ipfs/js-ipfs/issues) has many that are marked as ['help wanted'](https://github.com/ipfs/js-ipfs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22) or ['difficulty:easy'](https://github.com/ipfs/js-ipfs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Adifficulty%3Aeasy) which make great starting points for development, many of which can be tackled with no prior IPFS knowledge\n- **Look at the [IPFS Roadmap](https://github.com/ipfs/roadmap)** This are the high priority items being worked on right now\n- **Perform code reviews** More eyes will help\n  a. speed the project along\n  b. ensure quality, and\n  c. reduce possible future bugs.\n- **Add tests**. There can never be enough tests.\n\n## License\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fipfs%2Fjs-ipfs.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fipfs%2Fjs-ipfs?ref=badge_large)\n", "release_dates": ["2023-05-25T14:54:55Z", "2023-05-25T14:55:35Z", "2023-05-25T14:55:33Z", "2023-05-25T14:55:30Z", "2023-05-25T14:55:28Z", "2023-05-25T14:55:25Z", "2023-05-25T14:55:23Z", "2023-05-25T14:55:21Z", "2023-05-25T14:55:18Z", "2023-05-25T14:55:16Z", "2023-05-25T14:55:14Z", "2023-05-25T14:55:11Z", "2023-05-25T14:55:02Z", "2023-05-25T14:55:09Z", "2023-05-25T14:55:07Z", "2023-05-25T14:55:04Z", "2023-05-25T14:54:59Z", "2023-05-25T14:54:57Z", "2023-05-25T14:54:53Z", "2023-01-12T11:32:15Z", "2023-01-12T11:32:52Z", "2023-01-12T11:32:50Z", "2023-01-12T11:32:48Z", "2023-01-12T11:32:46Z", "2023-01-12T11:32:43Z", "2023-01-12T11:32:41Z", "2023-01-12T11:32:39Z", "2023-01-12T11:32:37Z", "2023-01-12T11:32:34Z", "2023-01-12T11:32:32Z"]}, {"name": "js-ipfs-bitswap", "description": "JavaScript implementation of Bitswap 'data exchange' protocol used by IPFS", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-bitswap.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-bitswap)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs-bitswap/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-ipfs-bitswap/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> JavaScript implementation of the Bitswap data exchange protocol used by IPFS\n\n# Install\n\n```console\n$ npm i ipfs-bitswap\n```\n\n## Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IpfsBitswap` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfs-bitswap/dist/index.min.js\"></script>\n```\n\n# API Docs\n\n- <https://ipfs.github.io/js-ipfs-bitswap>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-bitswap/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-16T07:57:56Z", "2024-01-16T07:46:03Z", "2023-11-30T07:58:26Z", "2023-11-04T06:40:29Z", "2023-10-09T09:52:58Z", "2023-08-05T16:47:44Z", "2023-07-27T13:42:49Z", "2023-07-27T12:36:39Z", "2023-05-22T13:46:49Z", "2023-05-19T09:37:39Z", "2023-05-19T08:31:53Z", "2023-04-13T18:34:04Z", "2023-04-04T13:14:42Z", "2023-03-13T13:53:29Z", "2023-02-13T13:20:23Z", "2023-01-27T11:40:48Z", "2023-01-27T11:27:37Z", "2023-01-07T09:32:39Z", "2022-11-19T10:38:06Z", "2022-10-18T07:39:26Z", "2022-09-21T14:38:47Z", "2022-09-01T16:11:52Z", "2022-08-17T10:01:00Z", "2022-08-15T15:10:35Z", "2022-08-11T13:25:56Z", "2022-06-29T06:36:03Z", "2022-06-28T10:26:16Z", "2022-06-24T13:43:35Z", "2022-06-23T14:04:28Z", "2022-05-25T15:49:48Z"]}, {"name": "js-ipfs-block-service", "description": "JavaScript Implementation of Block and BlockService", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\u26d4\ufe0f DEPRECATED: This module has been merged into [ipfs](https://github.com/ipfs/js-ipfs) <!-- omit in toc -->\n======\n\n# IPFS Block Service\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-block-service)](https://travis-ci.com/ipfs/js-ipfs-block-service)\n[![Dependency Status](https://david-dm.org/ipfs/js-ipfs-block-service.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-block-service)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n![](https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D4.0.0-orange.svg?style=flat-square)\n\n> [IPFS][ipfs] implementation of the BlockService and Block data structure in JavaScript.\n\n**BlockService** - A BlockService is a content-addressable store for blocks, providing an API for adding, deleting, and retrieving blocks. A BlockService is backed by an [IPFS Repo][repo] as its datastore for blocks, and uses [Bitswap][bitswap] to fetch blocks from the network.\n\n```markdown\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    BlockService   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n     \u25bc           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502IPFS Repo\u2502 |Bitswap\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n## Lead Maintainer\n\n[Volker Mische](https://github.com/vmx)\n\n## Table of Contents\n\n- [IPFS Block Service](#ipfs-block-service)\n  - [Lead Maintainer](#lead-maintainer)\n  - [Table of Contents](#table-of-contents)\n  - [Install](#install)\n    - [npm](#npm)\n  - [Usage](#usage)\n    - [Node.js](#nodejs)\n    - [Example](#example)\n    - [Browser: Browserify, Webpack, other bundlers](#browser-browserify-webpack-other-bundlers)\n    - [Browser: `<script>` Tag](#browser-script-tag)\n  - [API](#api)\n  - [Contribute](#contribute)\n  - [License](#license)\n\n## Install\n\n### npm\n\n```sh\n> npm install ipfs-block-service\n```\n\n## Usage\n\n### Node.js\n\n```js\nconst BlockService = require('ipfs-block-service')\n```\n\n\n### Example\n\n```js\nconst BlockService = require('ipfs-block-service')\nconst Block = require('ipld-block')\nconst multihashing = require('multihashing-async')\nconst IPFSRepo = require('ipfs-repo')  // storage repo\nconst uint8ArrayEquals = require('uint8arrays/equals')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\n// setup a repo\nconst repo = new IPFSRepo('example')\n\n// create a block\nconst data = uint8ArrayFromString('hello world')\nconst multihash = await multihashing(data, 'sha2-256')\n\nconst cid = new CID(multihash)\nconst block = new Block(data, cid)\n\n// create a service\nconst service = new BlockService(repo)\n\n// add the block, then retrieve it\nawait service.put(block)\n\nconst result = await service.get(cid)\nconsole.log(uint8ArrayEquals(block.data, result.data))\n// => true\n```\n\n### Browser: Browserify, Webpack, other bundlers\n\n```JavaScript\nvar BlockService = require('ipfs-block-service')\n```\n\n### Browser: `<script>` Tag\n\nLoading this module through a script tag will make the `IpfsBlockService` obj available in\nthe global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfs-block-service/dist/index.min.js\"></script>\n<!-- OR -->\n<script src=\"https://unpkg.com/ipfs-block-service/dist/index.js\"></script>\n```\n\n## API\n\nSee https://ipfs.github.io/js-ipfs-block-service\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipfs-block-service/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[MIT](LICENSE)\n\n[ipfs]: https://ipfs.io\n[bitswap]: https://github.com/ipfs/specs/tree/master/bitswap\n[repo]: https://github.com/ipfs/specs/tree/master/repo\n", "release_dates": ["2021-08-11T16:50:59Z", "2021-03-05T11:34:53Z", "2020-08-05T15:42:12Z", "2020-05-05T11:36:02Z", "2020-04-16T15:28:12Z", "2019-06-18T11:21:44Z", "2018-11-08T15:55:26Z", "2018-10-27T16:53:12Z", "2018-10-26T14:46:40Z", "2018-04-10T00:10:10Z", "2017-11-06T06:48:19Z", "2017-07-23T06:24:37Z", "2017-07-04T18:35:04Z", "2017-05-23T20:09:30Z", "2017-01-29T17:01:12Z", "2016-12-23T08:55:42Z", "2016-11-03T15:43:09Z"]}, {"name": "js-ipfs-http-response", "description": "Creates an HTTP response from an IPFS Hash", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\u26d4\ufe0f DEPRECATED\njs-ipfs-http-response repository is now deprecated in IPFS org, given it is now part of the [js-ipfs monorepo packages](https://github.com/ipfs/js-ipfs/tree/master/packages).\n\n# js-ipfs-http-response\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> Creates an HTTP response from an IPFS Hash\n\n## Lead Maintainer\n\n[Vasco Santos](https://github.com/vasco-santos).\n\n### Installation\n\n> npm install ipfs-http-response\n\n## Usage\n\n\n### Creating HTTP Response\n\nThis project creates a HTTP response for an IPFS Path. This response can be a file, a HTML with directory listing or the entry point of a web page.\n\n```js\nimport { getResponse } from 'ipfs-http-response'\n\nconst result = await getResponse(ipfsNode, ipfsPath)\nconsole.log(result)\n```\n\n### Using protocol-agnostic resolver\n\nThis module also exports the used ipfs `resolver`, which should be used when the response needs to be customized or non-HTTP transport is used:\n\n```js\nimport { resolver } from 'ipfs-http-response'\n\nconst result = await resolver.cid(ipfsNode, ipfsPath)\nconsole.log(result)\n```\n\nIf `ipfsPath` points at a directory, `resolver.cid` will throw Error `This dag node is a directory` with a `cid` attribute that can be passed to `resolver.directory`:\n\n\n```js\nimport { resolver } from 'ipfs-http-response'\n\nconst result = await resolver.directory(ipfsNode, ipfsPath, cid)\nconsole.log(result)\n```\n\n`result` will be either a `string` with HTML directory listing or an array with CIDs of `index` pages present in inspected directory.\n\n![ipfs-http-response usage](docs/ipfs-http-response.png \"ipfs-http-response usage\")\n", "release_dates": ["2021-09-08T07:51:07Z", "2021-09-07T13:14:13Z", "2021-07-12T08:36:52Z", "2021-04-16T12:20:53Z", "2021-04-12T12:53:40Z", "2021-03-17T09:01:26Z", "2020-12-22T12:12:47Z", "2020-08-14T08:15:41Z", "2020-06-30T08:27:01Z", "2020-01-07T13:32:26Z", "2019-10-14T10:11:05Z", "2019-06-06T18:29:29Z", "2019-01-19T15:28:19Z", "2018-11-09T16:22:32Z", "2018-09-28T15:52:47Z", "2018-08-02T16:02:33Z", "2018-07-28T17:00:14Z", "2018-06-01T15:13:37Z"]}, {"name": "js-ipfs-merkle-dag", "description": "[DEPRECATED]", "language": "JavaScript", "license": {"key": "isc", "name": "ISC License", "spdx_id": "ISC", "url": "https://api.github.com/licenses/isc", "node_id": "MDc6TGljZW5zZTEw"}, "readme": "# [DEPRECATED]\u00a0js-ipfs-merkle-dag\n\n# DEPRECATED Please use [ipld/js-ipld-dag-pb](https://github.com/ipld/js-ipld-dag-pb) and [ipld/js-ipld-resolver](https://github.com/ipld/js-ipld-resolver) instead\n\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/ipfs/js-ipfs-merkle-dag/badge.svg?branch=master)](https://coveralls.io/github/ipfs/js-ipfs-merkle-dag?branch=master)\n[![Travis CI](https://travis-ci.org/ipfs/js-ipfs-merkle-dag.svg?branch=master)](https://travis-ci.org/ipfs/js-ipfs-merkle-dag)\n[![Circle CI](https://circleci.com/gh/ipfs/js-ipfs-merkle-dag.svg?style=svg)](https://circleci.com/gh/ipfs/js-ipfs-merkle-dag)\n[![Dependency Status](https://david-dm.org/ipfs/js-ipfs-merkle-dag.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-merkle-dag) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard) [![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> JavaScript Implementation of the DAGService and DAGNode data structure\n\n## Table of Contents\n\n- [Install](#install)\n- [Architecture](#architecture)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```bash\n$ npm i ipfs-merkle-dag\n```\n\n## Architecture\n\n```markdown\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   DAGService       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   BlockService     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n**DAGService** - The DAGService offers an interface to interact directly with a MerkleDAG object (composed by one or more DAGNodes that are linked), using the BlockService to store and fetch the DAGNodes as it needs them\n\n[**BlockService** - The BlockService uses IPFS Repo as the local datastore for blocks and an IPFS Exchange compliant implementation to fetch blocks from the network.](https://github.com/ipfs/js-ipfs-block-service)\n\nA DAGNode and DAGLink are data structures made available on this module.\n\n## Usage\n\n```js\nconst ipfsMDAG = require('ipfs-merkle-dag')\n\n// then, to access each of the components\nipfsMDAG.DAGService\nipfsMDAG.DAGNode\nipfsMDAG.DAGLink\n```\n\n## API\n\n### DAGNode Class\n\nCreate a new DAGNode\n\n```JavaScript\nvar node = new ipfsMDAG.DAGNode([<data>, <[links]>])\n```\n\n#### `addNodeLink`\n\n> creates a link on node A to node B by using node B to get its multihash\n\n#### `addRawLink`\n\n> creates a link on node A to node B by using directly node B multihash\n\n#### `updateNodeLink`\n\n> updates a link on the node. *caution* this method returns a copy of the MerkleDAG node\n\n#### `removeNodeLink`\n\n> removes a link from the node by name\n\n#### `removeNodeLinkByHash`\n\n> removes a link from the node by the hash of the linked node\n\n\n#### `copy`\n\n> creates a copy of the MerkleDAG Node\n\n#### `size`\n\n> (property) size of the node, in bytes\n\n#### `links`\n\n> (property) an array of `DAGLink`s belonging to the node\n\n#### `multihash`\n\n> returns the multihash (default: sha2-256)\n\n#### `marshal`\n\n> returns a protobuf serialized version, compatible with go-ipfs MerkleDAG\n\n#### `unMarshal`\n\n> deserializes a node encoded using protobuf\n\n#### `getPBNode`\n\n> used internally\n\n#### `makeLink`\n\n> used internally\n\n### DAGLink Class\n\nCreate a new DAGLink\n\n```JavaScript\nvar link = new ipfsMDAG.DAGLink(<name>, <size>, <hash>)\n```\n\n### DAGService\n\n#### `put`\n\n> stores the node\n\n#### `putStream`\n\n> stores nodes using a writable pull-stream\n\n#### `get`\n\n> fetches a node by its multihash\n\n#### `getStream`\n\n> fetches a node as a pull-stream\n\n#### `getRecursive`\n\n> fetches a node and all of its links (if possible)\n\n#### `getRecursiveStream`\n\n> fetches a node and all of its links (if possible) as pull-stream\n\n#### `remove`\n\n> deletes a node\n\n## License\n\nMIT \u00a9 IPFS\n", "release_dates": ["2016-09-09T15:14:54Z"]}, {"name": "js-ipfs-repo", "description": "Implementation of the IPFS Repo spec in JavaScript", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# ipfs-repo <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-repo.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-repo)\n[![CI](https://img.shields.io/github/workflow/status/ipfs/js-ipfs-repo/test%20&%20maybe%20release/master?style=flat-square)](https://github.com/ipfs/js-ipfs-repo/actions/workflows/js-test-and-release.yml)\n\n> The repo and migration tools used by IPFS\n\n## Table of contents <!-- omit in toc -->\n\n- [Structure](#structure)\n- [Development](#development)\n  - [Publishing new versions](#publishing-new-versions)\n  - [Using prerelease versions](#using-prerelease-versions)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Structure\n\n- [`/packages/ipfs-repo`](./packages/ipfs-repo) IPFS Repo implementation\n- [`/packages/ipfs-repo-migrations`](./packages/ipfs-repo-migrations) Migration framework for versioning of JS IPFS Repo\n\n## Development\n\n1. Clone this repo\n2. Run `npm install`\n\nThis will install [lerna](https://www.npmjs.com/package/lerna) and bootstrap the various packages, deduping and hoisting dependencies into the root folder.\n\nIf later you wish to remove all the `node_modules`/`dist` folders and start again, run `npm run reset && npm install` from the root.\n\nSee the scripts section of the root [`package.json`](./package.json) for more commands.\n\n### Publishing new versions\n\n1. Ensure you have a `GH_TOKEN` env var containing a GitHub [Personal Access Token](https://github.com/settings/tokens) with `public_repo` permissions\n2. From the root of this repo run `npm run release` and follow the on screen prompts.  It will use [conventional commits](https://www.conventionalcommits.org) to work out the new package version\n\n### Using prerelease versions\n\nAny changed packages from each successful build of master are published to npm as canary builds under the npm tag `next`.\n\nCanary builds only consider changes to packages in the last built commit so changes to the root config files should not result in new prereleases being published to npm.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-repo/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-01-06T15:59:43Z", "2023-01-06T15:59:21Z", "2022-10-19T12:42:47Z", "2022-10-19T14:16:46Z", "2022-10-19T12:42:18Z", "2022-09-21T16:55:01Z", "2022-09-21T16:54:37Z", "2022-08-14T08:30:39Z", "2022-08-14T08:30:16Z", "2022-08-11T19:20:00Z", "2022-08-11T17:01:54Z", "2022-08-11T19:19:34Z", "2022-08-11T17:01:25Z", "2022-01-19T14:22:55Z", "2022-01-19T14:22:57Z", "2022-01-18T18:19:06Z", "2022-01-18T18:19:06Z", "2021-11-24T10:58:49Z", "2021-11-24T10:58:49Z", "2021-11-23T19:52:52Z", "2021-09-29T10:14:18Z", "2021-09-15T21:13:37Z", "2021-09-15T21:19:22Z", "2021-09-15T21:19:22Z", "2021-09-13T07:53:16Z", "2021-09-13T13:17:45Z", "2021-09-13T12:01:41Z", "2021-09-13T10:16:16Z", "2021-09-10T14:31:22Z", "2021-09-10T14:31:22Z"]}, {"name": "js-ipfs-repo-migrations", "description": "Migration framework for versioning of JS IPFS Repo", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# \u26d4\ufe0f DEPRECATED: This module has been merged into the [ipfs-repo](https://github.com/ipfs/js-ipfs-repo) module <!-- omit in toc -->\n\n# Migration tool for JS IPFS Repo <!-- omit in toc -->\n\n[![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfs-repo-migrations)](https://travis-ci.com/ipfs/js-ipfs-repo-migrations)\n[![codecov](https://codecov.io/gh/ipfs/js-ipfs-repo-migrations/branch/master/graph/badge.svg)](https://codecov.io/gh/ipfs/js-ipfs-repo-migrations)\n[![Dependency Status](https://david-dm.org/ipfs/js-ipfs-repo-migrations.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfs-repo-migrations)\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n![](https://img.shields.io/badge/npm-%3E%3D6.0.0-orange.svg?style=flat-square)\n![](https://img.shields.io/badge/Node.js-%3E%3D10.0.0-orange.svg?style=flat-square)\n\n> Migration framework for versioning of JS IPFS Repo\n\nThis package is inspired by the [go-ipfs repo migration tool](https://github.com/ipfs/fs-repo-migrations/)\n\n## Lead Maintainer <!-- omit in toc -->\n\n[Alex Potsides](http://github.com/achingbrain)\n\n## Table of Contents <!-- omit in toc -->\n\n- [Background](#background)\n- [Install](#install)\n  - [npm](#npm)\n  - [Use in Node.js](#use-in-nodejs)\n  - [Use in a browser with browserify, webpack or any other bundler](#use-in-a-browser-with-browserify-webpack-or-any-other-bundler)\n- [Usage](#usage)\n- [API](#api)\n  - [`.migrate(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`](#migratepath-repooptions-toversion-ignorelock-onprogress-isdryrun---promisevoid)\n    - [`onProgress(version, percent, message)`](#onprogressversion-percent-message)\n  - [`.revert(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`](#revertpath-repooptions-toversion-ignorelock-onprogress-isdryrun---promisevoid)\n  - [`getLatestMigrationVersion() -> int`](#getlatestmigrationversion---int)\n- [Creating a new migration](#creating-a-new-migration)\n  - [Architecture of a migration](#architecture-of-a-migration)\n    - [`.migrate(repoPath, repoOptions)`](#migraterepopath-repooptions)\n    - [`.revert(repoPath, repoOptions)`](#revertrepopath-repooptions)\n  - [Browser vs. NodeJS environments](#browser-vs-nodejs-environments)\n  - [Guidelines](#guidelines)\n  - [Integration with js-ipfs](#integration-with-js-ipfs)\n  - [Tests](#tests)\n  - [Empty migrations](#empty-migrations)\n  - [Migrations matrix](#migrations-matrix)\n  - [Migrations](#migrations)\n    - [7](#7)\n    - [8](#8)\n    - [9](#9)\n    - [10](#10)\n- [Developer](#developer)\n  - [Module versioning notes](#module-versioning-notes)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Background\n\nAs js-ipfs evolves and new technologies, algorithms and data structures are incorporated it is necessary to\nenable users to transition between versions. Different versions of js-ipfs may expect a different IPFS repo structure or content (see: [IPFS repo spec](https://github.com/ipfs/specs/blob/master/REPO.md), [JS implementation](https://github.com/ipfs/js-ipfs-repo) ).\nSo the IPFS repo is versioned, and this package provides a framework to create migrations to transition\nfrom one version of IPFS repo to the next/previous version.\n\nThis framework:\n * Handles locking/unlocking of repository\n * Defines migrations API\n * Executes and reports migrations in both directions: forward and backward\n * Simplifies creation of new migrations\n * Works on the browser too!\n\n## Install\n\n### npm\n\n```sh\n> npm install ipfs-repo-migrations\n```\n\n### Use in Node.js\n\n```js\nconst migrations = require('ipfs-repo-migrations')\n```\n\n### Use in a browser with browserify, webpack or any other bundler\n\n```js\nconst migrations = require('ipfs-repo-migrations')\n```\n\n## Usage\n\nExample:\n\n```js\nconst migrations = require('ipfs-repo-migrations')\n\nconst repoPath = 'some/repo/path'\nconst currentRepoVersion = 7\nconst latestVersion = migrations.getLatestMigrationVersion()\nconst repoOptions = {\n  ... // the same storage backend/storage options passed to `ipfs-repo`\n}\n\nif(currentRepoVersion < latestVersion){\n  // Old repo! Lets migrate to latest version!\n  await migrations.migrate(repoPath, latestVersion, {\n    repoOptions\n  })\n}\n```\n\nTo migrate your repository using the CLI, see the [how to run migrations](./run.md) tutorial.\n\n## API\n\n### `.migrate(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`\n\nExecutes a forward migration to a specific version, or to the latest version if a specific version is not specified.\n\n**Arguments:**\n\n * `path` (string, mandatory) - path to the repo to be migrated\n * `repoOptions` (object, mandatory) - options that are passed to migrations, that use them to construct the datastore. (options are the same as for IPFSRepo).\n * `toVersion` (int, mandatory) - version to which the repo should be migrated.\n * `options` (object, optional) - options for the migration\n * `options.ignoreLock` (bool, optional) - if true will not lock the repo when applying migrations. Use with caution.\n * `options.onProgress` (function, optional) - callback that is called during each migration to report progress.\n * `options.isDryRun` (bool, optional) - flag that indicates if it is a dry run that should give the same output as running a migration but without making any actual changes.\n\n#### `onProgress(version, percent, message)`\n\nSignature of the progress callback.\n\n**Arguments:**\n * `migration` (object) - object of migration that just successfully finished running. See [Architecture of migrations](#architecture-of-migrations) for details.\n * `counter` (int) - index of current migration.\n * `totalMigrations` (int) - total count of migrations that will be run.\n\n### `.revert(path, repoOptions, toVersion, {ignoreLock, onProgress, isDryRun}) -> Promise<void>`\n\nExecutes backward migration to a specific version.\n\n**Arguments:**\n\n * `path` (string, mandatory) - path to the repo to be reverted\n * `repoOptions` (object, mandatory) - options that are passed to migrations, that use them to construct the datastore. (options are the same as for IPFSRepo).\n * `toVersion` (int, mandatory) - version to which the repo should be reverted to.\n * `options` (object, optional) - options for the reversion\n * `options.ignoreLock` (bool, optional) - if true will not lock the repo when applying migrations. Use with caution.\n * `options.onProgress` (function, optional) - callback that is called during each migration to report progress.\n * `options.isDryRun` (bool, optional) - flag that indicates if it is a dry run that should give the same output as running a migration but without making any actual changes.\n\n### `getLatestMigrationVersion() -> int`\n\nReturn the version of the latest migration.\n\n## Creating a new migration\n\nMigrations are one of those things that can be extremely painful on users. At the end of the day, we want users never to have to think about it. The process should be:\n\n- SAFE. No data lost. Ever.\n- Revertible. Tools must implement forward and backward (if possible) migrations.\n- Tests. Migrations have to be well tested.\n- To Spec. The tools must conform to the spec.\n\nIf your migration has several parts, it should be fail-proof enough that if one part of migration fails the previous changes\nare reverted before propagating the error. If possible then the outcome should be consistent repo so it migration could\nbe run again.\n\n### Architecture of a migration\n\nAll migrations are placed in the `/migrations` folder. Each folder there represents one migration that follows the migration\nAPI.\n\nAll migrations are collected in `/migrations/index.js`, which should not be edited manually.\n\n**The order of migrations is important and migrations must be sorted in ascending order**.\n\nEach migration must follow this API. It must export an object in its `index.js` that has following properties:\n\n * `version` (int) - Number that represents the version which the repo will migrate to (eg. `8` will move the repo to version 8).\n * `description` (string) - Brief description of what the migrations does.\n * `migrate` (function) - Function that performs the migration (see signature of this function below)\n * `revert` (function) - If defined then this function will revert the migration to the previous version. Otherwise it is assumed that it is not possible to revert this migration.\n\n#### `.migrate(repoPath, repoOptions)`\n\n_Do not confuse this function with the `require('ipfs-repo-migrations').migrate()` function that drives the whole migration process!_\n\nArguments:\n * `repoPath` (string) - absolute path to the root of the repo\n * `repoOptions` (object, optional) - object containing `IPFSRepo` options, that should be used to construct a datastore instance.\n\n#### `.revert(repoPath, repoOptions)`\n\n_Do not confuse this function with the `require('ipfs-repo-migrations').revert()` function that drives the whole backward migration process!_\n\nArguments:\n * `repoPath` (string) - path to the root of the repo\n * `repoOptions` (object, optional) - object containing `IPFSRepo` options, that should be used to construct the datastore instance.\n\n### Browser vs. NodeJS environments\n\nThe migration might need to perform specific tasks in browser or NodeJS environment. In such a case create\nmigration file `/migrations/migration-<number>/index_browser.js` which have to follow the same API is described before.\nThen add entry in `package.json` to the `browser` field as follow:\n\n```\n'./migrations/migration-<number>/index.js': './migrations/migration-<number>/index_browser.js'\n```\n\nIn browser environments then `index.js` will be replaced with `index_browser.js`.\n\nSimple migrations should not need to distinguish between\nthese environments as the datastore implementation will handle the main differences.\n\nThere are currently two main datastore implementations:\n 1. [`datastore-fs`](https://github.com/ipfs/js-datastore-fs) that is backed by file system and is used mainly in the NodeJS environment\n 2. [`datastore-idb`](https://github.com/ipfs/js-datastore-idb) that is backed by LevelDB and is used mainly in the browser environment\n\n Both implementations share the same API and hence are interchangeable.\n\n When the migration is run in a browser environment, `datastore-fs` is automatically replaced with `datastore-idb` even\n when it is directly imported (`require('datastore-fs')` will return `datastore-idb` in a browser).\n So with simple migrations you shouldn't worry about the difference between `datastore-fs` and `datastore-idb`\n and by default use the `datastore-fs` package (as the replace mechanism does not work vice versa).\n\n### Guidelines\n\nThe recommended way to write a new migration is to first bootstrap a dummy migration using the CLI:\n\n```sh\n> npm run new-migration\n```\n\nA new folder is created with the bootstrapped migration. You can then simply fill in the required fields and\nwrite the rest of the migration!\n\n### Integration with js-ipfs\n\nWhen a new migration is created, new version of this package have to be released. Afterwards version of this package in [`js-ipfs-repo`](https://github.com/ipfs/js-ipfs-repo) have to be updated\ntogether with the repo version that `IPFSRepo` expects. Then the updated version of `js-ipfs-repo` should be propagated to `js-ipfs`.\n\n### Tests\n\nIf a migration affects any of the following functionality, it must provide tests for the following functions\n to work under the version of the repo that it migrates to:\n\n* `/src/repo/version.js`:`getVersion()` - retrieving repository's version\n* `/src/repo/lock.js`:`lock()` - locking repository that uses file system\n* `/src/repo/lock-memory.js`:`lock()` - locking repository that uses memory\n\nEvery migration must have test coverage. Tests for migrations should be placed in the `/test/migrations/` folder. Most probably\nyou will have to plug the tests into `browser.js`/`node.js` if they require specific bootstrapping on each platform.\n\n### Empty migrations\n\nFor interop with go-ipfs it might be necessary just to bump a version of a repo without any actual\nmodification as there might not be any changes needed in the JS implementation. For that purpose you can create an \"empty migration\".\n\nThe easiest way to do so is with the CLI:\n\n```sh\n> npm run new-migration -- --empty\n```\n\nThis will create an empty migration with the next version.\n\n### Migrations matrix\n\n| IPFS repo version  | JS IPFS version  |\n| -----------------: |:----------------:|\n|                  7 | v0.0.0           |\n|                  8 | v0.48.0          |\n|                  9 | v0.49.0          |\n\n### Migrations\n\n#### 7\n\nThis is the initial version of the datastore, inherited from go-IPFS in an attempt to maintain cross-compatibility between the two implementations.\n\n#### 8\n\nBlockstore keys are transformed into base32 representations of the multihash from the CID of the block.\n\n#### 9\n\nPins were migrated from a DAG to a Datastore - see [ipfs/js-ipfs#2771](https://github.com/ipfs/js-ipfs/pull/2771)\n\n#### 10\n\n`level@6.x.x` upgrades the `level-js` dependency from `4.x.x` to `5.x.x`.  This update requires a database migration to convert all string keys/values into buffers. Only runs in the browser, node is unaffected. See [Level/level-js#179](https://github.com/Level/level-js/pull/179)\n\n## Developer\n\n### Module versioning notes\n\nIn order to have good overview of what version of package contains what kind of migration, to every release there\nshould be appended version's metadata in format `migr-<versionOfLatestMigration>`. If for releasing is used `aegir`\nyou can use the `release --metadata` option.\n\n## Contribute\n\nThere are some ways you can make this module better:\n\n- Consult our [open issues](https://github.com/ipfs/js-ipfs-repo/issues) and take on one of them\n- Help our tests reach 100% coverage!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": ["2021-09-13T07:37:35Z", "2021-08-23T06:41:53Z", "2021-07-30T16:50:06Z", "2021-07-07T16:31:16Z", "2021-04-15T16:46:22Z", "2021-03-21T19:19:41Z", "2021-03-15T12:37:01Z", "2021-03-04T15:23:58Z", "2021-03-04T12:33:17Z", "2021-01-29T15:34:03Z", "2021-01-27T16:25:08Z", "2020-08-17T07:56:19Z", "2020-08-15T14:40:41Z", "2020-08-15T14:15:35Z", "2020-08-15T13:27:49Z", "2020-08-15T12:33:49Z", "2020-08-15T11:54:05Z", "2020-08-06T16:57:30Z", "2020-08-06T13:38:17Z", "2020-08-05T06:50:40Z", "2020-07-21T20:39:26Z", "2020-07-21T09:52:27Z", "2020-06-25T11:49:28Z", "2020-06-23T13:17:07Z", "2020-04-28T14:18:47Z", "2020-04-14T15:23:45Z", "2019-11-09T08:56:16Z", "2019-11-06T10:39:12Z"]}, {"name": "js-ipfs-unixfs", "description": "JavaScript implementation of IPFS' unixfs (a Unix FileSystem representation on top of a MerkleDAG)", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-unixfs.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-unixfs)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs-unixfs/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-ipfs-unixfs/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> JS implementation of the IPFS UnixFS\n\nThe UnixFS spec can be found at [ipfs/specs/UNIXFS.md](https://github.com/ipfs/specs/blob/master/UNIXFS.md)\n\n# Packages\n\n- [`/packages/ipfs-unixfs`](./packages/ipfs-unixfs) JavaScript implementation of IPFS' unixfs (a Unix FileSystem representation on top of a MerkleDAG)\n- [`/packages/ipfs-unixfs-exporter`](./packages/ipfs-unixfs-exporter) JavaScript implementation of the UnixFs exporter used by IPFS\n- [`/packages/ipfs-unixfs-importer`](./packages/ipfs-unixfs-importer) JavaScript implementation of the UnixFs importer used by IPFS\n\n# API Docs\n\n- <https://ipfs.github.io/js-ipfs-unixfs>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-unixfs/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-02T15:30:28Z", "2024-01-19T08:46:14Z", "2024-01-19T09:10:42Z", "2024-01-19T08:46:34Z", "2024-01-19T08:45:55Z", "2024-01-16T15:39:15Z", "2023-12-28T12:40:47Z", "2023-12-28T10:21:06Z", "2023-12-28T12:41:01Z", "2023-12-28T10:21:22Z", "2023-12-28T12:41:15Z", "2023-12-28T10:33:40Z", "2023-12-28T10:21:40Z", "2023-09-20T14:12:07Z", "2023-08-25T10:38:35Z", "2023-08-25T14:32:20Z", "2023-08-25T10:38:56Z", "2023-08-25T14:32:39Z", "2023-08-25T10:39:18Z", "2023-08-24T16:54:45Z", "2023-08-24T16:55:04Z", "2023-08-24T16:55:26Z", "2023-07-14T00:23:16Z", "2023-06-30T12:31:10Z", "2023-06-30T11:33:40Z", "2023-05-11T16:18:35Z", "2023-05-11T16:18:52Z", "2023-05-11T15:36:35Z", "2023-05-11T15:24:30Z", "2023-05-11T15:06:28Z"]}, {"name": "js-ipfs-utils", "description": "IPFS utils", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# ipfs-utils <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-utils.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-utils)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfs-utils/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-ipfs-utils/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Package to aggregate shared logic and dependencies for the IPFS ecosystem\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipfs-utils\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IpfsUtils` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfs-utils/dist/index.min.js\"></script>\n```\n\n`ipfs-utils` aims to provide single function default export per file (with a few exceptions) scoped in 3 general categories:\n\n- General use\n- Data structs wrangling (arrays, objects, streams, etc)\n- IPFS core subsystems\n\n*General use* and *Data structs wrangling* should try to be just re-exports of community packages.\n\nThe IPFS ecosystem has lots of repos with it comes several problems like:\n\n- Domain logic dedupe - all interface-core implementations shared a lot of logic like validation, streams handling, etc.\n- Dependencies management - it's really easy with so many repos for dependencies to go out of control, they become outdated, different repos use different modules to do the same thing (like merging defaults options), browser bundles ends up with multiple versions of the same package, bumping versions is cumbersome to do because we need to go through several repos, etc.\n\nThese problems are the motivation for this package, having shared logic in this package avoids creating cyclic dependencies, centralizes common use modules/functions (exactly like aegir does for the tooling), semantic versioning for 3rd party dependencies is handled in one single place (a good example is going from streams 2 to 3) and maintainers should only care about having `ipfs-utils` updated.\n\n## Usage\n\nEach function should be imported directly.\n\n```js\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation')\n\nvalidateAddInput(Buffer.from('test'))\n// true\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipfs-utils>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfs-utils/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-01-13T13:07:53Z", "2023-01-11T14:31:49Z", "2023-01-11T13:39:57Z", "2023-01-11T13:11:34Z", "2023-01-11T12:58:33Z", "2022-11-18T14:52:16Z", "2022-11-18T14:31:04Z", "2022-06-23T06:20:38Z", "2022-04-19T12:56:29Z", "2022-03-01T07:46:51Z", "2022-01-14T08:46:06Z", "2022-01-13T20:37:51Z", "2021-09-28T11:06:51Z", "2021-09-23T14:25:26Z", "2021-09-23T14:24:11Z", "2021-08-27T08:16:30Z", "2021-08-19T08:46:36Z", "2021-07-09T16:23:51Z", "2021-06-18T16:04:18Z", "2021-06-01T17:55:47Z", "2021-05-28T16:48:08Z", "2021-05-21T15:04:20Z", "2021-05-10T16:22:18Z", "2021-05-04T09:01:47Z", "2021-04-30T14:47:10Z", "2021-04-14T13:10:50Z", "2021-04-06T17:35:06Z", "2021-04-01T18:05:16Z", "2021-03-22T12:07:04Z", "2021-03-15T14:01:19Z"]}, {"name": "js-ipfsd-ctl", "description": "Control an IPFS daemon (go-ipfs or js-ipfs) using JavaScript!", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# ipfsd-ctl <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipfsd-ctl.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfsd-ctl)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipfsd-ctl/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-ipfsd-ctl/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> Spawn IPFS Daemons, JS or Go\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Notice](#notice)\n- [Usage](#usage)\n  - [Spawning a single IPFS controller: `createController`](#spawning-a-single-ipfs-controller-createcontroller)\n  - [Manage multiple IPFS controllers: `createFactory`](#manage-multiple-ipfs-controllers-createfactory)\n- [Disposable vs non Disposable nodes](#disposable-vs-non-disposable-nodes)\n- [API](#api)\n  - [`createFactory([options], [overrides])`](#createfactoryoptions-overrides)\n  - [`createController([options])`](#createcontrolleroptions)\n  - [`createServer([options])`](#createserveroptions)\n  - [Factory](#factory)\n    - [`controllers`](#controllers)\n    - [`tmpDir()`](#tmpdir)\n    - [`spawn([options])`](#spawnoptions)\n    - [`clean()`](#clean)\n  - [Controller](#controller)\n    - [`new Controller(options)`](#new-controlleroptions)\n    - [`path`](#path)\n    - [`exec`](#exec)\n    - [`env`](#env)\n    - [`initialized`](#initialized)\n    - [`started`](#started)\n    - [`clean`](#clean-1)\n    - [`apiAddr`](#apiaddr)\n    - [`gatewayAddr`](#gatewayaddr)\n    - [`api`](#api-1)\n    - [`init([initOptions])`](#initinitoptions)\n    - [`start()`](#start)\n    - [`stop()`](#stop)\n    - [`cleanup()`](#cleanup)\n    - [`pid()`](#pid)\n    - [`version()`](#version)\n  - [ControllerOptionsOverrides](#controlleroptionsoverrides)\n    - [Properties](#properties)\n  - [ControllerOptions](#controlleroptions)\n    - [Properties](#properties-1)\n- [ipfsd-ctl environment variables](#ipfsd-ctl-environment-variables)\n  - - [IPFS\\_JS\\_EXEC and IPFS\\_GO\\_EXEC](#ipfs_js_exec-and-ipfs_go_exec)\n- [Contribute](#contribute)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute-1)\n\n## Install\n\n```console\n$ npm i ipfsd-ctl\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `IpfsdCtl` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipfsd-ctl/dist/index.min.js\"></script>\n```\n\n## Notice\n\nVersion 1.0.0 changed a bit the api and the options methods take so please read the documentation below.\n\nPlease ensure your project also has dependencies on `ipfs`, `ipfs-http-client`, `kubo-rpc-client`, and `go-ipfs`.\n\n```sh\nnpm install --save ipfs ipfs-http-client go-ipfs kubo-rpc-client\n```\n\nIf you are only going to use the `go` implementation of IPFS, you can skip installing the `js` implementation and `ipfs-http-client` module. (e.g. `npm i --save go-ipfs kubo-rpc-client`)\n\nIf you are only using the `proc` type in-process IPFS node, you can skip installing `go-ipfs` and `ipfs-http-client`. (e.g. `npm i --save ipfs`)\n\n> You also need to explicitly defined the options `ipfsBin`, `ipfsModule` and `ipfsHttpModule` according to your needs.  Check [ControllerOptions](#controlleroptions) and [ControllerOptionsOverrides](#controlleroptionsoverrides) for more information.\n\n## Usage\n\n### Spawning a single IPFS controller: `createController`\n\nThis is a shorthand for simpler use cases where factory is not needed.\n\n```js\n// No need to create a factory when only a single controller is needed.\n// Use createController to spawn it instead.\nconst Ctl = require('ipfsd-ctl')\nconst ipfsd = await Ctl.createController({\n    ipfsHttpModule,\n    ipfsBin: goIpfsModule.path()\n})\nconst id = await ipfsd.api.id()\n\nconsole.log(id)\n\nawait ipfsd.stop()\n```\n\n### Manage multiple IPFS controllers: `createFactory`\n\nUse a factory to spawn multiple controllers based on some common template.\n\n**Spawn an IPFS daemon from Node.js**\n\n```js\n// Create a factory to spawn two test disposable controllers, get access to an IPFS api\n// print node ids and clean all the controllers from the factory.\nconst Ctl = require('ipfsd-ctl')\n\nconst factory = Ctl.createFactory(\n    {\n        type: 'js',\n        test: true,\n        disposable: true,\n        ipfsHttpModule,\n        ipfsModule: (await import('ipfs')) // only if you gonna spawn 'proc' controllers\n    },\n    { // overrides per type\n        js: {\n            ipfsBin: ipfsModule.path()\n        },\n        go: {\n            ipfsBin: goIpfsModule.path()\n        }\n    }\n)\nconst ipfsd1 = await factory.spawn() // Spawns using options from `createFactory`\nconst ipfsd2 = await factory.spawn({ type: 'go' }) // Spawns using options from `createFactory` but overrides `type` to spawn a `go` controller\n\nconsole.log(await ipfsd1.api.id())\nconsole.log(await ipfsd2.api.id())\n\nawait factory.clean() // Clean all the controllers created by the factory calling `stop` on all of them.\n```\n\n**Spawn an IPFS daemon from the Browser using the provided remote endpoint**\n\n```js\n// Start a remote disposable node, and get access to the api\n// print the node id, and stop the temporary daemon\n\nconst Ctl = require('ipfsd-ctl')\n\nconst port = 9090\nconst server = Ctl.createServer(port, {\n    ipfsModule,\n    ipfsHttpModule\n},\n{\n    js: {\n        ipfsBin: ipfsModule.path()\n    },\n    go: {\n        ipfsBin: goIpfsModule.path()\n    },\n})\nconst factory = Ctl.createFactory({\n    ipfsHttpModule,\n    remote: true,\n    endpoint: `http://localhost:${port}` // or you can set process.env.IPFSD_CTL_SERVER to http://localhost:9090\n})\n\nawait server.start()\nconst ipfsd = await factory.spawn()\nconst id = await ipfsd.api.id()\n\nconsole.log(id)\n\nawait ipfsd.stop()\nawait server.stop()\n```\n\n## Disposable vs non Disposable nodes\n\n`ipfsd-ctl` can spawn `disposable` and `non-disposable` nodes.\n\n- `disposable`- Disposable nodes are useful for tests or other temporary use cases, by default they create a temporary repo and automatically initialise and start the node, plus they cleanup everything when stopped.\n- `non-disposable` - Non disposable nodes will by default attach to any nodes running on the default or the supplied repo. Requires the user to initialize and start the node, as well as stop and cleanup afterwards.\n\n## API\n\n### `createFactory([options], [overrides])`\n\nCreates a factory that can spawn multiple controllers and pre-define options for them.\n\n- `options` **[ControllerOptions](#controlleroptions)** Controllers options.\n- `overrides` **[ControllerOptionsOverrides](#controlleroptionsoverrides)** Pre-defined options overrides per controller type.\n\nReturns a **[Factory](#factory)**\n\n### `createController([options])`\n\nCreates a controller.\n\n- `options` **[ControllerOptions](#controlleroptions)** Factory options.\n\nReturns **Promise<[Controller](#controller)>**\n\n### `createServer([options])`\n\nCreate an Endpoint Server. This server is used by a client node to control a remote node. Example: Spawning a go-ipfs node from a browser.\n\n- `options` **\\[Object]** Factory options. Defaults to: `{ port: 43134 }`\n  - `port` **number** Port to start the server on.\n\nReturns a **Server**\n\n### Factory\n\n#### `controllers`\n\n**Controller\\[]** List of all the controllers spawned.\n\n#### `tmpDir()`\n\nCreate a temporary repo to create controllers manually.\n\nReturns **Promise\\<String>** - Path to the repo.\n\n#### `spawn([options])`\n\nCreates a controller for a IPFS node.\n\n- `options` **[ControllerOptions](#controlleroptions)** Factory options.\n\nReturns **Promise<[Controller](#controller)>**\n\n#### `clean()`\n\nCleans all controllers spawned.\n\nReturns **Promise<[Factory](#factory)>**\n\n### Controller\n\nClass controller for a IPFS node.\n\n#### `new Controller(options)`\n\n- `options` **[ControllerOptions](#controlleroptions)**\n\n#### `path`\n\n**String** Repo path.\n\n#### `exec`\n\n**String** Executable path.\n\n#### `env`\n\n**Object** ENV object.\n\n#### `initialized`\n\n**Boolean** Flag with the current init state.\n\n#### `started`\n\n**Boolean** Flag with the current start state.\n\n#### `clean`\n\n**Boolean** Flag with the current clean state.\n\n#### `apiAddr`\n\n**Multiaddr** API address\n\n#### `gatewayAddr`\n\n**Multiaddr** Gateway address\n\n#### `api`\n\n**Object** IPFS core interface\n\n#### `init([initOptions])`\n\nInitialises controlled node\n\n- `initOptions` **\\[Object]** IPFS init options <https://github.com/ipfs/js-ipfs/blob/master/README.md#optionsinit>\n\nReturns **Promise<[Controller](#controller)>**\n\n#### `start()`\n\nStarts controlled node.\n\nReturns **Promise\\<IPFS>**\n\n#### `stop()`\n\nStops controlled node.\n\nReturns **Promise<[Controller](#controller)>**\n\n#### `cleanup()`\n\nCleans controlled node, a disposable controller calls this automatically.\n\nReturns **Promise<[Controller](#controller)>**\n\n#### `pid()`\n\nGet the pid of the controlled node process if aplicable.\n\nReturns **Promise\\<number>**\n\n#### `version()`\n\nGet the version of the controlled node.\n\nReturns **Promise\\<string>**\n\n### ControllerOptionsOverrides\n\nType: \\[Object]\n\n#### Properties\n\n- `js` **\\[[ControllerOptions](#controlleroptions)]** Pre-defined defaults options for **JS** controllers these are deep merged with options passed to `Factory.spawn(options)`.\n- `go` **\\[[ControllerOptions](#controlleroptions)]** Pre-defined defaults options for **Go** controllers these are deep merged with options passed to `Factory.spawn(options)`.\n- `proc` **\\[[ControllerOptions](#controlleroptions)]** Pre-defined defaults options for **Proc** controllers these are deep merged with options passed to `Factory.spawn(options)`.\n\n### ControllerOptions\n\nType: \\[Object]\n\n#### Properties\n\n- `test` **\\[boolean]** Flag to activate custom config for tests.\n- `remote` **\\[boolean]** Use remote endpoint to spawn the nodes. Defaults to `true` when not in node.\n- `endpoint` **\\[string]** Endpoint URL to manage remote Controllers. (Defaults: '<http://localhost:43134>').\n- `disposable` **\\[boolean]** A new repo is created and initialized for each invocation, as well as cleaned up automatically once the process exits.\n- `type` **\\[string]** The daemon type, see below the options:\n  - go - spawn go-ipfs daemon\n  - js - spawn js-ipfs daemon\n  - proc - spawn in-process js-ipfs node\n- `env` **\\[Object]** Additional environment variables, passed to executing shell. Only applies for Daemon controllers.\n- `args` **\\[Array]** Custom cli args.\n- `ipfsHttpModule` **\\[Object]** Reference to a IPFS HTTP Client object.\n- `ipfsModule` **\\[Object]** Reference to a IPFS API object.\n- `ipfsBin` **\\[string]** Path to a IPFS exectutable.\n- `ipfsOptions` **\\[IpfsOptions]** Options for the IPFS instance same as <https://github.com/ipfs/js-ipfs#ipfs-constructor>. `proc` nodes receive these options as is, daemon nodes translate the options as far as possible to cli arguments.\n- `forceKill` **\\[boolean]** - Whether to use SIGKILL to quit a daemon that does not stop after `.stop()` is called. (default `true`)\n- `forceKillTimeout` **\\[Number]** - How long to wait before force killing a daemon in ms. (default `5000`)\n\n## ipfsd-ctl environment variables\n\nIn additional to the API described in previous sections, `ipfsd-ctl` also supports several environment variables. This are often very useful when running in different environments, such as CI or when doing integration/interop testing.\n\n*Environment variables precedence order is as follows. Top to bottom, top entry has highest precedence:*\n\n- command line options/method arguments\n- env variables\n- default values\n\nMeaning that, environment variables override defaults in the configuration file but are superseded by options to `df.spawn({...})`\n\n#### IPFS\\_JS\\_EXEC and IPFS\\_GO\\_EXEC\n\nAn alternative way of specifying the executable path for the `js-ipfs` or `go-ipfs` executable, respectively.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipfsd-ctl/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipfsd-ctl>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipfsd-ctl/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2023-01-13T16:13:43Z", "2022-10-19T01:29:43Z", "2022-10-07T16:49:54Z", "2022-10-05T19:46:14Z", "2022-10-05T08:23:49Z", "2022-10-04T13:02:15Z", "2022-09-21T16:16:43Z", "2022-09-02T15:43:52Z", "2022-09-01T11:20:12Z", "2022-06-28T11:23:19Z", "2022-05-25T17:55:04Z", "2022-05-09T08:59:21Z", "2022-02-22T05:26:19Z", "2021-11-19T14:43:39Z", "2021-09-28T08:49:53Z", "2021-08-04T16:15:57Z", "2021-08-03T13:33:21Z", "2021-07-30T19:21:29Z", "2021-07-30T18:12:35Z", "2021-07-10T11:45:55Z", "2021-04-17T05:10:07Z", "2021-04-09T11:49:13Z", "2021-03-26T09:43:36Z", "2020-12-18T14:34:24Z", "2020-12-03T17:06:15Z", "2020-10-28T11:22:53Z", "2020-10-23T15:28:08Z", "2020-10-10T08:49:27Z", "2020-09-17T10:43:18Z", "2020-08-25T13:28:35Z"]}, {"name": "js-ipns", "description": "Utilities for creating, parsing, and validating IPNS records", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# ipns <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-ipns.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipns)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-ipns/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-ipns/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> IPNS Record definitions\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Usage](#usage)\n  - [Create record](#create-record)\n  - [Validate record](#validate-record)\n  - [Embed public key to record](#embed-public-key-to-record)\n  - [Extract public key from record](#extract-public-key-from-record)\n  - [Datastore key](#datastore-key)\n  - [Marshal data with proto buffer](#marshal-data-with-proto-buffer)\n  - [Unmarshal data from proto buffer](#unmarshal-data-from-proto-buffer)\n  - [Validator](#validator)\n- [API](#api)\n  - [Create record](#create-record-1)\n  - [Validate record](#validate-record-1)\n  - [Marshal data with proto buffer](#marshal-data-with-proto-buffer-1)\n  - [Unmarshal data from proto buffer](#unmarshal-data-from-proto-buffer-1)\n  - [Extract public key from record](#extract-public-key-from-record-1)\n  - [Namespace](#namespace)\n- [API Docs](#api-docs)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i ipns\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `Ipns` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/ipns/dist/index.min.js\"></script>\n```\n\nThis module contains all the necessary code for creating, understanding and validating IPNS records.\n\n## Usage\n\n### Create record\n\n```js\nimport * as ipns from 'ipns'\n\nconst ipnsRecord = await ipns.create(privateKey, value, sequenceNumber, lifetime)\n```\n\n### Validate record\n\n```js\nimport * as ipns from 'ipns'\n\nawait ipns.validate(publicKey, marshalledData)\n// if no error thrown, the record is valid\n```\n\n### Embed public key to record\n\n```js\nimport * as ipns from 'ipns'\n\nconst ipnsRecordWithEmbeddedPublicKey = await ipns.embedPublicKey(publicKey, ipnsRecord)\n```\n\n### Extract public key from record\n\n```js\nimport * as ipns from 'ipns'\n\nconst publicKey = await ipns.extractPublicKey(peerId, ipnsRecord)\n```\n\n### Datastore key\n\n```js\nimport * as ipns from 'ipns'\n\nipns.getLocalKey(peerId)\n```\n\nReturns a key to be used for storing the IPNS record locally, that is:\n\n```\n/ipns/${base32(<HASH>)}\n```\n\n### Marshal data with proto buffer\n\n```js\nimport * as ipns from 'ipns'\n\nconst ipnsRecord = await ipns.create(privateKey, value, sequenceNumber, lifetime)\n// ...\nconst marshalledData = ipns.marshal(ipnsRecord)\n// ...\n```\n\nReturns the record data serialized.\n\n### Unmarshal data from proto buffer\n\n```js\nimport * as ipns from 'ipns'\n\nconst ipnsRecord = ipns.unmarshal(storedData)\n```\n\nReturns the `IPNSRecord` after being deserialized.\n\n### Validator\n\n```js\nimport * as ipns from 'ipns'\n\nconst validator = ipns.validator\n```\n\nContains an object with `validate (marshalledData, key)` and `select (dataA, dataB)` functions.\n\nThe `validate` async function aims to verify if an IPNS record is valid. First the record is unmarshalled, then the public key is obtained and finally the record is validated (`signatureV2` of CBOR `data` is verified).\n\nThe `select` function is responsible for deciding which IPNS record is the best (newer) between two records. Both records are unmarshalled and their sequence numbers are compared. If the first record provided is the newer, the operation result will be `0`, otherwise the operation result will be `1`.\n\n## API\n\n### Create record\n\n```js\n\nipns.create(privateKey, value, sequenceNumber, lifetime, options)\n```\n\nCreate an IPNS record for being stored in a protocol buffer.\n\n- `privateKey` ([PrivateKey](https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.keys.PrivateKey.html)): key to be used for cryptographic operations.\n- `value` (string): IPFS path of the object to be published.\n- `sequenceNumber` (Number): number representing the current version of the record.\n- `lifetime` (Number): lifetime of the record (in milliseconds).\n- `options` (CreateOptions): additional creation options.\n\nReturns a `Promise` that resolves to an object with a `IPNSRecord`.\n\n### Validate record\n\n```js\nipns.validate(publicKey, ipnsRecord)\n```\n\nValidate an IPNS record previously stored in a protocol buffer.\n\n- `publicKey` ([PublicKey](https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.keys.PublicKey.html)): key to be used for cryptographic operations.\n- `ipnsRecord` (`IPNSRecord`): IPNS record (obtained using the create function).\n\nReturns a `Promise`, which may be rejected if the validation was not successful.\n\n### Marshal data with proto buffer\n\n```js\nconst marshalledData = ipns.marshal(ipnsRecord)\n```\n\nReturns the serialized IPNS record.\n\n- `ipnsRecord` (`IPNSRecord`): ipns record (obtained using the create function).\n\n### Unmarshal data from proto buffer\n\n```js\nconst data = ipns.unmarshal(storedData)\n```\n\nReturns a `IPNSRecord` after being serialized.\n\n- `storedData` (Uint8Array): ipns record serialized.\n\n### Extract public key from record\n\n```js\nconst publicKey = await ipns.extractPublicKey(peerId, ipnsRecord)\n```\n\nExtract a public key from an IPNS record.\n\n- `peerId` ([PeerId](https://libp2p.github.io/js-libp2p/types/_libp2p_interface.peer_id.PeerId.html)): peer identifier object.\n- `ipnsRecord` (`IPNSRecord`): ipns record (obtained using the create function).\n\nReturns a `Promise` which resolves to public key ([`PublicKey`](https://github.com/libp2p/js-libp2p-interfaces/blob/master/packages/interface-keys/src/index.ts) ): may be used for cryptographic operations.\n\n### Namespace\n\nNamespace constants for records.\n\n```js\nipns.namespace\n\n// '/ipns/'\n```\n\n```js\nipns.namespaceLength\n\n// 6\n```\n\n## API Docs\n\n- <https://ipfs.github.io/js-ipns>\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-ipns/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-01-18T13:01:19Z", "2024-01-18T10:49:22Z", "2024-01-16T07:51:05Z", "2024-01-15T14:04:34Z", "2024-01-12T14:41:05Z", "2023-12-30T11:51:09Z", "2023-12-30T07:10:57Z", "2023-09-15T16:51:51Z", "2023-09-15T15:58:18Z", "2023-09-14T08:54:35Z", "2023-09-14T08:38:39Z", "2023-08-24T09:20:45Z", "2023-08-24T09:08:15Z", "2023-06-14T09:58:15Z", "2023-06-14T09:42:01Z", "2023-06-14T09:16:10Z", "2023-03-21T10:36:02Z", "2023-03-21T10:16:32Z", "2023-01-07T06:59:35Z", "2023-01-07T06:53:25Z", "2022-10-17T15:00:23Z", "2022-09-20T23:12:29Z", "2022-08-14T09:56:15Z", "2022-08-14T08:46:16Z", "2022-08-11T14:50:49Z", "2022-06-28T09:48:00Z", "2022-05-25T16:19:49Z", "2022-05-10T10:08:52Z", "2022-04-13T16:45:37Z", "2021-12-02T11:54:37Z"]}, {"name": "js-kubo-rpc-client", "description": "A client library for the Kubo RPC API", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# kubo-rpc-client <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-kubo-rpc-client.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-kubo-rpc-client)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-kubo-rpc-client/js-test-and-release.yml?branch=master\\&style=flat-square)](https://github.com/ipfs/js-kubo-rpc-client/actions/workflows/js-test-and-release.yml?query=branch%3Amaster)\n\n> A client library for the Kubo RPC API\n\n## Table of contents <!-- omit in toc -->\n\n- [Install](#install)\n  - [Browser `<script>` tag](#browser-script-tag)\n- [Work In Progress](#work-in-progress)\n- [Getting Started](#getting-started)\n  - [Next Steps](#next-steps)\n- [Usage](#usage)\n    - [`create([options])`](#createoptions)\n    - [Parameters](#parameters)\n    - [Options](#options)\n    - [Returns](#returns)\n    - [Example](#example)\n  - [API](#api)\n  - [Additional Options](#additional-options)\n  - [Instance Utils](#instance-utils)\n  - [Static Types and Utils](#static-types-and-utils)\n    - [Glob source](#glob-source)\n      - [`globSource(path, pattern, [options])`](#globsourcepath-pattern-options)\n      - [Example](#example-1)\n    - [URL source](#url-source)\n      - [`urlSource(url)`](#urlsourceurl)\n      - [Example](#example-2)\n  - [Running the daemon with the right port](#running-the-daemon-with-the-right-port)\n  - [Importing the module and usage](#importing-the-module-and-usage)\n  - [In a web browser](#in-a-web-browser)\n  - [Custom Headers](#custom-headers)\n  - [Global Timeouts](#global-timeouts)\n- [Development](#development)\n  - [Testing](#testing)\n- [Historical context](#historical-context)\n- [License](#license)\n- [Contribute](#contribute)\n\n## Install\n\n```console\n$ npm i kubo-rpc-client\n```\n\n### Browser `<script>` tag\n\nLoading this module through a script tag will make it's exports available as `KuboRpcClient` in the global namespace.\n\n```html\n<script src=\"https://unpkg.com/kubo-rpc-client/dist/index.min.js\"></script>\n```\n\n## Kubo RPC Client\n\n<h3 align=\"center\">JavaScript client library for the Kubo RPC API</h3>\n\n<p align=\"center\">\n  <a href=\"https://app.element.io/#/room/#ipfs-chatter:ipfs.io\"><img src=\"https://img.shields.io/badge/matrix-%23ipfs%3Amatrix.org-blue.svg?style=flat\" /> </a>\n  <a href=\"https://discord.gg/ipfs\"><img src=\"https://img.shields.io/discord/806902334369824788?color=blueviolet&label=discord&style=flat\" /></a>\n  <a href=\"https://github.com/ipfs/team-mgmt/blob/master/MGMT_JS_CORE_DEV.md\"><img src=\"https://img.shields.io/badge/team-mgmt-blue.svg?style=flat\" /></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://codecov.io/gh/ipfs/js-kubo-rpc-client\"><img src=\"https://img.shields.io/codecov/c/github/ipfs/js-kubo-rpc-client/master.svg?style=flat-square\"></a>\n   <a href=\"https://bundlephobia.com/result?p=kubo-rpc-client\"><img src=\"https://flat.badgen.net/bundlephobia/minzip/kubo-rpc-client\"></a>\n  <br>\n  <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\"></a>\n  <a href=\"https://github.com/RichardLitt/standard-readme\"><img src=\"https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square\" /></a>\n  <a href=\"\"><img src=\"https://img.shields.io/badge/npm-%3E%3D3.0.0-orange.svg?style=flat-square\" /></a>\n  <a href=\"\"><img src=\"https://img.shields.io/badge/Node.js-%3E%3D10.0.0-orange.svg?style=flat-square\" /></a>\n  <a href=\"https://www.npmjs.com/package/kubo-rpc-client\"><img src=\"https://img.shields.io/npm/dm/kubo-rpc-client.svg\" /></a>\n  <a href=\"https://www.jsdelivr.com/package/npm/kubo-rpc-client\"><img src=\"https://data.jsdelivr.com/v1/package/npm/kubo-rpc-client/badge\"/></a>\n  <br>\n</p>\n\n## Getting Started\n\nWe've come a long way, but this project is still in Alpha, lots of development is happening, APIs might change, beware of \ud83d\udc09..\n\n```bash\nnpm install --save kubo-rpc-client\n```\n\nBoth the Current and Active LTS versions of Node.js are supported. Please see [nodejs.org](https://nodejs.org/) for what these currently are.\n\n### Next Steps\n\n<!-- TODO: currently useless\n- Read the [docs](https://ipfs.github.io/js-kubo-rpc-client)\n-->\n\n- Look into the [examples](https://github.com/ipfs-examples/js-ipfs-examples) to learn how to spawn an RPC client or a full IPFS node in Node.js and in the Browser\n- Consult the [Core API docs](https://github.com/ipfs/js-ipfs/tree/master/docs/core-api) to see what you can do with an IPFS node\n- Check out <https://docs.ipfs.tech> for tips, how-tos and more\n- Head over to <https://proto.school> to take interactive tutorials that cover core IPFS APIs\n- See <https://blog.ipfs.tech> for news and more\n- Need help? Please ask 'How do I?' questions on <https://discuss.ipfs.tech>\n\n## Usage\n\n#### `create([options])`\n\n> create an instance of the HTTP API client\n\n#### Parameters\n\nNone\n\n#### Options\n\n`options` can be a `String`, a `URL` or a `Multiaddr` which will be interpreted as the address of the IPFS node we wish to use the API of.\n\nAlternatively it can be an object which may have the following keys:\n\n| Name     | Type                                                                 | Default                                          | Description                                                                                                    |\n| -------- | -------------------------------------------------------------------- | ------------------------------------------------ | -------------------------------------------------------------------------------------------------------------- |\n| url      | `String` or `URL` or `Multiaddr`                                     | `'http://localhost:5001/api/v0'`                 | A URL that resolves to a running instance of the IPFS [HTTP RPC API](https://docs.ipfs.io/reference/http/api/) |\n| protocol | `String`                                                             | `'http'`                                         | The protocol to used (ignored if url is specified)                                                             |\n| host     | `String`                                                             | `'localhost'`                                    | The host to used (ignored if url is specified)                                                                 |\n| port     | `number`                                                             | `5001`                                           | The port to used (ignored if url is specified)                                                                 |\n| path     | `String`                                                             | `'api/v0'`                                       | The path to used (ignored if url is specified)                                                                 |\n| agent    | [http.Agent](https://nodejs.org/api/http.html#http_class_http_agent) | `http.Agent({ keepAlive: true, maxSockets: 6 })` | An `http.Agent` used to control client behaviour (node.js only)                                                |\n\n#### Returns\n\n| Type     | Description                                                                                               |\n| -------- | --------------------------------------------------------------------------------------------------------- |\n| `Object` | An object that conforms to the [IPFS Core API](https://github.com/ipfs/js-ipfs/tree/master/docs/core-api) |\n\n#### Example\n\n```JavaScript\nimport { create } from 'kubo-rpc-client'\n\n// connect to the default API address http://localhost:5001\nconst client = create()\n\n// connect to a different API\nconst client = create({ url: \"http://127.0.0.1:5002/api/v0\" });\n\n// connect using a URL\nconst client = create(new URL('http://127.0.0.1:5002'))\n\n// call Core API methods\nconst { cid } = await client.add('Hello world!')\n```\n\nDo you use Kubo's [**`API.Authorizations`**](https://github.com/ipfs/kubo/blob/master/docs/config.md#apiauthorizations)? Check the [Custom Headers](#custom-headers) section.\n\n### API\n\n`kubo-rpc-client` will not implement the [IPFS Core API](https://github.com/ipfs/js-ipfs/tree/master/docs/core-api). Please see <https://github.com/ipfs/kubo/issues/9125> for more information.\n\n### Additional Options\n\nAll core API methods take *additional* `options` specific to the HTTP API:\n\n- `headers` - An object or [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance that can be used to set custom HTTP headers. Note that this option can also be [configured globally](#custom-headers) via the constructor options.\n- `searchParams` - An object or [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instance that can be used to add additional query parameters to the query string sent with each request.\n\n### Instance Utils\n\n- `ipfs.getEndpointConfig()`\n\nCall this on your client instance to return an object containing the `host`, `port`, `protocol` and `api-path`.\n\n### Static Types and Utils\n\nAside from the default export, `kubo-rpc-client` exports various types and utilities that are included in the bundle:\n\n- [`multiaddr`](https://www.npmjs.com/package/multiaddr)\n- [`multibase`](https://www.npmjs.com/package/multibase)\n- [`multicodec`](https://www.npmjs.com/package/multicodec)\n- [`multihash`](https://www.npmjs.com/package/multihashes)\n- [`CID`](https://www.npmjs.com/package/cids)\n- [`globSource`](https://github.com/ipfs/js-ipfs-utils/blob/master/src/files/glob-source.js) (not available in the browser)\n- [`urlSource`](https://github.com/ipfs/js-ipfs-utils/blob/master/src/files/url-source.js)\n\nThese can be accessed like this, for example:\n\n```js\nimport { CID } from 'kubo-rpc-client'\n```\n\n#### Glob source\n\nA utility to allow files on the file system to be easily added to IPFS.\n\n##### `globSource(path, pattern, [options])`\n\n- `path`: A path to a single file or directory to glob from\n- `pattern`: A pattern to match files under `path`\n- `options`: Optional options\n- `options.hidden`: Hidden/dot files (files or folders starting with a `.`, for example, `.git/`) are not included by default. To add them, use the option `{ hidden: true }`.\n\nReturns an async iterable that yields `{ path, content }` objects suitable for passing to `ipfs.add`.\n\n##### Example\n\n```js\nimport { create, globSource } from 'ipfs'\n\nconst ipfs = await create()\n\nfor await (const file of ipfs.addAll(globSource('./docs', '**/*'))) {\n  console.log(file)\n}\n/*\n{\n  path: 'docs/assets/anchor.js',\n  cid: CID('QmVHxRocoWgUChLEvfEyDuuD6qJ4PhdDL2dTLcpUy3dSC2'),\n  size: 15347\n}\n{\n  path: 'docs/assets/bass-addons.css',\n  cid: CID('QmPiLWKd6yseMWDTgHegb8T7wVS7zWGYgyvfj7dGNt2viQ'),\n  size: 232\n}\n...\n*/\n```\n\n#### URL source\n\nA utility to allow content from the internet to be easily added to IPFS.\n\n##### `urlSource(url)`\n\n- `url`: A string URL or [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) instance to send HTTP GET request to\n\nReturns an async iterable that yields `{ path, content }` objects suitable for passing to `ipfs.add`.\n\n##### Example\n\n```js\nimport { create, urlSource } from 'kubo-rpc-client'\nconst ipfs = create()\n\nconst file = await ipfs.add(urlSource('https://ipfs.io/images/ipfs-logo.svg'))\nconsole.log(file)\n\n/*\n{\n  path: 'ipfs-logo.svg',\n  cid: CID('QmTqZhR6f7jzdhLgPArDPnsbZpvvgxzCZycXK7ywkLxSyU'),\n  size: 3243\n}\n*/\n```\n\n### Running the daemon with the right port\n\nTo interact with the API, you need to have a local daemon running. It needs to be open on the right port. `5001` is the default, and is used in the examples below, but it can be set to whatever you need.\n\n```sh\n# Show the ipfs config API port to check it is correct\n> ipfs config Addresses.API\n/ip4/127.0.0.1/tcp/5001\n# Set it if it does not match the above output\n> ipfs config Addresses.API /ip4/127.0.0.1/tcp/5001\n# Restart the daemon after changing the config\n\n# Run the daemon\n> ipfs daemon\n```\n\n### Importing the module and usage\n\n```javascript\nimport { create } from 'kubo-rpc-client'\n\n// connect to ipfs daemon API server\nconst ipfs = create('http://localhost:5001') // (the default in Node.js)\n\n// or connect with multiaddr\nconst ipfs = create('/ip4/127.0.0.1/tcp/5001')\n\n// or using options\nconst ipfs = create({ host: 'localhost', port: '5001', protocol: 'http' })\n\n// or specifying a specific API path\nconst ipfs = create({ host: '1.1.1.1', port: '80', apiPath: '/ipfs/api/v0' })\n```\n\n### In a web browser\n\n**through Browserify**\n\nSame as in Node.js, you just have to [browserify](http://browserify.org) the code before serving it. See the browserify repo for how to do that.\n\nSee the example in the [examples folder](https://github.com/ipfs-examples/js-ipfs-examples/tree/master/examples) to get a boilerplate.\n\n**through webpack**\n\nSee the example in the [examples folder](https://github.com/ipfs-examples/js-ipfs-examples/tree/master/examples/http-client-bundle-webpack) to get an idea on how to use `kubo-rpc-client` with webpack.\n\n**from CDN**\n\nInstead of a local installation (and browserification) you may request a remote copy of IPFS API from [jsDelivr](https://www.jsdelivr.com/package/npm/ipfs).\n\nTo always request the latest version, use one of the following examples:\n\n```html\n<!-- loading the minified version using jsDelivr -->\n<script src=\"https://cdn.jsdelivr.net/npm/kubo-rpc-client/dist/index.min.js\"></script>\n```\n\nFor maximum security you may also decide to:\n\n- reference a specific version of IPFS API (to prevent unexpected breaking changes when a newer latest version is published)\n- [generate a SRI hash](https://www.srihash.org/) of that version and use it to ensure integrity. Learn more also at the [jsdelivr website](https://www.jsdelivr.com/using-sri-with-dynamic-files)\n- set the [CORS settings attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) to make anonymous requests to CDN\n\nExample:\n\n```html\n<script\n  src=\"https://www.jsdelivr.com/package/npm/kubo-rpc-client\"\n  integrity=\"sha384-5bXRcW9kyxxnSMbOoHzraqa7Z0PQWIao+cgeg327zit1hz5LZCEbIMx/LWKPReuB\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\nCDN-based IPFS API provides the `KuboRpcClient` object of the global `window` object. Example:\n\n```js\nconst ipfs = window.KuboRpcClient.create({ host: 'localhost', port: 5001 })\n```\n\nIf you omit the host and port, the client will parse `window.host`, and use this information. This also works, and can be useful if you want to write apps that can be run from multiple different gateways:\n\n```js\nconst ipfs = window.KuboRpcClient.create()\n```\n\n### Custom Headers\n\nIf you wish to send custom headers with each request made by this library, for example, the `Authorization` header. This can be useful if your Kubo node has keys defined in [`API.Authorizations`](https://github.com/ipfs/kubo/blob/master/docs/config.md#apiauthorizations).\n\nIf you're using `bearer:token`, where `token` is `abc123`:\n\n```js\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http',\n  headers: {\n    authorization: 'Bearer abc123'\n  }\n})\n```\n\nIf you're using `basic:user:password`, where `user:password` is `alice:secret`:\n\n```js\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http',\n  headers: {\n    // For Node.js, using:\n    //    Buffer.from('alice:secret').toString('base64')\n    // is preferred over using `btoa`.\n    authorization: 'Basic ' + btoa('alice:secret')\n  }\n})\n```\n\n### Global Timeouts\n\nTo set a global timeout for *all* requests pass a value for the `timeout` option:\n\n```js\n// Timeout after 10 seconds\nconst ipfs = create({ timeout: 10000 })\n// Timeout after 2 minutes\nconst ipfs = create({ timeout: '2m' })\n// see https://www.npmjs.com/package/parse-duration for valid string values\n```\n\n## Development\n\n### Testing\n\nWe run tests by executing `npm test` in a terminal window. This will run both Node.js and Browser tests, both in Chrome and PhantomJS. To ensure that the module conforms with the [`interface-ipfs-core`](https://github.com/ipfs/js-ipfs/tree/master/packages/interface-ipfs-core) spec, we run the batch of tests provided by the interface module, which can be found [here](https://github.com/ipfs/js-ipfs/tree/master/packages/interface-ipfs-core/src).\n\n## Historical context\n\nThis module started as a direct mapping from the go-ipfs cli to a JavaScript implementation, although this was useful and familiar to a lot of developers that were coming to IPFS for the first time, it also created some confusion on how to operate the core of IPFS and have access to the full capacity of the protocol. After much consideration, we decided to create `interface-ipfs-core` with the goal of standardizing the interface of a core implementation of IPFS, and keep the utility functions the IPFS community learned to use and love, such as reading files from disk and storing them directly to IPFS.\n\n## License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n## Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-kubo-rpc-client/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-29T10:14:25Z", "2024-02-06T23:33:43Z", "2023-11-29T08:48:30Z", "2023-02-13T09:00:03Z", "2023-01-13T15:04:16Z", "2023-01-13T09:55:43Z", "2023-01-04T10:39:58Z", "2023-01-03T14:23:49Z", "2022-12-15T23:34:04Z", "2022-11-23T13:12:23Z", "2022-11-02T13:36:04Z", "2022-09-23T17:20:14Z"]}, {"name": "js-level-pull-blob-store", "description": "Leveldb implementation of interface-pull-blob-store", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# js-level-pull-blob-store\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n\npull-blob-store implementation for LevelDB.\n\n## Lead Maintainer\n\n[Alex Potsides](https://github.com/achingbrain)\n\nCredits:\nOriginal work for this module was inspired by https://github.com/dignifiedquire, and can be found here https://github.com/ipfs/js-idb-pull-blob-store.\n", "release_dates": []}, {"name": "js-stores", "description": "TypeScript interfaces used by IPFS internals", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# stores\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/js-stores.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-stores)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/js-stores/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/js-stores/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Blockstores and datastores used by IP-JS internals\n\n# Packages\n\n- [`/packages/blockstore-core`](./packages/blockstore-core) Contains various implementations of the API contract described in interface-blockstore\n- [`/packages/blockstore-fs`](./packages/blockstore-fs) Blockstore implementation with file system backend\n- [`/packages/blockstore-idb`](./packages/blockstore-idb) Blockstore implementation with IndexedDB backend\n- [`/packages/blockstore-level`](./packages/blockstore-level) Blockstore implementation with level(up|down) backend\n- [`/packages/blockstore-s3`](./packages/blockstore-s3) IPFS blockstore implementation backed by s3\n- [`/packages/datastore-core`](./packages/datastore-core) Wrapper implementation for interface-datastore\n- [`/packages/datastore-fs`](./packages/datastore-fs) Datastore implementation with file system backend\n- [`/packages/datastore-idb`](./packages/datastore-idb) Datastore implementation with IndexedDB backend.\n- [`/packages/datastore-level`](./packages/datastore-level) Datastore implementation with level(up|down) backend\n- [`/packages/datastore-s3`](./packages/datastore-s3) IPFS datastore implementation backed by s3\n- [`/packages/interface-blockstore`](./packages/interface-blockstore) An interface for storing and retrieving blocks\n- [`/packages/interface-blockstore-tests`](./packages/interface-blockstore-tests) Compliance tests for the blockstore interface\n- [`/packages/interface-datastore`](./packages/interface-datastore) datastore interface\n- [`/packages/interface-datastore-tests`](./packages/interface-datastore-tests) Compliance tests for the datastore interface\n- [`/packages/interface-store`](./packages/interface-store) A generic interface for storing and retrieving data\n\n# API Docs\n\n- <https://ipfs.github.io/js-stores>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/js-stores/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-28T09:36:32Z", "2024-02-12T10:37:13Z", "2024-02-12T10:38:19Z", "2024-02-12T10:37:46Z", "2024-02-12T10:38:03Z", "2024-02-12T10:37:30Z", "2024-02-12T10:40:27Z", "2024-02-12T10:41:06Z", "2024-02-12T10:40:45Z", "2024-02-12T10:40:11Z", "2024-02-12T10:39:52Z", "2024-02-12T10:39:36Z", "2024-02-12T10:39:21Z", "2024-02-12T10:39:07Z", "2024-02-12T10:38:53Z", "2024-02-12T10:58:09Z", "2024-02-12T10:38:38Z", "2023-12-30T14:07:17Z", "2023-12-30T13:16:21Z", "2023-12-30T14:07:32Z", "2023-12-30T14:08:03Z", "2023-12-30T14:07:47Z", "2023-12-30T14:08:19Z", "2023-12-30T14:09:20Z", "2023-12-30T14:10:06Z", "2023-12-30T14:09:04Z", "2023-12-30T14:10:21Z", "2023-12-30T14:08:34Z", "2023-12-30T14:09:50Z", "2023-12-30T14:09:35Z"]}, {"name": "kubo", "description": "An IPFS implementation in Go", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://docs.ipfs.tech/how-to/command-line-quick-start/\"><img src=\"https://user-images.githubusercontent.com/157609/250148884-d6d12db8-fdcf-4be3-8546-2550b69845d8.png\" alt=\"Kubo logo\" title=\"Kubo logo\" width=\"200\"></a>\n  <br>\n  Kubo: IPFS Implementation in GO\n  <br>\n</h1>\n\n<p align=\"center\" style=\"font-size: 1.2rem;\">The first implementation of IPFS.</p>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://discuss.ipfs.tech\"><img alt=\"Discourse Forum\" src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fdiscuss.ipfs.tech\"></a>\n  <a href=\"https://matrix.to/#/#ipfs-space:ipfs.io\"><img alt=\"Matrix\" src=\"https://img.shields.io/matrix/ipfs-space%3Aipfs.io?server_fqdn=matrix.org\"></a>\n  <a href=\"https://github.com/ipfs/kubo/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/kubo/build.yml?branch=master\" alt=\"ci\"></a>\n  <a href=\"https://github.com/ipfs/kubo/releases\"><img alt=\"GitHub release\" src=\"https://img.shields.io/github/v/release/ipfs/kubo?filter=!*rc*\"></a>\n  <a href=\"https://godoc.org/github.com/ipfs/kubo\"><img src=\"https://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square\" alt=\"godoc reference\"></a>  \n</p>\n\n<hr />\n\n## What is Kubo?\n\nKubo was the first IPFS implementation and is the most widely used one today. Implementing the *Interplanetary Filesystem* - the Web3 standard for content-addressing, interoperable with HTTP. Thus powered by IPLD's data models and the libp2p for network communication. Kubo is written in Go.\n\nFeatureset\n- Runs an IPFS-Node as a network service that is part of LAN and WAN DHT\n- [HTTP Gateway](https://specs.ipfs.tech/http-gateways/) (`/ipfs` and `/ipns`) functionality for trusted and [trustless](https://docs.ipfs.tech/reference/http/gateway/#trustless-verifiable-retrieval) content retrieval\n- [HTTP Routing V1](https://specs.ipfs.tech/routing/http-routing-v1/) (`/routing/v1`) client and server implementation for [delegated routing](./docs/delegated-routing.md) lookups\n- [HTTP Kubo RPC API](https://docs.ipfs.tech/reference/kubo/rpc/) (`/api/v0`) to access and control the daemon\n- [Command Line Interface](https://docs.ipfs.tech/reference/kubo/cli/) based on (`/api/v0`) RPC API\n- [WebUI](https://github.com/ipfs/ipfs-webui/#readme) to manage the Kubo node\n- [Content blocking](/docs/content-blocking.md) support for operators of public nodes\n\n### Other implementations\n\nSee [List](https://docs.ipfs.tech/basics/ipfs-implementations/)\n\n## What is IPFS?\n\nIPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas from previous systems such as Git, BitTorrent, Kademlia, SFS, and the Web. It is like a single BitTorrent swarm, exchanging git objects. IPFS provides an interface as simple as the HTTP web, but with permanence built-in. You can also mount the world at /ipfs.\n\nFor more info see: https://docs.ipfs.tech/concepts/what-is-ipfs/\n\nBefore opening an issue, consider using one of the following locations to ensure you are opening your thread in the right place:\n  - kubo (previously named go-ipfs) _implementation_ bugs in [this repo](https://github.com/ipfs/kubo/issues).\n  - Documentation issues in [ipfs/docs issues](https://github.com/ipfs/ipfs-docs/issues).\n  - IPFS _design_ in [ipfs/specs issues](https://github.com/ipfs/specs/issues).\n  - Exploration of new ideas in [ipfs/notes issues](https://github.com/ipfs/notes/issues).\n  - Ask questions and meet the rest of the community at the [IPFS Forum](https://discuss.ipfs.tech).\n  - Or [chat with us](https://docs.ipfs.tech/community/chat/).\n\n[![YouTube Channel Subscribers](https://img.shields.io/youtube/channel/subscribers/UCdjsUXJ3QawK4O5L1kqqsew?label=Subscribe%20IPFS&style=social&cacheSeconds=3600)](https://www.youtube.com/channel/UCdjsUXJ3QawK4O5L1kqqsew) [![Follow @IPFS on Twitter](https://img.shields.io/twitter/follow/IPFS?style=social&cacheSeconds=3600)](https://twitter.com/IPFS)\n\n## Next milestones\n\n[Milestones on GitHub](https://github.com/ipfs/kubo/milestones)\n\n\n## Table of Contents\n\n- [What is Kubo?](#what-is-kubo)\n- [What is IPFS?](#what-is-ipfs)\n- [Next milestones](#next-milestones)\n- [Table of Contents](#table-of-contents)\n- [Security Issues](#security-issues)\n- [Minimal System Requirements](#minimal-system-requirements)\n- [Install](#install)\n  - [Docker](#docker)\n  - [Official prebuilt binaries](#official-prebuilt-binaries)\n    - [Updating](#updating)\n      - [Using ipfs-update](#using-ipfs-update)\n      - [Downloading builds using IPFS](#downloading-builds-using-ipfs)\n  - [Unofficial Linux packages](#unofficial-linux-packages)\n    - [ArchLinux](#arch-linux)\n    - [Nix](#nix)\n    - [Solus](#solus)\n    - [openSUSE](#opensuse)\n    - [Guix](#guix)\n    - [Snap](#snap)\n  - [Unofficial Windows packages](#unofficial-windows-packages)\n    - [Chocolatey](#chocolatey)\n    - [Scoop](#scoop)\n  - [Unofficial MacOS packages](#unofficial-macos-packages)\n    - [MacPorts](#macports)\n    - [Nix](#nix-macos)\n    - [Homebrew](#homebrew)\n  - [Build from Source](#build-from-source)\n    - [Install Go](#install-go)\n    - [Download and Compile IPFS](#download-and-compile-ipfs)\n      - [Cross Compiling](#cross-compiling)\n    - [Troubleshooting](#troubleshooting)\n- [Getting Started](#getting-started)\n  - [Usage](#usage)\n  - [Some things to try](#some-things-to-try)\n  - [Troubleshooting](#troubleshooting-1)\n- [Packages](#packages)\n- [Development](#development)\n  - [Map of Implemented Subsystems](#map-of-implemented-subsystems)\n  - [CLI, HTTP-API, Architecture Diagram](#cli-http-api-architecture-diagram)\n  - [Testing](#testing)\n  - [Development Dependencies](#development-dependencies)\n  - [Developer Notes](#developer-notes)\n- [Maintainer Info](#maintainer-info)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Security Issues\n\nPlease follow [`SECURITY.md`](SECURITY.md).\n\n### Minimal System Requirements\n\nIPFS can run on most Linux, macOS, and Windows systems. We recommend running it on a machine with at least 4 GB of RAM and 2 CPU cores (kubo is highly parallel). On systems with less memory, it may not be completely stable, and you run on your own risk.\n\n## Install\n\nThe canonical download instructions for IPFS are over at: https://docs.ipfs.tech/install/. It is **highly recommended** you follow those instructions if you are not interested in working on IPFS development.\n\n### Docker\n\nOfficial images are published at https://hub.docker.com/r/ipfs/kubo/:\n\n[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/ipfs/kubo?color=blue&label=kubo%20docker%20image&logo=docker&sort=semver&style=flat-square&cacheSeconds=3600)](https://hub.docker.com/r/ipfs/kubo/)\n\nMore info on how to run Kubo (go-ipfs) inside Docker can be found [here](https://docs.ipfs.tech/how-to/run-ipfs-inside-docker/).\n\n### Official prebuilt binaries\n\nThe official binaries are published at https://dist.ipfs.tech#kubo:\n\n[![dist.ipfs.tech Downloads](https://img.shields.io/github/v/release/ipfs/kubo?label=dist.ipfs.tech&logo=ipfs&style=flat-square&cacheSeconds=3600)](https://dist.ipfs.tech#kubo)\n\nFrom there:\n- Click the blue \"Download Kubo\" on the right side of the page.\n- Open/extract the archive.\n- Move kubo (`ipfs`) to your path (`install.sh` can do it for you).\n\nIf you are unable to access [dist.ipfs.tech](https://dist.ipfs.tech#kubo), you can also download kubo (go-ipfs) from:\n- this project's GitHub [releases](https://github.com/ipfs/kubo/releases/latest) page\n- `/ipns/dist.ipfs.tech` at [dweb.link](https://dweb.link/ipns/dist.ipfs.tech#kubo) gateway\n\n#### Updating\n\n##### Using ipfs-update\n\nIPFS has an updating tool that can be accessed through `ipfs update`. The tool is\nnot installed alongside IPFS in order to keep that logic independent of the main\ncodebase. To install `ipfs-update` tool, [download it here](https://dist.ipfs.tech/#ipfs-update).\n\n##### Downloading builds using IPFS\n\nList the available versions of Kubo (go-ipfs) implementation:\n\n```console\n$ ipfs cat /ipns/dist.ipfs.tech/kubo/versions\n```\n\nThen, to view available builds for a version from the previous command (`$VERSION`):\n\n```console\n$ ipfs ls /ipns/dist.ipfs.tech/kubo/$VERSION\n```\n\nTo download a given build of a version:\n\n```console\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_darwin-386.tar.gz    # darwin 32-bit build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_darwin-amd64.tar.gz  # darwin 64-bit build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_freebsd-amd64.tar.gz # freebsd 64-bit build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-386.tar.gz     # linux 32-bit build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-amd64.tar.gz   # linux 64-bit build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-arm.tar.gz     # linux arm build\n$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_windows-amd64.zip    # windows 64-bit build\n```\n\n### Unofficial Linux packages\n\n<a href=\"https://repology.org/project/kubo/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/kubo.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n- [ArchLinux](#arch-linux)\n- [Nix](#nix-linux)\n- [Solus](#solus)\n- [openSUSE](#opensuse)\n- [Guix](#guix)\n- [Snap](#snap)\n\n#### Arch Linux\n\n[![kubo via Community Repo](https://img.shields.io/archlinux/v/community/x86_64/kubo?color=1793d1&label=kubo&logo=arch-linux&style=flat-square&cacheSeconds=3600)](https://wiki.archlinux.org/title/IPFS)\n\n```bash\n# pacman -S kubo\n```\n\n[![kubo-git via AUR](https://img.shields.io/static/v1?label=kubo-git&message=latest%40master&color=1793d1&logo=arch-linux&style=flat-square&cacheSeconds=3600)](https://aur.archlinux.org/packages/kubo/)\n\n#### <a name=\"nix-linux\">Nix</a>\n\nWith the purely functional package manager [Nix](https://nixos.org/nix/) you can install kubo (go-ipfs) like this:\n\n```\n$ nix-env -i kubo\n```\n\nYou can also install the Package by using its attribute name, which is also `kubo`.\n\n#### Solus\n\n[Package for Solus](https://dev.getsol.us/source/kubo/repository/master/)\n\n```\n$ sudo eopkg install kubo\n```\n\nYou can also install it through the Solus software center.\n\n#### openSUSE\n\n[Community Package for go-ipfs](https://software.opensuse.org/package/go-ipfs)\n\n#### Guix\n\n[Community Package for go-ipfs](https://packages.guix.gnu.org/packages/go-ipfs/0.11.0/) is no out-of-date.\n\n#### Snap\n\nNo longer supported, see rationale in [kubo#8688](https://github.com/ipfs/kubo/issues/8688).\n\n### Unofficial Windows packages\n\n- [Chocolatey](#chocolatey)\n- [Scoop](#scoop)\n\n#### Chocolatey\n\nNo longer supported, see rationale in [kubo#9341](https://github.com/ipfs/kubo/issues/9341).\n\n#### Scoop\n\nScoop provides kubo as `kubo` in its 'extras' bucket.\n\n```Powershell\nPS> scoop bucket add extras\nPS> scoop install kubo\n```\n\n### Unofficial macOS packages\n\n- [MacPorts](#macports)\n- [Nix](#nix-macos)\n- [Homebrew](#homebrew)\n\n#### MacPorts\n\nThe package [ipfs](https://ports.macports.org/port/ipfs) currently points to kubo (go-ipfs) and is being maintained.\n\n```\n$ sudo port install ipfs\n```\n\n#### <a name=\"nix-macos\">Nix</a>\n\nIn macOS you can use the purely functional package manager [Nix](https://nixos.org/nix/):\n\n```\n$ nix-env -i kubo\n```\n\nYou can also install the Package by using its attribute name, which is also `kubo`.\n\n#### Homebrew\n\nA Homebrew formula [ipfs](https://formulae.brew.sh/formula/ipfs) is maintained too.\n\n```\n$ brew install --formula ipfs\n```\n\n### Build from Source\n\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/ipfs/kubo?label=Requires%20Go&logo=go&style=flat-square&cacheSeconds=3600)\n\nkubo's build system requires Go and some standard POSIX build tools:\n\n* GNU make\n* Git\n* GCC (or some other go compatible C Compiler) (optional)\n\nTo build without GCC, build with `CGO_ENABLED=0` (e.g., `make build CGO_ENABLED=0`).\n\n#### Install Go\n\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/ipfs/kubo?label=Requires%20Go&logo=go&style=flat-square&cacheSeconds=3600)\n\nIf you need to update: [Download latest version of Go](https://golang.org/dl/).\n\nYou'll need to add Go's bin directories to your `$PATH` environment variable e.g., by adding these lines to your `/etc/profile` (for a system-wide installation) or `$HOME/.profile`:\n\n```\nexport PATH=$PATH:/usr/local/go/bin\nexport PATH=$PATH:$GOPATH/bin\n```\n\n(If you run into trouble, see the [Go install instructions](https://golang.org/doc/install)).\n\n#### Download and Compile IPFS\n\n```\n$ git clone https://github.com/ipfs/kubo.git\n\n$ cd kubo\n$ make install\n```\n\nAlternatively, you can run `make build` to build the go-ipfs binary (storing it in `cmd/ipfs/ipfs`) without installing it.\n\n**NOTE:** If you get an error along the lines of \"fatal error: stdlib.h: No such file or directory\", you're missing a C compiler. Either re-run `make` with `CGO_ENABLED=0` or install GCC.\n\n##### Cross Compiling\n\nCompiling for a different platform is as simple as running:\n\n```\nmake build GOOS=myTargetOS GOARCH=myTargetArchitecture\n```\n\n#### Troubleshooting\n\n- Separate [instructions are available for building on Windows](docs/windows.md).\n- `git` is required in order for `go get` to fetch all dependencies.\n- Package managers often contain out-of-date `golang` packages.\n  Ensure that `go version` reports at least 1.10. See above for how to install go.\n- If you are interested in development, please install the development\ndependencies as well.\n- Shell command completions can be generated with one of the `ipfs commands completion` subcommands. Read [docs/command-completion.md](docs/command-completion.md) to learn more.\n- See the [misc folder](https://github.com/ipfs/kubo/tree/master/misc) for how to connect IPFS to systemd or whatever init system your distro uses.\n\n## Getting Started\n\n### Usage\n\n[![docs: Command-line quick start](https://img.shields.io/static/v1?label=docs&message=Command-line%20quick%20start&color=blue&style=flat-square&cacheSeconds=3600)](https://docs.ipfs.tech/how-to/command-line-quick-start/)\n[![docs: Command-line reference](https://img.shields.io/static/v1?label=docs&message=Command-line%20reference&color=blue&style=flat-square&cacheSeconds=3600)](https://docs.ipfs.tech/reference/kubo/cli/)\n\nTo start using IPFS, you must first initialize IPFS's config files on your\nsystem, this is done with `ipfs init`. See `ipfs init --help` for information on\nthe optional arguments it takes. After initialization is complete, you can use\n`ipfs mount`, `ipfs add` and any of the other commands to explore!\n\n### Some things to try\n\nBasic proof of 'ipfs working' locally:\n\n    echo \"hello world\" > hello\n    ipfs add hello\n    # This should output a hash string that looks something like:\n    # QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o\n    ipfs cat <that hash>\n\n### HTTP/RPC clients\n\nFor programmatic interaction with Kubo, see our [list of HTTP/RPC clients](docs/http-rpc-clients.md).\n\n### Troubleshooting\n\nIf you have previously installed IPFS before and you are running into problems getting a newer version to work, try deleting (or backing up somewhere else) your IPFS config directory (~/.ipfs by default) and rerunning `ipfs init`. This will reinitialize the config file to its defaults and clear out the local datastore of any bad entries.\n\nPlease direct general questions and help requests to our [forums](https://discuss.ipfs.tech).\n\nIf you believe you've found a bug, check the [issues list](https://github.com/ipfs/kubo/issues) and, if you don't see your problem there, either come talk to us on [Matrix chat](https://docs.ipfs.tech/community/chat/), or file an issue of your own!\n\n## Packages\n\nSee [IPFS in GO](https://docs.ipfs.tech/reference/go/api/) documentation.\n\n## Development\n\nSome places to get you started on the codebase:\n\n- Main file: [./cmd/ipfs/main.go](https://github.com/ipfs/kubo/blob/master/cmd/ipfs/main.go)\n- CLI Commands: [./core/commands/](https://github.com/ipfs/kubo/tree/master/core/commands)\n- Bitswap (the data trading engine): [go-bitswap](https://github.com/ipfs/go-bitswap)\n- libp2p\n  - libp2p: https://github.com/libp2p/go-libp2p\n  - DHT: https://github.com/libp2p/go-libp2p-kad-dht\n- [IPFS : The `Add` command demystified](https://github.com/ipfs/kubo/tree/master/docs/add-code-flow.md)\n\n### Map of Implemented Subsystems\n**WIP**: This is a high-level architecture diagram of the various sub-systems of this specific implementation. To be updated with how they interact. Anyone who has suggestions is welcome to comment [here](https://docs.google.com/drawings/d/1OVpBT2q-NtSJqlPX3buvjYhOnWfdzb85YEsM_njesME/edit) on how we can improve this!\n<img src=\"https://docs.google.com/drawings/d/e/2PACX-1vS_n1FvSu6mdmSirkBrIIEib2gqhgtatD9awaP2_WdrGN4zTNeg620XQd9P95WT-IvognSxIIdCM5uE/pub?w=1446&amp;h=1036\">\n\n### CLI, HTTP-API, Architecture Diagram\n\n![](./docs/cli-http-api-core-diagram.png)\n\n> [Origin](https://github.com/ipfs/pm/pull/678#discussion_r210410924)\n\nDescription: Dotted means \"likely going away\". The \"Legacy\" parts are thin wrappers around some commands to translate between the new system and the old system. The grayed-out parts on the \"daemon\" diagram are there to show that the code is all the same, it's just that we turn some pieces on and some pieces off depending on whether we're running on the client or the server.\n\n### Testing\n\n```\nmake test\n```\n\n### Development Dependencies\n\nIf you make changes to the protocol buffers, you will need to install the [protoc compiler](https://github.com/google/protobuf).\n\n### Developer Notes\n\nFind more documentation for developers on [docs](./docs)\n\n## Maintainer Info\n* [Project Board for active and upcoming work](https://pl-strflt.notion.site/Kubo-GitHub-Project-Board-c68f9192e48e4e9eba185fa697bf0570)\n* [Release Process](https://pl-strflt.notion.site/Kubo-Release-Process-5a5d066264704009a28a79cff93062c4)\n* [Additional PL EngRes Kubo maintainer info](https://pl-strflt.notion.site/Kubo-go-ipfs-4a484aeeaa974dcf918027c300426c05)\n\n\n## Contributing\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\nWe \u2764\ufe0f all [our contributors](docs/AUTHORS); this project wouldn\u2019t be what it is without you! If you want to help out, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nPlease reach out to us in one [chat](https://docs.ipfs.tech/community/chat/) rooms.\n\n## License\n\nThis project is dual-licensed under Apache 2.0 and MIT terms:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/ipfs/kubo/blob/master/LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](https://github.com/ipfs/kubo/blob/master/LICENSE-MIT) or http://opensource.org/licenses/MIT)\n", "release_dates": ["2024-03-01T10:48:53Z", "2024-02-20T10:36:28Z", "2024-01-22T15:28:39Z", "2024-01-11T09:45:04Z", "2023-12-14T16:58:39Z", "2023-12-06T12:11:19Z", "2023-11-08T11:44:10Z", "2023-11-03T15:35:15Z", "2023-11-01T12:17:28Z", "2023-10-05T17:36:19Z", "2023-09-26T13:30:57Z", "2023-08-09T14:42:45Z", "2023-08-15T07:18:04Z", "2023-07-27T12:48:34Z", "2023-07-03T10:56:18Z", "2023-06-20T13:09:32Z", "2023-06-15T13:22:00Z", "2023-06-12T16:17:34Z", "2023-05-09T11:11:35Z", "2023-05-03T09:48:18Z", "2023-04-25T13:49:54Z", "2023-04-07T10:29:30Z", "2023-04-05T20:00:31Z", "2023-03-20T13:55:05Z", "2023-03-06T14:56:07Z", "2023-01-30T15:21:28Z", "2023-01-23T17:00:11Z", "2023-01-04T11:44:06Z", "2022-12-13T20:55:31Z", "2022-11-22T16:07:07Z"]}, {"name": "kuboreleaser", "description": null, "language": "Go", "license": null, "readme": "# KuboReleaser\n\nKuboReleaser is a CLI tool intended to help with the automation of [the release process of Kubo](https://github.com/ipfs/kubo/blob/master/docs/RELEASE_ISSUE_TEMPLATE.md).\n\nIt was originally started here - https://github.com/ipfs/kubo/pull/9493 - and is now being extracted into its own repo.\n\n## Prerequisites\n\n- [ ] `docker` installed\n- [ ] GitHub token creted with the following scopes\n  - ...\n- [ ] GitHub GPG key created and added to the GitHub account\n- [ ] Matrix account created and added to the Kubo room\n\n## Usage\n\n1. Build the binary\n\n```bash\nmake kuboreleaser\n```\n\n2. Create the .env file with your credentials\n\n_NOTE_: You can skip this step if you want to be prompted for the credentials instead.\n\n```bash\nmake env\n```\n\n3. Run the CLI\n\n```bash\n./kubeleaser --help\n```\n\n## Other\n\nYou can skip GPG setup by exporting `NO_GPG=true` in your environment. If you do that, you won't be able to sign the release tag.\n\nYou can skip Matrix setup by exporting `NO_MATRIX=true` in your environment. If you do that, you will have to confirm promotional posts were posted to Matrix manually.\n\n## TODO\n\n- [ ] enable auto-merge on created PRs\n- [ ] assign reviewers to the created PRs\n- [ ] check how git-go performs fetch (does it use protocol.version 2?)\n- [ ] add a `--dry-run` flag\n- [ ] link to the release issue in the PRs\n- [ ] allow to specify args via env vars\n- [ ] remove one level of nesting from the CLI\n- [ ] document how to use kuboreleaser in the README\n", "release_dates": []}, {"name": "lightning-storm", "description": "Just a planning repo for project lightning storm for now", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "local-offline-collab", "description": "Local Offline Collaboration Special Interest Group", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Local Offline Collaboration (Locol) Special Interest Group\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai/)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> User research, collaborations, and features to make the knowledge and tools on the internet accessible and useful on partitioned, low-bandwidth, or intermittant networks.\n\n## Table of Contents\n\n- [About](#about)\n- [Focus Areas](#focus-areas)\n- [Demo & Discussion Calls](#demo-and-discussion-calls)\n- [Discussion Forums](#discussion-forums)\n- [Maintainers](#maintainers)\n- [License](#license)\n\n## About\n\nThe IPFS Local Offline Collaboration (Locol) Special Interest Group is focused on understanding the challenges of users in offline or async networks, collaborating with partners serving those users, and prototyping solutions to understand how to make IPFS more useful for local offline collaboration.\n\n### Focus areas\n\n- Participate in communities like [Offline First](http://offlinefirst.org/)\n- Conduct user research around offline and local-first use cases, communities, and best practices\n- Support collaborations between IPFS and community members who are building tools for peer-to-peer sharing and collaboration in local/offline networks\n- Research and prototype applications that utilize IPFS for local-first collaboration and resilient offline usage\n\n### Demo and discussion calls\n\nWe meet occassionally to discuss projects and share demos relevant to local and offline collaboration. These meetings are scheduled one-off as speakers or discussion leaders volunteer. Subscribe to [this issue](https://github.com/ipfs/local-offline-collab/issues/25) to be notified of upcoming meetings. \n\nView our [historical meeting notes](https://docs.google.com/document/d/1Mol6epw0sbj5FqS6akD-X5KJkGF0MwsOZQ5t1ehOGiM/edit?usp=sharing) or [call recordings](https://www.youtube.com/playlist?list=PLuhRWgmPaHtSfSw2L-McV5w9nGoM5QzLO) to see what we've discussed in past sessions!\n\n*PROPOSE A TALK!* Come speak about your project or use-case! Jump into [this issue](https://github.com/ipfs/local-offline-collab/issues/25) to offer up a demo or suggest a discussion topic for our next call.\n\n### Discussion forums\nBetween calls, we encourage folks to make use of these async channels to share resources and and chat with fellow aficionados of offline/local-first tech: \n- The [IPFS community on Discord](https://discord.gg/vZTcrFePpt) \n- The #dweb channel within the Offline First Slack workspace ([sign up here](https://chat.offlinefirst.org/))\n\n### Maintainers\n\n- Yiannis Psaras - [Protocol Labs ResNetLab](https://research.protocol.ai/groups/resnetlab/)\n- Dietrich Ayala - [IPFS](https://ipfs.io) Ecosystem Lead\n\nThe Locol SIG is actively looking for more participants! Follow the [issues](https://github.com/ipfs/local-offline-collab/issues) for occassional gatherings to discuss local and offline use cases, challenges, and ongoing work - or create a new issue with your ideas and research!\n\n## License\n\nAll documents are licensed under the [CC-BY-SA 3.0](https://ipfs.io/ipfs/QmVreNvKsQmQZ83T86cWSjPu2vR3yZHGPm5jnxFuunEB9u) license \u00a9 2016 Protocol Labs Inc. Any code is under an [MIT license](LICENSE).\n", "release_dates": []}, {"name": "metrics", "description": "Regularly collect and publish metrics about the IPFS ecosystem", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# metrics repo\n\nRegularly collect and log metrics about IPFS related projects.\n\nThis repo contains a scheduled GitHub Action which pulls IPFS dependency data out of BigQuery and stores it \nin [timestamped json](./logs) files in this repo.\n\n## Recent Data\n\n### Google Trends\n\nWe're collecting the \"interest over time\" metric from Google Trends. From Google *\"Numbers \nrepresent search interest relative to the highest point on the chart for the given region and \ntime. A value of 100 is the peak popularity for the term. A value of 50 means that the term is \nhalf as popular. Likewise a score of 0 means the term was less than 1% as popular as the peak.\"*\n\nThis is the google trend data for searches of the term \"IPFS\" for the\nlast 12 months. The last 10 years is [available here.](./results/google-trends.md)\n\n\n\nGoogle Trends:\n*  10/2021: 62\n*  9/2021: 96\n*  8/2021: 79\n*  7/2021: 77\n*  6/2021: 81\n*  5/2021: 77\n*  4/2021: 94\n*  3/2021: 84\n*  2/2021: 77\n*  1/2021: 93\n*  12/2020: 54\n*  11/2020: 43\n\n### GitHub Search\n\nThese do a repository search, filtered by language, for \"ipfs.\" This search\nfinds references to ipfs in project names, descriptions, and anything else\nGitHub finds relevant (this isn't actually documented very well by GitHub).\n\nGitHub limits the maximum results to 1K. We can get around this a little bit\nby performing additional queries w/ different sorts in ascending and descending\norder, but there's some amount we'll never get. That's why it's nice to have\nthe historical data logged in the repo every day.\n\nThe \"total matches\" we get is larger than the result set, even when the result\nset is below the 1K limit imposed by GitHub. This isn't documented sufficiently\nso we don't know why this is the case.\n\n#### Go Repositories\n\nTotal Matches: 2598\n\nTotal Results (Limited by GitHUB API): 433\n\n| repo | watchers | forks | size | created | pushed |\n| ---- | -------- | ----- | ---- | ------- | ------ |\n| [myml/apt-ipfs](https://github.com/myml/apt-ipfs)| 0 | 0 | 70| 2021-10-05 | 2021-10-05 |\n| [ipfs/go-ipfs-regression](https://github.com/ipfs/go-ipfs-regression)| 0 | 0 | 0| 2021-09-28 | 2021-09-29 |\n| [fgeth/fg-ipfs](https://github.com/fgeth/fg-ipfs)| 0 | 0 | 1737| 2021-09-23 | 2021-09-24 |\n| [danbrough/ipfs_mobile](https://github.com/danbrough/ipfs_mobile)| 0 | 0 | 345| 2021-09-22 | 2021-10-03 |\n| [filecoincrypto/ipfsmgr](https://github.com/filecoincrypto/ipfsmgr)| 1 | 0 | 303| 2021-09-14 | 2021-09-22 |\n| [berty/go-ipfs-repo-afero](https://github.com/berty/go-ipfs-repo-afero)| 0 | 1 | 277| 2021-09-09 | 2021-09-30 |\n| [treethought/tipfs](https://github.com/treethought/tipfs)| 0 | 0 | 192| 2021-09-08 | 2021-09-19 |\n| [jbouwman/go-ipfs-lib-minimal](https://github.com/jbouwman/go-ipfs-lib-minimal)| 0 | 0 | 67| 2021-08-30 | 2021-08-30 |\n| [notional-labs/get](https://github.com/notional-labs/get)| 0 | 0 | 15375| 2021-08-27 | 2021-08-27 |\n| [iskdrews/ipfs-version-0.7.0](https://github.com/iskdrews/ipfs-version-0.7.0)| 0 | 0 | 46854| 2021-08-24 | 2021-08-24 |\n\n\nThe above set is limited to the 10 most recently created. \n[Full table here.](./results/repo_search_go.md)\n\n#### JS Repositories\n\nTotal Matches: 95033\n\nTotal Results (Limited by GitHUB API): 1607\n\n| repo | watchers | forks | size | created | pushed |\n| ---- | -------- | ----- | ---- | ------- | ------ |\n| [quieoo/nft_fabric_ipfs](https://github.com/quieoo/nft_fabric_ipfs)| 0 | 0 | 7104| 2021-10-05 | 2021-10-05 |\n| [abistorage/ipfs-tools](https://github.com/abistorage/ipfs-tools)| 0 | 0 | 7| 2021-10-02 | 2021-10-02 |\n| [Webners1/Dapp-Insta-Web3.0](https://github.com/Webners1/Dapp-Insta-Web3.0)| 0 | 0 | 330| 2021-10-01 | 2021-10-01 |\n| [ipfs-examples/js-ipfs-browser-lit](https://github.com/ipfs-examples/js-ipfs-browser-lit)| 0 | 0 | 130| 2021-09-30 | 2021-09-30 |\n| [miield/NextjsIPFSFleek](https://github.com/miield/NextjsIPFSFleek)| 0 | 0 | 7654| 2021-09-30 | 2021-09-30 |\n| [shivamtyagi577/BlockTune](https://github.com/shivamtyagi577/BlockTune)| 0 | 0 | 52966| 2021-09-29 | 2021-09-29 |\n| [mmalmi/ipfs-gun-chat](https://github.com/mmalmi/ipfs-gun-chat)| 0 | 0 | 333| 2021-09-29 | 2021-09-30 |\n| [wrightkhlebisol/nftfy](https://github.com/wrightkhlebisol/nftfy)| 0 | 0 | 153| 2021-09-29 | 2021-10-02 |\n| [clocigno/decentralized_video_hosting](https://github.com/clocigno/decentralized_video_hosting)| 0 | 0 | 635| 2021-09-28 | 2021-09-28 |\n| [gatij10/ipfs_server_setup](https://github.com/gatij10/ipfs_server_setup)| 0 | 0 | 24| 2021-09-26 | 2021-09-26 |\n\n\nThe above set is limited to the 10 most recently created. \n[Full table here.](./results/repo_search_js.md)\n", "release_dates": []}, {"name": "mobile-design-guidelines", "description": "Making IPFS work for mobile", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Introduction\n\nThe focus of the development of IPFS to date has been primarily on desktop and server-class hardware. However, the growth of the Internet for more than a decade has been almost entirely on mobile devices. Smartphone use has eclipsed desktop, especially in emerging markets, where IPFS stands best to address use cases, patterns and concerns around data sovereignty, offline applications and security.\n\nThis growth at the furthest edge of the network requires solutions at the edge. While the IPFS network continues to grow on mobile, more research is needed to realise the full value of the network. IPFS should be directly available and accessible to end-users on all their devices - and the design of IPFS integrations should make this clear and easy to use. To create that level of clarity, developers need clear guidelines that align with user needs while unlocking all the power of the decentralised mobile web.\n\nThese guidelines comprise of two main parts, research and design. Both include investigation and exploration of more extensive mobile sharing and receiving workflows of iOS and Android mobile operating systems. These guidelines provide a foundational effort towards IPFS on mobile platforms, informing both IPFS feature prioritisation as well as ecosystem and community building on the protocol.\n\n## Research\n\n### Application Survey Findings\n\nAfter in-depth review, we came upon many approaches to core areas that current P2P apps all share, such as identity and it's management, connection notification, confirmations and how they approach onboarding and user education.\n\n[Read more](application-survey/findings.md)\n\n### User Research Findings\n\nWe conducted extensive interviews with a wide range of people. We discovered there is a lot of opportunity in addressing user\u2019s desires for better methods of files sharing and addressing frustrations with its management. There is also an increasing interest in privacy and security issues.\n\n* [Experts](user-research/interviews/experts/)\n* [Early Adopters](user-research/interviews/early-adopters/)\n* [Potential User](user-research/interviews/potential-users/)\n\n[Read more](user-research/findings.md)\n\n## Design\n\n### Principles\n\nThese are suggestions of what to think about for designers and developers when building their apps and services[.](design/principles/)\n\n* [Respect the device](design/principles/respect-the-device.md)\n* [Explain, don't overwhelm](design/principles/explain-dont-overwhelm.md)\n* [Make privacy work for the user](design/principles/make-privacy-work-for-the-user.md)\n* [Give control over data](design/principles/give-control-over-data.md)\n* [Be seamless](design/principles/be-seamless.md)\n\n[Read more](design/principles/)\n\nWe've also created a handy cheat sheet for the design principles which you can download below.\n\n![Design principles cheat sheet](https://raw.githubusercontent.com/ipfs/mobile-design-guidelines/master/.gitbook/assets/cheat-sheet-preview.png)\n\nDownload full size in [PDF](https://github.com/ipfs/mobile-design-guidelines/blob/master/cheat-sheet.pdf) or [PNG](https://github.com/ipfs/mobile-design-guidelines/blob/master/cheat-sheet.png)\n\n### Scenarios\n\nThese are design examples to help designers and developers with situations they are likely to encounter when creating mobile apps and services for IPFS[.](design/scenarios/)\n\n* [The user onboards confidently with minimal technical knowledge](design/scenarios/the-user-onboards-confidently-with-minimal-technical-knowledge.md)\n* [The user shares a file through another app](design/scenarios/the-user-shares-a-file-through-another-app.md)\n* [Large file sent to user](design/scenarios/large-file-sent-to-user.md)\n* [User plays a shared media file without wifi or mobile network](design/scenarios/user-plays-a-shared-media-file-without-wifi-or-mobile-network.md)\n* [A user manages their chat identity](design/scenarios/a-user-manages-their-chat-identity.md)\n\n[Read more](design/scenarios/)\n\n", "release_dates": []}, {"name": "newsletter", "description": "Prepare and store the IPFS Newsletter", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Newsletter\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\nPrepare and store our newsletter.\n\n- [Idea](#idea)\n- [Contribute](#contribute)\n- [This repo](#this-repo)\n  - [Process for writing the Newsletter](#process-for-writing-the-newsletter)\n  - [Styleguide & Suggestions](#styleguide-&-suggestions)\n\n### \ud83d\udcf0 [Subscribe to the IPFS Newsletter here.](http://eepurl.com/gL2Pi5) \ud83d\udcf0\n\n## Idea\n\nSimilar to the [Rust community's](https://this-week-in-rust.org/), we want to have a newsletter that talks about what was done in the past week by various contributors. This will help:\n\n- Keep people in the loop about what is going on at Protocol Labs and on IPFS.\n- Tell active contributors when new versions or tools are available.\n- Attribute developers who have contributed to open-source software related to IPFS.\n\n## Contribute\n\nThe Newsletter takes a _lot of work_. This work can best be done by being distributed. If you know of anything cool that happens in a given week, anything that other people might be excited about, add it to the newsletter by adding a comment about it to the PR or Issue for that week's newsletter.\n\nHere are the steps to do that:\n - See something cool, or make something cool.\n - Go to the open PR for that week's newsletter.\n - Add a comment about the thing. Add a link, if possible.\n - Revel in the knowledge you are great.\n\nAlso, please help us out if you think the roundup could be better! [Open an issue!](https://github.com/ipfs/newsletter/issues/new)\n\n## This repo\n\n- Stores the final versions for past newsletters, posted elsewhere - the blog, email, and so on;\n- Tracks issues related to the roundups in the [issues](https://github.com/ipfs/newsletter/issues/);\n- Stores tools used to make the roundups\n\n\n### Process for writing the Newsletter\n\n- Open a Pull Request to create a new Markdown formatted file in the `published` folder. The naming format should be as in this example: `002-2016-jan-5.md`, for the newsletter of the sprint starting January 5th in 2016.\n- Collect feedback and iterate on the draft.\n- Images\n  - Add files into published folder\n  - Add using `-w` to ipfs\n  - Use ipfs.io gateway to add files in\n- Merge it after:\n  - Sign off from pertinent people\n  - The travis build for the branch completes after each push.\n- Crosspost\n  - [ipfs/ipfs#151](https://github.com/ipfs/ipfs/issues/151)\n  - [the Blog](//github.com/ipfs/blog)\n  - The IPFS Tinyletter, using `md2html` npm package to generate HTML\n  - Twitter: post the blog link after it is merged and published.\n\n### Styleguide & Suggestions\n\n- Use people's GitHub handles and not their real names. Example: @RichardLitt, and not \"Richard Littauer\".\n- Try and include everyone who has made a PR or commented on an issue. Often, issue comments are _major, pivotal_ contributions, and those should be captured!\n- Highlight, don't just summarize; a lot of work may be trivial, and higher signal is better noise.\n- In general, err on the side of giving credit to everyone involved. When people do the lion's share, mention them first. (Or even something like \"@whyrusleeping and several others ... \" if relevant. In the case of a release, you can link to the changelog which credits individually... but don't sweat this.)\n- In general, try linking larger phrases instead of single words. They're easier to notice and click on links.\n- In general, try highlighting _why_ something is cool. Call attention to things if\n    1. it is done and people should know about\n    2. there is a call to action -- opinions are needed.\n    3. it is specially useful to draw attention to something in the newsletter.\n\n", "release_dates": []}, {"name": "notes", "description": "IPFS Collaborative Notebook for Research", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Collaborative Notebook for Research\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-libp2p-yellow.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23libp2p-yellow.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n\n## What's in This Repo?\n\nWe use this repo in two ways:\n\n- [Issues](https://github.com/ipfs/notes/issues) to track several kinds of discussion on topics related with Research and IPFS, random ideas and proposals for new systems or features that don't fall on a specific repo yet. All the discussion happens in the issues.\n- [OPEN_PROBLEMS](./OPEN_PROBLEMS) list and unpack the currently known Open Problems for IPFS.\n\n**Disclaimer:** While we work hard to document our work as it progresses, research progress may not be fully reflected here for some time, or may be worked out out-of-band.\n\n## Request for Proposals\n\nSome of our Open Problems have open [RFPs](https://github.com/protocol/research-rfps#rfps-and-grants). For all, we welcome any collaborations (potentially leading to new constructions, discoveries and publications). Please reach out at research@protocol.ai.\n\n## Funding\n\n[Protocol Labs runs an RFP (Request For Proposals)](https://github.com/protocol/research-rfps) Program with the goal of funding individuals and groups to come up with novel solutions to the Open Problems found in this and other repos. If interested, please follow the link to check the active RFPs.\n\n## Related research repos\n\n- [Protocol Labs Research](https://github.com/protocol/research)\n- [libp2p Research](https://github.com/libp2p/notes)\n- [IPLD Research](https://github.com/ipld/research)\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/libp2p/notes/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": []}, {"name": "npm-kubo", "description": "Install Kubo (go-ipfs) from NPM", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://docs.ipfs.tech/how-to/command-line-quick-start/\"><img src=\"https://user-images.githubusercontent.com/157609/250148884-d6d12db8-fdcf-4be3-8546-2550b69845d8.png\" alt=\"Kubo logo\" title=\"Kubo logo\" width=\"200\"></a>\n  <br>\n  Kubo: IPFS Implementation in GO\n  <br>\n  <br>\n</h1>\n\n<h4 align=\"center\">Install <a href=\"https://github.com/ipfs/kubo\">Kubo</a> (previously known as \"go-ipfs\") from <a href=\"https://www.npmjs.com/package/kubo\">NPM</a></h4>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://discuss.ipfs.tech\"><img alt=\"Discourse Forum\" src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fdiscuss.ipfs.tech\"></a>\n  <a href=\"https://matrix.to/#/#ipfs-space:ipfs.io\"><img alt=\"Matrix\" src=\"https://img.shields.io/matrix/ipfs-space%3Aipfs.io?server_fqdn=matrix.org\"></a>\n  <a href=\"https://github.com/ipfs/npm-kubo/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/npm-kubo/main.yml?branch=master\" alt=\"ci\"></a>\n  <a href=\"https://www.npmjs.com/package/kubo\"><img src=\"https://img.shields.io/npm/v/kubo\" alt=\"npm version\"></a>\n  <a href=\"https://www.npmjs.com/package/kubo\"><img src=\"https://img.shields.io/npm/dm/kubo.svg\" alt=\"npm downloads\"></a>\n</p>\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Development](#development)\n  - [Publish a new version](#publish-a-new-version)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\nInstall the latest [Kubo](https://github.com/ipfs/kubo/) (go-ipfs) binary:\n\n```sh\n# Install globally\n> npm install -g kubo\n> ipfs version\nipfs version v0.23.0\n\n# Install locally\n> npm install kubo\n> ./node_modules/.bin/ipfs\nipfs version v0.23.0\n```\n\n## Usage\n\nThis module downloads Kubo (go-ipfs) binaries from https://dist.ipfs.tech into your project.\n\nIt will download the kubo version that matches the npm version of this module. So depending on `kubo@0.23.0` will install `kubo v0.23.0` for your current system architecture, in to your project at `node_modules/kubo/kubo/ipfs` and additional symlink to it at `node_modules/kubo/bin/ipfs`.\n\nAfter downloading you can find out the path of the installed binary by calling the `path` function exported by this module:\n\n```javascript\nconst { path } = require('kubo')\n\nconsole.info('kubo is installed at', path())\n```\n\nAn error will be thrown if the path to the binary cannot be resolved.\n\n### Caching\n\nDownloaded archives are placed in OS-specific cache directory which can be customized by setting `NPM_KUBO_CACHE` in env.\n\n### Overriding with `KUBO_BINARY` env\n\nIf the `KUBO_BINARY` env variable is set at runtime this will override the path of the binary used.\n\nThis must point to the file, not the directory containing the file.\n\n## Development\n\n**Warning**: the file `bin/ipfs` is a placeholder, when downloading stuff, it gets replaced. so if you run `node install.js` it will then be dirty in the git repo. **Do not commit this file**, as then you would be commiting a big binary and publishing it to npm. A pre-commit hook exists and should protect against this, but better safe than sorry.\n\n### Publish a new version\n\nYou should be able to just run `./publish.sh` for example:\n\n```sh\n> ./publish.sh\nusage ./publish.sh <version>\npublish a version of kubo to npm\n\n> ./publish.sh 0.3.11\n```\n\nThis will:\n\n- check the version is indeed a tag in https://github.com/ipfs/kubo\n- check the size of `bin/ipfs` is right (must be the checked in file)\n- update the version numbers in `package.json` and `README.md`\n- `git commit` the changes\n- push to https://github.com/ipfs/npm-kubo\n- publish to `kubo@$version` to https://npmjs.com/package/kubo\n\nOpen an issue in the repo if you run into trouble.\n\n### Publish a new version of this module with exact same kubo version\n\nIf some problem happens, and you need to publish a new version of this module targetting _the same_ kubo version, then please follow this convention:\n\n1. **Clean up bad stuff:** unpublish all modules with this exact same `<kubo-version>`\n2. **Add a \"hacky\" version suffix:** use version: `<kubo-version>-hacky<num>`\n3. **Publish version:** publish the module. Since it's the only one with the kubo version, then it should be installed.\n\n> Why do this?\n\nWell, if you previously published npm module `kubo@0.4.0` and there was a problem, we now must publish a different version, but we want to keep the version number the same. so the strategy is to publish as `kubo@0.4.0-hacky1`, and unpublish `kubo@0.4.0`.\n\n> Why `-hacky<num>`?\n\nBecause it is unlikely to be a legitimate kubo version, and we want to support kubo versions like `floodsub-1` etc.\n\n> Do i have to say `-hacky<num>` or can i just use `-<num>`?\n\n`-<num>` won't work, as [link-ipfs.js](./link-ipfs.js) expects `-hacky<num>`. If you want to\nchange the convention, go for it, and update this readme accordingly.\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/npm-kubo/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": []}, {"name": "papers", "description": "IPFS Papers (not specs)", "language": "TeX", "license": null, "readme": "## This repository is unmaintained!\n\n---\n\n# IPFS Papers\n\nThis repository contains [the original academic paper](./ipfs-cap2pfs/ipfs-p2p-file-system.pdf) on IPFS.\n\nFor more academic papers on IPFS, check out the [Acaedmic Papers page in the IPFS docs](https://docs.ipfs.tech/concepts/further-reading/academic-papers/).", "release_dates": []}, {"name": "pinbot-irc", "description": "a bot for the ipfs irc channel that pins things (among other menial tasks)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# pinbot-irc\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n\n> a bot for the ipfs irc channel that pins things (among other menial tasks)\n\nIRC bot that pins [IPFS](http://ipfs.io) files.\n\n## Install\n\n```sh\ngo get -u github.com/ipfs/pinbot-irc\n```\n\n## Usage\n\nIn a terminal, run:\n\n```sh\npinbot [-s <server>]\n```\n\nIn IRC:\n\n```irc\n<jbenet> !friends\n<pinbot> my friends are: whyrusleeping lgierth jbenet\n<jbenet> !pin QmbTdsZpRdVC7au7jLtkMwD6PRJPvfPvdRzG817PnxR2pR\n<pinbot> now pinning QmbTdsZpRdVC7au7jLtkMwD6PRJPvfPvdRzG817PnxR2pR\n<pinbot> pin QmbTdsZpRdVC7au7jLtkMwD6PRJPvfPvdRzG817PnxR2pR successful! -- http://gateway.ipfs.io/ipfs/QmbTdsZpRdVC7au7jLtkMwD6PRJPvfPvdRzG817PnxR2pR\n<jbenet> !botsnack\n<pinbot> om nom nom\n```\n\nMake sure to change the friends array. (or bug us to make this better configurable in an issue)\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/pinbot-irc/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": []}, {"name": "pinning-services-api-spec", "description": "Standalone, vendor-agnostic Pinning Service API for IPFS ecosystem", "language": "Makefile", "license": {"key": "cc0-1.0", "name": "Creative Commons Zero v1.0 Universal", "spdx_id": "CC0-1.0", "url": "https://api.github.com/licenses/cc0-1.0", "node_id": "MDc6TGljZW5zZTY="}, "readme": "# Pinning Service API Spec\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![](https://github.com/ipfs/pinning-services-api-spec/workflows/Lint/badge.svg?branch=main)](https://github.com/ipfs/pinning-services-api-spec/actions?query=workflow%3ALint+branch%3Amain)\n[![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square)](https://github.com/ipfs/specs/#understanding-the-meaning-of-the-spec-badges-and-their-lifecycle)\n\n> This repository contains the specs for the vendor-agnostic pinning service API for the IPFS ecosystem\n\n[![pinning-services-api-contex.png](https://user-images.githubusercontent.com/157609/108572745-438fc300-7313-11eb-93c3-c8b29c0da988.png)](#about)\n\n- [About](#about)\n- [Specification](#specification)\n  - [Code generation](#code-generation) (client/server)\n- [Adoption](#adoption)\n  - [Client libraries](#client-libraries)\n  - [Server implementations](#server-implementations)\n  - [Online services](#online-services)\n- [Contribute](#contribute)\n\n## About\n\nA **pinning service** is a service that accepts [CIDs](https://github.com/ipld/cid/) from a user in order to host the data associated with them.\n\nThe rationale behind defining a generic pinning service API is to have a baseline functionality and interface that can be provided by pinning services, so that tools can be built on top of a common base of functionality. \n\nIn [this presentation](https://youtu.be/Pcv8Bt4HMVU), IPFS creator Juan Benet discusses current and potential pinning use cases, and how a standardized IPFS pinning API can meet these envisioned needs. \n\nThe API spec in this repo is the first step towards that future.\n\n## Specification \n\nThis API is defined as an OpenAPI spec in YAML format:\n\n* **[ipfs-pinning-service.yaml](./ipfs-pinning-service.yaml)** ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square)\n\n\n### Documentation\n\nYou can find human-readable API documentation generated from the YAML file here:\n\n- **[https://ipfs.github.io/pinning-services-api-spec](https://ipfs.github.io/pinning-services-api-spec/)** ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square)\n\n### Code generation\n\nhttps://openapi-generator.tech allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically, given the OpenAPI spec at [ipfs-pinning-service.yaml](./ipfs-pinning-service.yaml).\n\nGive it a try before you resort to implementing things from scratch.\n\n## Adoption\n\nBuilt-in support for pinning services exposing this API is coming to IPFS tooling: \n  - [go-ipfs](https://github.com/ipfs/go-ipfs)  ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square) (since [v0.8.0](https://github.com/ipfs/go-ipfs/releases/v0.8.0): `ipfs pin remote --help`, see how to [work with remote pinning services](https://docs.ipfs.io/how-to/work-with-pinning-services/))\n  - [js-ipfs-http-client](https://www.npmjs.com/package/ipfs-http-client) ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square) (`ipfs.pin.remote.*` JS APIs)\n  - [ipfs-cluster](https://cluster.ipfs.io) ![](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square) ([issue](https://github.com/ipfs/ipfs-cluster/issues/1213))\n  - [js-ipfs](https://github.com/ipfs/js-ipfs#readme) \u2013 ![](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square) ([js-ipfs/pull/3588](https://github.com/ipfs/js-ipfs/pull/3588))\n  - [ipfs-webui](https://github.com/ipfs-shipyard/ipfs-webui) ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square)  (remote pin support since [v2.12.0](https://github.com/ipfs/ipfs-webui/releases/v2.12.0))\n  - [ipfs-desktop](https://github.com/ipfs-shipyard/ipfs-desktop) ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square) (>0.20.x)\n\n### Client libraries\n- [js-pinning-service-http-client](https://github.com/ipfs-shipyard/js-pinning-service-http-client/)  ![](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square)  \n  An IPFS Pinning Service HTTP Client library for JS, used in [compliance test suite](https://github.com/ipfs/pinning-services-api-spec/issues/64).\n- [go-pinning-service-http-client](https://github.com/ipfs/go-pinning-service-http-client)  ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square)  \n  An IPFS Pinning Service HTTP Client library for Go, used by go-ipfs internally in `ipfs pin remote --help` commands.\n- https://openapi-generator.tech/docs/generators#client-generators ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square)  \n  Use [YAML file](./ipfs-pinning-service.yaml) to generate client for your language  \n- [auspinner](https://github.com/2color/auspinner)\n  A stateless CLI tool to pin and serve CAR files to IPFS pinning services using HTTP and Bitswap.\n\n### Server implementations\n- https://github.com/ipfs/ipfs-cluster ![](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square)\n   Pinset orchestration for IPFS  \u2013 [tracking issue](https://github.com/ipfs/ipfs-cluster/issues/1213)\n- https://github.com/ipfs-shipyard/js-mock-ipfs-pinning-service ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square)  \n  Implementation of in-memory service for testing purposes\n- https://github.com/ipfs-shipyard/rb-pinning-service-api ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square)  \n  A Rails app that implements the IPFS Pinning Service API\n- https://openapi-generator.tech/docs/generators#server-generators ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square)  \n  Use [YAML file](./ipfs-pinning-service.yaml) to generate server boilerplate for your language\n\n### CI/CD\n\n- https://github.com/marketplace/actions/ipfs-remote-pinning  \n  IPFS Pinning GitHub Action that adds data to IPFS and pins it to any `ENDPOINT` compatible with Pinning Service API\n\n### Online services\n\n- https://pinata.cloud \u2013 ([documentation](https://pinata.cloud/documentation#PinningServicesAPI))\n  - `ipfs pin remote service add pinata https://api.pinata.cloud/psa YOUR_JWT`\n- https://estuary.tech \u2013 ([documentation](https://docs.estuary.tech/pinning-list))\n  - `ipfs pin remote service add estuary https://api.estuary.tech/pinning/ YOUR_API_KEY`\n- https://web3.storage \u2013 ([documentation](https://docs.web3.storage/how-tos/pinning-services-api))\n  - `ipfs pin remote service add web3-storage https://api.web3.storage/ YOUR_API_KEY`\n- https://nft.storage\n  - `ipfs pin remote service add nft-storage https://nft.storage/api YOUR_API_KEY`\n- https://filebase.com - ([documentation](https://docs.filebase.com/storage-networks/ipfs/ipfs-pinning) + [IPFS Pin Sync](https://docs.filebase.com/ipfs/ipfs-pin-sync))\n  - `ipfs pin remote service add filebase https://api.filebase.io/v1/ipfs SECRET-ACCESS-TOKEN`\n- `{your project could be here}` \u2013 open a PR!\n\n### Timeline\n\n- 2022 Q3\n  - [IPFS Pin Sync](https://docs.filebase.com/ipfs/ipfs-pin-sync) is announced by Filebase\n- 2022 Q1\n  - [web3.storage](https://web3.storage) API support: https://docs.web3.storage/how-tos/pinning-services-api\n  - [estuary.tech](https://estuary.tech) API support: https://docs.estuary.tech/pinning-list\n  - Mock server for local development: https://github.com/ipfs-shipyard/js-mock-ipfs-pinning-service\n  - WIP official API client for JS: https://github.com/ipfs-shipyard/js-pinning-service-http-client/\n  - WIP compliance test suite: https://github.com/ipfs/pinning-services-api-spec/issues/64\n  - WIP ipfs-cluster support ([commit](https://github.com/ipfs/ipfs-cluster/commit/9549e0c86e500a0b15020f6e5d48664d1f3ab37d))\n- 2021 Q1\n  - [go-ipfs 0.8.0](https://github.com/ipfs/go-ipfs/releases/v0.8.0) shipped with built-in client for v1.0.0 of this API\n  - Pinata announces endpoint compatible with this spec: https://pinata.cloud/documentation#PinningServicesAPI\n  - ipfs-webui [v2.12.0](https://github.com/ipfs/ipfs-webui/releases/v2.12.0) provides UI based on `pin remote` commands\n  - Textile is [working on Bucket Pinning API](https://github.com/textileio/textile/discussions/499)\n- 2020 Q3\n  - IPFS GUI WG working on adding support for pinning services into IPFS Desktop/Web UI:\n    - [Epic: Pinning service integration \u00b7 Issue #91 \u00b7 ipfs/ipfs-gui](https://github.com/ipfs/ipfs-gui/issues/91)\n    - [Analysis of remote pinning services vs the needs of IPFS Web UI](https://docs.google.com/document/d/1f0R7woLtW_YTv9P9IOrUNK6QafgctJ7qTggEUdepD_c/)\n  - [ipfs/pinning-services-api-specs](https://github.com/ipfs/pinning-services-api-specs) is created as a place for stakeholders to collaborate and finalize the API\n    - 2020-07-14: Spec in draft status is ready for implementation\n    - 2020-08: Addressing feedback from early implementers\n    - 2020-09: End-to-end testing\n- 2020 Q2\n  - Pinning Summit 2020 ([website](https://ipfspinningsummit.com/), [recorded talks](https://www.youtube.com/watch?v=rYD2lfuatJM&list=PLuhRWgmPaHtTvsxuZ9T-tMlu_v0lja6v5))\n- 2019 Q2 \n  - Creation of a generic pinning service API proposed in [ipfs/notes/issues/378](https://github.com/ipfs/notes/issues/378)\n\n## Contribute\n\nSuggestions, contributions, and criticisms are welcome! However, please make sure to familiarize yourself deeply with IPFS, the models it adopts, and the principles it follows.\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### Spec lifecycle\n\nWe use the following label system to identify the state of aspects of this spec:\n\n- ![](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square) \u2014 A work-in-progress, possibly to describe an idea before actually committing to a full draft of the spec\n- ![](https://img.shields.io/badge/status-draft-yellow.svg?style=flat-square) \u2014 A draft that is ready to review, and should be implementable\n- ![](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square) \u2014 A spec that has been adopted (implemented) and can be used as a reference to learn how the system works\n- ![](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square) \u2014 We consider this spec to close to final; it might be improved, but the system it specifies should not fundamentally change\n- ![](https://img.shields.io/badge/status-permanent-blue.svg?style=flat-square) \u2014 This spec will not change\n- ![](https://img.shields.io/badge/status-deprecated-red.svg?style=flat-square) \u2014 This spec is no longer in use\n", "release_dates": ["2021-02-19T23:55:56Z", "2020-10-27T19:47:54Z", "2020-09-23T15:56:38Z", "2020-09-18T12:02:18Z", "2020-08-14T17:43:09Z", "2020-07-30T17:38:17Z", "2020-07-30T12:12:23Z"]}, {"name": "protons", "description": "Protocol Buffers for Node.js and the browser without eval", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# protons <!-- omit in toc -->\n\n[![ipfs.tech](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.tech)\n[![Discuss](https://img.shields.io/discourse/https/discuss.ipfs.tech/posts.svg?style=flat-square)](https://discuss.ipfs.tech)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/protons.svg?style=flat-square)](https://codecov.io/gh/ipfs/protons)\n[![CI](https://img.shields.io/github/actions/workflow/status/ipfs/protons/js-test-and-release.yml?branch=main\\&style=flat-square)](https://github.com/ipfs/protons/actions/workflows/js-test-and-release.yml?query=branch%3Amain)\n\n> Protobuf to ts transpiler\n\n`protons` is a high performance implementation of [Protocol Buffers v3](https://protobuf.dev/programming-guides/proto3/).\n\n# Packages\n\n- [`/packages/protons`](./packages/protons) The transpiler\n- [`/packages/protons-benchmark`](./packages/protons-benchmark) A benchmark suite\n- [`/packages/protons-runtime`](./packages/protons-runtime) Shared components that turn values to bytes and back again\n\n# API Docs\n\n- <https://ipfs.github.io/protons>\n\n# License\n\nLicensed under either of\n\n- Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / <http://www.apache.org/licenses/LICENSE-2.0>)\n- MIT ([LICENSE-MIT](LICENSE-MIT) / <http://opensource.org/licenses/MIT>)\n\n# Contribute\n\nContributions welcome! Please check out [the issues](https://github.com/ipfs/protons/issues).\n\nAlso see our [contributing document](https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md) for more information on how we work, and about contributing in general.\n\nPlease be aware that all interactions related to this repo are subject to the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n", "release_dates": ["2024-02-02T08:01:11Z", "2024-02-02T08:01:24Z", "2024-01-31T11:28:08Z", "2024-01-31T11:28:25Z", "2024-01-08T16:31:28Z", "2024-01-08T16:31:13Z", "2023-12-30T08:37:31Z", "2023-12-30T07:26:42Z", "2023-12-30T08:37:17Z", "2023-11-22T15:52:59Z", "2023-11-01T08:10:54Z", "2023-11-01T08:10:32Z", "2023-10-23T15:01:47Z", "2023-10-23T12:38:40Z", "2023-10-23T12:26:11Z", "2023-10-23T12:38:12Z", "2023-10-13T06:01:29Z", "2023-10-13T13:51:08Z", "2023-10-13T06:01:07Z", "2023-10-12T14:13:39Z", "2023-10-12T14:13:22Z", "2023-08-05T10:22:19Z", "2023-08-05T10:21:56Z", "2023-06-30T14:49:20Z", "2023-06-30T14:33:34Z", "2023-06-30T14:33:11Z", "2023-02-08T17:30:55Z", "2023-02-08T17:07:19Z", "2023-02-02T06:41:48Z", "2023-02-02T06:16:34Z"]}, {"name": "public-gateway-checker", "description": "Checks which public gateways are online or not", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# IPFS Public Gateway Checker\n\n**A site displaying public IPFS gateways and their online/offline status.**\n\nView the Public Gateway Checker in action\n\n* on Fleek: https://ipfs-public-gateway-check.on.fleek.co/\n* on GitHub Pages: https://ipfs.github.io/public-gateway-checker/\n\n[![Screenshot of Public Gateway Checker](https://user-images.githubusercontent.com/157609/121263486-f7fb2800-c8b5-11eb-9061-0b6f586a6f25.png)](https://ipfs.github.io/public-gateway-checker/)\n\n## SECURITY NOTES\n\n- The list contains gateways operated by various parties, coordinated by loose mutual consensus, without a central governing authority. Protocol Labs operates and is responsible for only two of the listed gateways: `ipfs.io` and `dweb.link`.\n- Gateways without origin isolation will be marked with \u26a0\ufe0f, indicating they are not safe for use cases that require private local storage of data or credentials. [Learn more](https://github.com/ipfs/public-gateway-checker/issues/150).\n\n## Adding a new public gateway\n\nIf you'd like to add a new public gateway, please edit `./gateways.json`:\n\n1. Add the gateway's address to the **top** of the list\n2. If you care about security of websites loaded via your gateway, make sure it is set up as a [subdomain gateway](https://docs.ipfs.io/how-to/address-ipfs-on-web/#subdomain-gateway). See [config docs](https://github.com/ipfs/go-ipfs/blob/master/docs/config.md#gatewaypublicgateways) and [recipes](https://github.com/ipfs/go-ipfs/blob/master/docs/config.md#gateway-recipes) for go-ipfs, and [learn more here](https://github.com/ipfs/public-gateway-checker/issues/150).\n\nThen, submit a pull request for this change. Be sure to follow all the directions in the pull request template so your PR can be triaged as quickly as possible.\n\n## Testing locally\n\n```bash\nnpm ci\nnpm run build\nnpm start\n```\n", "release_dates": ["2024-02-27T18:33:20Z", "2024-02-23T21:24:30Z", "2024-02-22T19:09:33Z", "2024-02-22T12:05:31Z", "2024-02-09T13:40:17Z", "2024-02-07T12:58:37Z", "2024-01-17T19:05:21Z", "2023-12-21T19:05:32Z", "2023-11-22T23:11:21Z", "2023-11-03T18:04:06Z", "2023-10-27T05:09:16Z", "2023-10-20T15:46:00Z", "2023-09-29T19:58:04Z", "2023-09-29T13:09:16Z", "2023-08-07T15:00:20Z", "2023-07-28T19:00:46Z", "2023-07-28T18:51:58Z", "2023-07-13T19:42:13Z", "2023-07-13T19:24:04Z", "2023-07-13T18:54:44Z", "2023-07-13T17:38:37Z", "2023-07-13T17:26:45Z", "2023-07-13T17:04:27Z", "2023-06-15T16:56:26Z", "2023-06-15T15:34:56Z", "2023-06-14T13:16:36Z", "2023-06-08T22:47:54Z", "2023-06-08T17:22:04Z", "2023-05-26T13:06:28Z", "2023-05-14T21:04:19Z"]}, {"name": "rainbow", "description": "A specialized IPFS HTTP gateway", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://github.com/ipfs/rainbow/assets/157609/fd1bed0f-2055-468e-93e7-0aea158aa953\"><img src=\"https://github.com/ipfs/rainbow/assets/157609/8bf5b727-a360-4906-b965-826823c37aa3\" alt=\"Rainbo logo\" title=\"Rainbow logo\" width=\"200\"></a>\n  <br>\n  Rainbow\n  <br>\n</h1>\n\n<p align=\"center\" style=\"font-size: 1.2rem;\">A to-be-released production-grade IPFS HTTP Gateway written in Go (using <a href=\"https://github.com/ipfs/boxo\">Boxo</a>).</p>\n\n<p align=\"center\">\n  <a href=\"https://ipfs.tech\"><img src=\"https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square\" alt=\"Official Part of IPFS Project\"></a>\n  <a href=\"https://discuss.ipfs.tech\"><img alt=\"Discourse Forum\" src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fdiscuss.ipfs.tech\"></a>\n  <a href=\"https://matrix.to/#/#ipfs-space:ipfs.io\"><img alt=\"Matrix\" src=\"https://img.shields.io/matrix/ipfs-space%3Aipfs.io?server_fqdn=matrix.org\"></a>\n  <a href=\"https://github.com/ipfs/rainbow/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/ipfs/rainbow/go-test.yml?branch=main\" alt=\"ci\"></a>\n  <a href=\"https://codecov.io/gh/ipfs/rainbow\"><img src=\"https://codecov.io/gh/ipfs/rainbow/branch/main/graph/badge.svg?token=9eG7d8fbCB\" alt=\"coverage\"></a>\n  <a href=\"https://github.com/ipfs/rainbow/releases\"><img alt=\"GitHub release\" src=\"https://img.shields.io/github/v/release/ipfs/rainbow?filter=!*rc*\"></a>\n  <a href=\"https://godoc.org/github.com/ipfs/rainbow\"><img src=\"https://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square\" alt=\"godoc reference\"></a>\n</p>\n\n<hr />\n\n## About\n\nRainbow is an implementation of the [IPFS HTTP Gateway API](https://specs.ipfs.tech/http-gateways),\nbased on [boxo](https://github.com/ipfs/boxo) which is the tooling that powers [Kubo](https://github.com/ipfs/kubo) IPFS implementation.\nIt uses the same Go code as the [HTTP gateway](https://specs.ipfs.tech/http-gateways/) in Kubo,\nbut is fully specialized to just be a gateway:\n\n  * Rainbow acts as [Amino DHT](https://blog.ipfs.tech/2023-09-amino-refactoring/)\n    and [Bitswap](https://specs.ipfs.tech/bitswap-protocol/) client only.\n  * Rainbow does not pin, or permanently store any content. It is just meant\n    to act as gateway to content present in the network.\n  * Rainbow settings are optimized for production deployments and streamlined\n    for specific choices (flatfs datastore, writethrough uncached blockstore\n    etc.)\n  * [Denylist](https://specs.ipfs.tech/compact-denylist-format/) and denylist subscription support is included.\n  * And more to come...\n\n\n## Building\n\n```\ngo build\n```\n\n## Running\n\n```\nrainbow\n```\n\nUse `rainbow --help` for documentation.\n\n### Docker\n\nAutomated Docker container releases are available from the [Github container registry](https://github.com/ipfs/rainbow/pkgs/container/rainbow):\n\n- \ud83d\udfe2 Releases\n  - `latest` always points at the latest stable release\n  - `vN.N.N` point at a specific [release tag](https://github.com/ipfs/rainbow/releases)\n- \ud83d\udfe0 Unreleased developer builds\n  - `main-latest` always points at the `HEAD` of the `main` branch\n  - `main-YYYY-DD-MM-GITSHA` points at a specific commit from the `main` branch\n- \u26a0\ufe0f Experimental, unstable builds\n  - `staging-latest` always points at the `HEAD` of the `staging` branch\n  - `staging-YYYY-DD-MM-GITSHA` points at a specific commit from the `staging` branch\n  - This tag is used by developers for internal testing, not intended for end users\n\nWhen using Docker, make sure to pass necessary config via `-e`:\n```console\n$ docker pull ghcr.io/ipfs/rainbow:main-latest\n$ docker run --rm -it --net=host -e RAINBOW_SUBDOMAIN_GATEWAY_DOMAINS=dweb.link ghcr.io/ipfs/rainbow:main-latest\n```\n\nSee [`/docs/environment-variables.md`](./docs/environment-variables.md).\n\n\n## Configuration\n\n### CLI and Environment Variables\n\nRainbow can be configured via command-line arguments or environment variables.\n\nSee `rainbow --help` and [`/docs/environment-variables.md`](./docs/environment-variables.md) for information on the available options.\n\nRainbow uses a `--datadir` (or `RAINBOW_DATADIR` environment variable) as\nlocation for persisted data. It defaults to the folder in which `rainbow` is\nrun.\n\n### Peer Identity\n\n**Using a key file**: By default generates a `libp2p.key` in its data folder if none exist yet. This\nfile stores the libp2p peer identity.\n\n**Using a seed + index**: Alternatively, random can be initialized with a\n32-byte, b58 encoded seed and a derivation index. This allows to use the same\nseed for multiple instances of rainbow, and only change the derivation index.\n\nThe seed and index can be provided as command line arguments or environment\nvars (`--seed` , `--seed-index`). The seed can also be provided as a `seed`\nfile in the datadir folder. A new random seed can be generated with:\n\n    rainbow gen-seed > seed\n\nTo facilitate the use of rainbow with systemd\n[`LoadCredential=`](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#LoadCredential=ID:PATH)\ndirective, we look for both `libp2p.key` and `seed` in\n`$CREDENTIALS_DIRECTORY` first.\n\n### Denylists\n\nRainbow can subscribe to append-only denylists using the `--denylists` flag. The value is a comma-separated list of URLs to subscribe to, for example: `https://denyli.st/badbits.deny`. This will download and update the denylist automatically when it is updated with new entries.\n\nDenylists can be manually placed in the `$RAINBOW_DATADIR/denylists` folder too.\n\nSee [NoPFS](https://github.com/ipfs-shipyard/nopfs) for an explanation of the denylist format. Note that denylists should only be appended to while Rainbow is running. Editing differently, or adding new denylist files, should be done with Rainbow stopped.\n\n## Blockstores\n\nRainbow ships with a number of possible blockstores for the purposes of caching data locally.\nBecause Rainbow, as a gateway-only IPFS implementation, is not designed for long-term data storage there are no long\nterm guarantees of support for any particular backing data storage.\n\nSee [Blockstores](./docs/blockstores.md) for more details.\n\n## Garbage Collection\n\nOver time, the datastore can fill up with previously fetched blocks. To free up this used disk space, garbage collection can be run. Garbage collection needs to be manually triggered. This process can also be automated by using a cron job.\n\nBy default, the API route to trigger GC is `http://$RAINBOW_CTL_LISTEN_ADDRESS/mgr/gc`. The `BytesToFree` parameter must be passed in order to specify the upper limit of how much disk space should be cleared. Setting this parameter to a very high value will GC the entire datastore.\n\nExample cURL commmand to run GC:\n\n    curl -v --data '{\"BytesToFree\": 1099511627776}' http://127.0.0.1:8091/mgr/gc\n\n## Deployment\n\nSuggested method for self-hosting is to run a [prebuilt Docker image](#docker).\n\nAn ansible role to deploy Rainbow is available within the ipfs.ipfs collection in Ansible Galaxy (https://github.com/ipfs-shipyard/ansible). It includes a systemd service unit file.\n\n## Release\n\nTo make a release, create a new PR that updates the [`version.json`](./version.json) file. This PR should not include any other changes besides the version bump. A new release will be automatically made once the PR is merged\n\n## License\n\nDual-licensed under [MIT](https://github.com/filecoin-project/lotus/blob/master/LICENSE-MIT) + [Apache 2.0](https://github.com/filecoin-project/lotus/blob/master/LICENSE-APACHE)\n", "release_dates": []}, {"name": "roadmap", "description": "IPFS Project && Working Group Roadmaps Repo", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IPFS Project Roadmap \n\nAs a community-driven project, IPFS does not have a single roadmap. As of 2023, there are multiple companies and teams building IPFS implementations. \n\nTo encourage both innovation and interoperability, the IPFS community focuses on [**specs and standards**](https://specs.ipfs.tech/) and uses the [IPIP process](https://specs.ipfs.tech/meta/ipip-process/) as a Lightweight Improvement Process for IPFS Specifications.\n\nTo learn more about the directions IPFS see:\n- [**IPFS Implementations**](https://docs.ipfs.tech/concepts/ipfs-implementations/)\n- [**IPFS Specs**](https://specs.ipfs.tech/)\n- [**IPFS Principles**](https://specs.ipfs.tech/architecture/principles/)\n", "release_dates": []}, {"name": "sharness", "description": "Shell library to test your Unix tools like Git does", "language": "Shell", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "# Sharness\n\nSharness is a portable shell library to write, run, and analyze automated tests\nfor Unix programs. Since all tests output TAP, the [Test Anything Protocol],\nthey can be run with any TAP harness.\n\nEach test is written as a shell script, for example:\n\n```sh\n#!/bin/sh\n\ntest_description=\"Show basic features of Sharness\"\n\n. ./sharness.sh\n\ntest_expect_success \"Success is reported like this\" \"\n    echo hello world | grep hello\n\"\n\ntest_expect_success \"Commands are chained this way\" \"\n    test x = 'x' &&\n    test 2 -gt 1 &&\n    echo success\n\"\n\nreturn_42() {\n    echo \"Will return soon\"\n    return 42\n}\n\ntest_expect_success \"You can test for a specific exit code\" \"\n    test_expect_code 42 return_42\n\"\n\ntest_expect_failure \"We expect this to fail\" \"\n    test 1 = 2\n\"\n\ntest_done\n```\n\nRunning the above test script returns the following (TAP) output:\n\n    $ ./simple.t\n    ok 1 - Success is reported like this\n    ok 2 - Commands are chained this way\n    ok 3 - You can test for a specific exit code\n    not ok 4 - We expect this to fail # TODO known breakage\n    # still have 1 known breakage(s)\n    # passed all remaining 3 test(s)\n    1..4\n\nAlternatively, you can run the test through [prove(1)]:\n\n    $ prove simple.t\n    simple.t .. ok\n    All tests successful.\n    Files=1, Tests=4,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)\n    Result: PASS\n\nSharness was derived from the [Git] project - see [README.git] for the original\ndocumentation.\n\n## Installation\n\nFirst, clone the Git repository:\n\n    $ git clone git://github.com/chriscool/sharness.git\n\nThen choose an installation method that works best for you:\n\n### Per-project installation\n\nIf you like to add Sharness to the sources of a project you want to\nuse it for, simply copy the files `sharness.sh`,\n`aggregate-results.sh`, and `test/Makefile` to a folder named `test`\ninside that project, and then set SHARNESS_TEST_SRCDIR to this folder\nsomewhere, export it, and source $SHARNESS_TEST_SRCDIR/sharness.sh in\nyour test files.\n\nSee for example how setting SHARNESS_TEST_SRCDIR is done in\n[test/simple.t](test/simple.t#L5-L7)\nand in the `install` target of the [Makefile](Makefile#L26).\n\nThe requirement to set SHARNESS_TEST_SRCDIR is new in current\nmaster. It used to be possible to only copy files and source\n`sharness.sh`, but https://github.com/chriscool/sharness/pull/90\nchanged that. \n\nAnother way is to use [Sharnessify](https://github.com/chriscool/sharnessify).\n\nAlternatively, you can also add Sharness as a Git submodule to your project.\n\nIn per-project installation, Sharness will optionally load extensions from\n`sharness.d/*.sh` if a `sharness.d` directory is found in the same directory\nas `sharness.sh`. This allows per-project extensions and enhancements to\nbe added to the test library without requiring modification of `sharness.sh`.\n\n### Per-user installation\n\n    $ cd sharness\n    $ make install\n\nThis will install Sharness to `$HOME/share/sharness`, and its documentation and\nexamples to `$HOME/share/doc/sharness`.\n\n### System-wide installation\n\n    $ cd sharness\n    # make install prefix=/usr/local\n\nThis will install Sharness to `/usr/local/share/sharness`, and its documentation\nand examples to `/usr/local/share/doc/sharness`.\n\nOf course, you can change the _prefix_ parameter to install Sharness to any\nother location.\n\n### Installation via Chef\n\nIf you want to install Sharness with Opscode Chef, the [Sharness cookbook] is\nfor you.\n\n## Usage\n\nThe following files are essential to using Sharness:\n\n* `sharness.sh` - core shell library providing test functionality, see separate\n   [API documentation]. Meant to be sourced from test scripts, but not executed.\n* `aggregate-results.sh` - helper script to aggregate test results\n* `test/Makefile` - test driver. The default target runs the complete testsuite.\n\nTo learn how to write and run actual test scripts based on `sharness.sh`, please\nread [README.git] until I come up with more documentation myself.\n\n### Command-line options\n\nThe `*.t` test scripts have the following options (again, read\n[README.git] for details) :\n\n* `--debug`, `-d`: helps debugging\n* `--immediate`, `-i`: stop execution after the first failing test\n* `--long-tests`, `-l`: run tests marked with prereq EXPENSIVE\n* `--interactive-tests`: run tests marked with prereq INTERACTIVE\n* `--help`, `-h`: show test description\n* `--verbose`, `-v`: show additional debug output\n* `--quiet`, `-q`: show less output\n* `--chain-lint`/`--no-chain-lint`: check &&-chains in scripts\n* `--no-color`: don't color the output\n* `--tee`: also write output to a file\n* `--verbose-log`: write output to a file, but not on stdout\n* `--root=<dir>`: create trash directories in `<dir>` instead of current directory.\n\n## Projects using Sharness\n\nSee how Sharness is used in real-world projects:\n\n* [azuki](https://github.com/seveas/azuki/tree/master/test)\n* [cb2util](https://github.com/mlafeldt/cb2util/tree/master/test)\n* [dabba](https://github.com/eroullit/dabba/tree/master/dabba/test)\n* [git-integration](https://github.com/johnkeeping/git-integration/tree/master/t)\n* [git-multimail](https://github.com/git-multimail/git-multimail/tree/master/t)\n* [git-related](https://github.com/felipec/git-related/tree/master/test)\n* [git-spindle](https://github.com/seveas/git-spindle/tree/master/test)\n* [git-svn-fast-import](https://github.com/satori/git-svn-fast-import/tree/master/t)\n* [go-ipfs](https://github.com/ipfs/go-ipfs/tree/master/test/sharness)\n* [go-multihash](https://github.com/jbenet/go-multihash/tree/master/test/sharness)\n* [inotify-tools](https://github.com/inotify-tools/inotify-tools)\n* [ipfs-update](https://github.com/ipfs/ipfs-update/tree/master/sharness)\n* [rdd.py](https://github.com/mlafeldt/rdd.py/tree/master/test/integration)\n* [Sharness itself](/test)\n* [tomdoc.sh](https://github.com/mlafeldt/tomdoc.sh/tree/master/test)\n\nFurthermore, as Sharness was derived from Git, [Git's test suite](https://github.com/git/git/tree/master/t)\nis worth examining as well, especially if you're interested in managing a big\nnumber of tests.\n\n## Alternatives\n\nHere is a list of other shell testing libraries (sorted alphabetically):\n\n* [Bashtub](https://github.com/ueokande/bashtub)\n* [Bats](https://github.com/sstephenson/bats)\n* [Cram](https://bitheap.org/cram)\n* [rnt](https://github.com/roman-neuhauser/rnt)\n* [roundup](https://github.com/bmizerany/roundup)\n* [shove](https://github.com/progrhyme/shove)\n* [shUnit2](https://code.google.com/p/shunit2/)\n* [shspec](https://github.com/shpec/shpec)\n* [testlib.sh](https://gist.github.com/3877539)\n* [ts](https://github.com/thinkerbot/ts)\n\n## License\n\nSharness is licensed under the terms of the GNU General Public License version\n2 or higher. See file [COPYING] for full license text.\n\n## Contributing\n\nContributions are welcome, see file [CONTRIBUTING] for details.\n\n## Authors\n\nSharness was created in April 2011 and maintained until June 2016 by\n[Mathias Lafeldt][twitter]. The library is derived from the\n[Git] project's test-lib.sh. It is currently maintained by\n[Christian Couder][chriscool], thanks to sponsorship from\n[Protocol Labs][protocollabs].\n\nSee [Github's \"contributors\" page][contributors] for a list of\ndevelopers.\n\nA complete list of authors should include Git contributors to\ntest-lib.sh too.\n\n[API documentation]: https://github.com/chriscool/sharness/blob/master/API.md\n[chriscool]: https://github.com/chriscool\n[CONTRIBUTING]: https://github.com/chriscool/sharness/blob/master/CONTRIBUTING.md\n[contributors]: https://github.com/chriscool/sharness/graphs/contributors\n[COPYING]: https://github.com/chriscool/sharness/blob/master/COPYING\n[Git]: http://git-scm.com/\n[protocollabs]: https://protocol.ai/\n[prove(1)]: http://linux.die.net/man/1/prove\n[README.git]: https://github.com/chriscool/sharness/blob/master/README.git\n[Sharness cookbook]: https://github.com/mlafeldt/sharness-cookbook\n[Test Anything Protocol]: http://testanything.org/\n[twitter]: https://twitter.com/mlafeldt\n", "release_dates": []}, {"name": "someguy", "description": "A Delegated Routing V1 server and client for all your routing needs.", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# someguy\n\nA [Delegated Routing V1](https://specs.ipfs.tech/routing/http-routing-v1/) server and proxy for all your routing needs. Ask `someguy` for directions.\n\n## Install\n\n```bash\ngo install github.com/ipfs/someguy@latest\n```\n\n### Docker\n\nAutomated Docker container releases are available from the [Github container registry](https://github.com/ipfs/someguy/pkgs/container/someguy):\n\n- \ud83d\udfe2 Releases\n  - `latest` always points at the latest stable release\n  - `vN.N.N` point at a specific [release tag](https://github.com/ipfs/someguy/releases)\n- \ud83d\udfe0 Unreleased developer builds\n  - `main-latest` always points at the `HEAD` of the `main` branch\n  - `main-YYYY-DD-MM-GITSHA` points at a specific commit from the `main` branch\n- \u26a0\ufe0f Experimental, unstable builds\n  - `staging-latest` always points at the `HEAD` of the `staging` branch\n  - `staging-YYYY-DD-MM-GITSHA` points at a specific commit from the `staging` branch\n  - This tag is used by developers for internal testing, not intended for end users\n\nWhen using Docker, make sure to pass necessary config via `-e`:\n```console\n$ docker pull ghcr.io/ipfs/someguy:main-latest\n$ docker run --rm -it --net=host -e ghcr.io/ipfs/someguy:main-latest\n```\n\nSee [`/docs/environment-variables.md`](./docs/environment-variables.md).\n\n## Build\n\n```bash\ngo build -o someguy\n```\n\n## Usage\n\nYou can use `someguy`  as a client (e.g. IPNI caching proxy) or server.\n\nBy default, `someguy start` runs a Delegated Routing V1 server that proxies requests to the [IPFS Amino DHT](https://blog.ipfs.tech/2023-09-amino-refactoring/) and the [cid.contact](https://cid.contact) indexer (IPNI) node.\n\nIf you don't want to run a server yourself, but want to query some other server, you can run `someguy ask` and choose any of the subcommands and ask for a provider, a peer, or even an IPNS record.\n\nFor more details run `someguy --help`.\n\n## Release\n\nTo make a release, create a new PR that updates the [`version.json`](./version.json) file. This PR should not include any other changes besides the version bump. A new release will be automatically made once the PR is merged.\n", "release_dates": ["2023-11-08T09:31:05Z"]}, {"name": "spec-generator", "description": "Static spec website generator used by https://specs.ipfs.tech", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n# Spec Generator: InterPlanetary Standards Edited and Integrated to Travel Yonder (IPSEITY)\n\nThis is the specification generator for IPFS and other friends in the Interplanetary stack.\nYou can enjoy its output online at [https://specs.ipfs.tech/](https://specs.ipfs.tech/).\n\nIt is essentially a batteries-included, unobtrusive static site generator. What it will do\nis:\n\n- Convert any `unicorn.md` in the input tree to `/unicorn/index.html` in the output tree with:\n  - A table of contents.\n  - A bunch of features for standards metadata (editors, etc.).\n  - Definitions and definitions cross-references support, including to all of the broader\n    [web standards universe](https://github.com/w3c/webref/).\n  - Bibliographical references to other specs (from [SpecRef](https://www.specref.org/)),\n    including linking and bibliography management.\n  - Exported definitions plus biblio entry for the specs you write, so that others can load them.\n  - Odds and ends that are helpful in this kind of context, you can read more in the\n    [spec for specs](https://specs.ipfs.tech/meta/spec-for-specs/).\n- Copy over any static files, including HTML documents.\n- Add a number of useful resources to your ouput: fonts, if needed some scripts, and common\n  logos used in spec headers and the such.\n\nIn watch mode it will auto-update the spec in your browser as you edit it.\n\n## Installation\n\nThe usual:\n\n```sh\nnpm install -g spec-generator\n```\n\nThis will make a `spec-generator` command available. (It is also available under the name\n`ipseity`.)\n\n## Usage\n\nIn order to set up a spec site, you need:\n\n- A `source` directory that will contain your MD spec source and whatever static files you\n  want to copy over.\n- An `output` directory where the generated output will go. These two directories can be\n  absolutely anywhere, they don't have to share a parent. However, **don't** use the same\n  input and output.\n- A `config` file, that is a simple piece of JSON.\n- A `template` file that is a basic piece of HTML.\n\nThat's a fair bit of setup, but you only need to do it once for a whole spec *site*, which\nhopefully shouldn't be too often.\n\n### Configuration\n\nThe `config` file have the following format:\n\n```json\n{\n  \"input\": \"./src/\",\n  \"output\": \"./out/\",\n  \"template\": \"./template.html\",\n  \"baseURL\": \"https://specs.ipfs.tech\",\n  \"github\": {\n    \"repository\": \"ipfs/specs\",\n    \"defaultBranch\": \"main\"\n  }\n}\n```\n\nThe fields are simple:\n\n- `input`: the source directory, relative to the config file.\n- `output`: the published directory, relative to the config file.\n- `template`: the template file, relative to the config file.\n- `baseURL`: the base URL at which the specs are published. This is used to generated the\n  bibliographic entries for the specs in this site.\n- `github`: optional settings to generate commit history and feedback links for\n  each specification. Currently, we only support GitHub. Feel free to open a PR\n  to add support for other services.\n\nAll fields are required except `baseURL`, and `baseURL` is highly recommended.\n\n### Template\n\nThe Markdown spec just generate the body of the spec, but you need some HTML to wrap\naround it from which to specify some metadata, hook up some styles, etc.\n\nAn example template file might look like this:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title></title>\n    <link rel=\"stylesheet\" href=\"/css/ipseity.min.css\">\n    <link rel=\"stylesheet\" href=\"/css/your-spec-style.css\">\n    <link rel=\"icon\" href=\"/img/my-standards-logo.svg\">\n  </head>\n  <body>\n    <nav id=\"ipseity-back-to-root\">\n      <a href=\"/\">Standards Home</a>\n    </nav>\n    <ipseity-header></ipseity-header>\n${body}\n  </body>\n</html>\n```\n\nThe `${body}` gets replaced by the Markdown output. Optionally the `ipseity-header` element\ncan be used to mark the injection point for the spec metadata if you don't intend it to be\nthe first thing in the body.\n\nApart from these conventions you can have whatever you want in there.\n\n### CSS\n\nIf your template includes `/css/ipseity.min.css`, that will load styles for the spec body.\nYou can roll your own, of course, but this will have you covered. This doesn't include styling\nthe wrapper your way.\n\n### Command Line\n\nThere are two ways of running the command. The first is in regular batch mode:\n\n```sh\nipseity -c /path/to/config.json\n```\n\nThe `-c` option is always required. This will run once, generate the specs, and exit.\n\nOr you can run in watch mode. This is most useful while you're editing a spec:\n\n```sh\nipseity -c /path/to/config.json -w\n```\n\nThis will start up a local server and watch your files in the `input` directory. It will hot\nreload specs you have open in a browser.\n", "release_dates": []}, {"name": "specs", "description": "Technical specifications for the IPFS protocol stack", "language": "HTML", "license": null, "readme": "# IPFS Specifications\n\n> This repository contains the specs for the IPFS Protocol and associated subsystems.\n\n- [Documentation and Community](#documentation-and-community)\n- [Understanding badges](#understanding-the-meaning-of-the-spec-badges-and-their-lifecycle)\n- [Index](#index)\n- [Contribute](#contribute)\n  - [InterPlanetary Improvement Process (IPIP)](#interplanetary-improvement-process-ipip)\n\n## Documentation and Community\n\nLooking for user support?\n\nSee [Documentation](https://docs.ipfs.io),\n[Discussion Forums](https://discuss.ipfs.io/), and other\n[Community Resources](https://docs.ipfs.io/community/) instead.\n\n## Understanding the meaning of the spec badges and their lifecycle\n\nWe use the following label system to identify the state of each spec:\n\n- ![wip](https://img.shields.io/badge/status-wip-orange.svg?style=flat-square) - A work-in-progress, possibly to describe an idea before actually committing to a full draft of the spec.\n- ![draft](https://img.shields.io/badge/status-draft-yellow.svg?style=flat-square) - A draft that is ready to review. It should be implementable.\n- ![reliable](https://img.shields.io/badge/status-reliable-green.svg?style=flat-square) - A spec that has been adopted (implemented) and can be used as a reference point to learn how the system works.\n- ![stable](https://img.shields.io/badge/status-stable-brightgreen.svg?style=flat-square) - We consider this spec to close to final, it might be improved but the system it specifies should not change fundamentally.\n- ![permanent](https://img.shields.io/badge/status-permanent-blue.svg?style=flat-square) - This spec will not change.\n- ![deprecated](https://img.shields.io/badge/status-deprecated-red.svg?style=flat-square) - This spec is no longer in use.\n\nNothing in this spec repository is `permanent` or even `stable` yet. Most of the subsystems are still a `draft` or in `reliable` state.\n\n## Index\n\nThe specs contained in this and related repositories are:\n\n- **IPFS Protocol:**\n  - [IPFS Guide](https://docs.ipfs.tech/) - to start your IPFS journey\n  - [Protocol Architecture Overview](./ARCHITECTURE.md) - the top-level spec and the stack\n- **User Interface (aka Public APIs):**\n  - [HTTP Gateways](https://specs.ipfs.tech/http-gateways/) - implementation agnostic interfaces for accessing content-addressed data over HTTP\n  - [Routing V1](https://specs.ipfs.tech/routing/http-routing-v1/) - implementation agnostic interfaces for content/peer/IPNS routing over HTTP\n  - IPFS implementations may provide additional HTTP interfaces, for example:\n    - [Kubo RPC at /api/v0](https://docs.ipfs.tech/reference/kubo/rpc/)\n- **Data Formats:**\n  - [IPLD](https://ipld.io/specs/) - InterPlanetary Linked Data.\n    - [DAG-CBOR](https://ipld.io/docs/codecs/known/dag-cbor/) -  binary format, supporting the complete IPLD Data Model, with excellent performance, and suitable for any job.\n    - [DAG-JSON](https://ipld.io/docs/codecs/known/dag-json/) - human-readable format, supporting almost the complete IPLD Data Model, and very convenient for interoperability, development, and debugging.\n    - [DAG-PB](https://ipld.io/docs/codecs/known/dag-pb/) - a binary format for specific limited structures of data, which is highly used in IPFS and [UnixFS](./UNIXFS.md).\n    - [CAR](https://ipld.io/specs/transport/car/) - transport format used to store content addressable objects in the form of IPLD block data as a sequence of bytes; typically as an [application/vnd.ipld.car](https://www.iana.org/assignments/media-types/application/vnd.ipld.car) file with a `.car` extension\n  - Self Describing Formats ([multiformats](http://github.com/multiformats/multiformats)):\n    - [multihash](https://github.com/multiformats/multihash) - self-describing hash digest format.\n    - [multiaddr](https://github.com/multiformats/multiaddr) - self-describing addressing format.\n    - [multicodec](https://github.com/multiformats/multicodec) - self-describing protocol/encoding streams (note: a file is a stream).\n    - [multistream](https://github.com/multiformats/multistream) - multistream is a format -- or simple protocol -- for disambiguating, and layering streams. It is extremely simple.\n- **Files and Directories:**\n  - [UnixFS](./UNIXFS.md)\n  - Related userland concepts (external docs):\n    - [MFS, Mutable File System, or the Files API](https://docs.ipfs.tech/concepts/file-systems/#mutable-file-system-mfs)\n- **Storage Layer:**\n  - [Pinning Service API](https://ipfs.github.io/pinning-services-api-spec/)\n  - [Repo](./REPO.md) - IPFS node local repository spec\n    - [FileSystem Repo](./REPO_FS.md) - IPFS node local repository spec\n- **Block Exchanges:**\n  - [Bitswap](./BITSWAP.md) - BitTorrent-inspired exchange\n- **Key Management:**\n  - [KeyStore](./KEYSTORE.md) - Key management on IPFS\n  - [KeyChain](./KEYCHAIN.md) - Distribution of cryptographic Artifacts\n- **Networking layer:**\n  - [libp2p](https://github.com/libp2p/specs) - libp2p is a modular and extensible network stack, built and use by IPFS, but that it can be reused as a standalone project. Covers:\n- **Records, Naming and Record Systems:**\n  - [IPNS](https://specs.ipfs.tech/ipns/) - InterPlanetary Naming System\n    - [IPNS Record Creation and Verification](https://specs.ipfs.tech/ipns/ipns-pubsub-router/)\n    - [IPNS over PubSub](https://specs.ipfs.tech/ipns/ipns-pubsub-router/)\n  - [DNSLink](https://dnslink.dev) - mapping DNS names to IPFS content paths\n  - [DNSAddr](https://github.com/multiformats/multiaddr/blob/master/protocols/DNSADDR.md) - mapping DNS names to libp2p multiaddrs\n- **Other/related/included:**\n  - [PDD](https://github.com/ipfs/pdd) - Protocol Driven Development\n\n## Contribute\n\n[![contribute](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\nSuggestions, contributions, criticisms are welcome. Though please make sure to familiarize yourself deeply with IPFS, the models it adopts, and the principles it follows.\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n### InterPlanetary Improvement Process (IPIP)\n\n- Want to propose a change to an existing specification?\n- Or add a new protocol?\n\nSee:\n- [IPIP: Improvement Process for IPFS Specifications](https://specs.ipfs.tech/meta/ipip-process/)\n  - List of [ratified IPIPs](https://specs.ipfs.tech/ipips/)\n  - List of [open IPIPs](https://github.com/ipfs/specs/pulls?q=is%3Apr+is%3Aopen+ipip+sort%3Aupdated-desc)\n", "release_dates": []}, {"name": "stargate", "description": null, "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# StarGate\n\n> A Robust Verifiable HTTP Protocol For Content Addressed Data\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Setup](#setup)\n- [Usage](#usage)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Overview\n\nStarGate is a specification to extend the IPFS gateway to support trustless, multipeer data transfer of fairly complex queries. \n\nThis repo is a prototype design and implementation of StarGate, containing a simple executable that implements a Stargate server and client (client still in development as of 1/18/2023).\n\nFor more information on how Stargate works and its core design goals see the StarGate talk from the Move The Bytes Working Group: https://www.youtube.com/watch?v=qbKZmmMZePs and the [StarGate protocol specification](https://www.notion.so/pl-strflt/StarGate-be818445cfe44898b2e895d89301d463)\n\n## Setup\n\nTo install Stargate, run:\n\n```\n> go install github.com/ipfs/stargate/cmd/stargate@latest\n```\n\nThen, setup your repo with:\n\n```\n> stargate init\n```\n\n*Note*: You don't really have to run stargate init for the time being cause the other commands will initialize everything if it's not done.\n\n## Usage\n\n### Import data\n\nImport the current directory, recursively:\n\n```\n> stargate --vv import .\nSending CID bafybeidwarsw46q7wx5jrojwzgg4smvmgvgj23chzmybidten3l7wjnrva through the Stargate!\n```\n\nImport a file:\n```\n> stargate --vv import ~/Downloads/testvideo.mp4 \nSending CID bafybeigkkzgkd6z33jaczjhrmjb5m3jwqyn7zbbfvmy2ekfm6dievp5kdy through the Stargate!\n```\n\n### Run the Stargate Server\n\n```\n> stargate --vv server\n```\n\n(the server can start any time and you can import while the server is running)\n\n### Fetch (with CURL for now)\n\nFetch the root directory:\n```\n> curl -v http://localhost:7777/ipfs/bafybeidwarsw46q7wx5jrojwzgg4smvmgvgj23chzmybidten3l7wjnrva > root.car\n```\n\nPathing:\n```\n> curl -v http://localhost:7777/ipfs/bafybeidwarsw46q7wx5jrojwzgg4smvmgvgj23chzmybidten3l7wjnrva/go.mod > go.mod.car\n\n> curl -v http://localhost:7777/ipfs/bafybeidwarsw46q7wx5jrojwzgg4smvmgvgj23chzmybidten3l7wjnrva/pky/types.go > types.go.car\n```\n\nFetch a file:\n```\n> curl -v http://localhost:7777/ipfs/bafybeigkkzgkd6z33jaczjhrmjb5m3jwqyn7zbbfvmy2ekfm6dievp5kdy > testvideo.mp4.car\n```\n\nFetch a file, but don't send leaf blocks (useful for multipeer):\n\n```\n> curl -v http://localhost:7777/ipfs/bafybeigkkzgkd6z33jaczjhrmjb5m3jwqyn7zbbfvmy2ekfm6dievp5kdy?noleaves  > testvideo.mp4.dag.car\n```\n\nFetch a range (of the flat file, not the car):\n\n```\n> curl -v http://localhost:7777/ipfs/bafybeigkkzgkd6z33jaczjhrmjb5m3jwqyn7zbbfvmy2ekfm6dievp5kdy?bytes=0-1000000  > testvideo.mp4.start.car\n```\n\n## Documentation\n\nSee [Go Doc](https://pkg.go.dev/github.com/ipfs/stargate)\n\n## Roadmap\n\nA list of things to do:\n\n- Complete Fetch Command\n- Add Tracing and Metrics\n- MOAR documentation\n- Measure Performance\n- Optimizations\n- Filecoin Chain Resolver\n\nBut sadly, little time for original author to complete them\n\n## Contribute\n\nEarly days PRs are welcome!\n\n## License\n\nThis library is dual-licensed under Apache 2.0 and MIT terms.\n\nCopyright 2022. Protocol Labs, Inc.", "release_dates": []}, {"name": "start-ipfs-daemon-action", "description": null, "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Start IPFS Daemon Action\n\nThe action starts IPFS daemon and waits for it to become ready.\n\n## Inputs\n\n| Name | Description | Default |\n| --- | --- | --- |\n| args | Arguments that should be passed to the ipfs daemon command | --init --init-profile server |\n| wait-for-addrs | Whether waits for addresses to be assigned to the daemon | true |\n\n## Example\n\n```\n- uses: ipfs/download-ipfs-distribution-action@v1\n- uses: ipfs/start-ipfs-daemon-action@v1\n```\n\n```\n- uses: actions/setup-go@v4\n  with:\n    go-version: 'stable'\n- run: go install github.com/ipfs/go-ipfs/cmd/ipfs@latest\n  shell: bash\n- uses: ipfs/start-ipfs-daemon-action@v1\n```\n", "release_dates": ["2021-12-16T09:45:29Z", "2021-12-14T13:21:35Z"]}, {"name": "steering-wg", "description": "IPFS Steering WG", "language": null, "license": null, "readme": "# steering-wg\nIPFS Steering WG\n", "release_dates": []}, {"name": "tar-utils", "description": "[deprecated] https://github.com/ipfs/libkubo/pull/1", "language": "Go", "license": null, "readme": "# tar-utils\r\n\r\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\r\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\r\n[![standard-readme compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\r\n[![GoDoc](https://godoc.org/github.com/ipfs/tar-utils?status.svg)](https://godoc.org/github.com/ipfs/tar-utils)\r\n\r\n> tar-utils contains utilities for working with tar files generated by go-ipfs to transport UnixFS data\r\n\r\nThis package originated at https://github.com/whyrusleeping/tar-utils\r\n\r\n## Lead Maintainer\r\n\r\n[Adin Schmahmann](https://github.com/aschmahmann)\r\n\r\n## Table of Contents\r\n\r\n- [Install](#install)\r\n- [Usage](#usage)\r\n- [Contribute](#contribute)\r\n- [License](#license)\r\n\r\n## Install\r\n\r\n`tar-utils` works like a regular Go module:\r\n\r\n```\r\n> go get github.com/ipfs/tar-utils\r\n```\r\n\r\n## Usage\r\n\r\n```\r\nimport \"github.com/ipfs/tar-utils\"\r\n```\r\n\r\nCheck the [GoDoc documentation](https://pkg.go.dev/github.com/ipfs/tar-utils)\r\n\r\n## Contribute\r\n\r\nPRs accepted.\r\n\r\nSmall note: If editing the README, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\r\n\r\n## License\r\n\r\nMIT \u00a9 Protocol Labs, Inc.\r\n", "release_dates": ["2021-11-18T18:16:18Z", "2021-06-22T19:57:36Z"]}, {"name": "team-mgmt", "description": "IPFS Team Planning, Management & Coordination threads", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "---\n\u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f  \nMuch of this repo is not accurate to the current state of affairs in 202207.\nUpdates are needed to account for how [IPFS development spans multiple implementations and organizations](https://docs.ipfs.io/basics/ipfs-implementations/).\nFor now, see the [official IPFS community docs](https://docs.ipfs.io/community/) for ways to engage with teams developing IPFS.  \n\u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f\n\n---\n\n# IPFS Team Planning, Management & Coordination threads\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n\n## Repo Index\n\n- [Related Projects](#related-projects)\n- [How We Work Together](#how-we-work-together)\n- [Teams, Roles & Structures](TEAMS_ROLES_STRUCTURES.md)\n- [Asynchronous Communitication](#asynchronous-communication)\n  - [Project & Working Groups Roadmaps](#project--working-groups-roadmaps)\n  - [OKR (Objectives & Key Results)](#okrs)\n  - [Tracking Repo Activity](#tracking-repo-activity)\n- [Synchronous Communication](#synchronous-communication)\n  - [Monthly Community Meetup](#monthly-community-meetup)\n  - [Calendar](#calendar)\n  - [Chat](#chat)\n  - [Working Hours](#working-hours)\n  - [Timezone: UTC](#timezone-utc)\n- [Tools & Tutorials](#tools--tutorials)\n  - [Lead Maintainer Protocol](LEAD_MAINTAINER_PROTOCOL.md)\n  - [Host a Call](HOST_A_CALL.md)\n  - [Coordination Toolkit](TEAM_COORDINATION_TOOLKIT.md)\n  - [How to create a Roadmap](ROADMAP_HOW_TO.md)\n  - [Resources for Distributed Teams](DISTRIBUTED_TEAMS.md)\n  - [Zoom](#zoom)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Related Projects\n\nIPFS is built on several related projects that each have their own planning:\n\n- [IPLD](https://github.com/ipld/team-mgmt)\n- [libp2p](https://github.com/libp2p/team-mgmt)\n\n## How We Work Together\n\nWe deliberately designed an organizational process that is very flexible, enabling each team to design a coordination strategy that suits their project needs, while keeping a baseline for team-wide coordination around project-wide planning.\n\nYou might hear terms such as \"Working Group Roadmap\", \"Project Roadmap\", \"OKRs\", \"Metrics\" used often. If you are puzzled about how these all fit together and what is the best resource to look at, we've created the following diagram to illustrate how all of these fit together for the IPFS org.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/ipfs/team-mgmt/master/img/ipfs-org-planning-one-picture.jpeg\" alt=\"IPFS planning in one picture\" width=\"450\" />\n</p>\n\n**If you are new around here, the best way to get onboarded is to focus on the \"Day to Day Operations\" as it will help you meet the Working Groups, understand what their top priorities are, and quickly identify where you can contribute**. Later, you can go through all the Quarterly OKRs and Yearly Planning so that you understand fully the decisions you see being made.\n\nYou can also learn more about operating in Distributed Teams at our ['Distributed Teams' Document](DISTRIBUTED_TEAMS.md), containing resources on tools, decision making, process and more. We have been gathering, reviewing, discussing and experimenting with many overtime and will continue to do so as we find new needs.\n\n## Teams\n\nMeet the current Working and Research Groups at the [TEAMS_ROLES_STRUCTURES](TEAMS_ROLES_STRUCTURES.md) document.\n\n## Asynchronous Communication\n\nAs an organization that operates at a planetary scale with multiple people from different timezones and schedules, we value tremendously the benefits of Asynchronous Communication. The art of writing things down for our future selves or future contributors is one of the key reasons that enables [so many contributors](https://github.com/ipfs/contributors-hex-grid#big-grid) to participate in the large endeavour of Distributing the Web with the IPFS Project.\n\nSome golden recommendations:\n- Prefer opening an issue vs. sending a DM\n- If you find documentation missing, treat it as a bug - once you get your answer, contribute it so that it benefits others\n- Use synchronous time wisely (only if needed), and convert any output into an artifact that can be used by others (avoid Tribal Knowledge)\n\n### Planning\n\nThe IPFS Project & Working Group Roadmaps serve as the north star for our quarterly planning process and long term achievement of our mission goals. You can find these roadmaps at https://github.com/ipfs/roadmap.\n\nThe IPFS workgroups plan and measure impact on a quarterly basis using OKRs - [learn more here](OKR).\n\n## Synchronous Communication\n\nSynchronous Communication is phenomenal to transfer memes rapidly, clarify any outstanding questions, deep dive into hard topics together, get to know each other better and develop trust. The main pain point with Synchronous Communication is that if you were not present, you might miss out on important information that is relevant to you and your project. To overcome this limitation, **a core competency of the IPFS Org as a whole is to be stellar at taking notes and creating artifacts that represent any decision/announcement made during those synchronous conversations**. The corollary being: if it ain't written down and broadcasted, it didn't happen.\n\nYou can find the schedule for meetings of each of the IPFS Working Groups, Special Interest Groups, and Related Projects in the [TEAMS_ROLES_STRUCTURES](TEAMS_ROLES_STRUCTURES.md) document, as well as in the community calendar below.\n\n### Monthly Community Meetup\n\nWe host a monthly community meetup for builders across the IPFS ecosystem to present on notable improvements and updates. It's a great way for casual followers to get a high-level update on the pulse of the IPFS projects without having to follow all of the sprint calls. You can sign up to share a lightning talk or demo in the meetup invite ([example](https://www.meetup.com/San-Francisco-IPFS/events/271042788/)). Newcomers are very welcome.\n\nYou can find recordings of past meetups on [Youtube](https://www.youtube.com/channel/UCdjsUXJ3QawK4O5L1kqqsew/):\n[![image](https://user-images.githubusercontent.com/618519/90301692-46869400-de56-11ea-9a2a-e0debb214f75.png)](https://www.youtube.com/playlist?list=PLuhRWgmPaHtToVYaDkd6ZTwB2Lo30s1vB)\n\n\n### Calendar\n\nYou can view all IPFS-related calls and events on the [IPFS Community Calendar](https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84@group.calendar.google.com&ctz=UTC).\n\n<iframe src=\"https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84%40group.calendar.google.com&ctz=America%2FDenver\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n### Chat\n\nWe hangout on IRC for lots of Dev Chat. You can find us on Freenode on the following channels:\n\n- #ipfs\n- #ipfs-dev\n- #ipfs-cluster\n- #ipfs-gui\n- #ipfs-in-web-browsers\n- #ipfs-project\n- #ipfs-infrastructure\n- #ipfs-package-managers\n- #ipfs-pinbot\n- #gx\n- #libp2p\n- #ipld\n\nYou can also access these channels through the [Matrix IRC Bridge](https://riot.im/app/#/group/+ipfs:matrix.org)\n\n### Working Hours\n\nAs the IPFS team is all over the world, we've picked a set of \"working hours\" during which we can overlap. The hours are:\n\n```\n16:00-19:00 Z/UTC daily or\n18:00-21:00 CEST daily or\n12:00-15:00 EST daily or\n09:00-12:00 PDT daily\n```\n\nWe aim to be available during these hours. Your mileage may vary.\n\n## Timezone: `UTC`\n\nAll of our times are set according to the **UTC** timezone (or should be). This is much easier than adjusting times manually to accommodate different time zones, for a distributed team. If our calendar's location is set to Reykjav\u00edk, Iceland, it is because Iceland is always on UTC time. It is recommended that you know your timezone's difference from UTC for ease of scheduling. Sites like http://everytimezone.com can help with this.\n\n## Tools & Tutorials\n\nTools living in their own documents:\n- [Lead Maintainer Protocol](LEAD_MAINTAINER_PROTOCOL.md)\n- [Host a Call](HOST_A_CALL.md)\n- [Coordination Toolkit](TEAM_COORDINATION_TOOLKIT.md)\n- [How to create a Roadmap](ROADMAP_HOW_TO.md)\n- [Resources for Distributed Teams](DISTRIBUTED_TEAMS.md)\n\n### Zoom\n\nWe use [Zoom](http://zoom.us/) for our community calls. This allows us to stream directly to YouTube, and to have calls with more than 25 users. Zoom may require a download before you are able to join. If you click on a Zoom link to a meeting room, it will automatically suggest the software to download. Please let us know if you have any issues with Zoom.\n\n**Note:** Screen Sharing in Zoom under X11 requires compositor. Users of minimalist tiling window managers (i3, awesome, dwm)  will share a \"black screen\" by default. The fix is to use third-party compositor, eg. [Compton](https://github.com/chjj/compton).\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/pm/issues)!\n\nThis repository and all of our calls fall under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)\n\n## License\n\n[CC-BY-SA](LICENSE)\n", "release_dates": []}, {"name": "test-plans", "description": "Testground test plans for IPFS", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "\u2757 Testground test plans for go-ipfs are no longer maintained.\n\n# Testground test plans for go-ipfs\n\n[![Made by Protocol Labs](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n![Go version](https://img.shields.io/badge/go-%3E%3D1.14.0-blue.svg?style=flat-square)\n\nThis repository contains Testground test plans for go-ipfs components.\n\n## License\n\nDual-licensed: [MIT](./LICENSE-MIT), [Apache Software License v2](./LICENSE-APACHE), by way of the\n[Permissive License Stack](https://protocol.ai/blog/announcing-the-permissive-license-stack/).\n", "release_dates": []}, {"name": "uci", "description": "Automatically distribute GitHub Actions workflow across repositories.", "language": "Shell", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Unified CI: Streamlining GitHub Workflows Across Repositories\n\n![web3-bot](./web3-bot.png)\n\nWelcome to Unified CI, your key to deploying and managing GitHub Actions workflows across an extensive network of repositories. Unified CI takes the helm in orchestrating both the initial deployment and ongoing updates of workflows, providing a seamless solution to streamline your projects' lifecycle.\n\nWith Unified CI at your side, Protocol Labs can effortlessly oversee GitHub Actions workflows throughout numerous organizations and hundreds of repositories. This automated system guarantees:\n\n1. **Consistency**: Through the utilization of identical GitHub Actions workflow definitions across participating repositories, Unified CI assures that code maintains the highest standard and undergoes thorough testing.\n2. **Maintainability**: Workflow definitions are constantly refreshed under Unified CI's management. Any changes in the definitions are instantly relayed to all participating repositories, guaranteeing up-to-date operations.\n\n## Availability and Future Directions\n\nUnified CI is currently available for both Go and JavaScript (JS), providing a wide array of automated services for each:\n\n- **Go**: Unified CI's Go support includes testing with the current and previous versions of Go, and performing tests on Windows, macOS, and Linux. It ensures comprehensive testing, including on 32-bit infrastructure, and for race conditions. Besides testing, it also handles linting and formatting for Go code, providing a well-rounded CI solution. Moreover, the release process is also automated via GitHub Releases.\n\n- **JavaScript**: For JavaScript, Unified CI ensures testing across various platforms: Windows, Linux, and macOS. It also conducts tests in multiple environments, including Node, Chrome, Firefox, Webkit, WebWorkers, and Electron. Similar to Go, it also automates the release process, ensuring a streamlined workflow.\n\nWe understand the growing needs of different programming languages in the development community, and we're excited to share that we have plans to extend Unified CI support to Rust and Python. This will allow us to provide our robust CI solution to an even broader range of developers. Stay tuned for future updates on this expansion!\n\n## Fine-tuning Your Unified CI Experience\n\nMost repositories won't need any customization, and the workflows defined here will just work fine.\n\n### Configuration Variables\n\nSome aspects of Unified CI workflows are configurable through [configuration variables](https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository).\n\nYou can customise the runner type for `go-test` through `UCI_GO_TEST_RUNNER_UBUNTU`, `UCI_GO_TEST_RUNNER_WINDOWS` and `UCI_GO_TEST_RUNNER_MACOS` configuration variables. This option will be useful for repositories wanting to use more powerful, [PL self-hosted GitHub Actions runners](https://github.com/pl-strflt/tf-aws-gh-runner). Make sure the value of the variable is valid JSON.\n\n`UCI_*_RUNNER_*` variables expect the values to be JSON formatted. For example, if you want the `MacOS` runner used in `Go Test` workflow to be `macos-12` specifically, you'd set `UCI_GO_TEST_RUNNER_MACOS` to `\"macos-12\"` (notice the `\"` around the string); and if you want your `Ubuntu` runner to be a self hosted machine with labels `this`, `is`, `my`, `self-hosted`, `runner`, you'd set `UCI_GO_TEST_RUNNER_UBUNTU` to `[\"this\", \"is\", \"my\", \"self-hosted\", \"runner\"]`.\n\n### Setup Actions\n\nSome repositories may require some pre-setup steps to be run before tests (or code checks) can be run. Setup steps for `go-test` are defined in `.github/actions/go-test-setup/action.yml`, and setup steps for `go-check` are defined in `.github/actions/go-check-setup/action.yml`, in the following format:\n\n```yml\nruns:\n  using: \"composite\"\n  steps:\n    - name: Step 1\n      shell: bash\n      run: echo \"do some initial setup\"\n    - name: Step 2\n      shell: bash\n      run: echo \"do some Linux-specific setup\"\n      if: ${{ matrix.os == 'ubuntu' }}\n```\n\nThese setup steps are run after the repository has been checked out and after Go has been installed, but before any tests or checks are run.\nIf you need to access the GitHub Token in a setup action, you can do so through `github.token` variable in the [`github` context](https://docs.github.com/en/actions/learn-github-actions/contexts#github-context). Unfortunately, the actions do not have access to the [`secrets` context](https://docs.github.com/en/actions/learn-github-actions/contexts#secrets-context).\n\n### Configuration Files\n\n#### Global Configuration Files\n\nYou can configure Unified CI for your repository by creating a `.github/uci.yml` configuration file.\n\nHere is an example configuration file:\n```yml\nfiles: # Configure what Unified CI templates should be used for your repository; defaults to primary language default fileset\n  - .github/workflows/go-check.yml\n  - .github/workflows/go-test.yml\n  - .github/workflows/release.yml\nforce: true # Configure whether Unified CI should overwrite existing workflows; defaults to false\nversions:\n  uci: v1 # Configure what version of Unified CI reusables should be used; defaults to latest\n  go: 1.21 # Configure what version of Go should be used; defaults to oldstable\n```\n\n#### Job Specific Configuration Files\n\n`go-check` contains an optional step that checks that running `go generate` doesn't change any files.\nThis is useful to make sure that the generated code stays in sync.\n\nThis check will be run in repositories that set `gogenerate` to `true` in `.github/workflows/go-check-config.json`:\n```json\n{\n  \"gogenerate\": true\n}\n```\n\nNote that depending on the code generators used, it might be necessary to [install those first](#additional-setup-steps).\nThe generators must also be deterministic, to prevent CI from getting different results each time.\n\n`go-test` offers an option to completely disable running 32-bit tests.\nThis option is useful when a project or its upstream dependencies are not 32-bit compatible.\nTypically, such tests can be disabled using [build constraints](https://pkg.go.dev/cmd/go#hdr-Build_constraints).\nHowever, the constraints must be set per go file, which can be cumbersome for a project with many files.\nUsing this option, 32-bit tests can be skipped entirely without having to specify build constraints per file.\n\nTo completely disable running 32-bit and/or race detection tests set `skip32bit`/`skipRace` to `true` in `.github/workflows/go-test-config.json`:\n```json\n{\n  \"skip32bit\": true,\n  \"skipRace\": true\n}\n```\n\nIf your project cannot be built on one of the supported operating systems, you can disable it by setting `skipOSes` to a list of operating systems in `.github/workflows/go-test-config.json`:\n```json\n{\n  \"skipOSes\": [\"windows\", \"macos\"]\n}\n```\n\nIf you want to disable verbose logging or test shuffling, you can do so by setting `verbose` or `shuffle` to `false` in `.github/workflows/go-test-config.json`:\n```json\n{\n  \"verbose\": false,\n  \"shuffle\": false\n}\n```\n\n### Workflow Modification\n\nYou can modify the workflows distributed by Unified CI as you wish. Unified CI will only ever try to update the versions of reusables after the initial distribution. Similarly to how dependabot operates.\n\nIn particular, you might want to update the organization part of the reusable's path to your organization in case your organization doesn't allow using reusables from outside organization or you intend to run reusables on self-hosted runners. If you fork the Unified CI repository and give write access to your fork to @web3-bot, your fork is going to be kept up to date automatically. This ensures the validity of all future, automatic Unified CI updates.\n\n## Usage\n\nUnified CI is distributed to all repositories @web3-bot has write access to.\n\nIf you want your project to participle, give [@web3-bot](https://github.com/web3-bot) write access to your repository. If the invitation needs acceptance, please create an issue or reach out to us at [#ipdx](https://filecoinproject.slack.com/archives/C03KLC57LKB).\n\n## Structure\n\nUnified CI consists of [templates](./templates/) which are [rendered](./scripts/render-template.sh) using the combination of [default configuration](./.github/workflows/copy-templates.yml) and [repository specific configuration](#global-configuration-files) and distributed to [participating repositories](#usage) on [schedule](./.github/workflows/copy-templates.yml) by [Copy](./.github/workflows/copy-templates.yml) workflow. Distributed changes are proposed as Pull Requests by [Create](./.github/workflows/create-prs.yml) workflow and automatically merged by [Merge](./.github/workflows/merge-prs.yml) workflow when allowed.\n\nAll workflow [templates](./templates/) distributed by Unified CI reference [reusables](./.github/workflows/) which live in Unified CI repository. By default, [Copy](./.github/workflows/copy-templates.yml) workflow proposes updates **ONLY** to the versions of [reusables](./.github/workflows/) - the same way [dependabot](https://github.com/dependabot/dependabot) operates. This ensures users are free to modify the workflows after distribution as they wish.\n\nUnified CI repository can be forked to accomodate repositories that don't allow usage of reusables from outside the organization or intend to run reusables on self-hosted runners. The forks to which @web3-bot has write access are kept up to date automatically by [Sync](./.github/workflows/sync-forks.yml) workflow. This ensures the validity of all future, automatic Unified CI updates.\n\n## Templates\n\n<details><summary>release.yml, release-check.yml, tagpush.yml, version.json</summary>\n\n### Versioning\n\nGo versioning uses [Semantic Versioning 2.0.0](https://semver.org/).\n\nOn a high level, this means that given a version number MAJOR.MINOR.PATCH, one is supposed to increment the:\n\n* MAJOR version when you make incompatible API changes,\n* MINOR version when you add functionality in a backwards compatible manner, and\n* PATCH version when you make backwards compatible bug fixes.\n\nFor `v0` versions, incompatible API changes only require a MINOR version bump.\n\nThe Go tooling uses version numbers to infer which upgrades are safe (in the sense that they don't result in breaking the build). For example `go get -u=patch` updates dependencies to the most recent patch release. Our downstream users also expect that their compilation won't break when they update to a patch release.\n\nSpecial care has to be taken when cutting a new release after updating dependencies. Even though a dependency update might not change the API of a package and might therefore _look_ as if it was backwards-compatible change, this is not true if the update of that package is more than a patch release update (i.e., it is a minor or a major release): Go's Minimum Version Selection will force all downstream users to use the new version _of the dependency_, which in turn might lead to breakages in downstream code. Updating a dependency (other than patch releases) therefore MUST result in a bump of the minor version number.\n\nIt has turned out that manually assigning version numbers is easy to mess up. To make matters worse, GitHub doesn't give us the option to apply our code review process to releases: A new Go release is created everytime a tag starting with `v` is pushed. Once pushed, the release is picked up by the Google module proxy in a very short time frame, which means that in practice, it's not possible to delete an errorneous pushed tag.\n\nInstead of manually tagging versions, we use GitHub Actions workflows to aid us picking the right version number.\n\n#### Using the Versioning Workflows\n\nEvery Go repository contains a `version.json` file in the root directory:\n```json\n{\n  \"version\": \"v0.4.2\"\n}\n```\n\nThis version file defines the currently released version.\n\nWhen cutting a new release, open a Pull Request that bumps the version number and have it review by your team mates.\nThe [release check workflow](.github/workflows/release-check.yml) will create a draft GitHub Release (_if the workflow was not initiated by a PR from a fork_) and post a link to it along with other useful information (the output of `gorelease`, `gocompat` and a diff of the `go.mod` files(s)).\n\nAs soon as the PR is merged into the default branch, the [releaser workflow](.github/workflows/releaser.yml) is run. This workflow either publishes the draft GitHub Release created by the release check workflow or creates a published GitHub Release if it doesn't exist yet. This, in turn, will create a new Git tag and push it to the repository.\n\n##### Modifying GitHub Release\n\nAll modification you make to the draft GitHub Release created by the release check workflow will be preserved. You can change its' name and body to describe the release in more detail.\n\n##### Using a Release Branch\n\nSometimes it's necessary to cut releases on a release branch. If you open a Pull Request targeting a branch other than the default branch, a new release will only be created if the PR has the `release` label.\n\n##### Dealing with Manual Pushes\n\nUnfortunately, GitHub doesn't allow us to disable / restrict pushing of Git tags (see this long-standing [Feature Request](https://github.community/t/feature-request-protected-tags/1742), and consider upvoting it ;)). We can however run a [workflow](.github/workflows/tagpush.yml) when a version tag is pushed.\n\nThis workflow will open a new issue in the repository, asking the pusher to\n1. double-check that the pushed tag complies with the Semantic Versioning rules described above\n2. manually update `version.json` for consistency\n\n</details>\n", "release_dates": ["2023-08-23T09:08:27Z", "2023-08-22T21:20:37Z", "2023-08-15T12:11:59Z"]}, {"name": "working-groups", "description": null, "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "IPFS Working Groups\n=======================\n\n> Get connected with one of the many working groups that advance IPFS.\n\nWorking Groups are regular meetings of people who are collectively working in specific arenas to advance IPFS.\n- Anyone is welcome to join a Working Group and participate so long as they adhere to the [IPFS Community Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md). Just show up and jump in anywhere your interests lead.\n- Despite the IPFS ecosystem team's best efforts to maintain this listing, consider it downstream of any working group's own processes and defer to the most recent notes documents in case of conflicting information.\n\n## Find a Working Group\n\n- IPFS Implementers \n  - [Implementations](https://docs.ipfs.tech/concepts/ipfs-implementations/), [spec](https://github.com/ipfs/specs) maintenance, IPFS improvement proposals ([IPIPs](https://github.com/ipfs/specs/blob/main/IPIP/0001-lightweight-improvement-proposal-process.md)) current and future, protocol bugs, implementer feedback, user feedback on specific implementations\n  - { [biweekly meetings](https://lu.ma/ipfs-implementers) | [notes](https://pl-strflt.notion.site/IPFS-Implementers-Working-Group-f102a74802b34529a759ffbc3ea20303) | convened by @biglep }\n- Content Routing \n  - current topics: HTTP delegated routing, Hydra shutdown impacts, design pathways, options for double hashing CID's\n  - { [monthly meetings](https://lu.ma/ipfs-routing-wg) | [recordings](https://youtube.com/playlist?list=PLuhRWgmPaHtRP5lVouK_eqhC98xaej6Px) | convened by @torfinnolsen }\n- Network Measurements \n  - Network Measurements of decentralized protocols, including but not limited to IPFS, libp2p, etc.\n  - { [periodic office hours](https://lu.ma/ipfs-network-measurements) | convened by @yiannisbot & [ProbeLab](https://github.com/plprobelab) }\n- IPFS dApps\n  - community calls discussing how dapps can use or be entirely hosted on IPFS today and in the future \n  - { [biweekly meetings](https://lu.ma/ipfs-dapps) | [notes](\u200bhttps://github.com/ipfs/dapps-wg/) | [telegram group](https://t.me/ipfsdapps) | convened by @adin, @lidel, et al. }\n- Decentralized Data Compliance\n  - tracking compliance issues across content-addressed data systems generally; federated/distributed content management; [nopfs](https://github.com/ipfs-shipyard/nopfs) feedback and best practices\n  - { meetings on a topical/sporadic basis | convened by @bumblefudge }\n- Communications\n  - collaborate on and oversee IPFS communication channels (email, social media, blog, website, forums, chat) and the content which is disseminated through them\n  - { internal working group; semi-regular community calls | [meeting notes](https://github.com/ipfs/communications/tree/main/meeting-notes) | [wg hub](https://github.com/ipfs/communications/) | convened by @damedoteth }\n- Helia\n  - \u200bHelia is an implementation of IPFS in JavaScript. The Helia WG consists of engineers interested in working on Helia and making it great while also encouraging existing projects and teams to migrate away from js-ipfs.\n  - { [weekly meetings](https://lu.ma/helia-wg) | [notes](https://pl-strflt.notion.site/Helia-Working-Group-WG-70bbeced695249808940bf7a37992f71) | convened by SgtPooki, Daniel N & achingbrain }\n- Ignite\n  - \u200bFireside Chat Style Discussion on progress made on tools built, used and UX ergonomics.\n  - { [monthly meetings](https://lu.ma/ignite) | convened by Nishant Arora & SgtPooki }\n\n## IPFS Adjacent Working Groups\n- `libp2p` Implementers\n  - decentralized network tooling both for and beyond ipfs: community events, roadmap, new features, triage, and performance issues.\n  - { [meetings](https://calendar.google.com/calendar/u/0/embed?src=libp2p.io_0q9682i3te7eanhe9q7ae1c58g@group.calendar.google.com) | [agendas on-list](https://discuss.libp2p.io/search?q=community%20call%20order%3Alatest) | convened by @p-shahi & @dhuseby }\n- `ipld` Community Calls\n  - ipld tooling and best practices, schema coordination, multiformats registry governance and IETF hardening\n  - { meetings on a sporadic/as-needed basis | [notes](https://github.com/ipld/team-mgmt/tree/master/meeting-notes) | convened by @vmx }\n- IPVM\n  - a specification for bringing content-addressed execution to content-addressed data on IPFS. To this end, the IPVM spec aims to be the easiest, fastest, most secure, and open way to run decentralized compute jobs everywhere.\n  - See https://github.com/ipvm-wg for discussions and monthly community calls\n- WNFS\n  - a distributed file system\n  - See https://github.com/wnfs-wg for discussions and monthly community calls\n\n\n## Contributing\n\nContributions are welcome! This repository is part of the IPFS project and therefore governed by our [contributing guidelines](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md).\n\n## License\n\n[SPDX-License-Identifier: Apache-2.0 OR MIT](LICENSE.md)\n", "release_dates": []}]