[{"name": ".github", "description": "Special GitHub repository with fallback issue templates and community health files for other repos.", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "a-mir-formality", "description": "a model of MIR and the Rust type/trait system", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# a-mir-formality\n\nThis repository is an early-stage experimental project that aims to be a complete, authoritative formal model of the [Rust MIR](https://rustc-dev-guide.rust-lang.org/mir/index.html).\nPresuming these experiments bear fruit, the intention is to bring this model into Rust as an RFC\nand develop it as an official part of the language definition.\n\n## Quickstart guide\n\nLike any Rust project:\n\n* Clone\n* `cargo test --all`\n\n## Layers of formality\n\nFormality is structured into several layers. These layers are meant to also map\nfairly closely onto chalk and the eventual Rust trait solver implementation.\nIdeally, one should be able to map back and forth between formality and the code\nwith ease.\n\n* **formality-check**: Defines the top-level routines for checking Rust programs.\n  `check_all_crates` is effectively the `main`, so it's a good place to start reading.\n* **formality-core**: Defines logging macros.\n* **formality-macros**: Defines procedural macros like `#[term]` as well as various derives.\n  These are used to generate the boilerplate code for parsing, pretty printing, folding, etc.\n* **formality-prove**: Defines the rules for proving goals (e.g., is this trait implemented?)\n* **formality-rust:** This is the \"Rust declarations\" layer, defining Rust\n  \"top-level items\" and their semantics. This includes crates, structs, traits,\n  impls, but excludes function bodies.\n* **formality-types:** This is the \"types\" layer, defining Rust types and\n  functions for equating/relating them. The representation is meant to cover\n  all Rust types, but is optimized for extracting their \"essential properties\".\n", "release_dates": []}, {"name": "all-hands-2020", "description": "Website for the Rust All Hands 2020", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "annotate-snippets-rs", "description": "Library for snippet annotations", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# annotate-snippets\n\n`annotate-snippets` is a Rust library for annotation of programming code slices.\n\n[![crates.io](https://img.shields.io/crates/v/annotate-snippets.svg)](https://crates.io/crates/annotate-snippets)\n![build status](https://github.com/rust-lang/annotate-snippets-rs/actions/workflows/ci.yml/badge.svg)\n\nThe library helps visualize meta information annotating source code slices.\nIt takes a data structure called `Snippet` on the input and produces a `String`\nwhich may look like this:\n\n```text\nerror[E0308]: mismatched types\n  --> src/format.rs:52:1\n   |\n51 |   ) -> Option<String> {\n   |        -------------- expected `Option<String>` because of return type\n52 | /     for ann in annotations {\n53 | |         match (ann.range.0, ann.range.1) {\n54 | |             (None, None) => continue,\n55 | |             (Some(start), Some(end)) if start > end_index => continue,\n...  |\n71 | |         }\n72 | |     }\n   | |_____^ expected enum `std::option::Option`, found ()\n```\n\n[Documentation][]\n\n[Documentation]: https://docs.rs/annotate-snippets/\n\nUsage\n-----\n\n```rust\nuse annotate_snippets::{Annotation, AnnotationType, Renderer, Slice, Snippet, SourceAnnotation};\n\nfn main() {\n    let snippet = Snippet {\n        title: Some(Annotation {\n            label: Some(\"expected type, found `22`\"),\n            id: None,\n            annotation_type: AnnotationType::Error,\n        }),\n        footer: vec![],\n        slices: vec![Slice {\n            source: r#\"                annotations: vec![SourceAnnotation {\n                label: \"expected struct `annotate_snippets::snippet::Slice`, found reference\"\n                    ,\n                range: <22, 25>,\"#,\n            line_start: 26,\n            origin: Some(\"examples/footer.rs\"),\n            fold: true,\n            annotations: vec![\n                SourceAnnotation {\n                    label: \"\",\n                    annotation_type: AnnotationType::Error,\n                    range: (193, 195),\n                },\n                SourceAnnotation {\n                    label: \"while parsing this struct\",\n                    annotation_type: AnnotationType::Info,\n                    range: (34, 50),\n                },\n            ],\n        }],\n    };\n\n    let renderer = Renderer::plain();\n    println!(\"{}\", renderer.render(snippet));\n}\n```\n\nLocal Development\n-----------------\n\n    cargo build\n    cargo test\n\nWhen submitting a PR please use  [`cargo fmt`][] (nightly).\n\n[`cargo fmt`]: https://github.com/rust-lang/rustfmt\n", "release_dates": ["2023-10-30T12:00:25Z", "2021-09-04T20:01:51Z", "2020-06-28T07:46:30Z", "2020-04-14T23:59:30Z", "2020-03-30T21:14:55Z", "2019-07-23T08:29:34Z", "2019-06-26T18:28:40Z", "2019-01-05T21:50:28Z", "2018-05-22T00:52:01Z"]}, {"name": "api-guidelines", "description": "Rust API guidelines", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust API guidelines\n\nThis is a set of recommendations on how to design and present APIs for\nthe Rust programming language. They are authored largely by the Rust\nlibrary team, based on experiences building the Rust standard library\nand other crates in the Rust ecosystem.\n\n[Read them here](https://rust-lang.github.io/api-guidelines).\n\n## Join the discussion\n\nSee the [Discussions](https://github.com/rust-lang/api-guidelines/discussions)\ntab for proposing new API guidelines, asking questions about how to apply them,\nand for proposing new ones.\n\n## License\n\nThis project is licensed under either of [Apache License, Version\n2.0](LICENSE-APACHE) or [MIT license](LICENSE-MIT), at your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache 2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n", "release_dates": []}, {"name": "areweasyncyet.rs", "description": "Are we async yet?", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Are we async yet\n\n[![Build Status](https://travis-ci.org/rust-lang/areweasyncyet.rs.svg?branch=master)](https://travis-ci.org/rust-lang/areweasyncyet.rs)\n\nareweasyncyet.rs is a website for tracking development progress of\n`async`/`await` syntax of Rust programming language in\nthe language itself as well as its ecosystem.\n\nIt's implemented as a static page generator,\nand deployed to GitHub Pages via Travis.\n\n## Building\n\nTo build the site locally,\nyou would need a GitHub personal access token for\nfetching data from GitHub.\nYou can refer to [this article](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) for how to create such token.\n\nOnce you get the token,\nput it into `.env` file like this:\n```\nGITHUB_TOKEN={your token}\n```\nand then execute `cargo run`.\n\nYou may also want to enable logs by adding\n```\nRUST_LOG=areweasyncyet=debug\n```\nto the `.env` file.\n\nFrom there,\nthe generated HTML will be in the `_site` directory.\nYou can use any web server to check it out in your browser:\n```\ncd _site\npython3 -m http.server\n```\n\n## Development\n\nThe Rust code handles issue data from GitHub.\nContent mainly resides in `data.yml` and `templates` directory.\n\nAfter the first execution,\nfetched data will be stored in `cache.json` file in the current directory\nto avoid repeatedly fetching data when updating `data.yml` and `templates`.\nIf the latest data from GitHub is needed,\nsimply remove the `cache.json` file.\n", "release_dates": ["2020-05-04T12:29:25Z", "2019-11-08T13:22:56Z", "2019-11-07T22:02:22Z", "2019-10-28T09:53:11Z", "2019-10-26T22:24:33Z", "2019-10-17T21:21:49Z", "2019-10-13T00:28:05Z", "2019-09-05T11:37:34Z", "2019-08-21T10:11:19Z", "2019-08-17T10:59:57Z", "2019-08-09T10:54:15Z", "2019-08-03T23:00:23Z", "2019-07-09T12:36:55Z", "2019-06-30T01:08:44Z", "2019-06-21T14:23:39Z", "2019-05-28T22:41:19Z", "2019-05-07T11:56:37Z", "2019-05-04T01:19:36Z", "2019-05-02T10:16:00Z"]}, {"name": "arewewebyet", "description": "Are we web yet? A simple reckoning of Rust's readiness for Web-related things.", "language": "HTML", "license": {"key": "cc-by-4.0", "name": "Creative Commons Attribution 4.0 International", "spdx_id": "CC-BY-4.0", "url": "https://api.github.com/licenses/cc-by-4.0", "node_id": "MDc6TGljZW5zZTI1"}, "readme": "# Are We Web Yet\n\n[This project](https://github.com/bashyHQ/arewewebyet) tries to give the answer to the question, \"is the [Rust](http://rust-lang.org) ecosystem ready for web development yet?\" This document gives an overview on the structure of the data, the technologies used and how you can contribute to the project. If you want to see the output of the project, please go to\n\n**[arewewebyet.org](http://www.arewewebyet.org/)**\n\n## Contributing\n\nAll contributions are welcome to the project. The curators try to review all pull requests as quickly as possible. However, this is a volunteer run project, so please be patient with it. If you are planning on submitting bigger changes to the project, please open a GitHub issue first and talk to the team before submitting to make sure your work will be accepted.\n\nTopics are located in the `content/topics` directory. Every topic contains an array of crates in the `extra` section of it's frontmatter:\n\n```\n+++\n[extra]\n\npackages = [\n  \"actix-web\",\n  \"rocket\"\n]\n+++\n```\n\nTo add or remove crates from a topic, simple add or remove the crate from it's package array. For more detailed documentation, see [the contributing docs](./CONTRIBUTING.md).\n\n## Code of Conduct\n\n![](https://img.shields.io/badge/Code_of_Conduct-Contributor_Covenant-green.svg?style=flat-square)\n\nThis project is managed under an adapted [Contributor Convenant](http://contributor-covenant.org/) Code of Conduct, applicable to everyone involved in the project (including core committers, maintainers and sponsors) in all forms of online and offline communication (public and private) as well as for all affiliated events and meetings.\n\n[Read the full Code of Conduct here](./CODE_OF_CONDUCT.md)\n\n## License\n\n![](https://img.shields.io/github/license/bashyHQ/arewewebyet.svg?style=flat-square)\n\nThe project and all its work is published under the Creative Commons Attribution 4.0 International License. To learn more about the conditions of that License, please refer to the [LICENSE](LICENSE) document in this folder.\n\nThe original work this project is largely inspired by, was done and published by [Chris Morgan](https://github.com/chris-morgan) under the Creative Commons Attribution License (his link suggests, version 3.0).\n", "release_dates": []}, {"name": "ar_archive_writer", "description": "A writer for object file ar archives", "language": "C++", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": []}, {"name": "async-book", "description": "Asynchronous Programming in Rust", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# async-book\nAsynchronous Programming in Rust\n\n## Requirements\nThe async book is built with [`mdbook`], you can install it using cargo.\n\n```\ncargo install mdbook\ncargo install mdbook-linkcheck\n```\n\n[`mdbook`]: https://github.com/rust-lang/mdBook\n\n## Building\nTo create a finished book, run `mdbook build` to generate it under the `book/` directory.\n```\nmdbook build\n```\n\n## Development\nWhile writing it can be handy to see your changes, `mdbook serve` will launch a local web\nserver to serve the book.\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "async-crashdump-debugging-initiative", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# async-crashdump-debugging initiative\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n\n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/async-crashdump-debugging/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * async-crashdump-debugging -> The display name of your group e.g. \"Inline ASM\".\n * {{INITIATIVE_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the async-crashdump-debugging [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter].\n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Proposal issue](https://github.com/rust-lang/lang-team/) |\n|                                       |       | [Charter](./CHARTER.md) |\n|                                       |       | [Tracking issue](https://github.com/rust-lang/rust/) |\n| [Experimental]                        | \ud83e\udd80    | [Evaluation](./evaluation.md) |\n| [Development]                         | \ud83d\udca4    | [Explainer](./explainer.md) |\n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design discussions](./design-discussions/README.md) first.\n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-discussions](./design-discussions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-async-crashdump-debugging.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "async-fundamentals-initiative", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# async fundamentals initiative\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n{{#include ./badges.md}}\n\n## What is this?\n\nThis page tracks the work of the async fundamentals [initiative], part of the wg-async-foundations [vision process]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter].\n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n[vision process]: https://rust-lang.github.io/wg-async-foundations/vision.html\n\n## Current status\n\nThis is an **umbrella initiative** and, as such, it covers a number of subprojects.\n\nSee the [roadmap](./roadmap.md) for a list of individual milestones and their status.\n\n| Subproject                    | Issue    | Progress     | State | Status        |\n|-------------------------------|----------|--------------|-------|----------------|\n| async fn                      | [#50547] | \u25b0\u25b0\u25b0\u25b0\u25b0  | \u2705    | ![stable][]   |\n| [static async fn in trait]      | [#91611] | \u25b0\u25b0\u25b1\u25b1\u25b1  | \ud83e\udd80    | ![accepted rfc][] |\n| [dyn async fn in trait]         | \u2013        | \u25b0\u25b1\u25b1\u25b1\u25b1  | \ud83e\udd80    | ![planning rfc][] |\n| async drop                    | \u2013        | \u25b0\u25b1\u25b1\u25b1\u25b1  | \ud83e\udd80    | ![not started][]     |\n| async closures                | \u2013        | \u25b0\u25b1\u25b1\u25b1\u25b1  | \ud83d\udca4    | ![not started][]     |\n\n[static async fn in trait]: explainer/async_fn_in_traits.md\n[dyn async fn in trait]: explainer/async_fn_in_dyn_trait.md\n\n[#50547]: https://github.com/rust-lang/rust/issues/50547\n[#91611]: https://github.com/rust-lang/rust/issues/91611\n\n<!-- TODO: Fill these in\n[Proposal issue]: (https://github.com/rust-lang/lang-team/)\n[Tracking issue]: https://github.com/rust-lang/rust/\n-->\n\n[Stage]: https://lang-team.rust-lang.org/initiatives/process/stages.html\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/experimental.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 \u2013 phase complete\n* \ud83e\udd80 \u2013 phase in progress\n* \ud83d\udca4 \u2013 phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design discussions](./design-discussions) first.\n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design discussions](./design-discussions) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue][experience-report].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[experience-report]: https://github.com/rust-lang/async-fundamentals-initiative/issues/new?labels=experience-report&template=experience-report.md\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/187312-wg-async-foundations\n<!-- Should there be a dedicated team? -->\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/wg-async-foundations.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "atom-ide-rust", "description": "Rust IDE support for Atom, powered by the Rust Analyzer or Rust Language Server", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# IDE-Rust\n\nRust language support for Atom-IDE, powered by [rust-analyzer](https://github.com/rust-analyzer/rust-analyzer).\n\n## Features\n\n- Auto-completion\n- Diagnostics (errors and warnings from `rustc`)\n- Document outline\n- Go to definition (`ctrl` or `cmd` click)\n- Type information and Documentation on hover (hold `ctrl` or `cmd` for more information)\n- Find references (`ctrl-alt-shift-f` or `cmd-opt-shift-f` also in context menu)\n- Format file with rustfmt (`ctrl-shift-c` or `cmd-shift-c` also in context menu)\n- Format on save (disabled by default, see `atom-ide-ui` settings)\n- Rustup toolchain update checking at startup & every 6 hours thereafter\n- Supports rustup override toolchains\n- Rust language snippets\n\n## Install\n\nInstall from Settings view by searching for `ide-rust`, or with the command line:\n\n```\n$ apm install ide-rust\n```\n\n### Prerequisites\n\n**rust-analyzer** must be installed manually, if possible on the PATH _(otherwise configure this in the package settings)_.\nSee https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary.\n\nNOTE: On Windows, you can install it using [choco](https://chocolatey.org/install): `choco install rust-analyzer`\n\nNo other packages or manual setup is required as these will be handled with user prompts after install.\nHowever, you may wish to install `rustup` with your OS package manager instead of following prompts to install via [rustup.rs](https://rustup.rs).\n\n## Configure rust-analyzer\n\n**rust-analyzer** settings can be stored in a JSON file in the project directory.\n\nIt first looks for `rust-analyzer.json`.\nIf the file does not exists, it then checks `.config/rust-analyzer.json`.\n\nRefer to the rust-analyzer [User Manual](https://rust-analyzer.github.io/manual.html#configuration) for the supported config options.\n\n### Examples\n\n#### enable proc-macro support (from the [User Manual](https://rust-analyzer.github.io/manual.html#configuration))\n\n```json\n{\n    \"cargo\": {\n        \"loadOutDirsFromCheck\": true,\n    },\n    \"procMacro\": {\n        \"enable\": true,\n    }\n}\n```\n\n#### configure rust-fmt\n\n```json\n{\n    \"rustfmt\": {\n        \"extraArgs\": [\"+nightly\"]\n    }\n}\n```\n\n## Commands\n\n- `ide-rust:restart-all-language-servers` Restart all currently active Rls processes\n\n## Debugging IDE-Rust\n\nIf stuff isn't working you can try **enabling logging** to debug:\n\n- Open the atom console _(ctrl-shift-i)_\n- Enter `atom.config.set('core.debugLSP', true)`\n- Reload atom _(ctrl-shift-F5)_\n\nThis will spit out language server message logging into the atom console. Check if requests/responses are being sent or are incorrect.\n\n## RLS\n\nRLS is no longer supported. To use RLS install a previous version of ide-rust, `apm install ide-rust@0.21.2`.\n\n## Screenshots\n\n**Autocomplete**:\n\n![Autocomplete image](https://user-images.githubusercontent.com/16418197/121962919-01114c80-cd2f-11eb-8136-11ba82ebe543.png)\n\n**Datatips**:\n\n![Datatips image](https://user-images.githubusercontent.com/16418197/121962751-c7404600-cd2e-11eb-84dd-eff95743a0d3.png)\n\n**Linter**:\n\n![Linter image](https://user-images.githubusercontent.com/16418197/121962803-d7582580-cd2e-11eb-9742-040b78ca75d2.png)\n\n**Outline**:\n\n![Outline image](https://user-images.githubusercontent.com/16418197/121962765-cd362700-cd2e-11eb-92b2-74516cd734db.png)\n\n## License\n\nMIT License. See the [license](LICENSE) for more details.\n", "release_dates": ["2022-03-18T22:04:30Z", "2021-12-02T06:20:00Z", "2021-12-01T04:33:45Z", "2021-07-21T16:32:50Z", "2021-07-15T12:43:44Z", "2021-06-18T23:05:42Z", "2020-05-17T15:26:59Z", "2020-05-13T00:17:09Z", "2020-05-11T15:41:38Z", "2020-05-11T11:35:01Z", "2019-11-20T20:18:47Z", "2019-10-26T07:46:04Z", "2019-07-03T15:04:58Z", "2019-05-24T14:38:17Z", "2019-05-07T11:25:09Z", "2019-04-11T20:06:29Z", "2019-02-15T15:33:45Z", "2019-01-10T10:28:08Z", "2018-12-28T14:07:10Z", "2018-12-07T11:42:36Z", "2018-11-30T10:14:10Z", "2018-11-28T19:40:30Z", "2018-11-16T18:55:40Z", "2018-10-18T23:10:57Z", "2018-08-29T09:42:35Z", "2018-08-24T11:43:10Z", "2018-08-24T09:22:20Z", "2018-07-02T14:36:53Z", "2018-06-16T09:29:24Z", "2018-06-07T17:07:48Z"]}, {"name": "backtrace-rs", "description": "Backtraces in Rust", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# backtrace-rs\n\n[Documentation](https://docs.rs/backtrace)\n\nA library for acquiring backtraces at runtime for Rust. This library aims to\nenhance the support of the standard library by providing a programmatic\ninterface to work with, but it also supports simply easily printing the current\nbacktrace like libstd's panics.\n\n## Install\n\n```toml\n[dependencies]\nbacktrace = \"0.3\"\n```\n\n## Usage\n\nTo simply capture a backtrace and defer dealing with it until a later time,\nyou can use the top-level `Backtrace` type.\n\n```rust\nuse backtrace::Backtrace;\n\nfn main() {\n    let bt = Backtrace::new();\n\n    // do_some_work();\n\n    println!(\"{:?}\", bt);\n}\n```\n\nIf, however, you'd like more raw access to the actual tracing functionality, you\ncan use the `trace` and `resolve` functions directly.\n\n```rust\nfn main() {\n    backtrace::trace(|frame| {\n        let ip = frame.ip();\n        let symbol_address = frame.symbol_address();\n\n        // Resolve this instruction pointer to a symbol name\n        backtrace::resolve_frame(frame, |symbol| {\n            if let Some(name) = symbol.name() {\n                // ...\n            }\n            if let Some(filename) = symbol.filename() {\n                // ...\n            }\n        });\n\n        true // keep going to the next frame\n    });\n}\n```\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in backtrace-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2023-08-22T19:31:55Z", "2023-06-30T00:25:06Z", "2022-12-14T23:19:03Z"]}, {"name": "blog.rust-lang.org", "description": "Home of the Rust and Inside Rust blogs", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rust blog\n\n[![CI](https://github.com/rust-lang/blog.rust-lang.org/actions/workflows/main.yml/badge.svg)](https://github.com/rust-lang/blog.rust-lang.org/actions/workflows/main.yml)\n\nThis is the blog of the Rust Programming Language.\n\nIt's implemented as a small static site generator, that's deployed to GitHub\nPages via GitHub Actions.\n\n## Building\n\nTo build the site locally:\n\n```console\n$ git clone https://github.com/rust-lang/blog.rust-lang.org\n$ cd blog.rust-lang.org\n$ cargo run\n```\n\nYou could do it in release mode if you'd like, but it's pretty fast in debug.\n\nFrom there, the generated HTML will be in a `site` directory.\nOpen `site/index.html` in your web browser to view the site.\n\n```console\n$ firefox site/index.html\n```\n\nYou can also run a server, if you need to preview your changes on a different machine:\n\n```console\n$ cargo run -p serve\nServing on: http://192.168.123.45:8000\n```\n\n## Contributing\n\nFirst of all, thank you!\n\nLike everything in Rust, the blog is licensed MIT/Apache 2.0. See the two\n`LICENSE-*` files for more details. We're also governed by the Rust\nCode of Conduct, see `CODE_OF_CONDUCT.md` for more.\n\nPlease send pull requests to the master branch. If you're trying to do\nsomething big, please open an issue before working on it, so we can make sure\nthat it's something that will eventually be accepted.\n\nWhen writing a new blog post, keep in mind the file headers:\n```\n---\nlayout: post\ntitle: Title of the blog post\nauthor: Blog post author (or on behalf of which team)\nrelease: true (to be only used for official posts about Rust releases announcements)\n---\n```\n", "release_dates": []}, {"name": "book", "description": "The Rust Programming Language", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# The Rust Programming Language\n\n![Build Status](https://github.com/rust-lang/book/workflows/CI/badge.svg)\n\nThis repository contains the source of \"The Rust Programming Language\" book.\n\n[The book is available in dead-tree form from No Starch Press][nostarch].\n\n[nostarch]: https://nostarch.com/rust-programming-language-2nd-edition\n\nYou can also read the book for free online. Please see the book as shipped with\nthe latest [stable], [beta], or [nightly] Rust releases. Be aware that issues\nin those versions may have been fixed in this repository already, as those\nreleases are updated less frequently.\n\n[stable]: https://doc.rust-lang.org/stable/book/\n[beta]: https://doc.rust-lang.org/beta/book/\n[nightly]: https://doc.rust-lang.org/nightly/book/\n\nSee the [releases] to download just the code of all the code listings that appear in the book.\n\n[releases]: https://github.com/rust-lang/book/releases\n\n## Requirements\n\nBuilding the book requires [mdBook], ideally the same version that\nrust-lang/rust uses in [this file][rust-mdbook]. To get it:\n\n[mdBook]: https://github.com/rust-lang/mdBook\n[rust-mdbook]: https://github.com/rust-lang/rust/blob/master/src/tools/rustbook/Cargo.toml\n\n```bash\n$ cargo install mdbook --version <version_num>\n```\n\n## Building\n\nTo build the book, type:\n\n```bash\n$ mdbook build\n```\n\nThe output will be in the `book` subdirectory. To check it out, open it in\nyour web browser.\n\n_Firefox:_\n```bash\n$ firefox book/index.html                       # Linux\n$ open -a \"Firefox\" book/index.html             # OS X\n$ Start-Process \"firefox.exe\" .\\book\\index.html # Windows (PowerShell)\n$ start firefox.exe .\\book\\index.html           # Windows (Cmd)\n```\n\n_Chrome:_\n```bash\n$ google-chrome book/index.html                 # Linux\n$ open -a \"Google Chrome\" book/index.html       # OS X\n$ Start-Process \"chrome.exe\" .\\book\\index.html  # Windows (PowerShell)\n$ start chrome.exe .\\book\\index.html            # Windows (Cmd)\n```\n\nTo run the tests:\n\n```bash\n$ mdbook test\n```\n\n## Contributing\n\nWe'd love your help! Please see [CONTRIBUTING.md][contrib] to learn about the\nkinds of contributions we're looking for.\n\n[contrib]: https://github.com/rust-lang/book/blob/main/CONTRIBUTING.md\n\nBecause the book is [printed][nostarch], and because we want\nto keep the online version of the book close to the print version when\npossible, it may take longer than you're used to for us to address your issue\nor pull request.\n\nSo far, we've been doing a larger revision to coincide with [Rust\nEditions](https://doc.rust-lang.org/edition-guide/). Between those larger\nrevisions, we will only be correcting errors. If your issue or pull request\nisn't strictly fixing an error, it might sit until the next time that we're\nworking on a large revision: expect on the order of months or years. Thank you\nfor your patience!\n\n### Translations\n\nWe'd love help translating the book! See the [Translations] label to join in\nefforts that are currently in progress. Open a new issue to start working on\na new language! We're waiting on [mdbook support] for multiple languages\nbefore we merge any in, but feel free to start!\n\n[Translations]: https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations\n[mdbook support]: https://github.com/rust-lang/mdBook/issues/5\n\n## Spellchecking\n\nTo scan source files for spelling errors, you can use the `spellcheck.sh`\nscript available in the `ci` directory. It needs a dictionary of valid words,\nwhich is provided in `ci/dictionary.txt`. If the script produces a false\npositive (say, you used word `BTreeMap` which the script considers invalid),\nyou need to add this word to `ci/dictionary.txt` (keep the sorted order for\nconsistency).\n", "release_dates": ["2021-02-18T02:27:54Z", "2019-09-29T01:41:52Z"]}, {"name": "bors", "description": "Rust implementation of bors used for various Rust components (e.g. the compiler).", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Bors\nHome of a (WIP) rewrite of the [`homu`](https://github.com/rust-lang/homu) bors implementation in Rust.\n\n## Architecture\n- An `axum` web server listens on a `/github` endpoint for webhooks related to a GitHub app of the bot.\n- The webhooks are converted to `BorsEvent`s and executed.\n- The bot stores data in a database and performs queries and commands on attached GitHub repositories\nusing the GitHub REST API.\n\n## Development\nDirectory structure:\n- `database/migration`\n  - `SeaORM` migrations that are the source of truth for database schema\n- `database/entity`\n  - Automatically generated `SeaORM` DB entities, which are generated from a (Postgre) database.\n- `src`\n  - Code of the bot\n\n## Database\nYou must have `sea-orm-cli` installed for the following commands to work.\n```console\n$ cargo install sea-orm-cli\n```\n\nYou must also set up a `DATABASE_URL` environment variable. **You can use SQLite for local testing,\nbut when entities are regenerated, it should be done against a Postgre database!**\n```console\n$ export DATABASE_URL=sqlite://bors.db?mode=rwc\n```\n\n### Updating the DB schema\n1) Generate a new migration\n    ```console\n    $ sea-orm-cli migrate -d database/migration/ generate <name>\n    ```\n2) Change the migration manually in `database/migration/src/<new-migration>.rs`.\n3) Apply migrations to a **Postgre** DB. (You can use Docker for that).\n    ```console\n    $ sea-orm-cli migrate -d database/migration/ up\n    ```\n4) Re-generate entities, again against a **Postgre** DB.\n    ```console\n    $ sea-orm-cli generate entity -o database/entity/src --lib\n    ```\n", "release_dates": []}, {"name": "bors-kindergarten", "description": "Experimental repository for testing the behavior of the new bors implementation.", "language": null, "license": null, "readme": "# bors-kindergarten\nExperimental repository for testing the behavior of the new bors implementation.\n", "release_dates": []}, {"name": "calendar", "description": "Calendars for Rust project teams", "language": null, "license": null, "readme": "# Rust Team Calendars\nThis repository defines the calendars for the teams of the Rust project. Each team or working group\ncan define a TOML file listing their events and a iCalendar file will be generated and hosted on\nGitHub Pages for contributors and interested parties to add to their calendar application of choice.\n\n## Why this?\nSome teams had previously used Google Calendar for their team calendar, but this wasn't ideal as\npermissions to update and add to the calendar had to be managed manually by team leads using\na platform that the project otherwise didn't use. In contrast, everyone in the project already\nhas a GitHub account and we already have processes and tooling in place to manage access to GitHub\nrepositories.\n\n## How do I subscribe to these calendars?\nEach of the toml files in this repository generates an `ics` file of the same name at\n`https://rust-lang.github.io/calendar/$name.ics`. Below are links to the `ics` files for all the\ncurrent calendars in this repository:\n\n- [All teams and working groups](https://rust-lang.github.io/calendar/all.ics)\n  - [Leadership Council](https://rust-lang.github.io/calendar/council.ics)\n  - [Compiler Team + Working Groups](https://rust-lang.github.io/calendar/compiler.ics)\n    - [Compiler Team](https://rust-lang.github.io/calendar/compiler.events-only.ics)\n    - [Stable MIR Project Group](https://rust-lang.github.io/calendar/project-stable-mir.ics)\n    - [Rust Analyzer](https://rust-lang.github.io/calendar/rust-analyzer.ics)\n    - [Async Working Group](https://rust-lang.github.io/calendar/wg-async.ics)\n    - [Types Team](https://rust-lang.github.io/calendar/types.ics)\n    - [Debugging Working Group](https://rust-lang.github.io/calendar/wg-debugging.ics)\n    - [Macros Working Group](https://rust-lang.github.io/calendar/wg-macros.ics)\n    - [Performance Working Group](https://rust-lang.github.io/calendar/wg-performance.ics)\n  - [Dev Tools Team](https://rust-lang.github.io/calendar/dev-tools.ics)\n    - [Cargo Team](https://rust-lang.github.io/calendar/cargo.ics)\n      - [Office Hours](https://rust-lang.github.io/calendar/cargo/office-hours.ics)\n      - [Resolver and PubGrub Office Hours](https://rust-lang.github.io/calendar/cargo/resolver-pubgrub-office-hours.ics)\n      - [Team Meeting](https://rust-lang.github.io/calendar/cargo/team-meeting.ics)\n    - [Clippy Team](https://rust-lang.github.io/calendar/clippy.ics)\n    - [Rustdoc Team](https://rust-lang.github.io/calendar/rustdoc.ics)\n    - [Testing DevEx Team](https://rust-lang.github.io/calendar/testing-devex.ics)\n  - [Infrastructure Team](https://rust-lang.github.io/calendar/infra.ics)\n  - [Bootstrap Team](https://rust-lang.github.io/calendar/bootstrap.ics)\n  - [Language Team](https://rust-lang.github.io/calendar/lang.ics)\n    - [Spec Team](https://rust-lang.github.io/calendar/spec.ics)\n  - [Library Team](https://rust-lang.github.io/calendar/libs.ics)\n  - Working Groups\n    - [Embedded Devices Working Group](https://rust-lang.github.io/calendar/wg-embedded.ics)\n    - [Binary Size Working Group](https://rust-lang.github.io/calendar/wg-binary-size.ics)\n  - [Rust Releases](https://rust-lang.github.io/calendar/release.ics)\n\nYou can copy these links and import them into your calendar application of choice.\n\n## How do I add a calendar?\nAdd a new file in the repository with an appropriate name. Add the path to the `meta.includes` list\nof any other calendars where that makes sense. For example, top-level team calendars are included\nby `all.toml`, and working group calendars are included by their team's calendar.\n\nIn the new file, copy the following snippet to get started:\n\n```toml\nname = \"Name your calendar\"\ndescription = \"Describe your calendar\"\n\n[meta]\nincludes = [ ]\n```\n\nAdd any new calendars to the list above in [*How do I subscribe to these calendars?*][subscribe].\n\n## How do I remove a calendar?\nWe shouldn't remove calendars, we can just stop using them - we can rename the files in this\nrepository to have an `archived-` prefix if we want.\n\n## How do I add an event?\nFirst, select a TOML file that is relevant for your event - normally a team or working group's\ncalendar will be appropriate.\n\nNext, add a `events` table with the correct details for your event. You can copy the following\nsnippet to get started:\n\n```toml\n[[events]]\nuid = \"UID - see below!\"\ntitle = \"Name your event\"\ndescription = \"Describe your event\"\nlocation = \"Where does the event take place - Zoom, Zulip?\"\nlast_modified_on = \"2024-01-05T15:46:00.00Z\"\nstart = \"2024-01-11T15:00:00.00Z\"\nend = \"2024-01-11T16:00:00.00Z\"\nstatus = \"confirmed\"\norganizer = { name = \"Who is running the event\", email = \"What is their email (or team's email)\" }\n```\n\nAll dates must be in RFC 3339 format (the same as in the examples above), and must be in UTC (ending\nin `Z`).\n\nEach event have a globally unique identifier (because calendars can be included in other calendars,\nthey must be globally unique for this whole repository). It should never be changed after the\ncalendar has been published. Just use the current UNIX time to basically guarantee that you don't\noverlap with anything or anyone else.\n\nOn Linux, you can get the current UNIX time with  `date +%s%N | cut -b1-13`, and on Windows, with\nPowerShell, `([DateTimeOffset]::UtcNow).ToUnixTimeMilliseconds()`. Alternatively, you can copy the\ncurrent UNIX time from a website like [currentmillis.com](https://currentmillis.com).\n\nSee [*What is the schema for the calendars?*][schema] for a list of options you can set in an event.\n\n## How do I update an event?\nModify whatever details you like - except `uid`, which **should never be changed** - and make sure\nto update `last_modified_on`.\n\nOn Linux, you can get the current time in the right format in UTC with the command\n`TZ=UTC date -u +\"%Y-%m-%dT%H:%M:%S.%2NZ\"`.\n\n## How do I remove an event?\nIf the event isn't recurring, then you don't need to remove it, it'll just stay in the calendar\nin the past. If the event is incorrect, you can always update it, see\n[*How do I update an event?*][update].\n\nIf the event is recurring, add `until` to the recurrence rules to stop the event atthe current date,\npreventing future recurrences. For example, this rule..\n\n```toml\nrecurrence_rules = [ { frequency = \"weekly\" } ]\n```\n\n..would become..\n\n```toml\n# replace `until` with today's date\nrecurrence_rules = [ { frequency = \"weekly\", until = \"2024-01-08T13:50:00.00Z\" } ]\n```\n\n## What is the schema for the calendars?\nYou can see the [`example.toml`][example] from the [`calendar-generation`][calendar_generation]\nrepository for a complete list of all supported configuration options.\n\n[calendar_generation]: https://github.com/rust-lang/calendar-generation/\n[example]: https://github.com/rust-lang/calendar-generation/blob/main/example.toml\n[schema]: https://github.com/rust-lang/calendar/tree/main#what-is-the-schema-for-the-calendars\n[subscribe]: https://github.com/rust-lang/calendar/tree/main#how-do-i-subscribe-to-these-calendars\n[update]: https://github.com/rust-lang/calendar/tree/main#how-do-i-update-an-event\n\n", "release_dates": []}, {"name": "calendar-generation", "description": "Generate iCalendar documents from calendar specifications in TOML. See rust-lang/calendar.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# toml-to-ical\n`toml-to-ical` is a simple command-line utility for generating [iCalendar][ical] documents from\na list of events in TOML format.\n\nIt is intended for use in open source projects which have a public calendar with meetings. Instead\nof using Google Calendar or some other calendar service, just generate the calendar from a list of\nevents in TOML format and generate and host the calendar using something like GitHub Actions/Pages\nin CI.\n\n## Generate calendars with GitHub Actions\nIf you have a repository containing TOML documents defining calendars, then you can create a\nGitHub Actions workflow with the following content to generate calendars available via GitHub Pages:\n\n```yaml\nname: generate calendars\n\non:\n  push:\n    branches: [\"master\", \"main\"]\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  generate:\n    name: generate\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4.1.1\n      - name: Generate calendars\n        uses: rust-lang/calendar-generation@main\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3.0.0\n        with:\n          path: 'result'\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4.0.2\n```\n\nYou can configure the calendar generation action with the following inputs:\n\n- `input_directory`\n  - Directory containing TOML calendar definitions\n  - **default:** `.`\n- `output_directory`\n  - Directory to output iCalendar documents\n  - **default:** `result`\n\n#### Stability\n<sup>\n<code>toml-to-ical</code> has no stability guarantees.\n</sup>\n\n<br>\n\n#### Author and acknowledgements\n<sup>\n<code>toml-to-ical</code> is authored by <a href=\"https://davidtw.co\">David Wood</a> of <i>Huawei\nTechnologies Research & Development (UK) Ltd</i>.\n</sup>\n\n<br>\n\n#### License\n<sup>\nLicensed under either of <a href=\"https://www.apache.org/licenses/LICENSE-2.0\">Apache License,\nVersion 2.0</a> or <a href=\"https://opensource.org/licenses/MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in\nthis crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without\nany additional terms or conditions.\n</sub>\n\n<br>\n\n#### Code of conduct\n<sup>\nWhen contributing or interacting with this project, we ask abide the\n<a href=\"https://www.rust-lang.org/en-US/conduct.html\">Rust Code of Conduct</a> and ask that you do\ntoo.\n</sup>\n\n\n[ical]: https://en.wikipedia.org/wiki/ICalendar\n", "release_dates": []}, {"name": "cargo", "description": "The Rust package manager", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Cargo\n\nCargo downloads your Rust project\u2019s dependencies and compiles your project.\n\n**To start using Cargo**, learn more at [The Cargo Book].\n\n**To start developing Cargo itself**, read the [Cargo Contributor Guide].\n\n[The Cargo Book]: https://doc.rust-lang.org/cargo/\n[Cargo Contributor Guide]: https://rust-lang.github.io/cargo/contrib/\n\n## Code Status\n\n[![CI](https://github.com/rust-lang/cargo/actions/workflows/main.yml/badge.svg?branch=auto-cargo)](https://github.com/rust-lang/cargo/actions/workflows/main.yml)\n\nCode documentation: <https://doc.rust-lang.org/nightly/nightly-rustc/cargo/>\n\n## Installing Cargo\n\nCargo is distributed by default with Rust, so if you've got `rustc` installed\nlocally you probably also have `cargo` installed locally.\n\n## Compiling from Source\n\n### Requirements\n\nCargo requires the following tools and packages to build:\n\n* `cargo` and `rustc`\n* A C compiler [for your platform](https://github.com/rust-lang/cc-rs#compile-time-requirements)\n* `git` (to clone this repository)\n\n**Other requirements:**\n\nThe following are optional based on your platform and needs.\n\n* `pkg-config` \u2014 This is used to help locate system packages, such as `libssl` headers/libraries. This may not be required in all cases, such as using vendored OpenSSL, or on Windows.\n* OpenSSL \u2014 Only needed on Unix-like systems and only if the `vendored-openssl` Cargo feature is not used.\n\n  This requires the development headers, which can be obtained from the `libssl-dev` package on Ubuntu or `openssl-devel` with apk or yum or the `openssl` package from Homebrew on macOS.\n\n  If using the `vendored-openssl` Cargo feature, then a static copy of OpenSSL will be built from source instead of using the system OpenSSL.\n  This may require additional tools such as `perl` and `make`.\n\n  On macOS, common installation directories from Homebrew, MacPorts, or pkgsrc will be checked. Otherwise it will fall back to `pkg-config`.\n\n  On Windows, the system-provided Schannel will be used instead.\n\n  LibreSSL is also supported.\n\n**Optional system libraries:**\n\nThe build will automatically use vendored versions of the following libraries. However, if they are provided by the system and can be found with `pkg-config`, then the system libraries will be used instead:\n\n* [`libcurl`](https://curl.se/libcurl/) \u2014 Used for network transfers.\n* [`libgit2`](https://libgit2.org/) \u2014 Used for fetching git dependencies.\n* [`libssh2`](https://www.libssh2.org/) \u2014 Used for SSH access to git repositories.\n* [`libz`](https://zlib.net/) (aka zlib) \u2014 Used for data compression.\n\nIt is recommended to use the vendored versions as they are the versions that are tested to work with Cargo.\n\n### Compiling\n\nFirst, you'll want to check out this repository\n\n```\ngit clone https://github.com/rust-lang/cargo.git\ncd cargo\n```\n\nWith `cargo` already installed, you can simply run:\n\n```\ncargo build --release\n```\n\n## Adding new subcommands to Cargo\n\nCargo is designed to be extensible with new subcommands without having to modify\nCargo itself. See [the Wiki page][third-party-subcommands] for more details and\na list of known community-developed subcommands.\n\n[third-party-subcommands]: https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands\n\n\n## Releases\n\nCargo releases coincide with Rust releases.\nHigh level release notes are available as part of [Rust's release notes][rel].\nDetailed release notes are available in this repo at [CHANGELOG.md].\n\n[rel]: https://github.com/rust-lang/rust/blob/master/RELEASES.md\n[CHANGELOG.md]: CHANGELOG.md\n\n## Reporting issues\n\nFound a bug? We'd love to know about it!\n\nPlease report all issues on the GitHub [issue tracker][issues].\n\n[issues]: https://github.com/rust-lang/cargo/issues\n\n## Contributing\n\nSee the **[Cargo Contributor Guide]** for a complete introduction\nto contributing to Cargo.\n\n## License\n\nCargo is primarily distributed under the terms of both the MIT license\nand the Apache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n\n### Third party software\n\nThis product includes software developed by the OpenSSL Project\nfor use in the OpenSSL Toolkit (https://www.openssl.org/).\n\nIn binary form, this product includes software that is licensed under the\nterms of the GNU General Public License, version 2, with a linking exception,\nwhich can be obtained from the [upstream repository][1].\n\nSee [LICENSE-THIRD-PARTY](LICENSE-THIRD-PARTY) for details.\n\n[1]: https://github.com/libgit2/libgit2\n\n", "release_dates": []}, {"name": "cargo-bisect-rustc", "description": "Bisects rustc, either nightlies or CI artifacts", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Cargo Bisection\n\n[![CI](https://github.com/rust-lang/cargo-bisect-rustc/actions/workflows/ci.yml/badge.svg)](https://github.com/rust-lang/cargo-bisect-rustc/actions/workflows/ci.yml)\n\nThis tool bisects either Rust nightlies or CI artifacts.\n\n[**Documentation**](https://rust-lang.github.io/cargo-bisect-rustc/)\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the\nwork by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n", "release_dates": ["2024-01-29T04:03:09Z", "2023-08-17T17:42:03Z", "2023-04-01T18:54:21Z", "2022-11-29T13:28:16Z", "2022-07-29T22:02:59Z", "2022-04-20T21:38:29Z", "2022-04-01T23:30:09Z", "2021-10-08T17:46:17Z", "2020-10-22T19:01:28Z", "2020-05-26T22:35:24Z", "2020-05-15T18:38:34Z", "2020-05-13T19:01:49Z"]}, {"name": "cc-rs", "description": "Rust library for build scripts to compile C/C++ code into a Rust library", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# cc-rs\n\nA library for [Cargo build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html)\nto compile a set of C/C++/assembly/CUDA files into a static archive for Cargo\nto link into the crate being built. This crate does not compile code itself;\nit calls out to the default compiler for the platform. This crate will\nautomatically detect situations such as cross compilation and\nvarious environment variables and will build code appropriately.\n\nRefer to the [documentation](https://docs.rs/cc) for detailed usage instructions.\n\n## License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in cc-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2024-02-25T09:36:47Z", "2024-02-24T01:57:45Z", "2024-02-21T00:42:57Z", "2024-02-12T23:41:22Z", "2023-11-12T19:24:08Z", "2023-08-20T18:57:01Z", "2023-08-07T04:16:24Z", "2023-08-02T15:19:38Z", "2023-08-02T00:09:03Z", "2023-01-28T20:08:08Z", "2022-12-15T02:33:22Z", "2022-11-20T22:56:46Z", "2022-11-08T23:39:26Z", "2022-11-08T16:45:26Z", "2022-10-29T14:04:44Z"]}, {"name": "cfg-if", "description": "A if/elif-like macro for Rust #[cfg] statements", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# cfg-if\n\n[Documentation](https://docs.rs/cfg-if)\n\nA macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n\n```toml\n[dependencies]\ncfg-if = \"1.0\"\n```\n\n## Example\n\n```rust\ncfg_if::cfg_if! {\n    if #[cfg(unix)] {\n        fn foo() { /* unix specific functionality */ }\n    } else if #[cfg(target_pointer_width = \"32\")] {\n        fn foo() { /* non-unix, 32-bit functionality */ }\n    } else {\n        fn foo() { /* fallback implementation */ }\n    }\n}\n\nfn main() {\n    foo();\n}\n```\nThe `cfg_if!` block above is expanded to:\n```rust\n#[cfg(unix)]\nfn foo() { /* unix specific functionality */ }\n#[cfg(all(target_pointer_width = \"32\", not(unix)))]\nfn foo() { /* non-unix, 32-bit functionality */ }\n#[cfg(not(any(unix, target_pointer_width = \"32\")))]\nfn foo() { /* fallback implementation */ }        \n```\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `cfg-if` by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "chalk", "description": "An implementation and definition of the Rust trait system using a PROLOG-like logic solver", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "[![Build Status](https://github.com/rust-lang/chalk/workflows/CI/badge.svg)](https://github.com/rust-lang/chalk/actions?workflow=CI)\n[![Chalk Book](https://img.shields.io/badge/book-chalk-blue.svg)](https://rust-lang.github.io/chalk/book/)\n[![Rust Documentation](https://img.shields.io/badge/api-rustdoc-blue.svg)](https://rust-lang.github.io/chalk/chalk/)\n\n# chalk\n\nChalk is a library that implements the Rust trait system, based on [Prolog-ish][Prolog] logic rules.\n\nSee the [Chalk book](https://rust-lang.github.io/chalk/book/) for more information.\n\n## FAQ\n\n**How does chalk relate to rustc?** The plan is to have rustc use the\n`chalk-solve` crate (in this repo) to answer questions about Rust programs, for\nexample, \"Does `Vec<u32>` implement `Debug`?\". Internally, chalk converts\nRust-specific information into logic and uses a logic engine to find the answer\nto the original query. For more details, see\n[this explanation in the chalk book][chalk-lowering-details].\n\n**Where does the name come from?** `chalk` is named after [Chalkidiki], the area where [Aristotle] was\nborn. Since Prolog is a logic programming language, this seemed a\nsuitable reference.\n\n[Prolog]: https://en.wikipedia.org/wiki/Prolog\n[Chalkidiki]: https://en.wikipedia.org/wiki/Chalkidiki\n[Aristotle]: https://en.wikipedia.org/wiki/Aristotle\n[chalk-lowering-details]: https://rust-lang.github.io/chalk/book/#chalk-works-by-converting-rust-goals-into-logical-inference-rules\n\n## Blog posts\n[blog-posts]: #blog-posts\nHere are some blog posts talking about chalk:\n\n- [Lowering Rust Traits to Logic](https://smallcultfollowing.com/babysteps/blog/2017/01/26/lowering-rust-traits-to-logic/)\n    - Explains the basic concepts at play\n- [Unification in Chalk, Part 1](https://smallcultfollowing.com/babysteps/blog/2017/03/25/unification-in-chalk-part-1/)\n    - An introduction to unification\n- [Unification in Chalk, Part 2](https://smallcultfollowing.com/babysteps/blog/2017/04/23/unification-in-chalk-part-2/)\n    - Extending the system for associated types\n- [Negative reasoning in Chalk](https://aturon.github.io/blog/2017/04/24/negative-chalk/)\n    - How to prove that something is not true\n- [Query structure in chalk](https://smallcultfollowing.com/babysteps/blog/2017/05/25/query-structure-in-chalk/)\n    - The basic chalk query structure, with pointers into the chalk implementation\n- [Cyclic queries in chalk](https://smallcultfollowing.com/babysteps/blog/2017/09/12/tabling-handling-cyclic-queries-in-chalk/)\n    - Handling cyclic relations and enabling the implementation of implied bounds and other long-desired features in an elegant way\n\n## REPL\n\nThere is a repl mainly for debugging purposes which can be run by `cargo run`. Some basic examples are in [libstd.chalk](libstd.chalk):\n```bash\n$ cargo run\n?- load libstd.chalk\n?- Vec<Box<i32>>: Clone\nUnique; substitution [], lifetime constraints []\n```\n\n## Contributing\n\nIf you'd like to contribute, consider joining the [Traits Working Group][working-group].\nWe hang out on the [rust-lang zulip][rust-lang-zulip] in the [#wg-traits][wg-traits-stream] stream.\n\nSee [the contributing chapter][contributing] in the chalk book for more info.\n\n[working-group]: https://rust-lang.github.io/compiler-team/working-groups/traits/\n[rust-lang-zulip]:https://rust-lang.zulipchat.com\n[wg-traits-stream]: https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits\n[contributing]: https://rust-lang.github.io/chalk/book/contribution_guide.html\n", "release_dates": ["2020-04-30T04:52:35Z"]}, {"name": "cmake-rs", "description": "Rust build dependency for running cmake", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# cmake\n\n[Documentation](https://docs.rs/cmake)\n\nA build dependency for running the `cmake` build tool to compile a native\nlibrary.\n\n```toml\n# Cargo.toml\n[build-dependencies]\ncmake = \"0.1\"\n```\n\nThe CMake executable is assumed to be `cmake` unless the `CMAKE`\nenvironmental variable is set.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in cmake by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2022-10-29T13:59:04Z"]}, {"name": "community-localization", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Localization Team\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n\n<!--\n Provide a short introduction about your project group. Make sure to include any\n relevant links to information about your group.\n-->\n\nWelcome the repository for the Localization Team! This is the\nrepository we use to organize our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/community-localization\n\n## How Can I Get Involved?\n\n<!--\n List ways that people from outside your group can get involved and potentially\n become members, include what meetings your team has, and how a person could\n start participating and contributing. Make sure to mention the main platform\n your group hosts its discussions. Be sure to also include links to any\n other projects that your group maintains.\n-->\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate, be sure to check out any of our [open issues](https://github.com/rust-lang/community-localization/issues) on this\nrepository.\n\nWe also participate on [Discord][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://discord.gg/6DauHpr\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/community-localization.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "compiler-builtins", "description": "Porting `compiler-rt` intrinsics to Rust", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# `compiler-builtins`\n\n> Porting `compiler-rt` intrinsics to Rust\n\nSee [rust-lang/rust#35437][0].\n\n[0]: https://github.com/rust-lang/rust/issues/35437\n\n## When and how to use this crate?\n\nIf you are working with a target that doesn't have binary releases of std\navailable via rustup (this probably means you are building the core crate\nyourself) and need compiler-rt intrinsics (i.e. you are probably getting linker\nerrors when building an executable: `undefined reference to __aeabi_memcpy`),\nyou can use this crate to get those intrinsics and solve the linker errors. To\ndo that, add this crate somewhere in the dependency graph of the crate you are\nbuilding:\n\n``` toml\n# Cargo.toml\n[dependencies]\ncompiler_builtins = { git = \"https://github.com/rust-lang/compiler-builtins\" }\n```\n\n``` rust\nextern crate compiler_builtins;\n\n// ...\n```\n\nIf you still get an \"undefined reference to $INTRINSIC\" error after that change,\nthat means that we haven't ported `$INTRINSIC` to Rust yet! Please open [an\nissue] with the name of the intrinsic and the LLVM triple (e.g.\nthumbv7m-none-eabi) of the target you are using. That way we can prioritize\nporting that particular intrinsic.\n\nIf you've got a C compiler available for your target then while we implement\nthis intrinsic you can temporarily enable a fallback to the actual compiler-rt\nimplementation as well for unimplemented intrinsics:\n\n```toml\n[dependencies.compiler_builtins]\ngit = \"https://github.com/rust-lang/compiler-builtins\"\nfeatures = [\"c\"]\n```\n\n[an issue]: https://github.com/rust-lang/compiler-builtins/issues\n\n## Contributing\n\n1. Pick one or more intrinsics from the [pending list](#progress).\n2. Fork this repository.\n3. Port the intrinsic(s) and their corresponding [unit tests][1] from their\n   [C implementation][2] to Rust.\n4. Implement a [test generator][3] to compare the behavior of the ported intrinsic(s)\n   with their implementation on the testing host. Note that randomized compiler-builtin tests\n   should be run using `cargo test --features gen-tests`.\n4. Send a Pull Request (PR).\n5. Once the PR passes our extensive [testing infrastructure][4], we'll merge it!\n6. Celebrate :tada:\n\n[1]: https://github.com/rust-lang/llvm-project/tree/9e3de9490ff580cd484fbfa2908292b4838d56e7/compiler-rt/test/builtins/Unit\n[2]: https://github.com/rust-lang/llvm-project/tree/9e3de9490ff580cd484fbfa2908292b4838d56e7/compiler-rt/lib/builtins\n[3]: https://github.com/rust-lang/compiler-builtins/blob/0ba07e49264a54cb5bbd4856fcea083bb3fbec15/build.rs#L180-L265\n[4]: https://github.com/rust-lang/compiler-builtins/actions\n\n### Porting Reminders\n\n1. [Rust][5a] and [C][5b] have slightly different operator precedence. C evaluates comparisons (`== !=`) before bitwise operations (`& | ^`), while Rust evaluates the other way.\n2. C assumes wrapping operations everywhere. Rust panics on overflow when in debug mode. Consider using the [Wrapping][6] type or the explicit [wrapping_*][7] functions where applicable.\n3. Note [C implicit casts][8], especially integer promotion. Rust is much more explicit about casting, so be sure that any cast which affects the output is ported to the Rust implementation.\n4. Rust has [many functions][9] for integer or floating point manipulation in the standard library. Consider using one of these functions rather than porting a new one.\n\n[5a]: https://doc.rust-lang.org/reference/expressions.html#expression-precedence\n[5b]: http://en.cppreference.com/w/c/language/operator_precedence\n[6]: https://doc.rust-lang.org/core/num/struct.Wrapping.html\n[7]: https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_add\n[8]: http://en.cppreference.com/w/cpp/language/implicit_conversion\n[9]: https://doc.rust-lang.org/std/primitive.i32.html\n\n## Progress\n\n- [x] adddf3.c\n- [x] addsf3.c\n- [x] arm/adddf3vfp.S\n- [x] arm/addsf3vfp.S\n- [x] arm/aeabi_dcmp.S\n- [x] arm/aeabi_fcmp.S\n- [x] arm/aeabi_idivmod.S\n- [x] arm/aeabi_ldivmod.S\n- [x] arm/aeabi_memcpy.S\n- [x] arm/aeabi_memmove.S\n- [x] arm/aeabi_memset.S\n- [x] arm/aeabi_uidivmod.S\n- [x] arm/aeabi_uldivmod.S\n- [x] arm/divdf3vfp.S\n- [ ] arm/divmodsi4.S (generic version is done)\n- [x] arm/divsf3vfp.S\n- [ ] arm/divsi3.S (generic version is done)\n- [x] arm/eqdf2vfp.S\n- [x] arm/eqsf2vfp.S\n- [x] arm/extendsfdf2vfp.S\n- [ ] arm/fixdfsivfp.S\n- [ ] arm/fixsfsivfp.S\n- [ ] arm/fixunsdfsivfp.S\n- [ ] arm/fixunssfsivfp.S\n- [ ] arm/floatsidfvfp.S\n- [ ] arm/floatsisfvfp.S\n- [ ] arm/floatunssidfvfp.S\n- [ ] arm/floatunssisfvfp.S\n- [x] arm/gedf2vfp.S\n- [x] arm/gesf2vfp.S\n- [x] arm/gtdf2vfp.S\n- [x] arm/gtsf2vfp.S\n- [x] arm/ledf2vfp.S\n- [x] arm/lesf2vfp.S\n- [x] arm/ltdf2vfp.S\n- [x] arm/ltsf2vfp.S\n- [ ] arm/modsi3.S (generic version is done)\n- [x] arm/muldf3vfp.S\n- [x] arm/mulsf3vfp.S\n- [x] arm/nedf2vfp.S\n- [ ] arm/negdf2vfp.S\n- [ ] arm/negsf2vfp.S\n- [x] arm/nesf2vfp.S\n- [x] arm/softfloat-alias.list\n- [x] arm/subdf3vfp.S\n- [x] arm/subsf3vfp.S\n- [x] arm/truncdfsf2vfp.S\n- [ ] arm/udivmodsi4.S (generic version is done)\n- [ ] arm/udivsi3.S (generic version is done)\n- [ ] arm/umodsi3.S (generic version is done)\n- [ ] arm/unorddf2vfp.S\n- [ ] arm/unordsf2vfp.S\n- [x] ashldi3.c\n- [x] ashrdi3.c\n- [x] comparedf2.c\n- [x] comparesf2.c\n- [x] divdf3.c\n- [x] divdi3.c\n- [x] divmoddi4.c\n- [x] divmodsi4.c\n- [x] divsf3.c\n- [x] divsi3.c\n- [ ] extendhfsf2.c\n- [x] extendsfdf2.c\n- [x] fixdfdi.c\n- [x] fixdfsi.c\n- [x] fixsfdi.c\n- [x] fixsfsi.c\n- [x] fixunsdfdi.c\n- [x] fixunsdfsi.c\n- [x] fixunssfdi.c\n- [x] fixunssfsi.c\n- [x] floatdidf.c\n- [x] floatdisf.c\n- [x] floatsidf.c\n- [x] floatsisf.c\n- [x] floatundidf.c\n- [x] floatundisf.c\n- [x] floatunsidf.c\n- [x] floatunsisf.c\n- [ ] i386/ashldi3.S\n- [ ] i386/ashrdi3.S\n- [x] i386/chkstk.S\n- [x] i386/chkstk2.S\n- [ ] i386/divdi3.S\n- [ ] i386/lshrdi3.S\n- [ ] i386/moddi3.S\n- [ ] i386/muldi3.S\n- [ ] i386/udivdi3.S\n- [ ] i386/umoddi3.S\n- [x] lshrdi3.c\n- [x] moddi3.c\n- [x] modsi3.c\n- [x] muldf3.c\n- [x] muldi3.c\n- [x] mulodi4.c\n- [x] mulosi4.c\n- [x] mulsf3.c\n- [x] powidf2.c\n- [x] powisf2.c\n- [x] subdf3.c\n- [x] subsf3.c\n- [ ] truncdfhf2.c\n- [x] truncdfsf2.c\n- [ ] truncsfhf2.c\n- [x] udivdi3.c\n- [x] udivmoddi4.c\n- [x] udivmodsi4.c\n- [x] udivsi3.c\n- [x] umoddi3.c\n- [x] umodsi3.c\n- [x] x86_64/chkstk.S\n- [x] x86_64/chkstk2.S\n\nThese builtins are needed to support 128-bit integers, which are in the process of being added to Rust.\n\n- [x] ashlti3.c\n- [x] ashrti3.c\n- [x] divti3.c\n- [x] fixdfti.c\n- [x] fixsfti.c\n- [x] fixunsdfti.c\n- [x] fixunssfti.c\n- [x] floattidf.c\n- [x] floattisf.c\n- [x] floatuntidf.c\n- [x] floatuntisf.c\n- [x] lshrti3.c\n- [x] modti3.c\n- [x] muloti4.c\n- [x] multi3.c\n- [x] udivmodti4.c\n- [x] udivti3.c\n- [x] umodti3.c\n\n## Unimplemented functions\n\nThese builtins involve floating-point types (\"`f128`\", \"`f80`\" and complex numbers) that are not supported by Rust.\n\n- ~~addtf3.c~~\n- ~~comparetf2.c~~\n- ~~divdc3.c~~\n- ~~divsc3.c~~\n- ~~divtc3.c~~\n- ~~divtf3.c~~\n- ~~divxc3.c~~\n- ~~extenddftf2.c~~\n- ~~extendsftf2.c~~\n- ~~fixtfdi.c~~\n- ~~fixtfsi.c~~\n- ~~fixtfti.c~~\n- ~~fixunstfdi.c~~\n- ~~fixunstfsi.c~~\n- ~~fixunstfti.c~~\n- ~~fixunsxfdi.c~~\n- ~~fixunsxfsi.c~~\n- ~~fixunsxfti.c~~\n- ~~fixxfdi.c~~\n- ~~fixxfti.c~~\n- ~~floatditf.c~~\n- ~~floatdixf.c~~\n- ~~floatsitf.c~~\n- ~~floattixf.c~~\n- ~~floatunditf.c~~\n- ~~floatundixf.c~~\n- ~~floatunsitf.c~~\n- ~~floatuntixf.c~~\n- ~~i386/floatdixf.S~~\n- ~~i386/floatundixf.S~~\n- ~~muldc3.c~~\n- ~~mulsc3.c~~\n- ~~multc3.c~~\n- ~~multf3.c~~\n- ~~mulxc3.c~~\n- ~~powitf2.c~~\n- ~~powixf2.c~~\n- ~~ppc/divtc3.c~~\n- ~~ppc/fixtfdi.c~~\n- ~~ppc/fixunstfdi.c~~\n- ~~ppc/floatditf.c~~\n- ~~ppc/floatunditf.c~~\n- ~~ppc/gcc_qadd.c~~\n- ~~ppc/gcc_qdiv.c~~\n- ~~ppc/gcc_qmul.c~~\n- ~~ppc/gcc_qsub.c~~\n- ~~ppc/multc3.c~~\n- ~~subtf3.c~~\n- ~~trunctfdf2.c~~\n- ~~trunctfsf2.c~~\n- ~~x86_64/floatdixf.c~~\n- ~~x86_64/floatundixf.S~~\n\nThese builtins are never called by LLVM.\n\n- ~~absvdi2.c~~\n- ~~absvsi2.c~~\n- ~~absvti2.c~~\n- ~~addvdi3.c~~\n- ~~addvsi3.c~~\n- ~~addvti3.c~~\n- ~~arm/aeabi_cdcmp.S~~\n- ~~arm/aeabi_cdcmpeq_check_nan.c~~\n- ~~arm/aeabi_cfcmp.S~~\n- ~~arm/aeabi_cfcmpeq_check_nan.c~~\n- ~~arm/aeabi_div0.c~~\n- ~~arm/aeabi_drsub.c~~\n- ~~arm/aeabi_frsub.c~~\n- ~~arm/aeabi_memcmp.S~~\n- ~~arm/bswapdi2.S~~\n- ~~arm/bswapsi2.S~~\n- ~~arm/clzdi2.S~~\n- ~~arm/clzsi2.S~~\n- ~~arm/comparesf2.S~~\n- ~~arm/restore_vfp_d8_d15_regs.S~~\n- ~~arm/save_vfp_d8_d15_regs.S~~\n- ~~arm/switch16.S~~\n- ~~arm/switch32.S~~\n- ~~arm/switch8.S~~\n- ~~arm/switchu8.S~~\n- ~~clzdi2.c~~\n- ~~clzsi2.c~~\n- ~~clzti2.c~~\n- ~~cmpdi2.c~~\n- ~~cmpti2.c~~\n- ~~ctzdi2.c~~\n- ~~ctzsi2.c~~\n- ~~ctzti2.c~~\n- ~~ffsdi2.c~~ - this is [called by gcc][jemalloc-fail] though!\n- ~~ffsti2.c~~\n- ~~mulvdi3.c~~\n- ~~mulvsi3.c~~\n- ~~mulvti3.c~~\n- ~~negdf2.c~~\n- ~~negdi2.c~~\n- ~~negsf2.c~~\n- ~~negti2.c~~\n- ~~negvdi2.c~~\n- ~~negvsi2.c~~\n- ~~negvti2.c~~\n- ~~paritydi2.c~~\n- ~~paritysi2.c~~\n- ~~parityti2.c~~\n- ~~popcountdi2.c~~\n- ~~popcountsi2.c~~\n- ~~popcountti2.c~~\n- ~~ppc/restFP.S~~\n- ~~ppc/saveFP.S~~\n- ~~subvdi3.c~~\n- ~~subvsi3.c~~\n- ~~subvti3.c~~\n- ~~ucmpdi2.c~~\n- ~~ucmpti2.c~~\n- ~~udivmodti4.c~~\n\n[jemalloc-fail]: https://travis-ci.org/rust-lang/rust/jobs/249772758\n\nRust only exposes atomic types on platforms that support them, and therefore does not need to fall back to software implementations.\n\n- ~~arm/sync_fetch_and_add_4.S~~\n- ~~arm/sync_fetch_and_add_8.S~~\n- ~~arm/sync_fetch_and_and_4.S~~\n- ~~arm/sync_fetch_and_and_8.S~~\n- ~~arm/sync_fetch_and_max_4.S~~\n- ~~arm/sync_fetch_and_max_8.S~~\n- ~~arm/sync_fetch_and_min_4.S~~\n- ~~arm/sync_fetch_and_min_8.S~~\n- ~~arm/sync_fetch_and_nand_4.S~~\n- ~~arm/sync_fetch_and_nand_8.S~~\n- ~~arm/sync_fetch_and_or_4.S~~\n- ~~arm/sync_fetch_and_or_8.S~~\n- ~~arm/sync_fetch_and_sub_4.S~~\n- ~~arm/sync_fetch_and_sub_8.S~~\n- ~~arm/sync_fetch_and_umax_4.S~~\n- ~~arm/sync_fetch_and_umax_8.S~~\n- ~~arm/sync_fetch_and_umin_4.S~~\n- ~~arm/sync_fetch_and_umin_8.S~~\n- ~~arm/sync_fetch_and_xor_4.S~~\n- ~~arm/sync_fetch_and_xor_8.S~~\n- ~~arm/sync_synchronize.S~~\n- ~~atomic.c~~\n- ~~atomic_flag_clear.c~~\n- ~~atomic_flag_clear_explicit.c~~\n- ~~atomic_flag_test_and_set.c~~\n- ~~atomic_flag_test_and_set_explicit.c~~\n- ~~atomic_signal_fence.c~~\n- ~~atomic_thread_fence.c~~\n\nMiscellaneous functionality that is not used by Rust.\n\n- ~~apple_versioning.c~~\n- ~~clear_cache.c~~\n- ~~emutls.c~~\n- ~~enable_execute_stack.c~~\n- ~~eprintf.c~~\n- ~~gcc_personality_v0.c~~\n- ~~trampoline_setup.c~~\n\nFloating-point implementations of builtins that are only called from soft-float code. It would be better to simply use the generic soft-float versions in this case.\n\n- ~~i386/floatdidf.S~~\n- ~~i386/floatdisf.S~~\n- ~~i386/floatundidf.S~~\n- ~~i386/floatundisf.S~~\n- ~~x86_64/floatundidf.S~~\n- ~~x86_64/floatundisf.S~~\n- ~~x86_64/floatdidf.c~~\n- ~~x86_64/floatdisf.c~~\n\n## License\n\nThe compiler-builtins crate is dual licensed under both the University of\nIllinois \"BSD-Like\" license and the MIT license.  As a user of this code you may\nchoose to use it under either license.  As a contributor, you agree to allow\nyour code to be used under both.\n\nFull text of the relevant licenses is in LICENSE.TXT.\n", "release_dates": []}, {"name": "compiler-rt", "description": "No longer used, use https://github.com/rust-lang/llvm-project instead", "language": "C", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Compiler-RT\n================================\n\nThis directory and its subdirectories contain source code for the compiler\nsupport routines.\n\nCompiler-RT is open source software. You may freely distribute it under the\nterms of the license agreement found in LICENSE.txt.\n\n================================\n\nThis is a replacement library for libgcc.  Each function is contained\nin its own file.  Each function has a corresponding unit test under\ntest/Unit.\n\nA rudimentary script to test each file is in the file called\ntest/Unit/test.\n\nHere is the specification for this library:\n\nhttp://gcc.gnu.org/onlinedocs/gccint/Libgcc.html#Libgcc\n\nHere is a synopsis of the contents of this library:\n\ntypedef      int si_int;\ntypedef unsigned su_int;\n\ntypedef          long long di_int;\ntypedef unsigned long long du_int;\n\n// Integral bit manipulation\n\ndi_int __ashldi3(di_int a, si_int b);      // a << b\nti_int __ashlti3(ti_int a, si_int b);      // a << b\n\ndi_int __ashrdi3(di_int a, si_int b);      // a >> b  arithmetic (sign fill)\nti_int __ashrti3(ti_int a, si_int b);      // a >> b  arithmetic (sign fill)\ndi_int __lshrdi3(di_int a, si_int b);      // a >> b  logical    (zero fill)\nti_int __lshrti3(ti_int a, si_int b);      // a >> b  logical    (zero fill)\n\nsi_int __clzsi2(si_int a);  // count leading zeros\nsi_int __clzdi2(di_int a);  // count leading zeros\nsi_int __clzti2(ti_int a);  // count leading zeros\nsi_int __ctzsi2(si_int a);  // count trailing zeros\nsi_int __ctzdi2(di_int a);  // count trailing zeros\nsi_int __ctzti2(ti_int a);  // count trailing zeros\n\nsi_int __ffsdi2(di_int a);  // find least significant 1 bit\nsi_int __ffsti2(ti_int a);  // find least significant 1 bit\n\nsi_int __paritysi2(si_int a);  // bit parity\nsi_int __paritydi2(di_int a);  // bit parity\nsi_int __parityti2(ti_int a);  // bit parity\n\nsi_int __popcountsi2(si_int a);  // bit population\nsi_int __popcountdi2(di_int a);  // bit population\nsi_int __popcountti2(ti_int a);  // bit population\n\nuint32_t __bswapsi2(uint32_t a);   // a byteswapped, arm only\nuint64_t __bswapdi2(uint64_t a);   // a byteswapped, arm only\n\n// Integral arithmetic\n\ndi_int __negdi2    (di_int a);                         // -a\nti_int __negti2    (ti_int a);                         // -a\ndi_int __muldi3    (di_int a, di_int b);               // a * b\nti_int __multi3    (ti_int a, ti_int b);               // a * b\nsi_int __divsi3    (si_int a, si_int b);               // a / b   signed\ndi_int __divdi3    (di_int a, di_int b);               // a / b   signed\nti_int __divti3    (ti_int a, ti_int b);               // a / b   signed\nsu_int __udivsi3   (su_int n, su_int d);               // a / b   unsigned\ndu_int __udivdi3   (du_int a, du_int b);               // a / b   unsigned\ntu_int __udivti3   (tu_int a, tu_int b);               // a / b   unsigned\nsi_int __modsi3    (si_int a, si_int b);               // a % b   signed\ndi_int __moddi3    (di_int a, di_int b);               // a % b   signed\nti_int __modti3    (ti_int a, ti_int b);               // a % b   signed\nsu_int __umodsi3   (su_int a, su_int b);               // a % b   unsigned\ndu_int __umoddi3   (du_int a, du_int b);               // a % b   unsigned\ntu_int __umodti3   (tu_int a, tu_int b);               // a % b   unsigned\ndu_int __udivmoddi4(du_int a, du_int b, du_int* rem);  // a / b, *rem = a % b  unsigned\ntu_int __udivmodti4(tu_int a, tu_int b, tu_int* rem);  // a / b, *rem = a % b  unsigned\nsu_int __udivmodsi4(su_int a, su_int b, su_int* rem);  // a / b, *rem = a % b  unsigned\nsi_int __divmodsi4(si_int a, si_int b, si_int* rem);   // a / b, *rem = a % b  signed\n\n\n\n//  Integral arithmetic with trapping overflow\n\nsi_int __absvsi2(si_int a);           // abs(a)\ndi_int __absvdi2(di_int a);           // abs(a)\nti_int __absvti2(ti_int a);           // abs(a)\n\nsi_int __negvsi2(si_int a);           // -a\ndi_int __negvdi2(di_int a);           // -a\nti_int __negvti2(ti_int a);           // -a\n\nsi_int __addvsi3(si_int a, si_int b);  // a + b\ndi_int __addvdi3(di_int a, di_int b);  // a + b\nti_int __addvti3(ti_int a, ti_int b);  // a + b\n\nsi_int __subvsi3(si_int a, si_int b);  // a - b\ndi_int __subvdi3(di_int a, di_int b);  // a - b\nti_int __subvti3(ti_int a, ti_int b);  // a - b\n\nsi_int __mulvsi3(si_int a, si_int b);  // a * b\ndi_int __mulvdi3(di_int a, di_int b);  // a * b\nti_int __mulvti3(ti_int a, ti_int b);  // a * b\n\n\n// Integral arithmetic which returns if overflow\n\nsi_int __mulosi4(si_int a, si_int b, int* overflow);  // a * b, overflow set to one if result not in signed range\ndi_int __mulodi4(di_int a, di_int b, int* overflow);  // a * b, overflow set to one if result not in signed range\nti_int __muloti4(ti_int a, ti_int b, int* overflow);  // a * b, overflow set to\n one if result not in signed range\n\n\n//  Integral comparison: a  < b -> 0\n//                       a == b -> 1\n//                       a  > b -> 2\n\nsi_int __cmpdi2 (di_int a, di_int b);\nsi_int __cmpti2 (ti_int a, ti_int b);\nsi_int __ucmpdi2(du_int a, du_int b);\nsi_int __ucmpti2(tu_int a, tu_int b);\n\n//  Integral / floating point conversion\n\ndi_int __fixsfdi(      float a);\ndi_int __fixdfdi(     double a);\ndi_int __fixxfdi(long double a);\n\nti_int __fixsfti(      float a);\nti_int __fixdfti(     double a);\nti_int __fixxfti(long double a);\nuint64_t __fixtfdi(long double input);  // ppc only, doesn't match documentation\n\nsu_int __fixunssfsi(      float a);\nsu_int __fixunsdfsi(     double a);\nsu_int __fixunsxfsi(long double a);\n\ndu_int __fixunssfdi(      float a);\ndu_int __fixunsdfdi(     double a);\ndu_int __fixunsxfdi(long double a);\n\ntu_int __fixunssfti(      float a);\ntu_int __fixunsdfti(     double a);\ntu_int __fixunsxfti(long double a);\nuint64_t __fixunstfdi(long double input);  // ppc only\n\nfloat       __floatdisf(di_int a);\ndouble      __floatdidf(di_int a);\nlong double __floatdixf(di_int a);\nlong double __floatditf(int64_t a);        // ppc only\n\nfloat       __floattisf(ti_int a);\ndouble      __floattidf(ti_int a);\nlong double __floattixf(ti_int a);\n\nfloat       __floatundisf(du_int a);\ndouble      __floatundidf(du_int a);\nlong double __floatundixf(du_int a);\nlong double __floatunditf(uint64_t a);     // ppc only\n\nfloat       __floatuntisf(tu_int a);\ndouble      __floatuntidf(tu_int a);\nlong double __floatuntixf(tu_int a);\n\n//  Floating point raised to integer power\n\nfloat       __powisf2(      float a, si_int b);  // a ^ b\ndouble      __powidf2(     double a, si_int b);  // a ^ b\nlong double __powixf2(long double a, si_int b);  // a ^ b\nlong double __powitf2(long double a, si_int b);  // ppc only, a ^ b\n\n//  Complex arithmetic\n\n//  (a + ib) * (c + id)\n\n      float _Complex __mulsc3( float a,  float b,  float c,  float d);\n     double _Complex __muldc3(double a, double b, double c, double d);\nlong double _Complex __mulxc3(long double a, long double b,\n                              long double c, long double d);\nlong double _Complex __multc3(long double a, long double b,\n                              long double c, long double d); // ppc only\n\n//  (a + ib) / (c + id)\n\n      float _Complex __divsc3( float a,  float b,  float c,  float d);\n     double _Complex __divdc3(double a, double b, double c, double d);\nlong double _Complex __divxc3(long double a, long double b,\n                              long double c, long double d);\nlong double _Complex __divtc3(long double a, long double b,\n                              long double c, long double d);  // ppc only\n\n\n//         Runtime support\n\n// __clear_cache() is used to tell process that new instructions have been\n// written to an address range.  Necessary on processors that do not have\n// a unified instuction and data cache.\nvoid __clear_cache(void* start, void* end);\n\n// __enable_execute_stack() is used with nested functions when a trampoline\n// function is written onto the stack and that page range needs to be made\n// executable.\nvoid __enable_execute_stack(void* addr);\n\n// __gcc_personality_v0() is normally only called by the system unwinder.\n// C code (as opposed to C++) normally does not need a personality function\n// because there are no catch clauses or destructors to be run.  But there\n// is a C language extension __attribute__((cleanup(func))) which marks local\n// variables as needing the cleanup function \"func\" to be run when the\n// variable goes out of scope.  That includes when an exception is thrown,\n// so a personality handler is needed.  \n_Unwind_Reason_Code __gcc_personality_v0(int version, _Unwind_Action actions,\n         uint64_t exceptionClass, struct _Unwind_Exception* exceptionObject,\n         _Unwind_Context_t context);\n\n// for use with some implementations of assert() in <assert.h>\nvoid __eprintf(const char* format, const char* assertion_expression,\n\t\t\t\tconst char* line, const char* file);\n\t\t\t\t\n\n\n//   Power PC specific functions\n\n// There is no C interface to the saveFP/restFP functions.  They are helper\n// functions called by the prolog and epilog of functions that need to save\n// a number of non-volatile float point registers.  \nsaveFP\nrestFP\n\n// PowerPC has a standard template for trampoline functions.  This function\n// generates a custom trampoline function with the specific realFunc\n// and localsPtr values.\nvoid __trampoline_setup(uint32_t* trampOnStack, int trampSizeAllocated, \n                                const void* realFunc, void* localsPtr);\n\n// adds two 128-bit double-double precision values ( x + y )\nlong double __gcc_qadd(long double x, long double y);  \n\n// subtracts two 128-bit double-double precision values ( x - y )\nlong double __gcc_qsub(long double x, long double y); \n\n// multiples two 128-bit double-double precision values ( x * y )\nlong double __gcc_qmul(long double x, long double y);  \n\n// divides two 128-bit double-double precision values ( x / y )\nlong double __gcc_qdiv(long double a, long double b);  \n\n\n//    ARM specific functions\n\n// There is no C interface to the switch* functions.  These helper functions\n// are only needed by Thumb1 code for efficient switch table generation.\nswitch16\nswitch32\nswitch8\nswitchu8\n\n// There is no C interface to the *_vfp_d8_d15_regs functions.  There are\n// called in the prolog and epilog of Thumb1 functions.  When the C++ ABI use\n// SJLJ for exceptions, each function with a catch clause or destuctors needs\n// to save and restore all registers in it prolog and epliog.  But there is \n// no way to access vector and high float registers from thumb1 code, so the \n// compiler must add call outs to these helper functions in the prolog and \n// epilog.\nrestore_vfp_d8_d15_regs\nsave_vfp_d8_d15_regs\n\n\n// Note: long ago ARM processors did not have floating point hardware support.\n// Floating point was done in software and floating point parameters were \n// passed in integer registers.  When hardware support was added for floating\n// point, new *vfp functions were added to do the same operations but with \n// floating point parameters in floating point registers.\n\n// Undocumented functions\n\nfloat  __addsf3vfp(float a, float b);   // Appears to return a + b\ndouble __adddf3vfp(double a, double b); // Appears to return a + b\nfloat  __divsf3vfp(float a, float b);   // Appears to return a / b\ndouble __divdf3vfp(double a, double b); // Appears to return a / b\nint    __eqsf2vfp(float a, float b);    // Appears to return  one\n                                        //     iff a == b and neither is NaN.\nint    __eqdf2vfp(double a, double b);  // Appears to return  one\n                                        //     iff a == b and neither is NaN.\ndouble __extendsfdf2vfp(float a);       // Appears to convert from\n                                        //     float to double.\nint    __fixdfsivfp(double a);          // Appears to convert from\n                                        //     double to int.\nint    __fixsfsivfp(float a);           // Appears to convert from\n                                        //     float to int.\nunsigned int __fixunssfsivfp(float a);  // Appears to convert from\n                                        //     float to unsigned int.\nunsigned int __fixunsdfsivfp(double a); // Appears to convert from\n                                        //     double to unsigned int.\ndouble __floatsidfvfp(int a);           // Appears to convert from\n                                        //     int to double.\nfloat __floatsisfvfp(int a);            // Appears to convert from\n                                        //     int to float.\ndouble __floatunssidfvfp(unsigned int a); // Appears to convert from\n                                        //     unisgned int to double.\nfloat __floatunssisfvfp(unsigned int a); // Appears to convert from\n                                        //     unisgned int to float.\nint __gedf2vfp(double a, double b);     // Appears to return __gedf2\n                                        //     (a >= b)\nint __gesf2vfp(float a, float b);       // Appears to return __gesf2\n                                        //     (a >= b)\nint __gtdf2vfp(double a, double b);     // Appears to return __gtdf2\n                                        //     (a > b)\nint __gtsf2vfp(float a, float b);       // Appears to return __gtsf2\n                                        //     (a > b)\nint __ledf2vfp(double a, double b);     // Appears to return __ledf2\n                                        //     (a <= b)\nint __lesf2vfp(float a, float b);       // Appears to return __lesf2\n                                        //     (a <= b)\nint __ltdf2vfp(double a, double b);     // Appears to return __ltdf2\n                                        //     (a < b)\nint __ltsf2vfp(float a, float b);       // Appears to return __ltsf2\n                                        //     (a < b)\ndouble __muldf3vfp(double a, double b); // Appears to return a * b\nfloat __mulsf3vfp(float a, float b);    // Appears to return a * b\nint __nedf2vfp(double a, double b);     // Appears to return __nedf2\n                                        //     (a != b)\ndouble __negdf2vfp(double a);           // Appears to return -a\nfloat __negsf2vfp(float a);             // Appears to return -a\nfloat __negsf2vfp(float a);             // Appears to return -a\ndouble __subdf3vfp(double a, double b); // Appears to return a - b\nfloat __subsf3vfp(float a, float b);    // Appears to return a - b\nfloat __truncdfsf2vfp(double a);        // Appears to convert from\n                                        //     double to float.\nint __unorddf2vfp(double a, double b);  // Appears to return __unorddf2\nint __unordsf2vfp(float a, float b);    // Appears to return __unordsf2\n\n\nPreconditions are listed for each function at the definition when there are any.\nAny preconditions reflect the specification at\nhttp://gcc.gnu.org/onlinedocs/gccint/Libgcc.html#Libgcc.\n\nAssumptions are listed in \"int_lib.h\", and in individual files.  Where possible\nassumptions are checked at compile time.\n", "release_dates": []}, {"name": "compiler-team", "description": "A home for compiler team planning documents, meeting minutes, and other such things.", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Compiler Team\nThis repository contains a static site that details the procedures, policies, working groups,\nplanning documents and minutes.\n\nYou are probably looking [for the rendered website](https://rust-lang.github.io/compiler-team/) instead.\n\n### Building the website\nYou'll need to install [Hugo](https://github.com/gohugoio/hugo#choose-how-to-install) (ensure to get Hugo extended version for SCSS support) to build the website locally, you can then run the following commands to set the website up:\n\n```\ngit clone git@github.com:rust-lang/compiler-team.git\ngit submodule update --init\nhugo server --minify\n```\n\nTo generate a version for distribution, run `hugo --minify` and use the `public` directory.\n", "release_dates": []}, {"name": "compiler-team-prioritization", "description": "Home repository for the compiler team \"prioritization group\"", "language": null, "license": null, "readme": "# Prioritization Working Group\n\n- [Compiler team page](https://rust-lang.github.io/compiler-team/)\n- [Prioritization repo](https://github.com/rust-lang/compiler-team-prioritization)\n- [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html)\n- [Check-ins](https://hackmd.io/LZsUQsK3T3yIc4KW81ungw?view)\n- Zulip stream: [t-compiler/wg-prioritization](https://rust-lang.zulipchat.com/#narrow/stream/227806-t-compiler.2Fwg-prioritization)\n", "release_dates": []}, {"name": "const-eval", "description": "home for proposals in and around compile-time function evaluation", "language": "CSS", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Constant Evaluation\n\nConstant evaluation is the process of running Rust code at compile-time\nin order to use the result e.g. to set the discriminant of enum variants\nor as an array length.\n\nExamples:\n\n```rust\nenum Foo {\n    A = 5,\n    B = 7 - 3,\n}\ntype NineStrings = [&str, 3 * 3];\n```\n\nThe Rust compiler runs the [MIR](https://rustc-dev-guide.rust-lang.org/mir/index.html)\nin the [`MIR` interpreter (miri)](https://rustc-dev-guide.rust-lang.org/const-eval),\nwhich sort of is a virtual machine using `MIR` as \"bytecode\".\n\n## Table of Contents\n\n* [Unstable Feature Skill Tree](https://rust-lang.github.io/const-eval/)\n* [Const Safety](const_safety.md)\n* [Static and dynamic checks](const_checks.md)\n* The three \"kinds\" of compile-time evaluated data:\n  * [Statics](static.md) (`static`, `static mut`)\n  * [Constants](const.md) (`const`, array sizes, non-`Copy` array initializers)\n  * [Promoteds](promotion.md) (rvalue promotion)\n\n## Related RFCs\n\n### Const Promotion\n\n[RFC 1414](https://github.com/rust-lang/rfcs/pull/1414) injects a hidden static for any\n`&foo` expression as long as `foo` follows a certain set of rules.\nThese rules are discussed [here](promotion.md)\n\n### Drop types in constants/statics\n\n[RFC 1440](https://github.com/rust-lang/rfcs/pull/1440) allows using types that implement\n`Drop` (or have fields that do so) inside constants and statics. It is guaranteed that the\n`Drop::drop` method will never be called on the static/const object.\n\n### Constants in Repeat expressions\n\n[RFC 2203](https://github.com/rust-lang/rfcs/pull/2203) allows the use `!Copy` types for the\ninitializer of repeat expressions, as long as that value is constant.\n\nThis permits e.g. `[Vec::new(); 42]`.\n\n### Statically known bugs and panics in runtime code are warnings\n\n[RFC 1229](https://github.com/rust-lang/rfcs/pull/1229) formalized the concept that\n\n```rust\nlet x: usize = 1 - 2;\n```\n\nis allowed to produce a `lint` but not an `error`. This allows us to make these analyses\nmore powerful without suddenly breaking compilation. The corresponding lint is the `const_err`\nlint, which is `deny` by default and will thus break compilation of the crate currently being built,\neven if it does not break the compilation of the current crate's dependencies.\n\n### Various new const-eval features\n\n* [`loop`](https://github.com/rust-lang/rfcs/pull/2344)\n* [`if` and `match`](https://github.com/rust-lang/rfcs/pull/2342)\n* [`panic!`](https://github.com/rust-lang/rfcs/pull/2345)\n* [`locals and destructuring`](https://github.com/rust-lang/rfcs/pull/2341)\n\nSome of these features interact. E.g.\n\n* `match` + `loop` yields `while`\n* `panic!` + `if` + `locals` yields `assert!`\n", "release_dates": []}, {"name": "core-team", "description": "A place to house minutes and other documents related to the core team.", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# core-team\n\nThis repository is a place to store minutes, notes, and other\ndocuments created by the core team.\n", "release_dates": []}, {"name": "crater", "description": "Run experiments across parts of the Rust ecosystem!", "language": "Rust", "license": null, "readme": "# Crater\n\nCrater is a tool to run experiments across parts of the Rust ecosystem. Its\nprimary purpose is to detect regressions in the Rust compiler, and it does this\nby building a large number of crates, running their test suites and comparing the\nresults between two versions of the Rust compiler.\n\nIt can operate locally (with Docker as the only dependency) or distributed on\nthe cloud. It only works on Linux at the moment, and it's licensed under both\nthe MIT and Apache 2.0 licenses.\n\nThe current features of Crater are:\n\n* Discover Rust codebases on crates.io and GitHub\n* Execute experiments on custom Rust toolchains\n* Run `cargo build` and `cargo test` over all the discovered codebases\n* Build and test without dependency updates or network access\n* Run arbitrary tests over all the discovered codebases\n* Generate HTML reports with results and logs\n* Isolate tests in Docker containers\n\nCrater is a successor to\n[taskcluster-crater](https://github.com/brson/taskcluster-crater). It was\nsubsequently named cargobomb before resuming the Crater name.\n\n:warning: **DO NOT RUN CRATER IN AN UNSANDBOXED ENVIRONMENT** :warning:  \nCrater executes malicious code that will destroy what you love.\n\n## Documentation\n\nWant to contribute to Crater? Check out [the contribution\nguide](CONTRIBUTING.md).\n\n**User documentation:**\n\n* [Local/CLI usage](docs/cli-usage.md)\n* [GitHub bot usage](docs/bot-usage.md)\n* [Crater report triage procedure](docs/report-triage.md)\n\n**Operations documentation:**\n\n* [Legacy operational workflow](docs/legacy-workflow.md)\n* [Setting up a new Crater agent machine](docs/agent-machine-setup.md)\n\n**Technical documentation:**\n\n* [minicrater docs](tests/minicrater/README.md)\n* [Agent HTTP API specification](docs/agent-http-api.md)\n", "release_dates": []}, {"name": "crates-build-env", "description": "Build environment for third-party Rust crates", "language": "Dockerfile", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Build environment for third-party Rust crates\n\nThis repository contains the source code and the tooling to produce the Docker\ncontainers used by [Crater] and [docs.rs] to build third-party crates. The\ncontents of this repository are released under the MIT license.\n\n The images **do not** contain a Rust toolchain in them: you'll need to manually\n mount the toolchain(s) you want to use inside the container.\n\n## Adding new dependencies\n\nIf your crate fails to build on [Crater] or [docs.rs], you can:\n\n* [Open an issue][new-issue-linux] with the names of the packages you need\n* Send a PR adding the package names to the `linux/packages.txt` file\n\nNote that the package needs to be available in the **Ubuntu 22.04** archives.\n\n## Available containers\n\n### `linux`\n\nThis container is based on **Ubuntu 22.04** and includes all the native\ndependencies used by Rust crates we know of. It's used as the build environment\nfor the [Crater] and [docs.rs] projects.\n\nYou can pull this container by running:\n\n```\ndocker pull ghcr.io/rust-lang/crates-build-env/linux:latest\n```\n\n### `linux-micro`\n\nThis container is based on **Ubuntu 22.04** and includes the minimum set of\ndependencies needed to compile simple Rust programs. It's used by the test\nsuites of [Crater] and [docs.rs] and during local development.\n\nYou can pull this container by running:\n\n```\ndocker pull ghcr.io/rust-lang/crates-build-env/linux-micro:latest\n```\n\n### `windows`\n\nThis *work in progress* container is based on **Windows 2019**. It's currently\nunused and unmaintained, and no automated builds for it are available.\n\n[Crater]: https://github.com/rust-lang/crater\n[docs.rs]: https://github.com/rust-lang/docs.rs\n[new-issue-linux]: https://github.com/rust-lang/crates-build-env/issues/new?template=missing-linux-packages.md\n", "release_dates": []}, {"name": "crates-io-cargo-teams", "description": "the home of the crates io team", "language": null, "license": null, "readme": "# crates-io-cargo-teams Archive\n\nThis repo is no longer used for organization of the crates-io and Cargo teams. Please check these places for up-to-date information:\n\n- [Rust governance page](https://www.rust-lang.org/governance)\n- [Rust Teams structure](https://github.com/rust-lang/team)\n- [Crates.io repo](https://github.com/rust-lang/crates.io)\n- [Cargo repo](https://github.com/rust-lang/cargo)\n", "release_dates": []}, {"name": "crates-io-heroku-metrics", "description": "Heroku metrics collector for crates.io", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Heroku metrics collector for crates.io\n\nThis repository contains the source code of the container used to gather\ncrates.io's metrics.\n\nThe collector is maintained by the Rust Infrastructure team for internal use\nonly. While it's open source and you're free to deploy or modify it according\nto its license, the team **does not provide support and will not maintain it**\nfor any purpose we don't need ourselves.\n\nThe contents of the repository are dual-licensed under both the\n[MIT](./LICENSE-MIT) and [Apache-2.0](./LICENSE-APACHE) licenses.\n\n## Building and running\n\nYou can build the Docker container by cloning the repository and running:\n\n```\ndocker build -t crates-io-heroku-metrics .\n```\n\nOnce the image is built you can run it by running:\n\n```\ndocker run --rm \\\n    -e PASSWORD_DRAIN=${PASSWORD_DRAIN} \\\n    -e PASSWORD_METRICS=${PASSWORD_METRICS} \\\n    -p 80:80 \\\n    crates-io-heroku-metrics\n```\n\nThe service will be bound on port 80 and protected with the `${PASSWORD_DRAIN}`\nand `${PASSWORD_METRICS}` passwords. You can then configure Heroku to forward\nall application logs to it:\n\n```\nheroku drains:add -a ${APP} https://drain:${PASSWORD_DRAIN}@crates-io-heroku-metrics.example.com/drain\n```\n\nFinally you can add a scrape configuration to Prometheus gathering the metrics:\n\n```yaml\n- job_name: cratesio_heroku_metrics\n  scheme: https\n  basic_auth:\n    username: metrics\n    password: ${PASSWORD_METRICS}\n  static_configs:\n    - targets:\n      - crates-io-heroku-metrics.example.com:443\n```\n\nIn Rust's production environment the container is running on ECS Fargate.\n\n## Rationale and requirements\n\nTo ensure smooth service operations the crates.io team needs to gather the\nfollowing metrics:\n\n* **Service-level** metrics, such as the number of background jobs currently in\n  the queue or how many crates were published recently. These metrics can be\n  scraped from any of the application servers, as all application servers\n  should return the same information.\n\n* **Instance-level** metrics, such as the number of in-flight requests,\n  response times or how many connections are available in the database pool.\n  These metrics must be scraped from all application servers individually, as\n  each server returns its own (different) metrics.\n\n* **Heroku Postgres** metrics, such as the load average, the IOPS or the cache hit\n  ratio.\n\nThe Rust Infrastructure team maintains a centralized monitoring solution based\non Prometheus, but unfortunately that makes integration with applications\nrunning on Heroku hard.\n\nWhile service-level work fine on Heroku (Prometheus will scrape them from one\napplication server at random thanks to Heroku's load balancer), the fact that\nHeroku doesn't offer any way to reach the individual application servers makes\ngathering instance-level metrics impossible with a centralized Prometheus\nserver. Heroku Postgres metrics aren't easier to gather either, as Heroku only\nexposes them by periodically writing a line in the application logs.\n\nGathering Heroku Postgres metrics requires extracting them to the logs, so we\ndecided to scrape service-level metrics directly with Prometheus, and create a\nsingle container (this!) to extract both Heroku Postgres and instance-level\nmetrics from the logs.\n\n## Design\n\nThe container uses [nginx] to route and protect requests, and [Vector] to\ningest log messages and extract metrics out of them. Two password-protected\nHTTP endpoints are exposed:\n\n* `/drain`, which receives real-time log messages from [Heroku Logplex].\n  Messages [are batched][logplex-batches]: we don't receive one request per\n  log message.\n* `/metrics`, which exposes the processed Prometheus metrics ready to be\n  scraped.\n\nHow metrics are extracted depends on the kind of metric.\n\n### Instance-level metrics\n\nTo gather instance-level metrics the container expects log messages in a\nspecific format. Each line must be prefixed with the\n`crates-io-heroku-metrics:ingest` prefix, and must then contain the\nBase64-encoded JSON-encoded metrics data. Metrics data is encoded with base64\nto prevent other consumers of our logs (like Papertrail) from accidentally\nparsing the contents of the metrics.\n\nTo simplify the logic inside the container the metric data must be serialized\naccording to [Vector's metric data model][data-model] (without the `timestamp`\nfield). An example is this line:\n\n```\ncrates-io-heroku-metrics:ingest W3sibWV0cmljIjp7ImdhdWdlIjp7InZhbHVlIjowLjB9LCJraW5kIjoiYWJzb2x1dGUiLCJuYW1lIjoic2FtcGxlX2dhdWdlIiwidGFncyI6e319fV0=\n```\n\nWhich encodes the `sample_gauge` gauge with a value of `0.0`:\n\n```json\n[\n  {\n    \"metric\": {\n      \"gauge\": {\n        \"value\": 0.0\n      },\n      \"kind\": \"absolute\",\n      \"name\": \"sample_gauge\",\n      \"tags\": {}\n    }\n  }\n]\n```\n\n### Heroku Postgres metrics\n\nHeroku Postgres metrics are extracted by parsing [the log lines emitted by\nHeroku itself][heroku-postgres-metrics]. A Lua transform parses each line and\nextracts the samples from it. There is no hardcoded list of metrics to extract,\nso everything Heroku provides is exported.\n\n[nginx]: https://nginx.org/\n[Vector]: https://vector.dev/\n[Heroku Logplex]: https://devcenter.heroku.com/articles/logplex\n[heroku-postgres-metrics]: https://devcenter.heroku.com/articles/heroku-postgres-metrics-logs\n[data-model]: https://vector.dev/docs/about/under-the-hood/architecture/data-model/metric/\n[logplex-batches]: https://devcenter.heroku.com/articles/log-drains#https-drains\n", "release_dates": []}, {"name": "crates-io-ops-bot", "description": "a bot to help assist the crates.io, website, and other rust ops teams", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# ops-bot\na bot to help assist the crates.io, website, and other rust ops teams\n\n[![CI](https://github.com/rust-lang/crates-io-ops-bot/workflows/CI/badge.svg)](https://github.com/rust-lang/crates-io-ops-bot/actions)\n\n**This project is not used in production anymore, and is now archived.**\n\n## Intro\n\nThis is a chat bot for [Discord](https://discordapp.com/) to manage the infrastructure of [crates.io](https://crates.io/).\n\nMost of the infrastructure for crates.io is hosted by [Heroku](https://www.heroku.com/). Currently if someone\nis to manage any part of the infrastructure for crates.io, they must have full credentials to Heroku. \n\nThe purpose of this bot is to allow basic infrastructure management tasks to be conducted through the Rust Language Discord server.\nIt would be limited to specific members of the crates.io team, but it would allow more people to assist with basic infrastructure\nmanagement without needing full credentials to Heroku.\n\n### Stage 1\n\n(Still in progress)\n\nStage 1 of this bot will allow an authorized Discord member to:\n* Update select environmental variables (not including things like API keys)\n* Restart the application (which fixes most issues)\n* Scale the application\n* Change Dyno types\n* Deploy the application\n* Rollback a deployment\n* Block/unblock ips\n\n### Future Stages\n\nTo be determined!\n\n## Usage\n\nThis Discord bot allows you to run commands in a Discord channel like this:\n\n```\n!command\n```\n\n### Configuring Commands\n\nBy default, all commands are locked down and only can be run by users with permissions defined in the [rust-org team repo](https://github.com/rust-lang/team/) like [this user](https://github.com/rust-lang/team/blob/master/people/nellshamrell.toml).\n\nIf you would like a command to be runnable by anyone (not just those\nauthorized in the team repo), you need to add it to the NO_AUTH_COMMANDS constant.\n\n**lib.rs**\n```rust\n// These commands do not require a user to be authorized\nconst NO_AUTH_COMMANDS: &[&str] = &[\"ping\", \"multiply\", \"myid\"]\n```\n\n### General Commands\n\nFor example, if you run the !ping command is a Discord channel, this bot will respond with \"Pong!\"\n\n```\nyou: !ping\ncrates-io-bot: @you:Pong!\n```\n\nIf you run the !multiply command with two numbers, this bot will respond with the product of the two numbers.\n\n```\nyou: !multiply 2 2\ncrates-io-bot: 4\n```\n\n### Discord Commands\n\nIf you run the !myid command, this bot will respond with your\nDiscord account ID.\n\n```\nyou: !myid\ncrates-io-bot: @you: Here is your user id 1234567\n```\n\n### Help Commands\n\nYou can access the list of commands and general help text with the !help command:\n\n```\nyou: !help\ncrates-io-bot: \nHello! \u3053\u3093\u306b\u3061\u306f\uff01Hola! Bonjour! Ciao! \u60a8\u597d!\nIf you want more information about a specific command, just pass the command as argument.\nStrikethrough commands are unavailable because they require permissions, require a specific role, require certain conditions, or are limited to direct messages.\nGeneral\nping\nmultiply\nmyid\nget_app\nget_apps\nrestart_app\nscale_app\nupdate_app_config\nget_app_releases\nrollback_app\nblock_ip\nunblock_ip\ndeploy_app\n```\n\nTo get help with a specific command, pass it as an argument to the help command. For example:\n\n```\nyou: !help block_ip\ncrates-io-bot: \nblock_ip\nBlock an IP address\nSample usage\nblock_ip !block_ip app_name_or_id ip_address_to_block\nblock_ip !block_ip my_app 123.4.5.67\n```\n\n### Heroku commands\n\n**!get_app**\n\nIf you run the !get_app command and pass it either the app name \nor the app id (and you have a Heroku token set in your environmental variables),\nthis bot will respond with information about that app\n\n```\nyou: !get_app your_app_name_or_id\ncrates-io-bot:\nApp ID: \"123abc\"\nApp Name: \"My app 1\"\nReleased At: 2020-02-12T00:35:44Z\nWeb URL: https://www.your_app.herokuapp.com\n\nFormations for this app:\n\nName: web\nCommand: npm start\nQuantity: 1\nSize: Free\n```\n\n**!get_apps**\n\nIf you run the !get_apps command (and you have a Heroku token set in your environmental variables),\nthis bot will respond with a list of apps associated with that Heroku account\n\n```\nyou: !get_apps\ncrates-io-bot: @you: Here are your Heroku apps\nApp ID: \"123abc\"\nApp Name: \"My app 1\"\nReleased At: 2020-02-12T00:35:44Z\nWeb URL: https://www.your_app.herokuapp.com\n\nApp ID: \"456def\"\nApp Name: \"My app 2\"\nReleased At: 2020-02-12T00:35:44Z\nWeb URL: https://www.your_app.herokuapp.com\n\nApp ID: \"789ghi\"\nApp Name: \"My app 3\"\nReleased At: 2020-02-12T00:35:44Z\nWeb URL: https://www.your_app.herokuapp.com\n```\n\n**!restart_app**\n\nIf you run the !restart_app command and pass it either the app name \nor the app id (and you have a Heroku token set in your environmental variables),\nthis bot will send a request to restart all dynos associated with the app\n\n```\nyou: !restart_app your_app_name_or_id\ncrates-io-bot: @you: All dynos in your-app-name have been restarted.\n```\n\n**!update_app_config**\n\nYou can update authorized application configuration variables through the !update_app_config command.\n\nAuthorized configuration variables are defined here:\n**heroku.rs**\n```rust\n// Config variables that can be updated through Discord\nconst AUTHORIZED_CONFIG_VARS: &[&str] = &[\"FOO\"];\n```\n\nLet's say you have an app called \"testing-nell-bot\". That app has a config variable with the key \"FOO\" and you want to update the value of that key to \"bar\". You would run this command:\n\n```\nyou: !update_app_config testing-nell-bot FOO bar\ncrates-io-bot: @you: Config Var has been updated {\"FOO\": \"bar\"}\n```\n\n**!get_app_releases**\n\nYou can get a list of releases for your app through the !get_app_releases command.\n\n```\nyou: !get_app_releases testing-nell-bot\ncrates-io-bot: @you Here are your app releases\nID: abc-123\nVersion: 1\nStatus: succeeded\n\nID: def-456\nVersion: 2\nStatus: succeeded\n\nID: ghi-789\nVersion: 3\nStatus: succeeded\n```\n\n**!deploy_app**\n\nIf you would like to deploy your application, you can use this command (you can pass in the branch name, the commit id, or the full sha for the commit you want to deploy)\n\n```\nyou: !deploy_app app_name branch_commit_id_or_sha\n```\n\nFor example: \n\n```\n!deploy_app testing-nell-app master\ncrate-io-bot: @you Build in progress for testing-nell-app (this will take a few minutes)\nBuild ID is a30c6830-7e47-47ce-9f8d-1a883e4a9beb\nBuild a30c6830-7e47-47ce-9f8d-1a883e4a9beb is still pending...\nBuild a30c6830-7e47-47ce-9f8d-1a883e4a9beb is still pending...\nBuild a30c6830-7e47-47ce-9f8d-1a883e4a9beb is still pending...\nBuild a30c6830-7e47-47ce-9f8d-1a883e4a9beb is still pending...\nBuild a30c6830-7e47-47ce-9f8d-1a883e4a9beb is still pending...\n@you: Build a30c6830-7e47-47ce-9f8d-1a883e4a9beb is complete for testing-nell-app, moving on to releasing the app\n@you: App testing-nell-app version 0.2.1 has successfully been released!\n```\n\nThis command will:\n* Create a build of the code\n* Periodically check the build for progress (this is configurable through the BUILD_CHECK_INTERVAL environmental variable)\n* Periodically display messages in the Discord channel that the build is still pending (this is configurable through the BUILD_MESSAGE_DISPLAY_INTERVAL environmental variable)\n* Release the application as the version you specified\n\n**!rollback_app**\n\nIf you would like to rollback your app to the code associated with a previous release of your app, you can do so with the !rollback_app command.\n\n```\nyou: !rollback_app testing-nell-bot version-to-rollback-to\n```\n\n```\nyou: !rollback_app testing-nell-bot v5\n\ncrates-io-bot: @you App testing-nell-bot was successfully rolled back to the code at v5\n```\n\nYou can either specify the version with a \"v\" before the version number or with just the number. This command will also work.\n\n```\nyou: !rollback_app testing-nell-bot 5\n\ncrates-io-bot: @you App testing-nell-bot was successfully rolled back to the code at 5\n```\n\n**!scale_app**\n\nYou can scale formations of dynos within your application through the !scale_app command.\n\nFor example: Let's say you have an application (\"testing-nell-bot\") that is running\n* 1 formation - called \"web\"\n* with 2 dynos in that formation\n* each dyno is size \"standard-1X\"\n\nIf you want to update the formation to have a total of 3 dynos in it, you would run this command:\n\n```\n!scale_app testing-nell-bot web 3 standard-1X\ncrates-io-bot: : App testing-nell-bot's formation web has been updated\nName: web\nCommand: npm start\nQuantity: 3\nSize: standard-1X\n```\n\nIf you want to scale down the formation to have a total of 2 dynos in it, you would run this command:\n\n```\n!scale_app testing-nell-bot web 2 standard-1X\ncrates-io-bot: : App testing-nell-bot's formation web has been updated\nName: web\nCommand: npm start\nQuantity: 2\nSize: standard-1X\n```\n\nIf you want to change the size of all dynos in a formation (for example, upgrading all dynos from \"standard-1X\" to \"standard-2X\"), you would run this command:\n\n```\n!scale_app testing-nell-bot web 2 standard-2X\ncrates-io-bot: : App testing-nell-bot's formation web has been updated\nName: web\nCommand: npm start\nQuantity: 2\nSize: standard-2X\n```\n\n**!block_ip**\n\nIf you wish to block an IP address from accessing your application, you can do so with the !block_ip command.\n\n```\nyou: !block_ip you_app_name ip_address_to_block\n```\n\n```\nyou: !block_ip testing-nell-bot 123.456.68\ncrates-io-bot: @you IP address 123.456.68 \n```\n\n**!unblock_ip**\n\nIf you wish to unblock an IP address that was previously\nblocked for your application you can do so with the !unblock_ip command:\n\n```\nyou: !unblock_ip you_app_name ip_address_to_unblock\n```\n\n```\nyou: !unblock_ip testing-nell-bot 123.456.68\ncrates-io-bot: @you IP address 123.456.789 has been unblocked\n```\n\n## Setup\n\nTo setup this Discord bot, you need:\n* A [Discord Account](https://discordapp.com/)\n* A [Discord Server](https://support.discordapp.com/hc/en-us/articles/204849977-How-do-I-create-a-server-)\n* A [Heroku Account](https://www.heroku.com/)\n\nGo ahead and clone this repo and cd into the directory:\n\n```bash\ngit clone https://github.com/rust-lang/crates-io-ops-bot.git\ncd crates-io-ops-bot\n```\n\n### Setting Up a Discord Application\n\nTo use this bot, you will need to set up a Discord application through the [Discord Developer Portal](https://discordapp.com/developers/).\n\n[This blog post on Davao JS](https://medium.com/davao-js/2019-tutorial-creating-your-first-simple-discord-bot-47fc836a170b) has a good guide\non creating a Discord application and generating the token key. Skip to the \"Generating Token Key\" heading in the post and come back here\nwhen you create the token.\n\nMake sure to store the token somewhere safe! You will need it!\n\nTo use the token in development and testing, you need to add it to your .env file. \nTo set that file up:\n\n```bash\ncp .env.sample .env\n```\n\nThen add the token to your .env file:\n\n**.env**\n```\nDISCORD_TOKEN=\"<paste your token here>\"\n```\n\nTo use the token in production, make sure to set it wherever you define your environmental variables\nfor your production environment.\n\n### Setting up the Heroku API key\n\nIn order to use commands that call out to Heroku, you must set the HEROKU_API_KEY environmental variable.\n\nTo use the Heroku API key in development at test environments, set this variable in your .env file\n\n**.env**\n```\nHEROKU_API_KEY=\"123abc\"\n```\n\nTo use the Heroku API key in a CI/CD or production environment, make sure to set it wherever you define your environmental variables\nfor that environment.\n\n### Setting up the GitHub Configuration\n\nThe !deploy_app command requires three GitHub related environmental variables to be set. This includes your GitHub org, the repo you want to deploy from, and a [GitHub Personal Access Token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n\n\nTo configure these variables for development and test environments, set these variables in your .env file.\n\n**.env**\n```\nGITHUB_ORG=\"your-github-org\"\nGITHUB_REPO=\"your-github-repo\"\nGITHUB_TOKEN=\"your-github-personal-access-token\"\n```\nTo use these variables in a CI/CD or production environment, make sure to set them wherever you define your environmental variables\nfor that environment.\n\n### Setting up the Build Check Interval\n\nThe !deploy_app command kicks of a build of your application and periodically checks the build to see if it is still pending. Once it is no longer pending, it moves onto releasing the build. To configure the check interval for development and test environments, set this variable in your .env file\n\nThis will set the build check interval to **5 seconds**\n\n**.env**\n```\nBUILD_CHECK_INTERVAL=\"5\"\n```\n\nTo use the build check interval in a CI/CD or production environment, make sure to set it wherever you define your environmental variables\nfor that environment.\n\n### Setting up the Build Message Display Interval\n\nThe !deploy_app command kicks of a build of your application and periodically checks the build to see if it is still pending. This environmental variable allows you to configure how often messages are sent to the Discord channel indicating that the build is still pending.\n\nThis will set the build message display interval to **30 seconds**\n\n**.env**\n```\nBUILD_CHECK_INTERVAL=\"30\"\n```\n\nTo use the build message display interval in a CI/CD or production environment, make sure to set it wherever you define your environmental variables\nfor that environment.\n\n### Running locally\n\nYou can run this bot in your local environment with this command (make sure you are in the directory for your copy of this repo)\n\nNOTE: You must be in the [rust team repository](https://github.com/rust-lang/team/) with a discord id listed (like in [this entry](https://github.com/rust-lang/team/blob/master/people/nellshamrell.toml)) to be able to run the bot.\n\n```bash\ncargo run\n```\n\nOnce it is running, you will see the bot in the \"online\" list on your Discord Server. Try out the commands!\n\n### Running with Docker Locally\n\nThere is a Dockerfile within this repository to make it easy to build and run this bot within a Docker container (make sure you are in the directory for your copy of this repo)\n\n**Creating your docker_env.list file**\n\nYou can pass all environmental variables to the Docker run command manually, but it's often much easier to keep them in a file. Unfortunately, we cannot just pass the .env file, as Docker requires that the env vars be in the format VAR1=value1, rather than VAR1=\"value2\". One option is to copy your .env file.\n\n```bash\ncp .env docker_env.list\n```\n\nAnd then open it up and remove the quotation marks around the environmental variables.\n\nSo \n\n```\nVAR1=\"value1\"\n```\n\nbecomes\n\n```\nVAR1=value1\n```\n\nThen you must build and run the container image:\n\n```bash\ndocker build -t your_name/crates-io-ops-bot .\ndocker run --env-file docker_env.list -i -t your_name/crates-io-ops-bot\n```\n", "release_dates": []}, {"name": "crates.io", "description": "The Rust package registry", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# crates.io\n\n[![What's Deployed](https://img.shields.io/badge/whatsdeployed-prod-green.svg)](https://whatsdeployed.io/s-9IG)\n\nSource code for the default [Cargo](https://doc.rust-lang.org/cargo/) registry.\nViewable online at [crates.io](https://crates.io).\n\n## Status of crates.io\n\nAny known issues currently affecting the registry running at https://crates.io\nwill be posted to [@CratesIoStatus](https://twitter.com/cratesiostatus).\n\nIf you are experiencing an issue not addressed there, please contact us in one\nof the following ways:\n\n- [File a new issue](https://github.com/rust-lang/crates.io/issues/new)\n- Email [help@crates.io](mailto:help@crates.io)\n- Chat on the #t-crates-io Zulip stream on https://rust-lang.zulipchat.com/#narrow/stream/318791-t-crates-io/\n\nA volunteer will get back to you as soon as possible.\n\n## Contributing\n\nWelcome! We love contributions! crates.io is an [Ember](https://emberjs.com/)\nfrontend with a Rust backend, and there are many tasks appropriate for a\nvariety of skill levels.\n\nPlease see [docs/CONTRIBUTING.md](https://github.com/rust-lang/crates.io/blob/main/docs/CONTRIBUTING.md) for ideas about what to work on and how to set up a development\nenvironment.\n\n### Categories\n\nAdding or editing the categories and corresponding descriptions displayed on\n[crates.io/categories](https://crates.io/categories) does not require a full\ndevelopment environment set up.\n\nThe list of categories available on crates.io is stored in\n[`src/boot/categories.toml`](https://github.com/rust-lang/crates.io/blob/main/src/boot/categories.toml).\nTo propose adding, removing, or changing a category, send a pull request making\nthe appropriate change to that file as noted in the comment at the top of the\nfile. Please add a description that will help others to know what crates are in\nthat category.\n\nFor new categories, it's helpful to note in your PR description examples of\ncrates that would fit in that category, and describe what distinguishes the new\ncategory from existing categories.\n\nAfter your PR is accepted, the next time that crates.io is deployed the\ncategories will be synced from this file.\n\n## License\n\nLicensed under either of these:\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n  https://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or\n  https://opensource.org/licenses/MIT)\n", "release_dates": []}, {"name": "crates.io-index", "description": "Registry index for crates.io", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "crates.io-index-archive", "description": "Archive of the crates.io-index commit history after squashes", "language": "Shell", "license": null, "readme": "# Crates.io Index Archive\n\nThis repository archives all snapshot branches created from\n[rust-lang/crates.io-index](https://github.com/rust-lang/crates.io-index) when its history is\nsquashed.\n", "release_dates": []}, {"name": "ctcft", "description": "Cross Team Collaboration Fun Times", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# [Cross-Team Collaboration Fun Times](https://rust-lang.github.io/ctcft/)\n\n[![camprust](https://raw.githubusercontent.com/rust-lang/ctcft/main/img/camprust.png)](https://rust-lang.github.io/ctcft/)\n", "release_dates": []}, {"name": "datafrog", "description": "A lightweight Datalog engine in Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# datafrog\n\nDatafrog is a lightweight Datalog engine intended to be embedded in other Rust programs.\n\nDatafrog has no runtime, and relies on you to build and repeatedly apply the update rules.\nIt tries to help you do this correctly. As an example, here is how you might write a reachability\nquery using Datafrog (minus the part where we populate the `nodes` and `edges` initial relations).\n\n```rust\nextern crate datafrog;\nuse datafrog::Iteration;\n\nfn main() {\n    // Prepare initial values, ..\n    let nodes: Vec<(u32,u32)> = vec![\n        // ..\n    ];\n    let edges: Vec<(u32,u32)> = vec![\n        // ..\n    ];\n\n    // Create a new iteration context, ..\n    let mut iteration = Iteration::new();\n\n    // .. some variables, ..\n    let nodes_var = iteration.variable::<(u32,u32)>(\"nodes\");\n    let edges_var = iteration.variable::<(u32,u32)>(\"edges\");\n\n    // .. load them with some initial values, ..\n    nodes_var.insert(nodes.into());\n    edges_var.insert(edges.into());\n\n    // .. and then start iterating rules!\n    while iteration.changed() {\n        // nodes(a,c)  <-  nodes(a,b), edges(b,c)\n        nodes_var.from_join(&nodes_var, &edges_var, |_b, &a, &c| (c,a));\n    }\n\n    // extract the final results.\n    let reachable: Vec<(u32,u32)> = nodes_var.complete();\n}\n```\n\nIf you'd like to read more about how it works, check out [this blog post](https://github.com/frankmcsherry/blog/blob/master/posts/2018-05-19.md).\n\n## Authorship\n\nDatafrog was initially developed by [Frank McSherry][fmc] and was\nlater transferred to the rust-lang-nursery organization. Thanks Frank!\n\n[fmc]: https://github.com/frankmcsherry\n", "release_dates": []}, {"name": "discord-mods-bot", "description": "discord moderation bot", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Discord Mods Bot\nA discord bot written in rust.  \n\n# [Getting Started](GETTING_STARTED.md)\n# [Commands](COMMANDS.md)\n\n# Features\nThe following commands are currently supported by the bot\n\n## Tags\nTags are a simple key value store.  \n\nLookup a tag\n```\n?tag {key}\n```\nCreate a tag\n```\n?tags create {key} value...\n```\nDelete a tag\n```\n?tags delete {key}\n```\nGet all tags\n```\n?tags\n```\n\n### Crates\nSearch for a crate on crates.io\n```\n?crate query...\n```\nRetreive documentation for a crate\n```\n?docs query...\n```\n\n### Ban\nBan a user\n```\n?ban {user}\n\n```\n### Kick\nKick a user\n```\n?kick {user}\n```\n### Slowmode\nSet slowmode for a channel.  0 seconds disables slowmode.  \n```\n?slowmode {channel} {seconds}\n```\n\n### Code of conduct welcome message\nSets up the code of conduct message with reaction in the specified channel.\nUsed for assigning talk roles.  \n```\n?CoC {channel}\n```\n", "release_dates": []}, {"name": "docker-rust", "description": "The official Docker images for Rust", "language": "Dockerfile", "license": null, "readme": "# About this Repo\n\nThis is the Git repo of the Docker [official image](https://docs.docker.com/docker-hub/official_repos/) for [rust](https://registry.hub.docker.com/_/rust/). See [the Docker Hub page](https://registry.hub.docker.com/_/rust/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe full readme is generated over in [docker-library/docs](https://github.com/docker-library/docs), specifically in [docker-library/docs/rust](https://github.com/docker-library/docs/tree/master/rust).\n\nSee a change merged here that doesn't show up on the Docker Hub yet? Check [the \"library/rust\" manifest file in the docker-library/official-images repo](https://github.com/docker-library/official-images/blob/master/library/rust), especially [PRs with the \"library/rust\" label on that repo](https://github.com/docker-library/official-images/labels/library%2Frust). For more information about the official images process, see the [docker-library/official-images readme](https://github.com/docker-library/official-images/blob/master/README.md).\n\n<!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh -->\n\n## Nightly Toolchain\n\nAn image tracking the Rust nightly toolchain is available via\n[`rustlang/rust:nightly`](https://hub.docker.com/r/rustlang/rust/).\n", "release_dates": []}, {"name": "docker-rust-nightly", "description": null, "language": "Dockerfile", "license": null, "readme": "Find it on the [Docker Hub](https://hub.docker.com/r/rustlang/rust/) and the\n[GitHub Container Registry](https://github.com/rust-lang/docker-rust-nightly/pkgs/container/rust).\n\nFor typical use cases, see the [official image](https://hub.docker.com/_/rust/).\n\nThis image has two tags, `nightly` and `nightly-slim`, which are updated every\nday to match the current Rust nightly.  The `nightly` tag is configured\nidentically to that of the `latest` tag of the official image, except that the\nnightly toolchain is selected via rustup.  The `nightly-slim` tag is configured\nidentically to that of the `slim` tag of the official image, except that the\nnightly toolchain is selected via rustup.\n", "release_dates": []}, {"name": "docs.rs", "description": "crates.io documentation generator", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Docs.rs\n\n[![Build Status](https://github.com/rust-lang/docs.rs/workflows/CI/badge.svg)](https://github.com/rust-lang/docs.rs/actions?workflow=CI)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/rust-lang/docs.rs/master/LICENSE)\n\nDocs.rs (formerly cratesfyi) is an open source project to host documentation\nof crates for the Rust Programming Language.\n\nDocs.rs automatically builds crates' documentation released on crates.io using\nthe nightly release of the Rust compiler.\n\nThis readme is for developing docs.rs. See [the about page](https://docs.rs/about) for user-facing documentation.\n\n## Changing the build environment\n\nTo make a change to [the build environment](https://github.com/rust-lang/crates-build-env)\nand test that it works on docs.rs, see [the wiki](https://forge.rust-lang.org/docs-rs/add-dependencies.html).\n\n## Development\n\nThe recommended way to develop docs.rs is a combination of `cargo run` for\nthe main binary and [docker-compose](https://docs.docker.com/compose/) for the external services.\nThis gives you reasonable incremental build times without having to add new users and packages to your host machine.\n\n### Git Hooks\n\nFor ease of use, `git_hooks` directory contains useful `git hooks` to make your development easier.\n\n```bash\n# Unix\ncd .git/hooks && ln -s ../../.git_hooks/* . && cd ../..\n# Powershell\ncd .git/hooks && New-Item -Path ../../.git_hooks/* -ItemType SymbolicLink -Value . && cd ../..\n```\n\n### Dependencies\n\nDocs.rs requires at least the following native C dependencies.\n\n- gcc\n- g++\n- pkg-config\n- git\n- make\n- cmake\n- zlib\n- openssl (with dev pkgs) -- Ubuntu example `sudo apt install libssl-dev`\n\nThere may be other dependencies that have not been documented.\n\n### Getting started\n\nMake sure you have docker-compose and are able to download ~10GB data on the first run. Also ensure that\ndocker is installed and the service is running.\n\n```sh\ngit clone https://github.com/rust-lang/docs.rs.git docs.rs\ncd docs.rs\ngit submodule update --init\n# Configure the default settings for external services\ncp .env.sample .env\n# Create the DOCSRS_PREFIX directory\nmkdir -p ignored/cratesfyi-prefix/crates.io-index\n# Builds the docs.rs binary\ncargo build\n# Start the external services.\n# It may be `docker compose` in newer versions\ndocker-compose up -d db s3\n# anything that doesn't run via docker-compose needs the settings defined in\n# .env. Either via `. ./.env` as below, or via any dotenv shell integration.\n. ./.env\n# allow downloads from the s3 container to support the /crate/.../download endpoint\nmcli policy set download docsrs/rust-docs-rs\n# Setup the database you just created\ncargo run -- database migrate\n# Update the currently used toolchain to the latest nightly\n# This also sets up the docs.rs build environment.\n# This will take a while the first time but will be cached afterwards.\ncargo run -- build update-toolchain\n# Build a sample crate to make sure it works\ncargo run -- build crate regex 1.3.1\n# This starts the web server but does not build any crates.\n# It does not automatically run the migrations, so you need to do that manually (see above).\ncargo run -- start-web-server\n# If you want the server to automatically restart when code or templates change\n# you can use `cargo-watch`:\ncargo watch -x \"run -- start-web-server\"\n```\n\nIf you need to store big files in the repository's directory it's recommended to\nput them in the `ignored/` subdirectory, which is ignored both by git and\nDocker.\n\nRunning the database and S3 server outside of docker-compose is possible, but not recommended or supported.\nNote that you will need docker installed no matter what, since it's used for Rustwide sandboxing.\n\n### Running tests\n\n```\ncargo test\n```\n\nTo run GUI tests:\n\n```\n./dockerfiles/run-gui-tests.sh\n```\n\nThey use the [browser-ui-test](https://github.com/GuillaumeGomez/browser-UI-test/) framework. You\ncan take a look at its documentation [here](https://github.com/GuillaumeGomez/browser-UI-test/blob/master/goml-script.md).\n\n### Pure docker-compose\n\nIf you have trouble with the above commands, consider using `docker-compose up --build`,\nwhich uses docker-compose for the web server as well.\nThis will not cache dependencies - in particular, you'll have to rebuild all 400 whenever the lockfile changes -\nbut makes sure that you're in a known environment so you should have fewer problems getting started.\n\nYou can also use the `web` container to run builds on systems which don't support running builds directly (mostly on Mac OS or Windows):\n```sh\n# run a build for a single crate\ndocker-compose run web build crate regex 1.3.1\n# or build essential files\ndocker-compose run web build add-essential-files\n# rebuild the web container when you changed code.\ndocker-compose build web\n```\n\nNote that running tests is not supported when using pure docker-compose.\n\nPlease file bugs for any trouble you have running docs.rs!\n\n### Docker-Compose\n\nThe services started by Docker-Compose are defined in [docker-compose.yml].\nThree services are defined:\n\n| name | access                                          | credentials                | description                            |\n|------|-------------------------------------------------|----------------------------|----------------------------------------|\n| web  | http://localhost:3000                           | N/A                        | A container running the docs.rs binary |\n| db   | postgresql://cratesfyi:password@localhost:15432 | -                          | Postgres database used by web          |\n| s3   | http://localhost:9000                           | `cratesfyi` - `secret_key` | MinIO (simulates AWS S3) used by web   |\n\n[docker-compose.yml]: ./docker-compose.yml\n\n#### Rebuilding Containers\n\nTo rebuild the site, run `docker-compose build`.\nNote that docker-compose caches the build even if you change the source code,\nso this will be necessary anytime you make changes.\n\nIf you want to completely clean up the database, don't forget to remove the volumes too:\n\n```sh\n$ docker-compose down --volumes\n```\n\n#### FAQ\n\n##### I see the error `standard_init_linux.go:211: exec user process caused \"no such file or directory\"` when I use docker-compose.\n\nYou probably have [CRLF line endings](https://en.wikipedia.org/wiki/CRLF).\nThis causes the hashbang in the docker-entrypoint to be `/bin/sh\\r` instead of `/bin/sh`.\nThis is probably because you have `git.autocrlf` set to true,\n[set it to `input`](https://stackoverflow.com/questions/10418975) instead.\n\n##### I see the error `/opt/rustwide/cargo-home/bin/cargo: cannot execute binary file: Exec format error` when running builds.\n\nYou are most likely not on a Linux platform. Running builds directly is only supported on `x86_64-unknown-linux-gnu`. On other platforms you can use the `docker-compose run web build [...]` workaround described above.\n\nSee [rustwide#41](https://github.com/rust-lang/rustwide/issues/41) for more details about supporting more platforms directly.\n\n##### All tests are failing or timing out\n\nOur test setup needs a certain about of file descriptors.\n\nAt least 4096 should be enough, you can set it via:\n```sh\n$ ulimit -n 4096\n```\n### CLI\n\nSee `cargo run -- --help` for a full list of commands.\n\n#### Starting the web server\n\n```sh\n# This command will start web interface of docs.rs on http://localhost:3000\ncargo run -- start-web-server\n```\n\n#### `build` subcommand\n\n```sh\n# Builds <CRATE_NAME> <CRATE_VERSION> and adds it into database\n# This is the main command to build and add a documentation into docs.rs.\n# For example, `docker-compose run web build crate regex 1.1.6`\ncargo run -- build crate <CRATE_NAME> <CRATE_VERSION>\n\n# alternatively, via the web container\ndocker-compose run web build crate <CRATE_NAME> <CRATE_VERSION>\n\n# Builds every crate on crates.io and adds them into database\n# (beware: this may take months to finish)\ncargo run -- build world\n\n# Builds a local package you have at <SOURCE> and adds it to the database.\n# The package does not have to be on crates.io.\n# The package must be on the local filesystem, git urls are not allowed.\ncargo run -- build crate --local /path/to/source\n```\n\n#### `database` subcommand\n\n```sh\n# Adds a directory into database to serve with `staticfile` crate.\ncargo run -- database add-directory <DIRECTORY> [PREFIX]\n\n# Updates repository stats for crates.\n# You need to set the DOCSRS_GITHUB_ACCESSTOKEN\n# environment variable in order to run this command.\n# Set DOCSRS_GITLAB_ACCESSTOKEN to raise the rate limit for GitLab repositories,\n# or leave it blank to fetch repositories at a slower rate.\ncargo run -- database update-repository-fields\n```\n\nIf you want to explore or edit database manually, you can connect to the database\nwith the `psql` command.\n\n```sh\n. ./.env\npsql $DOCSRS_DATABASE_URL\n```\n\nThe database contains a blacklist of crates that should not be built.\n\n```sh\n# List the crates on the blacklist\ncargo run -- database blacklist list\n\n# Adds <CRATE_NAME> to the blacklist\ncargo run -- database blacklist add <CRATE_NAME>\n\n# Removes <CRATE_NAME> from the blacklist\ncargo run -- database blacklist remove <CRATE_NAME>\n```\n\nIf you want to revert to a precise migration, you can run:\n\n```sh\ncargo run -- database migrate <migration number>\n```\n\n#### `daemon` subcommand\n\n```sh\n# Run a persistent daemon which queues builds and starts a web server.\ncargo run -- daemon --registry-watcher=disabled\n# Add crates to the queue\ncargo run -- queue add <CRATE> <VERSION>\n```\n\n### Updating vendored sources\n\nThe instructions & links for updating Font Awesome can be found [on their website](https://fontawesome.com/how-to-use/on-the-web/advanced/svg-sprites). Similarly, Pure-CSS also [explains on theirs](https://purecss.io/start/).\n\nWhen updating Font Awesome, make sure to change `$fa-font-path` in `scss/_variables.scss` (it should be at the top of the file) to `../-/static`. This will point font awesome at the correct path from which to request font and icon resources.\n\n### Contact\n\nDocs.rs is run and maintained by the [docs.rs team](https://www.rust-lang.org/governance/teams/dev-tools#docs-rs).\nYou can find us in #t-docs-rs on [zulip](https://rust-lang.zulipchat.com/#narrow/stream/t-docs-rs)\n", "release_dates": []}, {"name": "dyn-upcasting-coercion-initiative", "description": "Initiative to support upcasting dyn Trait values to supertraits", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Dyn upcasting coercion initiative\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the dyn upcasting coercion [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Proposal issue](https://github.com/rust-lang/lang-team/issues/98) |\n|                                       |       | [Charter](./CHARTER.md) |\n|                                       |       | [Tracking issue](https://github.com/rust-lang/rust/issues/65991) |\n| [Development]                         | \ud83e\udd80    | [Explainer](./explainer.md) | \n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design discussions](./design-discussions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-discussions](./design-discussions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-dyn-upcasting-coercion.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "edition-guide", "description": "A guide to changes between various editions of Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rust Edition Guide\n\nThis book explains the concept of \"editions\", major new eras in [Rust]'s\ndevelopment. You can [read the book\nonline](https://doc.rust-lang.org/nightly/edition-guide/).\n\n[Rust]: https://www.rust-lang.org/\n\n## License\n\nThe Rust Edition Guide is dual licensed under `MIT`/`Apache2`, just like Rust\nitself. See the `LICENSE-*` files in this repository for more details.\n\n## Building locally\n\nYou can also build the book and read it locally if you'd like.\n\n### Requirements\n\nBuilding the book requires [mdBook] 0.4. To get it:\n\n[mdBook]: https://github.com/rust-lang/mdBook\n\n```bash\n$ cargo install mdbook\n```\n\n### Building\n\nThe most straight-forward way to build and view the book locally is to use the following command:\n```bash\n$ mdbook serve --open\n```\n\nThis builds the HTML version of the book, starts a webserver at\nhttp://localhost:3000, and opens your default web browser. It will also\nautomatically rebuild the book whenever the source changes, and the page\nshould automatically reload.\n\nTo run the tests:\n\n```bash\n$ mdbook test\n```\n", "release_dates": []}, {"name": "ena", "description": "An implementation of union-find / congruence-closure in Rust. Extracted from rustc for independent experimentation.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![Build Status](https://travis-ci.org/rust-lang/ena.svg?branch=master)](https://travis-ci.org/rust-lang/ena)\n\nAn implementation of union-find in Rust; extracted from (and used by)\nrustc.\n\n### Name\n\nThe name \"ena\" comes from the Greek word for \"one\".\n\n### Features\n\nBy default, you just get the union-find implementation. You can also\nopt-in to the following experimental features:\n\n- `bench`: use to run benchmarks (`cargo bench --features bench`)\n\n### License\n\nLike rustc itself, this code is dual-licensed under the MIT and Apache\nlicenses. Pull requests, comments, and other contributions are assumed\nto imply consent to those terms. Moreover, it is understood that any\nchanges here may well be used in rustc itself under the same terms.\n", "release_dates": []}, {"name": "ferris-says", "description": "A Rust flavored implementation of `cowsay`", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Ferris Says\n\nA library for printing out text with Ferris as the mascot!\n\n## Build requirements\n\nYou only need a stable version of the Rust compiler.\n\n## How to use the library\n\nPut the following in your `Cargo.toml`:\n\n```toml\n[dependencies]\nferris-says = \"0.2\"\n```\n\nThen import the crate with:\n\n```rust\nextern crate ferris_says;\n```\n\n### Example\n\nThe following bit of code will write the byte string to STDOUT\n\n```rust\nextern crate ferris_says;\n\nuse ferris_says::say;\nuse std::io::{ stdout, BufWriter };\n\nfn main() {\n    let out = b\"Hello fellow Rustaceans!\";\n    let width = 24;\n\n    let mut writer = BufWriter::new(stdout());\n    say(out, width, &mut writer).unwrap();\n}\n```\n\nThis will print out this when run:\n\n```plain\n __________________________\n< Hello fellow Rustaceans! >\n --------------------------\n        \\\n         \\\n            _~^~^~_\n        \\) /  o o  \\ (/\n          '_   -   _'\n          / '-----' \\\n```\n\n## How to use the binary\n\nThe binary version is called `fsays` and can be installed with `cargo install`:\n\n```bash\ncargo install fsays\n```\n\nIt reads input from `stdin` and prints it out to the console.\n\n```bash\nfsays 'Hello fellow Rustaceans!'\n```\n\nThis will print out this when run:\n\n```plain\n __________________________\n< Hello fellow Rustaceans! >\n --------------------------\n        \\\n         \\\n            _~^~^~_\n        \\) /  o o  \\ (/\n          '_   -   _'\n          / '-----' \\\n```\n\nA width can also be specified, if desired.\n\n```bash\nfsays --width 12 'Hello fellow Rustaceans!'\n```\n\nwill result in the following output:\n\n```plain\n ______________\n/ Hello fellow \\\n\\ Rustaceans!  /\n --------------\n        \\\n         \\\n            _~^~^~_\n        \\) /  o o  \\ (/\n          '_   -   _'\n          / '-----' \\\n```\n\nYou can also use multiple files as input by using the `-f`/`--files` flag!\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Licensing\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n### Credit\n[Original Ferris ASCII art](https://www.reddit.com/r/rust/comments/52vb6y/animated_ferris_the_rustacean/d7phkyh/) by @Diggsey\n", "release_dates": []}, {"name": "flate2-rs", "description": "DEFLATE, gzip, and zlib bindings for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# flate2\n\n[![Crates.io](https://img.shields.io/crates/v/flate2.svg?maxAge=2592000)](https://crates.io/crates/flate2)\n[![Documentation](https://docs.rs/flate2/badge.svg)](https://docs.rs/flate2)\n\nA streaming compression/decompression library DEFLATE-based streams in Rust.\n\nThis crate by default uses the `miniz_oxide` crate, a port of `miniz.c` to pure\nRust. This crate also supports other [backends](#backends), such as the widely\navailable zlib library or the high-performance zlib-ng library.\n\nSupported formats:\n\n* deflate\n* zlib\n* gzip\n\n```toml\n# Cargo.toml\n[dependencies]\nflate2 = \"1.0\"\n```\n\n## MSRV (Minimum Supported Rust Version) Policy\n\nThis crate supports the current stable and the last stable for the latest version.\nFor example, if the current stable is 1.64, this crate supports 1.64 and 1.63.\nOlder stables may work, but we don't guarantee these will continue to work.\n\n## Compression\n\n```rust\nuse std::io::prelude::*;\nuse flate2::Compression;\nuse flate2::write::ZlibEncoder;\n\nfn main() {\n    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());\n    e.write_all(b\"foo\");\n    e.write_all(b\"bar\");\n    let compressed_bytes = e.finish();\n}\n```\n\n## Decompression\n\n```rust,no_run\nuse std::io::prelude::*;\nuse flate2::read::GzDecoder;\n\nfn main() {\n    let mut d = GzDecoder::new(\"...\".as_bytes());\n    let mut s = String::new();\n    d.read_to_string(&mut s).unwrap();\n    println!(\"{}\", s);\n}\n```\n\n## Backends\n\nThe default `miniz_oxide` backend has the advantage of being pure Rust. If you\nwant maximum performance, you can use the zlib-ng C library:\n\n```toml\n[dependencies]\nflate2 = { version = \"1.0.17\", features = [\"zlib-ng\"], default-features = false }\n```\n\nNote that the `\"zlib-ng\"` feature works even if some other part of your crate\ngraph depends on zlib.\n\nHowever, if you're already using another C or Rust library that depends on\nzlib, and you want to avoid including both zlib and zlib-ng, you can use that\nfor Rust code as well:\n\n```toml\n[dependencies]\nflate2 = { version = \"1.0.17\", features = [\"zlib\"], default-features = false }\n```\n\nOr, if you have C or Rust code that depends on zlib and you want to use zlib-ng\nvia libz-sys in zlib-compat mode, use:\n\n```toml\n[dependencies]\nflate2 = { version = \"1.0.17\", features = [\"zlib-ng-compat\"], default-features = false }\n```\n\nNote that when using the `\"zlib-ng-compat\"` feature, if any crate in your\ndependency graph explicitly requests stock zlib, or uses libz-sys directly\nwithout `default-features = false`, you'll get stock zlib rather than zlib-ng.\nSee [the libz-sys\nREADME](https://github.com/rust-lang/libz-sys/blob/main/README.md) for details.\nTo avoid that, use the `\"zlib-ng\"` feature instead.\n\nFor compatibility with previous versions of `flate2`, the Cloudflare optimized\nversion of zlib is available, via the `cloudflare_zlib` feature. It's not as\nfast as zlib-ng, but it's faster than stock zlib. It requires an x86-64 CPU with\nSSE 4.2 or ARM64 with NEON & CRC. It does not support 32-bit CPUs at all and is\nincompatible with mingw. For more information check the [crate\ndocumentation](https://crates.io/crates/cloudflare-zlib-sys). Note that\n`cloudflare_zlib` will cause breakage if any other crate in your crate graph\nuses another version of zlib/libz.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2023-10-13T09:19:59Z", "2023-08-15T05:26:51Z", "2023-05-04T09:56:27Z", "2022-12-23T06:40:10Z"]}, {"name": "foundation-faq-2020", "description": "Have questions on the Rust Foundation? Ask here!", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Foundation 2020 Q&A\n\n\u2b50\ufe0f [**Read the summary of questions and answers so far in our FAQ!**][faq] \u2b50\ufe0f\n\nAfter this summer's [\"Laying the foundation for Rust's future\"][aug-blog] blog\npost the [Rust Foundation Project Group] began the work to setup a new home for\nthe Rust Project. We're getting near the end of the work, and we'd love to\nanswer all the questions you have on the Rust Foundation!\n\nWe welcome everyone to post their questions as [new issues][new], and the team\nwill do their best to answer them! You can also check [the open issues][issues]\nto see what other people asked and the answers to their questions. If you can't\nopen GitHub issues or want to send questions privately you can send them via\nemail to <foundation@rust-lang.org>.\n\nPlease note that if an issue is labelled [`answered`] the team will not return\nto it, so if you have a follow up question, please post it as a new issue.\n\n## FAQ\n\nPeriodically, we'll be summarizing the set of questions and answers on the \nissue tracker and collecting them in an [FAQ][faq]. \n\n## Maintainer Q&A\n\nThe members of the [Rust Core Team] will answer questions from the members of the\nRust Team starting from December 2nd.\n\n## Community Q&A Sessions\n\nMembers of the Rust community will be able to ask questions of the [Rust Core Team] by filing issues on this repository during the following time periods:\n\n|                                                 | PST US | EST US | UTC Europe/Africa  | India                   | China            |\n|-------------------------------------------------|--------|--------|--------------------|-------------------------|------------------|\n| Dec 7th ([View in my timezone][dec7-session])   | 3-6pm  | 6-9pm  | 23:00-2:00         | 4:30am-7:30am (Dec 8)   | 7am-10am (Dec 8) |\n| Dec 9th ([View in my timezone][dec9-session])   | 4-7am  | 7-10am | 12:00-15:00        | 5:30-8:30pm             | 8pm-11pm         |\n| Dec 11th ([View in my timezone][dec11-session]) | 10-1pm | 1-4pm  | 18:00-21:00        | 11:30pm-2:30am          | 2am-5am (Dec 12) |\n\n\n## Live Broadcasts\n\nIn addition to this repository, we\u2019ve scheduled two \u201clive broadcasts\u201d.\nThese sessions will feature members of the core team discussing and responding\nto some of the questions that have been asked thus far. Naturally, even if you\ncan\u2019t catch the live broadcast, the video will be available for streaming\nafterwards. \n\n|                                                   |                            | PST US | EST US | UTC Europe/Africa  | India                   | China            |\n|---------------------------------------------------|----------------------------|--------|--------|--------------------|-------------------------|------------------|\n| Dec 9th ([View in my timezone][dec9-broadcast])   | [Watch on YouTube][live-1] | 3-4pm  | 6-7pm  | 23:00-24:00        | 4:30-5:30am   (Dec 10)  | 7-8am   (Dec 10) |\n| Dec 12th ([View in my timezone][dec11-broadcast]) | [Watch on YouTube][live-2] | 4-5am  | 7-8am  | 12:00-13:00        | 5:30pm-6:30pm           | 8-9pm            |\n\n### Things to keep in mind\n\nPlease keep in mind that the Foundation is still in its final stages of being\nset up. This means that we are not able to talk about sponsors or specific\ndetails of legal documents at this time. \n\nAdditionally: none of the members of the [Rust Core Team] are lawyers, but we\nhave been working closely with lawyers. Many questions may end up touching on\nlegal issues; the [Rust Core Team] will do its best to communicate its\nunderstanding, but we'd like to keep disputes of the law out of this forum to\nthe extent that we can!\n\n[Rust Foundation Project Group]: https://www.rust-lang.org/governance/teams/core#project-foundation\n[Rust Core Team]: https://www.rust-lang.org/governance/teams/core\n[dec7-session]: https://everytimezone.com/s/213ef6bd\n[dec9-session]: https://everytimezone.com/s/f10ec849\n[dec11-session]: https://everytimezone.com/s/3c5c1b75\n[dec9-broadcast]: https://everytimezone.com/s/a0b6bb44\n[dec11-broadcast]: https://everytimezone.com/s/8e88716f\n[aug-blog]: https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html\n[issues]: https://github.com/rust-lang/foundation-faq-2020/issues\n[new]: https://github.com/rust-lang/foundation-faq-2020/issues/new?template=question.md\n[faq]: https://github.com/rust-lang/foundation-faq-2020/blob/main/FAQ.md\n[`answered`]: https://github.com/rust-lang/foundation-faq-2020/labels/answered\n\n[live-1]: https://www.youtube.com/watch?v=OmEcRWyT6Ak\n[live-2]: https://www.youtube.com/watch?v=42ZWHYWv9Ic\n", "release_dates": []}, {"name": "futures-rs", "description": "Zero-cost asynchronous programming in Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p align=\"center\">\n  <img alt=\"futures-rs\" src=\"https://raw.githubusercontent.com/rust-lang/futures-rs/gh-pages/assets/images/futures-rs-logo.svg?sanitize=true\" width=\"400\">\n</p>\n\n<p align=\"center\">\n  Zero-cost asynchronous programming in Rust\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/rust-lang/futures-rs/actions?query=branch%3Amaster\">\n    <img alt=\"Build Status\" src=\"https://img.shields.io/github/actions/workflow/status/rust-lang/futures-rs/ci.yml?branch=master\">\n  </a>\n\n  <a href=\"https://crates.io/crates/futures\">\n    <img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/futures.svg\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://docs.rs/futures\">\n    Documentation\n  </a> | <a href=\"https://rust-lang.github.io/futures-rs/\">\n    Website\n  </a>\n</p>\n\n`futures-rs` is a library providing the foundations for asynchronous programming in Rust.\nIt includes key trait definitions like `Stream`, as well as utilities like `join!`,\n`select!`, and various futures combinator methods which enable expressive asynchronous\ncontrol flow.\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nfutures = \"0.3\"\n```\n\nThe current `futures` requires Rust 1.56 or later.\n\n### Feature `std`\n\nFutures-rs works without the standard library, such as in bare metal environments.\nHowever, it has a significantly reduced API surface. To use futures-rs in\na `#[no_std]` environment, use:\n\n```toml\n[dependencies]\nfutures = { version = \"0.3\", default-features = false }\n```\n\n## License\n\nLicensed under either of [Apache License, Version 2.0](LICENSE-APACHE) or\n[MIT license](LICENSE-MIT) at your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2023-12-24T14:41:39Z", "2023-10-26T14:25:02Z", "2023-03-30T17:28:53Z", "2023-03-11T16:18:31Z", "2023-01-30T16:16:33Z", "2022-10-20T03:21:19Z", "2022-08-29T13:44:50Z", "2022-08-14T12:41:48Z", "2022-08-14T12:41:05Z", "2022-02-06T12:33:58Z", "2022-02-06T08:43:10Z", "2021-12-18T16:12:29Z", "2021-11-23T02:23:00Z", "2021-08-30T10:44:16Z", "2021-07-23T19:10:30Z", "2021-05-11T12:22:23Z", "2021-04-10T07:18:10Z", "2021-02-23T04:06:55Z", "2021-01-15T12:03:59Z", "2021-01-14T18:40:02Z", "2021-01-13T11:37:09Z", "2021-01-08T04:38:13Z", "2020-11-09T18:21:28Z", "2020-10-23T18:08:13Z", "2020-10-05T19:08:37Z", "2020-05-08T23:13:20Z", "2020-02-07T01:57:42Z", "2020-02-05T00:54:16Z", "2020-02-04T00:13:10Z", "2019-11-07T18:27:05Z"]}, {"name": "gedit-config", "description": "Gedit configuration for Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust for GEdit\n\nAdd syntax highlighting for Mozilla Rust in GtkSourceView (used by GEdit).\n\n__This has been upstreamed into GtkSourceView and is now included in applications like GEdit and GNOME Builder__\n\nIf you require a manual installation please follow the directions below.\n\n__Instructions for Ubuntu Linux 12.04+__\n\n1. Close all instances of GEdit\n\n2. Copy the included \"share\" folder into \"~/.local/\"\n\n3. Open a shell in \"~/.local/share/\" and run \"update-mime-database mime\"\n\n__Instructions for other GNU/Linux distributions__\n\n1. Close all instances of GEdit\n\n2. Obtain super-user access\n\n3. Copy the rust.lang file and place it in /usr/share/gtksourceview-3.0/language-specs/\n\nExample (after extracting the gedit-config-master.zip to the ~/Downloads directory):\n\n> sudo mv /Downloads/gedit-config/share/gtksourceview-3.0/language-specs/rust.lang /usr/share/gtksourceview-3.0/language-specs/\n\n## License\n\nRust is primarily distributed under the terms of both the MIT license\nand the Apache License (Version 2.0), with portions covered by various\nBSD-like licenses.\n\nSee [LICENSE-APACHE](LICENSE-APACHE), and [LICENSE-MIT](LICENSE-MIT) for details.\n", "release_dates": []}, {"name": "generate-manifest-list", "description": "Creates a list of manifests on static.rust-lang.org", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Generates manifest lists from static.rust-lang.org\n\n`cargo run` will query AWS credentials from the environment using `rusoto`'s default provider.\n\nThe `manifests.txt` will be put into the working directory which will have a list of\nstatic.rust-lang.org \"links\" to all known manifests, sorted by date.\n\n#### License\n\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "generic-associated-types-initiative", "description": "Generic Associated Types lang team initiative", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Generic Associated Types initiative\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\nThis page tracks the work of the Generic Associated Types (GATs) [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## \u26a1 Current focus: MVP \u26a1\n\nWe are currently focused on stabilizing a **Minimum Viable Product** form of GATs in [rust-lang/rust#96709]. [Learn more here!](./mvp.md) \n\n## How Can I Get Involved?\n\n* Check for \"help wanted\" issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-gats.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "getopts", "description": "The getopts repo maintained by the rust-lang project", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "getopts\n===\n\nA Rust library for option parsing for CLI utilities.\n\n[Documentation](https://docs.rs/getopts)\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ngetopts = \"0.2\"\n```\n\n## Contributing\n\nThe `getopts` library is used by `rustc`, so we have to be careful about not changing its behavior.\n", "release_dates": ["2023-11-15T19:53:32Z", "2023-11-15T19:53:11Z", "2019-05-02T02:17:40Z", "2018-07-05T23:19:15Z"]}, {"name": "gha-runner", "description": "Custom fork of the GitHub Actions runner", "language": "C#", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Changes in this fork\n\nThis fork applies two changes to [the official GitHub Actions\nrunner][official]:\n\n* A new environment variable used to configure the runner is added,\n  `RUST_WHITELISTED_EVENT_NAME`. When the variable is set, if a job has a\n  different event type than the one allowed by the variable the job will be\n  canceled before the build is started on the machine.\n* Self-updates are prevented, to avoid the changes in the fork from being\n  overridden.\n\n**This is intended to only be used by the Rust Infrastructure Team.** We have\nno plans to provide support or continue maintaining this fork, so please don't\nrely on it. Thanks!\n\n[official]: https://github.com/actions/runner\n\n---\n\n<p align=\"center\">\n  <img src=\"docs/res/github-graph.png\">\n</p>\n\n# GitHub Actions Runner\n\n[![Actions Status](https://github.com/actions/runner/workflows/Runner%20CI/badge.svg)](https://github.com/actions/runner/actions)\n\nThe runner is the application that runs a job from a GitHub Actions workflow. It is used by GitHub Actions in the [hosted virtual environments](https://github.com/actions/virtual-environments), or you can [self-host the runner](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-self-hosted-runners) in your own environment.\n\n## Get Started\n\nFor more information about installing and using self-hosted runners, see [Adding self-hosted runners](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/adding-self-hosted-runners) and [Using self-hosted runners in a workflow](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/using-self-hosted-runners-in-a-workflow)\n\nRunner releases:\n\n![win](docs/res/win_sm.png) [Pre-reqs](docs/start/envwin.md) | [Download](https://github.com/actions/runner/releases)  \n\n![macOS](docs/res/apple_sm.png)  [Pre-reqs](docs/start/envosx.md) | [Download](https://github.com/actions/runner/releases)  \n\n![linux](docs/res/linux_sm.png)  [Pre-reqs](docs/start/envlinux.md) | [Download](https://github.com/actions/runner/releases)\n\n## Contribute\n\nWe accept contributions in the form of issues and pull requests. The runner typically requires changes across the entire system and we aim for issues in the runner to be entirely self contained and fixable here. Therefore, we will primarily handle bug issues opened in this repo and we kindly request you to create all feature and enhancement requests on the [GitHub Feedback](https://github.com/community/community/discussions/categories/actions-and-packages) page. [Read more about our guidelines here](docs/contribute.md) before contributing.\n", "release_dates": ["2024-02-13T22:27:56Z", "2024-01-28T16:03:02Z", "2024-01-21T15:09:05Z", "2024-01-21T00:32:19Z", "2024-01-21T00:21:39Z", "2023-10-09T14:03:46Z", "2023-08-19T10:31:26Z", "2023-07-12T01:56:39Z", "2023-06-15T01:47:32Z", "2023-04-29T22:30:58Z", "2023-03-12T18:18:25Z", "2023-02-24T14:03:41Z", "2023-01-24T13:34:22Z", "2023-01-18T20:17:25Z", "2022-12-21T14:07:50Z", "2022-12-14T14:56:34Z", "2022-11-03T13:01:15Z", "2022-10-06T13:50:20Z", "2022-10-04T12:39:23Z", "2022-09-27T19:20:01Z", "2022-09-09T20:25:50Z", "2022-08-31T17:51:17Z", "2022-08-24T01:15:18Z", "2022-08-10T15:06:44Z", "2022-06-22T17:05:02Z", "2022-06-10T14:12:06Z", "2022-05-23T15:51:49Z", "2022-04-30T20:53:32Z", "2022-04-15T13:09:14Z", "2022-04-12T17:48:21Z"]}, {"name": "gha-self-hosted", "description": "GitHub Actions self-hosted runners infrastructure", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# GitHub Actions self-hosted runners infrastructure\n\nThis repository contains the infrastructure to run self-hosted GitHub Actions\nrunners for the Rust project. The tools and scripts here are meant to be used\nonly by the Rust Infrastructure Team: we do not intend to support running them\noutside our infra, and there might be breaking changes in the future.\n\nThe contents of this repository are released under either the MIT or the Apache\n2.0 license, at your option.\n\n## Deployment and operations\n\nThe production servers will pull this repository every 15 minutes, and if a\nchange in the `images/` directory was done images will also be rebuilt. Check\nout [the documentation][forge] on the forge for instructions on how to operate\nthe production deployment.\n\n[forge]: https://forge.rust-lang.org/infra/docs/gha-self-hosted.html\n", "release_dates": []}, {"name": "ghost-code-initiative", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# {{INITIATIVE_NAME}} initiative\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n \n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/{{INITIATIVE_NAME}}/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * {{INITIATIVE_NAME}} -> The display name of your group e.g. \"Inline ASM\".\n * {{INITIATIVE_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the {{INITIATIVE_NAME}} [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Proposal issue](https://github.com/rust-lang/lang-team/) |\n|                                       |       | [Charter](./CHARTER.md) |\n|                                       |       | [Tracking issue](https://github.com/rust-lang/rust/) |\n| [Experimental]                        | \ud83e\udd80    | [Evaluation](./evaluation.md) |\n|                                       |       | [RFC](./RFC.md) |\n| [Development]                         | \ud83d\udca4    | [Explainer](./explainer.md) | \n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [{{CHAT_PLATFORM}}][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: {{CHAT_LINK}}\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-{{INITIATIVE_SLUG}}.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "git2-rs", "description": "libgit2 bindings for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# git2-rs\n\n[Documentation](https://docs.rs/git2)\n\nlibgit2 bindings for Rust.\n\n```toml\n[dependencies]\ngit2 = \"0.18.2\"\n```\n\n## Rust version requirements\n\ngit2-rs works with stable Rust, and typically works with the most recent prior\nstable release as well.\n\n## Version of libgit2\n\nCurrently this library requires libgit2 1.7.2 (or newer patch versions). The\nsource for libgit2 is included in the libgit2-sys crate so there's no need to\npre-install the libgit2 library, the libgit2-sys crate will figure that and/or\nbuild that for you.\n\nYou can enable the Cargo feature `vendored-libgit2` to always compile and\nstatically link to a copy of libgit2. Sometimes the libgit2 on the system is\nrequired to be found and used even when `vendored-libgit2` is activated. In\nthis case, you shall set the environment variable `LIBGIT2_NO_VENDOR=1`.\n\n## Building git2-rs\n\n```sh\n$ git clone https://github.com/rust-lang/git2-rs\n$ cd git2-rs\n$ cargo build\n```\n\n### Automating Testing\n\nRunning tests and handling all of the associated edge cases on every commit\nproves tedious very quickly.  To automate tests and handle proper stashing and\nunstashing of unstaged changes and thus avoid nasty surprises, use the\npre-commit hook found [here][pre-commit-hook] and place it into the\n`.git/hooks/` with the name `pre-commit`.  You may need to add execution\npermissions with `chmod +x`.\n\nTo skip tests on a simple commit or doc-fixes, use `git commit --no-verify`.\n\n## Building on macOS 10.10+\n\nIf the `ssh` feature is enabled (and it is by default) then this library depends\non libssh2 which depends on OpenSSL. To get OpenSSL working follow the\n[`openssl` crate's instructions](https://github.com/sfackler/rust-openssl/blob/master/openssl/src/lib.rs#L31).\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in git2-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[pre-commit-hook]: https://gist.github.com/glfmn/0c5e9e2b41b48007ed3497d11e3dbbfa\n", "release_dates": []}, {"name": "glacier", "description": "A big 'ol pile of ICE.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Glacier\n\nA big \u2018ol pile of ICE.\n\n[![Build Status](https://github.com/rust-lang/glacier/workflows/Continuous%20Integration/badge.svg)](https://github.com/rust-lang/glacier/actions)\n\nThis repository is used to test internal compiler errors (also known as ICEs)\nin [Rust]. An ICE means that something went wrong, something unexpected. As\nsuch, sometimes, ICEs get randomly fixed. A compiler refactoring will remove\nthe odd code path, even if the point of the change wasn\u2019t to fix the bug.\n\n[Rust]: https://github.com/rust-lang/rust\n\nAs such, this repository is a collection of these bugs, and it runs on Rust\nnightly, once a day, through GitHub Actions. If any of the ICEs stop happening, the build\nwill fail, and we can close the associated bug.\n\n## Helping out\n\nContributing to Glacier is fairly easy:\n\n1. Check out [this list][ices] of bugs on the Rust issue tracker.\n2. Pick one.\n3. Create a file in `ices/` with the same number as the issue reporting the ICE.\n4. Copy the code that causes the ICE into your new file.\n5. (optional) Verify it works by running `rustup update nightly`, then\n   `cargo run $ISSUE_NUMBER` to run your ICE.\n6. Send a pull request!\n\nNote: Running this on Windows may give false positives and report some ICEs as fixed,\nuse either WSL or Linux for better accuracy.\n\n[ices]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AI-ICE+-label%3AE-needs-mcve+-label%3Aglacier+-label%3Arequires-debug-assertions\n\n## License\n\nMIT/Apache2, just like Rust.\n", "release_dates": []}, {"name": "gll", "description": "GLL parsing framework.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# GLL parsing framework\n\n[![Build Status](https://travis-ci.com/rust-lang/gll.svg?branch=master)](https://travis-ci.com/rust-lang/gll)\n[![Latest Version](https://img.shields.io/crates/v/gll.svg)](https://crates.io/crates/gll)\n[![Rust Documentation](https://img.shields.io/badge/api-rustdoc-blue.svg)](https://docs.rs/gll)\n\n## Usage\n\nEasiest way to get started is through `gll-macros`:\n```toml\n[dependencies]\ngll = \"0.0.2\"\ngll-macros = \"0.0.2\"\n```\n\nAs an example, this is what you might write for a JSON-like syntax,\nthat uses plain identifiers instead of string literals for field names,\nand allows values to be parenthesized Rust expressions:\n```rust\nmod json_like {\n    gll_macros::proc_macro_parser! {\n        Value =\n            | Null:\"null\"\n            | False:\"false\"\n            | True:\"true\"\n            | Literal:LITERAL\n            | Array:{ \"[\" elems:Value* % \",\" \"]\" }\n            | Object:{ \"{\" fields:Field* % \",\" \"}\" }\n            | InterpolateRust:{ \"(\" TOKEN_TREE+ \")\" }\n            ;\n        Field = name:IDENT \":\" value:Value;\n    }\n}\n```\nYou can also use a build script to generate the parser (**TODO**: document).\n\nTo parse a string with that grammar:\n```rust\nlet tokens = string.parse::<gll::grammer::proc_macro::TokenStream>().unwrap();\njson_like::Value::parse(tokens).unwrap().with(|value| {\n    // ...\n});\n```\n\n## Grammar\n\nAll grammars contain a set of named rules, with the syntax `Name = rule;`.\n(the order between the rules doesn't matter)\n\nRules are made out of:\n* **grouping**, using `{...}`\n* **string literals**, matching input characters / tokens exactly\n* **character ranges**: `'a'..='d'` is equivalent to `\"a\"|\"b\"|\"c\"|\"d\"`\n  * only in scannerless mode\n* **builtin rules**: `IDENT`, `PUNCT`, `LITERAL`, `TOKEN_TREE`\n  * only in proc macro mode\n* **named rules**, referred to by their name\n* **concatenation**: `A B` - \"`A` followed by `B`\"\n* **alternation**: `A | B` - \"either `A` or `B`\"\n* **optionals**: `A?` - \"either `A` or nothing\"\n* **lists**: `A*` - \"zero or more `A`s\", `A+` - \"one or more `A`s\"\n  * optional separator: `A* % \",\"` - \"comma-separated `A`s\"\n  * variant: `A* %% \",\"` - \"comma-separated `A`s\", with an optional trailing comma\n\nParts of a rule can be labeled with **field names**, to allow later access to them:\n\n`LetDecl = \"let\" pat:Pat { \"=\" init:Expr }? \";\";` produces:\n```rust\n// Note: generic parameters omitted for brevity.\nstruct LetDecl {\n    pat: Handle<Pat>,\n    init: Option<Handle<Expr>>,\n}\n```\nOne Rust-specific convention is that alternation fields are enum variants.\n\n`Expr = Lit:LITERAL | Add:{ a:Expr \"+\" b:Expr };` produces:\n```rust\nenum Expr {\n    Lit(Handle<LITERAL>),\n    Add {\n        a: Handle<Expr>,\n        b: Handle<Expr>,\n    },\n}\n```\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "glob", "description": "Support for matching file paths against Unix shell style patterns.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "glob\n====\n\nSupport for matching file paths against Unix shell style patterns.\n\n[![Continuous integration](https://github.com/rust-lang/glob/actions/workflows/rust.yml/badge.svg)](https://github.com/rust-lang/glob/actions/workflows/rust.yml)\n\n[Documentation](https://docs.rs/glob)\n\n## Usage\n\nTo use `glob`, add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nglob = \"0.3.1\"\n```\n\nIf you're using Rust 1.30 or earlier, or edition 2015, add this to your crate root:\n```rust\nextern crate glob;\n```\n\n## Examples\n\nPrint all jpg files in /media/ and all of its subdirectories.\n\n```rust\nuse glob::glob;\n\nfor entry in glob(\"/media/**/*.jpg\").expect(\"Failed to read glob pattern\") {\n    match entry {\n        Ok(path) => println!(\"{:?}\", path.display()),\n        Err(e) => println!(\"{:?}\", e),\n    }\n}\n```\n", "release_dates": ["2023-01-06T14:36:55Z", "2019-03-07T03:58:21Z"]}, {"name": "google-summer-of-code", "description": "Rust project ideas for Google Summer of Code", "language": null, "license": null, "readme": "# Rust Google Summer of Code 2024 project ideas\nThe Rust project has decided to join [Google Summer of Code 2024](https://summerofcode.withgoogle.com/) (GSoC) for the\nfirst time in 2024! This page contains project ideas that could benefit Rust maintainers and the whole Rust community.\n\nWe invite contributors that would like to participate in GSoC to examine the project list and use it as an inspiration\nfor your project proposals. **You can also propose a project that is not included in this list**, for example\nan improvement of some Rust crate. However, please note that ultimately, each project needs at least one mentor. We have\ntried to make sure that all the ideas listed here would have a mentor available, but if you propose a different project,\nyou might have to find someone who would be willing to mentor you.\n\nYou can find some tips for applying for a Rust GSoC project [here](proposal-guide.md).\n\nIf you would like to discuss projects ideas or anything related to the Rust Project's involvement in GSoC 2024, you can\ndo so on the [`#gsoc`](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc) Zulip stream.\n\nAs a reminder, the individual project sizes have the following expected amounts of hours:\n- Small: 90 hours\n- Medium: 175 hours\n- Large: 350 hours\n\nThe Rust Project can provide remote access to powerful cloud-based [Linux machines](https://forge.rust-lang.org/infra/docs/dev-desktop.html) to contributors that will be accepted for a GSoC 2024 Rust project. This can help overcome potential contribution barriers caused e.g. by an unsupported operating system or not performant enough hardware.\n\n## Index\n- **Rust Compiler**\n    - [Fast(er) register allocator for Cranelift](#Faster-register-allocator-for-Cranelift)\n    - [C codegen backend for rustc](#C-codegen-backend-for-rustc)\n    - [Extend annotate-snippets with features required by rustc](#Extend-annotate-snippets-with-features-required-by-rustc)\n- **Infrastructure**\n    - [Add support for multiple collectors to the Rust benchmark suite](#Add-support-for-multiple-collectors-to-the-Rust-benchmark-suite)\n    - [Improve Rust benchmark suite analysis & frontend](#Improve-Rust-benchmark-suite-analysis--frontend)\n    - [Improve bootstrap](#Improve-bootstrap)\n    - [Improve infrastructure automation tools](#Improve-infrastructure-automation-tools)\n    - [Rewrite the Rust compiler's integration tests in Rust](#rewrite-the-rust-compilers-integration-tests-in-rust)\n- **Cargo**\n    - [Move cargo shell completions to Rust](#Move-cargo-shell-completions-to-Rust)\n    - [Implement workspace publish in Cargo](#implement-workspace-publish-in-cargo)\n- **Rustfmt**\n    - [Improve rustfmt infrastructure and automation](#improve-rustfmt-infrastructure-and-automation)\n    - [Improve handling of silent failures in rustfmt](#improve-handling-of-silent-failures-in-rustfmt)\n- **Crate ecosystem**\n    - [Modernize the libc crate](#Modernize-the-libc-crate)\n    - [Allow customizing lint levels and reporting in `cargo-semver-checks`](#allow-customizing-lint-levels-and-reporting-in-cargo-semver-checks)\n    - [Add more lints to `cargo-semver-checks`](#add-more-lints-to-cargo-semver-checks)\n    - [Implement a cryptographic algorithm in RustCrypto](#implement-a-cryptographic-algorithm-in-rustcrypto)\n\n# Project ideas\nThe list of ideas is divided into several categories.\n\n## Rust Compiler\n\n### Fast(er) register allocator for Cranelift\n\n**Description**\n\nThe Rust compiler uses various codegen backends to generate executable code (LLVM, GCC, Cranelift).\nThe Cranelift backend should provide very quick compile times, however its performance is currently\nrelatively bottlenecked by its register allocator.\n\nThe goal of this project is to implement a new register allocator for Cranelift, that would be tuned for very\nquick compilation times (rather than optimal runtime performance of the compiled program). A first attempt could\nsimply create an allocator that spills all registers to stack, and a possible follow-up could be a linear scan allocator.\nIt would be useful to compare the compilation vs runtime performance trade-offs of various register allocation approaches.\n\n**Expected result**\n\nIt will be possible to use a new register allocator in Cranelift that will work at least for simple programs and that\nwill improve Rust compilation times.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Basic knowledge of assembly. Familiarity with compiler technologies is a bonus.\n\n**Project size**\n\nMedium or large.\n\n**Difficulty**\n\nMedium.\n\n**Mentors**\n- Amanieu d'Antras ([GitHub](https://github.com/Amanieu), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/143274-Amanieu))\n- Chris Fallin ([GitHub](https://github.com/cfallin), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/327027-Chris-Fallin))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20fast.20register.20allocator.20for.20Cranelift)\n- [Compiler team](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler)\n\n### C codegen backend for `rustc`\n\n**Description**\n\n`rustc` currently has three in-tree codegen backends: LLVM (the default), Cranelift, and GCC.\nThese live at <https://github.com/rust-lang/rust/tree/master/compiler>, as `rustc_codegen_*` crates.\n\nThe goal of this project is to add a new experimental `rustc_codegen_c` backend that could turn Rust's internal\nrepresentations into `C` code (i.e. transpile) and optionally invoke a `C` compiler to build it. This will allow Rust\nto use benefits of existing `C` compilers (better platform support, optimizations) in situations where the existing backends\ncannot be used.\n\n**Expected result**\n\nThe minimum viable product is to turn `rustc` data structures that represent a Rust program into `C` code, and write the\noutput to the location specified by `--out-dir`. This involves figuring out how to produce buildable `C` code from the\ninputs provided by `rustc_codegen_ssa::traits::CodegenBackend`.\n\nA second step is to have `rustc` invoke a `C` compiler on these produced files. This should be designed in a pluggable way,\nsuch that any `C` compiler can be dropped in.\n\n**Desirable skills**\n\nKnowledge of Rust and `C`, basic familiarity with compiler functionality.\n\n**Project size**\n\nLarge.\n\n**Difficulty**\n\nHard.\n\n**Mentor**\n- Trevor Gross ([GitHub](https://github.com/tgross35), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/532317-Trevor-Gross))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20C.20codegen.20backend.20for.20.60rustc.60)\n- [Compiler team](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler)\n\n### Extend `annotate-snippets` with features required by rustc\n\n**Description**\n\n`rustc` currently has incomplete support for using [`annotate-snippets`](https://github.com/rust-lang/annotate-snippets-rs/)\nto emit errors, but it doesn't support all the features that `rustc`'s built-in diagnostic rendering does. The goal\nof this project is to execute the `rustc` test suite using `annotate-snippets`, identify missing features or bugs,\nfix those, and repeat until at feature-parity.\n\n**Expected result**\n\nMore of the `rustc` test suite passes with `annotate-snippets`.\n\n**Desirable skills**\n\nKnowledge of Rust.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium or hard.\n\n**Mentor**\n- David Wood ([GitHub](https://github.com/davidtwco), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/116107-davidtwco))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20extend.20annotate-snippets)\n- [Compiler team](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler)\n\n## Infrastructure\n\n### Add support for multiple collectors to the Rust benchmark suite\n\n**Description**\n\nRust has an extensive [benchmark suite](https://github.com/rust-lang/rustc-perf) that measures the performance of the Rust compiler and Rust programs and\nvisualizes the results in an interactive web application. Currently, the benchmarks are gathered on a single physical\nmachine, however we are hitting the limits of how many benchmark runs we can perform per day on a single machine,\nwhich in turn limits the benchmark configurations that we can execute after each commit.\n\nThe goal of this project is to add support for splitting benchmark execution across multiple machines. This will\nrequire a refactoring of the existing suite and potentially also database schema modifications and implementation of new\nfeatures.\n\n**Expected result**\n\nIt will be possible to parallelize the execution of the benchmark suite across multiple machines.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust and database technologies (SQL).\n\n**Project size**\n\nMedium or large.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Jakub Ber\u00e1nek ([GitHub](https://github.com/kobzol), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/266526-Jakub-Ber%C3%A1nek))\n\n**Zulip stream**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20multiple.20collectors.20for.20Rust.20benchmark.20suite)\n- [Compiler performance working group](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance)\n\n### Improve Rust benchmark suite analysis & frontend\n\n**Description**\n\nRust has an extensive [benchmark suite](https://github.com/rust-lang/rustc-perf) that measures the performance of the Rust compiler and Rust programs and\nvisualizes the results in an interactive web application. It received a lot of new features in the past few years, however\nsome of them are not as polished as they could be.\n\nThe goal of this project is to improve both the frontend website and its various dashboards, and also profiling and analysis\ntools used to examine benchmarks in the suite. As an example, improvements could be made in the following areas:\n- Runtime benchmarks. The suite recently got support for runtime benchmarks that measure the performance of Rust programs\ncompiled by a specific version of `rustc` (the Rust compiler). There is a lot of features that could be added to get\nruntime benchmarks to the same support level as compile-time benchmarks, like adding and visualizing benchmark variance\nanalysis for them or adding runtime benchmark results to various dashboards in the frontend.\n- Analysis of multithreaded performance. The Rust compiler has recently gained support for using multiple threads for its\nfrontend, but there is no configuration in the suite to parametrize how many threads will be used, nor any analysis of\nhow well are threads utilized. It would be nice to add analysis and visualisation for this.\n- Some pages of the website still use HTML templates. It would be great to port these to the Vue-based frontend.\n\n**Expected result**\n\nNew analyses will be available in the Rust benchmark suite, and/or the suite website will contain more useful data and\nvisualizations.\n\n**Desirable skills**\n\nBasic knowledge of Rust, intermediate knowledge of frontend web technologies (TypeScript, HTML, CSS, Vue).\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Jakub Ber\u00e1nek ([GitHub](https://github.com/kobzol), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/266526-Jakub-Ber%C3%A1nek))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20improve.20Rust.20benchmark.20suite)\n- [Compiler performance working group](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance)\n\n### Improve bootstrap\n\n**Description**\n\nThe Rust compiler it bootstrapped using a complex set of scripts and programs generally called just `bootstrap`.\nThis tooling is constantly changing, and it has accrued a lot of technical debt. It could be improved in many areas, for example:\n\n- Design a new testing infrastructure and write more tests.\n- Write documentation.\n- Remove unnecessary hacks.\n\n**Expected result**\n\nThe `bootstrap` tooling will have less technical debt, more tests, and better documentation.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Knowledge of the Rust compiler bootstrap process is welcome, but not required.\n\n**Project size**\n\nMedium or large.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- AlbertLarsan68 ([GitHub](https://github.com/albertlarsan68), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/510016-Albert-Larsan))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20improve.20bootstrap)\n- [Bootstreap team](https://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap)\n\n### Improve infrastructure automation tools\n\n**Description**\n\nRust infrastructure uses many custom tools designed for automating pull request merging, handling discussions on Zulip,\nmanaging GitHub permissions etc. It would be a great help to Rust maintainers if these tools were improved. Here are a\nfew possible tasks that could be implemented:\n\n- Complete the implementation of [bors](https://github.com/rust-lang/bors), our new implementation of a merge queue\nbot for GitHub. It currently lacks support for performing merges (it can only perform so-called \"try builds\").\n- Add support for interacting with the Rust team calendar through Zulip, using e.g. some kind of GitHub app bot.\n- Add support for creating Zulip streams using the [Rust team data](https://github.com/rust-lang/team) repository.\n- Implement a GitHub app for [sync-team](https://github.com/rust-lang/sync-team), our tool for managing permissions of Rust maintainers.\n\n**Expected result**\n\nRust infrastructure management tools will receive new features, better documentation and tests.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Familiarity with GitHub APIs is a bonus.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentors**\n- Jakub Ber\u00e1nek ([GitHub](https://github.com/kobzol), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/266526-Jakub-Ber%C3%A1nek)) (bors, sync-team)\n- Jack Huey ([GitHub](https://github.com/jackh726), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/232957-Jack-Huey)) (triagebot)\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20improve.20infrastructure.20automation.20tools)\n- [Infra team](https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra)\n\n### Rewrite the Rust compiler's integration tests in Rust\n\n**Description**\n\nThe Rust compiler currently uses a so-called `run-make` test suite for complex test scenarios that involve other tools (e.g. bash utilities, linkers, etc.) in addition to the compiler itself. As the name suggests, these tests are based on `make`, and they invoke various tools to test complex situations.\n\nHowever, this approach has a number of drawbacks:\n\n- Because the tests are based on commandline tools like `nm` and `grep`, test authors and reviewers have to know the syntax of these tools, which can be quite arcane and is often interleaved with Makefile's own syntax.\n- Tests are hard to read because they are based on commandline tool exit codes.\n- It is quite hard to write these tests in a cross-platform way, since each implementation often behaves slightly differently. This leads to various issues and workarounds, especially on non-Unix platforms.\n- In many cases, when a test fails, it is quite hard to find where exactly it failed.\n- It is quite easy to write a test that looks fine, but actually does not test anything (e.g. testing that certain text is not present in the output passes because a program silently fails to produce any output).\n\nThe goal of this project is to replace these Makefile tests with a new test harness, where the tests would be written using regular Rust code. To support these tests, a support library should be implemented, which will be used by the tests to perform common actions, such as invoking the compiler, grepping files, checking symbols, finding tools, and providing readable error messages when a test fails. The support library can rely on commandline tools under the hood, but it should provide a nice Rust API that behaves the same on all platforms. The tests can be ported to the new framework one at a time, and the old Makefile framework can be removed once all tests are ported.\n\nThere is currently already an open [PR](https://github.com/rust-lang/rust/pull/113026) that has initiated some of what is\ndescribed here, however there is still a lot of follow-up work left to be done.\n\n**Expected result**\n\n`run-make` tests are replaced with an ergonomic and well-documented Rust-based test infrastructure. A fraction of the old\n`run-make` tests are ported to the new Rust-based test infrastructure.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust.\n\nFamiliarity with standard bash utilities and their behavior preferred (e.g. `grep`, `nm` and others).\n\n**Project size**\n\nMedium or large.\n\n**Difficulty**\n\nMedium.\n\n**Mentors**\n- Teapot ([GitHub](https://github.com/Teapot4195), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/583581-Teapot))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20rewrite.20the.20Rust.20compiler's.20integration.20tests.20in.20Rust)\n- [Compiler team](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler)\n\n**Related links**\n- [PR with initial test infrastructure](https://github.com/rust-lang/rust/pull/113026)\n\n## Cargo\n\n### Move cargo shell completions to Rust\n\n**Description**\n\nCargo maintains Bash and Zsh completions, but they are duplicated and limited in features.\nWe want to implement completions in Cargo itself, so we can have a single implementation with per-shell skins ([rust-lang/cargo#6645](https://github.com/rust-lang/cargo/issues/6645)).\nMost of the implementation will be in clap ([clap-rs/clap#3166](https://github.com/clap-rs/clap/issues/3166)), allowing many tools to benefit from this improvement.\n\n**Expected result**\n\nCargo shell completion will be extended and implemented in Rust.\nThis will allow access to easier to add new commands / arguments to commands, richer results, and easier testing.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Shell familiarity is a bonus.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Ed Page ([GitHub](https://github.com/epage), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/424212-Ed-Page))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20move.20cargo.20shell.20completions.20to.20Rust)\n- [Cargo team](https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo)\n\n### Implement workspace publish in Cargo\n\n**Description**\n\nToday, developers can group Rust packages into a workspace to make it easier to operate on all of them at once.\nHowever, `cargo package` and `cargo publish` do not support operating on workspaces ([rust-lang/cargo#1169](https://github.com/rust-lang/cargo/issues/1169)).\n\nThe goal of this project is to modify the Cargo build tool to add support for packaging and publishing Cargo workspaces.\n\n**Expected result**\n\nMilestone 1: `cargo package` can be run, with verification, with the standard package selection flags\nMilestone 2: `cargo publish` can do the same as above, but also serially post the `.crate` files to the registry when done,\nreporting to the user what was posted/failed if interrupted.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Ed Page ([GitHub](https://github.com/epage), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/424212-Ed-Page))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20implement.20workspace.20publish.20in.20Cargo)\n- [Cargo team](https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo)\n\n## Rustfmt\n\n### Improve rustfmt infrastructure and automation\n\n**Description**\n\nRustfmt is the code formatter for Rust code. Currently, to ensure stability, rustfmt uses unit tests that ensure a source file do not get reformatted unexpectedly. Additionally, there is a tool (currently a shell script) called [`diffcheck`](https://github.com/rust-lang/rustfmt/blob/master/ci/check_diff.sh#L187-L216) that gets run to check potentially unexpected changes across different large codebases. We would like to improve our tooling around that, namely improving the diffcheck job to include more crates, improve reporting (with HTML output, like a mini [crater](https://crater-reports.s3.amazonaws.com/pr-114776-1/index.html), which runs compiler changes against all Rust crates published to crates.io), potentially rewriting the job in Rust, and reliability.\n\nRustfmt currently has a versioning system that gates unstable changes behind `Version=Two`, and the diffcheck job may be less reliable to report changes to `Version=One` when changes to unstable formatting are introduced. We'd like to see this story improved to make our test system more robust.\n\n**Expected result**\n\nA more robust and reliable infrastructure for testing the rustfmt codebase, potentially rewritten in Rust, with HTML output.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Knowledge of CI and automation welcomed.\n\n**Project size**\n\nSmall or medium, depending on the scale proposed.\n\n**Difficulty**\n\nSmall or medium.\n\n**Mentor**\n- Yacin Tmimi ([GitHub](https://github.com/ytmimi), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/441976-Yacin-Tmimi))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20improve.20rustfmt.20infrastructure.20and.20automation)\n\n**Related Links**\n- [Previous discussion around the idea](https://rust-lang.zulipchat.com/#narrow/stream/357797-t-rustfmt/topic/meeting.202023-01-08/near/411836200)\n\n### Improve handling of silent failures in rustfmt\n\n**Description**\n\nThe internal formatting mechanisms in rustfmt has issues tracking the context when issues occur when applying formatting. This can lead to silent failures and limit the ability for rustfmt to retry formatting. A potential solution would be to refactor the [`Rewrite`](https://doc.rust-lang.org/stable/nightly-rustc/rustfmt_nightly/rewrite/trait.Rewrite.html) trait, currently used to format various AST structures, which could improve how we handle situations where it failed to format.\n\nMore details in the discussions linked below.\n\n**Expected result**\n\nImproved user experience with less silent failures (provide context as to how and why formatting failed) and allowing rustfmt to retry formatting under more contexts.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Understanding of AST (Abstract Syntax Tree) structures are welcomed, but not required.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Yacin Tmimi ([GitHub](https://github.com/ytmimi), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/441976-Yacin-Tmimi))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20improve.20handling.20of.20silent.20failures.20in.20rustfmt)\n\n**Related Links**\n- [Previous discussion around the idea #1](https://rust-lang.zulipchat.com/#narrow/stream/357797-t-rustfmt/topic/meeting.202023-05-22/near/3604084950)\n- [Previous discussion around the idea #2](https://rust-lang.zulipchat.com/#narrow/stream/357797-t-rustfmt/topic/meeting.202023-01-08/near/412181455)\n\n## Crate ecosystem\n\n### Modernize the libc crate\n\n**Description**\n\nThe [libc](https://github.com/rust-lang/libc) crate is one of the oldest crates of the Rust ecosystem, long predating\nRust 1.0. Additionally, it is one of the most widely used crates in the ecosystem (#4 most downloaded on crates.io).\nThis combinations means that the current version of the libc crate (`v0.2`) is very conservative with breaking changes and\nremains backwards-compatible with all Rust compilers since Rust 1.13 (released in 2016).\n\nThe language has evolved a lot since Rust 1.13, and we would like to make use of these features in libc. The main one is\nsupport for `union` types to proper expose C unions.\n\nAt the same time there, is a backlog of desired breaking changes tracked in [this issue](https://github.com/rust-lang/libc/issues/3248). Some of these come from\nthe evolution of the underlying platforms, some come from a desire to use newer language features, while others are\nsimple mistakes that we cannot correct without breaking existing code.\n\nThe goal of this project is to prepare and release the next major version of the libc crate.\n\n**Expected result**\n\nThe libc crate is cleaned up and modernized, and released as version 0.3.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust.\n\n**Project size**\n\nMedium.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Amanieu d'Antras ([GitHub](https://github.com/Amanieu), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/143274-Amanieu))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20modernize.20the.20libc.20crate)\n- [Library team](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs)\n\n### Allow customizing lint levels and reporting in `cargo-semver-checks`\n\n**Description**\n\n[`cargo-semver-checks`](https://github.com/obi1kenobi/cargo-semver-checks) is a linter for semantic versioning. It ensures\nthat Rust crates adhere to semantic versioning by looking for breaking changes in APIs.\n\nCurrently, semver lints have a hardcoded level (e.g. breaking changes are \"major\") and are always reported at a \"deny\"\nlevel: if the release being scanned is a minor version bump, any lints at \"major\" level are reported as errors.\n\nThis can be insufficient for some projects, which may desire to:\n- configure some lints to have a different level \u2014 e.g. turn a semver \"major\" lint into a \"minor\" lint, or vice versa\n- turn some lints into warnings instead of hard errorrs \u2014 reporting level \"warn\" instead of the default \"deny\"\n- disable some lints altogether by setting their reporting to \"allow\"\n- (stretch goal) allow customizing lint levels and reporting on a per-module basis\n\nHaving such functionality would allow `cargo-semver-checks` to ship additional lints that target changes whose semver\nimplications are defined by project maintainers on a per-project basis. An example of such a change is bumping the\nminimum supported Rust version (MSRV) of a project \u2014 some projects consider it a semver-major change, whereas for\nothers it is minor or patch.\n\nThis functionality would also allow us to write lints similar to clippy's [\"suspicious\" lint group](https://doc.rust-lang.org/nightly/clippy/lints.html#suspicious),\nflagging code that is suspect (and deserving of closer scrutiny) but possibly still correct. Such lints should be\nopt-in / \"warn\" tier to avoid annoying users, which is something this project would enable us to do.\n\n**Expected result**\n\n`cargo-semver-checks` lints will be configurable via the [`package.metadata`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-metadata-table) table in `Cargo.toml`\nusing a clear, simple and expressive way. The design will be suitable for both single-crate projects and workspaces.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust.\n\n**Project size**\n\nMedium or large.\n\n**Difficulty**\n\nMedium.\n\n**Mentor**\n- Predrag Gruevski ([GitHub](https://github.com/obi1kenobi/), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/474284-Predrag-Gruevski-(he-him)))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20allow.20customizing.20.60cargo-semver-checks.60.20lint.20levels)\n\n**Related links**\n- [GitHub issue](https://github.com/obi1kenobi/cargo-semver-checks/issues/537)\n\n### Add more lints to `cargo-semver-checks`\n\n**Description**\n\n[`cargo-semver-checks`](https://github.com/obi1kenobi/cargo-semver-checks) is a linter for semantic versioning. It ensures\nthat Rust crates adhere to semantic versioning by looking for breaking changes in APIs.\n\nIt can currently catch ~60 different kinds of breaking changes, so there are hundreds of kinds of breaking changes it\nstill cannot catch! The goal of this project is to extend its abilities, so that it can catch and prevent more breaking changes, by:\n- adding more lints, which are expressed as queries over a database-like schema ([playground](https://play.predr.ag/rustdoc))\n- extending the schema, so more Rust functionality is made available for linting\n\n**Expected result**\n\n`cargo-semver-checks` will contain new lints, together with test cases that both ensure the lint triggers when expected\nand does not trigger in situations where it shouldn't (AKA false-positives).\n\n**Desirable skills**\n\nIntermediate knowledge of Rust. Familiarity with databases, query engines, or query language design is welcome but\nnot required.\n\n**Project size**\n\nSmall or large (depends on how many lints will be implemented).\n\n**Difficulty**\n\nSmall or medium (depends on the choice of implemented lints or schema extensions).\n\n**Mentor**\n- Predrag Gruevski ([GitHub](https://github.com/obi1kenobi/), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/474284-Predrag-Gruevski-(he-him)))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20add.20more.20lints.20to.20.60cargo-semver-checks.60)\n\n**Related Links**\n- [Playground where you can try querying Rust data](https://play.predr.ag/rustdoc)\n- [GitHub issues describing not-yet-implemented lints](https://github.com/obi1kenobi/cargo-semver-checks/issues?q=is%3Aissue+is%3Aopen+label%3AE-mentor+label%3AA-lint+)\n- [Opportunities to add new schema, enabling new lints](https://github.com/obi1kenobi/cargo-semver-checks/issues/241)\n- [Query engine adapter](https://github.com/obi1kenobi/trustfall-rustdoc-adapter)\n\n### Implement a cryptographic algorithm in RustCrypto\n\n**Description**\n\nThe [RustCrypto Project](https://github.com/RustCrypto) maintains pure Rust implementations of\nhundreds of cryptographic algorithms, organized into repositories by algorithm type, e.g.\nblock ciphers, stream ciphers, hash functions.\n\nEach of these repositories contains a tracking issue identifying specific algorithms which currently\nlack an implementation, some of which are linked in the \"Related Links\" section below. Interested\nstudents can look through these issues and identify an algorithm which is currently unimplemented\nwhich sounds interesting to them, and then implement it as part of this project.\n\nAlternatively, instead of implementing a new algorithm from scratch, a student could potentially\nchoose to implement some significant unit of functionality in an existing algorithm implementation\nwith an open associated issue on our GitHub trackers, an example of which might be\n[implementing hardware acceleration support for our \"bignum\" library](https://github.com/RustCrypto/crypto-bigint/issues/1).\n\n**Expected result**\n\nOne or more Rust crates/libraries containing a new implementation of a cryptographic algorithm implemented in pure Rust.\n\n**Desirable skills**\n\nIntermediate knowledge of Rust.\n\nA background in mathematics, and some prior knowledge of cryptography, is helpful but not required,\nand we can provide guidance and review to ensure code is correct and securely implemented.\n\n**Project size**\n\nWill vary depending on the algorithm/project selected, but ideally small.\n\nNote that while the code size of the deliverable may not be significant, due to the nature of\ncryptographic work it will typically still involve significant effort and iteration to deliver an\nimplementation which is correct and secure.\n\n**Difficulty**\n\nWill also vary depending on the algorithm/project selected, but expected difficulty is medium/hard, as noted above.\n\n**Mentor**\n- Tony Arcieri ([GitHub](https://github.com/tarcieri/), [Zulip](https://rust-lang.zulipchat.com/#narrow/dm/132721-Tony-Arcieri))\n\n**Zulip streams**\n- [Idea discussion](https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc/topic/Idea.3A.20implement.20a.20cryptographic.20algorithm.20in.20RustCrypto)\n\n**Related Links**\n- [Potential AEAD cipher projects](https://github.com/RustCrypto/AEADs/issues/1)\n- [Potential block cipher projects](https://github.com/RustCrypto/block-ciphers/issues/1)\n- [Potential elliptic curve projects](https://github.com/RustCrypto/elliptic-curves/issues/114)\n- [Potential hash function projects](https://github.com/RustCrypto/hashes/issues/1)\n- [Potential signature algorithm projects](https://github.com/RustCrypto/signatures/issues/8)\n- [Potential stream cipher projects](https://github.com/RustCrypto/stream-ciphers/issues/219)\n- [Potential SSH-related projects](https://github.com/RustCrypto/SSH/issues/2)\n", "release_dates": []}, {"name": "governance", "description": "The home for Rust's governance documentation, such as team charters.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Governance Documentation\n\nThis repository aims to be the home of governance documentation, such as team\ncharters, for the Rust project. Currently, we are in the process of populating\nthis repository.\n\n## Charter submission process\n\nThe Rust teams are in the process of writing charters this year. Currently, we\nare not looking for new teams to submit charter proposals directly to this\nrepository; please reach out to the core team if you are interested in proposing\na new team.\n\nFor the existing Rust teams, you can take the [template](teams/_template/charter.md), and begin\nfilling it out. Please file issues or reach out to the core team via email if\nyou have questions. We'll also be reaching out to teams ourselves to help out,\nbut getting a head start is great.\n\nOnce you have a draft ready, we're expecting to discuss these via PRs to this\nrepository, so please open one, placing your file under a folder (e.g.,\n`libs/libs.md` or `compiler/performance.md`).\n", "release_dates": []}, {"name": "hashbrown", "description": "Rust port of Google's SwissTable hash map", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "hashbrown\n=========\n\n[![Build Status](https://github.com/rust-lang/hashbrown/actions/workflows/rust.yml/badge.svg)](https://github.com/rust-lang/hashbrown/actions)\n[![Crates.io](https://img.shields.io/crates/v/hashbrown.svg)](https://crates.io/crates/hashbrown)\n[![Documentation](https://docs.rs/hashbrown/badge.svg)](https://docs.rs/hashbrown)\n[![Rust](https://img.shields.io/badge/rust-1.63.0%2B-blue.svg?maxAge=3600)](https://github.com/rust-lang/hashbrown)\n\nThis crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of SwissTable can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\nSince Rust 1.36, this is now the `HashMap` implementation for the Rust standard\nlibrary. However you may still want to use this crate instead since it works\nin environments without `std`, such as embedded systems and kernels.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\n\n## [Change log](CHANGELOG.md)\n\n## Features\n\n- Drop-in replacement for the standard library `HashMap` and `HashSet` types.\n- Uses [AHash](https://github.com/tkaitchuck/aHash) as the default hasher, which is much faster than SipHash.\n  However, AHash does *not provide the same level of HashDoS resistance* as SipHash, so if that is important to you, you might want to consider using a different hasher.\n- Around 2x faster than the previous standard library `HashMap`.\n- Lower memory usage: only 1 byte of overhead per entry instead of 8.\n- Compatible with `#[no_std]` (but requires a global allocator with the `alloc` crate).\n- Empty hash maps do not allocate any memory.\n- SIMD lookups to scan multiple hash entries in parallel.\n\n## Performance\n\nCompared to the previous implementation of `std::collections::HashMap` (Rust 1.35).\n\nWith the hashbrown default AHash hasher:\n\n| name                        | oldstdhash ns/iter | hashbrown ns/iter | diff ns/iter |  diff % | speedup |\n| :-------------------------- | :----------------: | ----------------: | :----------: | ------: | ------- |\n| insert_ahash_highbits       |       18,865       |             8,020 |   -10,845    | -57.49% | x 2.35  |\n| insert_ahash_random         |       19,711       |             8,019 |   -11,692    | -59.32% | x 2.46  |\n| insert_ahash_serial         |       19,365       |             6,463 |   -12,902    | -66.63% | x 3.00  |\n| insert_erase_ahash_highbits |       51,136       |            17,916 |   -33,220    | -64.96% | x 2.85  |\n| insert_erase_ahash_random   |       51,157       |            17,688 |   -33,469    | -65.42% | x 2.89  |\n| insert_erase_ahash_serial   |       45,479       |            14,895 |   -30,584    | -67.25% | x 3.05  |\n| iter_ahash_highbits         |       1,399        |             1,092 |     -307     | -21.94% | x 1.28  |\n| iter_ahash_random           |       1,586        |             1,059 |     -527     | -33.23% | x 1.50  |\n| iter_ahash_serial           |       3,168        |             1,079 |    -2,089    | -65.94% | x 2.94  |\n| lookup_ahash_highbits       |       32,351       |             4,792 |   -27,559    | -85.19% | x 6.75  |\n| lookup_ahash_random         |       17,419       |             4,817 |   -12,602    | -72.35% | x 3.62  |\n| lookup_ahash_serial         |       15,254       |             3,606 |   -11,648    | -76.36% | x 4.23  |\n| lookup_fail_ahash_highbits  |       21,187       |             4,369 |   -16,818    | -79.38% | x 4.85  |\n| lookup_fail_ahash_random    |       21,550       |             4,395 |   -17,155    | -79.61% | x 4.90  |\n| lookup_fail_ahash_serial    |       19,450       |             3,176 |   -16,274    | -83.67% | x 6.12  |\n\n\nWith the libstd default SipHash hasher:\n\n| name                      | oldstdhash ns/iter | hashbrown ns/iter | diff ns/iter |  diff % | speedup |\n| :------------------------ | :----------------: | ----------------: | :----------: | ------: | ------- |\n| insert_std_highbits       |       19,216       |            16,885 |    -2,331    | -12.13% | x 1.14  |\n| insert_std_random         |       19,179       |            17,034 |    -2,145    | -11.18% | x 1.13  |\n| insert_std_serial         |       19,462       |            17,493 |    -1,969    | -10.12% | x 1.11  |\n| insert_erase_std_highbits |       50,825       |            35,847 |   -14,978    | -29.47% | x 1.42  |\n| insert_erase_std_random   |       51,448       |            35,392 |   -16,056    | -31.21% | x 1.45  |\n| insert_erase_std_serial   |       87,711       |            38,091 |   -49,620    | -56.57% | x 2.30  |\n| iter_std_highbits         |       1,378        |             1,159 |     -219     | -15.89% | x 1.19  |\n| iter_std_random           |       1,395        |             1,132 |     -263     | -18.85% | x 1.23  |\n| iter_std_serial           |       1,704        |             1,105 |     -599     | -35.15% | x 1.54  |\n| lookup_std_highbits       |       17,195       |            13,642 |    -3,553    | -20.66% | x 1.26  |\n| lookup_std_random         |       17,181       |            13,773 |    -3,408    | -19.84% | x 1.25  |\n| lookup_std_serial         |       15,483       |            13,651 |    -1,832    | -11.83% | x 1.13  |\n| lookup_fail_std_highbits  |       20,926       |            13,474 |    -7,452    | -35.61% | x 1.55  |\n| lookup_fail_std_random    |       21,766       |            13,505 |    -8,261    | -37.95% | x 1.61  |\n| lookup_fail_std_serial    |       19,336       |            13,519 |    -5,817    | -30.08% | x 1.43  |\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\nhashbrown = \"0.14\"\n```\n\nThen:\n\n```rust\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"one\");\n```\n## Flags\nThis crate has the following Cargo features:\n\n- `nightly`: Enables nightly-only features including: `#[may_dangle]`.\n- `serde`: Enables serde serialization support.\n- `rkyv`: Enables rkyv serialization support.\n- `rayon`: Enables rayon parallel iterator support.\n- `raw`: Enables access to the experimental and unsafe `RawTable` API.\n- `inline-more`: Adds inline hints to most functions, improving run-time performance at the cost\n  of compilation time. (enabled by default)\n- `ahash`: Compiles with ahash as default hasher. (enabled by default)\n- `allocator-api2`: Enables support for allocators that support `allocator-api2`. (enabled by default)\n\n## License\n\nLicensed under either of:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n", "release_dates": []}, {"name": "highfive", "description": "Github hooks to provide an encouraging atmosphere for new contributors", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "Highfive\n========\n\nThis repository is no longer running on rust-lang infrastructure; instead the\nrelevant code lives in [triagebot](https://github.com/rust-lang/triagebot).\nThis repository has been archived to retain it for the future.\n\n----\n\nGitHub hooks to provide an encouraging atmosphere for new\ncontributors. Highfive assigns pull requests to users based on rules\nin configuration files. You can see Highfive in action in several Rust\nrepositories. See the [rust-lang/rust pull\nrequests](https://github.com/rust-lang/rust/pulls), for example.\n\nThis project drives the [@rust-highfive][] bot and was originally a fork of\n[servo/highfive][], used by Servo and Servo's [@highfive][] bot.  For more\nhistory see the comments in [#35][].\n\n[@rust-highfive]: https://github.com/rust-highfive\n[servo/highfive]: https://github.com/servo/highfive\n[@highfive]: https://github.com/highfive\n[#35]: https://github.com/rust-lang-nursery/highfive/issues/35\n\n### Table of Contents\n\n1. [Installation](#installation)\n1. [Testing](#testing)\n1. [Adding a Project](#adding-a-project)\n1. [Enabling a Repository](#enabling-a-repository)\n1. [Local Development](#local-development)\n1. [License](#license)\n\nInstallation\n=======\n\nTo install `highfive`, you just need to execute the `setup.py` script or use\n`pip` directly. Both commands have to be executed from the directory where\n`setup.py` is located.\n\n    $ python setup.py install\n\nor\n\n    $ pip install . # the dot is important ;)\n\n\nTesting\n=======\n\nBefore running tests, make sure the test-requirements are installed by running the following command:\n\n    $ pip install -r test-requirements.txt\n\n\nOnce the dependencies are installed, you can run all tests by\nexecuting:\n\n    $ pytest\n\nTests are labeled as \"unit\", \"integration\", and \"hermetic\". All unit\ntests are hermetic, but only some integration tests are hermetic. A\nnon-hermetic test makes network requests. To run only hermetic tests\ndo:\n\n    $ pytest -m hermetic\n\nHermetic tests are run in PR builds. All tests are run in daily cron\nbuilds.\n\nAdding a Project\n================\n\nTo make rust-highfive interact with a new repo, add a configuration file in\n`highfive/configs`, with a filename of the form `reponame.json`. The file should look like:\n\n```\n{\n    \"groups\":{\n        \"all\": [\"@username\", \"@otheruser\"],\n        \"subteamname\": [\"@subteammember\", \"@username\"]\n    },\n    \"dirs\":{\n        \"dirname\":  [\"subteamname\", \"@anotheruser\"]\n    },\n    \"contributing\": \"http://project.tld/contributing_guide.html\",\n    \"expected_branch\": \"develop\",\n    \"mentions\": {\n        \"src/doc\": {\n            \"message\": \"Documentation was changed.\",\n            \"reviewers\": [\"@DocumentationReviewPerson\"]\n        },\n        \"test.rs\": {\n            \"message\": \"Some changes occurred in a test file.\",\n            \"reviewers\": [\"@TestReviewPerson\"]\n        }\n    },\n    \"new_pr_labels\": [\"S-waiting-for-review\"]\n}\n```\n\nThe `groups` section allows you to alias lists of usernames. You should\nspecify at least one user in the group \"all\". Other keys are optional.\n\nIn the `dirs` section, you map directories of the repository to users or\ngroups who're eligible to review PRs. This section can be left\nblank.\n\n`contributing` specifies the contribution guide link in the message which\nwelcomes new contributors to the repository. If `contributing` is not\npresent, [the contributing chapter of the rustc-dev-guide][rustcontrib]\nwill be linked instead.\n\nIf PRs should be filed against a branch other than `master`, specify the\ncorrect destination in the `expected_branch` field. If `expected_branch` is\nleft out, highfive will assume that PRs should be filed against `master`. \nThe bot posts a warning on any PR that targets an unexpected branch.\n\nThe `mentions` section is used by Highfive when new PRs are\ncreated. If a PR diff modifies files in the paths configured in the\n`mentions` section, a comment is made with the given message that\nmentions the specified users. Mentions paths have either one or two\nbehaviors.\n- Every path in a diff is checked whether it begins with a path in the\n  mentions list. If there is a match, the mention comment is made.\n- If a path in the diff ends with a mentions path ending in `.rs`, the\n  mention is a match, and a comment is made.\n\n`new_pr_labels` contains a list of labels to apply to each new PR. If it's left\nout or empty, no new labels will be applied.\n\nEnabling a Repository\n---------------\n\nOnce the PR updating the repository configuration has been merged, run the\n`update-webhooks.py` script at the root of this repository:\n\n```\n$ python3 update-webhooks.py\n```\n\nThe script requires the `GITHUB_TOKEN` environment variable to be set to a\nvalid GitHub API token, and it will make sure the configuration of all the\nrepositories you have admin access to is correct.\n\nLocal Development\n-----------------\n\nYou can run Highfive on your machine and configure a repository to use\nyour local instance. Here is one approach for running a local server:\n\n- Create a [virtualenv](https://virtualenv.pypa.io/en/stable/) to isolate the\n  Python environment from the rest of the system, and install highfive in it:\n  ```\n  $ virtualenv -p python2 env\n  $ env/bin/pip install -e .\n  ```\n- Run the highfive command to start a development server on port 8000:\n  ```\n  $ env/bin/highfive\n  ```\n- Your Highfive instance will need to be reachable from outside of your\n  machine. One way to do this is to use [ngrok](https://ngrok.com/) to get a\n  temporary domain name that proxies to your Highfive instance. Additionally,\n  you will be able to use ngrok's inspector to easily examine and replay the\n  requests.\n- Set up the webhook by following the instructions in [Enabling a\n  Repo](#enabling-a-repo), substituting your local Highfive IP address\n  or domain name and port number (if necessary).\n- Obtain an OAuth token. In the account you are creating the token in,\n  go to https://github.com/settings/tokens. Grant access to the repository scope.\n- Put the authorization information obtained in the previous step into a file\n  named `.env` in the top of the repository (i.e., the directory containing\n  this file). Here is a template of what it should look like:\n  ```\n  HIGHFIVE_GITHUB_TOKEN=your-token\n  ```\n  _Do not check in this file or commit your OAuth token to a\n  repository in any other way. It is a secret._\n\nHere are some details to be aware of:\n\n- For Highfive to know how to select reviewers for your repository,\n  you need a configuration file in\n  [highfive/configs](/highfive/configs).\n- Highfive ignores comments from the integration user near the top of\n  `new_commment` in [highfive/newpr.py](/highfive/newpr.py).\n\n[rustcontrib]: https://rustc-dev-guide.rust-lang.org/contributing.html\n\nDocker\n------\n\nAlternatively, you can build a Docker image that runs Highfive.\n\n```\n$ docker build -t highfive .\n```\n\nTo run a container, you must mount a config file. Assuming you are\nlaunching a container from a directory containing a config file, you\ncan do the following.\n\n```\n$ docker run -d --rm --name highfive -p 8000:80 -e HIGHFIVE_GITHUB_TOKEN=token -e HIGHFIVE_WEBHOOK_SECRET=secret highfive\n```\n\nAt this point, Highfive is accessible at http://localhost:8080.\n\nLicense\n=======\n\nHighfive is licensed under the terms of both the MIT License and the\nApache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n", "release_dates": []}, {"name": "hoedown", "description": "Standards compliant, fast, secure markdown processing library in C", "language": "C", "license": {"key": "isc", "name": "ISC License", "spdx_id": "ISC", "url": "https://api.github.com/licenses/isc", "node_id": "MDc6TGljZW5zZTEw"}, "readme": "Hoedown\n=======\n\n[![Build Status](https://travis-ci.org/hoedown/hoedown.png?branch=master)](https://travis-ci.org/hoedown/hoedown)\n\n`Hoedown` is a revived fork of [Sundown](https://github.com/vmg/sundown),\nthe Markdown parser based on the original code of the\n[Upskirt library](http://fossil.instinctive.eu/libupskirt/index)\nby Natacha Port\u00e9.\n\nFeatures\n--------\n\n*\t**Fully standards compliant**\n\n\t`Hoedown` passes out of the box the official Markdown v1.0.0 and v1.0.3\n\ttest suites, and has been extensively tested with additional corner cases\n\tto make sure its output is as sane as possible at all times.\n\n*\t**Massive extension support**\n\n\t`Hoedown` has optional support for several (unofficial) Markdown extensions,\n\tsuch as non-strict emphasis, fenced code blocks, tables, autolinks,\n\tstrikethrough and more.\n\n*\t**UTF-8 aware**\n\n\t`Hoedown` is fully UTF-8 aware, both when parsing the source document and when\n\tgenerating the resulting (X)HTML code.\n\n*\t**Tested & Ready to be used on production**\n\n\t`Hoedown` has been extensively security audited, and includes protection against\n\tall possible DOS attacks (stack overflows, out of memory situations, malformed\n\tMarkdown syntax...).\n\n\tWe've worked very hard to make `Hoedown` never leak or crash under *any* input.\n\n\t**Warning**: `Hoedown` doesn't validate or post-process the HTML in Markdown documents.\n\tUnless you use `HTML_ESCAPE` or `HTML_SKIP`, you should strongly consider using a\n\tgood post-processor in conjunction with Hoedown to prevent client-side attacks.\n\n*\t**Customizable renderers**\n\n\t`Hoedown` is not stuck with XHTML output: the Markdown parser of the library\n\tis decoupled from the renderer, so it's trivial to extend the library with\n\tcustom renderers. A fully functional (X)HTML renderer is included.\n\n*\t**Optimized for speed**\n\n\t`Hoedown` is written in C, with a special emphasis on performance. When wrapped\n\ton a dynamic language such as Python or Ruby, it has shown to be up to 40\n\ttimes faster than other native alternatives.\n\n*\t**Zero-dependency**\n\n\t`Hoedown` is a zero-dependency library composed of some `.c` files and their\n\theaders. No dependencies, no bullshit. Only standard C99 that builds everywhere.\n\n*\t**Additional features**\n\n\t`Hoedown` comes with a fully functional implementation of SmartyPants,\n\ta separate autolinker, escaping utilities, buffers and stacks.\n\nBindings\n--------\n\nYou can see a community-maintained list of `Hoedown` bindings at\n[the wiki](https://github.com/hoedown/hoedown/wiki/Bindings). There is also a\n[migration guide](https://github.com/hoedown/hoedown/wiki/Migration-Guide)\navailable for authors of Sundown bindings.\n\nHelp us\n-------\n\n`Hoedown` is all about security. If you find a (potential) security vulnerability in the\nlibrary, or a way to make it crash through malicious input, please report it to us by\nemailing the private [Hoedown Security](mailto:hoedown-security@googlegroups.com)\nmailing list. The `Hoedown` security team will review the vulnerability and work with you\nto reproduce and resolve it.\n\nUnicode character handling\n--------------------------\n\nGiven that the Markdown spec makes no provision for Unicode character handling, `Hoedown`\ntakes a conservative approach towards deciding which extended characters trigger Markdown\nfeatures:\n\n*\tPunctuation characters outside of the U+007F codepoint are not handled as punctuation.\n\tThey are considered as normal, in-word characters for word-boundary checks.\n\n*\tWhitespace characters outside of the U+007F codepoint are not considered as\n\twhitespace. They are considered as normal, in-word characters for word-boundary checks.\n\nInstall\n-------\n\nJust typing `make` will build `Hoedown` into a dynamic library and create the `hoedown`\nand `smartypants` executables, which are command-line tools to render Markdown to HTML\nand perform SmartyPants, respectively.\n\nIf you are using [CocoaPods](http://cocoapods.org), just add the line `pod 'hoedown'` to your Podfile and call `pod install`.\n\nOr, if you prefer, you can just throw the files at `src` into your project.\n", "release_dates": []}, {"name": "homu", "description": "A bot that integrates with GitHub and your favorite continuous integration service", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Homu\n\n[![Hommando]][Akemi Homura]\n\nHomu is a bot that integrates with GitHub and your favorite continuous\nintegration service such as [Travis CI], [Appveyor] or [Buildbot].\n\n[Hommando]: https://i.imgur.com/j0jNvHF.png\n[Akemi Homura]: https://wiki.puella-magi.net/Homura_Akemi\n[Buildbot]: http://buildbot.net/\n[Travis CI]: https://travis-ci.org/\n[Appveyor]: https://www.appveyor.com/\n\n## Why is it needed?\n\nLet's take Travis CI as an example. If you send a pull request to a repository,\nTravis CI instantly shows you the test result, which is great. However, after\nseveral other pull requests are merged into the `master` branch, your pull\nrequest can *still* break things after being merged into `master`. The\ntraditional continuous integration solutions don't protect you from this.\n\nIn fact, that's why they provide the build status badges. If anything pushed to\n`master` is completely free from any breakage, those badges will **not** be\nnecessary, as they will always be green. The badges themselves prove that there\ncan still be some breakages, even when continuous integration services are used.\n\nTo solve this problem, the test procedure should be executed *just before the\nmerge*, not just after the pull request is received. You can manually click the\n\"restart build\" button each time before you merge a pull request, but Homu can\nautomate this process. It listens to the pull request comments, waiting for an\napproval comment from one of the configured reviewers. When the pull request is\napproved, Homu tests it using your favorite continuous integration service, and\nonly when it passes all the tests, it is merged into `master`.\n\nNote that Homu is **not** a replacement of Travis CI, Buildbot or Appveyor. It\nworks on top of them. Homu itself doesn't have the ability to test pull\nrequests.\n\n## Influences of bors\n\nHomu is largely inspired by [bors]. The concept of \"tests should be done just\nbefore the merge\" came from bors. However, there are also some differences:\n\n1. Stateful: Unlike bors, which intends to be stateless, Homu is stateful. It\n   means that Homu does not need to retrieve all the information again and again\n   from GitHub at every run. This is essential because of GitHub's rate\n   limiting. Once it downloads the initial state, the following changes are\n   delivered with the [Webhooks] API.\n2. Pushing over polling: Homu prefers pushing wherever possible. The pull\n   requests from GitHub are retrieved using Webhooks, as stated above. The test\n   results from Buildbot are pushed back to Homu with the [HttpStatusPush]\n   feature. This approach improves the overall performance and the response\n   time, because the bot is informed about the status changes immediately.\n\nAnd also, Homu has more features, such as `rollup`, `try`, and the Travis CI &\nAppveyor support.\n\n[bors]: https://github.com/graydon/bors\n[Webhooks]: https://developer.github.com/webhooks/\n[HttpStatusPush]: http://docs.buildbot.net/current/manual/cfg-statustargets.html#httpstatuspush\n\n## Usage\n\n### How to install\n\n```sh\n$ sudo apt-get install python3-venv python3-wheel\n$ python3 -m venv .venv\n$ . .venv/bin/activate\n$ pip install -U pip\n$ git clone https://github.com/rust-lang/homu.git\n$ pip install -e homu\n```\n\n### How to configure\n\nIn the following instructions, `HOST` refers to the hostname (or IP address)\nwhere you are running your custom homu instance. `PORT` is the port the service\nis listening to and is configured in `web.port` in `cfg.toml`. `NAME` refers to\nthe name of the repository you are configuring homu for.\n\n1. Copy `cfg.sample.toml` to `cfg.toml`. You'll need to edit this file to set up\n   your configuration. The following steps explain where you can find important\n   config values. \n\n2. Create a GitHub account that will be used by Homu. You can also use an\n   existing account. In the [developer settings][settings], go to \"OAuth\n   Apps\" and create a new application:\n   - Make note of the \"Client ID\" and \"Client Secret\"; you will need to put them in\n   your `cfg.toml`.\n   - The OAuth Callback URL should be `http://HOST:PORT/callback`.\n   - The homepage URL isn't necessary; you could set `http://HOST:PORT/`.\n   \n3. Go back to the developer settings of the GitHub account you created/used in the\n   previous step. Go to \"Personal access tokens\". Click \"Generate new token\" and\n   choose the \"repo\" and \"user\" scopes. Put the token value in your `cfg.toml`.\n   \n4. Add your new GitHub account as a Collaborator to the GitHub repo you are\n   setting up homu for. This can be done in repo (NOT user) \"Settings\", then\n   \"Collaborators\". Enable \"Write\" access.\n   \n     4.1. Make sure you login as the new GitHub account and that you **accept \n          the collaborator invitation** you just sent! \n\n5. Add a Webhook to your repository. This is done under repo (NOT user)\n   \"Settings\", then \"Webhooks\". Click \"Add webhook\", then set:\n   - Payload URL: `http://HOST:PORT/github`\n   - Content type: `application/json`\n   - Secret: The same as `repo.NAME.github.secret` in `cfg.toml`\n   - Events: click \"Let me select individual events\", then pick\n       `Issue comments`, `Pull requests`, `Pushes`, `Statuses`, `Check runs`\n\n6. Add a Webhook to your continuous integration service, if necessary. You don't\n   need this if using Travis/Appveyor.\n   - Buildbot \n\n     Insert the following code to the `master.cfg` file:\n\n     ```python\n     from buildbot.status.status_push import HttpStatusPush\n\n     c['status'].append(HttpStatusPush(\n        serverUrl='http://HOST:PORT/buildbot',\n        extra_post_params={'secret': 'repo.NAME.buildbot.secret in cfg.toml'},\n     ))\n     ```\n\n7. Go through the rest of your `cfg.toml` and uncomment (and change, if needed)\n   parts of the config you'll need.\n\n[settings]: https://github.com/settings/apps\n[travis]: https://travis-ci.org/profile/info\n\n### How to run\n\n```sh\n$ . .venv/bin/activate\n$ homu\n```\n", "release_dates": []}, {"name": "impl-trait-initiative", "description": "Impl trait lang team initiative", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Impl trait initiative\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the Impl trait [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThis is an **umbrella initiative** and, as such, it covers a number of subprojects.\n\n| Subproject                               | Issue    | Progress | State | [Stage]        |\n|------------------------------------------|----------|----------|-------|----------------|\n| `impl Trait` in fns and inherent methods | #123     | \u25b0\u25b0\u25b0\u25b0\u25b0\u25b0   | \u2705     | [Stabilized]   |\n| type alias impl trait                    | [#63063] | \u25b0\u25b0\u25b0\u25b0\u25b1\u25b1   | \ud83e\udd80    | [Development]  |\n| impl trait in traits, impls              | #123     | \u25b0\u25b0\u25b1\u25b1\u25b1\u25b1   | \ud83e\udd80    | [Experimental] |\n| impl trait in bindings                   | [#63065] | \u25b0\u25b0\u25b0\u25b1\u25b1\u25b1   | \ud83d\udca4    | [Development]  |\n| impl trait with multiple types           |          | \u25b0\u25b1\u25b1\u25b1\u25b1\u25b1   | \ud83d\udca4    | [Experimental] |\n| existential lifetimes                    |          | \u25b0\u25b1\u25b1\u25b1\u25b1\u25b1   | \ud83d\udca4    | [Experimental] |\n\n[#63063]: https://github.com/rust-lang/rust/issues/63063\n[#63065]: https://github.com/rust-lang/rust/issues/63065\n[stage]: https://lang-team.rust-lang.org/initiatives/process/stages.html\n\nKey:\n\n* \u2705 -- project complete\n* \ud83e\udd80 -- project in progress\n* \ud83d\udca4 -- project not under active development\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\n\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-impl-trait.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "impl-trait-utils", "description": "Utilities for working with impl traits in Rust.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![Latest Version]][crates.io] [![Documentation]][docs.rs] [![GHA Status]][GitHub Actions] ![License]\n\nUtilities for working with `impl Trait`s in Rust.\n\n## `trait_variant`\n\n`trait_variant` generates a specialized version of a base trait that uses `async fn` and/or `-> impl Trait`.\n\nFor example, if you want a [`Send`][rust-std-send]able version of your trait, you'd write:\n\n```rust\n#[trait_variant::make(IntFactory: Send)]\ntrait LocalIntFactory {\n    async fn make(&self) -> i32;\n    fn stream(&self) -> impl Iterator<Item = i32>;\n    fn call(&self) -> u32;\n}\n```\n\nThe `trait_variant::make` would generate an additional trait called `IntFactory`:\n\n```rust\nuse core::future::Future;\n\ntrait IntFactory: Send {\n   fn make(&self) -> impl Future<Output = i32> + Send;\n   fn stream(&self) -> impl Iterator<Item = i32> + Send;\n   fn call(&self) -> u32;\n}\n```\n\nImplementers can choose to implement either `LocalIntFactory` or `IntFactory` as appropriate.\n\nFor more details, see the docs for [`trait_variant::make`].\n\n[`trait_variant::make`]: https://docs.rs/trait-variant/latest/trait_variant/attr.make.html\n\n#### License and usage notes\n\nLicensed under either of [Apache License, Version 2.0](LICENSE-APACHE) or\n[MIT license](LICENSE-MIT) at your option.\n\n[GitHub Actions]: https://github.com/rust-lang/impl-trait-utils/actions\n[GHA Status]: https://github.com/rust-lang/impl-trait-utils/actions/workflows/rust.yml/badge.svg\n[crates.io]: https://crates.io/crates/trait-variant\n[Latest Version]: https://img.shields.io/crates/v/trait-variant.svg\n[Documentation]: https://img.shields.io/docsrs/trait-variant\n[docs.rs]: https://docs.rs/trait-variant\n[License]: https://img.shields.io/crates/l/trait-variant.svg\n[rust-std-send]: https://doc.rust-lang.org/std/marker/trait.Send.html\n", "release_dates": ["2024-01-05T02:32:30Z", "2023-12-21T06:35:28Z", "2023-12-21T06:34:58Z", "2023-12-15T20:21:44Z"]}, {"name": "infra-team", "description": "Coordination repository for the Rust infra team", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Infrastructure team\n\nThis repository is the home of the Rust Infrastructure team.\n\nContents of this repository are dual-licensed under the MIT and the Apache 2.0\nlicenses.\n\n## Meeting minutes\n\nMinutes of the team's meetings are available on this repo:\n\n* [Weekly meetings](minutes/weekly-meetings)\n\n## Policies\n\n* [Policy on broken nightlies](policies/broken-nightlies.md)\n\n## Guidelines\n\n* [Rust Infrastructure hosting for static websites](guidelines/static-websites.md)\n\n## Documentation\n\n* Services hosted by the Infrastructure Team:\n  * [Crater agents](docs/services/crater-agents.md)\n  * [Discord moderation bot](docs/services/discord-mods-bot.md)\n  * [docs.rs](docs/services/docs-rs.md)\n  * [Monitoring](docs/services/monitoring.md)\n* Hosts managed by the Infrastructure Team:\n  * [Bastion server](docs/hosts/bastion.md)\n  * [rust-bots](docs/hosts/rust-bots.md)\n", "release_dates": []}, {"name": "initiative-template", "description": "A template for lang-team initiatives", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# {{INITIATIVE_NAME}} initiative\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n \n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/{{INITIATIVE_NAME}}/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * {{INITIATIVE_NAME}} -> The display name of your group e.g. \"Inline ASM\".\n * {{INITIATIVE_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the {{INITIATIVE_NAME}} [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Proposal issue](https://github.com/rust-lang/lang-team/) |\n|                                       |       | [Charter](./CHARTER.md) |\n|                                       |       | [Tracking issue](https://github.com/rust-lang/rust/) |\n| [Experimental]                        | \ud83e\udd80    | [Evaluation](./evaluation.md) |\n|                                       |       | [RFC](./RFC.md) |\n| [Development]                         | \ud83d\udca4    | [Explainer](./explainer.md) | \n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [{{CHAT_PLATFORM}}][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: {{CHAT_LINK}}\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-{{INITIATIVE_SLUG}}.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "jemalloc", "description": "No longer used", "language": "C", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "jemalloc is a general purpose malloc(3) implementation that emphasizes\nfragmentation avoidance and scalable concurrency support.  jemalloc first came\ninto use as the FreeBSD libc allocator in 2005, and since then it has found its\nway into numerous applications that rely on its predictable behavior.  In 2010\njemalloc development efforts broadened to include developer support features\nsuch as heap profiling, Valgrind integration, and extensive monitoring/tuning\nhooks.  Modern jemalloc releases continue to be integrated back into FreeBSD,\nand therefore versatility remains critical.  Ongoing development efforts trend\ntoward making jemalloc among the best allocators for a broad range of demanding\napplications, and eliminating/mitigating weaknesses that have practical\nrepercussions for real world applications.\n\nThe COPYING file contains copyright and licensing information.\n\nThe INSTALL file contains information on how to configure, build, and install\njemalloc.\n\nThe ChangeLog file contains a brief summary of changes for each release.\n\nURL: http://www.canonware.com/jemalloc/\n", "release_dates": []}, {"name": "jobserver-rs", "description": null, "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# jobserver-rs\n\nAn implementation of the GNU make jobserver for Rust\n\n[![Crates.io](https://img.shields.io/crates/v/jobserver.svg?maxAge=2592000)](https://crates.io/crates/jobserver)\n\n[Documentation](https://docs.rs/jobserver)\n\n## Usage\n\nFirst, add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\njobserver = \"0.1\"\n```\n\nNext, add this to your crate:\n\n```rust\nextern crate jobserver;\n```\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in jobserver-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "kate-config", "description": "Kate configuration for Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "Development of the Rust syntax highlighting file for Kate and\ncompatible editors has moved to the KTextEditor library (part\nof KDE Frameworks, and used by Kate and others) on kde.org.\n\n\nTo get it, grab a KDE Frameworks / KTextEditor release v5.11.0\nor higher from https://download.kde.org or your distro, or:\n\n- Clone git://anongit.kde.org/ktexteditor.git\n\n- Browse ktexteditor.git here:\n  http://quickgit.kde.org/?p=ktexteditor.git\n\nrust.xml is in src/syntax/data.\n\n\nIf you'd like to contribute a patch, use one of:\n\n- https://git.reviewboard.kde.org/ (repository ktexteditor)\n- https://bugs.kde.org (product frameworks-ktexteditor)\n\nThe license is MIT as per the Rust license, and preserved in\nthe file.\n", "release_dates": []}, {"name": "keyword-generics-initiative", "description": "Public repository for the Rust keyword generics initiative", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# keyword generics initiative\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n \n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/keyword generics/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * keyword generics -> The display name of your group e.g. \"Inline ASM\".\n * keyword-generics-initiative -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * Zulip -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the keyword generics [initiative]! To learn more\nabout what we are trying to do, and to find out the people who are doing it,\ntake a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage              | State | Artifact(s)                                                         |\n|--------------------|-------|---------------------------------------------------------------------|\n| [Proposal]         | \ud83e\udd80    | [Proposal issue](https://github.com/rust-lang/lang-team/issues/162) |\n|                    |       | [Charter](./CHARTER.md)                                             |\n|                    |       | [Tracking issue](https://github.com/rust-lang/rust/)                |\n| [Experimental]     | \ud83e\udd80    | [Evaluation](./evaluation/)                                         |\n|                    |       | [RFC](./RFC.md)                                                     |\n| [Development]      | \ud83d\udca4    | [Explainer](./explainer/)                                           |\n| [Feature complete] | \ud83d\udca4    | Stabilization report                                                |\n| [Stabilized]       | \ud83d\udca4    |                                                                     |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/328082-t-lang.2Fkeyword-generics\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-keyword-generics-initiative.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "lang-team", "description": "Home of the Rust lang team", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# lang-team\n\nA home for the Rust language design team. The language design team is\ngenerally responsible for decisions involving the design of the Rust\nlanguage itself, such as its syntax, semantics, or specification. This\nrepository houses planning documents, meeting minutes, and other such\nthings.\n\n## Rendered form\n\nVisit the rendered form of this site at [lang-team.rust-lang.org](https://lang-team.rust-lang.org/).\n\n## Code of Conduct and licensing\n\nAll interactions on this repository (whether on issues, PRs, or\nelsewhere) are governed by the [Rust Code of\nConduct](CODE_OF_CONDUCT.md).\n\nFurther, all content on this repository is subject to the standard\n[Rust](LICENSE-MIT) [licensing](LICENSE-APACHE).\n", "release_dates": []}, {"name": "leadership-council", "description": "Home of the Rust Leadership Council", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rust Project Leadership Council\n\nThis repo is the home for documentation related to the [Leadership Council][governance page] for the Rust Programming Language Project (a.k.a. the Council).\n\nThe Council was established by [RFC #3392][rfc]. The RFC describes the Council at a high-level as the following:\n\n> This RFC establishes a Leadership Council as the successor of the core team and the new governance structure through which Rust Project members collectively confer the authority to ensure successful operation of the Project. The Leadership Council delegates much of this authority to teams (which includes subteams, working groups, etc.) who autonomously make decisions concerning their purviews. However, the Council retains some decision-making authority, outlined and delimited by this RFC.\n>\n> The Council [is] composed of representatives delegated to the Council from each top-level team.\n>\n> The Council is charged with the success of the Rust Project as a whole. The Council will identify work that needs to be done but does not yet have a clear owner, create new teams to accomplish this work, hold existing teams accountable for the work in their purview, and coordinate and adjust the organizational structure of Project teams.\n\nFor more information on *why* the Council exists, please refer to [the supplementary material to RFC #3392][motivation] that addresses this topic.\n\n[governance page]: https://www.rust-lang.org/governance/teams/leadership-council\n[motivation]: https://rust-lang.github.io/rfcs/3392-leadership-council/motivation.html\n[rfc]: https://rust-lang.github.io/rfcs/3392-leadership-council.html\n\n## Resources\n\n### Zulip\n\nIf you'd like to participate in conversations about governance or otherwise interact with the Council in some form, you can find the Council on the [#council stream on Zulip][zulip].\n\nThe Council may create additional streams for specific projects. Consult the stream list for any that start with \"council\".\n\nThere are several private streams reserved for topics that must be kept private. See the [private decision guidelines][private-decisions] for the types of discussions that may need to be private. Council members should avoid the private channels unless absolutely necessary. These channels are:\n\n* `#council/private` \u2014 Private discussions among the council.\n* `#council-mods-private` \u2014 Private discussions involving both the council and moderation teams.\n* `#foundation-council-private` \u2014 Private discussions involving both the council and the Foundation.\n* `#council-project-directors/private` \u2014 Private discussions involving both the council and Foundation Project Directors.\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/392734-council\n[private-decisions]: https://forge.rust-lang.org/governance/council.html#decisions-that-the-council-must-necessarily-make-privately\n\n### Council Meetings\n\nThe Council has synchronous meetings to discuss topics and make decisions. See [`procedures/synchronous-meetings.md`] for more information.\n\n[`procedures/synchronous-meetings.md`]: https://github.com/rust-lang/leadership-council/blob/main/procedures/synchronous-meetings.md\n\n### HackMD\n\nThe Council has a public HackMD workspace at <https://hackmd.io/team/rust-leadership-council>. This workspace provides a home for Council members to collaborate and create draft documents. More permanent documentation should go in this repository or the Rust Forge.\n\nSince this HackMD workspace is using the free service, it does not support private documents. If you need to draft a private document, create it in your personal workspace and use private channels to share the link.\n\n### Governance documentation\n\nThe current set of policies that govern the Council are documented on the Forge in the [Leadership Council chapter][forge-council]. When governance policy changes are approved (via the RFC process), the Forge governance documentation should be updated to reflect those changes.\n\n[forge-council]: https://forge.rust-lang.org/governance/council.html\n\n### Committees\n\nThe Council may create committees to delegate work or decision authority. Committee charters and membership are tracked in the [`committees/`] directory. The [`TEMPLATE.md`] file in that directory contains a starter template for defining a committee. A committee can be created with the full consensus of the Council.\n\n[`committees/`]: https://github.com/rust-lang/leadership-council/tree/main/committees\n[`TEMPLATE.md`]: https://github.com/rust-lang/leadership-council/blob/main/committees/TEMPLATE.md\n\n### Issue and work tracking\n\nThe GitHub issue tracker at <https://github.com/rust-lang/leadership-council/issues> is used for tracking work items, a backlog of tasks, and questions from the public. More information about the issue tracker may be found in [`procedures/issues.md`].\n\n[`procedures/issues.md`]: https://github.com/rust-lang/leadership-council/blob/main/procedures/issues.md\n\n### Schedule tracking\n\nThe calendar of upcoming events and deadlines is tracked in <https://hackmd.io/@rust-leadership-council/H1bb7yPs2>. More information about schedule tracking may be found in [`procedures/schedule.md`].\n\n[`procedures/schedule.md`]: https://github.com/rust-lang/leadership-council/blob/main/procedures/schedule.md\n\n\n## License\n\nContent in this repository is licensed under the [MIT license](LICENSE-MIT) and the [Apache license 2.0](LICENSE-APACHE).\n", "release_dates": []}, {"name": "libbacktrace", "description": "A C library that may be linked into a C/C++ program to produce symbolic backtraces", "language": "C", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# libbacktrace\nA C library that may be linked into a C/C++ program to produce symbolic backtraces\n\nInitially written by Ian Lance Taylor <iant@golang.org>.\n\nThis is version 1.0.\nIt is likely that this will always be version 1.0.\n\nThe libbacktrace library may be linked into a program or library and\nused to produce symbolic backtraces.\nSample uses would be to print a detailed backtrace when an error\noccurs or to gather detailed profiling information.\n\nThe libbacktrace library is provided under a BSD license.\nSee the source files for the exact license text.\n\nThe public functions are declared and documented in the header file\nbacktrace.h, which should be #include'd by a user of the library.\n\nBuilding libbacktrace will generate a file backtrace-supported.h,\nwhich a user of the library may use to determine whether backtraces\nwill work.\nSee the source file backtrace-supported.h.in for the macros that it\ndefines.\n\nAs of January 2018, libbacktrace only supports ELF, PE/COFF, and XCOFF\nexecutables with DWARF debugging information.\nThe library is written to make it straightforward to add support for\nother object file and debugging formats.\n\nThe library relies on the C++ unwind API defined at\nhttps://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html\nThis API is provided by GCC.\n", "release_dates": []}, {"name": "libc", "description": "Raw bindings to platform APIs for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# libc - Raw FFI bindings to platforms' system libraries\n\n[![GHA Status]][GitHub Actions] [![Cirrus CI Status]][Cirrus CI] [![Latest Version]][crates.io] [![Documentation]][docs.rs] ![License]\n\n`libc` provides all of the definitions necessary to easily interoperate with C\ncode (or \"C-like\" code) on each of the platforms that Rust supports. This\nincludes type definitions (e.g. `c_int`), constants (e.g. `EINVAL`) as well as\nfunction headers (e.g. `malloc`).\n\nThis crate exports all underlying platform types, functions, and constants under\nthe crate root, so all items are accessible as `libc::foo`. The types and values\nof all the exported APIs match the platform that libc is compiled for.\n\nMore detailed information about the design of this library can be found in its\n[associated RFC][rfc].\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/HEAD/text/1291-promote-libc.md\n\n## v0.3 Roadmap\n\nThe main branch is now for v0.3 which has some breaking changes.\n\nFor v0.2, please submit PRs to the `libc-0.2` branch instead.\nWe will stop making new v0.2 releases once we release v0.3 on crates.io.\n\nSee the [tracking issue](https://github.com/rust-lang/libc/issues/3248) for details.\n\n## Usage\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies]\nlibc = \"0.2\"\n```\n\n## Features\n\n* `std`: by default `libc` links to the standard library. Disable this\n  feature to remove this dependency and be able to use `libc` in `#![no_std]`\n  crates.\n\n* `extra_traits`: all `struct`s implemented in `libc` are `Copy` and `Clone`.\n  This feature derives `Debug`, `Eq`, `Hash`, and `PartialEq`.\n\n* `const-extern-fn`: Changes some `extern fn`s into `const extern fn`s.\n  If you use Rust >= 1.62, this feature is implicitly enabled.\n  Otherwise it requires a nightly rustc.\n\n## Rust version support\n\nThe minimum supported Rust toolchain version is currently **Rust 1.71.0**\n(libc does not currently have any policy regarding changes to the minimum\nsupported Rust version; such policy is a work in progress).\n\n## Platform support\n\nYou can see the platform(target)-specific docs on [docs.rs], select a platform you want to see.\n\nSee\n[`ci/build.sh`](https://github.com/rust-lang/libc/blob/HEAD/ci/build.sh)\nfor the platforms on which `libc` is guaranteed to build for each Rust\ntoolchain. The test-matrix at [GitHub Actions] and [Cirrus CI] show the\nplatforms in which `libc` tests are run.\n\n<div class=\"platform_docs\"></div>\n\n## License\n\nThis project is licensed under either of\n\n* [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0)\n  ([LICENSE-APACHE](https://github.com/rust-lang/libc/blob/HEAD/LICENSE-APACHE))\n\n* [MIT License](https://opensource.org/licenses/MIT)\n  ([LICENSE-MIT](https://github.com/rust-lang/libc/blob/HEAD/LICENSE-MIT))\n\nat your option.\n\n## Contributing\n\nWe welcome all people who want to contribute. Please see the [contributing\ninstructions] for more information.\n\n[contributing instructions]: https://github.com/rust-lang/libc/blob/HEAD/CONTRIBUTING.md\n\nContributions in any form (issues, pull requests, etc.) to this project\nmust adhere to Rust's [Code of Conduct].\n\n[Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `libc` by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[GitHub Actions]: https://github.com/rust-lang/libc/actions\n[GHA Status]: https://github.com/rust-lang/libc/workflows/CI/badge.svg\n[Cirrus CI]: https://cirrus-ci.com/github/rust-lang/libc\n[Cirrus CI Status]: https://api.cirrus-ci.com/github/rust-lang/libc.svg\n[crates.io]: https://crates.io/crates/libc\n[Latest Version]: https://img.shields.io/crates/v/libc.svg\n[Documentation]: https://docs.rs/libc/badge.svg\n[docs.rs]: https://docs.rs/libc\n[License]: https://img.shields.io/crates/l/libc.svg\n", "release_dates": ["2024-01-31T18:58:58Z", "2024-01-07T13:48:06Z", "2023-12-10T15:13:33Z", "2023-11-05T11:43:39Z", "2023-10-06T22:05:00Z", "2023-09-21T15:27:30Z", "2023-06-25T18:24:42Z", "2023-06-09T09:34:45Z", "2023-06-04T14:06:52Z", "2023-05-08T12:18:55Z", "2023-05-06T16:29:51Z", "2023-04-20T13:56:01Z", "2023-04-04T13:07:29Z", "2023-03-09T13:10:34Z", "2022-12-22T09:07:32Z", "2022-12-03T03:39:13Z", "2022-10-25T23:08:16Z", "2022-10-24T11:00:35Z", "2022-10-10T10:56:59Z", "2022-09-29T12:23:32Z", "2022-09-19T13:09:06Z", "2022-08-16T15:55:31Z", "2022-08-12T12:17:42Z", "2022-08-11T14:03:44Z", "2022-08-09T23:19:25Z", "2022-08-09T21:58:04Z", "2022-08-09T21:57:19Z", "2022-05-17T20:56:15Z", "2022-04-29T12:10:12Z", "2021-11-20T13:45:48Z"]}, {"name": "libm", "description": "A port of MUSL's libm to Rust.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# `libm`\n\nA port of [MUSL]'s libm to Rust.\n\n[MUSL]: https://musl.libc.org/\n\n## Goals\n\nThe short term goal of this library is to [enable math support (e.g. `sin`, `atan2`) for the\n`wasm32-unknown-unknown` target][wasm] (cf. [rust-lang/compiler-builtins][pr]). The longer\nterm goal is to enable [math support in the `core` crate][core].\n\n[wasm]: https://github.com/rust-lang/libm/milestone/1\n[pr]: https://github.com/rust-lang/compiler-builtins/pull/248\n[core]: https://github.com/rust-lang/libm/milestone/2\n\n## Already usable\n\nThis crate is [on crates.io] and can be used today in stable `#![no_std]` programs.\n\nThe API documentation can be found [here](https://docs.rs/libm).\n\n[on crates.io]: https://crates.io/crates/libm\n\n## Benchmark\n[benchmark]: #benchmark\n\nThe benchmarks are located in `crates/libm-bench` and require a nightly Rust toolchain.\nTo run all benchmarks:\n\n> cargo +nightly bench --all\n\n## Contributing\n\nPlease check [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n  http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the\nwork by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n", "release_dates": []}, {"name": "libs-team", "description": "The home of the library team", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Libs Team\n\nA home for the Rust library team. The library team maintains and manages the Rust standard library, and makes sure crates in the Rust organization are maintained.\n\n## Quick facts\n\n- **Where to find us:** You can reach out to us on [Zulip](https://rust-lang.zulipchat.com).\n- **Calendar:** You can find Libs meetings on our [Google Calendar](https://calendar.google.com/calendar/embed?src=9kuu8evq4eh6uacm262k0phri8%40group.calendar.google.com). You can also subscribe to the [ICS](https://calendar.google.com/calendar/ical/9kuu8evq4eh6uacm262k0phri8%40group.calendar.google.com/public/basic.ics) to keep up to date.\n\n## Docs for contributors and reviewers\n\nSee [The Standard Library Dev Guide](https://github.com/rust-lang/std-dev-guide) for documentation on how to work on the standard library itself.\n\n<!--\noudated :(\n## A broad picture\n\nSee [this project board](https://github.com/rust-lang/libs-team/projects/2) for a big picture of everything that's tracked by the library team.\n-->\n\n## Project groups\n\nThe library team uses project groups to help coordinate effort.\nThis repository keeps a [list of active project groups](https://github.com/rust-lang/libs-team/issues?q=is%3Aissue+is%3Aopen+label%3Aproject-group) that you can explore.\nReach out to any groups that might interest you!\n\n## Code of Conduct and licensing\n\nAll interactions on this repository (whether on issues, PRs, or\nelsewhere) are governed by the [Rust Code of\nConduct](CODE_OF_CONDUCT.md).\n\nFurther, all content on this repository is subject to the standard\n[Rust](LICENSE-MIT) [licensing](LICENSE-APACHE).\n", "release_dates": []}, {"name": "libtest", "description": "Rust's built-in testing and benchmarking framework", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "**Note:** This repository is no longer in use. The `test` crate lives [in the `rust-lang/rust` repository](https://github.com/rust-lang/rust/tree/master/library/test).\n\n---\n\n[![Build Status](https://travis-ci.com/rust-lang/libtest.svg?branch=master)](https://travis-ci.com/rust-lang/libtest) [![Build Status](https://dev.azure.com/rust-lang/libtest/_apis/build/status/libtest-CI?branchName=master)](https://dev.azure.com/rust-lang/libtest/_build/latest?definitionId=1&branchName=master) [![Latest Version]][crates.io] [![docs]][docs.rs]\n\nlibtest - Rust's built-in unit-testing and benchmarking framework\n===\n\nSee [The Rust Programming Language chapter on\nTesting](https://doc.rust-lang.org/book/ch11-00-testing.html).\n\n## Platform support\n\n* \"build\" shows whether the library compiles\n* \"run\" shows whether the full test-suite passes\n\n| Target                            | Build | Run |\n|-----------------------------------|-------|-----|\n| `aarch64-linux-android`           | \u2713     | \u2713   |\n| `aarch64-unknown-linux-gnu`       | \u2713     | \u2713   |\n| `arm-linux-androideabi`           | \u2713     | \u2713   |\n| `arm-unknown-linux-gnueabi`       | \u2713     | \u2713   |\n| `arm-unknown-linux-musleabi`      | \u2713     | \u2713   |\n| `armv7-linux-androideabi`         | \u2713     | \u2713   |\n| `armv7-unknown-linux-gnueabihf`   | \u2713     | \u2713   |\n| `armv7-unknown-linux-musleabihf`  | \u2713     | \u2713   |\n| `i586-unknown-linux-gnu`          | \u2713     | \u2713   |\n| `i586-unknown-linux-musl`         | \u2713     | \u2713   |\n| `i686-linux-android`              | \u2713     | \u2713   |\n| `i686-pc-windows-gnu`             | \u2713     | \u2713   |\n| `i686-apple-darwin`               | \u2713     | \u2713   |\n| `i686-unknown-freebsd`            | \u2713     | \u2717   |\n| `i686-unknown-linux-gnu`          | \u2713     | \u2713   |\n| `i686-unknown-linux-musl`         | \u2713     | \u2713   |\n| `mips-unknown-linux-gnu`          | \u2713     | \u2713   |\n| `mips64-unknown-linux-gnuabi64`   | \u2713     | \u2713   |\n| `mips64el-unknown-linux-gnuabi64` | \u2713     | \u2713   |\n| `mipsel-unknown-linux-gnu`        | \u2713     | \u2713   |\n| `powerpc-unknown-linux-gnu`       | \u2713     | \u2713   |\n| `powerpc64-unknown-linux-gnu`     | \u2713     | \u2713   |\n| `powerpc64le-unknown-linux-gnu`   | \u2713     | \u2713   |\n| `sparc64-unknown-linux-gnu`       | \u2713     | \u2717   |\n| `s390x-unknown-linux-gnu`         | \u2713     | \u2713   |\n| `x86_64-apple-darwin`             | \u2713     | \u2713   |\n| `x86_64-sun-solaris`              | \u2713     | \u2717   |\n| `x86_64-linux-android`            | \u2713     | \u2713   |\n| `x86_64-pc-windows-gnu`           | \u2713     | \u2713   |\n| `x86_64-pc-windows-msvc`          | \u2713     | \u2713   |\n| `x86_64-unknown-freebsd`          | \u2713     | \u2717   |\n| `x86_64-unknown-linux-gnu`        | \u2713     | \u2713   |\n| `x86_64-unknown-linux-musl`       | \u2713     | \u2713   |\n| `x86_64-unknown-netbsd`           | \u2713     | \u2717   |\n\n## License\n\nThis project is licensed under either of\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  ([LICENSE-APACHE](LICENSE-APACHE))\n\n* [MIT License](http://opensource.org/licenses/MIT)\n  ([LICENSE-MIT](LICENSE-MIT))\n\nat your option.\n\n## Contributing\n\nWe welcome all people who want to contribute.\n\nContributions in any form (issues, pull requests, etc.) to this project\nmust adhere to Rust's [Code of Conduct].\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `libtest` by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n\n[Code of Conduct]: https://www.rust-lang.org/en-US/conduct.html\n[Latest Version]: https://img.shields.io/crates/v/libtest.svg\n[crates.io]: https://crates.io/crates/libtest\n[docs]: https://docs.rs/libtest/badge.svg\n[docs.rs]: https://docs.rs/libtest/\n", "release_dates": []}, {"name": "libtest-next", "description": "T-testing-devex experiments for new testing tools for Rust developers", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# libtest-next\n\n> Experiments for [testing-devex team](https://www.rust-lang.org/governance/teams/dev-tools#Testing%20DevEx%20team) for [libtest](https://doc.rust-lang.org/stable/test/) ideas\n\n## About\n\n[eRFC #3558](https://github.com/rust-lang/rfcs/pull/3558): explore stable json output by exploring custom test harnesses\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "libz-sys", "description": "Rust crate package to link to a system libz (zlib)", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# libz-sys\n\nA common library for linking `libz` to Rust programs (also known as zlib).\n\n[Documentation](https://docs.rs/libz-sys)\n\nThis also serves as the source for the `libz-ng-sys` crate, which builds\nzlib-ng natively (not in zlib-compat mode). See\n[`README-zng.md`](README-zng.md) for details.\n\n# High-level API\n\nThis crate provides bindings to the raw low-level C API. For a higher-level\nsafe API to work with DEFLATE, zlib, or gzip streams, see\n[`flate2`](https://docs.rs/flate2). `flate2` also supports alternative\nimplementations, including slower but pure Rust implementations.\n\n# zlib-ng\n\nThis crate supports building either the high-performance zlib-ng (in\nzlib-compat mode), or the widely available stock zlib.\n\nBy default, `libz-sys` uses stock zlib, primarily because doing so allows the\nuse of a shared system zlib library if available.\n\nAny application or library designed for zlib should work with zlib-ng in\nzlib-compat mode, as long as it doesn't make assumptions about the exact size\nor output of the deflated data (e.g. \"compressing this data produces exactly\nthis many bytes\"), and as long as you don't also dynamically pull in a copy of\nstock zlib (which will produce conflicting symbols). Nonetheless, for maximum\ncompatibility, every library crate in a build must opt into allowing zlib-ng;\nif any library crate in your dependency graph wants stock zlib, `libz-sys` will\nuse stock zlib.\n\nLibrary crates depending on `libz-sys` should use:\n\n```toml\nlibz-sys = { version = \"1.1\", default-features = false, features = [\"libc\"] }\n```\n\n(Omit the `libc` feature if you don't require the corresponding functions.)\n\nThis allows higher-level crates depending on your library to opt into zlib-ng\nif desired.\n\nBuilding zlib-ng requires `cmake`.\n\nCrates that don't require compatibility with the zlib C API, and use zlib\nexclusively from Rust or support the zlib-ng native C API (prefixed with\n`zng_`) can use [`libz-ng-sys`](https://crates.io/crates/libz-ng-sys) instead,\nwhich allows zlib and zlib-ng to coexist in the same program. See\n[README-zng.md](README-zng.md) for details.\n\n# Minimum Supported Rust Version (MSRV) Policy\n\nThis crate uses the same MSRV policy as the\n[`flate2`](https://crates.io/crates/flate2) crate: This crate supports the\ncurrent and previous stable versions of Rust. Older versions of Rust may work,\nbut we don't guarantee these will continue to work.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/license/mit/)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `libz-sys` by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2024-01-26T14:41:12Z", "2024-01-26T14:35:18Z", "2024-01-09T08:43:50Z", "2024-01-08T09:11:09Z", "2023-07-26T08:13:35Z", "2023-07-25T16:44:56Z", "2023-07-23T16:37:13Z", "2023-05-04T09:57:31Z", "2023-04-22T09:37:32Z", "2023-04-22T09:37:00Z"]}, {"name": "lld", "description": "No longer used, use https://github.com/rust-lang/llvm-project instead", "language": "C++", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "LLVM Linker (lld)\n=================\n\nThis directory and its subdirectories contain source code for the LLVM Linker, a\nmodular cross platform linker which is built as part of the LLVM compiler\ninfrastructure project.\n\nlld is open source software. You may freely distribute it under the terms of\nthe license agreement found in LICENSE.txt.\n\nBenchmarking\n============\n\nIn order to make sure various developers can evaluate patches over the\nsame tests, we create a collection of self contained programs.\n\nIt is hosted at https://s3-us-west-2.amazonaws.com/linker-tests/lld-speed-test.tar.xz\n\nThe current sha256 is 10eec685463d5a8bbf08d77f4ca96282161d396c65bd97dc99dbde644a31610f.\n", "release_dates": []}, {"name": "lldb", "description": "No longer used, use https://github.com/rust-lang/llvm-project instead", "language": "HTML", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": []}, {"name": "llvm", "description": "No longer used, use https://github.com/rust-lang/llvm-project instead", "language": "C++", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Low Level Virtual Machine (LLVM)\n================================\n\nThis directory and its subdirectories contain source code for the Low Level\nVirtual Machine, a toolkit for the construction of highly optimized compilers,\noptimizers, and runtime environments.\n\nLLVM is open source software. You may freely distribute it under the terms of\nthe license agreement found in LICENSE.txt.\n\nPlease see the documentation provided in docs/ for further\nassistance with LLVM, and in particular docs/GettingStarted.rst for getting\nstarted with LLVM and docs/README.txt for an overview of LLVM's\ndocumentation setup.\n\nIf you're writing a package for LLVM, see docs/Packaging.rst for our\nsuggestions.\n", "release_dates": []}, {"name": "llvm-project", "description": "Rust-specific fork of LLVM.", "language": null, "license": null, "readme": "# Rust's fork of LLVM\n\nThis repository is a Rust-specific fork of LLVM. This is used as a submodule in\nthe https://github.com/rust-lang/rust repository. The Rust repository is always\npinned to a branch of this repository, and the `master` branch of this\nrepository is not used.\n\nDespite this being a \"fork\" it's more of just a place where we can easily tweak\nthe LLVM source for Rust's own build. All patches should by default go upstream\nfirst, and then we can cherry-pick them onto our branches if necessary.\n\nTo learn more about updating LLVM in the Rust compiler, consult the\n[documentation for doing so in\n`rustc-guide`](https://rustc-dev-guide.rust-lang.org/backend/updating-llvm.html)\n", "release_dates": []}, {"name": "log", "description": "Logging implementation for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "log\n===\n\nA Rust library providing a lightweight logging *facade*.\n\n[![Build status](https://img.shields.io/github/actions/workflow/status/rust-lang/log/main.yml?branch=master)](https://github.com/rust-lang/log/actions)\n[![Latest version](https://img.shields.io/crates/v/log.svg)](https://crates.io/crates/log)\n[![Documentation](https://docs.rs/log/badge.svg)](https://docs.rs/log)\n![License](https://img.shields.io/crates/l/log.svg)\n\n* [`log` documentation](https://docs.rs/log)\n\nA logging facade provides a single logging API that abstracts over the actual\nlogging implementation. Libraries can use the logging API provided by this\ncrate, and the consumer of those libraries can choose the logging\nimplementation that is most suitable for its use case.\n\n\n## Minimum supported `rustc`\n\n`1.60.0+`\n\nThis version is explicitly tested in CI and may be bumped in any release as needed. Maintaining compatibility with older compilers is a priority though, so the bar for bumping the minimum supported version is set very high. Any changes to the supported minimum version will be called out in the release notes.\n\n## Usage\n\n### In libraries\n\nLibraries should link only to the `log` crate, and use the provided macros to\nlog whatever information will be useful to downstream consumers:\n\n```toml\n[dependencies]\nlog = \"0.4\"\n```\n\n```rust\nuse log::{info, trace, warn};\n\npub fn shave_the_yak(yak: &mut Yak) {\n    trace!(\"Commencing yak shaving\");\n\n    loop {\n        match find_a_razor() {\n            Ok(razor) => {\n                info!(\"Razor located: {razor}\");\n                yak.shave(razor);\n                break;\n            }\n            Err(err) => {\n                warn!(\"Unable to locate a razor: {err}, retrying\");\n            }\n        }\n    }\n}\n```\n\n### In executables\n\nIn order to produce log output, executables have to use a logger implementation compatible with the facade.\nThere are many available implementations to choose from, here are some options:\n\n* Simple minimal loggers:\n    * [`env_logger`](https://docs.rs/env_logger/*/env_logger/)\n    * [`simple_logger`](https://docs.rs/simple_logger/*/simple_logger/)\n    * [`simplelog`](https://docs.rs/simplelog/*/simplelog/)\n    * [`pretty_env_logger`](https://docs.rs/pretty_env_logger/*/pretty_env_logger/)\n    * [`stderrlog`](https://docs.rs/stderrlog/*/stderrlog/)\n    * [`flexi_logger`](https://docs.rs/flexi_logger/*/flexi_logger/)\n    * [`call_logger`](https://docs.rs/call_logger/*/call_logger/)\n    * [`std-logger`](https://docs.rs/std-logger/*/std_logger/)\n    * [`structured-logger`](https://docs.rs/structured-logger/latest/structured_logger/)\n* Complex configurable frameworks:\n    * [`log4rs`](https://docs.rs/log4rs/*/log4rs/)\n    * [`fern`](https://docs.rs/fern/*/fern/)\n* Adaptors for other facilities:\n    * [`syslog`](https://docs.rs/syslog/*/syslog/)\n    * [`systemd-journal-logger`](https://docs.rs/systemd-journal-logger/*/systemd_journal_logger/)\n    * [`slog-stdlog`](https://docs.rs/slog-stdlog/*/slog_stdlog/)\n    * [`android_log`](https://docs.rs/android_log/*/android_log/)\n    * [`win_dbg_logger`](https://docs.rs/win_dbg_logger/*/win_dbg_logger/)\n    * [`db_logger`](https://docs.rs/db_logger/*/db_logger/)\n    * [`log-to-defmt`](https://docs.rs/log-to-defmt/*/log_to_defmt/)\n    * [`logcontrol-log`](https://docs.rs/logcontrol-log/*/logcontrol_log/)\n* For WebAssembly binaries:\n    * [`console_log`](https://docs.rs/console_log/*/console_log/)\n* For dynamic libraries:\n    * You may need to construct [an FFI-safe wrapper over `log`](https://github.com/rust-lang/log/issues/421) to initialize in your libraries.\n* Utilities:\n    * [`log_err`](https://docs.rs/log_err/*/log_err/)\n    * [`log-reload`](https://docs.rs/log-reload/*/log_reload/)\n    * [`alterable_logger`](https://docs.rs/alterable_logger/*/alterable_logger)\n\nExecutables should choose a logger implementation and initialize it early in the\nruntime of the program. Logger implementations will typically include a\nfunction to do this. Any log messages generated before the logger is\ninitialized will be ignored.\n\nThe executable itself may use the `log` crate to log as well.\n\n## Structured logging\n\nIf you enable the `kv` feature, you can associate structured data with your log records:\n\n```rust\nuse log::{info, trace, warn};\n\npub fn shave_the_yak(yak: &mut Yak) {\n    // `yak:serde` will capture `yak` using its `serde::Serialize` impl\n    //\n    // You could also use `:?` for `Debug`, or `:%` for `Display`. For a\n    // full list, see the `log` crate documentation\n    trace!(target = \"yak_events\", yak:serde; \"Commencing yak shaving\");\n\n    loop {\n        match find_a_razor() {\n            Ok(razor) => {\n                info!(razor; \"Razor located\");\n                yak.shave(razor);\n                break;\n            }\n            Err(e) => {\n                // `e:err` will capture `e` using its `std::error::Error` impl\n                warn!(e:err; \"Unable to locate a razor, retrying\");\n            }\n        }\n    }\n}\n```\n", "release_dates": ["2023-08-12T10:23:14Z", "2023-06-11T01:41:59Z", "2023-05-28T04:11:03Z", "2022-05-02T22:42:18Z", "2022-03-22T10:03:16Z", "2021-01-27T03:08:59Z", "2021-01-11T10:18:42Z", "2021-01-08T00:49:31Z", "2020-07-16T01:17:36Z", "2019-12-16T05:46:51Z", "2019-12-15T22:49:01Z", "2019-08-14T22:41:48Z", "2019-07-10T23:51:28Z", "2018-10-27T19:06:56Z", "2018-09-03T16:00:26Z", "2018-08-17T14:52:35Z", "2018-08-17T14:47:58Z", "2018-06-06T02:52:10Z", "2017-12-30T23:33:48Z", "2017-12-24T21:48:59Z", "2017-12-24T21:51:14Z", "2017-12-06T17:18:00Z", "2017-05-24T02:50:13Z", "2017-05-24T02:51:23Z", "2017-05-24T02:50:09Z", "2017-05-24T02:50:05Z", "2017-05-24T02:50:01Z", "2017-05-24T02:49:56Z", "2017-05-24T02:49:50Z", "2017-05-24T02:49:46Z"]}, {"name": "mailgun-mailmap", "description": "Mail configuration for rust-lang domains", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Mailgun Mailmap\n\nThis repository is not used anymore. If you want to update mailing lists you\nshould edit the [rust-lang/team](https://github.com/rust-lang/team) repo.\n", "release_dates": []}, {"name": "mdBook", "description": "Create book from markdown files. Like Gitbook but implemented in Rust", "language": "Rust", "license": {"key": "mpl-2.0", "name": "Mozilla Public License 2.0", "spdx_id": "MPL-2.0", "url": "https://api.github.com/licenses/mpl-2.0", "node_id": "MDc6TGljZW5zZTE0"}, "readme": "# mdBook\n\n[![Build Status](https://github.com/rust-lang/mdBook/workflows/CI/badge.svg?event=push)](https://github.com/rust-lang/mdBook/actions?workflow=CI)\n[![crates.io](https://img.shields.io/crates/v/mdbook.svg)](https://crates.io/crates/mdbook)\n[![LICENSE](https://img.shields.io/github/license/rust-lang/mdBook.svg)](LICENSE)\n\nmdBook is a utility to create modern online books from Markdown files.\n\nCheck out the **[User Guide]** for a list of features and installation and usage information.\nThe User Guide also serves as a demonstration to showcase what a book looks like.\n\nIf you are interested in contributing to the development of mdBook, check out the [Contribution Guide].\n\n## License\n\nAll the code in this repository is released under the ***Mozilla Public License v2.0***, for more information take a look at the [LICENSE] file.\n\n[User Guide]: https://rust-lang.github.io/mdBook/\n[contribution guide]: https://github.com/rust-lang/mdBook/blob/master/CONTRIBUTING.md\n[LICENSE]: https://github.com/rust-lang/mdBook/blob/master/LICENSE\n", "release_dates": ["2024-02-07T04:03:01Z", "2023-11-29T23:00:29Z", "2023-09-29T23:44:43Z", "2023-08-05T22:04:36Z", "2023-08-04T00:37:33Z", "2023-07-17T00:44:05Z", "2023-06-29T20:11:01Z", "2023-05-28T22:07:13Z", "2023-05-13T19:36:26Z", "2023-03-05T00:28:51Z", "2023-02-13T16:08:25Z", "2023-02-09T00:10:42Z", "2022-12-17T16:19:46Z", "2022-12-15T15:14:59Z", "2022-12-15T02:46:52Z", "2022-11-28T18:17:02Z", "2022-07-22T18:06:53Z", "2022-07-14T21:27:28Z", "2022-07-01T22:48:32Z", "2022-04-15T18:34:53Z", "2022-03-30T17:24:14Z", "2022-03-30T00:45:49Z", "2022-01-04T19:41:43Z", "2021-11-27T18:35:15Z", "2021-10-03T22:41:48Z", "2021-08-02T15:41:25Z", "2021-07-26T20:48:08Z", "2021-06-08T22:26:02Z", "2021-06-02T16:55:24Z", "2021-05-10T16:42:27Z"]}, {"name": "measureme", "description": "Support crate for rustc's self-profiling feature", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# measureme [![Rust](https://github.com/rust-lang/measureme/actions/workflows/rust.yml/badge.svg)](https://github.com/rust-lang/measureme/actions/workflows/rust.yml)\nSupport crate for rustc's self-profiling feature\n\nThis crate is maintained by the Rust compiler team and in particular by the\n[self-profile working group][wg-self-profile]. It is currently only meant to\nbe used within rustc itself, so APIs may change at any moment.\n\n## Tools\n\n### measureme\n\n`measureme` is the core library which contains a fast, efficient framework for recording events and serializing them to a compact binary format. It is integrated into `rustc` via the unstable `-Z self-profile` flag.\n\n[Documentation](https://docs.rs/measureme)\n\n### summarize\n\n`summarize` produces a human readable summary of `measureme` profiling data.\nIt contains two main modes:\n\n- `summarize` which groups the profiling events and orders the results by time taken.\n- `diff` which compares two profiles and outputs a summary of the differences.\n\n[Learn more](./summarize/README.md)\n\n### stack_collapse\n\n`stack_collapse` reads `measureme` profiling data and outputs folded stack traces compatible with the [Flame Graph](https://github.com/brendangregg/FlameGraph) tools.\n\n[Learn more](./stack_collapse/README.md)\n\n### flamegraph\n\n`flamegraph` reads `measureme` profiling data and outputs [Flame Graph](https://github.com/brendangregg/FlameGraph).\n\n[Learn more](./flamegraph/README.md)\n\n### crox\n\n`crox` turns `measureme` profiling data into files that can be visualized by the Chromium performance tools.\n\n[Learn more](./crox/README.md)\n\n[wg-self-profile]: https://rust-lang.github.io/compiler-team/working-groups/self-profile/\n", "release_dates": ["2024-01-13T15:13:36Z", "2023-12-18T13:49:51Z", "2023-12-14T10:18:49Z", "2023-02-08T23:13:28Z", "2022-06-24T22:55:28Z", "2021-10-06T12:31:28Z", "2021-09-13T14:50:21Z", "2021-05-21T20:45:06Z", "2021-04-23T17:30:44Z", "2021-02-19T17:55:00Z", "2020-10-08T00:12:48Z", "2020-10-01T11:40:59Z", "2020-01-02T19:45:02Z", "2019-12-18T12:45:45Z", "2019-12-12T01:25:36Z", "2019-12-12T10:27:27Z", "2019-12-12T01:25:17Z", "2019-10-24T14:08:26Z"]}, {"name": "meeting-minutes", "description": "Official minutes for Rust-related meetings", "language": null, "license": null, "readme": "The Rust team has a weekly Rust planning meeting on Tuesdays at 2:00 PM\nPacific (UTC-8). Minutes are recorded [on\nEtherpad](https://etherpad.mozilla.org/Rust-meeting-weekly) and then archived\nhere.\n\n## Weekly meetings:\n\n* [weekly-meetings/2015-05-26](weekly-meetings/2015-05-26.md) (introducing Emily; Whistler update; Servo; minor RFCs; future of meeting)\n* [weekly-meetings/2015-05-19](weekly-meetings/2015-05-19.md) (fott; servo; diversity; subteams)\n* [weekly-meetings/2015-05-12](weekly-meetings/2015-05-12.md) (servo; crates.io; meetings and subteams)\n* [weekly-meetings/2015-05-05](weekly-meetings/2015-05-05.md) (servo; --test and stability; irc floods; semver)\n* [weekly-meetings/2015-04-28](weekly-meetings/2015-04-28.md) (servo; podcasting; snapshots; transmute; static_assert)\n* [weekly-meetings/2015-04-21](weekly-meetings/2015-04-21.md) (servo licensing; iter overflow; float formatting; branching for betas)\n* [weekly-meetings/2015-04-14](weekly-meetings/2015-04-14.md) (beta; symlinks; missing stdio handles; compound assignment; rustdoc cleanup; coc enforcement)\n* [weekly-meetings/2015-04-07](weekly-meetings/2015-04-07.md) (beta PRs; abs; rustdoc and std facade; wiki; docs out of tree)\n* [weekly-meetings/2015-03-31](weekly-meetings/2015-03-31.md) (unqualified associated items, feature-gating unsigned negation, trivial cast lint, trait variance, coherence updates, `as` and overflow, beta)\n* [weekly-meetings/2015-03-24](weekly-meetings/2015-03-24.md) (fott, unsafe_destructor, drop order, libtest)\n* [weekly-meetings/2015-03-17](weekly-meetings/2015-03-17.md) (checked overflow and casts; hyphens in crate names)\n* [weekly-meetings/2015-03-10](weekly-meetings/2015-03-10.md)\n* [weekly-meetings/2015-03-03](weekly-meetings/2015-03-03.md) (fott; filling drop; type ascription)\n* [weekly-meetings/2015-02-24](weekly-meetings/2015-02-24.md) (should_fail; irc; error codes; type ascription; triage)\n* [weekly-meetings/2015-02-17](weekly-meetings/2015-02-17.md) (fott; security bugs; code completion; open-ended proposals; struct syntax; alpha2; integer suffixes; overflow)\n* [weekly-meetings/2015-02-10](weekly-meetings/2015-02-10.md) (fott; unsafe_no_drop_flag; box RFC fallout; unused attribute feature gate; sizeof / alignof; array patterns)\n* [weekly-meetings/2015-02-03](weekly-meetings/2015-02-03.md) (RFC shepherd attention spans; raw pointers and lifetimes; non-zeroing drop)\n* [weekly-meetings/2015-01-27](weekly-meetings/2015-01-27.md) (autoref for closures)\n* [weekly-meetings/2015-01-20](weekly-meetings/2015-01-20.md) (goodbye view items; deref coercion; nounwind; discourse/ml changes; discriminant intrinsics; issue triage; fott)\n* [weekly-meetings/2015-01-13](weekly-meetings/2015-01-13.md) (fott; homu; integer overflow; i/o; 1.0; comment rfc)\n* [weekly-meetings/2015-01-06](weekly-meetings/2015-01-06.md) (fott; 1.0 alpha priorities; LLVM updates; the fate of `box`)\n* [weekly-meetings/2014-12-30](weekly-meetings/2014-12-30.md) (fott; impl trait for trait; stability attribute changes)\n* [weekly-meetings/2014-12-16](weekly-meetings/2014-12-16.md) (fott; issue #s in FIXMEs; nullable extern fns; collections reform; prelude cleanup; slice syntax ambiguity)\n* [weekly-meetings/2014-12-09](weekly-meetings/2014-12-09.md) (process changes; box patterns; macros; issues in FIXMEs; placement box)\n* [weekly-meetings/2014-11-25](weekly-meetings/2014-11-25.md) (extension trait conventions; shadowed lifetimes; problems with unused type params; es6-style string escaping; int fallback redux redux)\n* [weekly-meetings/2014-11-18](weekly-meetings/2014-11-18.md) (cmp/ops; TLS; future-proofing literal parsing; ungating tuple indexing, if/while let; naming conventions; struct variants matching; for syntax for higher-order lifetimes; macros; type parameter grammar; better shepherding)\n* [weekly-meetings/2014-11-11](weekly-meetings/2014-11-11.md) (fott; std::fmt; default typarams; rfc authors; 'coerce' vs. 'view', etc.; precent of `+` in type grammar; jemalloc)\n* [weekly-meetings/2014-11-04](weekly-meetings/2014-11-04.md) (macros; multiple lifetime bounds; macro invocation syntax; higher-ranked trait bounds; pub trait methods; out-of-sync nightlies; struct variants; numerics)\n* [weekly-meetings/2014-10-30](weekly-meetings/2014-10-30.md) (error conventions; cargo; namespaced enums; trait-based error handling; macro unification; coercions; dynamic linking, byte literals, failing dtors)\n* [weekly-meetings/2014-10-28](weekly-meetings/2014-10-28.md) (collections; cross-borrowing)\n* [weekly-meetings/2014-10-21](weekly-meetings/2014-10-21.md) (module reform; fixed size arrays and moving; pub trait items)\n* [weekly-meetings/2014-10-14](weekly-meetings/2014-10-14.md) (object safety rules; naming conventions; rfc repo changes; reflection; const tweaks; \\xXX)\n* [weekly-meetings/2014-10-07](weekly-meetings/2014-10-07.md) (fott; release/debug configure flags; linking to RFCs; unsafe / raw conventions; removing virtual structs; reserving keywords; uint -> uintptr)\n* [weekly-meetings/2014-09-30](weekly-meetings/2014-09-30.md) (GC removal; static/const; object safety rules; cycle time; empty struct syntax; macro syntax; while let; release builds)\n* [weekly-meetings/2014-09-23](weekly-meetings/2014-09-23.md) (static v dynamic drop; fail! -> panic!; int->float inference; moving feature request issues to RFC repo; cfg syntax; newtype)\n* [weekly-meetings/2014-09-16](weekly-meetings/2014-09-16.md) (Removing GC; closure sugar; public items; opt-in-built-in; enum variant namespacing; runtime system removal; collection views; parallel codegen options)\n* [weekly-meetings/2014-09-09](weekly-meetings/2014-09-09.md) (FnMut sugar; assoc types; inheritance; AST smart pointers; drop reform)\n* [weekly-meetings/2014-09-02](weekly-meetings/2014-09-02.md) (Friend of the Tree; subslice patterns; int fallback; closures returning !; checked arithmetic; abi syntax; index traits; matches!)\n* [weekly-meetings/2014-08-26](weekly-meetings/2014-08-26.md) ('if let'; assoc items; ownership conventions; privacy; error interop; slice notation; tuple indexing; exploit mitigation; abi syntax)\n* [weekly-meetings/2014-08-12](weekly-meetings/2014-08-12.md) (Generalizing object type parameter bounds; '<' syntax; multiple subslice patterns; import shadowing; asm!; leaking private types)\n* [weekly-meetings/2014-08-05](weekly-meetings/2014-08-05.md) (Import renaming syntax; &mut patterns; static mut; where clauses; stylistic umbrella lints; opt-in built-in; serialization; UFCS; empty struct syntax)\n* [weekly-meetings/2014-07-29](weekly-meetings/2014-07-29.md) (Friend of the Tree; borrowck vs. Box; impls next to types; ye olde generics syntax bikeshed; lifetime elision; @-bindings problems; APIs leaking private types; unboxed closures; opt-in built-in)\n* [weekly-meetings/2014-07-22](weekly-meetings/2014-07-22.md) (Friend of the Tree; Servo reqs; Rename Share; asm!; removing special Box treatment; exposing private types in public signatures; FromLiteral; &static mut)\n* [weekly-meetings/2014-07-15](weekly-meetings/2014-07-15.md) (attrs on exprs/blocks; flexible target specs; integer inference fallback; import sugar; slice matching; import shadowing)\n* [weekly-meetings/2014-07-08](weekly-meetings/2014-07-08.md) (Friend of the Tree; removing language features; lifetime elision; ref closures; matches macro; rpath; RFC's)\n* [weekly-meetings/2014-07-01](weekly-meetings/2014-07-01.md) (RFC's; prelude guidelines; 0.11 release; string indexing; cross borrowing; lifetime elision)\n* [weekly-meetings/2014-06-24](weekly-meetings/2014-06-24.md) (RFC's; removing f129; moving meeting notes; line length conventions;)\n* [weekly-meetings/2014-06-17](weekly-meetings/2014-06-17.md) (RFC's; unsafe fields; loadable lints; input macros; temporary lifetimes; partial_cmp; unsafe destructor; int inferences; cross borrowing)\n* [weekly-meetings/2014-06-10](weekly-meetings/2014-06-10.md) (RFC's; unsafe pointers; lifetime hygiene; format! i18n; stylistic lints)\n* [weekly-meetings/2014-06-03](weekly-meetings/2014-06-03.md) (byte literals; plugins; removing markers; by-value upvars)\n* [weekly-meetings/2014-05-27](weekly-meetings/2014-05-27.md) (make install & docs; Process::drop, lexer simplification; UFCS; pattern macros; unboxed closures; RFC PR 48)\n* [weekly-meetings/2014-05-20](weekly-meetings/2014-05-20.md) (repo location; trait-bounded return types; string vs. str; removing ~str; P in the AST; removing \"cross borrowing\"; quickcheck; RFCs: effect system, undefined struct layout, struct literal syntax, by-value captures, tail calls, virtual structs)\n* [weekly-meetings/2014-05-13](weekly-meetings/2014-05-13.md) (interns; `String`; Trait bounds; spaces in attributes; gdb; quickcheck; let mut; 32-bit ABI; optimizing structs; module structure; significant addresses; reserving keywords)\n* [weekly-meetings/2014-05-06](weekly-meetings/2014-05-06.md) (vector types; string naming; Sized keywords; `unsafe extern fn`)\n* [weekly-meetings/2014-04-29](weekly-meetings/2014-04-29.md) (nullable pointers; module ownership; bitflags; smaller refcounts; rev_iter; std facade; trait matching)\n* [weekly-meetings/2014-04-22](weekly-meetings/2014-04-22.md) (Friend of the Tree; regex; numeric default typing; `Vec<T>`; disableable asserts; bounds on type params in structs; attributes on match arms; f128)\n* [weekly-meetings/2014-04-15](weekly-meetings/2014-04-15.md) (`~\"\"`, breaking changes log, removing `priv`, mutex bounds, attributes, design faq, removing markers, assigning PRs)\n* [weekly-meetings/2014-04-01](weekly-meetings/2014-04-01.md) (`Vec<T>` vs. `~[T]`; virtual structs; intrinsics; strbuf; inheritance)\n* [weekly-meetings/2014-03-25](weekly-meetings/2014-03-25.md) (attributes in macros, opt-in traits, SIMD, [] on macros, counting matches, bounds on type params, private fields by default, collections::list, bounds on trait paths)\n* [weekly-meetings/2014-03-18](weekly-meetings/2014-03-18.md) (Friend of the Tree; RFCs; 0.10; documentation; RFC review)\n* [weekly-meetings/2014-03-11](weekly-meetings/2014-03-11.md) (self argument destructuring; type hints; coercion rules; unsafe ptrs)\n* [weekly-meetings/2014-02-25](weekly-meetings/2014-02-25.md) (Friend of the Tree; TotalEq; weak extern fn; channel names; relative paths)\n* [weekly-meetings/2014-02-18](weekly-meetings/2014-02-18.md) (`if_ok!`, issue numbers in commits, debug assertions, hash trait, vector syntax)\n* [weekly-meetings/2014-02-11](weekly-meetings/2014-02-11.md) (Friend of the Tree; binding in struct patterns; rules on static values; crate keyword; pizza; finally macro; implicit trait bounds)\n* [weekly-meetings/2014-02-04](weekly-meetings/2014-02-04.md) (libprim; operator overloading; using system LLVM)\n* [weekly-meetings/2014-01-28](weekly-meetings/2014-01-28.md) (Friend of the Tree; default type params; allocators; dylib to extra; unused Result warning; attributes; I/O; visit_glue)\n* [weekly-meetings/2014-01-21](weekly-meetings/2014-01-21.md) (primitive impl lang items; env ptrs; boehm; fmt::Default; foo_opt => foo; \\xNN; #[no_mangle]; crate_type=\"lib\")\n* [weekly-meetings/2014-01-14](weekly-meetings/2014-01-14.md) (Friend of the Tree; statics on traits; env pointers; lang freeze; iterator naming; statics; docs on primitives)\n* [weekly-meetings/2014-01-07](weekly-meetings/2014-01-07.md) (Friend of the Tree; 0.9; XP; channels; conduct; failure; Rc; guard pages; loadable syntax extensions; foo_opt)\n* [weekly-meetings/2013-12-17](weekly-meetings/2013-12-17.md) (0.9; attribute enums; pkgid; extern mod; extern crate; return in closures; option/result apis; stdlib hierarchy; push/pop/shift/unshift)\n* [weekly-meetings/2013-12-10](weekly-meetings/2013-12-10.md) (enum mod, nightlies, inference, grammar, imports, struct patterns, trailing commas, RevOrd, unwind)\n* [weekly-meetings/2013-12-03](weekly-meetings/2013-12-03.md) (placement new/box keyword; rustpkg; strings; libstdc++)\n* [weekly-meetings/2013-11-26](weekly-meetings/2013-11-26.md) (bootstrap compile speed; mutexes; GC; size of some stuff; strict doc comments; result API)\n* [weekly-meetings/2013-11-19](weekly-meetings/2013-11-19.md) (static linking; wildcards; task join; autoderef; user-defined vecs)\n* [weekly-meetings/2013-11-05](weekly-meetings/2013-11-05.md) (wildcards; libextra; rustpkg; stacks; octal literals; empty enums; vec representation; temp lifetimes)\n* [weekly-meetings/2013-10-29](weekly-meetings/2013-10-29.md) (segmented stacks; rustpkg; placement new)\n* [weekly-meetings/2013-10-22](weekly-meetings/2013-10-22.md) (crypto; mut self vs. mut ~self; drop by value; ~Any; volunteers; GC)\n* [weekly-meetings/2013-10-15](weekly-meetings/2013-10-15.md) (removing rusti; attribute syntax; drop in static items; multi-crate packages)\n* [weekly-meetings/2013-10-08](weekly-meetings/2013-10-08.md) (triage emails; status emails; code review; rustpkg test; removing crypto code from libraries; `rust` tool maintenance; function types; Hoedown/Sundown; OS X 10.9 bustage)\n* [weekly-meetings/2013-10-01](weekly-meetings/2013-10-01.md) (rustpkg submodules; clone fn; option API; raw strings; removing float)\n* [weekly-meetings/2013-09-24](weekly-meetings/2013-09-24.md) (0.8 status; continue vs. loop; struct-like enums; lint; braces; nested comments; raw strings; IRC for devs; authors.txt; linkage attributes; name of clone; resolve; overflow; string escapes; default priv/pub)\n* [weekly-meetings/2013-09-17](weekly-meetings/2013-09-17.md) (commit policy x 2; rustpkg dependency handling; macros requiring a feature flag; default arguments; \\0 literal; linefeed in comments; OSX 10.9; crypto)\n* [weekly-meetings/2013-09-10](weekly-meetings/2013-09-10.md) (commit policy; extern mod duplication; implicit copyability; patterns and default methods; &const; 0.8)\n* [weekly-meetings/2013-08-27](weekly-meetings/2013-08-27.md) (rustpkg timeline; extern fns; generic extern fns; LLVM asserts; meeting time)\n* [weekly-meetings/2013-08-20](weekly-meetings/2013-08-20.md) (Cycle time)\n* [weekly-meetings/2013-08-13](weekly-meetings/2013-08-13.md) (Interns leaving; Method invocation ordering; stage0 stdtest; Default args)\n* [weekly-meetings/2013-08-06](weekly-meetings/2013-08-06.md) (SIMD; ARM buildbot; trailing nulls; extern mod; conditions)\n* [weekly-meetings/2013-07-30](weekly-meetings/2013-07-30.md) (OSCON; for; overloadable *; * and lifetimes; 'as' precedence; etc)\n* [weekly-meetings/2013-07-23](weekly-meetings/2013-07-23.md) (OSCON; MPS; benchmarks; unsafe extern; Self; Drop; etc)\n* [weekly-meetings/2013-07-16](weekly-meetings/2013-07-16.md) (short meeting, admin only)\n* [weekly-meetings/2013-07-09](weekly-meetings/2013-07-09.md) (split stacks & ffi)\n* [weekly-meetings/2013-07-02](weekly-meetings/2013-07-02.md) (0.7; @mut; @ bounds)\n* [weekly-meetings/2013-06-25](weekly-meetings/2013-06-25.md) (0.7; @mut; iterators)\n* [weekly-meetings/2013-06-18](weekly-meetings/2013-06-18.md) (tree maintenance; 0.7; weekly status process; once fns; namespaces)\n* [weekly-meetings/2013-06-11](weekly-meetings/2013-06-11.md) (effects, master/incoming, new)\n* [weekly-meetings/2013-06-04](weekly-meetings/2013-06-04.md) (<<; mut bindings; dynamically-sized types; closure reform)\n* [weekly-meetings/2013-05-28](weekly-meetings/2013-05-28.md) (noalias; pub extern/pub impl; unwrap, get; Const->Freeze; new sched; 128i8)\n* [weekly-meetings/2013-05-21](weekly-meetings/2013-05-21.md) (proc; Owned->Send / Copy->Freeze; null/transmute in prelude; let a, b; @ patterns)\n* [weekly-meetings/2013-05-14](weekly-meetings/2013-05-14.md) (submodule ownership; generic paths; fns & dynamically sized types; copy removal)\n* [weekly-meetings/2013-05-07](weekly-meetings/2013-05-07.md) (by-val self in dtors; dynamic-sized types; submodule owners)\n* [weekly-meetings/2013-04-30](weekly-meetings/2013-04-30.md) (borrowck; closure recursion; typedef reform; remove <->; @bindings)\n* [weekly-meetings/2013-04-23](weekly-meetings/2013-04-23.md) (core/std; valgrind; uv; modes)\n* [weekly-meetings/2013-04-16](weekly-meetings/2013-04-16.md) (bors; infrastructure; warnings/data-flow; destructors; libicu; triage; converting `~` to `@`)\n* [weekly-meetings/2013-04-01](weekly-meetings/2013-04-01.md) (0.6; label syntax; impl grammar; FFI; Copy/Clone)\n* [weekly-meetings/2013-03-26](weekly-meetings/2013-03-26.md) (0.6)\n* [weekly-meetings/2013-03-12](weekly-meetings/2013-03-12.md) (GC; triage; bool; 78 column limit; impl *Type; 'static vs 'const; autoderef in overloaded operators; enum variants; global variables)\n* [weekly-meetings/2013-03-05](weekly-meetings/2013-03-05.md) (work week; object types; parsing; milestones; `copy` keyword; `Ord` vs `TotalOrd`)\n* [weekly-meetings/2013-02-26](weekly-meetings/2013-02-26.md) (capturing mutable variables, borrow checking, inheritance, trait auto-borrowing)\n* [weekly-meetings/2013-02-19](weekly-meetings/2013-02-19.md) (closure inference; rustpkg; associated types; whitespace)\n* [weekly-meetings/2013-02-12](weekly-meetings/2013-02-12.md) (non-sendable types; MIPS)\n* [weekly-meetings/2013-02-05](weekly-meetings/2013-02-05.md) (backwards compat; milestones; mut fields; region syntax)\n* [weekly-meetings/2013-01-29](weekly-meetings/2013-01-29.md) (region syntax; impl Type for Trait; mut fields)\n* [weekly-meetings/2013-01-22](weekly-meetings/2013-01-22.md) (for loop; semicolon; destructors; type bound syntax)\n* [weekly-meetings/2013-01-15](weekly-meetings/2013-01-15.md) (tree status; assert and log; #cfg conditions; function unsafe; trait bounds contexts; unsafe pointer indexing; static array bounds; removal of both type and trait impls; Eq and Ord reform)\n* [weekly-meetings/2013-01-08](weekly-meetings/2013-01-08.md) (region syntax; inherited mutability and write barriers)\n\n## Core team meetings\n\n* [core-team/meeting-2016-01-27.md](core-team/meeting-2016-01-27.md)\n  (web site translations; copyright dates; naming UFCS; specialization and lifetimes)\n* [core-team/meeting-2016-01-20.md](core-team/meeting-2016-01-20.md)\n  (moderator report; jemalloc; coc)\n* [core-team/meeting-2016-01-05.md](core-team/meeting-2016-01-05.md)\n  (RFC 1214; FAQ; backcompat issues)\n* [core-team/meeting-2015-12-15.md](core-team/meeting-2015-12-15.md)\n  (The Rust book; crates.io design; regression worries)\n* [core-team/meeting-2015-11-10.md](core-team/meeting-2015-11-10.md)\n  (moving rustfmt into rust-lang; wiki; liblibc/winapi breakage; pattern matching updates; multirust plans)\n* [core-team/meeting-2015-11-03.md](core-team/meeting-2015-11-03.md)\n  (1.5 release during work week; cargo check; const patterns; std::time; ffi)\n* [core-team/meeting-2015-10-06.md](core-team/meeting-2015-10-06.md)\n  (nightly/beta regressions; broken crates.io crates; new IRC channels; crates.io outage; recover; tier1/tier2 platforms)\n* [core-team/meeting-2015-08-10.md](core-team/meeting-2015-08-10.md)\n  (Non-zeroing moves; Duration stabilization; RustCamp; -O1; Trademark)\n* [core-team/meeting-2015-07-15.md](core-team/meeting-2015-07-15.md)\n  (Regression testing; Servo breakage; Connect to join; Specialization + dropck)\n* [core-team/meeting-2015-06-17.md](core-team/meeting-2015-06-17.md)\n  (Subteam reports; Default object lifetime bounds; Report from class using Rust; 1.1 release)\n* [core-team/meeting-2015-06-3.md](core-team/meeting-2015-06-3.md)\n  (RustCamp status; Community subteam; language terminology; Whistler work week; security bugs)\n* [core-team/meeting-2015-05-27.md](core-team/meeting-2015-05-27.md)\n  (book reviewing; RustCamp; community subteam; semantic versioning)\n* [core-team/meeting-2015-05-20.md](core-team/meeting-2015-05-20.md)\n  (TRPL translations; production user coordination; community subteam)\n* [core-team/meeting-2015-05-13.md](core-team/meeting-2015-05-13.md)\n  (1.0 announcement, subteam status report, governance web page,\n  security policy, semver for the language)\n* [core-team/meeting-2015-05-06.md](core-tem/meeting-2015-05-06.md)\n  (governance RFC, forget/leak/RcGuard, subteam setup)\n* [core-team/meeting-2015-04-29.md](core-team/meeting-2015-04-29.md)\n  (mem::forget, optimize by default, debug builders, security policy,\n  governance, release status)\n* [core-team/meeting-2015-04-22.md](core-team/meeting-2015-04-22.md)\n  (1.0 status, 1.1 planning, RFC discussion, minuting)\n\n## Older meetings\n\n* [Meetings 2012](Meetings-2012.md)\n* [Meetings 2011](Meetings-2011.md)\n\n## Other meetings:\n\n* [Meeting inheritance 2014-09-30](Meeting-inheritance-2014-09-30.md)\n* [Meeting inheritance 2014-09-23](Meeting-inheritance-2014-09-23.md)\n* [Meeting workweek 2014-08-18](workweek-2014-08-18/Meeting-workweek-2014-08-18.md)\n* [Meeting 2014-07-16 (macros)](Meeting-other-2014-07-16.md)\n* [Meeting API review 2014-08-06](Meeting-API-review-2014-08-06.md)\n* [Meeting API review 2014-07-16](Meeting-API-review-2014-07-16.md)\n* [Meeting API review 2014-07-07](Meeting-API-review-2014-07-07.md)\n* [Meeting RFC triage 2014-07-03](Meeting-RFC-triage-2014-07-03.md)\n* [Meeting RFC triage 2014-06-26](Meeting-RFC-triage-2014-06-26.md)\n* [Meeting workweek 2014-03-03](Meeting-workweek-2014-03-03.md)\n* [Meeting 2013-06-07](Meeting-2013-06-07.md) (dynamically sized types; closures; GC)\n* [Meeting planning 2013-01-08](Meeting-planning-2013-01-08.md) (0.6; 1.0)\n* [Meeting inperson 2011-04-06](Meeting-inperson-2011-04-06.md) (kind system; resources; env capture)\n", "release_dates": []}, {"name": "miri", "description": "An interpreter for Rust's mid-level intermediate representation", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Miri\n\nAn experimental interpreter for [Rust][rust]'s\n[mid-level intermediate representation][mir] (MIR). It can run binaries and\ntest suites of cargo projects and detect certain classes of\n[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html),\nfor example:\n\n* Out-of-bounds memory accesses and use-after-free\n* Invalid use of uninitialized data\n* Violation of intrinsic preconditions (an [`unreachable_unchecked`] being\n  reached, calling [`copy_nonoverlapping`] with overlapping ranges, ...)\n* Not sufficiently aligned memory accesses and references\n* Violation of *some* basic type invariants (a `bool` that is not 0 or 1, for example,\n  or an invalid enum discriminant)\n* **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n  for reference types\n* **Experimental**: Violations of the [Tree Borrows] aliasing rules, as an optional\n  alternative to [Stacked Borrows]\n* **Experimental**: Data races\n\nOn top of that, Miri will also tell you about memory leaks: when there is memory\nstill allocated at the end of the execution, and that memory is not reachable\nfrom a global `static`, Miri will raise an error.\n\nMiri supports almost all Rust language features; in particular, unwinding and\nconcurrency are properly supported (including some experimental emulation of\nweak memory effects, i.e., reads can return outdated values).\n\nYou can use Miri to emulate programs on other targets, e.g. to ensure that\nbyte-level data manipulation works correctly both on little-endian and\nbig-endian systems. See\n[cross-interpretation](#cross-interpretation-running-for-different-targets)\nbelow.\n\nMiri has already discovered some [real-world bugs](#bugs-found-by-miri). If you\nfound a bug with Miri, we'd appreciate if you tell us and we'll add it to the\nlist!\n\nBy default, Miri ensures a fully deterministic execution and isolates the\nprogram from the host system. Some APIs that would usually access the host, such\nas gathering entropy for random number generators, environment variables, and\nclocks, are replaced by deterministic \"fake\" implementations. Set\n`MIRIFLAGS=\"-Zmiri-disable-isolation\"` to access the real system APIs instead.\n(In particular, the \"fake\" system RNG APIs make Miri **not suited for\ncryptographic use**! Do not generate keys using Miri.)\n\nAll that said, be aware that Miri will **not catch all cases of undefined\nbehavior** in your program, and cannot run all programs:\n\n* There are still plenty of open questions around the basic invariants for some\n  types and when these invariants even have to hold. Miri tries to avoid false\n  positives here, so if your program runs fine in Miri right now that is by no\n  means a guarantee that it is UB-free when these questions get answered.\n\n    In particular, Miri does not check that references point to valid data.\n* If the program relies on unspecified details of how data is laid out, it will\n  still run fine in Miri -- but might break (including causing UB) on different\n  compiler versions or different platforms.\n* Program execution is non-deterministic when it depends, for example, on where\n  exactly in memory allocations end up, or on the exact interleaving of\n  concurrent threads. Miri tests one of many possible executions of your\n  program. You can alleviate this to some extent by running Miri with different\n  values for `-Zmiri-seed`, but that will still by far not explore all possible\n  executions.\n* Miri runs the program as a platform-independent interpreter, so the program\n  has no access to most platform-specific APIs or FFI. A few APIs have been\n  implemented (such as printing to stdout, accessing environment variables, and\n  basic file system access) but most have not: for example, Miri currently does\n  not support networking. System API support varies between targets; if you run\n  on Windows it is a good idea to use `--target x86_64-unknown-linux-gnu` to get\n  better support.\n* Weak memory emulation may [produce weak behaviours](https://github.com/rust-lang/miri/issues/2301)\n  unobservable by compiled programs running on real hardware when `SeqCst` fences are used, and it\n  cannot produce all behaviors possibly observable on real hardware.\n\nMoreover, Miri fundamentally cannot tell you whether your code is *sound*. [Soundness] is the property\nof never causing undefined behavior when invoked from arbitrary safe code, even in combination with\nother sound code. In contrast, Miri can just tell you if *a particular way of interacting with your\ncode* (e.g., a test suite) causes any undefined behavior. It is up to you to ensure sufficient\ncoverage.\n\n[rust]: https://www.rust-lang.org/\n[mir]: https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\n[`unreachable_unchecked`]: https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html\n[`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n[Stacked Borrows]: https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\n[Tree Borrows]: https://perso.crans.org/vanille/treebor/\n[Soundness]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\n\n\n## Using Miri\n\nInstall Miri on Rust nightly via `rustup`:\n\n```sh\nrustup +nightly component add miri\n```\n\nIf `rustup` says the `miri` component is unavailable, that's because not all\nnightly releases come with all tools. Check out\n[this website](https://rust-lang.github.io/rustup-components-history) to\ndetermine a nightly version that comes with Miri and install that using `rustup\ntoolchain install nightly-YYYY-MM-DD`. Either way, all of the following commands\nassume the right toolchain is pinned via `rustup override set nightly` or\n`rustup override set nightly-YYYY-MM-DD`. (Alternatively, use `cargo\n+nightly`/`cargo +nightly-YYYY-MM-DD` for each of the following commands.)\n\nNow you can run your project in Miri:\n\n- To run all tests in your project through Miri, use `cargo miri test`.\n- If you have a binary project, you can run it through Miri using `cargo miri run`.\n\nThe first time you run Miri, it will perform some extra setup and install some\ndependencies. It will ask you for confirmation before installing anything.\n\n`cargo miri run/test` supports the exact same flags as `cargo run/test`. For\nexample, `cargo miri test filter` only runs the tests containing `filter` in\ntheir name.\n\nYou can pass arguments to Miri via `MIRIFLAGS`. For example,\n`MIRIFLAGS=\"-Zmiri-disable-stacked-borrows\" cargo miri run` runs the program\nwithout checking the aliasing of references.\n\nWhen compiling code via `cargo miri`, the `cfg(miri)` config flag is set for code\nthat will be interpret under Miri. You can use this to ignore test cases that fail\nunder Miri because they do things Miri does not support:\n\n```rust\n#[test]\n#[cfg_attr(miri, ignore)]\nfn does_not_work_on_miri() {\n    tokio::run(futures::future::ok::<_, ()>(()));\n}\n```\n\nThere is no way to list all the infinite things Miri cannot do, but the\ninterpreter will explicitly tell you when it finds something unsupported:\n\n```\nerror: unsupported operation: can't call foreign function: bind\n    ...\n    = help: this is likely not a bug in the program; it indicates that the program \\\n            performed an operation that the interpreter does not support\n```\n\n### Cross-interpretation: running for different targets\n\nMiri can not only run a binary or test suite for your host target, it can also\nperform cross-interpretation for arbitrary foreign targets: `cargo miri run\n--target x86_64-unknown-linux-gnu` will run your program as if it was a Linux\nprogram, no matter your host OS. This is particularly useful if you are using\nWindows, as the Linux target is much better supported than Windows targets.\n\nYou can also use this to test platforms with different properties than your host\nplatform. For example `cargo miri test --target s390x-unknown-linux-gnu`\nwill run your test suite on a big-endian target, which is useful for testing\nendian-sensitive code.\n\n### Running Miri on CI\n\nTo run Miri on CI, make sure that you handle the case where the latest nightly\ndoes not ship the Miri component because it currently does not build. `rustup\ntoolchain install --component` knows how to handle this situation, so the\nfollowing snippet should always work:\n\n```sh\nrustup toolchain install nightly --component miri\nrustup override set nightly\n\ncargo miri test\n```\n\nHere is an example job for GitHub Actions:\n\n```yaml\n  miri:\n    name: \"Miri\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Miri\n        run: |\n          rustup toolchain install nightly --component miri\n          rustup override set nightly\n          cargo miri setup\n      - name: Test with Miri\n        run: cargo miri test\n```\n\nThe explicit `cargo miri setup` helps to keep the output of the actual test step\nclean.\n\n### Testing for alignment issues\n\nMiri can sometimes miss misaligned accesses since allocations can \"happen to be\"\naligned just right. You can use `-Zmiri-symbolic-alignment-check` to definitely\ncatch all such issues, but that flag will also cause false positives when code\ndoes manual pointer arithmetic to account for alignment. Another alternative is\nto call Miri with various values for `-Zmiri-seed`; that will alter the\nrandomness that is used to determine allocation base addresses. The following\nsnippet calls Miri in a loop with different values for the seed:\n\n```\nfor SEED in $(seq 0 255); do\n  echo \"Trying seed: $SEED\"\n  MIRIFLAGS=-Zmiri-seed=$SEED cargo miri test || { echo \"Failing seed: $SEED\"; break; };\ndone\n```\n\n### Supported targets\n\nMiri does not support all targets supported by Rust. The good news, however, is\nthat no matter your host OS/platform, it is easy to run code for *any* target\nusing `--target`!\n\nThe following targets are tested on CI and thus should always work (to the\ndegree documented below):\n\n- All Rust [Tier 1 targets](https://doc.rust-lang.org/rustc/platform-support.html) are supported by\n  Miri. They are all checked on Miri's CI, and some (at least one per OS) are even checked on every\n  Rust PR, so the shipped Miri should always work on these targets.\n- `aarch64-apple-darwin` is supported.\n- `s390x-unknown-linux-gnu` is supported as our \"big-endian target of choice\".\n- For every other target with OS `linux`, `macos`, or `windows`, Miri should generally work, but we\n  make no promises and we don't run tests for such targets.\n- For targets on other operating systems, even basic operations such as printing to the standard\n  output might not work, and Miri might fail before even reaching the `main` function.\n\nHowever, even for targets that we do support, the degree of support for accessing platform APIs\n(such as the file system) differs between targets: generally, Linux targets have the best support,\nand macOS targets are usually on par. Windows is supported less well.\n\n### Running tests in parallel\n\nThough it implements Rust threading, Miri itself is a single-threaded interpreter.\nThis means that when running `cargo miri test`, you will probably see a dramatic\nincrease in the amount of time it takes to run your whole test suite due to the\ninherent interpreter slowdown and a loss of parallelism.\n\nYou can get your test suite's parallelism back by running `cargo miri nextest run -jN`\n(note that you will need [`cargo-nextest`](https://nexte.st) installed).\nThis works because `cargo-nextest` collects a list of all tests then launches a\nseparate `cargo miri run` for each test. You will need to specify a `-j` or `--test-threads`;\nby default `cargo miri nextest run` runs one test at a time. For more details, see the\n[`cargo-nextest` Miri documentation](https://nexte.st/book/miri.html).\n\nNote: This one-test-per-process model means that `cargo miri test` is able to detect data\nraces where two tests race on a shared resource, but `cargo miri nextest run` will not detect\nsuch races.\n\nNote: `cargo-nextest` does not support doctests, see https://github.com/nextest-rs/nextest/issues/16\n\n### Common Problems\n\nWhen using the above instructions, you may encounter a number of confusing compiler\nerrors.\n\n#### \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n\nYou may see this when trying to get Miri to display a backtrace. By default, Miri\ndoesn't expose any environment to the program, so running\n`RUST_BACKTRACE=1 cargo miri test` will not do what you expect.\n\nTo get a backtrace, you need to disable isolation\n[using `-Zmiri-disable-isolation`][miri-flags]:\n\n```sh\nRUST_BACKTRACE=1 MIRIFLAGS=\"-Zmiri-disable-isolation\" cargo miri test\n```\n\n#### \"found possibly newer version of crate `std` which `<dependency>` depends on\"\n\nYour build directory may contain artifacts from an earlier build that have/have\nnot been built for Miri. Run `cargo clean` before switching from non-Miri to\nMiri builds and vice-versa.\n\n#### \"found crate `std` compiled by an incompatible version of rustc\"\n\nYou may be running `cargo miri` with a different compiler version than the one\nused to build the custom libstd that Miri uses, and Miri failed to detect that.\nTry running `cargo miri clean`.\n\n#### \"no mir for `std::rt::lang_start_internal`\"\n\nThis means the sysroot you are using was not compiled with Miri in mind.  This\nshould never happen when you use `cargo miri` because that takes care of setting\nup the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n[contributors' guide](CONTRIBUTING.md) for how to use `./miri` to best do that.\n\n\n## Miri `-Z` flags and environment variables\n[miri-flags]: #miri--z-flags-and-environment-variables\n\nMiri adds its own set of `-Z` flags, which are usually set via the `MIRIFLAGS`\nenvironment variable. We first document the most relevant and most commonly used flags:\n\n* `-Zmiri-compare-exchange-weak-failure-rate=<rate>` changes the failure rate of\n  `compare_exchange_weak` operations. The default is `0.8` (so 4 out of 5 weak ops will fail).\n  You can change it to any value between `0.0` and `1.0`, where `1.0` means it\n  will always fail and `0.0` means it will never fail. Note than setting it to\n  `1.0` will likely cause hangs, since it means programs using\n  `compare_exchange_weak` cannot make progress.\n* `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n  the program has access to host resources such as environment variables, file\n  systems, and randomness.\n* `-Zmiri-disable-leak-backtraces` disables backtraces reports for memory leaks. By default, a\n  backtrace is captured for every allocation when it is created, just in case it leaks. This incurs\n  some memory overhead to store data that is almost never used. This flag is implied by\n  `-Zmiri-ignore-leaks`.\n* `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n  be used multiple times to forward several variables. Execution will still be deterministic if the\n  value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n* `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n  remaining threads to exist when the main thread exits.\n* `-Zmiri-isolation-error=<action>` configures Miri's response to operations\n  requiring host access while isolation is enabled. `abort`, `hide`, `warn`,\n  and `warn-nobacktrace` are the supported actions. The default is to `abort`,\n  which halts the machine. Some (but not all) operations also support continuing\n  execution with a \"permission denied\" error being returned to the program.\n  `warn` prints a full backtrace when that happens; `warn-nobacktrace` is less\n  verbose. `hide` hides the warning entirely.\n* `-Zmiri-num-cpus` states the number of available CPUs to be reported by miri. By default, the\n  number of available CPUs is `1`. Note that this flag does not affect how miri handles threads in\n  any way.\n* `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n  [`ptr::from_exposed_addr`](https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html).\n  This will necessarily miss some bugs as those operations are not efficiently and accurately\n  implementable in a sanitizer, but it will only miss bugs that concern memory/pointers which is\n  subject to these operations.\n* `-Zmiri-preemption-rate` configures the probability that at the end of a basic block, the active\n  thread will be preempted. The default is `0.01` (i.e., 1%). Setting this to `0` disables\n  preemption.\n* `-Zmiri-report-progress` makes Miri print the current stacktrace every now and then, so you can\n  tell what it is doing when a program just keeps running. You can customize how frequently the\n  report is printed via `-Zmiri-report-progress=<blocks>`, which prints the report every N basic\n  blocks.\n* `-Zmiri-seed=<num>` configures the seed of the RNG that Miri uses to resolve non-determinism. This\n  RNG is used to pick base addresses for allocations, to determine preemption and failure of\n  `compare_exchange_weak`, and to control store buffering for weak memory emulation. When isolation\n  is enabled (the default), this is also used to emulate system entropy. The default seed is 0. You\n  can increase test coverage by running Miri multiple times with different seeds.\n* `-Zmiri-strict-provenance` enables [strict\n  provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n  casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n  that cannot be used for any memory access.\n* `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By default, alignment is\n  checked by casting the pointer to an integer, and making sure that is a multiple of the alignment.\n  This can lead to cases where a program passes the alignment check by pure chance, because things\n  \"happened to be\" sufficiently aligned -- there is no UB in this execution but there would be UB in\n  others.  To avoid such cases, the symbolic alignment check only takes into account the requested\n  alignment of the relevant allocation, and the offset into that allocation.  This avoids missing\n  such bugs, but it also incurs some false positives when the code does manual integer arithmetic to\n  ensure alignment.  (The standard library `align_to` method works fine in both modes; under\n  symbolic alignment it only fills the middle slice when the allocation guarantees sufficient\n  alignment.)\n\nThe remaining flags are for advanced use only, and more likely to change or be removed.\nSome of these are **unsound**, which means they can lead\nto Miri failing to detect cases of undefined behavior in a program.\n\n* `-Zmiri-disable-abi-check` disables checking [function ABI]. Using this flag\n  is **unsound**. This flag is **deprecated**.\n* `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n  can focus on other failures, but it means Miri can miss bugs in your program.\n  Using this flag is **unsound**.\n* `-Zmiri-disable-data-race-detector` disables checking for data races.  Using\n  this flag is **unsound**. This implies `-Zmiri-disable-weak-memory-emulation`.\n* `-Zmiri-disable-stacked-borrows` disables checking the experimental\n  aliasing rules to track borrows ([Stacked Borrows] and [Tree Borrows]).\n  This can make Miri run faster, but it also means no aliasing violations will\n  be detected. Using this flag is **unsound** (but the affected soundness rules\n  are experimental). Later flags take precedence: borrow tracking can be reactivated\n  by `-Zmiri-tree-borrows`.\n* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n  enforced by default.  This is mostly useful to focus on other failures (such\n  as out-of-bounds accesses) first.  Setting this flag means Miri can miss bugs\n  in your program.  However, this can also help to make Miri run faster.  Using\n  this flag is **unsound**.\n* `-Zmiri-disable-weak-memory-emulation` disables the emulation of some C++11 weak\n  memory effects.\n* `-Zmiri-extern-so-file=<path to a shared object file>` is an experimental flag for providing support\n  for FFI calls. Functions not provided by that file are still executed via the usual Miri shims.\n  **WARNING**: If an invalid/incorrect `.so` file is specified, this can cause undefined behaviour in Miri itself!\n  And of course, Miri cannot do any checks on the actions taken by the external code.\n  Note that Miri has its own handling of file descriptors, so if you want to replace *some* functions\n  working on file descriptors, you will have to replace *all* of them, or the two kinds of\n  file descriptors will be mixed up.\n  This is **work in progress**; currently, only integer arguments and return values are\n  supported (and no, pointer/integer casts to work around this limitation will not work;\n  they will fail horribly). It also only works on unix hosts for now.\n  Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365).\n* `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n   This can be used to find which parts of your program are executing slowly under Miri.\n   The profile is written out to a file inside a directory called `<name>`, and can be processed\n   using the tools in the repository https://github.com/rust-lang/measureme.\n* `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n  but reports to the program that it did actually write. This is useful when you\n  are not interested in the actual program's output, but only want to see Miri's\n  errors and warnings.\n* `-Zmiri-panic-on-unsupported` will makes some forms of unsupported functionality,\n  such as FFI and unsupported syscalls, panic within the context of the emulated\n  application instead of raising an error within the context of Miri (and halting\n  execution). Note that code might not expect these operations to ever panic, so\n  this flag can lead to strange (mis)behavior.\n* `-Zmiri-retag-fields[=<all|none|scalar>]` controls when Stacked Borrows retagging recurses into\n  fields. `all` means it always recurses (the default, and equivalent to `-Zmiri-retag-fields`\n  without an explicit value), `none` means it never recurses, `scalar` means it only recurses for\n  types where we would also emit `noalias` annotations in the generated LLVM IR (types passed as\n  individual scalars or pairs of scalars). Setting this to `none` is **unsound**.\n* `-Zmiri-provenance-gc=<blocks>` configures how often the pointer provenance garbage collector runs.\n  The default is to search for and remove unreachable provenance once every `10000` basic blocks. Setting\n  this to `0` disables the garbage collector, which causes some programs to have explosive memory\n  usage and/or super-linear runtime.\n* `-Zmiri-track-alloc-id=<id1>,<id2>,...` shows a backtrace when the given allocations are\n  being allocated or freed.  This helps in debugging memory leaks and\n  use after free bugs. Specifying this argument multiple times does not overwrite the previous\n  values, instead it appends its values to the list. Listing an id multiple times has no effect.\n* `-Zmiri-track-call-id=<id1>,<id2>,...` shows a backtrace when the given call ids are\n  assigned to a stack frame.  This helps in debugging UB related to Stacked\n  Borrows \"protectors\". Specifying this argument multiple times does not overwrite the previous\n  values, instead it appends its values to the list. Listing an id multiple times has no effect.\n* `-Zmiri-track-pointer-tag=<tag1>,<tag2>,...` shows a backtrace when a given pointer tag\n  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid\n  and any future use of it will error).  This helps you in finding out why UB is\n  happening and where in your code would be a good place to look for it.\n  Specifying this argument multiple times does not overwrite the previous\n  values, instead it appends its values to the list. Listing a tag multiple times has no effect.\n* `-Zmiri-track-weak-memory-loads` shows a backtrace when weak memory emulation returns an outdated\n  value from a load. This can help diagnose problems that disappear under\n  `-Zmiri-disable-weak-memory-emulation`.\n* `-Zmiri-tree-borrows` replaces [Stacked Borrows] with the [Tree Borrows] rules.\n  The soundness rules are already experimental without this flag, but even more\n  so with this flag.\n* `-Zmiri-force-page-size=<num>` overrides the default page size for an architecture, in multiples of 1k.\n  `4` is default for most targets. This value should always be a power of 2 and nonzero.\n* `-Zmiri-unique-is-unique` performs additional aliasing checks for `core::ptr::Unique` to ensure\n  that it could theoretically be considered `noalias`. This flag is experimental and has\n  an effect only when used with `-Zmiri-tree-borrows`.\n\n[function ABI]: https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier\n\nSome native rustc `-Z` flags are also very relevant for Miri:\n\n* `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n  overrides the default to be `0`; be advised that using any higher level can\n  make Miri miss bugs in your program because they got optimized away.\n* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n  functions.  This is needed so that Miri can execute such functions, so Miri\n  sets this flag per default.\n* `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n  enables this per default because it is needed for [Stacked Borrows] and [Tree Borrows].\n\nMoreover, Miri recognizes some environment variables:\n\n* `MIRI_AUTO_OPS` indicates whether the automatic execution of rustfmt, clippy and toolchain setup\n  should be skipped. If it is set to `no`, they are skipped. This is used to allow automated IDE\n  actions to avoid the auto ops.\n* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n  Miri executions, also [see \"Testing the Miri driver\" in `CONTRIBUTING.md`][testing-miri].\n* `MIRIFLAGS` (recognized by `cargo miri` and the test suite) defines extra\n  flags to be passed to Miri.\n* `MIRI_LIB_SRC` defines the directory where Miri expects the sources of the\n  standard library that it will build and use for interpretation. This directory\n  must point to the `library` subdirectory of a `rust-lang/rust` repository\n  checkout. Note that changing files in that directory does not automatically\n  trigger a re-build of the standard library; you have to clear the Miri build\n  cache with `cargo miri clean` or deleting it manually (on Linux, `rm -rf ~/.cache/miri`;\n  on Windows, `rmdir /S \"%LOCALAPPDATA%\\rust-lang\\miri\\cache\"`;\n  and on macOS, `rm -rf ~/Library/Caches/org.rust-lang.miri`).\n* `MIRI_SYSROOT` (recognized by `cargo miri` and the Miri driver) indicates the sysroot to use. When\n  using `cargo miri`, this skips the automatic setup -- only set this if you do not want to use the\n  automatically created sysroot. For directly invoking the Miri driver, this variable (or a\n  `--sysroot` flag) is mandatory. When invoking `cargo miri setup`, this indicates where the sysroot\n  will be put.\n* `MIRI_TEST_TARGET` (recognized by the test suite and the `./miri` script) indicates which target\n  architecture to test against.  `miri` and `cargo miri` accept the `--target` flag for the same\n  purpose.\n* `MIRI_TEST_THREADS` (recognized by the test suite): set the number of threads to use for running tests.\n  By default the number of cores is used.\n* `MIRI_NO_STD` (recognized by `cargo miri`) makes sure that the target's sysroot is built without\n  libstd. This allows testing and running no_std programs.\n  (Miri has a heuristic to detect no-std targets based on the target name; this environment variable\n  is only needed when that heuristic fails.)\n* `RUSTC_BLESS` (recognized by the test suite and `cargo-miri-test/run-test.py`): overwrite all\n  `stderr` and `stdout` files instead of checking whether the output matches.\n* `MIRI_SKIP_UI_CHECKS` (recognized by the test suite): don't check whether the\n  `stderr` or `stdout` files match the actual output.\n\nThe following environment variables are *internal* and must not be used by\nanyone but Miri itself. They are used to communicate between different Miri\nbinaries, and as such worth documenting:\n\n* `MIRI_BE_RUSTC` can be set to `host` or `target`. It tells the Miri driver to\n  actually not interpret the code but compile it like rustc would. With `target`, Miri sets\n  some compiler flags to prepare the code for interpretation; with `host`, this is not done.\n  This environment variable is useful to be sure that the compiled `rlib`s are compatible\n  with Miri.\n* `MIRI_CALLED_FROM_SETUP` is set during the Miri sysroot build,\n  which will re-invoke `cargo-miri` as the `rustc` to use for this build.\n* `MIRI_CALLED_FROM_RUSTDOC` when set to any value tells `cargo-miri` that it is\n  running as a child process of `rustdoc`, which invokes it twice for each doc-test\n  and requires special treatment, most notably a check-only build before interpretation.\n  This is set by `cargo-miri` itself when running as a `rustdoc`-wrapper.\n* `MIRI_CWD` when set to any value tells the Miri driver to change to the given\n  directory after loading all the source files, but before commencing\n  interpretation. This is useful if the interpreted program wants a different\n  working directory at run-time than at build-time.\n* `MIRI_LOCAL_CRATES` is set by `cargo-miri` to tell the Miri driver which\n  crates should be given special treatment in diagnostics, in addition to the\n  crate currently being compiled.\n* `MIRI_VERBOSE` when set to any value tells the various `cargo-miri` phases to\n  perform verbose logging.\n* `MIRI_HOST_SYSROOT` is set by bootstrap to tell `cargo-miri` which sysroot to use for *host*\n  operations.\n\n[testing-miri]: CONTRIBUTING.md#testing-the-miri-driver\n\n## Miri `extern` functions\n\nMiri provides some `extern` functions that programs can import to access\nMiri-specific functionality. They are declared in\n[/tests/utils/miri\\_extern.rs](/tests/utils/miri_extern.rs).\n\n## Contributing and getting help\n\nIf you want to contribute to Miri, great!  Please check out our\n[contribution guide](CONTRIBUTING.md).\n\nFor help with running Miri, you can open an issue here on\nGitHub or use the [Miri stream on the Rust Zulip][zulip].\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/269128-miri\n\n## History\n\nThis project began as part of an undergraduate research course in 2015 by\n@solson at the [University of Saskatchewan][usask].  There are [slides] and a\n[report] available from that project.  In 2016, @oli-obk joined to prepare Miri\nfor eventually being used as const evaluator in the Rust compiler itself\n(basically, for `const` and `static` stuff), replacing the old evaluator that\nworked directly on the AST.  In 2017, @RalfJung did an internship with Mozilla\nand began developing Miri towards a tool for detecting undefined behavior, and\nalso using Miri as a way to explore the consequences of various possible\ndefinitions for undefined behavior in Rust.  @oli-obk's move of the Miri engine\ninto the compiler finally came to completion in early 2018.  Meanwhile, later\nthat year, @RalfJung did a second internship, developing Miri further with\nsupport for checking basic type invariants and verifying that references are\nused according to their aliasing restrictions.\n\n[usask]: https://www.usask.ca/\n[slides]: https://solson.me/miri-slides.pdf\n[report]: https://solson.me/miri-report.pdf\n\n## Bugs found by Miri\n\nMiri has already found a number of bugs in the Rust standard library and beyond, which we collect here.\n\nDefinite bugs found:\n\n* [`Debug for vec_deque::Iter` accessing uninitialized memory](https://github.com/rust-lang/rust/issues/53566)\n* [`Vec::into_iter` doing an unaligned ZST read](https://github.com/rust-lang/rust/pull/53804)\n* [`From<&[T]> for Rc` creating a not sufficiently aligned reference](https://github.com/rust-lang/rust/issues/54908)\n* [`BTreeMap` creating a shared reference pointing to a too small allocation](https://github.com/rust-lang/rust/issues/54957)\n* [`Vec::append` creating a dangling reference](https://github.com/rust-lang/rust/pull/61082)\n* [Futures turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/56319)\n* [`str` turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/58200)\n* [`rand` performing unaligned reads](https://github.com/rust-random/rand/issues/779)\n* [The Unix allocator calling `posix_memalign` in an invalid way](https://github.com/rust-lang/rust/issues/62251)\n* [`getrandom` calling the `getrandom` syscall in an invalid way](https://github.com/rust-random/getrandom/pull/73)\n* [`Vec`](https://github.com/rust-lang/rust/issues/69770) and [`BTreeMap`](https://github.com/rust-lang/rust/issues/69769) leaking memory under some (panicky) conditions\n* [`beef` leaking memory](https://github.com/maciejhirsz/beef/issues/12)\n* [`EbrCell` using uninitialized memory incorrectly](https://github.com/Firstyear/concread/commit/b15be53b6ec076acb295a5c0483cdb4bf9be838f#diff-6282b2fc8e98bd089a1f0c86f648157cR229)\n* [TiKV performing an unaligned pointer access](https://github.com/tikv/tikv/issues/7613)\n* [`servo_arc` creating a dangling shared reference](https://github.com/servo/servo/issues/26357)\n* [TiKV constructing out-of-bounds pointers (and overlapping mutable references)](https://github.com/tikv/tikv/pull/7751)\n* [`encoding_rs` doing out-of-bounds pointer arithmetic](https://github.com/hsivonen/encoding_rs/pull/53)\n* [TiKV using `Vec::from_raw_parts` incorrectly](https://github.com/tikv/agatedb/pull/24)\n* Incorrect doctests for [`AtomicPtr`](https://github.com/rust-lang/rust/pull/84052) and [`Box::from_raw_in`](https://github.com/rust-lang/rust/pull/84053)\n* [Insufficient alignment in `ThinVec`](https://github.com/Gankra/thin-vec/pull/27)\n* [`crossbeam-epoch` calling `assume_init` on a partly-initialized `MaybeUninit`](https://github.com/crossbeam-rs/crossbeam/pull/779)\n* [`integer-encoding` dereferencing a misaligned pointer](https://github.com/dermesser/integer-encoding-rs/pull/23)\n* [`rkyv` constructing a `Box<[u8]>` from an overaligned allocation](https://github.com/rkyv/rkyv/commit/a9417193a34757e12e24263178be8b2eebb72456)\n* [Data race in `arc-swap`](https://github.com/vorner/arc-swap/issues/76)\n* [Data race in `thread::scope`](https://github.com/rust-lang/rust/issues/98498)\n* [`regex` incorrectly handling unaligned `Vec<u8>` buffers](https://www.reddit.com/r/rust/comments/vq3mmu/comment/ienc7t0?context=3)\n* [Incorrect use of `compare_exchange_weak` in `once_cell`](https://github.com/matklad/once_cell/issues/186)\n* [Dropping with unaligned pointers in `vec::IntoIter`](https://github.com/rust-lang/rust/pull/106084)\n* [Deallocating with the wrong layout in new specializations for in-place `Iterator::collect`](https://github.com/rust-lang/rust/pull/118460)\n* [Incorrect offset computation for highly-aligned types in `portable-atomic-util`](https://github.com/taiki-e/portable-atomic/pull/138)\n* [Occasional memory leak in `std::mpsc` channels](https://github.com/rust-lang/rust/issues/121582) (original code in [crossbeam](https://github.com/crossbeam-rs/crossbeam/pull/1084))\n\nViolations of [Stacked Borrows] found that are likely bugs (but Stacked Borrows is currently just an experiment):\n\n* [`VecDeque::drain` creating overlapping mutable references](https://github.com/rust-lang/rust/pull/56161)\n* Various `BTreeMap` problems\n    * [`BTreeMap` iterators creating mutable references that overlap with shared references](https://github.com/rust-lang/rust/pull/58431)\n    * [`BTreeMap::iter_mut` creating overlapping mutable references](https://github.com/rust-lang/rust/issues/73915)\n    * [`BTreeMap` node insertion using raw pointers outside their valid memory area](https://github.com/rust-lang/rust/issues/78477)\n* [`LinkedList` cursor insertion creating overlapping mutable references](https://github.com/rust-lang/rust/pull/60072)\n* [`Vec::push` invalidating existing references into the vector](https://github.com/rust-lang/rust/issues/60847)\n* [`align_to_mut` violating uniqueness of mutable references](https://github.com/rust-lang/rust/issues/68549)\n* [`sized-chunks` creating aliasing mutable references](https://github.com/bodil/sized-chunks/issues/8)\n* [`String::push_str` invalidating existing references into the string](https://github.com/rust-lang/rust/issues/70301)\n* [`ryu` using raw pointers outside their valid memory area](https://github.com/dtolnay/ryu/issues/24)\n* [ink! creating overlapping mutable references](https://github.com/rust-lang/miri/issues/1364)\n* [TiKV creating overlapping mutable reference and raw pointer](https://github.com/tikv/tikv/pull/7709)\n* [Windows `Env` iterator using a raw pointer outside its valid memory area](https://github.com/rust-lang/rust/pull/70479)\n* [`VecDeque::iter_mut` creating overlapping mutable references](https://github.com/rust-lang/rust/issues/74029)\n* [Various standard library aliasing issues involving raw pointers](https://github.com/rust-lang/rust/pull/78602)\n* [`<[T]>::copy_within` using a loan after invalidating it](https://github.com/rust-lang/rust/pull/85610)\n\n## Scientific papers employing Miri\n\n* [Stacked Borrows: An Aliasing Model for Rust](https://plv.mpi-sws.org/rustbelt/stacked-borrows/)\n* [Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3](https://www.amazon.science/publications/using-lightweight-formal-methods-to-validate-a-key-value-storage-node-in-amazon-s3)\n* [SyRust: Automatic Testing of Rust Libraries with Semantic-Aware Program Synthesis](https://dl.acm.org/doi/10.1145/3453483.3454084)\n\n## License\n\nLicensed under either of\n\n  * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n    http://www.apache.org/licenses/LICENSE-2.0)\n  * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n    http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you shall be dual licensed as above, without any\nadditional terms or conditions.\n", "release_dates": []}, {"name": "miri-test-libstd", "description": "Testing the Rust standard library with Miri, continuously", "language": "Shell", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "This repository serves to run the libcore, liballoc, and libstd test suites in [Miri](https://github.com/rust-lang/miri/).\nThis includes unit tests, integration tests, and doc tests, but not rustc ui tests.\n\nEvery night, a CI cron job runs the tests against the latest nightly, to make sure we notice when changes in Rust or Miri break a test.\n(Some libstd tests are excluded since they rely on platform-specific APIs that Miri does not implement.)\n\n### Running the tests yourself\n\nTo run the tests yourself, make sure you have Miri installed (`rustup component add miri`) and then run:\n\n```shell\n./run-test.sh core --lib --tests\n./run-test.sh alloc --lib --tests\nMIRIFLAGS=\"-Zmiri-disable-isolation\" ./run-test.sh std --lib --tests -- time::\n```\n\nThis will run the test suite of the standard library of your current toolchain.\n`--lib --tests` means that doc tests are skipped; those should use separate Miri flags as there are some (expected) memory leaks.\nUse `--doc` to run only doc tests.\nFor `std`, we cannot run *all* tests since they will use networking and file system APIs that we do not support.\n\nIf you are working on the standard library and want to check that the tests pass with your modifications, set `MIRI_LIB_SRC` to the `library` folder of the checkout you are working in:\n\n```shell\nMIRI_LIB_SRC=~/path/to/rustc/library ./run-test.sh core --lib --tests\n```\n\nHere, `~/path/to/rustc` should be the directory containing `x.py`.\nThen the test suite will be compiled from the standard library in that directory.\nMake sure that is as close to your rustup default toolchain as possible, as the toolchain will still be used to build that standard library and its test suite.\nIf you are getting strange build errors, `cargo clean` can often fix that.\n\n`run-test` also accepts parameters that are passed to `cargo test` and the test runner,\nand `MIRIFLAGS` can be used as usual to pass parameters to Miri:\n\n```shell\nMIRIFLAGS=\"-Zmiri-ignore-leaks -Zmiri-disable-isolation\" ./run-test.sh alloc --doc -- --skip vec\n```\n\nIf you want to know how long each test took to execute, add `2>&1 | ts -m -i '%.s  '` to the end of the command,\nor use the test flags `-Zunstable-options --report-time` (the latter option also requires `-Zmiri-disable-isolation` in the Miri flags).\n", "release_dates": []}, {"name": "mirror-google-fuchsia-zircon", "description": "Zircon Kernel, Core Drivers, and Services", "language": null, "license": null, "readme": "This is a mirror of the [Zircon repository][zircon] used by\n[rust-lang/rust][rustc]'s CI.\n\n[zircon]: https://fuchsia.googlesource.com/zircon\n[rustc]: https://github.com/rust-lang/rust\n", "release_dates": []}, {"name": "moderation-team", "description": "Home of the Rust Moderation team.", "language": null, "license": null, "readme": "# Rust Moderation Team\n\nThis repository holds the data and policies of the Rust Moderation Team.\n\nPolicies:\n - [Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct)\n - [Venue Specific Moderation](./policies/venue-mod.md)\n", "release_dates": []}, {"name": "monitorbot", "description": "Monitoring of external API services Rust infrastructure relies upon", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# monitorbot\n\nThis project is intended to monitor various APIs and services that the\ninfrastructure team hosts.\n", "release_dates": []}, {"name": "nano-config", "description": "Nano configuration for Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust syntax highlighting for nano\n\n> ***Note:*** This repository is only useful for nano 2.6.0 or older\n\nSince nano 2.6.1 a support for Rust syntax highlighting is included so there\nis no need to use the [rust.nanorc](rust.nanorc) config file from this repository.\n\nWhen using a nano release older than 2.6.1 the [rust.nanorc](rust.nanorc) from this repository\nshould be used, not the file from\n[nano 2.6.1 or newer](http://git.savannah.gnu.org/cgit/nano.git/plain/doc/syntax/rust.nanorc),\nbecause otherwise an error message will be shown during nano startup.\n\nSee [GNU nano bug #48555](https://savannah.gnu.org/bugs/?48555)\n\nPatches can be contributed on the\n[GNU nano](https://savannah.gnu.org/patch/?group=nano) website or through the\n[nano-devel](https://lists.gnu.org/mailman/listinfo/nano-devel) mailing list.\n", "release_dates": []}, {"name": "negative-impls-initiative", "description": "Lang team negative impls initiative", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# negative impls initiative\n\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n \n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/{{INITIATIVE_NAME}}/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * {{INITIATIVE_NAME}} -> The display name of your group e.g. \"Inline ASM\".\n * {{INITIATIVE_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the negative-impls [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter]. \n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Proposal issue](https://github.com/rust-lang/lang-team/issues/96) |\n|                                       |       | [Charter](./CHARTER.md) |\n|                                       |       | [Tracking issue](https://github.com/rust-lang/rust/issues/68318) |\n| [Experimental]                        | \ud83e\udd80    | [Evaluation](./evaluation.md) |\n|                                       |       | [RFC](./RFC.md) |\n| [Development]                         | \ud83d\udca4    | [Explainer](./explainer.md) | \n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first. \n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [{{CHAT_PLATFORM}}][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: {{CHAT_LINK}}\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/initiative-{{INITIATIVE_SLUG}}.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "never-type-initiative", "description": "In pursuit of the stabilization of never type", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Never type initiative\n<!--\n\n This is the template for creating an initiative in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n Steps to customize:\n\n * Edit CHARTER.md\n * Replace placeholder text (see below)\n * Remove references to \"expermental\" and \"evaluation\" unless you need them\n\n  All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/{{INITIATIVE_NAME}}/Inline ASM/g' ./**/*.md`\n *Note* you need `-i ''` on macOS and just `-i` on Linux.\n\n * {{INITIATIVE_NAME}} -> The display name of your group e.g. \"Inline ASM\".\n * {{INITIATIVE_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n\nTo get your repo under rust-lang, file an infra issue:\nhttps://github.com/rust-lang/infra-team/issues/new\n\n-->\n\n![initiative status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## What is this?\n\nThis page tracks the work of the never type [initiative]! To learn more about what we are trying to do, and to find out the people who are doing it, take a look at the [charter].\n\n[charter]: ./CHARTER.md\n[initiative]: https://lang-team.rust-lang.org/initiatives.html\n\n## Current status\n\nThe following table lists of the stages of an initiative, along with links to the artifacts that will be produced during that stage.\n\n| Stage                                 | State | Artifact(s) |\n| ------------------------------------- | ----- | ----------- |\n| [Proposal]                            | \u2705    | [Tracking issue](https://github.com/rust-lang/rust/issues/35121) |\n| [Experimental]                        | \ud83e\udd80    | [Evaluation](./evaluation.md) |\n|                                       |       | [RFC](./RFC.md) |\n| [Development]                         | \ud83d\udca4    | [Explainer](./explainer.md) |\n| [Feature complete]                    | \ud83d\udca4    | Stabilization report |\n| [Stabilized]                          | \ud83d\udca4    | |\n\n[Proposal]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Experimental]: https://lang-team.rust-lang.org/initiatives/process/stages/proposal.html\n[Development]: https://lang-team.rust-lang.org/initiatives/process/stages/development.html\n[Feature complete]: https://lang-team.rust-lang.org/initiatives/process/stages/feature-complete.html\n[Stabilized]: https://lang-team.rust-lang.org/initiatives/process/stages/stabilized.html\n\nKey:\n\n* \u2705 -- phase complete\n* \ud83e\udd80 -- phase in progress\n* \ud83d\udca4 -- phase not started yet\n\n## How Can I Get Involved?\n\n* Check for 'help wanted' issues on this repository!\n* If you would like to help with development, please contact the [owner](./charter.md#membership) to find out if there are things that need doing.\n* If you would like to help with the design, check the list of active [design questions](./design-questions/README.md) first.\n* If you have questions about the design, you can file an issue, but be sure to check the [FAQ](./FAQ.md) or the [design-questions](./design-questions/README.md) first to see if there is already something that covers your topic.\n* If you are using the feature and would like to provide feedback about your experiences, please [open a \"experience report\" issue].\n* If you are using the feature and would like to report a bug, please open a regular issue.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/259160-t-lang.2Fproject-never-type\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-never-type.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "nomicon", "description": "The Dark Arts of Advanced and Unsafe Rust Programming", "language": "CSS", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rustonomicon\n\nThe Dark Arts of Advanced and Unsafe Rust Programming\n\nNicknamed \"the Nomicon.\"\n\n## NOTE: This is a draft document, and may contain serious errors\n\n> Instead of the programs I had hoped for, there came only a shuddering\nblackness and ineffable loneliness; and I saw at last a fearful truth which no\none had ever dared to breathe before \u2014 the unwhisperable secret of secrets \u2014 The\nfact that this language of stone and stridor is not a sentient perpetuation of\nRust as London is of Old London and Paris of Old Paris, but that it is in fact\nquite unsafe, its sprawling body imperfectly embalmed and infested with queer\nanimate things which have nothing to do with it as it was in compilation.\n\nThis book digs into all the awful details that are necessary to understand in\norder to write correct Unsafe Rust programs. Due to the nature of this problem,\nit may lead to unleashing untold horrors that shatter your psyche into a billion\ninfinitesimal fragments of despair.\n\n## Requirements\n\nBuilding the Nomicon requires [mdBook]. To get it:\n\n[mdBook]: https://github.com/rust-lang/mdBook\n\n```bash\ncargo install mdbook\n```\n\n### `mdbook` usage\n\nTo build the Nomicon use the `build` sub-command:\n\n```bash\nmdbook build\n```\n\nThe output will be placed in the `book` subdirectory. To check it out, open the\n`index.html` file in your web browser. You can pass the `--open` flag to `mdbook\nbuild` and it'll open the index page in your default browser (if the process is\nsuccessful) just like with `cargo doc --open`:\n\n```bash\nmdbook build --open\n```\n\nThere is also a `test` sub-command to test all code samples contained in the book:\n\n```bash\nmdbook test\n```\n\n### `linkcheck`\n\nWe use the `linkcheck` tool to find broken links.\nTo run it locally:\n\n```sh\ncurl -sSLo linkcheck.sh https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all nomicon\n```\n\n## Contributing\n\nGiven that the Nomicon is still in a draft state, we'd love your help! Please\nfeel free to open issues about anything, and send in PRs for things you'd like\nto fix or change. If your change is large, please open an issue first, so we can\nmake sure that it's something we'd accept before you go through the work of\ngetting a PR together.\n", "release_dates": []}, {"name": "odht", "description": "An on-disk hash table implementation", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "![CI Status](https://github.com/rust-lang/odht/actions/workflows/ci.yml/badge.svg)\n\n# odht\n\nA Rust crate for hash tables that can be mapped from disk into memory without the need for up-front decoding.\nThe goal of the implementation is to provide a data structure that\n\n- can be used exactly in the format it is stored on disk,\n- provides roughly the same performance as a `HashMap` from Rust's standard library,\n- has a completely deterministic binary representation,\n- is platform and endianess independent, so that data serialized on one system can be used on any other system, and\n- is independent of alignment requirements so that\n  - its use is not restricted to certain classes of CPUs, and\n  - the data structure can be mapped to arbitrary memory addresses.\n\nThis crate is developed and maintained by the Rust compiler team for internal use within `rustc`.\nThis crate will have regular breaking changes and provides no stability guarantees.\n", "release_dates": ["2021-10-29T15:51:33Z", "2021-09-20T13:46:19Z", "2021-09-17T13:47:50Z", "2021-09-10T12:06:53Z", "2021-08-23T15:20:06Z"]}, {"name": "opsem-team", "description": "Home of the operational semantics team, used primarily for procedural items", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# opsem-team\n\nHome of the operational semantics team.\n\nThe opsem team is the successor of the unsafe-code-guidelines working group and responsible for\nanswering many of the difficult questions about the semantics of unsafe Rust. It is also a subteam\nof the [lang team][lang-team]. For more information about the team, see the [RFC][rfc] in which it\nwas created. For an up-to-date list of members, see the [governance section of the\nwebsite][members].\n\n[lang-team]: https://github.com/rust-lang/lang-team\n[rfc]: https://rust-lang.github.io/rfcs/3346-t-opsem.html\n[members]: https://www.rust-lang.org/governance/teams/lang#Operational%20Semantics%20team\n\nThis repo is used primarily for procedural items like meeting proposals. For technical discussions\naround unsafe code, see the [unsafe code guidelines repo][ucg-repo] instead.\n\n[ucg-repo]: https://github.com/rust-lang/unsafe-code-guidelines\n\n### Chat\n\nOutside of the UCG repo, much of the team's discussion happens [in the `#t-opsem` stream on Zulip][zulip].\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/136281-t-opsem\n\n### Meetings\n\nThe team holds weekly meetings. For details around scheduling and format and the\ncalendar of future meetings, see the [dedicated page](meetings.md).\n\n### FCPs\n\nIf you want to get an idea of which decisions have already been made, [here is a list of FCPs](fcps.md).\n\n## Code of Conduct and licensing\n\nAll interactions on this repository (whether on issues, PRs, or\nelsewhere) are governed by the [Rust Code of\nConduct](CODE_OF_CONDUCT.md).\n\nFurther, all content on this repository is subject to the standard\n[Rust](LICENSE-MIT) [licensing](LICENSE-APACHE).\n", "release_dates": []}, {"name": "packed_simd", "description": "Portable Packed SIMD Vectors for Rust standard library", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# `Simd<[T; N]>`\n\n## Implementation of [Rust RFC #2366: `std::simd`][rfc2366]\n\n[![Latest Version]][crates.io] [![docs]][master_docs]\n\n**WARNING**: this crate only supports the most recent nightly Rust toolchain\nand will be superseded by [`#![feature(portable_simd)]`](https://github.com/rust-lang/portable-simd).\n\n## Documentation\n\n* [API docs (`master` branch)][master_docs]\n* [Performance guide][perf_guide]\n* [API docs (`docs.rs`)][docs.rs]\n* [RFC2366 `std::simd`][rfc2366]: - contains motivation, design rationale,\n  discussion, etc.\n\n## Examples\n\nMost of the examples come with both a scalar and a vectorized implementation.\n\n* [`aobench`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/aobench)\n* [`fannkuch_redux`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/fannkuch_redux)\n* [`matrix inverse`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/matrix_inverse)\n* [`mandelbrot`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/mandelbrot)\n* [`n-body`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/nbody)\n* [`options_pricing`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/options_pricing)\n* [`spectral_norm`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/spectral_norm)\n* [`triangle transform`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/triangle_xform)\n* [`stencil`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/stencil)\n* [`vector dot product`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/dot_product)\n\n## Cargo features\n\n* `into_bits` (default: disabled): enables `FromBits`/`IntoBits` trait\n  implementations for the vector types. These allow reinterpreting the bits of a\n  vector type as those of another vector type safely by just using the\n  `.into_bits()` method.\n\n## Performance\n\nThe following [ISPC] examples are also part of `packed_simd`'s\n[`examples/`](https://github.com/rust-lang-nursery/packed_simd/tree/master/examples/)\ndirectory, where `packed_simd`+[`rayon`][rayon] are used to emulate [ISPC]'s\nSingle-Program-Multiple-Data (SPMD) programming model. The performance results\non different hardware is shown in the `readme.md` of each example. The following\ntable summarizes the performance ranges, where `+` means speed-up and `-`\nslowdown:\n\n* `aobench`: `[-1.02x, +1.53x]`,\n* `stencil`: `[+1.06x, +1.72x]`,\n* `mandelbrot`: `[-1.74x, +1.2x]`,\n* `options_pricing`:\n   * `black_scholes`: `+1.0x`\n   * `binomial_put`: `+1.4x`\n\n While SPMD is not the intended use case for `packed_simd`, it is possible to\n combine the library with [`rayon`][rayon] to poorly emulate [ISPC]'s SPMD programming\n model in Rust. Writing performant code is not as straightforward as with\n [ISPC], but with some care (e.g. see the [Performance Guide][perf_guide]) one\n can easily match and often out-perform [ISPC]'s \"default performance\".\n\n## Platform support\n\nThe following table describes the supported platforms: `build` shows whether\nthe library compiles without issues for a given target, while `run` shows\nwhether the test suite passes for a given target.\n\n| **Linux**                             | **build** | **run** |\n|---------------------------------------|-----------|---------|\n| `i586-unknown-linux-gnu`              | \u2713         | \u2717       |\n| `i686-unknown-linux-gnu`              | \u2713         | \u2717       |\n| `x86_64-unknown-linux-gnu`            | \u2713         | \u2713       |\n| `arm-unknown-linux-gnueabihf`         | \u2713         | \u2713       |\n| `armv7-unknown-linux-gnueabi`         | \u2713         | \u2713       |\n| `aarch64-unknown-linux-gnu`           | \u2713         | \u2713       |\n| `powerpc-unknown-linux-gnu`           | \u2713         | \u2717       |\n| `powerpc64-unknown-linux-gnu`         | \u2713         | \u2717       |\n| `powerpc64le-unknown-linux-gnu`       | \u2713         | \u2713       |\n| `s390x-unknown-linux-gnu`             | \u2713         | \u2717       |\n| `sparc64-unknown-linux-gnu`           | \u2713         | \u2717       |\n| `thumbv7neon-unknown-linux-gnueabihf` | \u2713         | \u2713       |\n| **MacOSX**                            | **build** | **run** |\n| `x86_64-apple-darwin`                 | \u2713         | \u2713       |\n| **Android**                           | **build** | **run** |\n| `x86_64-linux-android`                | \u2713         | \u2713       |\n| `armv7-linux-androideabi`             | \u2713         | \u2717       |\n| `aarch64-linux-android`               | \u2713         | \u2717       |\n| `thumbv7neon-linux-androideabi`       | \u2713         | \u2717       |\n| **iOS**                               | **build** | **run** |\n| `x86_64-apple-ios`                    | \u2717         | \u2717       |\n| `aarch64-apple-ios`                   | \u2717         | \u2717       |\n\n\n## Machine code verification\n\nThe\n[`verify/`](https://github.com/rust-lang-nursery/packed_simd/tree/master/verify)\ncrate tests disassembles the portable packed vector APIs at run-time and\ncompares the generated machine code against the desired one to make sure that\nthis crate remains efficient.\n\n## License\n\nThis project is licensed under either of\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  ([LICENSE-APACHE](LICENSE-APACHE))\n\n* [MIT License](http://opensource.org/licenses/MIT)\n  ([LICENSE-MIT](LICENSE-MIT))\n\nat your option.\n\n## Contributing\n\nWe welcome all people who want to contribute.\nPlease see the [contributing instructions] for more information.\n\nContributions in any form (issues, pull requests, etc.) to this project\nmust adhere to Rust's [Code of Conduct].\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `packed_simd` by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[travis]: https://travis-ci.com/rust-lang/packed_simd\n[Travis-CI Status]: https://travis-ci.com/rust-lang/packed_simd.svg?branch=master\n[appveyor]: https://ci.appveyor.com/project/gnzlbg/packed-simd\n[Appveyor Status]: https://ci.appveyor.com/api/projects/status/hd7v9dvr442hgdix?svg=true\n[Latest Version]: https://img.shields.io/crates/v/packed_simd.svg\n[crates.io]: https://crates.io/crates/packed_simd\n[docs]: https://docs.rs/packed_simd/badge.svg\n[docs.rs]: https://docs.rs/packed_simd\n[master_docs]: https://rust-lang-nursery.github.io/packed_simd/packed_simd/\n[perf_guide]: https://rust-lang-nursery.github.io/packed_simd/perf-guide/\n[rfc2366]: https://github.com/rust-lang/rfcs/pull/2366\n[ISPC]: https://ispc.github.io/\n[rayon]: https://crates.io/crates/rayon\n[boost_license]: https://www.boost.org/LICENSE_1_0.txt\n[SLEEF]: https://sleef.org/\n[sleef_sys]: https://crates.io/crates/sleef-sys\n[contributing instructions]: contributing.md\n[Code of Conduct]: https://www.rust-lang.org/en-US/conduct.html\n", "release_dates": []}, {"name": "pin-utils", "description": "Utilities for pinning", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# pin-utils\n\n[![crates-badge]][crates-url]\n[![docs-badge]][docs-url]\n[![license-badge]][license]\n[![rustc-badge]][rustc-url]\n\n[crates-badge]: https://img.shields.io/crates/v/pin-utils.svg\n[crates-url]: https://crates.io/crates/pin-utils\n[docs-badge]: https://docs.rs/pin-utils/badge.svg\n[docs-url]: https://docs.rs/pin-utils\n[license-badge]: https://img.shields.io/crates/l/pin-utils.svg\n[license]: #license\n[rustc-badge]: https://img.shields.io/badge/rustc-1.33+-lightgray.svg\n[rustc-url]: https://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html\n\nUtilities for pinning\n\n[Documentation][docs-url]\n\n## Usage\n\nFirst, add this to your `Cargo.toml`:\n\n```toml\n[dependencies]\npin-utils = \"0.1\"\n```\n\nNow, you can use it:\n\n```rust\nuse pin_utils::pin_mut; // And more...\n```\n\nThe current pin-utils requires Rust 1.33 or later.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in pin-utils by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2020-04-22T16:11:51Z", "2018-12-26T22:08:34Z", "2018-09-24T22:20:08Z", "2018-08-30T18:16:54Z", "2018-08-06T15:07:13Z"]}, {"name": "pkg-config-rs", "description": "Build library for invoking pkg-config for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# pkg-config-rs\n\n[![Build Status](https://github.com/rust-lang/pkg-config-rs/actions/workflows/ci.yml/badge.svg)](https://github.com/rust-lang/pkg-config-rs/actions)\n[![Rust](https://img.shields.io/badge/rust-1.30%2B-blue.svg?maxAge=3600)](https://github.com/rust-lang/pkg-config-rs/)\n\n[Documentation](https://docs.rs/pkg-config)\n\nA simple library meant to be used as a build dependency with Cargo packages in\norder to use the system `pkg-config` tool (if available) to determine where a\nlibrary is located.\n\nYou can use this crate directly to probe for specific libraries, or use\n[system-deps](https://github.com/gdesmott/system-deps) to declare all your\n`pkg-config` dependencies in `Cargo.toml`.\n\nThis library requires Rust 1.30+.\n\n# Example\n\nFind the system library named `foo`, with minimum version 1.2.3:\n\n```rust\nextern crate pkg_config;\n\nfn main() {\n    pkg_config::Config::new().atleast_version(\"1.2.3\").probe(\"foo\").unwrap();\n}\n```\n\nFind the system library named `foo`, with no version requirement (not\nrecommended):\n\n```rust\nextern crate pkg_config;\n\nfn main() {\n    pkg_config::probe_library(\"foo\").unwrap();\n}\n```\n\n# External configuration via target-scoped environment variables\n\nIn cross-compilation context, it is useful to manage separately `PKG_CONFIG_PATH`\nand a few other variables for the `host` and the `target` platform.\n\nThe supported variables are: `PKG_CONFIG_PATH`, `PKG_CONFIG_LIBDIR`, and\n`PKG_CONFIG_SYSROOT_DIR`.\n\nEach of these variables can also be supplied with certain prefixes and suffixes, in the following prioritized order:\n\n1. `<var>_<target>` - for example, `PKG_CONFIG_PATH_x86_64-unknown-linux-gnu`\n2. `<var>_<target_with_underscores>` - for example, `PKG_CONFIG_PATH_x86_64_unknown_linux_gnu`\n3. `<build-kind>_<var>` - for example, `HOST_PKG_CONFIG_PATH` or `TARGET_PKG_CONFIG_PATH`\n4. `<var>` - a plain `PKG_CONFIG_PATH`\n\nThis crate will allow `pkg-config` to be used in cross-compilation\nif `PKG_CONFIG_SYSROOT_DIR` or `PKG_CONFIG` is set. You can set `PKG_CONFIG_ALLOW_CROSS=1`\nto bypass the compatibility check, but please note that enabling use of `pkg-config` in\ncross-compilation without appropriate sysroot and search paths set is likely to break builds.\n\nSome Rust sys crates support building vendored libraries from source, which may be a work\naround for lack of cross-compilation support in `pkg-config`.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in pkg-config-rs by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "polonius", "description": "Defines the Rust borrow checker.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "This is a core library that models the borrow check. It implements the analysis\ndescribed in this [blogpost][post] and in this [talk]. Details are [in the Polonius book][book].\n\n[post]: http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/\n[talk]: https://youtu.be/_agDeiWek8w\n[book]: https://rust-lang.github.io/polonius/\n\n### Why the name \"Polonius\"?\n\nThe name comes from the famous quote [\"Neither a borrower nor a lender\nbe\"][nblnb], which comes from the character Polonius in Shakespeare's\n*Hamlet*.\n\n[nblnb]: https://literarydevices.net/neither-a-borrower-nor-a-lender-be/\n\n### Want to run the code?\n\nOne of the goals with this repo is to experiment and compare different\nimplementations of the same algorithm. You can run the analysis by using `cargo run`\nand you can choose the analysis with `-a`. So for example to run against an example\nextract from clap, you might do:\n\n```bash\n> cargo +nightly run --release -- -a DatafrogOpt inputs/clap-rs/app-parser-{{impl}}-add_defaults/\n    Finished release [optimized] target(s) in 0.05 secs\n     Running `target/release/borrow-check 'inputs/clap-rs/app-parser-{{impl}}-add_defaults/'`\n--------------------------------------------------\nDirectory: inputs/clap-rs/app-parser-{{impl}}-add_defaults/\nTime: 3.856s\n```\n\nYou could also try `-a Naive` to get the naive rules (more readable,\nslower) -- these are the exact rules described in [the\nblogpost][post]. You can also use `-a LocationInsensitive` to use a\nlocation insensitive analysis (faster, but may yield spurious errors).\n\nBy default, `cargo run` just prints timing. If you also want to see\nthe results, try `--show-tuples` (which will show errors) and maybe\n`-v` (to show more intermediate computations). You can supply `--help`\nto get more docs.\n\n### How to generate your own inputs\n\nTo run the borrow checker on an input, you first need to generate the\ninput facts.  For that, you will need to run rustc with the\n`-Znll-facts` option:\n\n```\n> rustc -Znll-facts inputs/issue-47680/issue-47680.rs\n```\n\nOr, for generating the input facts of a crate using the `#![feature(nll)]` flag:\n\n```\n> cargo rustc -- -Znll-facts\n```\n\nThis will generate a `nll-facts` directory with one subdirectory per function:\n\n```bash\n> ls -F nll-facts\n{{impl}}-maybe_next/  main/\n```\n\nYou can then run on these directories.\n", "release_dates": ["2021-08-03T18:15:15Z"]}, {"name": "pontoon", "description": "Localization platform used by Rust", "language": "Python", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# Pontoon &mdash; Mozilla's Localization Platform\n\nPontoon is a translation management system used and developed by the\n[Mozilla localization community](https://pontoon.mozilla.org/). It\nspecializes in open source localization that is driven by the community and\nuses version-control systems for storing translations.\n\n[\ud83d\udcda **Documentation**](https://mozilla-pontoon.readthedocs.io/)\n\n## Installing Pontoon\n\nIf you are looking to host your own instance of Pontoon, there are several ways to do so.\nTo deploy Pontoon to Heroku without leaving your web browser, click the **Deploy to\nHeroku** button below.\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)\n\nAlternatively, you can deploy to Heroku manually by following our\n[Deployment Documentation](https://mozilla-pontoon.readthedocs.io/en/latest/admin/deployment.html).\n\nWe don't have documentation for deploying to other platforms yet, so we recommend that\nyou read the previously linked documentation and adapt it for your needs.\n\nIf you only want to deploy a **local instance of Pontoon**, for development or\ntesting for example, see our\n[Developer Setup using Docker](https://mozilla-pontoon.readthedocs.io/en/latest/dev/setup.html).\nPlease note that you should **not** deploy a production instance with Docker.\n\n## Contributing to Pontoon\n\nDo you want to help us make Pontoon better? We are very glad!\n\nTo help you get started with contributing, we wrote\n[**The Guide to your First Contribution to Pontoon**](https://mozilla-pontoon.readthedocs.io/en/latest/dev/first-contribution.html).\nIt contains all the information you need to know to install Pontoon, populate its\ndatabase, run tests, and send your contribution.\n\nIf you want to go further, you can:\n\n- Check out development roadmap on the [wiki](https://wiki.mozilla.org/Pontoon)\n- Report an [issue](https://github.com/mozilla/pontoon/issues/new)\n- Check [existing issues](https://github.com/mozilla/pontoon/issues)\n- See Mozilla's Pontoon servers:\n  - [Staging](https://mozilla-pontoon-staging.herokuapp.com/)\n  - [Production](https://pontoon.mozilla.org/)\n- For discussing Pontoon's development, get in touch with us on [chat.mozilla.org](https://chat.mozilla.org/#/room/#pontoon:mozilla.org)\n- For feedback, support, and 3rd party deployments, check out [Discourse](https://discourse.mozilla.org/c/pontoon/)\n\n## License\n\nThis software is licensed under the\n[New BSD License](https://creativecommons.org/licenses/BSD/). For more\ninformation, read [LICENSE](https://github.com/mozilla/pontoon/blob/master/LICENSE).\n\n## Screenshots\n\n![](docs/img/screenshots/teams-dashboard.png)\n_Teams dashboard_\n\n![](docs/img/screenshots/translation-app.png)\n_Translation app_\n", "release_dates": []}, {"name": "portable-simd", "description": "The testing ground for the future of portable SIMD in Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rust standard library's portable SIMD API\n![Build Status](https://github.com/rust-lang/portable-simd/actions/workflows/ci.yml/badge.svg?branch=master)\n\nCode repository for the [Portable SIMD Project Group](https://github.com/rust-lang/project-portable-simd).\nPlease refer to [CONTRIBUTING.md](./CONTRIBUTING.md) for our contributing guidelines.\n\nThe docs for this crate are published from the main branch.\nYou can [read them here][docs].\n\nIf you have questions about SIMD, we have begun writing a [guide][simd-guide].\nWe can also be found on [Zulip][zulip-project-portable-simd].\n\nIf you are interested in support for a specific architecture, you may want [stdarch] instead.\n\n## Hello World\n\nNow we're gonna dip our toes into this world with a small SIMD \"Hello, World!\" example. Make sure your compiler is up to date and using `nightly`. We can do that by running \n\n```bash\nrustup update -- nightly\n```\n\nor by setting up `rustup default nightly` or else with `cargo +nightly {build,test,run}`. After updating, run \n```bash\ncargo new hellosimd\n```\nto create a new crate. Finally write this in `src/main.rs`:\n```rust\n#![feature(portable_simd)]\nuse std::simd::f32x4;\nfn main() {\n    let a = f32x4::splat(10.0);\n    let b = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);\n    println!(\"{:?}\", a + b);\n}\n```\n\nExplanation: We construct our SIMD vectors with methods like `splat` or `from_array`. Next, we can use operators like `+` on them, and the appropriate SIMD instructions will be carried out. When we run `cargo run` you should get `[11.0, 12.0, 13.0, 14.0]`.\n\n## Supported vectors\n\nCurrently, vectors may have up to 64 elements, but aliases are provided only up to 512-bit vectors.\n\nDepending on the size of the primitive type, the number of lanes the vector will have varies. For example, 128-bit vectors have four `f32` lanes and two `f64` lanes.\n\nThe supported element types are as follows:\n* **Floating Point:** `f32`, `f64`\n* **Signed Integers:** `i8`, `i16`, `i32`, `i64`, `isize` (`i128` excluded)\n* **Unsigned Integers:** `u8`, `u16`, `u32`, `u64`, `usize` (`u128` excluded)\n* **Pointers:** `*const T` and `*mut T` (zero-sized metadata only)\n* **Masks:** 8-bit, 16-bit, 32-bit, 64-bit, and `usize`-sized masks\n\nFloating point, signed integers, unsigned integers, and pointers are the [primitive types](https://doc.rust-lang.org/core/primitive/index.html) you're already used to.\nThe mask types have elements that are \"truthy\" values, like `bool`, but have an unspecified layout because different architectures prefer different layouts for mask types.\n\n[simd-guide]: ./beginners-guide.md\n[zulip-project-portable-simd]: https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd\n[stdarch]: https://github.com/rust-lang/stdarch\n[docs]: https://rust-lang.github.io/portable-simd/core_simd\n", "release_dates": []}, {"name": "prev.rust-lang.org", "description": "The previous Rust website. The current website's code is at https://github.com/rust-lang/www.rust-lang.org.", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# prev.rust-lang.org\n\nThis repository contains the source files for prev.rust-lang.org.\n\n# NOTE: This repository will be deprecated soon. A new website is currently in Alpha Stage, and being reviewed by the Rust Teams. It will go into beta on November 29, 2018, at which point it will be linked here. The current site will remain up until the beta of the new site is over, however you should refrain from making large changes to this repository as it will soon be deprecated.\n\n## Deployment\n\n[![Build Status](https://travis-ci.org/rust-lang/prev.rust-lang.org.svg?branch=master)](https://travis-ci.org/rust-lang/prev.rust-lang.org)\n\nThe site is built with TravisCI and automatically deployed to S3.\n\n## Testing Locally\n\nTo install jekyll (and any other dependencies, if we get any):\n\n```\nbundle install\n```\n\nTo run this website as a developer:\n\n```\njekyll serve\n```\n\nThis will serve the site at `localhost:4000`.\n", "release_dates": []}, {"name": "project-const-generics", "description": null, "language": "CSS", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# \ud83d\udc4b\ud83c\udffd Const Generics Project Group\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n<!--\nFIXME(website)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n-->\nThe const generics project group implements and designs the `const_generics` feature. Please refer to our [charter] for more information on our goals and current scope.\n\nExamples:\n\n```rust\nstruct Foo<const N: usize> {\n    field: [u8; N],\n}\n\nfn foo<const N: usize>() -> Foo<N> {\n    Foo {\n        field: [0; N],\n    }\n}\n\nfn main() {\n    match foo::<3>().field {\n        [0, 0, 0] => {} // ok\n        [_x, _y, _z] => panic!(),\n    }\n}\n```\n\nWelcome to the repository for the Const Generics Project Group! This is the\nrepository we use to organise our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\n[gh-pages]: https://rust-lang.github.io/project-const-generics\n\n[charter]: ./CHARTER.md\n\n\n## How Can I Get Involved?\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out the relevant stream on [zulip][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-const-generics.toml\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook-skill-tree install && mdbook serve\n```\n", "release_dates": []}, {"name": "project-deref-patterns", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Deref Patterns Project Group\n\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n\n\nWelcome to the repository for the Deref Patterns Project Group! This is the\nrepository we use to organise our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/project-deref-patterns\n\n\n## How Can I Get Involved?\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out any of our [open issues] on this\nrepository.\n\nWe also participate on [Zulip][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/281601-project-deref-patterns\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-deref-patterns.toml\n\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n\n## Useful links\n\n* [Lang team issue](https://github.com/rust-lang/lang-team/issues/88)\n* Early discussion in an [internals thread](https://internals.rust-lang.org/t/pre-pre-rfc-match-ergonomics-for-container-types-restricted-method-calls-in-patterns/13371).\n* [HackMD](https://hackmd.io/GBTt4ptjTh219SBhDCPO4A)\n\n", "release_dates": []}, {"name": "project-error-handling", "description": "Error handling project group", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Error Handling Project Group\n\nWelcome to the repository for the Error Handling Project Group! We're focused on\ndefining and communicating Rust's error handling story.\n\nThis is the repository we use to organise our work. Please refer to our\n[charter] for more information on our goals and current scope.\n\n - Shepherds:\n    - [Jane Lusby (yaahc)](https://github.com/yaahc)\n    - [Sean Chen (seanchen1991)](https://github.com/seanchen1991)\n - Rust library team contact:\n    - [Mara Bos (m-ou-se)](https://github.com/m-ou-se)\n - Advisors:\n    - [Andrew Gallant (BurntSushi)](https://github.com/burntsushi)\n\n[charter]: ./CHARTER.md\n\n## How do I follow the project group's work?\n\nThe best place to start is probably the agenda of the next meeting. This is\nwhere we track action items from the previous meeting, the previous meetings\nagenda and minutes, and upcoming topics for the next meeting. You can also check\nout our issue tracker, project boards, and zulip chat to see all of the pieces\nof work that we're doing.\n\n- [Upcoming Meeting Agenda][active-agenda]\n- [Libs Team Tracked Issues][libs-error-project-tab]\n- [Project Group Tracked Issues][upstream-work-project-board]\n- [Project Group Repo Issues][open issues]\n- [Project Group Zulip Stream][chat-link]\n\n## How Can I Get Involved?\n\nParticipation in this project group is open to all. You can see our work in\nprogress via our [open issues] on this repository and you can participate in\ndiscussions via our [Zulip stream][chat-link] and or introduce yourself in the\n[new members thread][members-thread]. We primarily coordinate via our meetings,\nwhich are tracked [here][meeting-schedule]. If you're interested in attending\nour meetings but can't due to a schedule conflist please let us know on the\n[scheduling issue] so we can best accommodate everyone.\n\n\n[open issues]: ../../issues\n[scheduling issue]: ../../issues/2\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling\n[meeting-schedule]: https://calendar.google.com/calendar/u/0/embed?src=9kuu8evq4eh6uacm262k0phri8@group.calendar.google.com\n[active-agenda]: https://hackmd.io/@rust-libs/SkPmShkLD\n[libs-error-project-tab]: https://github.com/rust-lang/libs-team/projects/2#column-10224181\n[upstream-work-project-board]: https://github.com/rust-lang/project-error-handling/projects/1\n[members-thread]: https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/New.20Members\n", "release_dates": []}, {"name": "project-exploit-mitigations", "description": "Exploit Mitigations Project Group", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Exploit Mitigations Project Group\n\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n\nWelcome to the repository for the Exploit Mitigations Project Group! This is\nthe repository we use to organize our work. Please refer to our [charter] as\nwell as our [github pages website][gh-pages] for more information on our goals\nand current scope.\n\nThe Rust Exploit Mitigations Project Group investigates past, present, and\nfuture exploit mitigations, including hardware -assisted or -provided exploit\nmitigations, and how they apply to Rust and the Rust compiler.\n\nThis Project Group aims to maintain and improve the existing, implement, and\nresearch new exploit mitigations for the Rust compiler, and allow the Rust\ncommunity to better understand those exploit mitigations and how they apply to\nRust and the Rust compiler.\n\nWe do not receive vulnerability reports. For reporting vulnerabilities, see the\n[Security Policy][security-policy].\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/project-exploit-mitigations\n[security-policy]: https://www.rust-lang.org/policies/security\n\n## How Can I Get Involved?\n\n[You can find a list of the current members available on\n`rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out any of our [open issues] on\nthis repository.\n\nWe also participate on [Zulip][chat-link], feel free to introduce yourself over\nthere and ask us any questions you have.\n\n[open issues]: /issues\n[chat-link]: {{CHAT_LINK}}\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-exploit-mitigations.toml\n\n## Building Documentation\n\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command:\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "project-ffi-unwind", "description": null, "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Project \"ffi-unwind\"\n\nA [working-group project][shepherds-blog] to extend the language to avoid\nundefined behavior when using control-flow constructs that cross between\nlanguage boundaries.\n\n- Shepherds:\n  - [acfoltzer (Adam)](https://github.com/acfoltzer)\n  - [batmanaod (Kyle)](https://github.com/batmanaod)\n- Rust lang team contacts:\n  - [nikomatsakis (Niko)](https://github.com/nikmoatsakis)\n  - [joshtriplett (Josh)](https://github.com/joshtriplett)\n- [Our chat room][zulip-room]\n- [Our charter](charter.md)\n- [Cross-language unwinding FAQ](faq.md)\n- [Our project planning](planning/project-planning.md)\n- [Technical items in scope (table)](planning/scope-by-platform-table.md)\n- [Technical items on our roadmap](planning/roadmap/)\n\n[shepherds-blog]: http://smallcultfollowing.com/babysteps/blog/2019/09/11/aic-shepherds-3-0/\n[zulip-room]: https://rust-lang.zulipchat.com/#narrow/stream/210922-wg-ffi-unwind/topic/welcome/near/177543226\n\n# Contributing\n\nWe do not have a formal concept of membership. Please feel free to join our\n[Zulip chat room][zulip-room] or to open a GitHub Issues and/or Pull Request.\n\n", "release_dates": []}, {"name": "project-group-template", "description": "Template for creating Project Groups", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# {{GROUP_NAME}} {{GROUP_TYPE}} Group\n<!--\n This is the template for creating project groups in rust-lang. Be sure to go\n through all sections marked with `**FIX ME**`, and make sure that the text is\n correct, and feel free to replace/remove any part that's not relevant to\n your group.\n\n All of the text across all of the initial files uses the same group of\n variables to allow for easy search and replace. They are listed below.\n\n Example sed command: `sed -i '' 's/{{GROUP_NAME}}/Inline ASM/g' ./**/*.md`\n *Note* the `-i ''` is important as it is required on some platforms e.g. macOS\n\n * {{GROUP_NAME}} -> The display name of your group e.g. \"Inline ASM\".\n * {{GROUP_SLUG}} -> The url slug name of your group used for\n   `rust-lang/team` and repo name. e.g. \"pg-inline-asm\".\n * {{CHAT_PLATFORM}} -> The name of your chat app e.g. \"Zulip\".\n * {{CHAT_LINK}} -> The hyperlink to your discussions on the chat app\n   e.g. \"https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\".\n-->\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n\n\n**FIX ME**\n\n<!--\n Provide a short introduction about your project group. Make sure to include any\n relevant links to information about your group.\n-->\n\nWelcome to the repository for the {{GROUP_NAME}} Project Group! This is the\nrepository we use to organise our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/{{GROUP_SLUG}}\n\n**/FIX ME**\n\n\n## How Can I Get Involved?\n\n**FIX ME**\n\n<!--\n List ways that people from outside your group can get involved and potentially\n become members, include what meetings your team has, and how a person could\n start participating and contributing. Make sure to mention the main platform\n your group hosts its discussions. Be sure to also include links to any\n other projects that your group maintains.\n-->\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out any of our [open issues] on this\nrepository.\n\nWe also participate on [{{CHAT_PLATFORM}}][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n\n[open issues]: /issues\n[chat-link]: {{CHAT_LINK}}\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/{{GROUP_TYPE}}-{{GROUP_SLUG}}.toml\n\n**/FIX ME**\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "project-inline-asm", "description": "Home for the Inline Assembly project group", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Inline assembly project group\n\nA [working-group project][shepherds-blog] to extend the Rust language to\nsupport inline assembly.\n\n- Shepherds:\n  - [Amanieu (Amanieu d'Antras)](https://github.com/Amanieu)\n- Rust lang team contacts:\n  - [joshtriplett (Josh Triplett)](https://github.com/joshtriplett)\n- [Our chat room][zulip-room]\n- [Our charter](charter.md)\n\n[shepherds-blog]: http://smallcultfollowing.com/babysteps/blog/2019/09/11/aic-shepherds-3-0/\n[zulip-room]:https://rust-lang.zulipchat.com/#narrow/stream/216763-project-inline-asm\n\n# RFCs\n\nThe project group has published the following RFCs:\n- [#2836: Introduce the ASM project group][rfc-project]\n- [#2843: Add llvm_asm! and deprecate asm!][rfc-llvm-asm]\n- [#2850: Inline assembly][rfc-inline-asm]\n  - Now closed, discussion continues in [#2873: Inline assembly][rfc-inline-asm2]\n\n[rfc-project]: https://github.com/rust-lang/rfcs/pull/2836\n[rfc-llvm-asm]: https://github.com/rust-lang/rfcs/pull/2843\n[rfc-inline-asm]: https://github.com/rust-lang/rfcs/pull/2850\n[rfc-inline-asm2]: https://github.com/rust-lang/rfcs/pull/2873\n\n# Contributing\n\nWe do not have a formal concept of membership. Please feel free to join our\n[Zulip chat room][zulip-room] or to open a GitHub Issue.\n", "release_dates": []}, {"name": "project-portable-simd", "description": "Portable SIMD project group", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Portable SIMD Project Group\n\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n\nWelcome to the repository for the Portable SIMD Project Group! This is the\nrepository we use to organise our work. Please refer to our [charter] for\nmore information on our goals and current scope.\n\n[charter]: ./CHARTER.md\n\n## Current Status\n\nWe're currently working on an initial `std::simd` implementation over in the [stdsimd] repo.\n\n## How Can I Get Involved?\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nThe best place to start is looking at [open issues in stdsimd][stdsimd-issues].\n\nWe also participate on [Zulip][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\nGroup meetings happen every week via [Zulip][chat-link].\nYou can find them on the [Libs team calendar][calendar]!\n\n[open issues]: ../../issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-portable-simd.toml\n[calendar]: https://calendar.google.com/calendar/u/0/embed?src=9kuu8evq4eh6uacm262k0phri8@group.calendar.google.com\n[stdsimd]: https://github.com/rust-lang/stdsimd\n[stdsimd-issues]: https://github.com/rust-lang/stdsimd/issues\n", "release_dates": []}, {"name": "project-rfc-2229", "description": "A repository tracking the planning for implementation and evaluation of RFC 2229.", "language": null, "license": null, "readme": "# project-rfc-2229\n\nA repository tracking the planning for implementation and evaluation of [RFC 2229].\n\nSee also:\n\n* [RFC 2229]\n* [Rust tracking issue, rust-lang/rust#53488](https://github.com/rust-lang/rust/issues/53488)\n* [Plan](https://hackmd.io/HNEgTkPlTuy6cb9v29rzIQ)\n* [Zulip Stream](https://rust-lang.zulipchat.com/#narrow/stream/189812-t-compiler.2Fwg-rfc-2229)\n\n[RFC 2229]: https://github.com/rust-lang/rfcs/blob/master/text/2229-capture-disjoint-fields.md\n", "release_dates": []}, {"name": "project-safe-transmute", "description": "Project group working on the \"safe transmute\" feature", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Project \"safe transmute\"\n\nA [working-group project][shepherds-blog] to extend the Rust language to\nsupport safe transmute\n\n- Shepherds:\n  - [jswrenn (Jack)](https://github.com/jswrenn)\n- Rust lang team contacts:\n  - [joshtriplett (Josh)](https://github.com/joshtriplett)\n- [Our chat room][zulip-room]\n  - [Status updates](https://rust-lang.zulipchat.com/#narrow/stream/216762-project-safe-transmute/topic/Status)\n- [The (closed) RFC](https://github.com/rust-lang/project-safe-transmute/pull/5)\n- [The MCP](https://github.com/rust-lang/compiler-team/issues/411)\n\n[shepherds-blog]: http://smallcultfollowing.com/babysteps/blog/2019/09/11/aic-shepherds-3-0/\n[zulip-room]: https://rust-lang.zulipchat.com/#narrow/stream/216762-project-safe-transmute\n\n# Contributing\n\nWe do not have a formal concept of membership. Please feel free to join our\n[Zulip chat room][zulip-room] or to open a GitHub Issues and/or Pull Request.\n\n", "release_dates": []}, {"name": "project-stable-mir", "description": "Define compiler intermediate representation usable by external tools", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Stable MIR Librarification Project Group\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n[![Run compiler tests](https://github.com/rust-lang/project-stable-mir/actions/workflows/nightly.yml/badge.svg)](https://github.com/rust-lang/project-stable-mir/actions/workflows/nightly.yml)\n\n\n<!--\n Provide a short introduction about your project group. Make sure to include any\n relevant links to information about your group.\n-->\n\nWelcome to the repository for the Stable MIR Librarification Project Group! Our goal is to provide a stable\nAPI based on the rust compiler mid-level intermediate representation (MIR) that can be used as the foundation\nfor development of tools that want to perform sophisticated analyses and make stronger guarantees about the\nbehavior of Rust programs.\n\n\nThis is the repository we use to organise our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\nIf you are wondering how to use Stable MIR in your project, also see the [rustc_smir crate][rustc_smir].\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/project-stable-mir\n[rustc_smir]: https://github.com/rust-lang/rust/tree/master/compiler/rustc_smir\n\n\n## How Can I Get Involved?\n\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out any of our [open issues] on this\nrepository.\n\nWe also participate on [Zulip][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n\n[open issues]: https://github.com/rust-lang/project-stable-mir/issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/320896-project-stable-mir\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-stable-mir.toml\n", "release_dates": []}, {"name": "project-thir-unsafeck", "description": "Tracking the project to refactor the unsafe check to operate on THIR", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# THIR Unsafety Checker Project Group\n\n<!--\n Status badge advertising the project as being actively worked on. When the\n project has finished be sure to replace the active badge with a badge\n like: https://img.shields.io/badge/status-archived-grey.svg\n-->\n![project group status: active](https://img.shields.io/badge/status-active-brightgreen.svg)\n[![project group documentation](https://img.shields.io/badge/MDBook-View%20Documentation-blue)][gh-pages]\n\n\n**FIX ME**\n\n<!--\n Provide a short introduction about your project group. Make sure to include any\n relevant links to information about your group.\n-->\n\nWelcome to the repository for the THIR Unsafety Checker Project Group! This is the\nrepository we use to organise our work. Please refer to our [charter] as well\nas our [github pages website][gh-pages] for more information on our goals and\ncurrent scope.\n\n[charter]: ./CHARTER.md\n[gh-pages]: https://rust-lang.github.io/project-thir-unsafeck\n\n**/FIX ME**\n\n\n## How Can I Get Involved?\n\n**FIX ME**\n\n<!--\n List ways that people from outside your group can get involved and potentially\n become members, include what meetings your team has, and how a person could\n start participating and contributing. Make sure to mention the main platform\n your group hosts its discussions. Be sure to also include links to any\n other projects that your group maintains.\n-->\n\n[You can find a list of the current members available\non `rust-lang/team`.][team-toml]\n\nIf you'd like to participate be sure to check out any of our [open issues] on this\nrepository.\n\nWe also participate on [Zulip][chat-link], feel free to introduce\nyourself over there and ask us any questions you have.\n\n\n[open issues]: /issues\n[chat-link]: https://rust-lang.zulipchat.com/#narrow/stream/278509-project-thir-unsafeck\n[team-toml]: https://github.com/rust-lang/team/blob/master/teams/project-thir-unsafeck.toml\n\n**/FIX ME**\n\n## Building Documentation\nThis repository is also an mdbook project. You can view and build it using the\nfollowing command.\n\n```\nmdbook serve\n```\n", "release_dates": []}, {"name": "promote-release", "description": "Tooling to publish Rust releases.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# promote-release\n\n`promote-release` is the tool used by the Rust project to publish new releases\nof the Rust toolchain.\n\n## Running the tool locally\n\nIt's possible to run the `promote-release` tool locally without access to any\nproduction credential, to ease testing changes made to it. You need to make\nsure to have `docker` and `docker-compose` installed on your local system, and\nyou need to start the local environment by running:\n\n```\ndocker-compose up\n```\n\nThis will start an instance of [MinIO](https://min.io) and build a local\ncontainer tailored to run the release process on. Once the local environment is\nup and running, you can start a release with one of the following commands:\n\n```\n./run.sh nightly\n./run.sh beta\n./run.sh stable\n```\n\nOnce the release is done, you can use it with `rustup` by setting the following\nenvironment variable while calling `rustup`:\n\n```\nRUSTUP_DIST_SERVER=\"http://localhost:9000/static\"\n```\n\nYou can also release a specific commit by providing its full hash as the second\nargument of `./run.sh`:\n\n```\n./run.sh nightly 0000000000000000000000000000000000000000\n```\n\n### Adding additional files to the local release\n\nTo save on time and bandwidth, when running a release locally the tooling won't\ninclude all files present in a proper release, but to save on bandwidth and\nstorage only a small subset of it is included (on 2020-09-16 a full release\nweights 27GB).\n\nYou can add additional files by tweaking the environment variables in\n`local/run.sh`.\n\n### Inspecting the contents of the object storage\n\nYou can access the contents of the object storage by visiting\n<http://localhost:9000/minio> and logging in with:\n\n* Access Key: `access_key`\n* Secret Key: `secret_key`\n\n## License\n\nThe contents of this repository are licensed under both the MIT and the Apache\n2.0 license, allowing you to choose which one to adhere to.\n", "release_dates": []}, {"name": "reference", "description": "The Rust Reference", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# The Rust Language Reference\n\nThis document is the primary reference for the Rust programming\nlanguage.\n\nThis document is not normative. It may include details that are specific\nto `rustc` itself, and should not be taken as a specification for the\nRust language. We intend to produce such a document someday, but this is\nwhat we have for now.\n\n## Dependencies\n\n- Nightly Rust\n- [mdbook](https://rust-lang.github.io/mdBook/)\n\n## Installing dependencies\n\nFirst, ensure that you have a recent copy of the nightly Rust compiler\ninstalled, as this is needed in order to run the tests:\n\n```sh\nrustup toolchain install nightly\n```\n\nNow, ensure you have `mdbook` installed, as this is needed in order to\nbuild the Reference:\n\n```sh\ncargo install --locked mdbook\n```\n\n## Building\n\nTo build the Reference, first clone the project:\n\n```sh\ngit clone https://github.com/rust-lang/reference.git\n```\n\n(Alternatively, if you don't want to use `git`, [download][] a ZIP file\nof the project, extract it using your preferred tool, and rename the\ntop-level directory to `reference`.)\n\n[download]: https://github.com/rust-lang/reference/archive/refs/heads/master.zip\n\nNow change your current directory to the working directory:\n\n```sh\ncd reference\n```\n\nTo test all of the code examples in the Reference, run:\n\n```sh\nmdbook test\n```\n\nTo build the Reference locally (in `build/`) and open it in a web\nbrowser, run:\n\n```sh\nmdbook build --open\n```\n", "release_dates": []}, {"name": "regex", "description": "An implementation of regular expressions for Rust. This implementation uses finite automata and guarantees linear time matching on all inputs.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "regex\n=====\nThis crate provides routines for searching strings for matches of a [regular\nexpression] (aka \"regex\"). The regex syntax supported by this crate is similar\nto other regex engines, but it lacks several features that are not known how to\nimplement efficiently. This includes, but is not limited to, look-around and\nbackreferences. In exchange, all regex searches in this crate have worst case\n`O(m * n)` time complexity, where `m` is proportional to the size of the regex\nand `n` is proportional to the size of the string being searched.\n\n[regular expression]: https://en.wikipedia.org/wiki/Regular_expression\n\n[![Build status](https://github.com/rust-lang/regex/workflows/ci/badge.svg)](https://github.com/rust-lang/regex/actions)\n[![Crates.io](https://img.shields.io/crates/v/regex.svg)](https://crates.io/crates/regex)\n\n### Documentation\n\n[Module documentation with examples](https://docs.rs/regex).\nThe module documentation also includes a comprehensive description of the\nsyntax supported.\n\nDocumentation with examples for the various matching functions and iterators\ncan be found on the\n[`Regex` type](https://docs.rs/regex/*/regex/struct.Regex.html).\n\n### Usage\n\nTo bring this crate into your repository, either add `regex` to your\n`Cargo.toml`, or run `cargo add regex`.\n\nHere's a simple example that matches a date in YYYY-MM-DD format and prints the\nyear, month and day:\n\n```rust\nuse regex::Regex;\n\nfn main() {\n    let re = Regex::new(r\"(?x)\n(?P<year>\\d{4})  # the year\n-\n(?P<month>\\d{2}) # the month\n-\n(?P<day>\\d{2})   # the day\n\").unwrap();\n\n    let caps = re.captures(\"2010-03-14\").unwrap();\n    assert_eq!(\"2010\", &caps[\"year\"]);\n    assert_eq!(\"03\", &caps[\"month\"]);\n    assert_eq!(\"14\", &caps[\"day\"]);\n}\n```\n\nIf you have lots of dates in text that you'd like to iterate over, then it's\neasy to adapt the above example with an iterator:\n\n```rust\nuse regex::Regex;\n\nfn main() {\n    let re = Regex::new(r\"(\\d{4})-(\\d{2})-(\\d{2})\").unwrap();\n    let hay = \"On 2010-03-14, foo happened. On 2014-10-14, bar happened.\";\n\n    let mut dates = vec![];\n    for (_, [year, month, day]) in re.captures_iter(hay).map(|c| c.extract()) {\n        dates.push((year, month, day));\n    }\n    assert_eq!(dates, vec![\n      (\"2010\", \"03\", \"14\"),\n      (\"2014\", \"10\", \"14\"),\n    ]);\n}\n```\n\n### Usage: Avoid compiling the same regex in a loop\n\nIt is an anti-pattern to compile the same regular expression in a loop since\ncompilation is typically expensive. (It takes anywhere from a few microseconds\nto a few **milliseconds** depending on the size of the regex.) Not only is\ncompilation itself expensive, but this also prevents optimizations that reuse\nallocations internally to the matching engines.\n\nIn Rust, it can sometimes be a pain to pass regular expressions around if\nthey're used from inside a helper function. Instead, we recommend using the\n[`once_cell`](https://crates.io/crates/once_cell) crate to ensure that\nregular expressions are compiled exactly once. For example:\n\n```rust\nuse {\n    once_cell::sync::Lazy,\n    regex::Regex,\n};\n\nfn some_helper_function(haystack: &str) -> bool {\n    static RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\"...\").unwrap());\n    RE.is_match(haystack)\n}\n\nfn main() {\n    assert!(some_helper_function(\"abc\"));\n    assert!(!some_helper_function(\"ac\"));\n}\n```\n\nSpecifically, in this example, the regex will be compiled when it is used for\nthe first time. On subsequent uses, it will reuse the previous compilation.\n\n### Usage: match regular expressions on `&[u8]`\n\nThe main API of this crate (`regex::Regex`) requires the caller to pass a\n`&str` for searching. In Rust, an `&str` is required to be valid UTF-8, which\nmeans the main API can't be used for searching arbitrary bytes.\n\nTo match on arbitrary bytes, use the `regex::bytes::Regex` API. The API is\nidentical to the main API, except that it takes an `&[u8]` to search on instead\nof an `&str`. The `&[u8]` APIs also permit disabling Unicode mode in the regex\neven when the pattern would match invalid UTF-8. For example, `(?-u:.)` is\nnot allowed in `regex::Regex` but is allowed in `regex::bytes::Regex` since\n`(?-u:.)` matches any byte except for `\\n`. Conversely, `.` will match the\nUTF-8 encoding of any Unicode scalar value except for `\\n`.\n\nThis example shows how to find all null-terminated strings in a slice of bytes:\n\n```rust\nuse regex::bytes::Regex;\n\nlet re = Regex::new(r\"(?-u)(?<cstr>[^\\x00]+)\\x00\").unwrap();\nlet text = b\"foo\\xFFbar\\x00baz\\x00\";\n\n// Extract all of the strings without the null terminator from each match.\n// The unwrap is OK here since a match requires the `cstr` capture to match.\nlet cstrs: Vec<&[u8]> =\n    re.captures_iter(text)\n      .map(|c| c.name(\"cstr\").unwrap().as_bytes())\n      .collect();\nassert_eq!(vec![&b\"foo\\xFFbar\"[..], &b\"baz\"[..]], cstrs);\n```\n\nNotice here that the `[^\\x00]+` will match any *byte* except for `NUL`,\nincluding bytes like `\\xFF` which are not valid UTF-8. When using the main API,\n`[^\\x00]+` would instead match any valid UTF-8 sequence except for `NUL`.\n\n### Usage: match multiple regular expressions simultaneously\n\nThis demonstrates how to use a `RegexSet` to match multiple (possibly\noverlapping) regular expressions in a single scan of the search text:\n\n```rust\nuse regex::RegexSet;\n\nlet set = RegexSet::new(&[\n    r\"\\w+\",\n    r\"\\d+\",\n    r\"\\pL+\",\n    r\"foo\",\n    r\"bar\",\n    r\"barfoo\",\n    r\"foobar\",\n]).unwrap();\n\n// Iterate over and collect all of the matches.\nlet matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\nassert_eq!(matches, vec![0, 2, 3, 4, 6]);\n\n// You can also test whether a particular regex matched:\nlet matches = set.matches(\"foobar\");\nassert!(!matches.matched(5));\nassert!(matches.matched(6));\n```\n\n\n### Usage: regex internals as a library\n\nThe [`regex-automata` directory](./regex-automata/) contains a crate that\nexposes all of the internal matching engines used by the `regex` crate. The\nidea is that the `regex` crate exposes a simple API for 99% of use cases, but\n`regex-automata` exposes oodles of customizable behaviors.\n\n[Documentation for `regex-automata`.](https://docs.rs/regex-automata)\n\n\n### Usage: a regular expression parser\n\nThis repository contains a crate that provides a well tested regular expression\nparser, abstract syntax and a high-level intermediate representation for\nconvenient analysis. It provides no facilities for compilation or execution.\nThis may be useful if you're implementing your own regex engine or otherwise\nneed to do analysis on the syntax of a regular expression. It is otherwise not\nrecommended for general use.\n\n[Documentation for `regex-syntax`.](https://docs.rs/regex-syntax)\n\n\n### Crate features\n\nThis crate comes with several features that permit tweaking the trade off\nbetween binary size, compilation time and runtime performance. Users of this\ncrate can selectively disable Unicode tables, or choose from a variety of\noptimizations performed by this crate to disable.\n\nWhen all of these features are disabled, runtime match performance may be much\nworse, but if you're matching on short strings, or if high performance isn't\nnecessary, then such a configuration is perfectly serviceable. To disable\nall such features, use the following `Cargo.toml` dependency configuration:\n\n```toml\n[dependencies.regex]\nversion = \"1.3\"\ndefault-features = false\n# Unless you have a specific reason not to, it's good sense to enable standard\n# library support. It enables several optimizations and avoids spin locks. It\n# also shouldn't meaningfully impact compile times or binary size.\nfeatures = [\"std\"]\n```\n\nThis will reduce the dependency tree of `regex` down to two crates:\n`regex-syntax` and `regex-automata`.\n\nThe full set of features one can disable are\n[in the \"Crate features\" section of the documentation](https://docs.rs/regex/1.*/#crate-features).\n\n\n### Performance\n\nOne of the goals of this crate is for the regex engine to be \"fast.\" What that\nis a somewhat nebulous goal, it is usually interpreted in one of two ways.\nFirst, it means that all searches take worst case `O(m * n)` time, where\n`m` is proportional to `len(regex)` and `n` is proportional to `len(haystack)`.\nSecond, it means that even aside from the time complexity constraint, regex\nsearches are \"fast\" in practice.\n\nWhile the first interpretation is pretty unambiguous, the second one remains\nnebulous. While nebulous, it guides this crate's architecture and the sorts of\nthe trade offs it makes. For example, here are some general architectural\nstatements that follow as a result of the goal to be \"fast\":\n\n* When given the choice between faster regex searches and faster _Rust compile\ntimes_, this crate will generally choose faster regex searches.\n* When given the choice between faster regex searches and faster _regex compile\ntimes_, this crate will generally choose faster regex searches. That is, it is\ngenerally acceptable for `Regex::new` to get a little slower if it means that\nsearches get faster. (This is a somewhat delicate balance to strike, because\nthe speed of `Regex::new` needs to remain somewhat reasonable. But this is why\none should avoid re-compiling the same regex over and over again.)\n* When given the choice between faster regex searches and simpler API\ndesign, this crate will generally choose faster regex searches. For example,\nif one didn't care about performance, we could like get rid of both of\nthe `Regex::is_match` and `Regex::find` APIs and instead just rely on\n`Regex::captures`.\n\nThere are perhaps more ways that being \"fast\" influences things.\n\nWhile this repository used to provide its own benchmark suite, it has since\nbeen moved to [rebar](https://github.com/BurntSushi/rebar). The benchmarks are\nquite extensive, and there are many more than what is shown in rebar's README\n(which is just limited to a \"curated\" set meant to compare performance between\nregex engines). To run all of this crate's benchmarks, first start by cloning\nand installing `rebar`:\n\n```text\n$ git clone https://github.com/BurntSushi/rebar\n$ cd rebar\n$ cargo install --path ./\n```\n\nThen build the benchmark harness for just this crate:\n\n```text\n$ rebar build -e '^rust/regex$'\n```\n\nRun all benchmarks for this crate as tests (each benchmark is executed once to\nensure it works):\n\n```text\n$ rebar measure -e '^rust/regex$' -t\n```\n\nRecord measurements for all benchmarks and save them to a CSV file:\n\n```text\n$ rebar measure -e '^rust/regex$' | tee results.csv\n```\n\nExplore benchmark timings:\n\n```text\n$ rebar cmp results.csv\n```\n\nSee the `rebar` documentation for more details on how it works and how to\ncompare results with other regex engines.\n\n\n### Hacking\n\nThe `regex` crate is, for the most part, a pretty thin wrapper around the\n[`meta::Regex`](https://docs.rs/regex-automata/latest/regex_automata/meta/struct.Regex.html)\nfrom the\n[`regex-automata` crate](https://docs.rs/regex-automata/latest/regex_automata/).\nTherefore, if you're looking to work on the internals of this crate, you'll\nlikely either want to look in `regex-syntax` (for parsing) or `regex-automata`\n(for construction of finite automata and the search routines).\n\nMy [blog on regex internals](https://blog.burntsushi.net/regex-internals/)\ngoes into more depth.\n\n\n### Minimum Rust version policy\n\nThis crate's minimum supported `rustc` version is `1.65.0`.\n\nThe policy is that the minimum Rust version required to use this crate can be\nincreased in minor version updates. For example, if regex 1.0 requires Rust\n1.20.0, then regex 1.0.z for all values of `z` will also require Rust 1.20.0 or\nnewer. However, regex 1.y for `y > 0` may require a newer minimum version of\nRust.\n\n\n### License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\nThe data in `regex-syntax/src/unicode_tables/` is licensed under the Unicode\nLicense Agreement\n([LICENSE-UNICODE](https://www.unicode.org/copyright.html#License)).\n", "release_dates": ["2018-05-01T20:53:36Z", "2018-03-08T00:15:02Z", "2017-05-21T16:27:34Z"]}, {"name": "release-team", "description": "This repository contains all the documents related to the Rust release team.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Release Team\n\n* [**Meeting Agenda**](https://paper.dropbox.com/doc/Release-Team-Meeting-Agenda--AO7uKdtm0Ch9UXT8g6mrF10RAg-gb8LJ6VkQxH9HKl1r9KFE)\n\nThis repository contains all the documents related to the Rust release team.\n\nFor further information, you can visit the [#t-release stream on rust-lang Zulip][z]\n\n### Code of Conduct & Licensing\n\nAll interactions on this repository (whether on issues, PRs, or\nelsewhere) are governed by the [Rust Code of\nConduct](CODE_OF_CONDUCT.md).\n\nFurther, all content on this repository is subject to the standard\n[Rust](LICENSE-MIT) [licensing](LICENSE-APACHE).\n\n[z]: https://rust-lang.zulipchat.com/#narrow/stream/241545-t-release\n", "release_dates": []}, {"name": "relnotes", "description": "Generate release notes for \"The Rust Programming Language\"", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# relnotes: Generate release notes for \"The Rust Programming Language\"\nThis utility pulls all pull requests made against `rust-lang/rust` and\n`rust-lang/cargo` within the latest release cycle and prints out a markdown\ndocument containing all the pull requests, categorised into their respective\nsections where possible, and prints the document to `stdout`.\n\n## Requirements\n`relnotes` uses the GitHub API to generate the release notes, as such you need\na valid GitHub API key. `relnotes` will look for `GITHUB_TOKEN` in the\nenvironment and use that key when sending requests.\n\n**small warning:** `relnotes` makes a lot of requests as GitHub only allows you to\nlook at 100 PRs in a single page. It is not recommended to call `relnotes`\nmultiple times as you can hit the GitHub's rate limit quite easily. Please refer\nto [GitHub's Rate Limit documentation](https://developer.github.com/v4/guides/resource-limitations/#rate-limit) for more information.\n\n## Usage\n`version_number` is the version number of the rust release. e.g. `1.28.0`\n```\ncargo run --release <version_number> > release.md\n```\n", "release_dates": []}, {"name": "rfc-leadership-council", "description": "RFCs for changes to Rust", "language": "Markdown", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust RFCs - [RFC Book](https://rust-lang.github.io/rfcs/) - [Active RFC List](https://rfcbot.rs/)\n\n[Rust RFCs]: #rust-rfcs\n\nThe \"RFC\" (request for comments) process is intended to provide a consistent\nand controlled path for changes to Rust (such as new features) so that all \nstakeholders can be confident about the direction of the project.\n\nMany changes, including bug fixes and documentation improvements can be\nimplemented and reviewed via the normal GitHub pull request workflow.\n\nSome changes though are \"substantial\", and we ask that these be put through a\nbit of a design process and produce a consensus among the Rust community and\nthe [sub-team]s.\n\n## Table of Contents\n[Table of Contents]: #table-of-contents\n\n  - [Opening](#rust-rfcs)\n  - [Table of Contents]\n  - [When you need to follow this process]\n  - [Sub-team specific guidelines]\n  - [Before creating an RFC]\n  - [What the process is]\n  - [The RFC life-cycle]\n  - [Reviewing RFCs]\n  - [Implementing an RFC]\n  - [RFC Postponement]\n  - [Help this is all too informal!]\n  - [License]\n  - [Contributions]\n\n\n## When you need to follow this process\n[When you need to follow this process]: #when-you-need-to-follow-this-process\n\nYou need to follow this process if you intend to make \"substantial\" changes to\nRust, Cargo, Crates.io, or the RFC process itself. What constitutes a\n\"substantial\" change is evolving based on community norms and varies depending\non what part of the ecosystem you are proposing to change, but may include the\nfollowing.\n\n  - Any semantic or syntactic change to the language that is not a bugfix.\n  - Removing language features, including those that are feature-gated.\n  - Changes to the interface between the compiler and libraries, including lang\n    items and intrinsics.\n  - Additions to `std`.\n\nSome changes do not require an RFC:\n\n  - Rephrasing, reorganizing, refactoring, or otherwise \"changing shape does\n    not change meaning\".\n  - Additions that strictly improve objective, numerical quality criteria\n    (warning removal, speedup, better platform coverage, more parallelism, trap\n    more errors, etc.)\n  - Additions only likely to be _noticed by_ other developers-of-rust,\n    invisible to users-of-rust.\n\nIf you submit a pull request to implement a new feature without going through\nthe RFC process, it may be closed with a polite request to submit an RFC first.\n\n\n### Sub-team specific guidelines\n[Sub-team specific guidelines]: #sub-team-specific-guidelines\n\nFor more details on when an RFC is required for the following areas, please see\nthe Rust community's [sub-team] specific guidelines for:\n\n  - [language changes](lang_changes.md),\n  - [library changes](libs_changes.md),\n  - [compiler changes](compiler_changes.md).\n\n\n## Before creating an RFC\n[Before creating an RFC]: #before-creating-an-rfc\n\nA hastily-proposed RFC can hurt its chances of acceptance. Low quality\nproposals, proposals for previously-rejected features, or those that don't fit\ninto the near-term roadmap, may be quickly rejected, which can be demotivating\nfor the unprepared contributor. Laying some groundwork ahead of the RFC can\nmake the process smoother.\n\nAlthough there is no single way to prepare for submitting an RFC, it is\ngenerally a good idea to pursue feedback from other project developers\nbeforehand, to ascertain that the RFC may be desirable; having a consistent\nimpact on the project requires concerted effort toward consensus-building.\n\nThe most common preparations for writing and submitting an RFC include talking\nthe idea over on our [official Zulip server], discussing the topic on our\n[developer discussion forum], and occasionally posting \"pre-RFCs\" on the\ndeveloper forum. You may file issues on this repo for discussion, but these are\nnot actively looked at by the teams.\n\nAs a rule of thumb, receiving encouraging feedback from long-standing project\ndevelopers, and particularly members of the relevant [sub-team] is a good\nindication that the RFC is worth pursuing.\n\n\n## What the process is\n[What the process is]: #what-the-process-is\n\nIn short, to get a major feature added to Rust, one must first get the RFC\nmerged into the RFC repository as a markdown file. At that point the RFC is\n\"active\" and may be implemented with the goal of eventual inclusion into Rust.\n\n  - Fork the RFC repo [RFC repository]\n  - Copy `0000-template.md` to `text/0000-my-feature.md` (where \"my-feature\" is\n    descriptive). Don't assign an RFC number yet; This is going to be the PR\n    number and we'll rename the file accordingly if the RFC is accepted.\n  - Fill in the RFC. Put care into the details: RFCs that do not present\n    convincing motivation, demonstrate lack of understanding of the design's\n    impact, or are disingenuous about the drawbacks or alternatives tend to\n    be poorly-received.\n  - Submit a pull request. As a pull request the RFC will receive design\n    feedback from the larger community, and the author should be prepared to\n    revise it in response.\n  - Now that your RFC has an open pull request, use the issue number of the PR\n    to update your `0000-` prefix to that number.\n  - Each pull request will be labeled with the most relevant [sub-team], which\n    will lead to its being triaged by that team in a future meeting and assigned\n    to a member of the subteam.\n  - Build consensus and integrate feedback. RFCs that have broad support are\n    much more likely to make progress than those that don't receive any\n    comments. Feel free to reach out to the RFC assignee in particular to get\n    help identifying stakeholders and obstacles.\n  - The sub-team will discuss the RFC pull request, as much as possible in the\n    comment thread of the pull request itself. Offline discussion will be\n    summarized on the pull request comment thread.\n  - RFCs rarely go through this process unchanged, especially as alternatives\n    and drawbacks are shown. You can make edits, big and small, to the RFC to\n    clarify or change the design, but make changes as new commits to the pull\n    request, and leave a comment on the pull request explaining your changes.\n    Specifically, do not squash or rebase commits after they are visible on the\n    pull request.\n  - At some point, a member of the subteam will propose a \"motion for final\n    comment period\" (FCP), along with a *disposition* for the RFC (merge, close,\n    or postpone).\n    - This step is taken when enough of the tradeoffs have been discussed that\n    the subteam is in a position to make a decision. That does not require\n    consensus amongst all participants in the RFC thread (which is usually\n    impossible). However, the argument supporting the disposition on the RFC\n    needs to have already been clearly articulated, and there should not be a\n    strong consensus *against* that position outside of the subteam. Subteam\n    members use their best judgment in taking this step, and the FCP itself\n    ensures there is ample time and notification for stakeholders to push back\n    if it is made prematurely.\n    - For RFCs with lengthy discussion, the motion to FCP is usually preceded by\n      a *summary comment* trying to lay out the current state of the discussion\n      and major tradeoffs/points of disagreement.\n    - Before actually entering FCP, *all* members of the subteam must sign off;\n    this is often the point at which many subteam members first review the RFC\n    in full depth.\n  - The FCP lasts ten calendar days, so that it is open for at least 5 business\n    days. It is also advertised widely,\n    e.g. in [This Week in Rust](https://this-week-in-rust.org/). This way all\n    stakeholders have a chance to lodge any final objections before a decision\n    is reached.\n  - In most cases, the FCP period is quiet, and the RFC is either merged or\n    closed. However, sometimes substantial new arguments or ideas are raised,\n    the FCP is canceled, and the RFC goes back into development mode.\n\n## The RFC life-cycle\n[The RFC life-cycle]: #the-rfc-life-cycle\n\nOnce an RFC becomes \"active\" then authors may implement it and submit the\nfeature as a pull request to the Rust repo. Being \"active\" is not a rubber\nstamp, and in particular still does not mean the feature will ultimately be\nmerged; it does mean that in principle all the major stakeholders have agreed\nto the feature and are amenable to merging it.\n\nFurthermore, the fact that a given RFC has been accepted and is \"active\"\nimplies nothing about what priority is assigned to its implementation, nor does\nit imply anything about whether a Rust developer has been assigned the task of\nimplementing the feature. While it is not *necessary* that the author of the\nRFC also write the implementation, it is by far the most effective way to see\nan RFC through to completion: authors should not expect that other project\ndevelopers will take on responsibility for implementing their accepted feature.\n\nModifications to \"active\" RFCs can be done in follow-up pull requests. We\nstrive to write each RFC in a manner that it will reflect the final design of\nthe feature; but the nature of the process means that we cannot expect every\nmerged RFC to actually reflect what the end result will be at the time of the\nnext major release.\n\nIn general, once accepted, RFCs should not be substantially changed. Only very\nminor changes should be submitted as amendments. More substantial changes\nshould be new RFCs, with a note added to the original RFC. Exactly what counts\nas a \"very minor change\" is up to the sub-team to decide; check\n[Sub-team specific guidelines] for more details.\n\n\n## Reviewing RFCs\n[Reviewing RFCs]: #reviewing-rfcs\n\nWhile the RFC pull request is up, the sub-team may schedule meetings with the\nauthor and/or relevant stakeholders to discuss the issues in greater detail,\nand in some cases the topic may be discussed at a sub-team meeting. In either\ncase a summary from the meeting will be posted back to the RFC pull request.\n\nA sub-team makes final decisions about RFCs after the benefits and drawbacks\nare well understood. These decisions can be made at any time, but the sub-team\nwill regularly issue decisions. When a decision is made, the RFC pull request\nwill either be merged or closed. In either case, if the reasoning is not clear\nfrom the discussion in thread, the sub-team will add a comment describing the\nrationale for the decision.\n\n\n## Implementing an RFC\n[Implementing an RFC]: #implementing-an-rfc\n\nSome accepted RFCs represent vital features that need to be implemented right\naway. Other accepted RFCs can represent features that can wait until some\narbitrary developer feels like doing the work. Every accepted RFC has an\nassociated issue tracking its implementation in the Rust repository; thus that\nassociated issue can be assigned a priority via the triage process that the\nteam uses for all issues in the Rust repository.\n\nThe author of an RFC is not obligated to implement it. Of course, the RFC\nauthor (like any other developer) is welcome to post an implementation for\nreview after the RFC has been accepted.\n\nIf you are interested in working on the implementation for an \"active\" RFC, but\ncannot determine if someone else is already working on it, feel free to ask\n(e.g. by leaving a comment on the associated issue).\n\n\n## RFC Postponement\n[RFC Postponement]: #rfc-postponement\n\nSome RFC pull requests are tagged with the \"postponed\" label when they are\nclosed (as part of the rejection process). An RFC closed with \"postponed\" is\nmarked as such because we want neither to think about evaluating the proposal\nnor about implementing the described feature until some time in the future, and\nwe believe that we can afford to wait until then to do so. Historically,\n\"postponed\" was used to postpone features until after 1.0. Postponed pull\nrequests may be re-opened when the time is right. We don't have any formal\nprocess for that, you should ask members of the relevant sub-team.\n\nUsually an RFC pull request marked as \"postponed\" has already passed an\ninformal first round of evaluation, namely the round of \"do we think we would\never possibly consider making this change, as outlined in the RFC pull request,\nor some semi-obvious variation of it.\" (When the answer to the latter question\nis \"no\", then the appropriate response is to close the RFC, not postpone it.)\n\n\n### Help this is all too informal!\n[Help this is all too informal!]: #help-this-is-all-too-informal\n\nThe process is intended to be as lightweight as reasonable for the present\ncircumstances. As usual, we are trying to let the process be driven by\nconsensus and community norms, not impose more structure than necessary.\n\n\n## License\n[License]: #license\n\nThis repository is currently in the process of being licensed under either of:\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option. Some parts of the repository are already licensed according to those terms. For more see [RFC 2044](https://github.com/rust-lang/rfcs/pull/2044) and its [tracking issue](https://github.com/rust-lang/rust/issues/43461).\n\n\n### Contributions\n[Contributions]: #contributions\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n\n[official Zulip server]: https://rust-lang.zulipchat.com/\n[developer discussion forum]: https://internals.rust-lang.org/\n[RFC repository]: https://github.com/rust-lang/rfcs\n[sub-team]: https://www.rust-lang.org/team.html\n", "release_dates": []}, {"name": "rfcbot-rs", "description": "Coordinates asynchronous decision making on Rust repositories. Status of tracked issues and PRs can be viewed at https://rfcbot.rs.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rfcbot\n\n[rfcbot](https://github.com/rfcbot) manages asynchronous decision making on Rust issues and PRs. Status of Final Comment Periods can be viewed on [the relevant dashboard page](http://rfcbot.rs).\n\nIt listens for commands on all repositories owned by the [rust-lang](https://github.com/rust-lang), [rust-lang-nursery](https://github.com/rust-lang-nursery), and [rust-lang-deprecated](https://github.com/rust-lang-deprecated) organizations.\n\nWhile its intended usage is for RFCs, you can use its tracking on any issue or pull request which needs an async review/decision cycle.\n\n## Usage\n\nrfcbot accepts commands in GitHub comments. All commands take the form:\n\n```\n@rfcbot COMMAND [PARAMS]\n```\n\nEach command must start on its own line, but otherwise the bot doesn't care if there's other text in the comment. This is valid:\n\n```\nTEXT\nTEXT\n@rfcbot fcp merge\nTEXT TEXT\nTEXT\n```\n\nBut this is not:\n\n```\nTEXT @rfcbot fcp merge\nTEXT\n```\n\nBoth of these commands will be registered:\n\n```\n@rfcbot concern FOO\n@rfcbot concern BAR\n```\n\nExamples are in each section.\n\n### Command grammar\n\nrfcbot accepts roughly the following grammar:\n\n```ebnf\nmerge ::= \"merge\" | \"merged\" | \"merging\" | \"merges\" ;\nclose ::= \"close\" | \"closed\" | \"closing\" | \"closes\" ;\npostpone ::= \"postpone\" | \"postponed\" | \"postponing\" | \"postpones\" ;\ncancel ::= \"cancel\" | \"canceled\" | \"canceling\" | \"cancels\" ;\nreview ::= \"reviewed\" | \"review\" | \"reviewing\" | \"reviews\" ;\nconcern ::= \"concern\" | \"concerned\" | \"concerning\" | \"concerns\" ;\nresolve ::= \"resolve\" | \"resolved\" | \"resolving\" | \"resolves\" ;\npoll ::= \"ask\" | \"asked\" | \"asking\" | \"asks\" |\n         \"poll\" | \"polled\" | \"polling\" | \"polls\" |\n         \"query\" | \"queried\" | \"querying\" | \"queries\" |\n         \"inquire\" | \"inquired\" | \"inquiring\" | \"inquires\" |\n         \"quiz\" | \"quizzed\" | \"quizzing\" | \"quizzes\" |\n         \"survey\" | \"surveyed\" | \"surveying\" | \"surveys\" ;\n\nteam_label ::= \"T-lang\" | .. ;\nteam_label_simple ::= \"lang\" | .. ;\nteam_ping ::= \"@\"? \"rust-lang/lang\" | ..;\nteam_target ::= team_label | team_label_simple | team_ping ;\n\nline_remainder ::= .+$ ;\nws_separated ::= ... ;\n\nsubcommand ::= merge | close | postpone | cancel | review\n             | concern line_remainder\n             | resolve line_remainder\n             | poll [team_target]* line_remainder\n             ;\n\ninvocation ::= \"fcp\" subcommand\n             | \"pr\" subcommand\n             | \"f?\" ws_separated\n             | subcommand\n             ;\n\ngrammar ::= \"@rfcbot\" \":\"? invocation ;\n```\n\nMultiple occurrences of `grammar` are allowed in each comment you make on GitHub.\nThis means that the following is OK:\n\n```\n@rfcbot merge\n\nSome stuff you want to say...\n\n@rfcbot concern foobar\n\nExplain the concern...\n```\n\n### Final Comment Period\n\nBefore proposing a final comment period on an issue/PR/RFC, please double check to make sure that the correct team label(s) has been applied to the issue. As of 9/17/16, rfcbot recognizes these labels:\n\n* Core: `T-core`\n* Language: `T-lang`\n* Libraries: `T-libs`\n* Compiler: `T-compiler`\n* Tools: `T-tools`\n* Documentation: `T-doc`\n\n#### Proposing FCP\n\nTo propose an FCP, use `@rfcbot fcp DISPOSITION` where disposition is one of `[merge|close|postpone]`. You can also use `@rfcbot pr DISPOSITION`, which will be used in the future to improve the quality of status comments from the bot.\n\nIf the proposer is on one of the tagged subteams, rfcbot will create a tracking comment with a checklist of review requests. Once all review requests have been satisfied and any concerns have been resolved, it will post a comment to that effect. One week after the \"FCP start\" comment, it will post another follow-up comment saying that one week has passed.\n\nrfcbot will only request reviews from members of the tagged team(s), and as of right now only supports reviews from teams that are tagged at the time an FCP is proposed.\n\n#### Cancelling FCP\n\nTo cancel an FCP proposal after it's started, use `@rfcbot fcp cancel`. This will delete all records of the FCP, including any concerns raised (although their comments will remain).\n\n#### Reviewing\n\nTo indicate that you've reviewed the FCP proposal, either check the box next to your name on the tracking comment, or use the command `@rfcbot reviewed`.\n\n#### Concerns\n\nTo register blocking concerns on the FCP proposal, use `@rfcbot concern NAME_OF_CONCERN`. The bot will parse up until the first newline after the command for the concern's name, and add it to the list of concerns in the tracking comment.\n\nTo indicate that your concern has been resolved, use `@rfcbot resolved NAME_OF_CONCERN`. Note that as of this writing, only the original author can mark their concern as resolved.\n\nNote that only one concern per comment is allowed.\n\n### Feedback Requests\n\nTo request feedback from a user not on the tagged team(s), use `@rfcbot f? @username`. This will create an entry in the database which will be marked as resolved once that user has commented on the issue/PR. Note that these feedback requests will not block start/end of an FCP. If you need to block FCP on that user's feedback, you may want to create a new concern that you can resolve.\n\nIn a future update, the UI for the dashboard will be updated to display these feedback requests, but they don't show up anywhere right now.\n\n## Contributing, Code of Conduct, License\n\nPlease see CONTRIBUTING.md.\n", "release_dates": []}, {"name": "rfcs", "description": "RFCs for changes to Rust", "language": "Markdown", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust RFCs - [RFC Book](https://rust-lang.github.io/rfcs/) - [Active RFC List](https://rfcbot.rs/)\n\n[Rust RFCs]: #rust-rfcs\n\nThe \"RFC\" (request for comments) process is intended to provide a consistent\nand controlled path for changes to Rust (such as new features) so that all\nstakeholders can be confident about the direction of the project.\n\nMany changes, including bug fixes and documentation improvements can be\nimplemented and reviewed via the normal GitHub pull request workflow.\n\nSome changes though are \"substantial\", and we ask that these be put through a\nbit of a design process and produce a consensus among the Rust community and\nthe [sub-team]s.\n\n## Table of Contents\n[Table of Contents]: #table-of-contents\n\n  - [Opening](#rust-rfcs)\n  - [Table of Contents]\n  - [When you need to follow this process]\n  - [Sub-team specific guidelines]\n  - [Before creating an RFC]\n  - [What the process is]\n  - [The RFC life-cycle]\n  - [Reviewing RFCs]\n  - [Implementing an RFC]\n  - [RFC Postponement]\n  - [Help this is all too informal!]\n  - [License]\n  - [Contributions]\n\n\n## When you need to follow this process\n[When you need to follow this process]: #when-you-need-to-follow-this-process\n\nYou need to follow this process if you intend to make \"substantial\" changes to\nRust, Cargo, Crates.io, or the RFC process itself. What constitutes a\n\"substantial\" change is evolving based on community norms and varies depending\non what part of the ecosystem you are proposing to change, but may include the\nfollowing.\n\n  - Any semantic or syntactic change to the language that is not a bugfix.\n  - Removing language features, including those that are feature-gated.\n  - Changes to the interface between the compiler and libraries, including lang\n    items and intrinsics.\n  - Additions to `std`.\n\nSome changes do not require an RFC:\n\n  - Rephrasing, reorganizing, refactoring, or otherwise \"changing shape does\n    not change meaning\".\n  - Additions that strictly improve objective, numerical quality criteria\n    (warning removal, speedup, better platform coverage, more parallelism, trap\n    more errors, etc.)\n  - Additions only likely to be _noticed by_ other developers-of-rust,\n    invisible to users-of-rust.\n\nIf you submit a pull request to implement a new feature without going through\nthe RFC process, it may be closed with a polite request to submit an RFC first.\n\n\n### Sub-team specific guidelines\n[Sub-team specific guidelines]: #sub-team-specific-guidelines\n\nFor more details on when an RFC is required for the following areas, please see\nthe Rust community's [sub-team] specific guidelines for:\n\n  - [language changes](lang_changes.md),\n  - [library changes](libs_changes.md),\n  - [compiler changes](compiler_changes.md).\n\n\n## Before creating an RFC\n[Before creating an RFC]: #before-creating-an-rfc\n\nA hastily-proposed RFC can hurt its chances of acceptance. Low quality\nproposals, proposals for previously-rejected features, or those that don't fit\ninto the near-term roadmap, may be quickly rejected, which can be demotivating\nfor the unprepared contributor. Laying some groundwork ahead of the RFC can\nmake the process smoother.\n\nAlthough there is no single way to prepare for submitting an RFC, it is\ngenerally a good idea to pursue feedback from other project developers\nbeforehand, to ascertain that the RFC may be desirable; having a consistent\nimpact on the project requires concerted effort toward consensus-building.\n\nThe most common preparations for writing and submitting an RFC include talking\nthe idea over on our [official Zulip server], discussing the topic on our\n[developer discussion forum], and occasionally posting \"pre-RFCs\" on the\ndeveloper forum. You may file issues on this repo for discussion, but these are\nnot actively looked at by the teams.\n\nAs a rule of thumb, receiving encouraging feedback from long-standing project\ndevelopers, and particularly members of the relevant [sub-team] is a good\nindication that the RFC is worth pursuing.\n\n\n## What the process is\n[What the process is]: #what-the-process-is\n\nIn short, to get a major feature added to Rust, one must first get the RFC\nmerged into the RFC repository as a markdown file. At that point the RFC is\n\"active\" and may be implemented with the goal of eventual inclusion into Rust.\n\n  - Fork the RFC repo [RFC repository]\n  - Copy `0000-template.md` to `text/0000-my-feature.md` (where \"my-feature\" is\n    descriptive). Don't assign an RFC number yet; This is going to be the PR\n    number and we'll rename the file accordingly if the RFC is accepted.\n  - Fill in the RFC. Put care into the details: RFCs that do not present\n    convincing motivation, demonstrate lack of understanding of the design's\n    impact, or are disingenuous about the drawbacks or alternatives tend to\n    be poorly-received.\n  - Submit a pull request. As a pull request the RFC will receive design\n    feedback from the larger community, and the author should be prepared to\n    revise it in response.\n  - Now that your RFC has an open pull request, use the issue number of the PR\n    to update your `0000-` prefix to that number.\n  - Each pull request will be labeled with the most relevant [sub-team], which\n    will lead to its being triaged by that team in a future meeting and assigned\n    to a member of the subteam.\n  - Build consensus and integrate feedback. RFCs that have broad support are\n    much more likely to make progress than those that don't receive any\n    comments. Feel free to reach out to the RFC assignee in particular to get\n    help identifying stakeholders and obstacles.\n  - The sub-team will discuss the RFC pull request, as much as possible in the\n    comment thread of the pull request itself. Offline discussion will be\n    summarized on the pull request comment thread.\n  - RFCs rarely go through this process unchanged, especially as alternatives\n    and drawbacks are shown. You can make edits, big and small, to the RFC to\n    clarify or change the design, but make changes as new commits to the pull\n    request, and leave a comment on the pull request explaining your changes.\n    Specifically, do not squash or rebase commits after they are visible on the\n    pull request.\n  - At some point, a member of the subteam will propose a \"motion for final\n    comment period\" (FCP), along with a *disposition* for the RFC (merge, close,\n    or postpone).\n    - This step is taken when enough of the tradeoffs have been discussed that\n      the subteam is in a position to make a decision. That does not require\n      consensus amongst all participants in the RFC thread (which is usually\n      impossible). However, the argument supporting the disposition on the RFC\n      needs to have already been clearly articulated, and there should not be a\n      strong consensus *against* that position outside of the subteam. Subteam\n      members use their best judgment in taking this step, and the FCP itself\n      ensures there is ample time and notification for stakeholders to push\n      back if it is made prematurely.\n    - For RFCs with lengthy discussion, the motion to FCP is usually preceded by\n      a *summary comment* trying to lay out the current state of the discussion\n      and major tradeoffs/points of disagreement.\n    - Before actually entering FCP, *all* members of the subteam must sign off;\n      this is often the point at which many subteam members first review the\n      RFC in full depth.\n  - The FCP lasts ten calendar days, so that it is open for at least 5 business\n    days. It is also advertised widely,\n    e.g. in [This Week in Rust](https://this-week-in-rust.org/). This way all\n    stakeholders have a chance to lodge any final objections before a decision\n    is reached.\n  - In most cases, the FCP period is quiet, and the RFC is either merged or\n    closed. However, sometimes substantial new arguments or ideas are raised,\n    the FCP is canceled, and the RFC goes back into development mode.\n\n## The RFC life-cycle\n[The RFC life-cycle]: #the-rfc-life-cycle\n\nOnce an RFC becomes \"active\" then authors may implement it and submit the\nfeature as a pull request to the Rust repo. Being \"active\" is not a rubber\nstamp, and in particular still does not mean the feature will ultimately be\nmerged; it does mean that in principle all the major stakeholders have agreed\nto the feature and are amenable to merging it.\n\nFurthermore, the fact that a given RFC has been accepted and is \"active\"\nimplies nothing about what priority is assigned to its implementation, nor does\nit imply anything about whether a Rust developer has been assigned the task of\nimplementing the feature. While it is not *necessary* that the author of the\nRFC also write the implementation, it is by far the most effective way to see\nan RFC through to completion: authors should not expect that other project\ndevelopers will take on responsibility for implementing their accepted feature.\n\nModifications to \"active\" RFCs can be done in follow-up pull requests. We\nstrive to write each RFC in a manner that it will reflect the final design of\nthe feature; but the nature of the process means that we cannot expect every\nmerged RFC to actually reflect what the end result will be at the time of the\nnext major release.\n\nIn general, once accepted, RFCs should not be substantially changed. Only very\nminor changes should be submitted as amendments. More substantial changes\nshould be new RFCs, with a note added to the original RFC. Exactly what counts\nas a \"very minor change\" is up to the sub-team to decide; check\n[Sub-team specific guidelines] for more details.\n\n\n## Reviewing RFCs\n[Reviewing RFCs]: #reviewing-rfcs\n\nWhile the RFC pull request is up, the sub-team may schedule meetings with the\nauthor and/or relevant stakeholders to discuss the issues in greater detail,\nand in some cases the topic may be discussed at a sub-team meeting. In either\ncase a summary from the meeting will be posted back to the RFC pull request.\n\nA sub-team makes final decisions about RFCs after the benefits and drawbacks\nare well understood. These decisions can be made at any time, but the sub-team\nwill regularly issue decisions. When a decision is made, the RFC pull request\nwill either be merged or closed. In either case, if the reasoning is not clear\nfrom the discussion in thread, the sub-team will add a comment describing the\nrationale for the decision.\n\n\n## Implementing an RFC\n[Implementing an RFC]: #implementing-an-rfc\n\nSome accepted RFCs represent vital features that need to be implemented right\naway. Other accepted RFCs can represent features that can wait until some\narbitrary developer feels like doing the work. Every accepted RFC has an\nassociated issue tracking its implementation in the Rust repository; thus that\nassociated issue can be assigned a priority via the triage process that the\nteam uses for all issues in the Rust repository.\n\nThe author of an RFC is not obligated to implement it. Of course, the RFC\nauthor (like any other developer) is welcome to post an implementation for\nreview after the RFC has been accepted.\n\nIf you are interested in working on the implementation for an \"active\" RFC, but\ncannot determine if someone else is already working on it, feel free to ask\n(e.g. by leaving a comment on the associated issue).\n\n\n## RFC Postponement\n[RFC Postponement]: #rfc-postponement\n\nSome RFC pull requests are tagged with the \"postponed\" label when they are\nclosed (as part of the rejection process). An RFC closed with \"postponed\" is\nmarked as such because we want neither to think about evaluating the proposal\nnor about implementing the described feature until some time in the future, and\nwe believe that we can afford to wait until then to do so. Historically,\n\"postponed\" was used to postpone features until after 1.0. Postponed pull\nrequests may be re-opened when the time is right. We don't have any formal\nprocess for that, you should ask members of the relevant sub-team.\n\nUsually an RFC pull request marked as \"postponed\" has already passed an\ninformal first round of evaluation, namely the round of \"do we think we would\never possibly consider making this change, as outlined in the RFC pull request,\nor some semi-obvious variation of it.\" (When the answer to the latter question\nis \"no\", then the appropriate response is to close the RFC, not postpone it.)\n\n\n### Help this is all too informal!\n[Help this is all too informal!]: #help-this-is-all-too-informal\n\nThe process is intended to be as lightweight as reasonable for the present\ncircumstances. As usual, we are trying to let the process be driven by\nconsensus and community norms, not impose more structure than necessary.\n\n\n## License\n[License]: #license\n\nThis repository is currently in the process of being licensed under either of:\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option. Some parts of the repository are already licensed according to those terms. For more see [RFC 2044](https://github.com/rust-lang/rfcs/pull/2044) and its [tracking issue](https://github.com/rust-lang/rust/issues/43461).\n\n\n### Contributions\n[Contributions]: #contributions\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\n\n[official Zulip server]: https://rust-lang.zulipchat.com/\n[developer discussion forum]: https://internals.rust-lang.org/\n[RFC repository]: https://github.com/rust-lang/rfcs\n[sub-team]: https://www.rust-lang.org/team.html\n", "release_dates": []}, {"name": "rls", "description": "Repository for the Rust Language Server (aka RLS)", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# \u26a0\ufe0f RLS is no longer supported\n\nRLS has been deprecated and is no longer supported.\nIt has been replaced with [rust-analyzer](https://rust-analyzer.github.io/).\nUsers are encouraged to uninstall RLS and follow the instructions in the\nrust-analyzer manual to install it for your editor.\n\n----\n\n# Rust Language Server (RLS)\n\nThe RLS provides a server that runs in the background, providing IDEs,\neditors, and other tools with information about Rust programs. It supports\nfunctionality such as 'goto definition', symbol search, reformatting, and code\ncompletion, and enables renaming and refactorings.\n\nA high-level overview of the architecture can be found [here](architecture.md).\n\nThe RLS gets its source data from the compiler and from\n[Racer](https://github.com/racer-rust/racer). Where possible it uses data from\nthe compiler which is precise and complete. Where it is not possible, (for example\nfor code completion and where building is too slow), it uses Racer.\n\nSince the Rust compiler does not yet support end-to-end incremental compilation,\nwe can't offer a perfect experience. However, by optimising our use of the\ncompiler and falling back to Racer, we can offer a pretty good experience for\nsmall to medium sized crates. As the RLS and compiler evolve, we'll offer a\nbetter experience for larger and larger crates.\n\nThe RLS is designed to be frontend-independent. We hope it will be widely\nadopted by different editors and IDEs. To seed development, we provide a\n[reference implementation of an RLS frontend](https://github.com/rust-lang/rls-vscode)\nfor [Visual Studio Code](https://code.visualstudio.com/).\n\n\n## Setup\n\n### Step 1: Install rustup\n\nYou can install [rustup](http://rustup.rs/) on many platforms. This will help us quickly install the\nRLS and its dependencies.\n\nIf you already have rustup installed, update to ensure you have the latest\nrustup and compiler:\n\n```\nrustup update\n```\n\n\nIf you're going to use the VSCode extension, you can skip step 2.\n\n\n### Step 2: Install the RLS\n\nOnce you have rustup installed, run the following commands:\n\n```\nrustup component add rls rust-analysis rust-src\n```\n\n### error: component 'rls' is unavailable for download (nightly)\nThe development of rustc's internals is quite fast paced. Downstream projects that rely on nightly internals, particularly clippy, can break fairly often because of this.\n\nWhen such breakages occur the nightly release will be missing rls. This is a trade-off compared with the other option of just not publishing the night's release, but does avoid blocking the rust nightly releases for people that don't need clippy/rls.\n\nTo mitigate the issues we have:\n* rustup will warn if the update is missing any components you currently have. This means you can no longer accidentally update to a no-rls release. Once rls is available again it'll update.\n* rls, clippy are available on the stable channel. Meaning most developers installing for the first time should use stable.\n* However, if you need latest nightly rls you can use https://rust-lang.github.io/rustup-components-history/ to find and install a dated nightly release ie `rustup install nightly-2018-12-06`.\n\nAlso see [#641](https://github.com/rust-lang/rls/issues/641).\n\n## Running\n\nThe RLS is built to work with many IDEs and editors, we mostly use\nVSCode to test the RLS. The easiest way is to use the [published extension](https://github.com/rust-lang/rls-vscode).\n\nYou'll know it's working when you see this in the status bar at the bottom, with\na spinning indicator:\n\n`RLS: working \u25d0`\n\nOnce you see:\n\n`RLS`\n\nThen you have the full set of capabilities available to you.  You can goto def,\nfind all refs, rename, goto type, etc.  Completions are also available using the\nheuristics that Racer provides.  As you type, your code will be checked and\nerror squiggles will be reported when errors occur.  You can hover these\nsquiggles to see the text of the error.\n\n## Configuration\n\nThe RLS can be configured on a per-project basis; using the Visual\nStudio Code extension this will be done via the workspace settings file\n`settings.json`.\n\nOther editors will have their own way of sending the\n[workspace/DidChangeConfiguration](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeConfiguration)\nmethod. Options are nested in the `rust` object, so your LSP client might send\n`{\"settings\":{\"rust\":{\"unstable_features\":true}}}` as parameters.\n\nEntries in this file will affect how the RLS operates and how it builds your\nproject.\n\nCurrently we accept the following options:\n\n* `unstable_features` (`bool`, defaults to `false`) enables unstable features.\n  Currently no option requires this flag.\n* `sysroot` (`String`, defaults to `\"\"`) if the given string is not empty, use\n  the given path as the sysroot for all rustc invocations instead of trying to\n  detect the sysroot automatically\n* `target` (`String`, defaults to `\"\"`) if the given string is not empty, use\n  the given target triple for all rustc invocations\n* `wait_to_build` (`u64`) overrides build debounce duration (ms). This is otherwise automatically\n  inferred by the latest build duration.\n* `all_targets` (`bool`, defaults to `true`) checks the project as if you were\n  running `cargo check --all-targets`. I.e., check all targets and integration\n  tests too\n* `crate_blacklist` (`[String]`, defaults to [this list](https://github.com/rust-dev-tools/rls-blacklist/blob/master/src/lib.rs))\n  allows to specify which crates should be skipped by the RLS.\n  By default skips libraries that are of considerable size but which the user\n  often may not be directly interested in, thus reducing the build latency.\n* `build_on_save` (`bool`, defaults to `false`) toggles whether the RLS should\n  perform continuous analysis or only after a file is saved\n* `features` (`[String]`, defaults to empty) list of Cargo features to enable\n* `all_features` (`bool`, defaults to `false`) enables all Cargo features\n* `no_default_features` (`bool`, defaults to `false`) disables default Cargo\n  features\n* `racer_completion` (`bool`, defaults to `true`) enables code completion using\n  racer (which is, at the moment, our only code completion backend). Also enables\n  hover tooltips & go-to-definition to fall back to racer when save-analysis data is unavailable.\n* `clippy_preference` (`String`, defaults to `\"opt-in\"`) controls eagerness of clippy\n  diagnostics when available. Valid values are _(case-insensitive)_:\n  - `\"off\"` Disable clippy lints.\n  - `\"on\"` Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n  - `\"opt-in\"` Only display the lints [explicitly enabled in the code](https://github.com/rust-lang/rust-clippy#allowingdenying-lints). Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\n\nand the following unstable options:\n\n* `build_lib` (`bool`, defaults to `false`) checks the project as if you passed\n  the `--lib` argument to cargo. Mutually exclusive with, and preferred over,\n  `build_bin`.\n* `build_bin` (`String`, defaults to `\"\"`) checks the project as if you passed\n  `-- bin <build_bin>` argument to cargo. Mutually exclusive with `build_lib`.\n* `cfg_test` (`bool`, defaults to `false`) checks the project as if you were\n  running `cargo test` rather than `cargo build`. I.e., compiles (but does not\n  run) test code.\n* `full_docs` (`bool`, defaults to `false`) instructs rustc to populate the\n  save-analysis data with full source documentation. When set to `false`, only the\n  first paragraph is recorded. This option _currently_ has little to no effect on\n  hover tooltips. The save-analysis docs are only used if source extraction fails.\n  This option has no effect on the standard library.\n* `show_hover_context` (`bool`, defaults to `true`) show additional context in\n  hover tooltips when available. This is often the local variable declaration.\n  When set to false the content is only available when holding the `ctrl` key in\n  some editors.\n\n\n## Troubleshooting\n\nFor tips on debugging and troubleshooting, see [debugging.md](debugging.md).\n\n\n## Contributing\n\nYou can look in the [contributing.md](https://github.com/rust-lang/rls/blob/master/contributing.md)\nin this repo to learn more about contributing to this project.\n\nIf you want to implement RLS support in an editor, see [clients.md](clients.md).\n", "release_dates": ["2017-03-01T21:09:01Z"]}, {"name": "rust", "description": "Empowering everyone to build reliable and efficient software.", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# The Rust Programming Language\n\n[![Rust Community](https://img.shields.io/badge/Rust_Community%20-Join_us-brightgreen?style=plastic&logo=rust)](https://www.rust-lang.org/community)\n\nThis is the main source code repository for [Rust]. It contains the compiler,\nstandard library, and documentation.\n\n[Rust]: https://www.rust-lang.org/\n\n**Note: this README is for _users_ rather than _contributors_.**\nIf you wish to _contribute_ to the compiler, you should read\n[CONTRIBUTING.md](CONTRIBUTING.md) instead.\n\n<details>\n<summary>Table of Contents</summary>\n\n- [Quick Start](#quick-start)\n- [Installing from Source](#installing-from-source)\n- [Getting Help](#getting-help)\n- [Contributing](#contributing)\n- [License](#license)\n- [Trademark](#trademark)\n\n</details>\n\n## Quick Start\n\nRead [\"Installation\"] from [The Book].\n\n[\"Installation\"]: https://doc.rust-lang.org/book/ch01-01-installation.html\n[The Book]: https://doc.rust-lang.org/book/index.html\n\n## Installing from Source\n\nIf you really want to install from source (though this is not recommended), see\n[INSTALL.md](INSTALL.md).\n\n## Getting Help\n\nSee https://www.rust-lang.org/community for a list of chat platforms and forums.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nRust is primarily distributed under the terms of both the MIT license and the\nApache License (Version 2.0), with portions covered by various BSD-like\nlicenses.\n\nSee [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n[COPYRIGHT](COPYRIGHT) for details.\n\n## Trademark\n\n[The Rust Foundation][rust-foundation] owns and protects the Rust and Cargo\ntrademarks and logos (the \"Rust Trademarks\").\n\nIf you want to use these names or brands, please read the\n[media guide][media-guide].\n\nThird-party logos may be subject to third-party copyrights and trademarks. See\n[Licenses][policies-licenses] for details.\n\n[rust-foundation]: https://foundation.rust-lang.org/\n[media-guide]: https://foundation.rust-lang.org/policies/logo-policy-and-media-guide/\n[policies-licenses]: https://www.rust-lang.org/policies/licenses\n", "release_dates": ["2024-02-08T14:07:09Z", "2023-12-28T16:21:59Z", "2023-12-18T20:43:18Z", "2023-11-16T13:49:39Z", "2023-10-06T01:49:09Z", "2023-09-20T09:55:55Z", "2023-08-24T13:46:54Z", "2023-09-20T18:06:49Z", "2023-07-13T14:04:19Z", "2023-06-01T18:52:53Z", "2023-04-20T14:39:46Z", "2023-03-28T12:56:09Z", "2023-03-27T16:14:40Z", "2023-03-09T14:46:46Z", "2023-02-10T09:25:10Z", "2023-01-26T15:13:55Z", "2023-01-11T01:41:44Z", "2023-01-11T01:41:44Z", "2022-12-15T16:11:13Z", "2022-11-03T14:08:46Z", "2022-09-22T13:31:04Z", "2022-08-11T20:49:19Z", "2022-07-19T13:40:54Z", "2022-06-30T16:33:43Z", "2022-05-19T14:19:08Z", "2022-04-07T14:02:44Z", "2022-02-24T17:00:22Z", "2022-01-20T21:54:06Z", "2022-01-13T17:15:38Z", "2021-12-02T14:56:17Z"]}, {"name": "rust-analyzer", "description": "A Rust compiler front-end for IDEs", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p align=\"center\">\n  <img\n    src=\"https://raw.githubusercontent.com/rust-analyzer/rust-analyzer/master/assets/logo-wide.svg\"\n    alt=\"rust-analyzer logo\">\n</p>\n\nrust-analyzer is a modular compiler frontend for the Rust language.\nIt is a part of a larger rls-2.0 effort to create excellent IDE support for Rust.\n\n## Quick Start\n\nhttps://rust-analyzer.github.io/manual.html#installation\n\n## Documentation\n\nIf you want to **contribute** to rust-analyzer or are just curious about how\nthings work under the hood, check the [./docs/dev](./docs/dev) folder.\n\nIf you want to **use** rust-analyzer's language server with your editor of\nchoice, check [the manual](https://rust-analyzer.github.io/manual.html) folder.\nIt also contains some tips & tricks to help you be more productive when using rust-analyzer.\n\n## Security and Privacy\n\nSee the corresponding sections of [the manual](https://rust-analyzer.github.io/manual.html#security).\n\n## Communication\n\nFor usage and troubleshooting requests, please use \"IDEs and Editors\" category of the Rust forum:\n\nhttps://users.rust-lang.org/c/ide/14\n\nFor questions about development and implementation, join rust-analyzer working group on Zulip:\n\nhttps://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer\n\n## Quick Links\n\n* Website: https://rust-analyzer.github.io/\n* Metrics: https://rust-analyzer.github.io/metrics/\n* API docs: https://rust-lang.github.io/rust-analyzer/ide/\n* Changelog: https://rust-analyzer.github.io/thisweek\n\n## License\n\nrust-analyzer is primarily distributed under the terms of both the MIT\nlicense and the Apache License (Version 2.0).\n\nSee LICENSE-APACHE and LICENSE-MIT for details.\n", "release_dates": ["2024-02-28T00:30:56Z", "2024-02-26T06:53:02Z", "2024-02-19T09:36:31Z", "2024-02-12T06:34:41Z", "2024-02-05T07:05:00Z", "2024-01-29T06:39:07Z", "2024-01-22T04:40:16Z", "2024-01-15T06:49:59Z", "2024-01-08T06:31:11Z", "2024-01-01T12:33:10Z", "2023-12-25T07:41:20Z", "2023-12-18T06:53:43Z", "2023-12-11T06:16:58Z", "2023-12-04T06:49:34Z", "2023-11-27T06:18:04Z", "2023-11-20T06:53:44Z", "2023-11-13T06:53:03Z", "2023-11-06T06:25:08Z", "2023-10-30T05:38:04Z", "2023-10-23T05:48:25Z", "2023-10-16T05:58:42Z", "2023-10-09T06:09:29Z", "2023-10-02T06:14:05Z", "2023-09-25T05:42:25Z", "2023-09-18T06:01:32Z", "2023-09-11T05:03:51Z", "2023-09-04T06:00:43Z", "2023-08-28T09:16:24Z", "2023-08-21T08:59:32Z", "2023-08-14T07:27:25Z"]}, {"name": "rust-artwork", "description": "Official artwork for the Rust project.", "language": null, "license": null, "readme": "# rust-artwork\n\nOfficial artwork for the Rust project.\n\n## Licensing terms for the Rust logo\n\nThe Rust logo is distributed under the terms of the [Creative Commons\nAttribution license (CC-BY)][CC-BY]. This is the most permissive\nCreative Commons license, and allows reuse and modifications for any\npurpose. The restrictions are that distributors must \u201cgive appropriate\ncredit, provide a link to the license, and indicate if changes were\nmade\u201d.\n\n[CC-BY]: https://creativecommons.org/licenses/by/4.0/\n\nNote that uses of the Logo must also abide by the trademark rules,\ndescribed below.\n\n### Trademark\n\n**Note that use of the Rust logos, and the Rust and Cargo names, is\nalso governed by trademark.** Our trademark policy is [described in\nfull on the Rust website][legal], but the summary is as follows:\n\n[legal]: https://www.rust-lang.org/policies/media-guide\n\n> TL;DR: Most non-commercial uses of the Rust/Cargo names and logos\n> are allowed and do not require permission; most commercial uses\n> require permission. In either case, the most important rule is that\n> uses of the trademarks cannot appear official or imply any\n> endorsement by the Rust project.\n\n## Licensing terms for the RustConf artwork\n\nThe RustConf artwork is distributed under a [Creative Commons\nAttribute-NonCommercial-NoDerivatives][CC-BY-NC-ND] license. This\nlicense permits you to reproduce the work as-is for noncommercial\npurposes, with attribution, but does not permit creating or\ndistributing derived works.\n\n[CC-BY-NC-ND]: https://creativecommons.org/licenses/by-nc-nd/4.0/\n\nThe RustConf artwork is owned by [Tilde](https://www.tilde.io/).\n\n## Other uses\n\nIf you would like to use the artwork in a way that is not covered by\nthe license and trademark rules given above, it may still be\npermitted; e-mail the `trademark@rust-lang.org` address to ask\npermission.\n", "release_dates": []}, {"name": "rust-bindgen", "description": "Automatically generates Rust FFI bindings to C (and some C++) libraries.", "language": "Rust", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "[![crates.io](https://img.shields.io/crates/v/bindgen.svg)](https://crates.io/crates/bindgen)\n[![docs.rs](https://docs.rs/bindgen/badge.svg)](https://docs.rs/bindgen/)\n\n# `bindgen`\n\n**`bindgen` automatically generates Rust FFI bindings to C (and some C++) libraries.**\n\nFor example, given the C header `doggo.h`:\n\n```c\ntypedef struct Doggo {\n    int many;\n    char wow;\n} Doggo;\n\nvoid eleven_out_of_ten_majestic_af(Doggo* pupper);\n```\n\n`bindgen` produces Rust FFI code allowing you to call into the `doggo` library's\nfunctions and use its types:\n\n```rust\n/* automatically generated by rust-bindgen 0.99.9 */\n\n#[repr(C)]\npub struct Doggo {\n    pub many: ::std::os::raw::c_int,\n    pub wow: ::std::os::raw::c_char,\n}\n\nextern \"C\" {\n    pub fn eleven_out_of_ten_majestic_af(pupper: *mut Doggo);\n}\n```\n\n## Users Guide\n\n[\ud83d\udcda Read the `bindgen` users guide here! \ud83d\udcda](https://rust-lang.github.io/rust-bindgen)\n\n## MSRV\n\nThe `bindgen` minimum supported Rust version is **1.60.0**.\n\nThe `bindgen-cli` minimum supported Rust version is **1.64.0**.\n\nNo MSRV bump policy has been established yet, so MSRV may increase in any release.\n\nThe MSRV is the minimum Rust version that can be used to *compile* each crate. However, `bindgen` and `bindgen-cli` can generate bindings that are compatible with Rust versions below the current MSRV.\n\nMost of the time, the `bindgen-cli` crate will have a more recent MSRV than `bindgen` as crates such as `clap` require it. \n\n## API Reference\n\n[API reference documentation is on docs.rs](https://docs.rs/bindgen)\n\n## Environment Variables\n\nIn addition to the [library API](https://docs.rs/bindgen) and [executable command-line API][bindgen-cmdline],\n`bindgen` can be controlled through environment variables.\n\nEnd-users should set these environment variables to modify `bindgen`'s behavior without modifying the source code of direct consumers of `bindgen`.\n\n- `BINDGEN_EXTRA_CLANG_ARGS`: extra arguments to pass to `clang`\n    - Arguments are whitespace-separated\n    - Use shell-style quoting to pass through whitespace\n    - Examples:\n        - Specify alternate sysroot: `--sysroot=/path/to/sysroot`\n        - Add include search path with spaces: `-I\"/path/with spaces\"`\n- `BINDGEN_EXTRA_CLANG_ARGS_<TARGET>`: similar to `BINDGEN_EXTRA_CLANG_ARGS`,\n   but used to set per-target arguments to pass to clang. Useful to set system include\n   directories in a target-specific way in cross-compilation environments with multiple targets.\n   Has precedence over `BINDGEN_EXTRA_CLANG_ARGS`.\n\nAdditionally, `bindgen` uses `libclang` to parse C and C++ header files.\nTo modify how `bindgen` searches for `libclang`, see the [`clang-sys` documentation][clang-sys-env].\nFor more details on how `bindgen` uses `libclang`, see the [`bindgen` users guide][bindgen-book-clang].\n\n## Releases\n\nWe don't follow a specific release calendar, but if you need a release please\nfile an issue requesting that (ping `@emilio` for increased effectiveness).\n\n## Contributing\n\n[See `CONTRIBUTING.md` for hacking on `bindgen`!](./CONTRIBUTING.md)\n\n[bindgen-cmdline]: https://rust-lang.github.io/rust-bindgen/command-line-usage.html\n[clang-sys-env]: https://github.com/KyleMayes/clang-sys#environment-variables\n[bindgen-book-clang]: https://rust-lang.github.io/rust-bindgen/requirements.html#clang\n", "release_dates": ["2024-02-04T12:54:50Z", "2024-02-04T11:52:51Z", "2024-01-13T00:15:23Z", "2023-11-02T17:52:21Z", "2023-11-01T18:00:04Z", "2023-09-06T17:56:30Z", "2023-06-20T00:17:16Z", "2023-06-14T18:15:53Z"]}, {"name": "rust-by-example", "description": "Learn Rust with examples (Live code editor included)", "language": "Handlebars", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust By Example\n\n[![Build Status][travis-badge]][travis-repo]\n\n[travis-badge]: https://travis-ci.com/rust-lang/rust-by-example.svg?branch=master\n[travis-repo]: https://travis-ci.com/rust-lang/rust-by-example\n\nLearn Rust with examples (Live code editor included)\n\n## Using\n\nIf you'd like to read Rust by Example, you can visit <https://doc.rust-lang.org/rust-by-example/>\nto read it online.\n\nIf you'd like to read it locally, [install Rust], and then:\n\n```bash\ngit clone https://github.com/rust-lang/rust-by-example\ncd rust-by-example\ncargo install mdbook\nmdbook build\nmdbook serve\n```\n\n[install Rust]: https://www.rust-lang.org/tools/install\n\nTo be able to run the examples, you must be connected to the internet; you can\nread all content offline, however!\n\n**The following warnings can be ignored safely.**\n\n```\n[WARN] (mdbook::preprocess::cmd): The command wasn't found, is the \"gettext\" preprocessor installed?\n[WARN] (mdbook::preprocess::cmd):   Command: mdbook-gettext\n```\n\n### Using translated version\n\nIf there is a translated resource in `po/` directory, it can be specified through `MDBOOK_BOOK__LANGUAGE` like below:\n\n```bash\ngit clone https://github.com/rust-lang/rust-by-example\ncd rust-by-example\ncargo install mdbook\nMDBOOK_BOOK__LANGUAGE=ja mdbook build\nMDBOOK_BOOK__LANGUAGE=ja mdbook serve\n```\n\n## Contributing\n\nPlease see the [CONTRIBUTING.md] file for more details.\n\n[CONTRIBUTING.md]: https://github.com/rust-lang/rust-by-example/blob/master/CONTRIBUTING.md\n\n## Translating\n\nPlease see the [TRANSLATING.md] file for more details.\n\n[TRANSLATING.md]: https://github.com/rust-lang/rust-by-example/blob/master/TRANSLATING.md\n\n### Translating guide for each languages\n\n* Japanese/\u65e5\u672c\u8a9e: [TRANSLATING_JA.md]\n\n[TRANSLATING_JA.md]: https://github.com/rust-lang/rust-by-example/blob/master/TRANSLATING_JA.md\n\n## Translations to other languages\n\n* [Bulgarian](https://github.com/kberov/rust-by-example-bg)\n* [Chinese](https://github.com/rust-lang-cn/rust-by-example-cn)\n* [Japanese](https://github.com/rust-lang-ja/rust-by-example-ja)\n* [French](https://github.com/Songbird0/FR_RBE)\n* [Russian](https://github.com/ruRust/rust-by-example)\n* [Vietnamese](https://github.com/EyesCrypto-Insights/rust-by-example-vn)\n* [Portuguese](https://github.com/nazarepiedady/rust-com-exemplos)\n\n## License\n\nRust by Example is licensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n  <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or\n  <http://opensource.org/licenses/MIT>)\n\nat your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Rust by Example by you, as defined in the Apache-2.0 license, shall be\ndually licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "rust-central-station", "description": "Old home of some infra pieces", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Archived repository!\n\nThis repository was the home of some of the most important services hosted by\nthe Rust Infrastructure Team, but over time those services were moved to new\nhomes:\n\n* The release process is now developed and deployed in [rust-lang/promote-release].\n* Bors is now developed, configured and deployed in [rust-lang/homu].\n* Team synchronization is now developed and deployed in [rust-lang/sync-team].\n* Cancelbot is not in use anymore.\n\n[rust-lang/promote-release]: https://github.com/rust-lang/promote-release\n[rust-lang/homu]: https://github.com/rust-lang/homu\n[rust-lang/sync-team]: https://github.com/rust-lang/sync-team\n\n# Rust Central Station\n\nOr otherwise just another name for the old buildmaster.\n\nThis repo is hooked up to an automated docker build\n\n* https://hub.docker.com/r/alexcrichton/rust-central-station/\n\nOn the destination machine you can run it as:\n\n    ./run-prod.sh\n\nServices currently provided are:\n\n* cancelbot for rust-lang/rust\n* cancelbot for rust-lang/cargo\n* homu\n* nginx in front of homu\n* ssl via letsencrypt\n\nFuture services\n\n* signing Rust releases\n\n## Architecture\n\nThis is intended to be run as a container on the destination server, so the\ncontainer here specifies everything about what's being run.\n\n* Secrets are stored in `secrets.toml` next to `secrets.toml.example` and are\n  shared with the container.\n* Programs are provided in the container (`tq` and `rbars`) which will read the\n  TOML configuration for use in shell scripts.\n* Everything pipes output to `logger` to collect output\n* Services are just run as simple daemons, not a lot of management.\n", "release_dates": []}, {"name": "rust-clippy", "description": "A bunch of lints to catch common mistakes and improve your Rust code. Book: https://doc.rust-lang.org/clippy/", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Clippy\n\n[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test%20(bors)/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test+(bors)%22+event%3Apush+branch%3Aauto)\n[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n\nA collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n\n[There are over 700 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n\nLints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\nYou can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category.\n\n| Category              | Description                                                                         | Default level |\n|-----------------------|-------------------------------------------------------------------------------------|---------------|\n| `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n| `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n| `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |\n| `clippy::style`       | code that should be written in a more idiomatic way                                 | **warn**      |\n| `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n| `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n| `clippy::pedantic`    | lints which are rather strict or have occasional false positives                    | allow         |\n| `clippy::restriction` | lints which prevent the use of language and library features[^restrict]             | allow         |\n| `clippy::nursery`     | new lints that are still under development                                          | allow         |\n| `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |\n\nMore to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n\nThe `restriction` category should, *emphatically*, not be enabled as a whole. The contained\nlints may lint against perfectly reasonable code, may not have an alternative suggestion,\nand may contradict any other lints (including other categories). Lints should be considered\non a case-by-case basis before enabling.\n\n[^restrict]: Some use cases for `restriction` lints include:\n    - Strict coding styles (e.g. [`clippy::else_if_without_else`]).\n    - Additional restrictions on CI (e.g. [`clippy::todo`]).\n    - Preventing panicking in certain functions (e.g. [`clippy::unwrap_used`]).\n    - Running a lint only on a subset of code (e.g. `#[forbid(clippy::float_arithmetic)]` on a module).\n\n[`clippy::else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n[`clippy::todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n[`clippy::unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n\n---\n\nTable of contents:\n\n* [Usage instructions](#usage)\n* [Configuration](#configuration)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Usage\n\nBelow are instructions on how to use Clippy as a cargo subcommand,\nin projects that do not use cargo, or in Travis CI.\n\n### As a cargo subcommand (`cargo clippy`)\n\nOne way to use Clippy is by installing Clippy through rustup as a cargo\nsubcommand.\n\n#### Step 1: Install Rustup\n\nYou can install [Rustup](https://rustup.rs/) on supported platforms. This will help\nus install Clippy and its dependencies.\n\nIf you already have Rustup installed, update to ensure you have the latest\nRustup and compiler:\n\n```terminal\nrustup update\n```\n\n#### Step 2: Install Clippy\n\nOnce you have rustup and the latest stable release (at least Rust 1.29) installed, run the following command:\n\n```terminal\nrustup component add clippy\n```\n\nIf it says that it can't find the `clippy` component, please run `rustup self update`.\n\n#### Step 3: Run Clippy\n\nNow you can run Clippy by invoking the following command:\n\n```terminal\ncargo clippy\n```\n\n#### Automatically applying Clippy suggestions\n\nClippy can automatically apply some lint suggestions, just like the compiler. Note that `--fix` implies\n`--all-targets`, so it can fix as much code as it can.\n\n```terminal\ncargo clippy --fix\n```\n\n#### Workspaces\n\nAll the usual workspace options should work with Clippy. For example the following command\nwill run Clippy on the `example` crate:\n\n```terminal\ncargo clippy -p example\n```\n\nAs with `cargo check`, this includes dependencies that are members of the workspace, like path dependencies.\nIf you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n\n```terminal\ncargo clippy -p example -- --no-deps\n```\n\n### Using `clippy-driver`\n\nClippy can also be used in projects that do not use cargo. To do so, run `clippy-driver`\nwith the same arguments you use for `rustc`. For example:\n\n```terminal\nclippy-driver --edition 2018 -Cpanic=abort foo.rs\n```\n\nNote that `clippy-driver` is designed for running Clippy only and should not be used as a general\nreplacement for `rustc`. `clippy-driver` may produce artifacts that are not optimized as expected,\nfor example.\n\n### Travis CI\n\nYou can add Clippy to Travis CI in the same way you use it locally:\n\n```yaml\nlanguage: rust\nrust:\n  - stable\n  - beta\nbefore_script:\n  - rustup component add clippy\nscript:\n  - cargo clippy\n  # if you want the build job to fail when encountering warnings, use\n  - cargo clippy -- -D warnings\n  # in order to also check tests and non-default crate features, use\n  - cargo clippy --all-targets --all-features -- -D warnings\n  - cargo test\n  # etc.\n```\n\nNote that adding `-D warnings` will cause your build to fail if **any** warnings are found in your code.\nThat includes warnings found by rustc (e.g. `dead_code`, etc.). If you want to avoid this and only cause\nan error for Clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command\nline. (You can swap `clippy::all` with the specific lint category you are targeting.)\n\n## Configuration\n\n### Allowing/denying lints\n\nYou can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n\n* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n    Note that `rustc` has additional [lint groups](https://doc.rust-lang.org/rustc/lints/groups.html).\n\n* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n    `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n    lints prone to false positives.\n\n* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n\n* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n\nNote: `allow` means to suppress the lint for your code. With `warn` the lint\nwill only emit a warning, while with `deny` the lint will emit an error, when\ntriggering for your code. An error causes clippy to exit with an error code, so\nis useful in scripts like CI/CD.\n\nIf you do not want to include your lint levels in your code, you can globally\nenable/disable lints by passing extra flags to Clippy during the run:\n\nTo allow `lint_name`, run\n\n```terminal\ncargo clippy -- -A clippy::lint_name\n```\n\nAnd to warn on `lint_name`, run\n\n```terminal\ncargo clippy -- -W clippy::lint_name\n```\n\nThis also works with lint groups. For example, you\ncan run Clippy with warnings for all lints enabled:\n\n```terminal\ncargo clippy -- -W clippy::pedantic\n```\n\nIf you care only about a single lint, you can allow all others and then explicitly warn on\nthe lint(s) you are interested in:\n\n```terminal\ncargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n```\n\n### Configure the behavior of some lints\n\nSome lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable =\nvalue` mapping e.g.\n\n```toml\navoid-breaking-exported-api = false\ndisallowed-names = [\"toto\", \"tata\", \"titi\"]\n```\n\nThe [table of configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\ncontains all config values, their default, and a list of lints they affect.\nEach [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n, also contains information about these values.\n\nFor configurations that are a list type with default values such as\n[disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\nyou can use the unique value `\"..\"` to extend the default values instead of replacing them.\n\n```toml\n# default of disallowed-names is [\"foo\", \"baz\", \"quux\"]\ndisallowed-names = [\"bar\", \"..\"] # -> [\"bar\", \"foo\", \"baz\", \"quux\"]\n```\n\n> **Note**\n>\n> `clippy.toml` or `.clippy.toml` cannot be used to allow/deny lints.\n\nTo deactivate the \u201cfor further information visit *lint-link*\u201d message you can\ndefine the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n\n### Specifying the minimum supported Rust version\n\nProjects that intend to support old versions of Rust can disable lints pertaining to newer features by\nspecifying the minimum supported Rust version (MSRV) in the clippy configuration file.\n\n```toml\nmsrv = \"1.30.0\"\n```\n\nAlternatively, the [`rust-version` field](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field)\nin the `Cargo.toml` can be used.\n\n```toml\n# Cargo.toml\nrust-version = \"1.30\"\n```\n\nThe MSRV can also be specified as an attribute, like below.\n\n```rust,ignore\n#![feature(custom_inner_attributes)]\n#![clippy::msrv = \"1.30.0\"]\n\nfn main() {\n  ...\n}\n```\n\nYou can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\nis equivalent to `msrv = 1.30.0`.\n\nNote: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.\n\nLints that recognize this configuration option can be found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)\n\n## Contributing\n\nIf you want to contribute to Clippy, you can find more information in [CONTRIBUTING.md](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md).\n\n## License\n\n<!-- REUSE-IgnoreStart -->\n\nCopyright 2014-2024 The Rust Project Developers\n\nLicensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n[https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license\n<LICENSE-MIT or [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)>, at your\noption. Files in the project may not be\ncopied, modified, or distributed except according to those terms.\n\n<!-- REUSE-IgnoreEnd -->\n", "release_dates": []}, {"name": "rust-dbg-ext", "description": null, "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Debugging Extensions\n\nThis repository contains code related to the [async crashdump debugging initiative][initiative].\n\nInitially this repository will host three main projects:\n\n1. A framework for testing debugger extensions in a robust way\n2. A debugger extension for LLDB that provides support for debugging async Rust programs.\n3. Another debugger extension that does the same for WinDbg.\n\nThe code in this repository is currently considered [experimental] which means that it can change or become unmaintained at any time.\nIts main purpose is to enable gathering experience with different approaches for improving crash dump debugging of async Rust programs.\n\n[initiative]: https://github.com/rust-lang/async-crashdump-debugging-initiative\n[experimental]: https://github.com/rust-lang/rfcs/blob/master/text/3119-rust-crate-ownership.md#categories\n", "release_dates": []}, {"name": "rust-enhanced", "description": "The official Sublime Text 4 package for the Rust Programming Language", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Rust Enhanced\n\n## About\n\nRust Enhanced is a [Sublime Text](https://www.sublimetext.com/) package which adds extended support for the [Rust Programming Language](https://www.rust-lang.org/).\nThis is a replacement for the built-in \"Rust\" package and provides several extensions:\n\n* Enhanced syntax highlighting which handles more recent language changes and improved highlighting.\n* A custom build system with complete configuration of running Cargo and supporting Rust's extended error messages.\n* Automatic checking every time you save a file.\n* Custom highlighting for Cargo output.\n\n<img src=\"docs/src/images/running_tests.gif?raw=true\" alt=\"Running Tests with Rust Enhanced\" width=430 style=\"margin-right:10px\"> <img src=\"docs/src/images/showing_errors.gif?raw=true\" alt=\"Highlighting errors and warnings with Rust Enhanced\" width=430>\n\n## Installation and Usage\n\nSee the [**Rust Enhanced User Guide**](https://rust-lang.github.io/rust-enhanced/) for complete information on installing and using this package.\n\n## Contributing\n\nDevelopment is quite simple, first uninstall \"Rust Enhanced\" if you already have it installed.\nThen, check out this project to your Sublime Text `Packages` folder.\n\nSyntax definitions are defined in the [`RustEnhanced.sublime-syntax`](RustEnhanced.sublime-syntax) file, and syntax tests are in the [`tests/syntax-rust`](tests/syntax-rust) directory.\n\nThe [PackageDev](https://packagecontrol.io/packages/PackageDev) package is highly recommended for doing development.\n\n## Credits\n\nCreated 2012 by [Daniel Patterson](mailto:dbp@riseup.net), as a near complete from\nscratch rewrite of a package by [Felix Martini](https://github.com/fmartini).\n\nThis project is currently maintained by [Eric Huss](https://github.com/ehuss)\n\n## License\n\nThis package is licensed under the MIT License.\n", "release_dates": ["2023-12-11T18:20:50Z", "2023-09-11T15:31:56Z", "2022-03-19T18:59:39Z", "2021-05-21T22:51:50Z", "2020-12-29T22:55:03Z", "2020-04-01T21:46:06Z", "2019-09-30T21:02:33Z", "2019-05-29T16:55:49Z", "2019-02-05T22:08:30Z", "2018-09-23T20:40:02Z", "2018-09-19T18:43:06Z", "2018-08-31T15:37:12Z", "2018-08-31T15:49:49Z", "2018-07-30T13:43:28Z", "2018-07-16T14:14:26Z", "2018-07-12T12:17:35Z", "2018-07-10T12:23:38Z", "2018-07-09T11:34:45Z", "2018-07-09T11:13:31Z", "2018-06-23T12:50:51Z", "2018-06-05T23:25:34Z", "2018-05-05T21:36:38Z", "2018-04-22T11:24:41Z", "2018-03-02T11:20:03Z", "2018-02-10T16:01:01Z", "2018-01-28T20:48:20Z", "2018-01-27T17:52:35Z", "2018-01-06T13:42:40Z", "2017-12-19T20:11:01Z", "2017-12-04T18:24:32Z"]}, {"name": "rust-forge", "description": "Information useful to people contributing to Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Forge\n\nWelcome to the [Rust Forge]! Rust Forge serves as a repository of supplementary\ndocumentation useful for members of [The Rust Programming Language].\n\n[the rust programming language]: https://rust-lang.org\n[rust forge]: https://forge.rust-lang.org\n\n# Development\n\nYou can build a local version by installing [mdbook] and running the following command.\n\n```console\nmdbook build\n```\n\nThis will build and run the `blacksmith` tool automatically. When developing\nit's recommended to use the `serve` command to launch a local server to allow\nyou to easily see and update changes you make.\n\n[mdbook]: https://github.com/rust-lang/mdBook\n\n```console\nmdbook serve\n```\n\n## JavaScript\n\nForge uses JavaScript to display dates for releases and \"no tools breakage\nweek\". When making modifications to the JavaScript, make sure it matches the\n[standard] style. You can install `standard` and automatically format the code\nusing the following commands.\n\n[standard]: https://standardjs.com/index.html\n\n### Install commands\n\n```console\n# With Yarn\nyarn global add standard\n# With NPM\nnpm install --global standard\n```\n\n### Formatting\n\n```console\nstandard --fix js/\n```\n\n# Contributing\n\n## Adding teams\n\nAny Rust team, working group, or project group can have a section in the Rust Forge.\nFirst, please send a PR to add your team to the [`repos/rust-lang/rust-forge.toml`][team-repo] file to give your team permissions.\n\nTo add your team to the book, add it to [`src/SUMMARY.md`], like below, replacing `<TEAM_NAME>` with a filesystem- and URL-friendly version of your team's name:\n\n```markdown\n- [<TEAM NAME>](src/<TEAM_NAME>/README.md)\n```\n\nIf you run `mdbook build`, `mdbook` will automatically create the folder and file for your team.\n\nIt's recommended that you put general team information in `src/<TEAM_NAME>/README.md`, such as where the meetings happen, repositories that the team manages, links to chat platforms, etc. Larger topics should be made as a subpage, e.g. (`src/release/topic.md`).\n\n```markdown\n- [TOPIC](src/<TEAM_NAME>/TOPIC.md)\n```\n\nTeams are responsible for merging their own content.\nPlease add your team to the `[assign.owners]` section of [`triagebot.toml`] so that the bot will auto-assign someone from the team.\n\n[team-repo]: https://github.com/rust-lang/team/blob/master/repos/rust-lang/rust-forge.toml\n[`src/SUMMARY.md`]: https://github.com/rust-lang/rust-forge/blob/master/src/SUMMARY.md\n[`triagebot.toml`]: https://github.com/rust-lang/rust-forge/blob/master/triagebot.toml\n\n## Maintenance of Rust Forge\n\nThe [Rust infra team] is responsible for maintaining the Rust Forge, ensuring that its build and publish system works, and coordinating any technical issues with teams.\n\n[Rust infra team]: https://www.rust-lang.org/governance/teams/infra\n", "release_dates": []}, {"name": "rust-gha", "description": "GitHub Actions tests for rust-lang/rust", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# The Rust Programming Language\n\nThis is the main source code repository for [Rust]. It contains the compiler,\nstandard library, and documentation.\n\n[Rust]: https://www.rust-lang.org\n\n## Quick Start\n\nRead [\"Installation\"] from [The Book].\n\n[\"Installation\"]: https://doc.rust-lang.org/book/ch01-01-installation.html\n[The Book]: https://doc.rust-lang.org/book/index.html\n\n## Installing from Source\n\n_Note: If you wish to contribute to the compiler, you should read [this\nchapter][rustcguidebuild] of the rustc-guide instead of this section._\n\nThe Rust build system has a Python script called `x.py` to bootstrap building\nthe compiler. More information about it may be found by running `./x.py --help`\nor reading the [rustc guide][rustcguidebuild].\n\n[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/building/how-to-build-and-run.html\n\n### Building on *nix\n1. Make sure you have installed the dependencies:\n\n   * `g++` 5.1 or later or `clang++` 3.5 or later\n   * `python` 2.7 (but not 3.x)\n   * GNU `make` 3.81 or later\n   * `cmake` 3.4.3 or later\n   * `curl`\n   * `git`\n   * `ssl` which comes in `libssl-dev` or `openssl-devel`\n   * `pkg-config` if you are compiling on Linux and targeting Linux\n\n2. Clone the [source] with `git`:\n\n   ```sh\n   $ git clone https://github.com/rust-lang/rust.git\n   $ cd rust\n   ```\n\n[source]: https://github.com/rust-lang/rust\n\n3. Configure the build settings:\n\n    The Rust build system uses a file named `config.toml` in the root of the\n    source tree to determine various configuration settings for the build.\n    Copy the default `config.toml.example` to `config.toml` to get started.\n\n    ```sh\n    $ cp config.toml.example config.toml\n    ```\n\n    It is recommended that if you plan to use the Rust build system to create\n    an installation (using `./x.py install`) that you set the `prefix` value\n    in the `[install]` section to a directory that you have write permissions.\n\n    Create install directory if you are not installing in default directory\n\n4. Build and install:\n\n    ```sh\n    $ ./x.py build && ./x.py install\n    ```\n\n    When complete, `./x.py install` will place several programs into\n    `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n    API-documentation tool. This install does not include [Cargo],\n    Rust's package manager. To build and install Cargo, you may\n    run `./x.py install cargo` or set the `build.extended` key in\n    `config.toml` to `true` to build and install all tools.\n\n[Cargo]: https://github.com/rust-lang/cargo\n\n### Building on Windows\n\nThere are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\nVisual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust\nyou need depends largely on what C/C++ libraries you want to interoperate with:\nfor interop with software produced by Visual Studio use the MSVC build of Rust;\nfor interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU\nbuild.\n\n#### MinGW\n\n[MSYS2][msys2] can be used to easily build Rust on Windows:\n\n[msys2]: https://msys2.github.io/\n\n1. Grab the latest [MSYS2 installer][msys2] and go through the installer.\n\n2. Run `mingw32_shell.bat` or `mingw64_shell.bat` from wherever you installed\n   MSYS2 (i.e. `C:\\msys64`), depending on whether you want 32-bit or 64-bit\n   Rust. (As of the latest version of MSYS2 you have to run `msys2_shell.cmd\n   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead)\n\n3. From this terminal, install the required tools:\n\n   ```sh\n   # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n   $ pacman -Sy pacman-mirrors\n\n   # Install build tools needed for Rust. If you're building a 32-bit compiler,\n   # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n   # or CMake installed and in PATH you can remove them from this list. Note\n   # that it is important that you do **not** use the 'python2' and 'cmake'\n   # packages from the 'msys2' subsystem. The build has historically been known\n   # to fail with these packages.\n   $ pacman -S git \\\n               make \\\n               diffutils \\\n               tar \\\n               mingw-w64-x86_64-python2 \\\n               mingw-w64-x86_64-cmake \\\n               mingw-w64-x86_64-gcc\n   ```\n\n4. Navigate to Rust's source code (or clone it), then build it:\n\n   ```sh\n   $ ./x.py build && ./x.py install\n   ```\n\n#### MSVC\n\nMSVC builds of Rust additionally require an installation of Visual Studio 2017\n(or later) so `rustc` can use its linker.  The simplest way is to get the\n[Visual Studio], check the \u201cC++ build tools\u201d and \u201cWindows 10 SDK\u201d workload.\n\n[Visual Studio]: https://visualstudio.microsoft.com/downloads/\n\n(If you're installing cmake yourself, be careful that \u201cC++ CMake tools for\nWindows\u201d doesn't get included under \u201cIndividual components\u201d.)\n\nWith these dependencies installed, you can build the compiler in a `cmd.exe`\nshell with:\n\n```sh\n> python x.py build\n```\n\nCurrently, building Rust only works with some known versions of Visual Studio. If\nyou have a more recent version installed the build system doesn't understand\nthen you may need to force rustbuild to use an older version. This can be done\nby manually calling the appropriate vcvars file before running the bootstrap.\n\n```batch\n> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n> python x.py build\n```\n\n### Building rustc with older host toolchains\nIt is still possible to build Rust with the older toolchain versions listed below, but only if the\nLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN option is set to true in the config.toml file.\n\n* Clang 3.1\n* Apple Clang 3.1\n* GCC 4.8\n* Visual Studio 2015 (Update 3)\n\nToolchain versions older than what is listed above cannot be used to build rustc.\n\n#### Specifying an ABI\n\nEach specific ABI can also be used from either environment (for example, using\nthe GNU ABI in PowerShell) by using an explicit build triple. The available\nWindows build triples are:\n- GNU ABI (using GCC)\n    - `i686-pc-windows-gnu`\n    - `x86_64-pc-windows-gnu`\n- The MSVC ABI\n    - `i686-pc-windows-msvc`\n    - `x86_64-pc-windows-msvc`\n\nThe build triple can be specified by either specifying `--build=<triple>` when\ninvoking `x.py` commands, or by copying the `config.toml` file (as described\nin [Installing From Source](#installing-from-source)), and modifying the\n`build` option under the `[build]` section.\n\n### Configure and Make\n\nWhile it's not the recommended build system, this project also provides a\nconfigure script and makefile (the latter of which just invokes `x.py`).\n\n```sh\n$ ./configure\n$ make && sudo make install\n```\n\nWhen using the configure script, the generated `config.mk` file may override the\n`config.toml` file. To go back to the `config.toml` file, delete the generated\n`config.mk` file.\n\n## Building Documentation\n\nIf you\u2019d like to build the documentation, it\u2019s almost the same:\n\n```sh\n$ ./x.py doc\n```\n\nThe generated documentation will appear under `doc` in the `build` directory for\nthe ABI used. I.e., if the ABI was `x86_64-pc-windows-msvc`, the directory will be\n`build\\x86_64-pc-windows-msvc\\doc`.\n\n## Notes\n\nSince the Rust compiler is written in Rust, it must be built by a\nprecompiled \"snapshot\" version of itself (made in an earlier stage of\ndevelopment). As such, source builds require a connection to the Internet, to\nfetch snapshots, and an OS that can execute the available snapshot binaries.\n\nSnapshot binaries are currently built and tested on several platforms:\n\n| Platform / Architecture    | x86 | x86_64 |\n|----------------------------|-----|--------|\n| Windows (7, 8, 10, ...)    | \u2713   | \u2713      |\n| Linux (2.6.18 or later)    | \u2713   | \u2713      |\n| macOS (10.7 Lion or later) | \u2713   | \u2713      |\n\nYou may find that other platforms work, but these are our officially\nsupported build environments that are most likely to work.\n\nThere is more advice about hacking on Rust in [CONTRIBUTING.md].\n\n[CONTRIBUTING.md]: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\n\n## Getting Help\n\nThe Rust community congregates in a few places:\n\n* [Stack Overflow] - Direct questions about using the language.\n* [users.rust-lang.org] - General discussion and broader questions.\n* [/r/rust] - News and general discussion.\n\n[Stack Overflow]: https://stackoverflow.com/questions/tagged/rust\n[/r/rust]: https://reddit.com/r/rust\n[users.rust-lang.org]: https://users.rust-lang.org/\n\n## Contributing\n\nTo contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n\nMost real-time collaboration happens in a variety of channels on the\n[Rust Discord server][rust-discord], with channels dedicated for getting help,\ncommunity, documentation, and all major contribution areas in the Rust ecosystem.\nA good place to ask for help would be the #help channel.\n\nThe [rustc guide] might be a good place to start if you want to find out how\nvarious parts of the compiler work.\n\nAlso, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n\n[rust-discord]: https://discord.gg/rust-lang\n[rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n[rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n\n## License\n\nRust is primarily distributed under the terms of both the MIT license\nand the Apache License (Version 2.0), with portions covered by various\nBSD-like licenses.\n\nSee [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n[COPYRIGHT](COPYRIGHT) for details.\n\n## Trademark\n\nThe Rust programming language is an open source, community project governed\nby a core team. It is also sponsored by the Mozilla Foundation (\u201cMozilla\u201d),\nwhich owns and protects the Rust and Cargo trademarks and logos\n(the \u201cRust Trademarks\u201d).\n\nIf you want to use these names or brands, please read the [media guide][media-guide].\n\nThird-party logos may be subject to third-party copyrights and trademarks. See\n[Licenses][policies-licenses] for details.\n\n[media-guide]: https://www.rust-lang.org/policies/media-guide\n[policies-licenses]: https://www.rust-lang.org/policies/licenses\n", "release_dates": []}, {"name": "rust-guidelines", "description": "This repository has moved", "language": null, "license": null, "readme": "# THIS REPOSITORY HAS DISCONTINUED\n\nPlease see the new [fmt-rfcs](https://github.com/rust-lang-nursery/fmt-rfcs) repository.\n", "release_dates": []}, {"name": "rust-installer", "description": "The Bourne shell installer used by Rust and Cargo", "language": "Shell", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![Build Status](https://travis-ci.org/rust-lang/rust-installer.svg?branch=master)](https://travis-ci.org/rust-lang/rust-installer)\n\nA generator for the install.sh script commonly used to install Rust in\nUnix environments. It is used By Rust, Cargo, and is intended to be\nused by a future combined installer of Rust + Cargo.\n\n# Usage\n\n```\n./gen-installer.sh --product-name=Rust \\\n                   --rel-manifest-dir=rustlib \\\n                   --success-message=Rust-is-ready-to-roll. \\\n                   --image-dir=./install-image \\\n                   --work-dir=./temp \\\n                   --output-dir=./dist \\\n                   --non-installed-overlay=./overlay \\\n                   --package-name=rustc-nightly-i686-apple-darwin \\\n                   --component-name=rustc \\\n                   --legacy-manifest-dirs=rustlib \\\n                   --bulk-dirs=share/doc\n```\n\nOr, to just generate the script.\n\n```\n./gen-install-script.sh --product-name=Rust \\\n                        --rel-manifest-dir=rustlib \\\n                        --success-message=Rust-is-ready-to-roll. \\\n                        --output-script=install.sh \\\n                        --legacy-manifest-dirs=rustlib\n```\n\n*Note: the dashes in `success-message` are converted to spaces. The\nscript's argument handling is broken with spaces.*\n\nTo combine installers.\n\n```\n./combine-installers.sh --product-name=Rust \\\n                        --rel-manifest-dir=rustlib \\\n                        --success-message=Rust-is-ready-to-roll. \\\n                        --work-dir=./temp \\\n                        --output-dir=./dist \\\n                        --non-installed-overlay=./overlay \\\n                        --package-name=rustc-nightly-i686-apple-darwin \\\n                        --legacy-manifest-dirs=rustlib \\\n                        --input-tarballs=./rustc.tar.gz,cargo.tar.gz\n```\n\n# Future work\n\n* Make install.sh not have to be customized, pull it's data from a\n  config file.\n* Be more resiliant to installation failures, particularly if the disk\n  is full.\n* Pre-install and post-uninstall scripts.\n* Allow components to depend on or contradict other components.\n* Sanity check that expected destination dirs (bin, lib, share exist)?\n* Add --docdir flag. Is there a standard name for this?\n* Remove empty directories on uninstall.\n* Detect mismatches in --prefix, --mandir, etc. in follow-on\n  installs/uninstalls.\n* Fix argument handling for spaces.\n* Add --bindir.\n\n# License\n\nThis software is distributed under the terms of both the MIT license\nand/or the Apache License (Version 2.0), at your option.\n\nSee [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT) for details.\n", "release_dates": []}, {"name": "rust-lang.github.io", "description": "GitHub Pages redirects", "language": "HTML", "license": null, "readme": null, "release_dates": []}, {"name": "rust-log-analyzer", "description": "Analyzing Travis and Azure Pipelines logs to find encountered errors", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": []}, {"name": "rust-marketing", "description": "Rust marketing handbook", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": []}, {"name": "rust-memory-model", "description": "Collecting examples and information to help design a memory model for Rust.", "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "This repository is **deprecated** and the content is being triaged to move to the\nnew location.  For the current discussions and issues, please head to the\n[Unsafe Code Guidelines repository](https://github.com/rust-lang/unsafe-code-guidelines).\n\n# OLD README\n\nThis repository is intended to help us develop a coherent and clear\nset of \"unsafe code guidelines\" for Rust. The goal of these guidelines\nis to make it clear what kinds of actions unsafe can legally take\nand what it cannot.\n\nA crucial part (but not the only part) of these guidelines\nis a \"memory model\" that tries to define what kind of aliasing\nand accesses unsafe code can perform (this in turn implies\nlimitations on the transformations and optimizations the compiler can do).\n\nWe're still in the 'data gathering' stage of this effort. Most of the action\nis taking place in the GitHub issues attached to this repository.\n\nThere are issues that describe numerous kinds of things, tagged with K- labels:\n\n- `K-Model`: indicates a proposed \"high-level model\" for some aspect of unsafe code. Basically a set of rules that declares what is legal and not.\n- `K-Code-Example`: some code that may or may not be legal when evaluated against a particular model\n- `K-Optimization`: something the compiler may or may not be able to do when evaluated against a particular model\n- `K-Task`: something that we have to do, such as investigating certain things and creating new issues if necessary\n- `K-Related-Work`: a concise summary of some bit of related work, with links to learn more\n\n### Files\n\nThe files in the repository are from a somewhat older phase and ought to be migrated to issues. =)\n\n### Contributions\n\nAll the contents of this repository are licensed under the same terms as the Rust source itself (MIT/Apache2). Participation in the repository is assumed to imply agreement with these terms.\n", "release_dates": []}, {"name": "rust-mode", "description": "Emacs configuration for Rust", "language": "Emacs Lisp", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rust-mode\n\n[![NonGNU ELPA](https://elpa.nongnu.org/nongnu/rust-mode.svg)](https://elpa.nongnu.org/nongnu/rust-mode.html)\n[![MELPA](https://melpa.org/packages/rust-mode-badge.svg)](https://melpa.org/#/rust-mode)\n[![](https://github.com/rust-lang/rust-mode/workflows/CI/badge.svg)](https://github.com/rust-lang/rust-mode/actions?query=workflow%3ACI)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [rust-mode](#rust-mode)\n    - [Introduction](#introduction)\n    - [Known issues](#known-issues)\n    - [Installation](#installation)\n        - [Melpa](#melpa)\n        - [Manual installation](#manual-installation)\n    - [Feature guide](#feature-guide)\n        - [Indentation](#indentation)\n        - [Code formatting](#code-formatting)\n        - [Prettifying](#prettifying)\n        - [Running / testing / compiling code](#running--testing--compiling-code)\n        - [Clippy](#clippy)\n        - [Easy insertion of dbg!](#easy-insertion-of-dbg)\n        - [More commands](#more-commands)\n    - [tree-sitter](#tree-sitter)\n    - [LSP](#lsp)\n        - [eglot](#eglot)\n        - [lsp-mode](#lsp-mode)\n    - [Auto-completion](#auto-completion)\n    - [Other recommended packages](#other-recommended-packages)\n        - [flycheck](#flycheck)\n        - [cargo.el](#cargoel)\n        - [cargo-mode](#cargo-mode)\n        - [rustic](#rustic)\n    - [Optional features](#optional-features)\n    - [For package maintainers](#for-package-maintainers)\n        - [Tests](#tests)\n    - [Contributing](#contributing)\n\n<!-- markdown-toc end -->\n\n## Introduction\n\n`rust-mode` makes editing [Rust](http://rust-lang.org) code with Emacs\nenjoyable. It requires Emacs 25 or later, and is included in both\n[Emacs Prelude](https://github.com/bbatsov/prelude) and\n[Spacemacs](https://github.com/syl20bnr/spacemacs) by default.\n\nThis mode provides:\n- Syntax highlighting (for Font Lock Mode)\n- Indentation\n- Integration with Cargo, clippy and rustfmt\n\nThis mode does _not_ provide auto completion, or jumping to function /\ntrait definitions. See [Auto-completion](#auto-completion) below for tips on how\nto enable this.\n\nIf you are missing features in rust-mode, please check out\n[rustic](https://github.com/brotzeit/rustic) before you open a feature\nrequest. It depends on rust-mode and provides additional features. This\nallows us to keep rust-mode light-weight for users that are happy with\nbasic functionality.\n\n## Known issues\n\n- `rust-syntax-propertize` and `adaptive-wrap-prefix-mode` can lead to\n  severe lag when editing larger files\n  (https://github.com/brotzeit/rustic/issues/107)\n\n## Installation\n\n### Melpa\n\nThe package is available on MELPA. Add this to your init.el.\n\n``` elisp\n(require 'package)\n(add-to-list 'package-archives\n             '(\"melpa\" . \"https://melpa.org/packages/\") t)\n(package-initialize)\n(package-refresh-contents)\n```\n\nNow you can install `rust-mode` with:\n\n`M-x package-install rust-mode`\n\nAnd put this in your config to load rust-mode automatically:\n\n`(require 'rust-mode)`\n\n### NonGNU ELPA\n\n[NonGNU ELPA](https://elpa.nongnu.org/) can be used out of the box in\nemacs28.\n\nFor older versions you need to add something like the following to\nyour init file:\n\n``` elisp\n(with-eval-after-load 'package (add-to-list 'package-archives '(\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")))\n```\n\n### Manual installation\n\nClone this repository locally, and add this to your init.el:\n\n``` elisp\n(add-to-list 'load-path \"/path/to/rust-mode/\")\n(autoload 'rust-mode \"rust-mode\" nil t)\n(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode))\n```\n\n## Feature guide\n\n### Indentation\n\nCommands like <kbd>TAB</kbd> should indent correctly.\n\nThe Rust style guide recommends spaces rather than tabs for\nindentation; to follow the recommendation add this to your init.el,\nwhich forces indentation to always use spaces.\n\n```elisp\n(add-hook 'rust-mode-hook\n          (lambda () (setq indent-tabs-mode nil)))\n```\n\nSince Emacs \u2265 24.4, [`electric-indent-mode`][] is turned on by\ndefault. If you do not like it, call `(electric-indent-mode 0)` in\n`rust-mode-hook`.\n\n[`electric-indent-mode`]: https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html\n\n### Code formatting\n\nThe `rust-format-buffer` function will format your code with\n[rustfmt](https://github.com/rust-lang/rustfmt) if installed. By\ndefault, this is bound to <kbd>C-c C-f</kbd>.\n\nThe variable `rust-format-on-save` enables automatic formatting on\nsave. For example, add the following in your init.el to enable format\non save:\n\n``` elisp\n(setq rust-format-on-save t)\n```\n\n### Prettifying\n\nYou can toggle prettification of your code by running `M-x\nprettify-symbols-mode`.  If you'd like to automatically enable this\nfor all rust files, add the following to your init.el.\n\n```elisp\n(add-hook 'rust-mode-hook\n          (lambda () (prettify-symbols-mode)))\n```\n\nYou can add your own prettifications to `rust-prettify-symbols-alist`.\nFor example, to display `x.add(y)` as `x\u2214(y)`, simply add to your init\nfile `(push '(\".add\" . ?\u2214) rust-prettify-symbols-alist)`.\n\n### Running / testing / compiling code\n\nThe `rust-run`, `rust-test`, `rust-compile` and `rust-check` functions\nshell out to Cargo to run, test, build and check your code. Under the\nhood, these use the standard Emacs `compile` function.\n\nBy default these are bound to:\n\n- <kbd>C-c C-c C-u</kbd> `rust-compile`\n- <kbd>C-c C-c C-k</kbd> `rust-check`\n- <kbd>C-c C-c C-t</kbd> `rust-test`\n- <kbd>C-c C-c C-r</kbd> `rust-run`\n\n### Clippy\n\n`rust-run-clippy` runs\n[Clippy](https://github.com/rust-lang/rust-clippy), a linter. By\ndefault, this is bound to <kbd>C-c C-c C-l</kbd>.\n\n### Easy insertion of dbg!\n\n`rust-dbg-wrap-or-unwrap` either wraps or unwraps the current region\nin `dbg!`. This can be useful for easily adding debug lines to your\nprogram.\n\nThis is bound to <kbd>C-c C-d</kbd> by default.\n\n### More commands\n\n- `rust-toggle-mutability` toggle mut for var defined at current line\n\n## tree-sitter\n\nYou can try the new native treesitter mode `rust-ts-mode` with:\n\n```elisp\n(use-package rust-mode\n  :init\n  (setq rust-mode-treesitter-derive t))\n```\n\nIn case you want to use treesitter but can't use Emacs 29.1, you can\ntake a look at\n[tree-sitter](https://github.com/emacs-tree-sitter/elisp-tree-sitter). When\nthe dependencies are installed you can activate the feature with:\n\n```elisp\n(use-package tree-sitter\n  :config\n  (require 'tree-sitter-langs)\n  (global-tree-sitter-mode)\n  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))\n```\n\n## LSP\n\n### eglot\n\nA lightweight lsp client.\n\n```elisp\n(add-hook 'rust-mode-hook 'eglot-ensure)\n```\n\n### lsp-mode\n\nProvides more features and you can enhance the functionality\nby using additional packages. You can find more information in the\n[lsp-mode wiki](https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs).\n\n```elisp\n(add-hook 'rust-mode-hook #'lsp)\n```\n\n## Auto-completion\n\nYou can either use a lsp client or [racer](https://github.com/racer-rust/racer)\nwith [emacs-racer](https://github.com/racer-rust/emacs-racer#installation).\n\nNote that racer and rls are considered deprecated. You should use rust-analyzer\ninstead.\n\n## Other recommended packages\n\n### flycheck\n\n[flycheck](https://github.com/flycheck/flycheck) allows highlighting\ncompile errors and Clippy lints inline.\n\n### cargo.el\n\n[cargo.el](https://github.com/kwrooijen/cargo.el) provides a minor\nmode for integration with Cargo, Rust's package manager.\n\n### cargo-mode\n\n[cargo-mode](https://github.com/ayrat555/cargo-mode) is an Emacs minor\nmode which allows to dynamically select a Cargo command. The reasons\nbehind this package can be found in [the\npost](https://www.badykov.com/emacs/2021/05/29/emacs-cargo-mode/).\n\n### rustic\n\n[rustic](https://github.com/brotzeit/rustic) is based on rust-mode,\nextending it with other features such as integration with LSP and with\nflycheck.\n\n## Optional features\n\nThe features of the following files can be disabled with `rust-load-optional-libraries`.\n\n- rust-cargo.el\n- rust-compile.el\n- rust-playpen.el\n- rust-rustfmt.el\n\nThey are disabled by default when you use rustic as it has its own implementations\nfor those features.\n\n## Customization\n\n`rust-cargo-default-arguments` set additional cargo args used for check,compile,run,test\n\n## For package maintainers\n\n### Tests\n\nRun elisp tests:\n\n``` bash\nmake test\n```\n\n## Contributing\n\nContributions are very welcome. We are also looking for additional maintainers.\n", "release_dates": ["2022-06-26T11:26:19Z", "2022-02-17T20:09:53Z", "2021-12-18T15:43:00Z", "2021-10-29T10:31:18Z", "2021-10-16T18:17:46Z", "2019-03-04T14:16:10Z", "2016-11-01T04:10:54Z"]}, {"name": "rust-playground", "description": "The Rust Playground", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Playground\n\nThis is the home of the [Rust Playground][real],\nalso [hosted by Integer 32][us].\n\n[real]: https://play.rust-lang.org/\n[us]: https://play.integer32.com/\n\n## What's it do?\n\nThe playground allows you to experiment with Rust before you install\nit locally, or in any other case where you might not have the compiler\navailable.\n\nIt has a number of features, including:\n\n1. A nice, unobtrusive editor with syntax highlighting.\n1. The ability to compile in debug or release mode against the current\n   stable, beta, or nightly version of Rust.\n1. The top 100 popular crates (ranked by all-time downloads), crates\n   that are part of the [Rust Cookbook][] and all of their\n   dependencies are available for use!\n1. The ability to quickly load and save your code to a\n   GitHub [Gist][gist] and share it with your friends.\n1. [rustfmt][] and [Clippy][clippy] can be run against the source code.\n1. The ability to see the LLVM IR, assembly, or Rust MIR for the\n   source code.\n\n[Rust Cookbook]: https://rust-lang-nursery.github.io/rust-cookbook/\n[gist]: https://gist.github.com/\n[rustfmt]: https://github.com/rust-lang/rustfmt\n[clippy]: https://github.com/rust-lang/rust-clippy\n\n## Architecture\n\nA [React][react] frontend communicates with an [Axum][axum]\nbackend. [Docker][docker] containers are used to provide the various\ncompilers and tools as well as to help isolate them.\n\nWe hope that this frontend and backend stack is comfortable to\npotential contributors! If you are interested in contributing, please\nfeel free to ask a question and we might even be able to point out\nsome useful resources.\n\n[react]: https://reactjs.org/\n[axum]: https://github.com/tokio-rs/axum\n[docker]: https://www.docker.com/\n\n## Resource Limits\n\n### Network\n\nThere is no network connection between the compiler container and the\noutside world.\n\n### Memory\n\nThe amount of memory the compiler and resulting executable use is\nlimited by the container.\n\n### Execution Time\n\nThe total compilation and execution time is limited by the container.\n\n### Disk\n\nThis sandbox **does not** provide any disk space limits. It is\nsuggested to run the server such that the temp directory is a\nspace-limited. One bad actor may fill up this shared space, but it\nshould be cleaned when that request ends.\n\n## Security Hall of Fame\n\nA large set of thanks go to those individuals who have helped by\nreporting security holes or other attack vectors against the\nPlayground. Each report helps us make the Playground better!\n\n* Preliminary sandbox testing (PID limit) by Stefan O'Rear.\n\nIf you'd like to perform tests that you think might disrupt service of\nthe Playground, get in touch and we can create an isolated clone to\nperform tests on! Once fixed, you can choose to be credited here.\n\n## Development\n\n### Build the UI\n```\ncd ui/frontend\npnpm install\npnpm watch # Will rebuild and watch for changes\n```\n\nIf you don't need the backend running because you are only making\nbasic HTML/CSS/JS changes, directly open in your browser the built\n`ui/frontend/build/index.html`.\n\n### Build and run the server\n\n```\ncd ui\ncargo run\n```\n\nThere are some optional configuration parameters described in the\n[ui README](./ui/README.md) which you may set in a `.env` file. The server will\nrun with no configuration, but in order to load and save gists a GitHub token\nmust be configured.\n\n### Build or download the containers\n```\ncd compiler\n./build.sh # If you want to test changes to the containers\n./fetch.sh # If you just want the current playground\n```\n\n## Deployment\n\n* [Amazon EC2 (Ubuntu)](deployment/ubuntu.md)\n\n## License\n\nLicensed under either of\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\nat your option.\n", "release_dates": []}, {"name": "rust-playpen", "description": "A web interface for running Rust code", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "***Note:*** This project is deprecated.  To report issues about the playground\nhosted at <https://play.rust-lang.org/>, check out the\n[next-gen playpen](https://github.com/integer32llc/rust-playground/).\n\n# Old README\n\nA web interface for running Rust code.\n\nThe interface can also be accessed in most Rust-related channels on\n`irc.mozilla.org`.\n\nTo use Playbot in a public channel, address your message to it.\n\n    <you> playbot: println!(\"Hello, World\");\n    -playbot:#rust-offtopic- Hello, World\n    -playbot:#rust-offtopic- ()\n    <you> playbot: 1+2+3\n    -playbot:#rust-offtopic- 6\n\nYou can also private message Playbot your code to have it evaluated. In a\nprivate message, don't preface the code with playbot's nickname:\n\n    /msg playbot println!(\"Hello, World\");\n\n# Running your own Rust-Playpen\n\n## System Requirements\n\nCurrently needs to be run on a system with access to Docker.\n\n## Running the web server\n\nFirst, create the Docker images that playpen will use:\n\n```\nsh docker/build.sh\n```\n\nNext, spin up the server.\n\n```\ncargo run --bin playpen\n```\n\nYou should now be able to browse http://127.0.0.1:8080 and interact.\n\n## IRC Bot Setup\n\nYou'll need to move `playbot.toml.example` to `playbot.toml` and then configure\nit appropriately.\n\n# Setting up the play.rust-lang.org server\n\nFirst off, start off with a fresh Ubuntu AMI. These should be listed on\nhttps://cloud-images.ubuntu.com/locator/ec2/, and the current one is the Xenial\nus-west-1 64-bit hvm ebs-ssd server, ami-08490c68.\n\n* Launch an m3.medium instance\n* Launch into EC2-Classic\n* Protect against accidental termination\n* Make the disk ~100GB\n* Use the existing playground security group\n\nSSH through the bastion, then:\n\n```\nsudo apt-get update\nsudo apt-get install python-pip apt-transport-https ca-certificates libssl-dev pkg-config\nsudo pip install pygments\n\ncurl https://sh.rustup.rs | sh\ngit clone https://github.com/rust-lang/rust-playpen\n\n# see https://docs.docker.com/engine/installation/linux/ubuntulinux/\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho 'deb https://apt.dockerproject.org/repo ubuntu-xenial main' | sudo tee /etc/apt/sources.list.d/docker.list\nsudo apt-get update\nsudo apt-get install linux-image-extra-$(uname -r) docker-engine\nsudo service docker start\nsudo usermod -aG docker ubuntu\n```\n\nNext, configure `playbot.toml` copied from `playbot.toml.example`.\n\nNext, open up a screen window (`screen -R`), and spin up two sessions:\n\n```\ncargo build --release --bin playpen && RUST_LOG=debug ./target/release/playpen 0.0.0.0 2>&1 | logger -t playpen\n```\n\n```\ncargo build --release --bin playbot && RUST_LOG=debug ./target/release/playbot 2>&1 | logger -t playbot\n```\n\nAdd a cron job to update the containers daily, currently:\n\n```\n0 10 * * * cd $HOME/rust-playpen && sh docker/build.sh 2>&1 | logger -t playpen-update\n```\n", "release_dates": []}, {"name": "rust-reach-www", "description": "the website for the rust reach program", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rust-reach-www\nthe website for the rust reach program\n", "release_dates": []}, {"name": "rust-repos", "description": "Dataset of Rust source code repositories", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Rust repositories list\n\nThis repository contains a scraped list of all the public GitHub repos with source code\nwritten in the [Rust programming language][rust]. The source code for the scraper is\nalso included.\n\nEverything in this repository, unless otherwise specified, is released under\nthe MIT license.\n\n[rust]: https://www.rust-lang.org\n\n## Running the scraper\n\nTo run the scraper, execute the program with the `GITHUB_TOKEN` environment\nvariable (containing a valid GitHub API token -- no permissions are required)\nand the data directory as the first argument:\n\n```\n$ GITHUB_TOKEN=foobar cargo run --release -- data\n```\n\nThe scraper automatically saves its state to disk, so it can be interrupted and\nit will resume where it left. This also allows incremental updates of the list.\n\n## Using the data\n\nThe data is available in the `data/github.csv` file, in CSV format. That file\ncontains the GitHub GraphQL ID of the repository, its name, and whether it\ncontains a `Cargo.toml` and `Cargo.lock`.\n\nAll the repositories contained in the dataset are marked as using the language\nby GitHub. Some results might be inaccurate for this reason.\n", "release_dates": []}, {"name": "rust-roadmap-2017", "description": "Tracking Rust's roadmap", "language": null, "license": null, "readme": "## Rust 2017 Roadmap\n\nAs part of [RFC 1728](https://github.com/rust-lang/rfcs/pull/1728), each year\nthe Rust community puts together a *roadmap* laying out a vision for\nimprovements to Rust over the course of the year. The 2017 roadmap was decided\nin [RFC 1774](https://github.com/rust-lang/rfcs/pull/1774).\n\nThe issues in this repository track the progress on our 2017 roadmap.\n\n**Only Rust subteam members should create new issues in this repo**. If you\nbelieve a project should be added within the tracker, please leave a comment on\nthe appropriate \"parent\" issue, i.e. one of the issues linked below. And in\ngeneral, feel free to use comments to ask questions, pitch ideas, or mention\nupdates that need to be made!\n\nThere are issues for each of the vision statements:\n\n* [Rust should have a lower learning curve](https://github.com/aturon/rust-roadmap/issues/3)\n* [Rust should have a pleasant edit-compile-debug cycle](https://github.com/aturon/rust-roadmap/issues/1)\n* [Rust should provide a solid, but basic IDE experience](https://github.com/aturon/rust-roadmap/issues/2)\n* [Rust should provide easy access to high quality crates](https://github.com/aturon/rust-roadmap/issues/9)\n* [Rust should be well-equipped for writing robust, high-scale servers](https://github.com/aturon/rust-roadmap/issues/10)\n* [Rust should have 1.0-level crates for essential tasks](https://github.com/aturon/rust-roadmap/issues/11)\n* [Rust should integrate easily into large build systems](https://github.com/aturon/rust-roadmap/issues/12)\n* [Rust's community should provide mentoring at all levels](https://github.com/aturon/rust-roadmap/issues/13)\n\nand for our two areas of exploration:\n\n* [Integration with other languages, running the gamut from C to JavaScript](https://github.com/aturon/rust-roadmap/issues/14)\n* [Usage in resource-constrained environments](https://github.com/aturon/rust-roadmap/issues/15)\n\nEach of the above issues link to a number of other *project* issues, which give\npoints of contact and other information about the status of specific projects\nworking to achieve one of our goals. You can see the list of all projects [here](https://github.com/aturon/rust-roadmap/issues?q=is%3Aissue+is%3Aopen+label%3AProject).\n\nFinally, each subteam has a dedicated roadmap issue, spelling out areas of\nactivity beyond those included in the formal Rust roadmap:\n\n- [Lang team](https://github.com/aturon/rust-roadmap/issues/18)\n- [Libs team](https://github.com/aturon/rust-roadmap/issues/19)\n- [Compiler team](https://github.com/aturon/rust-roadmap/issues/21)\n- [Community team](https://github.com/aturon/rust-roadmap/issues/22)\n- [Docs team](https://github.com/aturon/rust-roadmap/issues/20)\n- [Tools team](https://github.com/aturon/rust-roadmap/issues/23)\n\n## Roadmap rationale\n\nThe full rationale for the roadmap is spelled out in\n[RFC 1774](https://github.com/rust-lang/rfcs/pull/1774), but we'll recap the\nhigh-level framing here.\n\nThere's no end of possible improvements to Rust\u2014so what do we use to guide our\nthinking?\n\nThe core team has tended to view our strategy not in terms of particular features or\naesthetic goals, but instead in terms of **making Rust successful while staying\ntrue to its core values**. This basic sentiment underlies much of the proposed\nroadmap, so let's unpack it a bit.\n\n### Making Rust successful\n\n#### The measure of success\n\nWhat does it mean for Rust to be successful? There are a lot of good answers to\nthis question, a lot of different things that draw people to use or contribute\nto Rust. But regardless of our *personal* values, there's at least one clear\nmeasure for Rust's broad success: **people should be using Rust in\nproduction and reaping clear benefits from doing so**.\n\n- Production use matters for the obvious reason: it grows the set of\n  stakeholders with potential to invest in the language and ecosystem. To\n  deliver on that potential, Rust needs to be part of the backbone of some major\n  products.\n\n- Production use measures our *design* success; it's the ultimate reality\n  check. Rust takes a unique stance on a number of tradeoffs, which we believe\n  to position it well for writing fast and reliable software. The real test of\n  those beliefs is people using Rust to build large, production systems, on\n  which they're betting time and money.\n\n- The *kind* of production use matters. For Rust to truly be a success, there\n  should be clear-cut reasons people are employing it rather than another\n  language. Rust needs to provide crisp, standout benefits to the organizations\n  using it.\n\nThe idea here is *not* about \"taking over the world\" with Rust; it's not about\nmarket share for the sake of market share. But if Rust is truly delivering a\nvaluable new way of programming, we should be seeing that benefit in \"the real\nworld\", in production uses that are significant enough to help sustain Rust's\ndevelopment.\n\nThat's not to say we should expect to see this usage *immediately*; there's a\nlong pipeline for technology adoption, so the effects of our work can take a\nwhile to appear. The framing here is about our long-term aims. We should be\nmaking investments in Rust today that will position it well for this kind of\nsuccess in the future.\n\n#### The obstacles to success\n\nAt this point, we have a fair amount of data about how Rust is reaching its\naudience, through the [2016 survey], informal conversations, and explicit\noutreach to (pre-)production shops (writeup coming soon). The data from the\nsurvey is generally corroborated by these other venues, so let's focus on that.\n\n[2016 survey]: https://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html\n\nWe asked both current and potential users what most stands in the way of their\nusing Rust, and got some pretty clear answers:\n\n- 1 in 4: learning curve\n- 1 in 7: lack of libraries\n- 1 in 9: general \u201cmaturity\u201d concerns\n- 1 in 19: lack of IDEs (1 in 4 non-users)\n- 1 in 20: compiler performance\n\nNone of these obstacles is directly about the core language or `std`; people are\ngenerally happy with what the language offers today. Instead, the connecting\ntheme is *productivity*\u2014how quickly can I start writing real code? bring up a\nteam? prototype and iterate? debug my code? And so on.\n\nIn other words, our primary challenge isn't making Rust \"better\" in the\nabstract; it's making people *productive* with Rust. The need is most pronounced\nin the early stages of Rust learning, where we risk losing a large pool of\ninterested people if we can't get them over the hump. Evidence from the survey\nand elsewhere suggests that once people do get over the initial learning curve,\nthey tend to stick around.\n\nSo how do we pull it off?\n\n#### Core values\n\nPart of what makes Rust so exciting is that it attempts to eliminate some\nseemingly fundamental tradeoffs. The central such tradeoff is between safety\nand speed. Rust strives for\n\n- uncompromising reliability\n- uncompromising performance\n\nand delivers on this goal largely thanks to its fundamental concept of\nownership.\n\nBut there's a problem: at first glance, \"productivity\" and \"learnability\" may\nseem at odds with Rust's core goals. It's common to hear the refrain that\n\"fighting with the borrow checker\" is a rite of passage for Rustaceans. Or that\nremoving papercuts would mean glossing over safety holes or performance cliffs.\n\nTo be sure, there are tradeoffs here. But as above, if there's one thing the\nRust community knows how to do, it's bending the curve around tradeoffs\u2014memory\nsafety without garbage collection, concurrency without data races, and all the\nrest. We have many examples in the language where we've managed to make a\nfeature pleasant to use, while also providing maximum performance and\nsafety\u2014closures are a particularly good example, but there are\n[others](https://internals.rust-lang.org/t/roadmap-2017-productivity-learning-curve-and-expressiveness/4097).\n\nAnd of course, beyond the core language, \"productivity\" also depends a lot on\ntooling and the ecosystem. Cargo is one example where Rust's tooling provides a\nhuge productivity boost, and we've been working hard on other aspects of\ntooling, like the\n[compiler's error messages](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html),\nthat likewise have a big impact on productivity. There's so much more we can be\ndoing in this space.\n\nIn short, **productivity should be a core value of Rust**. By the end of 2017,\nlet's try to earn the slogan:\n\n- Rust: fast, reliable, productive\u2014pick three.\n", "release_dates": []}, {"name": "rust-semverver", "description": "Automatic checking for semantic versioning in library crates", "language": "Rust", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# rust-semverver\n\n## Deprecation notice\n\nThis crate has been deprecated, check the crates below for alternatives:\n- https://github.com/obi1kenobi/cargo-semver-checks\n- https://github.com/Enselic/cargo-public-api\n\n---\n\n[![Build Status](https://github.com/rust-lang/rust-semverver/workflows/CI/badge.svg?branch=master)](https://github.com/rust-lang/rust-semverver/actions?query=workflow%3ACI+branch%3Amaster)\n[![Current Version](https://img.shields.io/crates/v/semverver.svg)](https://crates.io/crates/semverver)\n\n`rust-semverver` is a tool to check semver-compliance in Rust library crates. The core of\nthe tool has been developed as a student project during the Google Summer of Code 2017.\n\nDetails on the work done during GSoC 2017 can be found\n[here](https://github.com/rust-lang/rust-semverver/blob/master/doc/gsoc.md).\n\n## Background\n\nThe approach taken is to compile both versions of the crate to `rlib`s and to link them as\ndependencies of a third, empty, dummy crate. Then, a custom compiler driver is run on the\nsaid dummy and all necessary analysis is performed in that context, where type information\nand other resources are available.\n\nMore information on the inner workings of the tool can be found\n[here](https://github.com/rust-lang/rust-semverver/blob/master/doc/impl_notes.md).\n\n## Installation\n\nThe tool is implemented as a cargo plugin. As of now, it can be obtained from this git\nrepository and compiled from source or installed from\n[crates.io](https://crates.io/crates/semverver). Keep in mind that only the pinned version(in [rust-toolchain])\nof the nightly toolchain is supported at any given time.\n\n<!-- NOTE: Keep in sync with nightly date on rust-toolchain. -->\nIt's recommended to use `nightly-2022-08-03` toolchain.\nYou can install it by using `rustup install nightly-2022-08-03` if you already have rustup.\nThen you can do:\n\n```sh\n$ rustup component add rustc-dev llvm-tools-preview --toolchain nightly-2022-08-03\n$ cargo +nightly-2022-08-03 install --git https://github.com/rust-lang/rust-semverver\n```\n\nYou'd also need `cmake` for some dependencies, and a few common libraries (if you hit\nbuild failures because of missing system-wide dependencies, please open an issue, so they\ncan be added here).\n\n<details>\n\n<summary>\n  Manual installation and more details\n</summary>\n\n```sh\n$ git clone https://github.com/rust-lang/rust-semverver\n$ cd rust-semverver\n$ cargo install\n```\n\nAt this point, the current development version can be invoked using `cargo semver` in any\ndirectory your project resides in. If you prefer not to install to `~/.cargo/bin`, you can\ninvoke it like so after building with a regular `cargo build`:\n\n```sh\n$ PATH=/path/to/repo/target/debug:$PATH cargo semver <args>\n```\n\nIf you have built using `cargo build --release` instead, change the path to point to the\n`release` subdirectory of the `target` directory.\n\n</details>\n\n## Usage\n\nBy default, running `cargo semver` in directory with a Cargo project will try to compare\nthe local version to the one last published on crates.io, and display warnings or errors for\nall changes found.\n\nInvoking `cargo semver -h` gives you the latest help message, which outlines how to use\nthe cargo plugin:\n\n```sh\n$ cargo semver -h\nusage: cargo semver [options]\n\nOptions:\n    -h, --help          print this message and exit\n    -V, --version       print version information and exit\n    -e, --explain       print detailed error explanations\n    -q, --quiet         suppress regular cargo output, print only important\n                        messages\n        --show-public   print the public types in the current crate given by\n                        -c or -C and exit\n    -d, --debug         print command to debug and exit\n    -a, --api-guidelines\n                        report only changes that are breaking according to the\n                        API-guidelines\n        --features FEATURES\n                        Space-separated list of features to activate\n        --all-features  Activate all available features\n        --no-default-features\n                        Do not activate the `default` feature\n        --compact       Only output the suggested version on stdout for\n                        further processing\n    -j, --json          Output a JSON-formatted description of all collected\n                        data on stdout.\n    -s, --stable-path PATH\n                        use local path as stable/old crate\n    -c, --current-path PATH\n                        use local path as current/new crate\n    -S, --stable-pkg NAME:VERSION\n                        use a `name:version` string as stable/old crate\n    -C, --current-pkg NAME:VERSION\n                        use a `name:version` string as current/new crate\n        --target <TRIPLE>\n                        Build for the target triple\n```\n\nThis means that you can compare any two crates' specified versions, as long as they are\navailable on crates.io or present on your filesystem.\n\n### CI setup\n\nAssuming you use a CI provider that gives you access to cargo, you can use the following\nsnippet to check your build for semver compliance, and enforce that version bumps are\ncarried out correctly with regards to the current version of your crate on crates.io:\n\n```sh\n# install a current version of rust-semverver\ncargo +nightly-2022-08-03 install --git https://github.com/rust-lang/rust-semverver\n# fetch the version in the manifest of your crate (adapt this to your usecase if needed)\neval \"current_version=$(grep -e '^version = .*$' Cargo.toml | cut -d ' ' -f 3)\"\n# run the semver checks and output them for convenience\ncargo semver | tee semver_out\n# fail the build if necessary\n(head -n 1 semver_out | grep \"\\-> $current_version\") || (echo \"versioning mismatch\" && return 1)\n```\n\nMake sure you do the above with access to a nightly toolchain. Check your CI provider's\ndocumentation on how to do that.\n\n### JSON output\n\nBy passing the `-j` flag, all output on standard out is formatted as a machine-readable\nJSON blob. This can be useful for integration with other tools, and always generates all\npossible output (ignoring other output-related flags). The output format is defined as\nfollows:\n\nThe top level object contains the keys `old_version`, `new_version` and `changes`. The\nformer two hold a version number in the format `major.minor.patch`, the latter an object\ndescribing changes between the crate versions, which contains two arrays in the keys\n`path_changes` and `changes`.\n\nThe `path_changes` array contains objects describing item additions and removals, which\nhave the following keys:\n\n* `name`: The name of the item.\n* `def_span`: An object describing the location of the item in one of the crates.\n* `additions`: An array of spans that describe locations where the item has been added.\n* `removals`: An array of spans that describe locations where the item has been removed.\n\nAn example object might look like this:\n\n```json\n{\n  \"name\": \"NFT_META_CGROUP\",\n  \"def_span\": {\n    \"file\": \"/path/to/libc-0.2.48/src/unix/notbsd/linux/other/mod.rs\",\n    \"line_lo\": 776,\n    \"line_hi\": 776,\n    \"col_lo\": 0,\n    \"col_hi\": 40\n  },\n  \"additions\": [\n    {\n      \"file\": \"/path/to/libc-0.2.48/src/lib.rs\",\n      \"line_lo\": 195,\n      \"line_hi\": 195,\n      \"col_lo\": 16,\n      \"col_hi\": 23\n    }\n  ],\n  \"removals\": []\n}\n```\n\n\nThe `changes` array contains objects describing all other changes, which have the\nfollowing keys:\n\n* `name`: The name of the item\n* `max_category`: the most severe change category for this item, as a string.\n  * Possible values are `Patch`, `NonBreaking`, `TechnicallyBreaking`, and `Breaking`.\n* `new_span`: an object describing the location of the item in the new crate (see example).\n* `changes`: an array of 2-element sequences containing an error message and an optional\n  sub-span (`null` if none is present)\n\nAn example object might look like this:\n\n```json\n{\n  \"name\": \"<new::util::enumerate::Enumerate<T> as new::prelude::Stream>\",\n  \"max_category\": \"TechnicallyBreaking\",\n  \"new_span\": {\n    \"file\": \"/path/to/tokio-0.1.17/src/util/enumerate.rs\",\n    \"line_lo\": 46,\n    \"line_hi\": 63,\n    \"col_lo\": 0,\n    \"col_hi\": 1\n  },\n  \"changes\": [\n    [\n      \"trait impl generalized or newly added\",\n      null\n    ]\n  ]\n}\n```\n\nFor reference, all objects describing spans have the same keys:\n\n* `file`: A file name.\n* `line_lo`: The line the span starts on.\n* `line_hi`: The line the span ends on.\n* `col_lo`: The column the span starts on.\n* `col_hi`: The column the span ends on.\n\n## Functionality\n\nThe guideline used to implement semver compatibility is the [API evolution\nRFC](https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md), which\napplies the principles of semantic versioning to the Rust language's semantics. According\nto the RFC, most changes are already recognized correctly, even though some type checks\nstill behave incorrectly in edge-cases. A longterm goal is to fix this in the compiler.\n\nAt the time of writing, the following types of changes are recognized and classified\ncorrectly:\n\n* items moving from `pub` to non-`pub` and vice-versa\n* items changing their kind, i.e. from a `struct` to an `enum`\n* additions and removals of region parameters to and from an item's declaration\n* additions and removals of (possibly defaulted) type parameters to and from an item's\n  declaration\n* changes to the variance of type and region parameters\n* additions and removals of enum variants\n* additions and removals of enum variant- or struct fields\n* changes from tuple structs or variants to struct variants and vice-versa\n* changes to a function or method's constness\n* additions and removals of a self-parameter on methods\n* additions and removals of (possibly defaulted) trait items\n* correct handling of \"sealed\" traits\n* changes to the unsafety of a trait\n* type changes of all toplevel items, as well as associated items in inherent impls and\n  trait definitions\n* additions and removals of inherent impls or methods contained therein\n* additions and removals of trait impls\n\nKeep in mind however that the results presented to the user are merely an approximation of\nthe required versioning policy.\n\n## Contributing\n\nPlease see\n[CONTRIBUTING.md](https://github.com/rust-lang/rust-semverver/blob/master/CONTRIBUTING.md).\n\n## License\n\n`rust-semverver` is distributed under the terms of the 3-clause BSD license.\n\nSee LICENSE for details.\n", "release_dates": ["2023-04-17T10:44:33Z", "2022-06-23T11:18:34Z", "2022-06-08T11:55:51Z", "2022-04-28T22:33:58Z", "2021-10-19T20:50:06Z", "2021-07-29T16:40:33Z"]}, {"name": "rust-wiki-backup", "description": "A backup of the Rust wiki", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "rust.vim", "description": "Vim configuration for Rust.", "language": "Vim Script", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rust.vim\n\n## Description\n\nThis is a Vim plugin that provides [Rust][r] file detection, syntax highlighting, formatting,\n[Syntastic][syn] integration, and more. It requires Vim 8 or higher for full functionality.\nSome things may not work on earlier versions. \n\n## Installation\n\nFor activating the full functionality, this plugin requires either the plugin\nmanager or the `.vimrc` to have the following:\n\n```vim\nsyntax enable\nfiletype plugin indent on\n```\n\nMost plugin managers don't do this automatically, so these statements are\nusually added by users in their `vimrc` _right after_ the plugin manager load\nsection.\n\n### [Vim8 packages][vim8pack]\n\n```sh\ngit clone https://github.com/rust-lang/rust.vim ~/.vim/pack/plugins/start/rust.vim\n```\n\n### [Vundle][v]\n\n```vim\nPlugin 'rust-lang/rust.vim'\n```\n\n### [Pathogen][p]\n\n```sh\ngit clone --depth=1 https://github.com/rust-lang/rust.vim.git ~/.vim/bundle/rust.vim\n```\n\n### [vim-plug][vp]\n\n```vim\nPlug 'rust-lang/rust.vim'\n```\n\n### [dein.vim][d]\n\n```vim\ncall dein#add('rust-lang/rust.vim')\n```\n\n### [NeoBundle][nb]\n\n```vim\nNeoBundle 'rust-lang/rust.vim'\n```\n\n## Features\n\n### Error checking with [Syntastic][syn]\n\n`rust.vim` automatically registers `cargo` as a syntax checker with\n[Syntastic][syn], if nothing else is specified. See `:help rust-syntastic`\nfor more details.\n\n### Source browsing with [Tagbar][tgbr]\n\nThe installation of Tagbar along with [Universal Ctags][uctags] is recommended\nfor a good Tagbar experience. For other kinds of setups, `rust.vim` tries to\nconfigure Tagbar to some degree.\n\n### Formatting with [rustfmt][rfmt]\n\nThe `:RustFmt` command will format your code with\n[rustfmt][rfmt] if installed. `rustfmt` can be installed\nvia `rustup component add rustfmt`.\n\nPlacing `let g:rustfmt_autosave = 1` in your `~/.vimrc` will\nenable automatic running of `:RustFmt` when you save a buffer.\n\nDo `:help :RustFmt` for further formatting help and customization\noptions.\n\n### [Playpen][pp] integration\n\n*Note:* This feature requires [webapi-vim][wav] to be installed.\n\nThe `:RustPlay` command will send the current selection, or if\nnothing is selected the current buffer, to the [Rust playpen][pp].\n\nIf you set g:rust_clip_command RustPlay will copy the url to the clipboard.\n\n- Mac:\n\n      let g:rust_clip_command = 'pbcopy'\n\n- Linux:\n\n      let g:rust_clip_command = 'xclip -selection clipboard'\n\n### Running a test under cursor\n\nIn a Cargo project, the `:RustTest` command will run the test that is under the cursor.\nThis is useful when your project is big and running all of the tests takes a long time.\n\n## Help\n\nFurther help can be found in the documentation with `:Helptags` then `:help rust`.\n\nDetailed help can be found in the documentation with `:help rust`.\nHelptags (`:help helptags`) need to be generated for this plugin\nin order to navigate the help. Most plugin managers will do this\nautomatically, but check their documentation if that is not the case.\n\n## License\n\nLike Rust, rust.vim is primarily distributed under the terms of both the MIT\nlicense and the Apache License (Version 2.0). See LICENSE-APACHE and\nLICENSE-MIT for details.\n\n[r]: https://www.rust-lang.org\n[v]: https://github.com/gmarik/vundle\n[vqs]: https://github.com/gmarik/vundle#quick-start\n[p]: https://github.com/tpope/vim-pathogen\n[nb]: https://github.com/Shougo/neobundle.vim\n[vp]: https://github.com/junegunn/vim-plug\n[d]: https://github.com/Shougo/dein.vim\n[rfmt]: https://github.com/rust-lang-nursery/rustfmt\n[syn]: https://github.com/scrooloose/syntastic\n[tgbr]: https://github.com/majutsushi/tagbar\n[uctags]: https://ctags.io\n[wav]: https://github.com/mattn/webapi-vim\n[pp]: https://play.rust-lang.org/\n[vim8pack]: http://vimhelp.appspot.com/repeat.txt.html#packages\n", "release_dates": []}, {"name": "rustc-demangle", "description": "Rust symbol demangling", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rustc-demangle\n\nDemangling for Rust symbols, written in Rust.\n\n[Documentation](https://docs.rs/rustc-demangle)\n\n## Usage\n\nYou can add this as a dependency via your `Cargo.toml`\n\n```toml\n[dependencies]\nrustc-demangle = \"0.1\"\n```\n\nand then be sure to check out the [crate\ndocumentation](https://docs.rs/rustc-demangle) for usage.\n\n## Usage from non-Rust languages\n\nYou can also use this crate from other languages via the C API wrapper in the\n`crates/capi` directory. This can be build with:\n\n```sh\n$ cargo build -p rustc-demangle-capi --release\n```\n\nYou'll then find `target/release/librustc_demangle.a` and\n`target/release/librustc_demangle.so` (or a different name depending on your\nplatform). These objects implement the interface specified in\n`crates/capi/include/rustc_demangle.h`.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in rustc-demangle you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "rustc-dev-guide", "description": "A guide to how rustc works and how to contribute to it.", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![CI](https://github.com/rust-lang/rustc-dev-guide/actions/workflows/ci.yml/badge.svg)](https://github.com/rust-lang/rustc-dev-guide/actions/workflows/ci.yml)\n\n\nThis is a collaborative effort to build a guide that explains how rustc\nworks. The aim of the guide is to help new contributors get oriented\nto rustc, as well as to help more experienced folks in figuring out\nsome new part of the compiler that they haven't worked on before.\n\n[You can read the latest version of the guide here.](https://rustc-dev-guide.rust-lang.org/)\n\nYou may also find the rustdocs [for the compiler itself][rustdocs] useful.\nNote that these are not intended as a guide; it's recommended that you search\nfor the docs you're looking for instead of reading them top to bottom.\n\n[rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc\n\nFor documentation on developing the standard library, see\n[`std-dev-guide`](https://std-dev-guide.rust-lang.org/).\n\n### Contributing to the guide\n\nThe guide is useful today, but it has a lot of work still to go.\n\nIf you'd like to help improve the guide, we'd love to have you! You can find\nplenty of issues on the [issue\ntracker](https://github.com/rust-lang/rustc-dev-guide/issues). Just post a\ncomment on the issue you would like to work on to make sure that we don't\naccidentally duplicate work. If you think something is missing, please open an\nissue about it!\n\n**In general, if you don't know how the compiler works, that is not a\nproblem!** In that case, what we will do is to schedule a bit of time\nfor you to talk with someone who **does** know the code, or who wants\nto pair with you and figure it out.  Then you can work on writing up\nwhat you learned.\n\nIn general, when writing about a particular part of the compiler's code, we\nrecommend that you link to the relevant parts of the [rustc\nrustdocs][rustdocs].\n\n### Build Instructions\n\nTo build a local static HTML site, install [`mdbook`](https://github.com/rust-lang/mdBook) with:\n\n```\n> cargo install mdbook mdbook-linkcheck mdbook-toc mdbook-mermaid\n```\n\nand execute the following command in the root of the repository:\n\n```\n> mdbook build --open\n```\n\nThe build files are found in the `book/html` directory.\n\n### Link Validations\n\nWe use `mdbook-linkcheck` to validate URLs included in our documentation.\n`linkcheck` will be run automatically when you build with the instructions in the section above.\n\n### Table of Contents\n\nWe use `mdbook-toc` to auto-generate TOCs for long sections. You can invoke the preprocessor by\nincluding the `<!-- toc -->` marker at the place where you want the TOC.\n\n### Pre-commit script\n\nWe also test that line lengths are less than 100 columns. To test this locally,\nyou can run `ci/lengthcheck.sh`.\n\nYou can also set this to run automatically.\n\nOn Linux:\n\n```bash\nln -s ../../ci/lengthcheck.sh .git/hooks/pre-commit\n```\n\nOn Windows:\n\n```powershell\nNew-Item -Path .git/hooks/pre-commit -ItemType HardLink -Value $(Resolve-Path ci/lengthcheck.sh)\n```\n\n## How to fix toolstate failures\n\n> **NOTE**: Currently, we do not track the rustc-dev-guide toolstate due to\n[spurious failures](https://github.com/rust-lang/rust/pull/71731),\nbut we leave these instructions for when we do it again in the future.\n\n1. You will get a ping from the toolstate commit. e.g. https://github.com/rust-lang-nursery/rust-toolstate/commit/8ffa0e4c30ac9ba8546b7046e5c4ccc2b96ebdd4\n\n2. The commit contains a link to the PR that caused the breakage. e.g. https://github.com/rust-lang/rust/pull/64321\n\n3. If you go to that PR's thread, there is a post from bors with a link to the CI status: https://github.com/rust-lang/rust/pull/64321#issuecomment-529763807\n\n4. Follow the check-actions link to get to the Actions page for that build\n\n5. There will be approximately 1 billion different jobs for the build. They are for different configurations and platforms. The rustc-dev-guide build only runs on the Linux x86_64-gnu-tools job. So click on that job in the list, which is about 60% down in the list.\n\n6. Click the Run build step in the job to get the console log for the step.\n\n7. Click on the log and Ctrl-f to get a search box in the log\n\n8. Search for rustc-dev-guide. This gets you to the place where the links are checked. It is usually ~11K lines into the log.\n\n9. Look at the links in the log near that point in the log\n\n10. Fix those links in the rustc-dev-guide (by making a PR in the rustc-dev-guide repo)\n\n11. Make a PR on the rust-lang/rust repo to update the rustc-dev-guide git submodule in src/docs/rustc-dev-guide.\nTo make a PR, the following steps are useful.\n\n```bash\n# Assuming you already cloned the rust-lang/rust repo and you're in the correct directory\ngit submodule update --remote src/doc/rustc-dev-guide\ngit add -u\ngit commit -m \"Update rustc-dev-guide\"\n# Note that you can use -i, which is short for --incremental, in the following command\n./x test --incremental src/doc/rustc-dev-guide # This is optional and should succeed anyway\n# Open a PR in rust-lang/rust\n```\n\n12. Wait for PR to merge\n\nVoil\u00e0!\n", "release_dates": []}, {"name": "rustc-hash", "description": "Custom hash algorithm used by rustc (plus hashmap/set aliases): fast, deterministic, not secure", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rustc-hash\n\n[![crates.io](https://img.shields.io/crates/v/rustc-hash.svg)](https://crates.io/crates/rustc-hash)\n[![Documentation](https://docs.rs/rustc-hash/badge.svg)](https://docs.rs/rustc-hash)\n\nA speedy hash algorithm used within rustc. The hashmap in liballoc by\ndefault uses SipHash which isn't quite as speedy as we want. In the\ncompiler we're not really worried about DOS attempts, so we use a fast\nnon-cryptographic hash.\n\nThis is the same as the algorithm used by Firefox -- which is a\nhomespun one not based on any widely-known algorithm -- though\nmodified to produce 64-bit hash values instead of 32-bit hash\nvalues. It consistently out-performs an FNV-based hash within rustc\nitself -- the collision rate is similar or slightly worse than FNV,\nbut the speed of the hash function itself is much higher because it\nworks on up to 8 bytes at a time.\n\n## Usage\n\n```rust\nuse rustc_hash::FxHashMap;\n\nlet mut map: FxHashMap<u32, u32> = FxHashMap::default();\nmap.insert(22, 44);\n```\n\n### `no_std`\n\nThis crate can be used as a `no_std` crate by disabling the `std`\nfeature, which is on by default, as follows:\n\n```toml\nrustc-hash = { version = \"1.1\", default-features = false }\n```\n\nIn this configuration, `FxHasher` is the only export, and the\n`FxHashMap`/`FxHashSet` type aliases are omitted.\n", "release_dates": []}, {"name": "rustc-perf", "description": "Website for graphing performance of rustc", "language": "Rust", "license": null, "readme": "# Rust Compiler Performance Monitoring & Benchmarking\n\nThis repository contains two primary crates: \n* [`collector`](./collector): gathers data for each bors commit\n* [`site`](./site): [displays](https://perf.rust-lang.org) the data and provides a GitHub bot for on-demand benchmarking\n\nAdditional documentation on running and setting up the frontend and backend can\nbe found in the `README` files in the `collector` and `site` directories.\n\nAdditional documentation on the benchmark programs can be found in the `README`\nfile in the `collector/compile-benchmarks` and `collector/runtime-benchmarks` directories.\n", "release_dates": ["2023-03-15T20:31:35Z"]}, {"name": "rustc-pr-tracking", "description": "Statistics about PRs on the rustc repository.", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Rustc PR tracking\n\nThis repository tracks the status of rustc's PRs over time: all the data is\navailable in the CSV format, and it's updated daily by a bot running on GitHub\nActions. A [Web dashboard](https://rust-lang.github.io/rustc-pr-tracking/) is\nalso available with graphs of the collected data.\n\nThe content of this repository is released under the MIT license.\n\n## Adding new graphs\n\nIf you want to track data for a new graph, you need to create a new `.csv` file\nin the `data` directory with just the first row. The first cell in that row is\nthe query you want to use (with `{{param}}` as the placeholder), and in the\nother cells the various strings that will replace `{{param}}` in the query (the\nquery is actually a Jinja2 template). For example, this row counts how much PRs\neach of the listed labels has:\n\n```\nlabel:{{param}},S-waiting-on-review,S-waiting-on-author\n```\n\nYou can add pretty labels to each column by putting the label after `|`: this\nway it's possible to hide hard-to-read query params. If you also want to show a\ngraph on the web dashboard, add the file name (without the `.csv`) and the\ntitle you want for the graph to the `graphs` section of the `.md` file of the\ndashboard you're interested in.\n\nYou can then run the updater script to populate today's data automatically.\n\n## Running the updater script locally\n\nThe updater script can also be run locally: you just need to have Python 3 and\nthe python-requests library installed.\n\n```\n# Update all the CSV files in the data/ directory\n$ python3 updater.py <repo-name>\n\n# Update just the data/sample.csv file\n$ python3 updater.py <repo-name> data/sample.csv\n```\n\nIf the `GITHUB_TOKEN` environment variable is present, the script will use it\nto authenticate with the GitHub API: it can work fine without it, but the API\nrate limits are pretty low for unauthenticated requests (don't worry, the\nscript will wait for the limits to expire, it will just take more time to\nfinish).\n\n**Do not run** the `ci.sh` script: it's meant to be run by Travis, and it will\npush new commits to this repository.\n", "release_dates": []}, {"name": "rustc-rayon", "description": "Rayon: A data parallelism library for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rustc-rayon\n\nrustc-rayon is a fork of [the Rayon crate](https://github.com/rayon-rs/rayon/). It adds a few \"in progress\" features that rustc is using, mostly around deadlock detection. These features are not stable and should not be used by others -- though they may find their way into rayon proper at some point. In general, if you are not rustc, you should be using the real rayon crate, not rustc-rayon. =)\n\n## License\n\nrustc-rayon is a fork of rayon. rayon is distributed under the terms of both the MIT license and the\nApache License (Version 2.0). See [LICENSE-APACHE](LICENSE-APACHE) and\n[LICENSE-MIT](LICENSE-MIT) for details. Opening a pull request is\nassumed to signal agreement with these licensing terms.\n", "release_dates": []}, {"name": "rustc-reading-club", "description": "Rust Code Reading Clubs", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust Code Reading Clubs\n\n## rustc edition\n", "release_dates": []}, {"name": "rustc-timing", "description": "new rustc-timing repository for freshly collected data", "language": null, "license": null, "readme": "# rustc-timing\n\nRust compiler performance data. See also [rustc-perf](https://github.com/rust-lang-nursery/rustc-perf).\n", "release_dates": []}, {"name": "rustc_apfloat", "description": "Rust port of C++ llvm::APFloat library", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# `rustc_apfloat`<br><sub>(Rust port of the C++ `llvm::APFloat` \"softfloat\" library)</sub>\n\n## History\n\nLLVM's `APFloat` (aka `llvm::APFloat`) software floating-point (or \"softfloat\")\nlibrary was first ported to Rust (and named `rustc_apfloat`) back in 2017,\nin the Rust pull request [`rust-lang/rust#43554`](https://github.com/rust-lang/rust/pull/43554),\nas part of an effort to expand Rust compile-time capabilities without sacrificing\ndeterminism (and therefore soundness, if the type-system was involved).\n\n<sub>Note: while using the original C++ `llvm::APFloat` directly would've been an option,\ncertain high-level API design differences made in the Rust port, without behavioral impact\n(C++ raw pointers and dynamic allocations vs Rust generics, traits and `#![no_std]`),\nmade the Rust port more appealing from a determinism standpoint (mostly thanks to\nlacking all 3 of: `unsafe` code, host floating-point use, `std` access - and only\nallocating to handle the arbitrary precision needed for conversions to/from decimal),\n*even though there was a chance it had correctness issues unique to it*.</sub>\n\nHowever, that port had a fatal flaw: it was added to the `rust-lang/rust` repository\nwithout its unique licensing status (as a port of a C++ library with its own license)\nbeing properly tracked, communicated, taken into account, etc.  \nThe end result was years of limbo, mostly chronicled in the Rust issue\n[`rust-lang/rust#55993`](https://github.com/rust-lang/rust/issues/55993), in which\nthe in-tree port couldn't really receive proper updated or even maintenance, due\ndue to its unclear status.\n\n### Revival (as `rust-lang/rustc_apfloat`)\n\nThis repository (`rust-lang/rustc_apfloat`) is the result of a 2022 plan on\n[the relevant Zulip topic](https://rust-lang.zulipchat.com/#narrow/stream/231349-t-core.2Flicensing/topic/apfloat), fully put into motion during 2023:\n* the `git` history of the in-tree `compiler/rustc_apfloat` library was extracted  \n  (see the separate [`rustc_apfloat-git-history-extraction`](https://github.com/LykenSol/rustc_apfloat-git-history-extraction) repository for more details)\n* only commits that were *both* necessary *and* had clear copyright status, were kept\n* any missing functionality or bug fixes, would have to be either be re-contributed,  \n  or rebuilt from the ground up (mostly the latter ended up being done, see below)\n\nMost changes since the original port had been aesthetic (e.g. spell-checking, `rustfmt`),\nso little was lost in the process.\n\nStarting from that much smaller \"trusted\" base:\n* everything could use LLVM's new (since 2019) license, \"`Apache-2.0 WITH LLVM-exception`\"  \n  (see the [\"Licensing\"](#licensing) section below and/or [LICENSE-DETAILS.md](./LICENSE-DETAILS.md) for more details)\n* new facilities were built (benchmarks, and [a fuzzer comparing Rust/C++/hardware](#fuzzing))\n* excessive testing was performed (via a combination of fuzzing and bruteforce search)\n* latent bugs were discovered (e.g. LLVM issues\n[#63895](https://github.com/llvm/llvm-project/issues/63895) and\n[#63938](https://github.com/llvm/llvm-project/issues/63938))\n* the port has been forwarded in time, to include upstream (`llvm/llvm-project`) changes   \n  to `llvm::APFloat` over the years (since 2017), removing the need for selective backports\n\n## Versioning\n\nAs this is, for the time being, a \"living port\", tracking upstream (`llvm/llvm-project`)  \n`llvm::APFloat` changes, the `rustc_apfloat` crate will have versions of the form:\n\n```\n0.X.Y+llvm-ZZZZZZZZZZZZ\n```\n* `X` is always bumped after semver-incompatible API changes,  \n  or when updating the upstream (`llvm/llvm-project`) commit the port is based on\n* `Y` is only bumped when other parts of the version don't need to be (e.g. for bug fixes)\n* `+llvm-ZZZZZZZZZZZZ` is [\"version metadata\"](https://doc.rust-lang.org/cargo/reference/resolver.html#version-metadata) (which Cargo itself ignores),  \n  and `ZZZZZZZZZZZZ` always holds the first 12 hexadecimal digits of  \n  the upstream (`llvm/llvm-project`) `git` commit hash the port is based on\n\n\n## Testing\n\n`rustc_apfloat` contains ports of all the tests from the C++ `llvm::APFloat` code,\nin `tests/ieee.rs` and `tests/ppc.rs`.\n\nFor tests specific to `rustc_apfloat` (without C++ equivalents), `tests/downstream.rs`\nis used (which mainly contains tests for now-fixed bugs, found by fuzzing).\n\n### Fuzzing\n\nAs `llvm::APFloat` tests are far from comprehensive, the only option for in-depth\ncomparisons between the original C++ code and the Rust port (and between them and\nhardware floating-point behavior) is to employ *fuzzing*.\n\nThe fuzzing infrastructure lives in `fuzz/` and requires `cargo-afl`, but also\ninvolves an automated build of the original C++ `llvm::APFloat` code with `clang`\n(to be able to instrument it via LLVM, in the same way `cargo-afl` does for the\nRust code), and has been prototyped and tested on Linux (and is unlikely to work\non other platforms, or even some Linux distros, though it mostly assumes UNIX).\n\nExample usage:  \n<sub>(**TODO**: maybe move this to `fuzz/README.md` and/or expand on it)</sub>\n\n```sh\n# Install `cargo-afl` (used below to build/run the fuzzing binary).\ncargo install afl\n\n# Build the fuzzing binary (`target/release/rustc_apfloat-fuzz`).\ncargo afl build -p rustc_apfloat-fuzz --release\n\n# Seed the inputs for a run `foo` (while not ideal, even this one minimal input works).\nmkdir fuzz/in-foo && echo > fuzz/in-foo/empty\n\n# Start the fuzzing run `foo`, which should bring up the AFL++ progress TUI\n# (see also `cargo run -p rustc_apfloat-fuzz` for extra flags available).\ncargo afl fuzz -i fuzz/in-foo -o fuzz/out-foo target/release/rustc_apfloat-fuzz\n```\n\nTo visualize the fuzzing testcases, you can use the `decode` subcommand:\n```sh\ncargo run -p rustc_apfloat-fuzz decode fuzz/out-foo/default/crashes/*\n```\n(this will work even while `cargo afl fuzz`, i.e. AFL++, is running)\n\n## Licensing\n\nThis project is licensed under the [Apache 2] with [LLVM exception] license.\nFor a more complete discussion of this project's licensing, see [LICENSE-DETAILS.md](./LICENSE-DETAILS.md).\n\n[Apache 2]: https://spdx.org/licenses/Apache-2.0.html\n[LLVM Exception]: https://spdx.org/licenses/LLVM-exception.html\n", "release_dates": ["2023-07-26T14:02:36Z"]}, {"name": "rustc_codegen_cranelift", "description": "Cranelift based backend for rustc", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": ["2024-02-23T17:25:16Z", "2020-10-27T17:32:22Z"]}, {"name": "rustc_codegen_gcc", "description": "libgccjit AOT codegen for rustc", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": []}, {"name": "rustfix", "description": "Automatically apply the suggestions made by rustc", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": ["2021-06-09T17:47:40Z", "2020-04-02T09:29:45Z"]}, {"name": "rustfmt", "description": "Format Rust code", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# rustfmt [![linux](https://github.com/rust-lang/rustfmt/actions/workflows/linux.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/linux.yml) [![mac](https://github.com/rust-lang/rustfmt/actions/workflows/mac.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/mac.yml) [![windows](https://github.com/rust-lang/rustfmt/actions/workflows/windows.yml/badge.svg?event=push)](https://github.com/rust-lang/rustfmt/actions/workflows/windows.yml) [![crates.io](https://img.shields.io/crates/v/rustfmt-nightly.svg)](https://crates.io/crates/rustfmt-nightly)\n\nA tool for formatting Rust code according to style guidelines.\n\nIf you'd like to help out (and you should, it's a fun project!), see\n[Contributing.md](Contributing.md) and our [Code of\nConduct](CODE_OF_CONDUCT.md).\n\nYou can use rustfmt in Travis CI builds. We provide a minimal Travis CI\nconfiguration (see [here](#checking-style-on-a-ci-server)).\n\n## Quick start\n\nYou can run `rustfmt` with Rust 1.24 and above.\n\n### On the Stable toolchain\n\nTo install:\n\n```sh\nrustup component add rustfmt\n```\n\nTo run on a cargo project in the current working directory:\n\n```sh\ncargo fmt\n```\n\n### On the Nightly toolchain\n\nFor the latest and greatest `rustfmt`, nightly is required.\n\nTo install:\n\n```sh\nrustup component add rustfmt --toolchain nightly\n```\n\nTo run on a cargo project in the current working directory:\n\n```sh\ncargo +nightly fmt\n```\n\n## Limitations\n\nRustfmt tries to work on as much Rust code as possible. Sometimes, the code\ndoesn't even need to compile! In general, we are looking to limit areas of\ninstability; in particular, post-1.0, the formatting of most code should not\nchange as Rustfmt improves. However, there are some things that Rustfmt can't\ndo or can't do well (and thus where formatting might change significantly,\neven post-1.0). We would like to reduce the list of limitations over time.\n\nThe following list enumerates areas where Rustfmt does not work or where the\nstability guarantees do not apply (we don't make a distinction between the two\nbecause in the future Rustfmt might work on code where it currently does not):\n\n* a program where any part of the program does not parse (parsing is an early\n  stage of compilation and in Rust includes macro expansion).\n* Macro declarations and uses (current status: some macro declarations and uses\n  are formatted).\n* Comments, including any AST node with a comment 'inside' (Rustfmt does not\n  currently attempt to format comments, it does format code with comments inside, but that formatting may change in the future).\n* Rust code in code blocks in comments.\n* Any fragment of a program (i.e., stability guarantees only apply to whole\n  programs, even where fragments of a program can be formatted today).\n* Code containing non-ascii unicode characters (we believe Rustfmt mostly works\n  here, but do not have the test coverage or experience to be 100% sure).\n* Bugs in Rustfmt (like any software, Rustfmt has bugs, we do not consider bug\n  fixes to break our stability guarantees).\n\n\n## Running\n\nYou can run Rustfmt by just typing `rustfmt filename` if you used `cargo\ninstall`. This runs rustfmt on the given file, if the file includes out of line\nmodules, then we reformat those too. So to run on a whole module or crate, you\njust need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also\nread data from stdin. Alternatively, you can use `cargo fmt` to format all\nbinary and library targets of your crate.\n\nYou can run `rustfmt --help` for information about available arguments.\nThe easiest way to run rustfmt against a project is with `cargo fmt`. `cargo fmt` works on both\nsingle-crate projects and [cargo workspaces](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html).\nPlease see `cargo fmt --help` for usage information.\n\nYou can specify the path to your own `rustfmt` binary for cargo to use by setting the`RUSTFMT` \nenvironment variable. This was added in v1.4.22, so you must have this version or newer to leverage this feature (`cargo fmt --version`)\n\n### Running `rustfmt` directly\n\nTo format individual files or arbitrary codes from stdin, the `rustfmt` binary should be used. Some\nexamples follow:\n\n- `rustfmt lib.rs main.rs` will format \"lib.rs\" and \"main.rs\" in place\n- `rustfmt` will read a code from stdin and write formatting to stdout\n  - `echo \"fn     main() {}\" | rustfmt` would emit \"fn main() {}\".\n\nFor more information, including arguments and emit options, see `rustfmt --help`.\n\n### Verifying code is formatted\n\nWhen running with `--check`, Rustfmt will exit with `0` if Rustfmt would not\nmake any formatting changes to the input, and `1` if Rustfmt would make changes.\nIn other modes, Rustfmt will exit with `1` if there was some error during\nformatting (for example a parsing or internal error) and `0` if formatting\ncompleted without error (whether or not changes were made).\n\n\n\n## Running Rustfmt from your editor\n\n* [Vim](https://github.com/rust-lang/rust.vim#formatting-with-rustfmt)\n* [Emacs](https://github.com/rust-lang/rust-mode)\n* [Sublime Text 3](https://packagecontrol.io/packages/RustFmt)\n* [Atom](atom.md)\n* [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)\n* [IntelliJ or CLion](intellij.md)\n\n\n## Checking style on a CI server\n\nTo keep your code base consistently formatted, it can be helpful to fail the CI build\nwhen a pull request contains unformatted code. Using `--check` instructs\nrustfmt to exit with an error code if the input is not formatted correctly.\nIt will also print any found differences. (Older versions of Rustfmt don't\nsupport `--check`, use `--write-mode diff`).\n\nA minimal Travis setup could look like this (requires Rust 1.31.0 or greater):\n\n```yaml\nlanguage: rust\nbefore_script:\n- rustup component add rustfmt\nscript:\n- cargo build\n- cargo test\n- cargo fmt --all -- --check\n```\n\nSee [this blog post](https://medium.com/@ag_dubs/enforcing-style-in-ci-for-rust-projects-18f6b09ec69d)\nfor more info.\n\n## How to build and test\n\n`cargo build` to build.\n\n`cargo test` to run all tests.\n\nTo run rustfmt after this, use `cargo run --bin rustfmt -- filename`. See the\nnotes above on running rustfmt.\n\n\n## Configuring Rustfmt\n\nRustfmt is designed to be very configurable. You can create a TOML file called\n`rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent\ndirectory and it will apply the options in that file. See `rustfmt\n--help=config` for the options which are available, or if you prefer to see\nvisual style previews, [GitHub page](https://rust-lang.github.io/rustfmt/).\n\nBy default, Rustfmt uses a style which conforms to the [Rust style guide][style\nguide] that has been formalized through the [style RFC\nprocess][fmt rfcs].\n\nConfiguration options are either stable or unstable. Stable options can always\nbe used, while unstable ones are only available on a nightly toolchain, and opt-in.\nSee [GitHub page](https://rust-lang.github.io/rustfmt/) for details.\n\n### Rust's Editions\n\nRustfmt is able to pick up the edition used by reading the `Cargo.toml` file if\nexecuted through the Cargo's formatting tool `cargo fmt`. Otherwise, the edition\nneeds to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n\n## Tips\n\n* For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n* To prevent rustfmt from formatting a macro or an attribute,\n  use `#[rustfmt::skip::macros(target_macro_name)]` or\n  `#[rustfmt::skip::attributes(target_attribute_name)]`\n\n  Example:\n\n    ```rust\n    #![rustfmt::skip::attributes(custom_attribute)]\n\n    #[custom_attribute(formatting , here , should , be , Skipped)]\n    #[rustfmt::skip::macros(html)]\n    fn main() {\n        let macro_result1 = html! { <div>\n    Hello</div>\n        }.to_string();\n    ```\n* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in\n  target file directory or its parents to override the default settings of\n  rustfmt. You can generate a file containing the default configuration with\n  `rustfmt --print-config default rustfmt.toml` and customize as needed.\n* After successful compilation, a `rustfmt` executable can be found in the\n  target directory.\n* If you're having issues compiling Rustfmt (or compile errors when trying to\n  install), make sure you have the most recent version of Rust installed.\n\n* You can change the way rustfmt emits the changes with the --emit flag:\n\n  Example:\n\n  ```sh\n  cargo fmt -- --emit files\n  ```\n\n  Options:\n\n  | Flag |Description| Nightly Only |\n  |:---:|:---:|:---:|\n  | files | overwrites output to files | No |\n  | stdout | writes output to stdout | No |\n  | coverage | displays how much of the input file was processed | Yes |\n  | checkstyle | emits in a checkstyle format | Yes |\n  | json | emits diffs in a json format | Yes |\n\n## License\n\nRustfmt is distributed under the terms of both the MIT license and the\nApache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n\n[rust]: https://github.com/rust-lang/rust\n[fmt rfcs]: https://github.com/rust-dev-tools/fmt-rfcs\n[style guide]: https://doc.rust-lang.org/nightly/style-guide/\n", "release_dates": ["2023-07-01T19:03:27Z", "2023-07-01T15:40:36Z", "2023-06-27T21:05:58Z", "2022-06-28T22:01:17Z", "2022-06-14T20:36:27Z", "2021-10-23T14:57:56Z", "2021-10-19T01:44:45Z", "2021-02-08T23:39:19Z", "2021-02-04T03:06:36Z", "2021-01-29T04:04:48Z", "2021-01-28T03:00:36Z", "2021-01-16T17:28:05Z", "2021-01-09T18:48:14Z", "2020-12-20T18:07:50Z", "2020-12-08T03:39:50Z", "2020-11-29T19:29:41Z", "2020-11-16T22:08:38Z", "2020-11-14T18:08:21Z", "2020-11-12T00:28:21Z", "2020-11-06T02:46:46Z", "2020-11-03T01:20:47Z", "2020-10-10T02:11:46Z", "2020-09-05T00:06:44Z", "2020-08-11T23:47:05Z", "2020-06-08T01:53:25Z", "2020-06-08T01:38:57Z", "2020-05-25T12:45:33Z", "2020-05-19T08:41:31Z", "2020-04-14T09:16:49Z", "2020-03-31T15:05:53Z"]}, {"name": "rustlings", "description": ":crab: Small exercises to get you used to reading and writing Rust code!", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div class=\"oranda-hide\">\n\n# rustlings \ud83e\udd80\u2764\ufe0f\n\n</div>\n\nGreetings and welcome to `rustlings`. This project contains small exercises to get you used to reading and writing Rust code. This includes reading and responding to compiler messages!\n\n_...looking for the old, web-based version of Rustlings? Try [here](https://github.com/rust-lang/rustlings/tree/rustlings-1)_\n\nAlternatively, for a first-time Rust learner, there are several other resources:\n\n- [The Book](https://doc.rust-lang.org/book/index.html) - The most comprehensive resource for learning Rust, but a bit theoretical sometimes. You will be using this along with Rustlings!\n- [Rust By Example](https://doc.rust-lang.org/rust-by-example/index.html) - Learn Rust by solving little exercises! It's almost like `rustlings`, but online\n\n## Getting Started\n\n_Note: If you're on MacOS, make sure you've installed Xcode and its developer tools by typing `xcode-select --install`._\n_Note: If you're on Linux, make sure you've installed gcc. Deb: `sudo apt install gcc`. Yum: `sudo yum -y install gcc`._\n\nYou will need to have Rust installed. You can get it by visiting <https://rustup.rs>. This'll also install Cargo, Rust's package/project manager.\n\n## MacOS/Linux\n\nJust run:\n\n```bash\ncurl -L https://raw.githubusercontent.com/rust-lang/rustlings/main/install.sh | bash\n```\n\nOr if you want it to be installed to a different path:\n\n```bash\ncurl -L https://raw.githubusercontent.com/rust-lang/rustlings/main/install.sh | bash -s mypath/\n```\n\nThis will install Rustlings and give you access to the `rustlings` command. Run it to get started!\n\n### Nix\n\nBasically: Clone the repository at the latest tag, finally run `nix develop` or `nix-shell`.\n\n```bash\n# find out the latest version at https://github.com/rust-lang/rustlings/releases/latest (on edit 5.6.1)\ngit clone -b 5.6.1 --depth 1 https://github.com/rust-lang/rustlings\ncd rustlings\n# if nix version > 2.3\nnix develop\n# if nix version <= 2.3\nnix-shell\n```\n\n## Windows\n\nIn PowerShell (Run as Administrator), set `ExecutionPolicy` to `RemoteSigned`:\n\n```ps1\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\nThen, you can run:\n\n```ps1\nStart-BitsTransfer -Source https://raw.githubusercontent.com/rust-lang/rustlings/main/install.ps1 -Destination $env:TMP/install_rustlings.ps1; Unblock-File $env:TMP/install_rustlings.ps1; Invoke-Expression $env:TMP/install_rustlings.ps1\n```\n\nTo install Rustlings. Same as on MacOS/Linux, you will have access to the `rustlings` command after it. Keep in mind that this works best in PowerShell, and any other terminals may give you errors.\n\nIf you get a permission denied message, you might have to exclude the directory where you cloned Rustlings in your antivirus.\n\n## Browser\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/rust-lang/rustlings)\n\n[![Open Rustlings On Codespaces](https://github.com/codespaces/badge.svg)](https://github.com/codespaces/new/?repo=rust-lang%2Frustlings&ref=main)\n\n## Manually\n\nBasically: Clone the repository at the latest tag, run `cargo install --path .`.\n\n```bash\n# find out the latest version at https://github.com/rust-lang/rustlings/releases/latest (on edit 5.6.1)\ngit clone -b 5.6.1 --depth 1 https://github.com/rust-lang/rustlings\ncd rustlings\ncargo install --force --path .\n```\n\nIf there are installation errors, ensure that your toolchain is up to date. For the latest, run:\n\n```bash\nrustup update\n```\n\nThen, same as above, run `rustlings` to get started.\n\n## Doing exercises\n\nThe exercises are sorted by topic and can be found in the subdirectory `rustlings/exercises/<topic>`. For every topic there is an additional README file with some resources to get you started on the topic. We really recommend that you have a look at them before you start.\n\nThe task is simple. Most exercises contain an error that keeps them from compiling, and it's up to you to fix it! Some exercises are also run as tests, but rustlings handles them all the same. To run the exercises in the recommended order, execute:\n\n```bash\nrustlings watch\n```\n\nThis will try to verify the completion of every exercise in a predetermined order (what we think is best for newcomers). It will also rerun automatically every time you change a file in the `exercises/` directory. If you want to only run it once, you can use:\n\n```bash\nrustlings verify\n```\n\nThis will do the same as watch, but it'll quit after running.\n\nIn case you want to go by your own order, or want to only verify a single exercise, you can run:\n\n```bash\nrustlings run myExercise1\n```\n\nOr simply use the following command to run the next unsolved exercise in the course:\n\n```bash\nrustlings run next\n```\n\nIn case you get stuck, you can run the following command to get a hint for your\nexercise:\n\n```bash\nrustlings hint myExercise1\n```\n\nYou can also get the hint for the next unsolved exercise with the following command:\n\n```bash\nrustlings hint next\n```\n\nTo check your progress, you can run the following command:\n\n```bash\nrustlings list\n```\n\n## Testing yourself\n\nAfter every couple of sections, there will be a quiz that'll test your knowledge on a bunch of sections at once. These quizzes are found in `exercises/quizN.rs`.\n\n## Enabling `rust-analyzer`\n\nRun the command `rustlings lsp` which will generate a `rust-project.json` at the root of the project, this allows [rust-analyzer](https://rust-analyzer.github.io/) to parse each exercise.\n\n## Continuing On\n\nOnce you've completed Rustlings, put your new knowledge to good use! Continue practicing your Rust skills by building your own projects, contributing to Rustlings, or finding other open-source projects to contribute to.\n\n## Uninstalling Rustlings\n\nIf you want to remove Rustlings from your system, there are two steps. First, you'll need to remove the exercises folder that the install script created\nfor you:\n\n```bash\nrm -rf rustlings # or your custom folder name, if you chose and or renamed it\n```\n\nSecond, run `cargo uninstall` to remove the `rustlings` binary:\n\n```bash\ncargo uninstall rustlings\n```\n\nNow you should be done!\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/rust-lang/rustlings/blob/main/CONTRIBUTING.md).\n\n## Contributors \u2728\n\nThanks goes to the wonderful people listed in [AUTHORS.md](https://github.com/rust-lang/rustlings/blob/main/AUTHORS.md) \ud83c\udf89\n", "release_dates": ["2023-09-18T08:18:41Z", "2023-09-04T13:24:17Z", "2023-05-17T19:07:43Z", "2023-05-17T14:31:33Z", "2023-03-10T16:40:49Z", "2023-02-12T17:03:09Z", "2022-12-23T16:10:25Z", "2022-09-06T10:23:16Z", "2022-08-27T18:50:19Z", "2022-08-17T08:44:42Z", "2022-08-16T07:56:10Z", "2022-07-16T12:36:35Z", "2022-07-01T14:50:45Z", "2022-04-20T07:46:07Z", "2022-04-14T09:23:06Z", "2021-09-25T09:27:47Z", "2021-07-07T20:30:00Z", "2021-04-24T10:04:01Z", "2020-12-29T10:41:19Z", "2020-11-07T13:22:19Z", "2020-10-05T16:45:55Z", "2020-07-08T09:41:47Z", "2020-04-11T22:04:24Z", "2020-02-27T18:24:21Z", "2020-02-25T22:09:24Z", "2019-11-27T09:47:37Z", "2019-11-12T11:26:14Z", "2019-11-11T13:03:38Z", "2019-11-09T09:53:47Z", "2019-08-13T10:00:23Z"]}, {"name": "rustup", "description": "The Rust toolchain installer", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rustup: the Rust toolchain installer\n\n| Master CI    | Build Status                                             |\n|--------------|----------------------------------------------------------|\n| Windows      | ![Windows builds][actions-windows-master]                |\n| macOS        | ![maOS builds][actions-macos-master]                     |\n| Linux Etc    | ![Linux (etc) builds][actions-linux-master]              |\n\n*Rustup* installs [The Rust Programming Language][rustlang] from the official\nrelease channels, enabling you to easily switch between stable, beta,\nand nightly compilers and keep them updated. It makes cross-compiling\nsimpler with binary builds of the standard library for common platforms.\nAnd it runs on all platforms Rust supports, including Windows.\n\n[rustlang]: https://www.rust-lang.org\n\n## Documentation\n\nSee [**The Rustup book**](https://rust-lang.github.io/rustup/) for\ndocumentation on installing and using Rustup.\n\n## Contributing\n\nSee [**The Rustup dev guide**](https://rust-lang.github.io/rustup/dev-guide) for information on contributing to Rustup.\n\n## License\n\nCopyright Diggory Blake, the Mozilla Corporation, and Rustup\ncontributors.\n\nLicensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n<!-- Badges -->\n[actions-windows-master]: https://github.com/rust-lang/rustup/workflows/Windows%20(master)/badge.svg\n[actions-macos-master]: https://github.com/rust-lang/rustup/workflows/macOS/badge.svg?branch=master\n[actions-linux-master]: https://github.com/rust-lang/rustup/workflows/Linux%20(master)/badge.svg\n", "release_dates": []}, {"name": "rustup-components-history", "description": "Rustup package status history", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rustup components availability tool\n\nA library and some binaries to monitor rustup components availability history\non different platforms.\n\n## The library part\n\nPlease refer to [docs.rs](https://docs.rs/rustup-available-packages) for more info on\nthe library, and to the source code of the binary crate for usage hints.\n\n## The Web part\n\nUnder the `web` directory you will find a binary crate that's capable of\nproducing web-pages like\n[https://rust-lang.github.io/rustup-components-history/](https://rust-lang.github.io/rustup-components-history/).\n\nMachine-readable information on the latest availability can be fetched on a\n*per-component-per-target* basis, i.e.\n`https://rust-lang.github.io/rustup-components-history/$target/$package` where `$target` stands for\na target host architecture, like `x86_64-unknown-linux-gnu`, and `$package` stands for a package\nname, like `rls` or `rust-src`. For example, getting the date when `miri` was available for the last\ntime on `x86_64-apple-darwin` is as simple as running the following command:\n\n```\n$ curl https://rust-lang.github.io/rustup-components-history/x86_64-apple-darwin/miri\n2019-06-08\n```\n\nMore information (in a JSON format) can be found at a similar location with a `.json` suffix. This\ndata will include at least the last date the package was available (if it ever was) and whether the\npackage was available over a configurable range of dates. E.g.,\n\n```\n$ curl https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri.json\n{\"2019-06-13\":true,\"2019-06-12\":true,\"2019-06-11\":true,\"2019-06-10\":false,\"2019-06-09\":true,\"2019-06-08\":true,\"2019-06-07\":true,\"last_available\":\"2019-06-13\"}\n```\n\nRun the binary with a `--help` flag to see available options.\n\nMore info is coming :)\n\n### License\n\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n#### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n\nLicense: MIT/Apache-2.0\n", "release_dates": []}, {"name": "rustwide", "description": "Execute your code on the Rust ecosystem.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rustwide\n\nRustwide is a library to execute your code on the Rust ecosystem, powering\nprojects like [Crater] and [docs.rs]. It features:\n\n* Linux and Windows support.\n* Sandboxing by default using Docker containers, with the option to restrict\n  network access during builds while still supporting most of the crates.\n* [Curated build environment][build-env] to build a large part of the\n  ecosystem, built from the experience gathered running [Crater] and [docs.rs].\n\nRustwide was originally part of the [Crater] project, and it was extracted to\nlet the whole community benefit from it.\n\nRustwide is licensed under both the MIT and Apache 2.0 licenses, allowing you\nto choose which one to adhere to.\n\n[Crater]: https://github.com/rust-lang/crater\n[docs.rs]: https://github.com/rust-lang/docs.rs\n[build-env]: https://github.com/rust-lang/crates-build-env\n", "release_dates": []}, {"name": "simpleinfra", "description": "Rust Infrastructure automation", "language": "HCL", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Simpleinfra\n\nThis repository containing the tools and automation written by the [Rust\ninfrastructure team][team] to manage our services. Using some of the tools in\nthis repo require privileges only infra team members have.\n\n* [**ansible**](ansible/README.md): Ansible playbooks to deploy our servers\n* [**aws-creds**][aws-2fa]: log into AWS with two factor authentication\n* [**github-actions**](github-actions/README.md): shared actions for GitHub\n  Actions\n* [**setup-deploy-keys**](#setup-deploy-keys): automation for GitHub deploy keys\n* [**terraform**](terraform/shared/README.md): Terraform configuration to deploy our\n  cloud resources\n* [**with-rust-key**](#with-rust-key): execute commands using the Rust release\n  signing key\n\nThe contents of this repository are released under the MIT license.\n\n[aws-2fa]: https://forge.rust-lang.org/infra/docs/aws-access.html#2-factor-authentication\n[team]: https://github.com/rust-lang/infra-team\n\n## setup-deploy-keys\n\nUsing Personal Access Tokens to upload to GitHub pages from CI is not great\nfrom a security point of view, as it's not possible to scope those access\ntokens to just that repository. Deploy keys are properly scoped, but it can be\nan hassle to generate and configure them.\n\nThe `setup-deploy-keys` tool automates most of that process. You need to setup\nyour GitHub token in the `GITHUB_TOKEN` environment variable, and then run:\n\n```\ncargo run --bin setup-deploy-keys org-name/repo-name\n```\n\nThe tool will generate a key, upload it to GitHub and then print an environment\nvariable `GITHUB_DEPLOY_KEY` containing an encoded representation of the\nprivate key.\n\nTo use the key the easiest way is to cd into the directory you want to deploy,\n[download this rust program][setup-deploy-keys-deploy], compile and run it\n(with the `GITHUB_DEPLOY_KEY` variable set).\n\nBy default the tool generates ed25519 keys, but some libraries (like `git2`)\ndon't support them yet. In those cases you can generate RSA keys by passing the\n`--rsa` flag:\n\n```\ncargo run --bin setup-deploy-keys org-name/repo-name --rsa\n```\n\n[setup-deploy-keys-deploy]: https://raw.githubusercontent.com/rust-lang/simpleinfra/master/setup-deploy-keys/src/deploy.rs\n\n## with-rust-key\n\nThe `with-rust-key.sh` script executes a command inside a gpg environment\nconfigured to use the Rust release signing key, without actually storing the\nkey on disk. The key is fetched at runtime from the 1password sensitive vault,\nand you need to have `jq` and [the 1password CLI][1password-cli] installed.\n\nFor example, to create a git tag for the Rust 2.0.0 release you can use:\n\n```\n./with-rust-key.sh gpg tag -u FA1BE5FE 2.0.0 stable\n```\n\nThe script is designed to leave no traces of the key on the host system after\nit finishes, but a program with your user's privileges can still interact with\nthe key as long as the script is running.\n\n[1password-cli]: https://support.1password.com/command-line-getting-started/\n", "release_dates": []}, {"name": "socket2", "description": "Advanced configuration options for sockets.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Socket2\n\nSocket2 is a crate that provides utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the standard\nlibrary) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's functionality\nfor sockets, this means little effort to provide cross-platform utilities. It is\nup to the user to know how to use sockets when using this crate. *If you don't\nknow how to create a socket using libc/system calls then this crate is not for\nyou*. Most, if not all, functions directly relate to the equivalent system call\nwith no error handling applied, so no handling errors such as `EINTR`. As a\nresult using this crate can be a little wordy, but it should give you maximal\nflexibility over configuration of sockets.\n\nSee the [API documentation] for more.\n\n[API documentation]: https://docs.rs/socket2\n\n# Branches\n\nCurrently Socket2 supports two versions: v0.5 and v0.4. Version 0.5 is being\ndeveloped in the master branch. Version 0.4 is developed in the [v0.4.x branch]\nbranch.\n\n[v0.4.x branch]: https://github.com/rust-lang/socket2/tree/v0.4.x\n\n# OS support\n\nSocket2 attempts to support the same OS/architectures as Rust does, see\nhttps://doc.rust-lang.org/nightly/rustc/platform-support.html. However this is\nnot always possible, below is current list of support OSs.\n\n*If your favorite OS is not on the list consider contributing it! See [issue\n#78].*\n\n[issue #78]: https://github.com/rust-lang/socket2/issues/78\n\n### Tier 1\n\nThese OSs are tested with each commit in the CI and must always pass the tests.\nAll functions/types/etc., excluding ones behind the `all` feature, must work on\nthese OSs.\n\n* Linux\n* macOS\n* Windows\n\n### Tier 2\n\nThese OSs are currently build in the CI, but not tested. Not all\nfunctions/types/etc. may work on these OSs, even ones **not** behind the `all`\nfeature flag.\n\n* Android\n* FreeBSD\n* Fuchsia\n* iOS\n* illumos\n* NetBSD\n* Redox\n* Solaris\n\n# Minimum Supported Rust Version (MSRV)\n\nSocket2 uses 1.63.0 as MSRV.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n", "release_dates": ["2017-10-15T02:15:34Z", "2017-08-10T20:14:52Z", "2017-06-13T02:49:41Z"]}, {"name": "spec", "description": "The Rust specification", "language": null, "license": null, "readme": "# spec\nThe Rust specification\n", "release_dates": []}, {"name": "stacker", "description": "Manual segmented stacks for Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# stacker\n\n[![Build Status](https://github.com/rust-lang/stacker/workflows/Test%20stacker/badge.svg)](https://github.com/rust-lang/stacker/actions)\n\n[Documentation](https://docs.rs/stacker)\n\nA stack-growth library for Rust. Enables annotating fixed points in programs\nwhere the stack may want to grow larger. Spills over to the heap if the stack\nhas hit its limit.\n\nThis library is intended on helping implement recursive algorithms.\n\n```toml\n# Cargo.toml\n[dependencies]\nstacker = \"0.1\"\n```\n\n## Platform Support\n\nThis library currently uses psm for its cross platform capabilities, with a notable exception of\nWindows, which uses an implementation based on Fibers. See the README for psm for the support\ntable.\n\nOn all unsupported platforms this library is a noop. It should compile and run, but it\nwon't actually grow the stack and code will continue to hit the guard pages\ntypically in place.\n\n# License\n\nThis project is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be dual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "staging.crates.io-index", "description": "Registry index for staging.crates.io", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "std-dev-guide", "description": "Guide for standard library developers", "language": "Shell", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "[![GitHub Actions Badge](https://github.com/rust-lang/std-dev-guide/workflows/Continuous%20Integration/badge.svg)](https://github.com/rust-lang/std-dev-guide/actions)\n\nWelcome to the Standard Library Development Guide! This book is for anybody who is contributing to, or who is reviewing contributions to, the standard library. It aims to capture everything you need to know through the whole lifecycle of a standard library feature, from inception through to an initial unstable implementation, through to stabilization, and eventually maybe deprecation.\n\n**The latest version of this guide is available on https://std-dev-guide.rust-lang.org/**\n\n### Contributing to the guide\n\nThe guide is a very early work in progress. It still has big gaps. If there's a section you'd like to flesh out, please feel free to submit a PR or raise an issue!\n\n### See also\n\n- [The Rustc Dev Guide](https://github.com/rust-lang/rustc-dev-guide): A similar resource for the Rust compiler itself.\n- [The Libs Team Repository](https://github.com/rust-lang/libs-team): The home of the Library Team, who maintain this book.\n", "release_dates": []}, {"name": "stdarch", "description": "Rust's standard library vendor-specific APIs and run-time feature detection", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "stdarch - Rust's standard library SIMD components\n=======\n\n[![Actions Status](https://github.com/rust-lang/stdarch/workflows/CI/badge.svg)](https://github.com/rust-lang/stdarch/actions)\n\n\n# Crates\n\nThis repository contains two main crates:\n\n* [`core_arch`](crates/core_arch/README.md) implements `core::arch` - Rust's\n  core library architecture-specific intrinsics, and\n  \n* [`std_detect`](crates/std_detect/README.md) implements `std::detect` - Rust's\n  standard library run-time CPU feature detection.\n\nThe `std::simd` component now lives in the\n[`packed_simd_2`](https://github.com/rust-lang/packed_simd) crate.\n", "release_dates": []}, {"name": "style-team", "description": "Home of the Rust style team", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust style team repository\n\nThis is the home of the [Rust style team](https://www.rust-lang.org/governance/teams/lang#Style%20team). The style team is responsible for\ndetermining the default Rust style, including styling for new language\nconstructs, as well as evolving the Rust style over time.\n\nThe [Rust style\nguide](https://github.com/rust-lang/rust/tree/HEAD/src/doc/style-guide/src)\nlives in the `rust-lang/rust` repository. In particular, see the [guiding\nprinciples](https://github.com/rust-lang/rust/blob/HEAD/src/doc/style-guide/src/principles.md)\nof the Rust style.\n\nThis repository includes:\n- The [charter](charter.md) for the style team.\n- The [policy](team-policy.md) for the style team, including the [handling of\n  style for nightly language constructs](nightly-style-procedure.md).\n\n## Code of Conduct\n\nAll interactions on this repository (whether on issues, PRs, or elsewhere), as\nin other parts of the Rust project, are governed by the [Rust Code of\nConduct](https://www.rust-lang.org/policies/code-of-conduct).\n\n## License\n[License]: #license\n\nThis repository is licensed under either of:\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contributions\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "subteams", "description": "Artifacts relevant to the various Rust subteams", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# subteams\nArtifacts relevant to the various Rust subteams\n", "release_dates": []}, {"name": "surveys", "description": "Repo for coordinating the creation, distribution, collection, and analysis of surveys for the Rust project. ", "language": "Python", "license": null, "readme": "# Surveys\n\nThis repo contains information relevant to the creation, distribution, collection, and analysis of surveys for the Rust project.\n\n## Annual survey\nYou can find a guide for preparing the Rust annual survey [here](annual-survey.md).\n\n## Micro surveys\nYou can information on how to run a \"micro-survey\" [here](micro-surveys.md).\n", "release_dates": []}, {"name": "sync-team", "description": "Synchronize the team repository with the services we use", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Team synchronization tool\n\nThis repository contains the CLI tool used to synchronize the contents of the\n[rust-lang/team] repository with some of the services the Rust Team uses. There\nis usually no need to run this tool manually, and running it requires elevated\nprivileges on our infrastructure.\n\n| Service name | Description | Environment variables |\n| --- | --- | --- |\n| github | Synchronize GitHub teams and repo configuration | `GITHUB_TOKEN` |\n| mailgun | Synchronize mailing lists on Mailgun | `MAILGUN_API_TOKEN`, `EMAIL_ENCRYPTION_KEY`|\n| zulip | Synchronize Zulip user groups | `ZULIP_USERNAME`, `ZULIP_API_TOKEN` |\n\nThe contents of this repository are available under both the MIT and Apache 2.0\nlicense.\n\n## Running the tool\n\nBy default the tool will run in *dry mode* on all the services we synchronize,\nmeaning that the changes will be previewed on the console output but no actual\nchange will be applied:\n\n```\ncargo run\n```\n\nOnce you're satisfied with the changes you can run the full synchronization by\npassing the `--live` flag:\n\n```\ncargo run -- --live\n```\n\nYou can also limit the services to synchronize on by passing a list of all the\nservice names you want to sync. For example, to synchronize only GitHub and\nMailgun you can run:\n\n```\ncargo run -- github mailgun\ncargo run -- github mailgun --live\n```\n\n## Using a local copy of the team repository\n\nBy default this tool works on the production dataset, pulled from\n[rust-lang/team]. When making changes to the tool it might be useful to test\nwith dummy data though. You can do that by making the changes in a local copy\nof the team repository and passing the `--team-repo` flag to the CLI:\n\n```\ncargo run -- --team-repo ~/code/rust-lang/team\n```\n\nWhen `--team-repo` is passed, the CLI will build the Static API in a temporary\ndirectory, and fetch the data from it instead of the production instance.\n\n[rust-lang/team]: https://github.com/rust-lang/team\n", "release_dates": []}, {"name": "team", "description": "Rust teams structure", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust teams structure\n\nThis repository contains the structure of the Rust teams. The repository is\nautomatically synchronized with:\n\n| Service | Synchronized every | |\n| --- | :---: | --- |\n| [@bors][bors] | *In real time* | [Integration source][bors-src] |\n| [Crater and @craterbot][crater] | *In real time* | [Integration source][crater-src] |\n| [Perf and @rust-timer][perf] | *In real time* | [Integration source][perf-src] |\n| [@rfcbot][rfcbot] | 5 minutes | [Integration source][rfcbot-src] |\n| GitHub teams membership | *Shortly after merge* | [Integration source][sync-team-src] |\n| Mailing lists and aliases (`@rust-lang.org`, `@crates.io`) | *Shortly after merge* | [Integration source][sync-team-src] |\n| Zulip user group membership | *Shortly after merge* | [Integration source][sync-team-src] |\n| [Governance section on the website][www] | 2 minutes | [Integration source][www-src] |\n| crates.io admin access | 1 hour | [Integration source][crates-io-admin-src] |\n\nIf you need to add or remove a person from a team, send a PR to this\nrepository.  After it's merged, their account will be added/removed\nfrom all the supported services.\n\n[bors]: https://buildbot2.rust-lang.org/homu\n[bors-src]: https://github.com/rust-lang/homu/blob/master/homu/auth.py\n[www]: https://www.rust-lang.org/governance\n[www-src]: https://github.com/rust-lang/www.rust-lang.org/blob/master/src/teams.rs\n[crater]: https://github.com/rust-lang-nursery/crater\n[crater-src]: https://github.com/rust-lang-nursery/crater/blob/master/src/server/auth.rs\n[perf]: https://perf.rust-lang.org\n[perf-src]: https://github.com/rust-lang-nursery/rustc-perf/blob/master/site/src/server.rs\n[rfcbot]: https://rfcbot.rs\n[rfcbot-src]: https://github.com/anp/rfcbot-rs/blob/master/src/teams.rs\n[sync-team-src]: https://github.com/rust-lang/sync-team\n[crates-io-admin-src]: https://github.com/rust-lang/crates.io/blob/main/src/worker/jobs/sync_admins.rs\n\n## Documentation\n\n* [TOML schema reference](docs/toml-schema.md)\n\n## Using the CLI tool\n\nIt's possible to interact with this repository through its CLI tool.\n\n### Verifying the integrity of the repository\n\nThis repository contains some sanity checks to avoid having stale or broken\ndata. You can run the checks locally with the `check` command:\n\n```\ncargo run check\n```\n\nNote that some of these checks will be skipped due to missing API tokens.\n\n### Adding a person to the repository\n\nIt's possible to fetch the public information present in a GitHub profile and\nstore it in a person's TOML file:\n\n```\ncargo run add-person <github-username>\n```\n\nYou can also add additional information, such as someone's Discord or Zulip ID by adding additional fields to their `.toml` file.\n\nTo determine someone's Zulip ID, find them in the list of people on the\nright-hand side in Zulip, click the \"three dots\" menu, and copy the 'User ID'\ninto the toml file:\n\n```\nzulip-id = <user id>\n```\n\n### Querying information out of the repository\n\nThere are a few CLI commands that allow you to get some information generated\nfrom the data in the repository.\n\nYou can get a list of all the people in a team:\n\n```\ncargo run dump-team all\n```\n\nYou can get a list of all the email addresses subscribed to a list:\n\n```\ncargo run dump-list all@rust-lang.org\n```\n\nYou can get a list of all the users with a permission:\n\n```\ncargo run dump-permission perf\n```\n\n\nYou can generate [www.rust-lang.org](https://github.com/rust-lang/www.rust-lang.org)'s locales/en-US/tools.ftl file by running\n\n```\ncargo run dump-website\n```\n\nThe website will automatically load new teams added here, however they cannot be translated unless `tools.ftl` is also updated.\n\nYou can also print a list of users with individual access to repositories\n\n```\n# Group the accesses by repository\ncargo run dump-individual-access --group-mode repo\n\n# Group the accesses by contributor\ncargo run dump-individual-access --group-mode person\n```\n\n\n### Building the static API\n\nYou can build locally the content of `https://team-api.infra.rust-lang.org/v1/`\nby running the command:\n\n```\ncargo run static-api output-dir/\n```\n\nThe content will be placed in `output-dir/`.\n\n### Encrypting email addresses\n\nIf an email address in a list needs to be confidential it's possible to encrypt\nit. Encrypted email addresses look like this:\n\n```\nencrypted+3eeedb8887004d9a8266e9df1b82a2d52dcce82c4fa1d277c5f14e261e8155acc8a66344edc972fa58b678dc2bcad2e8f7c201a1eede9c16639fe07df8bac5aa1097b2ad9699a700edb32ef192eaa74bf7af0a@rust-lang.invalid\n```\n\nThe production key is accessible to select Infrastructure Team members, so if\nyou need to add an encrypted email address you'll need to reach out to that\nteam. The key is stored in the following parameter on AWS SSM Parameter Store:\n\n```\n/prod/sync-team/email-encryption-key\n```\n\nThe `cargo run encrypt-email` and `cargo run decrypt-email` interactive CLI\ncommands are available for infra team members to interact with encrypted\nemails. The `rust_team_data` (with the `email-encryption` feature enabled) also\nprovides a module to programmatically encrypt and decrypt.\n", "release_dates": []}, {"name": "testing-devex-team", "description": "Home of the Rust Testing DevEx team", "language": null, "license": null, "readme": "# testing-devex-team\nHome of the Rust Testing DevEx team\n", "release_dates": []}, {"name": "thanks", "description": "Celebrate Rust contributors.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Thanks!\n\n[![Build Status][status-img]][status]\n\n[status-img]: https://github.com/rust-lang/thanks/actions/workflows/ci.yml/badge.svg?branch=master\n[status]: https://github.com/rust-lang/thanks/actions/workflows/ci.yml\n\nThis is a static site generator showing people who have contributed to Rust.\n\nTo run thanks, you'll need stable Rust.\n\nThere is no need to configure anything; thanks will run everything on its own, simply `cargo run\n--release` and the site will be placed in `output`.\n\n## Refresh time\n\nThanks is configured to run every night to update the latest statistics.\n", "release_dates": []}, {"name": "this-week-in-rust", "description": "Data for this-week-in-rust.org", "language": "HTML", "license": null, "readme": "This Week in Rust\n=================\n\nContent for [this-week-in-rust.org](http://this-week-in-rust.org). Made available under CC-BY-SA.\n\nAll code Copyright 2014 Ember Arlynx, made available under [the MIT\nlicense](http://mit-license.org/).\n\n## TWiR Editors\n\n* [nellshamrell](https://github.com/nellshamrell)\n* [llogiq](https://github.com/llogiq)\n* [cdmistman](https://github.com/cdmistman)\n* [ericseppanen](https://github.com/ericseppanen)\n* [extrawurst](https://github.com/extrawurst)\n* [andrewpollack](https://github.com/andrewpollack)\n* [U007D](https://github.com/U007D) \n* [kolharsam](https://github.com/kolharsam)\n* [joelmarcey](https://github.com/joelmarcey)\n* [mariannegoldin](https://github.com/mariannegoldin)\n* [bennyvasquez](https://github.com/bennyvasquez)\n\n### Language Reviewers\n\n* [yuk1ty](https://github.com/yuk1ty) - Japanese\n* [rpruizc](https://github.com/rpruizc) - Spanish\n* [matheus-consoli](https://github.com/matheus-consoli) - Portuguese\n* [MATRIXKOO](https://github.com/MATRIXKOO) - Chinese\n* [Folyd](https://github.com/Folyd) - Chinese\n\n## PRs for next issue are now being accepted\n\nTo propose content for inclusion in the next newsletter (found in the `drafts/`\nfolder), create a new [Pull Request](https://github.com/rust-lang/this-week-in-rust/pulls) updating the relevant section in the \ndraft.\n\nAlternately, tweet us [@thisweekinrust](https://twitter.com/thisweekinrust).\n\n### What do we look for when considering whether to include something in This Week in Rust?\n\nThis Week in Rust is intended to highlight the incredible work of the Rust Community. \n\nWhat we are generally looking for includes:\n\n* how-to intros (and advanced deep dives) into Rust concepts and areas\n* Rust walkthroughs that explain concepts in different ways than well known resources like [the Rust book](https://doc.rust-lang.org/stable/book/), [Rustlings](https://github.com/rust-lang/rustlings), and [Rust by Example](https://doc.rust-lang.org/stable/rust-by-example/)\n* updates on tooling when in long form or framed as a tutorial (for more details, see what we are not looking for below)\n* Rust-related podcast episodes\n* Rust-related screenshots and videos\n* Rust meetup recordings\n* Rust meetup announcements\n* Presenter slide decks on Rust\n* Observations and thoughts on Rust and the Rust community\n* Calls for participation in Rust open source projects\n* Rust job announcements\n* and more!\n\nWhat we are generally NOT looking for includes:\n\n* Anything that violates the [Rust Community Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct)\n* Rants or anything degrading to any part or member of the Community. Rather than submitting an article about what is wrong with something, we would much rather you write something that explains how you'd make it better.\n* Duplicates of recent posts (even with the wording changed slightly)\n* Anything behind a paywall (this includes Medium's paid article / members-only mechanism)\n* Anything that requires information to be shared/captured (like an email address) in order to access\n\n**Projects/Tooling Updates**\n\nThere are further guidelines for the Projects/Tooling Updates Section\n\nWe include:\n* Updates on tooling when in long form or framed as a tutorial (this can be through a blog, through GitHub, through a newsletter, and more) - it must have a high amount of Rust specific info (examples in Rust, notes on things learned about Rust in the process of creating/updating the project, etc.)\n* Updates on tooling that call out specific contributors - it is wonderful to highlight all the great people contributing to Rust OSS projects (Note - the update still must include a high amount of Rust specific info)\n* Changelogs of projects (though we strongly prefer the changelogs be accompanied with details on the changes, guides to using the changes, etc.)\n\nWe do not include:\n* Links that are solely to a GitHub repo or crate on crates.io. While we would love to include these, there are too many being created/updated every week for us to include them all. We encourage you to write up an introduction to your project with examples, information you learned through creating the project, changes you recently made to the project, etc.\n\nNotes:\n* A small description of the project or the update in your link is encouraged (for example: FooBar 1.0: adding support for Baz)\n* We discourage submitting links and link descriptions that are solely of a commercial/sales nature\n\nThese are meant to be guidelines, if you are ever not sure about whether something should be included please feel free to open a pull request anyway and we can discuss it!\n\nThe editors of This Week in Rust do reserve the right to make the decision about whether to include something or not, but we intend to do so in a way that is as transparent as possible.\n\n## Link style guidelines:\n\nThe link text should be the same as the page's title. If the title seems to need additional context (for example, if the title is \"What's New\" and should have the project name added), please ask in the PR comments.\n\nLinks should use the most canonical form. For example, if `example.tech` redirects to `www.example.com`, then the latter is preferred.\n\nLinks should not contain unnecessary tracking parameters, e.g. `utm_source`, `utm_campaign`.\n\nSome prefixes are used, and should be placed to the left of the link.\n- `[video]` for videos\n- `[audio]` for podcasts or other audio.\n- `[series]` for articles that are one of a series.\n- 2-letter languages codes (e.g. `[ZH]`, `[ES]`, `[FR]`) for content in a language other than English.\n\n## Community sub-categories\n\nEditors will sort community links into sub-categories. The following sub-categories are currently used:\n- **Official** -- rust-lang.org blog posts and other official Rust team communications.\n- **Foundation** -- foundation.rust-lang.org blog posts and other official foundation communications.\n- **Project/Tooling Updates** -- News about the progress of a Rust project. Must be more informative than just a changelog.\n- **Newsletters** -- Regularly scheduled articles about an area of Rust development, e.g. posts titled \"This Month in ___\".\n- **Research** -- Academic Papers that are about Rust or contain significant Rust content.\n- **Observations/Thoughts** -- Articles about Rust.\n- **Rust Walkthroughs** -- Articles that include a significant amount of Rust source code, that walk the reader through building something.\n- **Miscellaneous** -- Links that don't clearly fit in other sub-categories.\n\nMost blog posts about Rust belong in **Rust Walkthroughs** if they show how something is done (including source code), otherwise **Observations/Thoughts**. Articles that don't contain much Rust content, or news articles that mention Rust, won't always be accepted, but when they are they can be placed in the **Miscellaneous** sub-category.\n\nIf a set of related links is published (e.g. from a large Rust conference), the editors may choose to invent a new category just for that issue.\n\n## How I get PR lists:\n\n```\ngit log --author=bors --since='MM/DD/YYYY 12:00PM' --until='MM/DD/YYYY 12:00PM' --pretty=oneline > ~/entropy/twir.txt\n# edit in vim to get rid of everything but PR number, copy into clipboard\nfor pr in $(xsel -ob); do firefox https://github.com/mozilla/rust/pull/$pr; sleep 0.07; done\n# wait a long time...\n# write TWIR\n```\n\nAlternatively use GitHub search:\n\n```\nhttps://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Amerged+updated%3A2014-11-03..2014-11-10\n```\n\n## How I get new contributors:\n\nUse the included `new_contribs.sh` script:\n\n  new_contribs.sh 6/21/2014\n\n## Building\n\nTo ensure consistency across development setups, we use a [Docker](https://www.docker.com) container-based\nworkflow for building the website and email newsletter. Similarly, we use a `makefile` to Ensure you have Docker installed on your system if\nyou intend to build the website or email newsletter.\n\n### Building the website\n\n*Before attempting to build the website, ensure Docker is in a running state on your system.*\n\n* Enter the `publishing/` directory:\n  ```sh\n  cd publishing\n  ```\n* Run the Docker build and website local-host command:\n  ```sh\n  make build && make generate-website && make host-content\n  ```\n* View the website locally at default http://localhost:8000, or specific posts\n  at http://localhost:8000/blog/{YEAR}/{MONTH}/{DAY}/{ISSUE}/.\n\nNote: If looking to test the website's search functionality locally, you will need to adjust the [`TESTING_LOCALLY`](https://github.com/rust-lang/this-week-in-rust/blob/dc127f17fcabbf0f058eb3d5a3febba434ddca83/pelicanconf.py#L7)\nvariable to `True`.\n\n### Building the newsletter\n\n*Before attempting to build the email newsletter, ensure Docker is in a running state on your system.*\n\n* Enter the `publishing/` directory:\n  ```sh\n  cd publishing\n  ```\n* Run the Docker build and website local-host command:\n  ```sh\n  make build && make generate-email && make host-content\n  ```\n* View the email newsletter formatting of specific posts at\n  http://localhost:8000/blog/{YEAR}/{MONTH}/{DAY}/{ISSUE}/.\n", "release_dates": []}, {"name": "thorin", "description": "DWARF packaging utility, written in Rust, supporting GNU extension and DWARF 5 package formats.", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# `thorin`\n`thorin` is an DWARF packaging utility for creating DWARF packages (`*.dwp` files) out of input\nDWARF objects (`*.dwo` files; or `*.o` files with `.dwo` sections), supporting both the pre-standard\nGNU extension format for DWARF packages and the standardized format introduced in DWARF 5.\n\n`thorin` was written as part of the implementation of Split DWARF in `rustc`. A Rust implementation\nof a DWARF packaging utility is easier to integrate into the compiler and can support features like\nloading dwarf objects from archive files (or rustc's rlibs) which are helpful in supporting\ncross-crate Split DWARF packaging in `rustc`.\n\nSee the README documents of the [`thorin` crate](thorin/README.md) and the\n[`thorin-bin` crate](thorin-bin/README.md) for usage details of the library and binary interfaces\nrespectively.\n\n## Contributing to `thorin`\nIf you want help or mentorship, reach out to us in a GitHub issue, or ask `davidtwco` or in\n`#t-compiler` on the [Rust Zulip instance](https://rust-lang.zulipchat.com/).\n\n`thorin` should always build on stable `rustc`. To build `thorin`:\n\n```shell-session\n$ cargo build\n```\n\nTo run the tests, first install the relevant dependencies:\n\n```shell-session\n$ apt install --no-install-recommends --yes llvm-13 llvm-13-tools\n$ pip install lit\n```\n\nNext, run the `lit` testsuite (replacing `/path/to/llvm/bin` with the correct path to your LLVM\ninstallation, if required):\n\n```shell-session\n$ cargo build # in debug mode..\n$ lit -v --path \"$PWD/target/debug/:/path/to/llvm/bin/\" ./tests\n$ cargo build --release # ..or in release mode\n$ lit -v --path \"$PWD/target/release/:/path/to/llvm/bin/\" ./tests\n```\n\nWe use `rustfmt` to automatically format and style all of our code. To install and use `rustfmt`:\n\n```shell-session\n$ rustup component add rustfmt\n$ cargo fmt\n```\n\n### Filing an issue\nThink you've found a bug? File an issue! To help us understand and reproduce the\nissue, provide us with:\n\n* The (preferably minimal) test case\n* Steps to reproduce the issue using the test case\n* The expected result of following those steps\n* The actual result of following those steps\n\nDefinitely file an issue if you see an unexpected panic originating from within `thorin`!\n`thorin` should never panic unless it is explicitly documented to panic in the specific\ncircumstances provided.\n\n<br>\n\n#### Name\n<sup>\n<code>thorin</code> is named after <i>Thorin Oakenshield</i> from <i>The Hobbit</i>, as Thorin is\na dwarf who leads other dwarves. <code>thorin</code> uses the <code>gimli</code> library\n(named after a dwarf from <i>Lord of the Rings</i>) to read <i>DWARF</i> format debug information,\nthe name of which is a medieval fantasy complement to <i>ELF</i>, the file format for executables\nand object files.\n</sup>\n\n<br>\n\n<sub>\nYou could also call this project <code>rust-dwp</code>, if you'd prefer that.\n</sub>\n\n<br>\n\n#### Author and acknowledgements\n<sup>\n<code>thorin</code> is authored by <a href=\"https://davidtw.co\">David Wood</a> of <i>Huawei\nTechnologies Research & Development (UK) Ltd</i>. <code>thorin</code> is maintained by the\n<a href=\"https://rust-lang.org/governance/teams/compiler\">Rust Compiler Team</a>.\n</sup>\n\n<br>\n\n<sub>\nIn addition, thanks to the authors of <code>object</code> and <code>gimli</code>, on which this\nutility depends heavily; and to <a href=\"https://github.com/philipc\">Philip Craig</a> for advice\nand reviews during initial implementation of <code>thorin</code>.\n</sub>\n\n<br>\n\n#### License\n<sup>\nLicensed under either of <a href=\"https://www.apache.org/licenses/LICENSE-2.0\">Apache License,\nVersion 2.0</a> or <a href=\"https://opensource.org/licenses/MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in\nthis crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without\nany additional terms or conditions.\n</sub>\n\n<br>\n\n#### Code of conduct\n<sup>\nWhen contributing or interacting with this project, we ask abide the\n<a href=\"https://www.rust-lang.org/en-US/conduct.html\">Rust Code of Conduct</a> and ask that you do\ntoo.\n</sup>\n", "release_dates": []}, {"name": "trait-system-refactor-initiative", "description": "The Rustc Trait System Refactor Initiative", "language": null, "license": null, "readme": "# trait-system-refactor-initiative\nThe Rustc Trait System Refactor Initiative\n", "release_dates": []}, {"name": "triagebot", "description": "Automation/tooling for Rust spaces", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Triagebot\n\nThis is the triage and team assistance bot for the rust-lang organization.\n\nPlease see the [forge] for our documentation, and feel free to contribute edits\nif you find something helpful!\n\n[forge]: https://forge.rust-lang.org/triagebot/index.html\n\n## How triagebot works\n\nTriagebot consists of a webserver with several endpoints.\nThe `/github-hook` and `/zulip-hook` endpoints receive webhook notifications from the respective services.\nTriagebot can then respond to those notifications to perform various actions such as adjusting labels.\n\nThe Triagebot webserver also includes several other endpoints intended for users to access directly, such as https://triage.rust-lang.org/agenda.\n\nTriagebot uses a Postgres database to retain some state.\nIn production, it uses [RDS](https://aws.amazon.com/rds/).\n\nThe server at https://triage.rust-lang.org/ runs on ECS and is configured via [Terraform](https://github.com/rust-lang/simpleinfra/blob/master/terraform/shared/services/triagebot/main.tf#L8).\nUpdates are automatically deployed when merged to master.\n\n## Installation\n\nTo compile the Triagebot you need OpenSSL development library to be installed (e.g. for Ubuntu-like Linux distributions `sudo apt install libssl-dev`).\n\nRun `cargo build` to compile the triagebot.\n\n## Running triagebot\n\nIt is possible to run triagebot yourself, and test changes against your own repository.\nSome developers may settle with testing in production as the risks tend to be low, but the more intrepid may find it easier to iterate separately.\n\nThe general overview of what you will need to do:\n\n1. Create a repo on GitHub to run tests on.\n2. [Configure a database](#configure-a-database)\n3. [Configure webhook forwarding](#configure-webhook-forwarding)\n4. Configure the `.env` file:\n\n   1. Copy `.env.sample` to `.env`\n   2. `GITHUB_API_TOKEN`: This is a token needed for Triagebot to send requests to GitHub. Go to GitHub Settings > Developer Settings > Personal Access Token, and create a new token. The `repo` permission should be sufficient.\n      If this is not set, Triagebot will also look in `~/.gitconfig` in the `github.oauth-token` setting.\n   3. `DATABASE_URL`: This is the URL to the database. See [Configuring a database](#configuring-a-database).\n   4. `GITHUB_WEBHOOK_SECRET`: Enter the secret you entered in the webhook above.\n   5. `RUST_LOG`: Set this to `debug`.\n\n5. Run `cargo run --bin triagebot`. This starts the http server listening for webhooks on port 8000.\n6. Add a `triagebot.toml` file to the main branch of your GitHub repo with whichever services you want to try out.\n7. Try interacting with your repo, such as issuing `@rustbot` commands or interacting with PRs and issues (depending on which services you enabled in `triagebot.toml`). Watch the logs from the server to see what's going on.\n\n### Configure a database\n\nTo use Postgres, you will need to install it and configure it:\n\n1. Install Postgres. Look online for any help with installing and setting up Postgres (particularly if you need to create a user and set up permissions).\n2. Create a database: `createdb triagebot`\n3. In the `.env` file, set the `DATABASE_URL`:\n\n   ```sh\n   DATABASE_URL=postgres://eric@localhost/triagebot\n   ```\n\n   replacing `eric` with the username on your local system.\n\n### Configure webhook forwarding\n\nI recommend at least skimming the [GitHub webhook documentation](https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks) if you are not familiar with webhooks.\nIn order for GitHub's webhooks to reach your triagebot server, you'll need to figure out some way to route them to your machine.\nThere are various options on how to do this.\nYou can poke holes into your firewall or use a proxy, but you shouldn't expose your machine to the the internet.\nThere are various services which help with this problem.\nThese generally involve running a program on your machine that connects to an external server which relays the hooks into your machine.\nThere are several to choose from:\n\n* [gh webhook](#gh-webhook) \u2014 This is a GitHub-native service. This is the easiest to use.\n* [ngrok](#ngrok) \u2014 This is pretty easy to use, but requires setting up a free account.\n* <https://smee.io/> \u2014 This is another service recommended by GitHub.\n* <https://localtunnel.github.io/www/> \u2014 This is another service recommended by GitHub.\n\n#### gh webhook\n\nThe [`gh` CLI](https://github.com/cli/cli) is the official CLI tool which I highly recommend getting familiar with.\nThere is an official extension which provides webhook forwarding and also takes care of all the configuration.\nSee [cli/gh-webhook](https://docs.github.com/en/developers/webhooks-and-events/webhooks/receiving-webhooks-with-the-github-cli) for more information on installing it.\n\nThis is super easy to use, and doesn't require manually configuring webhook settings.\nThe command to run looks something like:\n\n```sh\ngh webhook forward --repo=ehuss/triagebot-test --events=* \\\n  --url=http://127.0.0.1:8000/github-hook --secret somelongsekrit\n```\n\nWhere the value in `--secret` is the secret value you place in `GITHUB_WEBHOOK_SECRET` in the `.env` file, and `--repo` is the repo you want to test against.\n\n#### ngrok\n\nThe following is an example of using <https://ngrok.com/> to provide webhook forwarding.\nYou need to sign up for a free account, and also deal with configuring the GitHub webhook settings.\n\n1. Install ngrok.\n2. Run `ngrok http 8000`. This will forward webhook events to localhost on port 8000.\n3. Configure GitHub webhooks in the test repo you created.\n   In short:\n\n   1. Go to the settings page for your GitHub repo.\n   2. Go to the webhook section.\n   3. Click \"Add webhook\"\n   4. Include the settings:\n\n      * Payload URL: This is the URL to your Triagebot server, for example http://7e9ea9dc.ngrok.io/github-hook. This URL is displayed when you ran the `ngrok` command above.\n      * Content type: application/json\n      * Secret: Enter a shared secret (some longish random text)\n      * Events: \"Send me everything\"\n\n## License\n\nTriagebot is distributed under the terms of both the MIT license and the\nApache License (Version 2.0).\n\nSee [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n", "release_dates": []}, {"name": "types-team", "description": "Home of the \"types team\", affiliated with the compiler and lang teams.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Types Team\n\n## Scope and purpose\n\nThe **types** team is dedicated to improving the trait\nsystem implementation in rustc. This team is a collaboration\nbetween the [lang team] and the compiler team. We have a number of inter-related\ngoals:\n\n- designing new trait-related language features;\n- documenting and specifying the semantics of traits in Rust today; and,\n- improving the trait solver implementation in rustc.\n\n[lang team]: https://github.com/rust-lang/lang-team/\n\nA big part of this work is transitioning the compiler to use a\n[Chalk-style] solver, but along the way we hope to make targeted fixes\nto the existing solver where needed.\n\n[Chalk-style]: https://github.com/rust-lang-nursery/chalk\n\n## Design meetings\n\nWe hold weekly design meetings where we talk in depth about various\ntopics ([calendar event][ce-design]).  These meetings take place on Zulip (see below). The goal is\nnot just to figure out what we want to do, it's also a way to spread\nknowledge. Feel free to come and lurk!\n\n[ce-design]: https://calendar.google.com/calendar/u/0/embed?src=6u5rrtce6lrtv07pfi3damgjus@group.calendar.google.com\n\nYou'll find minutes from past meetings in [the minutes directory](minutes).\n\n## Chat forum\n\nOn [the rust-lang Zulip][z], in [the `#t-types` stream][s].\n\n[z]: https://rust-lang.zulipchat.com/\n[s]: https://rust-lang.zulipchat.com/#narrow/stream/144729-t-types\n\n## Dedicated repository\n\nDocuments related to the types team are stored on a\ndedicated repository, [rust-lang/types-team]. This repository contains\nmeeting minutes, past sprints, as well as draft RFCs and other\ndocuments.\n\n[rust-lang/types-team]: https://github.com/rust-lang/types-team\n", "release_dates": []}, {"name": "unsafe-code-guidelines", "description": "Forum for discussion about what unsafe code can and can't do", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "\nUCG - Rust's Unsafe Code Guidelines\n===\n\nThe purpose of this repository is to collect and discuss all sorts of questions that come up when writing unsafe code.\nIt is primarily used by the [opsem team](https://github.com/rust-lang/opsem-team/) to track open questions around the operational semantics, but we also track some \"non-opsem\" questions that fall into T-lang or T-type's purview, if they are highly relevant to unsafe code authors.\n\nThe [Unsafe Code Guidelines Reference \"book\"][ucg_book] is a past effort to systematize a consensus on some of these questions.\nIt is not actively maintained any more, but can still be a good source of information and references.\nNote however that unless stated otherwise, the information in the guide is mostly a \"recommendation\" and still subject to change.\n\nCurrent consensus is documented in [t-opsem FCPs](https://github.com/rust-lang/opsem-team/blob/main/fcps.md) and the [Rust Language Reference].\n\n[ucg_book]: https://rust-lang.github.io/unsafe-code-guidelines\n[Rust Language Reference]: https://doc.rust-lang.org/reference/index.html\n\n## See also\n\nThe [Rustonomicon] is a draft document discussing unsafe code. It is intended to\nbe brought into agreement with the content here. It represents an organized\neffort to explain how to write Rust code, rather than a reference.\n\n[Rustonomicon]: https://doc.rust-lang.org/nightly/nomicon/\n\n## Code of Conduct and licensing\n\nAll interactions on this repository (whether on issues, PRs, or\nelsewhere) are governed by the [Rust Code of\nConduct](CODE_OF_CONDUCT.md).\n\nFurther, all content on this repository is subject to the standard\n[Rust](LICENSE-MIT) [licensing](LICENSE-APACHE).\n", "release_dates": []}, {"name": "vscode-rust", "description": "Rust extension for Visual Studio Code", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Rust support for Visual Studio Code (deprecated)\n\n[![](https://vsmarketplacebadge.apphb.com/version/rust-lang.rust.svg)](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust)\n[![VSCode + Node.js CI](https://img.shields.io/github/workflow/status/rust-lang/rls-vscode/VSCode%20+%20Node.js%20CI.svg?logo=github)](https://github.com/rust-lang/rls-vscode/actions?query=workflow%3A%22VSCode+%2B+Node.js+CI%22)\n\n----\n\n> **Warning**\n> # This extension is no longer maintained.\n> This has been replaced by the [**rust-analyzer extension**](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer).\n\n-----\n\nAdds language support for Rust to Visual Studio Code. Supports:\n\n* code completion\n* jump to definition, peek definition, find all references, symbol search\n* types and documentation on hover\n* code formatting\n* refactoring (rename, deglob)\n* error squiggles and apply suggestions from errors\n* snippets\n* build tasks\n\nRust support is powered by a separate [language server](https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/) -\neither by the official [Rust Language Server](https://github.com/rust-lang/rls) (RLS) or\n[rust-analyzer](https://github.com/rust-analyzer/rust-analyzer), depending on the user's\npreference. If you don't have it installed, the extension will install it for\nyou (with permission).\n\nThis extension is built and maintained by the Rust\n[IDEs and editors team](https://www.rust-lang.org/en-US/team.html#Dev-tools-team).\nOur focus is on providing\na stable, high quality extension that makes the best use of the respective language\nserver. We aim to support as many features as possible, but our priority is\nsupporting the essential features as well as possible.\n\nFor support, please file an\n[issue on the repo](https://github.com/rust-lang/rls-vscode/issues/new)\nor talk to us [on Discord](https://discordapp.com/invite/rust-lang).\nFor RLS, there is also some [troubleshooting and debugging](https://github.com/rust-lang/rls/blob/master/debugging.md) advice.\n\n## Contribution\n\nContributing code, tests, documentation, and bug reports is appreciated! For\nmore details see [contributing.md](contributing.md).\n\n\n## Quick start\n\n1. Install [rustup](https://www.rustup.rs/) (Rust toolchain manager).\n2. Install this extension from [the VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust)\n  (or by entering `ext install rust-lang.rust` at the command palette <kbd>Ctrl</kbd>+<kbd>P</kbd>).\n3. (Skip this step if you already have Rust projects that you'd like to work on.)\n  Create a new Rust project by following [these instructions](https://doc.rust-lang.org/book/ch01-03-hello-cargo.html).\n4. Open a Rust project (`File > Add Folder to Workspace...`). Open the folder for the whole\n  project (i.e., the folder containing `Cargo.toml`, not the `src` folder).\n5. You'll be prompted to install the Rust server. Once installed, it should start\n  analyzing your project (RLS will also have to to build the project).\n\n\n## Configuration\n\nThis extension provides options in VSCode's configuration settings. These\ninclude `rust.*`, which are passed directly to RLS, and the `rust-client.*`\n, which mostly deal with how to spawn it or debug it.\nYou can find the settings under `File > Preferences > Settings`; they all\nhave IntelliSense help.\n\nExamples:\n\n* `rust.show_warnings` - set to false to silence warnings in the editor.\n* `rust.all_targets` - build and index code for all targets (i.e., integration tests, examples, and benches)\n* `rust.cfg_test` - build and index test code (i.e., code with `#[cfg(test)]`/`#[test]`)\n* `rust-client.channel` - specifies from which toolchain the RLS should be spawned\n\n> **_TIP:_** To select the underlying language server, set `rust-client.engine` accordingly!\n\n## Features\n\n### Snippets\n\nSnippets are code templates which expand into common boilerplate. IntelliSense\nincludes snippet names as options when you type; select one by pressing\n<kbd>enter</kbd>. You can move to the next snippet 'hole' in the template by\npressing <kbd>tab</kbd>. We provide the following snippets:\n\n* `for` - a for loop\n* `macro_rules` - declare a macro\n* `if let` - an `if let` statement for executing code only when a pattern matches\n* `spawn` - spawn a thread\n* `extern crate` - insert an `extern crate` statement\n\nThis extension is deliberately conservative about snippets and doesn't include\ntoo many. If you want more, check out\n[Trusty Rusty Snippets](https://marketplace.visualstudio.com/items?itemName=polypus74.trusty-rusty-snippets).\n\n### Tasks\n\nThe plugin provides tasks for building, running, and testing using the relevant\ncargo commands. You can build using <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>b</kbd>(Win/Linux), <kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>b</kbd>(macOS).\nAccess other tasks via `Run Task` in the command palette.\n\nThe plugin writes these into `tasks.json`. The plugin will not overwrite\nexisting tasks, so you can customise these tasks. To refresh back to the\ndefaults, delete `tasks.json` and restart VSCode.\n\n\n## Format on save\n\nTo enable formatting on save, you need to set the `editor.formatOnSave` setting\nto `true`. Find it under `File > Preferences > Settings`.\n\n\n## Requirements\n\n* [Rustup](https://www.rustup.rs/),\n* A Rust toolchain (the extension will configure this for you, with permission),\n* `rls`, `rust-src`, and `rust-analysis` components (the extension will install\n  these for you, with permission). Only `rust-src` is required when using\n  rust-analyzer.\n\n\n## Implementation\n\nBoth language servers can use Cargo to get more information about Rust projects\nand both use [`rustfmt`](https://github.com/rust-lang/rustfmt/) extensively to\nformat the code.\n\n[RLS](https://github.com/rust-lang/rls) uses Cargo and also the Rust compiler\n([`rustc`](https://github.com/rust-lang/rust/)) in a more direct fashion, where\nit builds the project and reuses the data computed by the compiler itself. To\nprovide code completion it uses a separate tool called\n[`racer`](https://github.com/racer-rust/racer).\n\n[Rust Analyzer](https://github.com/rust-analyzer/rust-analyzer) is a separate\ncompiler frontend for the Rust language that doesn't use the Rust compiler\n([`rustc`](https://github.com/rust-lang/rust/)) directly but rather performs its\nown analysis that's tailor-fitted to the editor/IDE use case.\n", "release_dates": ["2020-05-13T16:58:24Z", "2020-05-13T11:27:22Z", "2020-05-12T11:40:34Z", "2020-05-07T00:38:51Z"]}, {"name": "web-presence-team", "description": "Home of the Web Presence Team", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Web Presence Team\n\nThis is the home of the Web Presence Team.\n", "release_dates": []}, {"name": "wg-allocators", "description": "Home of the Allocators working group: Paving a path for a standard set of allocator traits to be used in collections!", "language": null, "license": null, "readme": "# Rust Allocators Working Group\n\nThis WG aims to:\n\n* Define traits and other APIs for memory allocators,\n  with the unstable [`std::alloc::Allocator`] trait as a starting point.\n\n* Make collections such as `Vec<T>` able to use any allocator,\n  most likely through an additional type parameter.\n  \nDiscussion has historically happened in (at least) [RFC #1398], [tracking issue #32838], and [tracking issue #42774].\nHowever individual GitHub threads become hard to navigate as they get longer.\nThis repository\u2019s issue tracker allows discussing and resolving various topics separately.\n\n\n## Getting involved\n\nTo be notified of every issue and pull request in this repository, try GitHub\u2019s *Watch* button.\n\nFor lower-latency discussion, we have the [`t-libs/wg-allocators`] stream on Zulip.\n\nTo try out different proposals, [Tim](https://github.com/TimDiekmann) has created a crate at [TimDiekmann/alloc-wg](https://github.com/TimDiekmann/alloc-wg). For more information on this consult the [readme](https://github.com/TimDiekmann/alloc-wg/blob/master/README.md).\n\n\n[`std::alloc::Allocator`]: https://doc.rust-lang.org/std/alloc/trait.Allocator.html\n[RFC #1398]: https://github.com/rust-lang/rfcs/pull/1398 \"Allocators, take III\"\n[tracking issue #32838]: https://github.com/rust-lang/rust/issues/32838 \"Allocator traits and std::heap\"\n[tracking issue #42774]: https://github.com/rust-lang/rust/issues/42774 \"Tracking issue for custom allocators in standard collections\"\n[`t-libs/wg-allocators`]: https://rust-lang.zulipchat.com/#narrow/stream/197181-t-libs.2Fwg-allocators\n", "release_dates": []}, {"name": "wg-async", "description": "Working group dedicated to improving the foundations of Async I/O in Rust", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# wg-async\n\nWorking group dedicated to improving the foundations of async I/O in Rust\n\nPlease visit our [rendered page] for more information!\n\n[rendered page]: https://rust-lang.github.io/wg-async/\n", "release_dates": []}, {"name": "wg-binary-size", "description": "Improving the binary size of Rust programs and libraries", "language": null, "license": null, "readme": "# wg-binary-size\nImproving the binary size of Rust programs and libraries\n\nLook at [this HackMD page](https://hackmd.io/BPiMVIcYQ_2svaAsOMktog) for more information.\n", "release_dates": []}, {"name": "wg-cargo-std-aware", "description": "Repo for working on \"std aware cargo\"", "language": null, "license": null, "readme": "# std Aware Cargo\n\nThis repo is a place to focus discussion and work on \"`std` Aware Cargo\". This\nis a feature to allow users of [Cargo](https://github.com/rust-lang/cargo/) to\nbuild the Rust standard library locally, instead of using the pre-built\nartifacts shipped with Rust.\n\nWe plan to work on multiple RFCs, targeted to specific changes. Work on an\nexperimental implementation will also begin immediately to help work through\nissues.\n\n## Use Cases\n\nIt is possible that we will not address all of these use cases, but these are\nsome of the things we are thinking about.\n\n1. Build the standard library with your project with custom profile settings.\n\n   This allows you to use the standard library with different optimization\n   levels, debug settings, etc. [See more.](https://github.com/rust-lang/wg-cargo-std-aware/issues/2)\n\n2. Build the standard library (particularly libcore) for an unsupported\n   target.\n\n   [See more.](https://github.com/rust-lang/wg-cargo-std-aware/issues/3)\n\n3. Build the standard library with different `cfg` settings.\n\n   This may be used to disable parts of the standard library, or to select\n   different behaviors. [See more.](https://github.com/rust-lang/wg-cargo-std-aware/issues/4)\n\n4. Specify explicit dependencies on sysroot crates in `Cargo.toml`.\n\n   Primarily this is to remove the need for `extern crate`. [See\n   more.](https://github.com/rust-lang/wg-cargo-std-aware/issues/5)\n\n## MVP Implementation\n\nAn initial version is available on the latest Rust nightly releases. This\nversion is very minimal, with a simple `-Z` flag to enable. There are a large\nnumber of known issues with this implementation, and it is not intended to\nwork for all targets and should not be used for anything other than\nexperimentation and testing.\n\nDocumentation may be found at: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n\n## RFCs\n\nIt is yet to be determined exactly which RFCs will be written to cover the\nenhancements we want to make. As a rough outline, the following are\npossibilities:\n\n- Syntax for specifying standard library dependencies in Cargo. [#5](https://github.com/rust-lang/wg-cargo-std-aware/issues/5)\n- Standard library portability. [#8](https://github.com/rust-lang/wg-cargo-std-aware/issues/8)\n- Target specification. [#6](https://github.com/rust-lang/wg-cargo-std-aware/issues/6)\n\n## Getting involved\n\nEveryone is encouraged to jump in to [the issue tracker\nhere](https://github.com/rust-lang/wg-cargo-std-aware/issues/) to discuss\nspecific points. If it looks like something is missing, feel free to open a\nnew issue or leave a comment.\n\nAt some point in the future, we will likely start working on the RFCs. If you\nare interested in helping with that, follow and comment on [one of the\nissues](https://github.com/rust-lang/wg-cargo-std-aware/issues?q=is%3Aopen+is%3Aissue+label%3ARFC).\n\nOnce implementations are available on nightly, helping to test it out is very\nvaluable.\n\nThe Cargo team can also be reached on [#t-cargo on\nZulip](https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo).\n\n## History\n\nThere have been various requests and efforts over the years to define `std`\nAware Cargo and to support building the standard library:\n\n- [RFC 1133 proposal](https://github.com/rust-lang/rfcs/pull/1133)\n- [RFC 2663 proposal](https://github.com/rust-lang/rfcs/pull/2663)\n    - [Pre-RFC discussion](https://github.com/jamesmunns/rfcs/pull/1)\n- [#4959](https://github.com/rust-lang/cargo/issues/4959) \u2014\u00a0RFE to add Xargo to Cargo\n- [#5002](https://github.com/rust-lang/cargo/issues/5002) \u2014\u00a0Explicit standard\n  library dependencies\n- [#5003](https://github.com/rust-lang/cargo/issues/5003) \u2014\u00a0Implicit standard\n  library dependencies\n- [Xargo](https://github.com/japaric/xargo)\n- [cargo-xbuild](https://github.com/rust-osdev/cargo-xbuild)\n", "release_dates": []}, {"name": "wg-debugging", "description": "Work on debugging Rust code, under the compiler team.", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# wg-debugging\n\nThis working group aims to improve the experience of debugging Rust code.\n\n## Getting involved\n\nDiscussion and triage meetings happen on Zulip in the [#t-compiler/wg-debugging](https://rust-lang.zulipchat.com/#narrow/stream/317568-t-compiler.2Fwg-debugging) channel.\nStop by and say hello!\n", "release_dates": []}, {"name": "wg-governance", "description": null, "language": null, "license": null, "readme": "# Governance Working Group\n![working group status: active](https://img.shields.io/badge/status-active-brightgreen.svg) [![zulip: #wg-governance](https://img.shields.io/badge/zulip-%23wg--governance-purple.svg)][zulip]\n\n## _[see the Charter][charter]_\n\n- **Zulip Stream:** [#wg-governance][zulip]\n- **Meeting Agenda:** See the [\"Active Discussion\" column in the WG Governance Project Board](https://github.com/rust-lang/wg-governance/projects/5)\n\n## How can I get involved?\n\n_[See our current list of members here](https://www.rust-lang.org/governance/teams/core#wg-governance)._\n\nIf you'd like to get involved, the best idea right now is to introduce yourself\nin our [zulip stream][zulip] \u2014 and perhaps consider attending the next triage meeting to get involved.\n\n## Work style & Meetings\n\nWe mainly use [Github issues][issues] to organise our work, as well as discuss changes on [Zulip].\n\nWe have a bi-weekly meeting, typically focused on single item in the agenda, with a rotating chair for\nhandling the meeting. It takes place every other Thursday 18:00 GMT (starting Feburary 27th 2020) on\nZulip. Attendance is not mandatory but we expect to update the tickets with the latest information\nleading to it, so the triage can check it off and archive, postpone or re-assign it accordingly.\n\n[zulip]: https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance\n[charter]: CHARTER.md\n[issues]: https://github.com/rust-lang/wg-governance/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n", "release_dates": []}, {"name": "wg-grammar", "description": "Where the work of WG-grammar, aiming to provide a canonical grammar for Rust, resides", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# wg-grammar\n\nThis is the home for the Rust Grammar Working Group. The goal of the working\ngroup is to satisfy [RFC 1331] and produce a testable, canonical grammar for\nthe Rust language. The primary audiences for the grammar are:\n\n- Rust RFC authors who wish to propose and communicate changes.\n- rustc and Rust tool developers who need an authoritative definition of the\n  grammar.\n- To assist documentation efforts to communicate valid Rust syntax to users,\n  and to facilitate the [Rust language specification].\n\nThe grammar tools produced here are not intended to be used directly within\nrustc, or any other existing tools.\n\n## Meeting Schedule\n\nMeetings take place on the [#wg-grammar channel on Discord][discord] at [20:00\nCET][time] every other Wednesday. Feel free to drop by the Discord channel if\nyou are interested!\n\n[discord]: https://discord.gg/dj9NjJR\n[time]: https://time.is/compare/2000_in_CET\n\n## Test Suite\n\nThis project includes a executable binary for exercising the grammar. Use\n`cargo run` to build and run it. Using `--release` is encouraged as it is many\ntimes faster. It supports several subcommands to point it at different files\nor directories to examine. For example, if you check out the submodule\n(explained below), you can run the tests with the following command:\n\n    cargo run --bin coverage --release -- dir external/rust/src\n\nThis repository includes a submodule to the main rust repo to use as a\ncollection of Rust code to test against the grammar. The command `git\nsubmodule update --init` may be used to fetch it. However, it is not necessary\nand you may run the tool against any collection of Rust code at your disposal.\n\n### Snapshot tests\n\nAdditionaly, a number of [snapshot tests](https://docs.rs/insta/*/insta/#how-it-operates)\nare maintained in [testdata](testdata). These files are named according to the\nconvention of `<production>.<test-name>.input`, and the parse forest that they\nproduce is tracked in [src/bin/snapshots](src/bin/snapshots). The tests are run with:\n\n    cargo run --bin snapshots --release\n\nOnce a snapshot is present for a given production, that production is,\nto the best of the maintainers' ability, considered \"complete\"\nin terms of its structure.\n\nNote, however, that this is a shallow and non-transitive property:\nif e.g. `Expr` is tested, the structural completeness extends only\nto `Expr` itself and not to `OuterAttr` nor `ExprKind`.\n\nA test may also have the name `<production>.<variant>.<test-name>.input`,\nin which case only that variant should be considered tested and marked\n\"complete\" by that test case.\n\nAt all times we reserve the right to change parse forests that do not produce\nunique parse trees, and to disambiguate tested parse forests to a subset.\n\n## Links\n\n- [Meeting notes](misc/meeting-notes.md)\n- [Resources](misc/resources.md)\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n\n[RFC 1331]: https://github.com/rust-lang/rfcs/blob/master/text/1331-grammar-is-canonical.md\n[Rust language specification]: https://github.com/rust-lang-nursery/reference/\n", "release_dates": []}, {"name": "wg-incr-comp", "description": "Home repo for the compiler team incremental compilation working group", "language": null, "license": null, "readme": "# wg-incr-comp\nHome repo for the compiler team incremental compilation working group\n", "release_dates": []}, {"name": "wg-macros", "description": "Home of the Rust Macros Working Gruop", "language": null, "license": null, "readme": "# wg-macros\nHome of the Rust Macros Working Gruop\n", "release_dates": []}, {"name": "wg-security-response", "description": "Documentation for the Rust Security Response WG", "language": "Shell", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Rust's Security Response WG\n\nThis repository is intended to document the procedures of Rust's Security\nResponse WG.\n\nIf you're looking for the Rust language security policy, [go here][policy]. If\nyou're looking to report a vulnerability, do not open an issue in this\nrepository, instead follow Rust's [security policy][policy].\n\n[policy]: https://www.rust-lang.org/policies/security\n\n## Documentation\n\n* [Handling a security report](docs/handling-reports.md)\n", "release_dates": []}, {"name": "www.rust-lang.org", "description": "The home of the Rust website", "language": "Fluent", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# www.rust-lang.org\n> the home of the rust website\n\n![CI](https://github.com/rust-lang/www.rust-lang.org/workflows/CI/badge.svg)\n\n* [**View Staging (master)**](http://www-staging.rust-lang.org)\n\n## Development\n\n### Running the app locally\n\n1. Install `cargo watch` by running `cargo install cargo-watch` in your terminal.\n\n2. To build the app and run the server, run `cargo watch -x run` in your terminal.\n\n3. Navigate to http://localhost:7878 in your browser. If you make any updates to\n   the styles, or any other project files, `cargo watch` will automatically\n   restart the server for you, all you have to do is refresh your browser to see\n   your changes.\n\n### Where to edit\n\n- If you would like to edit styles, you should edit [`src/styles/app.scss`](src/styles/app.scss). \n- If you would like to update group data, you should edit the `yml` files in [`src/data/`](src/data/).\n- If you would like to edit page content, you should edit the `hbs` files in [`templates`](templates).\n\n### Contributing\n\nPlease read our [`CONTRIBUTING.md`](CONTRIBUTING.md) before submitting a PR!\n\n### Deployment\n\nwww.rust-lang.org is currently hosted on Heroku. The `master` branch is\nautomatically deployed to [www-staging.rust-lang.org](https://www-staging.rust-lang.org)\nand the `deploy` branch is a snapshot of `master` that is manually updated and\nautomatically deployed to www.rust-lang.org .\n", "release_dates": []}, {"name": "zsh-config", "description": "zsh configuration for Rust", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": []}, {"name": "zulip_archive", "description": "A tool for archiving and displaying Zulip chat channels.", "language": "HTML", "license": null, "readme": "# Zulip Archive\n\nThis repository maintains an archive of the rust-lang zulip, using GitHub\nactions via the scripts in https://github.com/zulip/zulip-archive.\n", "release_dates": []}]