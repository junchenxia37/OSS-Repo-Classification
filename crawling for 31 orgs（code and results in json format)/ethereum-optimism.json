[{"name": ".github", "description": "[Optimism] Default GitHub configuration files", "language": null, "license": null, "readme": "# Community Health Files\nThis repository contains our default issue templates & other important community documents.\n\nSee: https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/creating-a-default-community-health-file\n", "release_dates": []}, {"name": "12-12-migration-rehearsal", "description": null, "language": null, "license": null, "readme": "# 12-12-migration-rehearsal\n\nThis repository contains a set of scripts to help you set up infrastructure for our public migration rehearsal on December 12th. It will be deleted once the rehearsal is over.\n\nThe configuration files in this repo is designed to be a template for your own infrastructure. They do not run out of the box. Some values will be provided on migration day; these can be found between angle brackets (`<>`) in the config files. Please refer to the migration Notion document for information on exactly which values will be provided on migration day, as well as a more in-depth overview of how the migration will work.\n\nIf you have feedback, please message us on Slack or Discord.", "release_dates": []}, {"name": "asterisc", "description": "Work in progress RISC-V interactive fraud-proof tech", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Asterisc\n\nAsterisc is an alternative fault-proof VM for OP Stack that proves execution of a RISC-V program with an interactive fraud-proof.\n\nThe interface of the Asterisk binary is essentially the same as Cannon for op-challenger compatibility; therefore, the binary commands implementation is based on [Cannon](https://github.com/ethereum-optimism/optimism/tree/develop/cannon).\n\n*Deploy/run this at your own risk, this is highly experimental software*\n\n## Work in progress\n\nThis project is a work in progress. Maybe 80% complete.\n\n## Getting started\n\n- Read the [docs](./docs).\n- Build the smart-contracts with foundry.\n- Compile the `tests/go-tests` (see [`Makefile`](./tests/go-tests/Makefile)) for binaries used by Go tests.\n- Run the `rvgo` tests. All onchain and offchain execution is covered by standard RISC-V unit-tests\n\n## How does it work?\n\nInteractively different parties can agree on a common prefix of the execution trace states,\nand the execution first step where things are different.\n\nAsterisc produces the commitments to the memory, register, CSR and VM state during the execution trace,\nand emulates the disputed step inside the EVM to determine the correct state after.\n\nAsterisc consists of two parts:\n- `rvgo`: Go implementation of Risc-V emulator with tooling\n  - Fast-mode: Emulate 1 instruction per step, directly on a VM state\n  - Slow-mode: Emulate 1 instruction per step, on a VM state-oracle.\n  - Tooling: merkleize VM state, collect access-list of a slow-mode step, diff VM merkle-trees\n- `rvsol`: Solidity/Yul mirror of Go Risc-V slow-mode step that runs with access-list as input\n\nAll VM register state is compact enough to be proven as a single preimage, with a binary merkle-tree for 64-bit memory.\n\n### Why use Yul in solidity?\n\nThe use of YUL / \"solidity assembly\" is very convenient because:\n- it offers pretty `switch` statements\n- it uses function calls, no operators, that can be mirrored exactly in Go\n- it preserves underflow/overflow behavior: this is a feature, not a bug, when emulating an ALU and registers.\n- it operates on unsigned word-sized integers only: no typed data, just like registers don't have types.\n  - In Go it is typed `U64` and `U256` for sanity, but it's all `uint256` words in slow mode.\n\n### Why fast and slow mode?\n\nEmulating a program on top of a merkleized state structure is expensive.\nWhen bisecting a program trace, you only need to produce a commitment to a few intermediate states, not all of them.\n\nNote that slow mode and fast mode ALUs can be implemented *exactly the same*, just with different u64/u256 implementations.\nThe slow mode matches the smart-contract behavior 1:1 and is useful for building the memory merkle-proof\nand having a Go mirror of the smart-contract behavior for testing/debugging in general.\n\n## RISC-V subset support\n\n- `RV32I` support - 32 bit base instruction set\n  - `FENCE`, `ECALL`, `EBREAK` are hardwired to implement a minimal subset of systemcalls of the linux kernel\n    - Work in progress. All syscalls used by the Golang `risc64` runtime. \n- `RV64I` support\n- `RV32M`+`RV64M`: Multiplication support\n- `RV32A`+`RV64A`: Atomics support\n- `RV{32,64}{D,F,Q}`: no-op: No floating points support (since no IEEE754 determinism with rounding modes etc., nor worth the complexity)\n- `Zifencei`: `FENCE.I` no-op: No need for `FENCE.I`\n- `Zicsr`: no-op: some support for Control-and-status registers may come later though.\n- `Ztso`: no-op: no need for Total Store Ordering\n- `RVC`: compact instructions - work-in-progress, to support Rust compiler output.\n- other: revert with error code on unrecognized instructions\n\nWhere necessary, the non-supported operations are no-ops that allow execution of the standard Go runtime, with disabled GC.\n\n## Contributing\n\nThe primary purpose of Asterisc is to run a Go program to fraud-proof an optimistic rollup.\n\nThis program can include the go-ethereum EVM for an EVM-equivalent rollup fraud proof,\nbut may also be a totally different RISC-V program.\n\nIf you are one of these bespoke other programs to fraud-proof, please upstream fixes,\nbut do not expect support if you diverge from the general design direction:\n- Simplicity and security with minimalism\n- First-class Golang support\n- Mirror Solidity and Go step implementations\n\nAsterisc may be usable to fraud-proof Rust programs or bespoke execution-environments in the future,\nbut doing so should stay stupid-simple & not negatively affect its primary purpose.\n\n## Asterisc history\n\nThis project originally started as an experimental spare-time project by @protolambda, in January 2023.\nThis started with support of proving single-threaded Go programs, offchain in Go and onchain in Yul.\nThe project helped inform a multi-proof system, a critical step towards Stage 2 rollup security.\n\nThe end-game (pre-ZK) is for Ethereum L2 optimistic rollups to embed multiple fraud-proof modules to function as a \"committee\":\nif one of the members is corrupted due to a bug/vulnerability, then the system as a whole stays stable without rollbacks or human intervention.\nSo Asterisc aims to complement other fraud-proof systems, and not to replace them.\n\nAsterisc has been transferred to the Optimism GitHub org in January 2024,\nto push forward the multi-proof OP-Stack vision with collective Optimism engineering effort.\n\n## Docs\n\n- [Go support](./docs/golang.md): relevant info about the Go runtime / compiler to support it\n- [RISC-V resources](./docs/riscv.md): RISC-V instruction set specs, references and notes\n- [Toolchain notes](./docs/toolchain.md): RISC-V and Go toolchain help\n\n## Why not X?\n\n### Why not Cannon?\n\n[Cannon](https://github.com/ethereum-optimism/cannon/), originally by [`geohot`](https://github.com/geohot/) and\nnow maintained by Optimism does the same thing, but differently.\nCannon is 32-bit, runs MIPS, does not support threads, and memory reads/writes happen in a single execution step.\n\nAsterisc aims to be an alternative to this, and more future-compatible: RISC-V is gaining adoption unlike MIPS,\nand with 64 bit operations and concurrent but deterministic threads it may support more programs.\n\n### Why not Cartesi?\n\n[Cartesi](https://github.com/cartesi/) has a much larger scope of RISC-V fraud-proving a full machine,\nincluding a lot more features. More features = more complexity however, which can form a risk.\n\nAsterisc aims to be more minimal, simple and easy to audit. By running a single process,\nand hardwiring only the necessary systemcalls, the complexity of supporting all the RISC-V instruction set extensions \nand running a full linux kernel or multi-process system is avoided.\n\n### Why not web-assembly?\n\nA fraud-proof of Go with a web-assembly runtime is already being developed by Arbitrum,\nalthough with a business-source license and with a transformation to \"WAVM\":\nnot generic enough to use it for other purposes.\n\nAsterisc aims to be open for anyone to use with MIT license.\n\n## License\n\nMIT, see [`LICENSE` file](./LICENSE).\n", "release_dates": []}, {"name": "axos", "description": "Portable no-std Derivation Pipeline engineered in pure Rust", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# axos\n\n[![CI Build Status]][actions]\n[![Release]][actions]\n[![Tag Build Status]][actions]\n[![License]][mit-license]\n[![Docs]][Docs-rs]\n[![Latest Version]][crates.io]\n[![no_std supported][no_std]][nostd]\n[![rustc 1.72.1+]][Rust 1.72.1]\n\n[CI Build Status]: https://img.shields.io/github/actions/workflow/status/ethereum-optimism/axos/ci.yml?branch=main&label=build\n[Tag Build Status]: https://img.shields.io/github/actions/workflow/status/ethereum-optimism/axos/tag.yml?branch=main&label=tag\n[Release]: https://img.shields.io/github/actions/workflow/status/ethereum-optimism/axos/release.yml?branch=main&label=release\n[actions]: https://github.com/ethereum-optimism/axos/actions?query=branch%3Amain\n[Latest Version]: https://img.shields.io/crates/v/axos.svg\n[crates.io]: https://crates.io/crates/axos\n[rustc 1.72.1+]: https://img.shields.io/badge/rustc_1.72.1+-lightgray.svg\n[Rust 1.72.1]: https://blog.rust-lang.org/2023/09/19/Rust-1.72.1.html\n[License]: https://img.shields.io/badge/license-MIT-7795AF.svg\n[mit-license]: https://github.com/ethereum-optimism/axos/blob/main/LICENSE.md\n[Docs-rs]: https://docs.rs/axos/\n[Docs]: https://img.shields.io/docsrs/axos.svg?color=319e8c&label=docs.rs\n[no_std]: https://img.shields.io/badge/no__std-tested-green.svg\n[nostd]: https://docs.rust-embedded.org/book/intro/no-std.html#summary\n[refcell]: https://axos.refcell.org\n\n**Portable no-std Derivation Pipeline engineered in pure Rust** https://github.com/ethereum-optimism/axos/labels/alpha\n\n![](./etc/banner.png)\n\n**[Install](#usage)**\n| [Usage](#usage)\n| [Development](#developing)\n| [Crate Docs][crates.io]\n| [Specs][refcell]\n| [Reference][Docs-rs]\n| [Contributing](#contributing)\n| [License](#license)\n\n## What is axos?\n\nPortable no-std Derivation Pipeline engineered in pure Rust.\n\n## Usage\n\n`axos` is meant to be used as a library with [cargo][crates.io].\nAdd it to your project with [`cargo add`](https://github.com/rust-lang/cargo/tree/master/src/cargo/ops/cargo_add).\n\n```text\ncargo add axos\n```\n\n## Developing\n\nTo get started locally, make sure to have [`just`][just] installed.\nThis will allow you to get up and running by executing the `just`\ncommand in the root of the `axos` repository. This will run the\nfollowing `Justfile` targets:\n\n- *fmt*: Formats all rust files with [rustfmt][fmt].\n- *clippy*: Lints all targets with [clippy][clippy]. (all features)\n- *tests*: Runs all workspace tests with [nextest][nextest]. (all features)\n\nTo run the `axos` derivation pipeline as a binary, there is a convenience\nbinary crate `axt`, inside [`./bins/`][bins], that can run `axos` using\nmock data, an offline provider, or with live chain data. _Just_ run `axt`\nin mock provider mode using the `axt` target: `just axt`.\n\n[bins]: ./bins/\n[nextest]: https://github.com/nextest-rs/nextest\n[clippy]: https://github.com/rust-lang/rust-clippy\n[fmt]: https://github.com/rust-lang/rustfmt\n[just]: https://github.com/casey/just\n\n## Contributing\n\nContributions to `axos` are welcome and highly appreciated.\n\nWhen opening a pull request or issue, please provide concise and\ndescriptive detail such that anyone with little context reading your\nissue or reviewing your pull request can easily understand and\nprovide meaningful feedback.\n\nBefore opening a pull request, make sure all tests pass. Execute `just`\nto run the default Justfile target, which formats, lints, and tests\nall rust files in the cargo workspace. If the `just` command succeeds\nlocally, ci will likely pass in your pull request.\n\n## Troubleshooting\n\nPlease check existing issues for similar bugs or\n[open an issue](https://github.com/ethereum-optimism/axos/issues/new)\nif no relevant issue already exists.\n\n## License\n\nFully licensed under the [MIT License](LICENSE.md).\n", "release_dates": ["2023-11-16T22:29:37Z"]}, {"name": "batch-submitter", "description": "[Optimism] Batches go zoom", "language": "TypeScript", "license": null, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Batch Submitter\n\nContains an executable batch submitter service which watches L1 and a local L2 node and submits batches to the\n`CanonicalTransactionChain` & `StateCommitmentChain` based on its local information.\n\n## Configuration\nAll configuration is done via environment variables. See all variables at [.env.example](.env.example); copy into a `.env` file before running.\n\n## Building & Running\n1. Make sure dependencies are installed just run `yarn` in the base directory\n2. Build `yarn build`\n3. Run `yarn start`\n\n## Controlling log output verbosity\nBefore running, set the `DEBUG` environment variable to specify the verbosity level. It must be made up of comma-separated values of patterns to match in debug logs. Here's a few common options:\n* `debug*` - Will match all debug statements -- very verbose\n* `info*` - Will match all info statements -- less verbose, useful in most cases\n* `warn*` - Will match all warnings -- recommended at a minimum\n* `error*` - Will match all errors -- would not omit this\n\nExamples:\n* Everything but debug: `export DEBUG=info*,error*,warn*`\n* Most verbose: `export DEBUG=info*,error*,warn*,debug*`\n\n## Testing & linting\n\n### Local\n\n- Run unit tests with `yarn test`\n- See lint errors with `yarn lint`; auto-fix with `yarn lint --fix`\n\n### Submission\n\nYou may test a submission locally against a local Hardhat fork. \n\n1. Follow the instructions [here](https://github.com/ethereum-optimism/hardhat) to run a Hardhat node. \n2. Change the Batch Submitter `.env` field `L1_NODE_WEB3_URL` to the local Hardhat url. Depending on which network you are using, update `ADDRESS_MANAGER_ADDRESS` according to the [Regenesis repo](https://github.com/ethereum-optimism/regenesis).\n3. Also check `L2_NODE_WEB3_URL` is correctly set and has transactions to submit.\n3. Run `yarn build` to build your changes.\n4. Start Batch Submitter with `yarn start`. It will automatically start submitting pending transactions from L2.\n", "release_dates": ["2021-04-09T18:42:20Z", "2021-04-05T22:45:17Z", "2021-03-29T19:47:47Z", "2021-03-15T23:49:37Z", "2021-03-10T18:28:48Z", "2021-01-16T04:35:14Z", "2021-01-15T02:11:17Z", "2021-01-14T03:21:46Z", "2021-01-07T04:15:22Z"]}, {"name": "binary_signer", "description": "This project is mainly for google binary authorization signing", "language": "Python", "license": null, "readme": "# Python Project for Secure Image Management\n\nThis project provides a comprehensive Python script for managing container images within a secure environment, leveraging Google Cloud services such as Binary Authorization and Container Analysis. It includes functionalities for sending HTTP requests, executing shell commands, generating and verifying image descriptions, attestation payloads, and more, with an emphasis on security and integrity verification.\n\n## Features\n\n- Generate and verify image descriptions and attestation payloads.\n- Utilize Google Cloud KMS for cryptographic operations.\n- Manage attestations in Google Cloud Binary Authorization.\n\n## Requirements\n\n- Python 3.6 or later.\n- Access to Google Cloud services, including Binary Authorization and Container Analysis.\n- A Google Cloud account with permissions to manage KMS, GKE, and associated APIs.\n- Before using the script you must be authenticated with a user that has the rights to perform those operations.\n```bash\ngcloud config set account <yourserviceaccount>\n```\n\n## Installation\n\n1. Clone the repository to your local machine\n2. Navigate into the project directory\n3. Install the required dependencies (it's recommended to use a virtual environment)\n\n```bash\ncd signer\npip install -r requirements.txt\n```\n\n## Usage\n\n```bash\ncd signer\n\npython sign_image.py [--image-path IMAGE_PATH] [--source-image-path SOURCE_IMAGE_PATH]\n[--destination-artifact-repository DESTINATION_ARTIFACT_REPOSITORY]\n[--attestor-project-name ATTESTOR_PROJECT_NAME] [--attestor-name ATTESTOR_NAME]\n[--attestor-key-id ATTESTOR_KEY_ID] [--signer-logging-level LOGGING_LEVEL] [--command COMMAND]\n[--platform PLATFORM]\n\n```\n\n### Options\n\n- `--image-path`: Path to the Docker image to be signed.\n- `--source-image-path`: Source image path for transfer and sign commands.\n- `--destination-artifact-repository`: Destination repository for transferring images.\n- `--attestor-project-name`: Project ID of the attestor.\n- `--attestor-name`: Name of the attestor.\n- `--attestor-key-id`: Key ID for the attestor.\n- `--signer-logging-level`: Logging level (`CRITICAL`, `FATAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`).\n- `--command`: Command to execute (`sign`, `verify`, `transfer`, `transfer-and-sign`).\n- `--platform`: Platform used for pulling images.\n\n## Classes\n\n### GCPLogin\n\n- Handles Google Cloud Platform login and access token retrieval.\n\n### DockerImage\n\n- Represents a Docker image and provides methods for pulling and pushing images.\n\n### GoogleArtifactoryImage\n\n- Subclass of `DockerImage` specialized for Google Artifactory images.\n\n### GoogleKMS\n\n- Manages Google Key Management Service (KMS) operations.\n\n### GoogleBinaryAuthorizationAttestor\n\n- Manages attestor operations for binary authorization.\n\n## Functions\n\n- `get_command_line_args()`: Parses command line arguments.\n- `sign_image(gcp_login, image_path, attestor_name, attestor_project_id, attestor_key_id)`: Signs a Docker image.\n- `verify_image(gcp_login, image_path, attestor_name, attestor_project_id)`: Verifies the signature of a Docker image.\n- `transfer(gcp_login, source_image_path, destination_artifact_repository)`: Transfers a Docker image to a destination repository.\n- `set_logging_level(logging_level)`: Sets the logging level.\n- `main()`: Main function to execute commands based on user input.\n\n\n\n", "release_dates": []}, {"name": "blob-archiver", "description": null, "language": null, "license": null, "readme": "# Blob Archiver\nThe Blob Archiver is a service to archive and allow querying of all historical blobs from the beacon chain. It consists \nof two components:\n\n* **Archiver** - Tracks the beacon chain and writes blobs to a storage backend\n* **API** - Implements the blob sidecars [API](https://ethereum.github.io/beacon-APIs/#/Beacon/getBlobSidecars), which \nallows clients to retrieve blobs from the storage backend\n\n### Storage\nThere are currently two supported storage options:\n\n* On-disk storage - Blobs are written to disk in a directory\n* S3 storage - Blobs are written to an S3 bucket\n\nYou can control which storage backend is used by setting the `BLOB_API_DATA_STORE` and `BLOB_ARCHIVER_DATA_STORE` to \neither `disk` or `s3`.\n\n### Data Validity\nCurrently, the archiver and api do not validate the beacon node's data. Therefore, it's important to either trust the \nBeacon node, or validate the data in the client. There is an open [issue](https://github.com/base-org/blob-archiver/issues/4) \nto add data validation to the archiver and api.\n\n### Development\nThe `Makefile` contains a number of commands for development:\n\n```sh\n# Run the tests\nmake test\n# Run the integration tests (will start a local S3 bucket)\nmake integration \n\n# Lint the project\nmake lint\n\n# Build the project\nmake build\n\n# Check all tests, formatting, building\nmake check\n```\n\n#### Run Locally\nTo run the project locally, you should first copy `.env.template` to `.env` and then modify the environment variables\nto your beacon client and storage backend of choice. Then you can run the project with:\n\n```sh\ndocker-compose up\n```\n\nYou can see a full list of configuration options by running:\n```sh\n# API\ngo run api/cmd/main.go\n\n# Archiver\ngo run archiver/cmd/main.go\n\n```", "release_dates": []}, {"name": "brand-kit", "description": "Brand assets for Optimism", "language": null, "license": null, "readme": "<p align=\"left\">\n  <img src=\"https://user-images.githubusercontent.com/1300064/219525549-2abc047c-cf55-41ab-a538-757f7631fcc2.svg\" alt=\"Logo\">\n</p>\n\nIntroducing **Brand Kit**, our visual identity guide.  Inside you'll find all the brand tools you'll need to build with the community.  \n\n## Logos\n\n\n|  Logo             |   Wordmark                                                         |\n| ----------------- | ------------------------------------------------------------------ |\n|  [![LogoRed](https://user-images.githubusercontent.com/1300064/219575413-d7990d69-1d21-44ef-a2b1-e9c682c79802.svg)](https://www.dropbox.com/s/780z2x5ij2sxzkr/Logo-Red-50.svg?dl=0)  | [![WordmarkRed](https://user-images.githubusercontent.com/1300064/219568209-1f378d40-0606-4e7e-a52e-37aac6d4fdeb.svg)](https://www.dropbox.com/s/nqzlepxsa9f0zix/Optimism-Red-48.svg?dl=0) |\n| [![LogoWhite](https://user-images.githubusercontent.com/1300064/219605602-fe0a8bbd-4938-4f41-8a96-aaccc24cccbf.svg)](https://www.dropbox.com/s/sfy3e2etz72kwtk/Logo-WhiteRed-50.svg?dl=0) | [![WordmarkWhite](https://user-images.githubusercontent.com/1300064/219583292-bab3cddb-9366-48b7-bfe4-1fab210ad76b.svg)](https://www.dropbox.com/s/k4egh3vh0ba7ujt/Optimism-White-48.svg?dl=0) |\n\n_(Click on image to download)_\n\n### Usage\n\nUse OPred or black to ensure visual contrasts on a light background. On a dark background, use either the OPred or white. Please note that the wordmark and logomark can be used interchangeably, but avoid using them together.\n\n\n![Logos-Comps](https://user-images.githubusercontent.com/1300064/219593021-0c12d64a-9f79-45bf-9762-61e160eb6b62.svg)\n\n\nWe want to maintain a level of consistency for some core brand assets, our logos being one of them.  So please, no rotations, drop shadows, effects, manipulations, or pairing with other logos and icons. Keep it simple.  \n\n\n## Footer\n\n|     Lockup                                                           |\n| -------------------------------------------------------------------- |\n| [![Logo2](https://user-images.githubusercontent.com/1300064/220606328-c18d12cc-c3d5-47e6-bdbb-7a2d253414d7.svg)](https://www.dropbox.com/s/ufn89z8435fs6b6/Combo--900--LT--24pt.svg?dl=0) |\n\n_(Click on image to download)_\n\n### Usage\nDid you build on the OP Stack?  Here is a logo/wordmark to add to your footer.  \n\nKeep in mind, our brand is flexible.  We know every footer design is different.  Feel free to change the lockup color to something that fits with your specific color palette, but please don't manipulate the logo, edit the text, or pair with other icons.  \n\n\n## Support\nFor support open an issue, or jump into our Discord to chat with the community. We can't build this alone.\n\n![Discord](https://img.shields.io/discord/667044843901681675?color=ff0420&label=chat&style=for-the-badge)\n\n\n\n", "release_dates": []}, {"name": "cannon", "description": "On chain interactive fault prover for Ethereum", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<!--![cannon](https://upload.wikimedia.org/wikipedia/commons/8/80/Cannon%2C_Ch\u00e2teau_du_Haut-Koenigsbourg%2C_France.jpg)-->\n<!--![cannon](https://cdn1.epicgames.com/ue/product/Featured/SCIFIWEAPONBUNDLE_featured-894x488-83fbc936b6d86edcbbe892b1a6780224.png)-->\n<!--![cannon](https://static.wikia.nocookie.net/ageofempires/images/8/80/Bombard_cannon_aoe2DE.png/revision/latest/top-crop/width/360/height/360?cb=20200331021834)-->\n![cannon](https://paradacreativa.es/wp-content/uploads/2021/05/Canon-orbital-GTA-01.jpg)\n\n---\n\n**Cannon has moved to the [Optimism monorepo](https://github.com/ethereum-optimism/optimism/tree/develop/cannon)!**\n\nThis repository is an archive of the following Cannon versions:\n- [`v0.1.0`](https://github.com/ethereum-optimism/cannon/tree/v0.1.0): the original Cannon, implemented by `geohot`.\n- [`v0.2.0`](https://github.com/ethereum-optimism/cannon/tree/v0.2.0): improved Cannon, with bugfixes and experimental demos.\n- [`v0.3.0`](https://github.com/ethereum-optimism/cannon/tree/v0.3.0): refactored proof-format, initial Optimism Bedrock support.\n\n## About\n\nCannon *(cannon cannon cannon)* is an onchain MIPS instruction emulator.\nCannon supports EVM-equivalent fault proofs by enabling Geth to run onchain,\none instruction at a time, as part of an interactive dispute game.\n\n* It's Go code\n* ...that runs an EVM\n* ...emulating a MIPS machine\n* ...running compiled Go code\n* ...that runs an EVM\n\n\n## License\n\nMIT, see [`LICENSE`](./LICENSE) file.\n\n**Note: the code in this archived repository is unaudited.**\nIn NO WAY should it be used to secure any monetary value before testing and auditing.\nThis is experimental software, and should be treated as such.\nThe authors of this project make no guarantees of security of ANY KIND.\n", "release_dates": []}, {"name": "chain-test-data", "description": "Pre-images for testing compatibility with existing chains.", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# chain-test-data\n\nThis repository provides pre-image data required to run `op-program` offline and verify sections of real chains.\n\nThe data is stored as GitHub release artifacts so they can be easily downloaded by tests in the optimism monorepo.\n\n## Generating New Data\n\nNew chain data is automatically captured and uploaded as a new release by CI whenever a new tag is created in this repo.\nBy convention, tags are just the date in `YYYY-MM-DD` format.\n\n```shell\ngit clone https://github.com/ethereum-optimism/chain-test-data\ncd chain-test-data\nRELEASE_NAME=$(date +%Y-%m-%d)\ngit tag \"$RELEASE_NAME\"\ngit push origin \"$RELEASE_NAME\"\n```\n\nOnce CI has completed, update the URL in the monorepo `op-program/Makefile` to point to the newly built tarball of \nchain data. \n\nTo generate data, CI just runs the `capture-chain-test-data` target in `op-program/Makefile` of the monorepo. It can\nbe modified to generate data for other chains or to modify how it selects the part of the chain to capture.\n", "release_dates": ["2024-03-01T03:03:22Z", "2024-01-29T21:42:51Z", "2024-01-29T04:14:32Z", "2023-10-11T00:49:22Z", "2023-10-10T03:30:06Z", "2023-10-10T03:08:14Z", "2023-10-10T00:04:26Z", "2023-10-08T23:34:24Z"]}, {"name": "chainlink", "description": "node of the decentralized oracle network, bridging on and off-chain computation", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<br/>\n<p align=\"center\">\n<a href=\"https://chain.link\" target=\"_blank\">\n<img src=\"./styleguide/static/images/logo-chainlink-blue.svg\" width=\"225\" alt=\"Chainlink logo\">\n</a>\n</p>\n<br/>\n\n\n![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/smartcontractkit/chainlink?style=flat-square)\n[![GitHub license](https://img.shields.io/github/license/smartcontractkit/chainlink?style=flat-square)](https://github.com/smartcontractkit/chainlink/blob/master/LICENSE)\n[![GitHub workflow changelog](https://img.shields.io/github/workflow/status/smartcontractkit/chainlink/Changelog?style=flat-square&label=github-actions)](https://github.com/smartcontractkit/chainlink/actions?query=workflow%3AChangelog)\n[![CircleCI build](https://img.shields.io/circleci/build/github/smartcontractkit/chainlink/master?style=flat-square&label=circleci&logo=circleci)](https://circleci.com/gh/smartcontractkit/chainlink/tree/master)\n[![Maintainability](https://api.codeclimate.com/v1/badges/273722bb9f6f22d799bd/maintainability)](https://codeclimate.com/github/smartcontractkit/chainlink/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/273722bb9f6f22d799bd/test_coverage)](https://codeclimate.com/github/smartcontractkit/chainlink/test_coverage)\n[![GitHub contributors](https://img.shields.io/github/contributors-anon/smartcontractkit/chainlink?style=flat-square)](https://github.com/smartcontractkit/chainlink/graphs/contributors)\n[![GitHub commit activity](https://img.shields.io/github/commit-activity/y/smartcontractkit/chainlink?style=flat-square)](https://github.com/smartcontractkit/chainlink/commits/master)\n\n[Chainlink](https://chain.link/) is middleware to simplify communication with blockchains.\nHere you'll find the Chainlink Golang node, currently in alpha.\nThis initial implementation is intended for use and review by developers,\nand will go on to form the basis for Chainlink's [decentralized oracle network](https://link.smartcontract.com/whitepaper).\nFurther development of the Chainlink Node and Chainlink Network will happen here,\nif you are interested in contributing please see our [contribution guidelines](./docs/CONTRIBUTING.md).\n\n## Features\n\n- easy connectivity of on-chain contracts to any off-chain computation or API\n- multiple methods for scheduling both on-chain and off-chain computation for a user's smart contract\n- automatic gas price bumping to prevent stuck transactions, assuring your data is delivered in a timely manner\n- push notification of smart contract state changes to off-chain systems, by tracking Ethereum logs\n- translation of various off-chain data types into EVM consumable types and transactions\n- easy to implement smart contract libraries for connecting smart contracts directly to their preferred oracles\n- easy to install node, which runs natively across operating systems, blazingly fast, and with a low memory footprint\n\nExamples of how to utilize and integrate Chainlinks can be found in the [Chainlink Truffle Box](https://github.com/smartcontractkit/box).\n\n## Community\n\nChainlink has an active and ever growing community. [Discord](https://discordapp.com/invite/aSK4zew)\nis the primary communication channel used for day to day communication,\nanswering development questions, and aggregating Chainlink related content. Take\na look at the [community docs](../docs/COMMUNITY.md) for more information \nregarding Chainlink social accounts, news, and networking.\n\n## Install\n\n1. [Install Go 1.14](https://golang.org/doc/install#install), and add your GOPATH's [bin directory to your PATH](https://golang.org/doc/code.html#GOPATH)\n2. Install [NodeJS](https://nodejs.org/en/download/package-manager/) & [Yarn](https://yarnpkg.com/lang/en/docs/install/)\n3. Install [Postgres (>= 9.6)](https://wiki.postgresql.org/wiki/Detailed_installation_guides).\n4. Download Chainlink: `git clone https://github.com/smartcontractkit/chainlink && cd chainlink`\n5. Build and install Chainlink: `make install`\n6. Run the node: `chainlink help`\n\n### Ethereum Node Requirements\n\nIn order to run the Chainlink node you must have access to a running Ethereum node with an open websocket connection.\nAny Ethereum based network will work once you've [configured](https://github.com/smartcontractkit/chainlink#configure) the chain ID.\nEthereum node versions currently tested and supported:\n\n- [Parity 1.11+](https://github.com/paritytech/parity-ethereum/releases) (due to a [fix with pubsub](https://github.com/paritytech/parity/issues/6590).)\n- [Geth 1.8+](https://github.com/ethereum/go-ethereum/releases)\n\n## Run\n\n**NOTE**: By default, chainlink will run in TLS mode. For local development you can either disable this by setting CHAINLINK_DEV to true, or generate self signed certificates using `tools/bin/self-signed-certs` or [manually](https://github.com/smartcontractkit/chainlink/wiki/Creating-Self-Signed-Certificates).\n\nTo start your Chainlink node, simply run:\n\n```bash\nchainlink node start\n```\n\nBy default this will start on port 6688, where it exposes a [REST API](https://github.com/smartcontractkit/chainlink/wiki/REST-API).\n\nOnce your node has started, you can view your current jobs with:\n\n```bash\nchainlink jobs list\n```\n\nView details of a specific job with:\n\n```bash\nchainlink jobs show \"$JOB_ID\"\n```\n\nTo find out more about the Chainlink CLI, you can always run `chainlink help`.\n\nCheck out the [docs'](https://docs.chain.link/) pages on [Adapters](https://docs.chain.link/docs/adapters) and [Initiators](https://docs.chain.link/docs/initiators) to learn more about how to create Jobs and Runs.\n\n## Configure\n\nYou can configure your node's behavior by setting environment variables which can be, along with default values that get used if no corresponding environment variable is found. The latest information on configuration variables are available in [the docs](https://docs.chain.link/docs/configuration-variables).\n\n## Project Structure\n\nChainlink is a monorepo containing several logicaly separatable and relatable \nprojects.\n\n- [core](./core) - the core Chainlink node\n- [@chainlink/belt](./belt) - tools for performing commands on Chainlink smart contracts\n- [@chainlink/contracts](./evm-contracts) - smart contracts\n- [@chainlink/test-helpers](./evm-test-helpers) - smart contract-related resources\n- [explorer](./explorer) - [Mainnet Chainlink Explorer](https://explorer.chain.link/)\n- [integration/forks](./integration/forks) - integration test for [ommers](https://ethereum.stackexchange.com/a/46/19503) and [re-orgs](https://en.bitcoin.it/wiki/Chain_Reorganization)\n- [sgx](./core/sgx) - an optional and experimental Chainlink module to do processing within an [SGX](https://software.intel.com/en-us/sgx) enclave\n- [styleguide](./styleguide) - Chainlink style guide\n- [tools](./tools) - Chainlink tools\n\n## External Adapters\n\nExternal adapters are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs.\nA Chainlink node communicates with external adapters via a simple REST API.\n\nFor more information on creating and using external adapters, please see our [external adapters page](https://docs.chain.link/docs/external-adapters).\n\n## Development Setup\n\nFor the latest information on setting up a development environment, see the [guide here](https://github.com/smartcontractkit/chainlink/wiki/Development-Setup-Guide).\n\n### Build your current version\n\n```bash\ngo build -o chainlink ./core/\n```\n\n- Run the binary:\n\n```bash\n./chainlink\n```\n\n### Test Core\n\n1. [Install Yarn](https://yarnpkg.com/lang/en/docs/install)\n\n2. Install [gencodec](https://github.com/fjl/gencodec), [mockery version 1.0.0](https://github.com/vektra/mockery/releases/tag/v1.0.0), and [jq](https://stedolan.github.io/jq/download/) to be able to run `go generate ./...` and `make abigen`\n\n3. Build contracts:\n\n```bash\nyarn\nyarn setup:contracts\n```\n\n4. Generate and compile static assets:\n\n```bash\ngo generate ./...\ngo run ./packr/main.go ./core/eth/\n```\n\n5. Prepare your development environment:\n\n```bash\nexport DATABASE_URL=postgresql://127.0.0.1:5432/chainlink_test?sslmode=disable\nexport CHAINLINK_DEV=true # I prefer to use direnv and skip this\n```\n\n6.  Drop/Create test database and run migrations:\n```\ngo run ./core/main.go local db preparetest\n```\n\nIf you do end up modifying the migrations for the database, you will need to rerun\n\n7. Run tests:\n\n```bash\ngo test -parallel=1 ./...\n```\n\n\n### Solidity Development\n\n1. [Install Yarn](https://yarnpkg.com/lang/en/docs/install)\n2. Install the dependencies:\n\n```bash\ncd evm\nyarn install\n```\n\n3. Run tests:\n\n```bash\nyarn run test-sol\n```\n\n### Use of Go Generate\n\nGo generate is used to generate mocks in this project. Mocks are generated with [mockery](https://github.com/vektra/mockery) and live in core/internal/mocks.\n\n### Development Tips\n\nFor more tips on how to build and test Chainlink, see our [development tips page](https://github.com/smartcontractkit/chainlink/wiki/Development-Tips).\n\n## Contributing\n\nChainlink's source code is [licensed under the MIT License](./LICENSE), and contributions are welcome.\n\nPlease check out our [contributing guidelines](./docs/CONTRIBUTING.md) for more details.\n\nThank you!\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n", "release_dates": []}, {"name": "changelog", "description": null, "language": "HTML", "license": null, "readme": "# changelog\n\nThis repo contains the source for Optimism's standalone changelog website [changelog.optimism.io](https://changelog.optimism.io)\n\n## Adding Releases\n\nTo add a new releases:\n\n1. Create a new file in `_posts` with the filename `YYYY-MM-DD-slugified-title.md`.\n2. Add the frontmatter described below.\n3. Write whatever content you want for the release.\n4. PR, merge, then commit to master. Netlify will do the rest.\n\nAll posts need the following frontmatter:\n\n```\n---\ntitle: Your title here\nlayout: version\npackages:\n    kovan:\n      - name: foo-package\n        version: 1.2.3\n    mainnet:\n      - name: bar-package\n        version: 0.1.2\n---\n\n```\n\nPackages described in the `packages` stanza must map to packages deployed by the monorepo, otherwise version links won't work.", "release_dates": []}, {"name": "community-hub", "description": "Optimism Governance Docs", "language": "Vue", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# The Optimism Community Hub\n\n[![Discord](https://img.shields.io/discord/667044843901681675.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discord-gateway.optimism.io)\n[![Twitter Follow](https://img.shields.io/twitter/follow/OptimismFND.svg?label=OptimismFND&style=social)](https://twitter.com/OptimismFND)\n\nOP Mainnet is a Layer 2 platform for Ethereum.\n\nOP Mainnet is, in a nutshell, an application inside of Ethereum that executes transactions more efficiently than Ethereum itself. It's based on the concept of the [Optimistic Rollup](https://research.paradigm.xyz/rollups), a construction that allows us to \"optimistically\" publish transaction results without actually executing those transactions on Ethereum (most of the time). OP Mainnet makes transactions cheaper, faster, and smarter.\n\nPlease note that this repository is undergoing rapid development.\n\n------\n\nThis is the source for the [community hub](https://community.optimism.io/).\n\n# Usage\n## Serve Locally\n```shell\nyarn dev\n```\n\nThen navigate to http://localhost:8080.\nIf that link doesn't work, double check the output of `yarn dev`. \nYou might already be serving something on port 8080 and the site may be on port 8081.\n\n## Build for Production\n```shell\nyarn build\n```\n\nYou probably don't need to run this command, but now you know.\n", "release_dates": []}, {"name": "contracts", "description": "[Optimism] Smart Contracts", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Optimistic Ethereum Smart Contracts\n\n`@eth-optimism/contracts` contains the various Solidity smart contracts used within the Optimistic Ethereum system.\nSome of these contracts are deployed on Ethereum (\"Layer 1\"), while others are meant to be deployed to Optimistic Ethereum (\"Layer 2\").\n\nWithin each contract file you'll find a comment that lists:\n1. The compiler with which a contract is intended to be compiled, `solc` or `optimistic-solc`.\n2. The network upon to which the contract will be deployed, `OVM` or `EVM`.\n\nA more detailed overview of these contracts can be found on the [community hub](http://community.optimism.io/docs/protocol/protocol.html#system-overview).\n\n<!-- TODO: Add link to final contract docs here when finished. -->\n\n## Usage (npm)\nIf your development stack is based on Node/npm:\n\n```shell\nnpm install @eth-optimism/contracts\n```\n\nWithin your contracts:\n\n```solidity\nimport { SomeContract } from \"@eth-optimism/contracts/SomeContract.sol\";\n```\n\n## Guide for Developers\n### Setup\nInstall the following:\n- [`Node.js` (14+)](https://nodejs.org/en/)\n- [`npm`](https://www.npmjs.com/get-npm)\n- [`yarn`](https://classic.yarnpkg.com/en/docs/install/)\n\nClone the repo:\n\n```shell\ngit clone https://github.com/ethereum-optimism/contracts.git\ncd contracts\n```\n\nInstall `npm` packages:\n```shell\nyarn install\n```\n\n### Running Tests\nTests are executed via `yarn`:\n```shell\nyarn test\n```\n\nRun specific tests by giving a path to the file you want to run:\n```shell\nyarn test ./test/path/to/my/test.spec.ts\n```\n\n### Measuring test coverage:\n```shell\nyarn test-coverage\n```\n\nThe output is most easily viewable by opening the html file in your browser:\n```shell\nopen ./coverage/index.html\n```\n\n### Compiling and Building\nEasiest way is to run the primary build script:\n```shell\nyarn build\n```\n\nRunning the full build command will perform the following actions:\n1. `build:contracts` - Compile all Solidity contracts with both the EVM and OVM compilers.\n2. `build:typescript` - Builds the typescript files that are used to export utilities into js.\n3. `build:copy` - Copies various other files into the build folder.\n4. `build:dump` - Generates a genesis state from the contracts that L2 geth will use.\n5. `build:typechain` - Generates [TypeChain](https://github.com/ethereum-ts/TypeChain) artifacts.\n\nYou can also build specific components as follows:\n```shell\nyarn build:contracts\n```\n\n## Security\nPlease refer to our [Security Policy](https://github.com/ethereum-optimism/.github/security/policy) for information about how to disclose security issues with this code.\n", "release_dates": ["2021-04-09T03:12:01Z", "2021-03-03T06:12:38Z", "2021-02-23T00:40:33Z", "2021-02-22T23:20:05Z", "2021-02-19T21:56:11Z", "2021-02-19T21:53:34Z", "2021-02-08T21:51:37Z", "2021-01-15T01:11:43Z", "2021-01-13T17:43:03Z", "2021-01-13T05:31:42Z", "2021-01-13T05:30:41Z", "2021-01-07T17:25:29Z"]}, {"name": "core-utils", "description": "[Optimism] Various useful utilities.", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# @eth-optimism/core-utils\n\n## What is this?\n\n`@eth-optimism/core-utils` contains the Optimistic Virtual Machine core utilities.\n\n## Getting started\n\n### Building and usage\n\nAfter cloning and switching to the repository, install dependencies:\n\n```bash\n$ yarn\n```\n\nUse the following commands to build, use, test, and lint:\n\n```bash\n$ yarn build\n$ yarn start\n$ yarn test\n$ yarn lint\n```\n", "release_dates": ["2021-03-12T23:50:38Z", "2021-03-09T01:14:40Z", "2021-03-01T23:09:22Z", "2021-02-24T20:20:45Z"]}, {"name": "dev", "description": "[Optimism] You get a config file! You get a config file!", "language": null, "license": null, "readme": "it's just our config files", "release_dates": []}, {"name": "developers", "description": "This repository is to serve as a place where builders on every level of the OP Stack can come to collaborate.", "language": null, "license": {"key": "cc0-1.0", "name": "Creative Commons Zero v1.0 Universal", "spdx_id": "CC0-1.0", "url": "https://api.github.com/licenses/cc0-1.0", "node_id": "MDc6TGljZW5zZTY="}, "readme": "# Developers\n\nThis repository is to serve as a place where builders on every level of the OP Stack can come to collaborate. Feel free to ask questions, open discussions, teach, and learn.\n\n## How to use this repository\n\n### Developer question and answers \u2753\n\nIf you have developer questions head over to our [Discussions](https://github.com/ethereum-optimism/developers/discussions) section. Tips on how to ask good questions:\n\n- **First search for a duplicate question.** If you find one, follow up in that thread.\n- **Do some initial research.** Suggested resources are available in each sections discussion form.\n- **Be specific and clear.** Provide as much detail as possible. Include error messages, logs, code snippets, and a description of what you've tried so far.\n- **Explain your goal or intention.** This can help us provide a more relevant and helpful answer.\n- **Consider including a minimal reproducible example.** Being able to reproduce your issue makes it much easier for us to understand and diagnose the problem.\n- **Be patient and respectful.** We are a community of people (and maybe some benevolant AIs), so please be kind. Always abide by our [Code of Conduct](./docs/CODE_OF_CONDUCT.md).\n\nWhen you get your answer, please mark it. We're always open to constructive feedback, so let us know how we're doing!\n\n## Community resources\n\n**Disclaimer: The contents of this directory do not imply endorsement. All content should be evaluated independently.**\n\nCheck out the developer tools and resources we have in the [community](./community) directory. Please follow the guidelines in the [contributing document](./docs/CONTRIBUTING.md) to create a PR to add the OP Stack tools and resources you use or built!\n\n## Redirects \u21a9\ufe0f\n\nIf this repository is not what you're looking for, maybe one of the following channels may serve you better.\n\n| Channel | Description |\n|---------|-------------|\n|[Technical Documentation](https://docs.optimism.io/)| Technical documentation for all layers of the OP Stack. |\n|[Community Documentation](https://community.optimism.io)| Community documentation for all things happening in the collective. |\n|[Governance Forum](https://gov.optimism.io/)| Discussion for governing the Optimism Collective. |\n\nIf you're trying to get in touch with OPLabs, check out the following forms.\n\n| Form | Description |\n|---------|-------------|\n|[Speak with Optimism](https://airtable.com/appQ2S9IatldkoNQw/pagyJSUyxJA2SQKO3/form) | Form to connect with the partnerships team.|\n|[Marketing Amplification Form](https://airtable.com/appQ2S9IatldkoNQw/shrIqJsv2nyBUo6Ka) | Request co-marketing.|\n\n## Thank you \u2764\ufe0f \n\nThank you for taking your time to participate in this community. You're what makes the [Optimism Collective](https://optimism.mirror.xyz/gQWKlrDqHzdKPsB1iUnI-cVN3v0NvsWnazK7ajlt1fI) improve and grow to serve [Ether's Phoenix](https://optimism.mirror.xyz/x4LGFwa6RJ_opOaCOwr_VGk04Lp3of41H8ynWaFB27E)!\n", "release_dates": []}, {"name": "dispute-viz", "description": "A front-end for visualizing dispute games.", "language": null, "license": null, "readme": "# Disputify\n\nVisualization for dispute games on local devnets. Hosted at [dispute.clab.by](https://dispute.clab.by).\n\nThis project is an extension of @ajsutton's [Disputify](https://github.com/ajsutton/disputify) that allows for reading data from a local chain rather than hard-coding it.\n\n![preview](./public/preview.gif)\n\n## Project setup\n\n```\n# pnpm\npnpm i\n```\n\n### Compiles and hot-reloads for development\n\n```\n# pnpm\npnpm dev\n```\n\n### Compiles and minifies for production\n\n```\n# pnpm\npnpm build\n```\n", "release_dates": []}, {"name": "docker", "description": "[Optimism] Dockerfiles and Entrypoints", "language": "Shell", "license": null, "readme": "# docker\n\nRepo for building, tagging and pushing Docker images\n\n## Scripts\n\n### `build.sh`\n\nBuild Docker images, use the `-s` flag to select a service to build.\nIf no `-s` flag is passed, all images will be built. Each service that\ncan be built is represented by a directory in this repository.\n\n### `clean.sh`\n\nRemove Docker images related to this repo from the machine.\n\n## Developing\n\nAdd a directory to this repository that contains a `Dockerfile` and\nany files that are necessary to build the docker image. This repository\nis opinionated when it comes to building docker images in a position\nindependent way, meaning that the `Dockerfile`s all build by cloning\nthe code from a remote git repository.\n", "release_dates": []}, {"name": "docs", "description": "Optimism Developer Docs", "language": "MDX", "license": null, "readme": "#  Optimism Docs\n\nThis repo houses the Optimism Docs located at [docs.optimism.io](https://docs.optimism.io/). All documentation-related updates and new content will be tracked and maintained in this repo. \n\n## Local Development\n\nHow to [install pnpm](https://pnpm.io/installation)\n\nFirst, run `pnpm i` to install the dependencies.\n\nThen, run `pnpm dev` to start the development server and visit localhost:3000.\n\n## Contributions\n\nPlease see the [CONTRIBUTING.md](CONTRIBUTING.md) page for specifics on how to write PRs, use the linter, run spellcheck, add dictionary terms, etc. You should also review the [Optimism Documentation Style Guide](/pages/connect/contribute/style-guide.mdx) for additional guidelines, especially if you are writing entirely brand new pages to the developer docs, as opposed to smaller edits and/or revisions.\n\n## Project Board\n\nYou can track documentation [issues](https://github.com/ethereum-optimism/docs/issues) or submit documentation [requests](https://github.com/ethereum-optimism/docs/issues/new/choose) directly from this repo.\n\n## License\n\nThis project is licensed under the MIT License.\n\n", "release_dates": []}, {"name": "ecosystem", "description": "Optimism is Ethereum, scaled.", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=600></a>\n  <br />\n  <h3><a href=\"https://optimism.io\">Optimism</a> is Ethereum, scaled.</h3>\n  <br />\n</div>\n\n## Ecosystem\n\nIn this repository, you'll find numerous code references for applications & packages to help app developers build on top of the OP Stack with ease. \n\nIf the [Optimism Repository](https://github.com/ethereum-optimism/ecosystem) is a place where the protocol and its infrastructure gets built. The Ecosystem Repository is a place where utilities, applications, and examples get built to interact with the protocols and its infrastructure.\n\nDesigned to be \"aggressively open source,\" we encourage you to explore, modify, extend, and test the code as needed. We look forward to building with you!\n\n## Documentation\n\n- If you want to build on top of OP Mainnet, refer to the [Optimism Documentation](https://docs.optimism.io)\n- If you want to build your own OP Stack based blockchain, refer to the [OP Stack Guide](https://docs.optimism.io/stack/getting-started)\n- If you want to contribute to the OP Stack, check out the [Protocol Specs](https://github.com/ethereum-optimism/optimism/tree/develop/specs)\n\n## Support\n\nFor technical support head over to the [GitHub Developer forum](https://github.com/ethereum-optimism/developers/discussions).\nGovernance discussion can also be found on the [Optimism Governance Forum](https://gov.optimism.io/).\n\n## Directory Structure\n\n<pre>\n\u251c\u2500\u2500 <a href=\"./apps\">apps</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./apps/bridge-app\">bridge-app</a>: Example Bridge App\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/op-app\">op-app</a>: Optimism Stack App Utils\n</pre>\n\n## Development Quick Start\n\n### Dependencies\n\nYou'll need the following:\n\n* [Git](https://git-scm.com/downloads)\n* [NodeJS](https://nodejs.org/en/download/)\n* [Node Version Manager](https://github.com/nvm-sh/nvm)\n* [pnpm](https://pnpm.io/installation)\n\n### Setup\n\nClone the repository and open it:\n\n```bash\ngit clone git@github.com:ethereum-optimism/ecosystem.git\ncd ecosystem\n```\n\n### Install the Correct Version of NodeJS\n\nInstall the correct node version with [nvm](https://github.com/nvm-sh/nvm)\n\n```bash\nnvm use\n```\n\n### Install Node Modules With pnpm\n\n```bash\npnpm i\n```\n\n### Running Targets\n\nEach application and package have npm scripts in there indivdual `package.json`.\nIn order to run those easily we can leverage nx here. The `nx.json` file is setup\nto improve QoL while working in the repo.\n\nThe npm package name can be found in their `package.json` and the targets are what you'll see in the `scripts` object in the `package.json`\n\n```bash\npnpm nx run <npm package name>:<target>\n```\n\nFor example if we wanted to run the `bridge-app` for development we could run this\n```bash\npnpm nx run @eth-optimism/bridge-app:dev\n```\n\nIf we wanted to build the `op-app` package we could run this\n```bash\npnpm nx run @eth-optimism/op-app:build\n```\n\nThere will be a few common targets that you will most likely see across all applications and packages in the repo.\n\n* `build`\n* `clean`\n* `dev`\n* `typecheck`\n* `lint`\n* `lint:fix`\n\n### Codegen\n\n#### Nx generateors\n\n* `trpc-api-generator`: generates the boiler plate code for creating a trpc api server\n\nTo run a generator run this command:\n```bash\npnpm nx generate <name of generator> <name of new project>\n```\n\nFeel free to open up an issue on the repo if you're running into any issues!\n\n## Contributing\n\nNo contribution is too small and all contributions are valued.\nThanks for your help improving the project! We are so happy to have you!\n\nYou can read our contribution guide [here](./CONTRIBUTING.md) to understand better how we work in the repo.\n\n## Releases\n\nAs of now we have not published any packages in this repo to npm, but stay tuned as we plan to do that once we add more packages to the repo!\n\n## License\n\nAll other files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/ecosystem/blob/main/LICENSE) unless stated otherwise.\n", "release_dates": []}, {"name": "ecosystem-contributions", "description": "Find ways to contribute to the Optimism Collective", "language": null, "license": null, "readme": "# Ecosystem Contributions\n\nWelcome to the Optimism Collective Ecosystem Contributions repository. Here you'll find various different ways to contribute to the Optimism Collective so that we can build an economy that works for humans, together. \n\n## Table of Contents\n\n- [Contribution Categories](#contribution-categories)\n- [Finding a Project](#finding-a-project)\n- [Working on a Project](#working-on-a-project)\n- [Funding and Rewards](#funding-and-rewards)\n- [Support and Additional Resources](#support-and-additional-resources)\n\n## Contribution Categories\n\nDifferent ways to contribute to the Optimism Collective are loosely organized into \"categories\" which give a sense of the relative scope, utility, and complexity of any given project. Refer to the sections below to understand what each of these categories means and what type of tasks or ideas you can expect to find within a category.\n\n### \u2728 Contribution Opportunities\n\nContribution Opportunities are concrete and tightly-scoped ways for you to contribute to the Optimism Collective ecosystem (e.g., \u201creview the Bedrock smart contracts\u201d or \u201cfix this specific bug\u201d). Contribution Opportunities are generally smaller tasks and require less context so that you can get to work right away. Available opportunities might touch many different codebases within the broader Optimism ecosystem.\n\n[Click here to view all available Contribution Opportunities.](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Contribution+Opportunity%22)\n\n### \ud83e\uddea Mad Science Project Ideas\n\nMad Science Project Ideas are ideas for projects that could work well as a fun hack or a hackathon project. Mad Science Project Ideas may not have clear immediate value for the Optimism ecosystem (yet) but act as useful explorations of novel concepts. These ideas are great for anyone looking to mess around with new tools and push the boundaries of what's possible with crypto.\n\n[Click here to view all available Mad Science Project Ideas.](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Mad+Science+Project+Idea%22)\n\n### \ud83d\udcdd Draft Project Ideas\n\nDraft Project Ideas are ideas for projects that have value for the Optimism ecosystem but may not yet be fully understood in a manner that can be deeply specified. Here you'll find stuff that makes you think, \"this would be really useful, but I'm not exactly sure how it would work in practice\". Are you going to be the one to figure out how it should work?\n\n[Click here to view all available Draft Project Ideas.](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Draft+Project+Idea%22)\n\n### \ud83d\udd34 Ecosystem Project Ideas\n\nEcosystem Project Ideas are ideas for projects that have clear value for the Optimism ecosystem and are understood well enough that they can be (mostly) fully specified. Ecosystem Project Ideas contain a concrete project task, a basic specification for what the project could look like, and a list of features that would make the project most valuable. Ecosystem Project Ideas tend to be larger than Contribution Opportunities.\n\n[Click here to view all available Ecosystem Project Ideas.](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Ecosystem+Project+Idea%22)\n\n### \ud83c\udfdb\ufe0f Foundation Missions (RFPs)\n\nFoundation Missions (aka RFPs) are proposals for specific initiatives that achieve an Optimism Collective **Intent** \u2014 a directional goal that helps the Collective align and work together. You can think of a Foundation Mission as an arrow aiming at the target (the Intent). Just as there are many paths an arrow might take on its way to a target, there are many different Foundation Missions that might accomplish an Intent.\n\nUnlike the tasks listed in other categories, Foundation Missions act as requests for proposals (RFPs) that teams can apply for. Generally, a limited number of teams are selected to work on a given Foundation Mission at any given time. Foundation Missions also typically come with attached grants for the completion of the Mission.\n\n[Click here to view all available Foundation Missions.](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Foundation+Mission+%28RFP%29%22)\n\n## Finding a Project\n\nLooking for the perfect project? Try filtering by the [labels that we've attached to every open issue](https://github.com/ethereum-optimism/ecosystem-contributions/labels).\n\n### Labels by Contribution Category\n\n- [\u2728 Contribution Opportunities](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Contribution+Opportunity%22)\n- [\ud83e\uddea Mad Science Project Ideas](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Mad+Science+Project+Idea%22)\n- [\ud83d\udcdd Draft Project Ideas](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Draft+Project+Idea%22)\n- [\ud83d\udd34 Ecosystem Project Ideas](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Ecosystem+Project+Idea%22)\n- [\ud83c\udfdb\ufe0f Foundation Missions (RFPs)](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Foundation+Mission+%28RFP%29%22)\n\n### Labels by Tag\n\n- [Tag: Contracts](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Contracts)\n- [Tag: Protocol](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Protocol)\n- [Tag: Attestations](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Attestations)\n- [Tag: Chain Infra](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Chain%20Infra)\n- [Tag: Consumers](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Consumers)\n- [Tag: Dev Tools](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Dev%20Tools)\n- [Tag: Gaming](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Gaming)\n- [Tag: Governance](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Governance)\n- [Tag: OP Stack](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20OP%20Stack)\n- [Tag: DeFi](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Tag%3A+DeFi%22)\n- [Tag: RetroPGF](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Tag%3A+RetroPGF%22)\n- [Tag: Documentation](https://github.com/ethereum-optimism/ecosystem-contributions/issues?q=is%3Aissue+is%3Aopen+label%3A%22Tag%3A+Documentation%22)\n- [Tag: Meta](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Tag%3A%20Meta)\n\n### Labels by Estimated Effort\n\n- [Estimated Effort: Small](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Effort%3A%20Small)\n- [Estimated Effort: Medium](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Effort%3A%20Medium)\n- [Estimated Effort: Large](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Effort%3A%20XLarge)\n- [Estimated Effort: XLarge](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Effort%3A%20XLarge)\n\n### Labels by Estimated Impact\n\n- [Estimated Impact: Small](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Impact%3A%20Small)\n- [Estimated Impact: Medium](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Impact%3A%20Medium)\n- [Estimated Impact: Large](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Impact%3A%20Large)\n- [Estimated Impact: XLarge](https://github.com/ethereum-optimism/ecosystem-contributions/labels/Estimated%20Impact%3A%20XLarge)\n\n## Working on a Project\n\n### Working on Foundation Missions (RFPs)\n\nFoundation Missions (RFPs) are the most formal type of project listed within this repository. Foundation Missions generally include OP token grants for completion and typically require teams to explicitly propose to work on a given task during an open proposal period. One or more teams are selected to work on the task (based on the parameters of the Mission) and OP token grants are subject to a one year lock-up. You should refer to the exact details of the Mission you're interested in working on to get a better understanding of the working process.\n\n### Working on Other Projects\n\nAll other projects (any that are not Foundation Missions) do not have any formal working process or proposal period. You are free to work on any of these tasks at any time. **We highly recommend making a comment within the project's corresponding GitHub issue when you've decided to start work.** This can help reduce duplicated work and can help connect you to other contributors who may be interested in working on the same task.\n\n## Funding and Rewards\n\nYour time is your most valuable asset. [The Optimism Collective believes that impact to the collective should be rewarded with profit to the individual](https://www.optimism.io/vision). The Optimism Collective ecosystem has various pathways for you to be potentially funded or rewarded for the work that you do. Here we'll take a look at the options available to you.\n\n### Retroactive Public Goods Funding\n\n[Retroactive Public Goods Funding (RetroPGF)](https://app.optimism.io/retropgf) is a mechanism that rewards people and projects for the positive impact they have on the Optimism Collective beyond the profit that they already receive. RetroPGF attempts to balance the equation [**impact=profit**](https://www.optimism.io/vision). If you're creating value for the Collective that isn't already being rewarded (e.g., via a sustainable business model), the Collective will do its best to fill the gap through its regular RetroPGF rounds.\n\nRetroPGF rounds currently occur approximately once per quarter and will become more regular as time goes on. Rounds include a voting process in which a dynamic set of real people (called \"badgeholders\") vote on the distribution of OP tokens to nominated projects. The latest RetroPGF round, [RetroPGF#2](https://community.optimism.io/docs/governance/retropgf-2/), distributed [10m OP tokens](https://optimism.mirror.xyz/Upn_LtV2-3SviXgX_PE_LyA7YI00jQyoM1yf55ltvvI) to 195 nominated projects (all 195 nominated projects were rewarded in this case).\n\n**Any project can be nominated for a RetroPGF round (including any completed project from this repository!).** Exact distribution details are determined by the set of badgeholders for a given round, the scope of the round, and the impact that each nominated project has had relative to its profit.\n\nRetroPGF is always a fantastic default option for being rewarded for the work that you do. Unlike traditional up-front grants, RetroPGF is distributed *after* impact has already been made and there is never a 100% likelihood that any given project will be rewarded. We've done our best in this repository to reflect tasks that are likely to be valuable to the Optimism Collective ecosystem and have specified the potential impact of each project in the \"Impact\" section of each task. The existence of a project within this repository does NOT guarantee that the project will be rewarded via RetroPGF.\n\n\nPlease feel free to liberally use the comment section of a task to ask clarifying questions that might help you make a decision of whether or not to work on a project.\n\n### Foundation Mission (RFP) Grants\n\nMost of the [Foundation Missions (RFPs)](https://github.com/ethereum-optimism/ecosystem-contributions#%EF%B8%8F-foundation-missions-rfps) within this repository include attached OP token grants that are distributed on completion of the proposed project. Foundation Missions, unlike other contribution types in this repository, typically have an application period during which teams can propose to work on a given Mission. A limited number of teams are selected for these types of Foundation Missions, each of which receives the attached grant on completion of the Mission.\n\nExact details about the size of the OP grant, the application process, and the number of teams that can be selected for a given Mission are all clearly defined on the GitHub issue describing that Mission.\n\n### Optimism Collective Governance Grants\n\nThe Optimism Collective also coordinates an array of grant programs operated by Optimism Collective Governance. Governance Grants are typically up-front grants and require projects to make a detailed proposal. Governance Grants may include restrictions on the scope and usage of the grant. You should always refer to the forum page describing each grant to better understand any details or restrictions.\n\nAs of 2023-05-25, the following Governance Grant programs are currently active or will become active soon:\n\n- [Token House Missions](https://gov.optimism.io/t/token-house-missions/5881) (begins July 8th 2023)\n  - Grants for projects that support one of the Optimism Collective [Intents](https://gov.optimism.io/t/collective-intents/5874)\n- [Optimism Grants Council](https://foul-porch-0eb.notion.site/Optimism-Grants-Council-090bb648d1854136b9630c608da7a8bc) (begins July 8th 2023)\n  - Focused on \"builders & novel use cases\" and \"growth experiments\"\n  - Generally small (sub 50k OP) grants\n- Partner Fund (ongoing)\n  - Reach out to the Optimism Foundation team if you feel the above mechanisms don't fit your needs\n\n## Support and Additional Resources\n\nWe want to do everything we can to help you be successful while working on your contribution. Here you'll find various resources and communities that may help you complete a project. Please also feel free to ask for support directly in the comments of the GitHub issue that corresponds to the project that you're working on. Members of the Optimism community check these comments daily to provide support.\n\n\n### Communities\n\n- [Optimism Discord](https://discord.gg/optimism)\n- [Optimism Governance Forum](https://gov.optimism.io)\n\n### Reference Material\n\n- [Optimism Documentation](https://docs.optimism.io)\n- [Optimism Help Center](https://help.optimism.io)\n", "release_dates": []}, {"name": "eip712sign", "description": "Golang utility for signing EIP-712 payloads", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# eip712sign\n\nSmall golang utility used to sign EIP-712 hashes. Supports:\n\n- ledgers\n- mnemonics\n- raw private keys\n\n<!-- Badge row 1 - status -->\n\n[![GitHub contributors](https://img.shields.io/github/contributors/base-org/eip712sign)](https://github.com/base-org/eip712sign/graphs/contributors)\n[![GitHub commit activity](https://img.shields.io/github/commit-activity/w/base-org/eip712sign)](https://github.com/base-org/eip712sign/graphs/contributors)\n[![GitHub Stars](https://img.shields.io/github/stars/base-org/eip712sign.svg)](https://github.com/base-org/eip712sign/stargazers)\n![GitHub repo size](https://img.shields.io/github/repo-size/base-org/eip712sign)\n[![GitHub](https://img.shields.io/github/license/base-org/eip712sign?color=blue)](https://github.com/base-org/eip712sign/blob/main/LICENSE)\n\n<!-- Badge row 2 - links and profiles -->\n\n[![Website base.org](https://img.shields.io/website-up-down-green-red/https/base.org.svg)](https://base.org)\n[![Blog](https://img.shields.io/badge/blog-up-green)](https://base.mirror.xyz/)\n[![Docs](https://img.shields.io/badge/docs-up-green)](https://docs.base.org/)\n[![Discord](https://img.shields.io/discord/1067165013397213286?label=discord)](https://base.org/discord)\n[![Twitter BuildOnBase](https://img.shields.io/twitter/follow/BuildOnBase?style=social)](https://twitter.com/BuildOnBase)\n\n<!-- Badge row 3 - detailed status -->\n\n[![GitHub pull requests by-label](https://img.shields.io/github/issues-pr-raw/base-org/eip712sign)](https://github.com/base-org/eip712sign/pulls)\n[![GitHub Issues](https://img.shields.io/github/issues-raw/base-org/eip712sign.svg)](https://github.com/base-org/eip712sign/issues)\n\n### Installation\n\n```shell\ngo install github.com/base-org/eip712sign\n```\n\n### Flags\n\n```shell\nUsage of eip712sign:\n  -hd-paths string\n    \tHierarchical deterministic derivation path for mnemonic or ledger (default \"m/44'/60'/0'/0/0\")\n  -ledger\n    \tUse ledger device for signing\n  -mnemonic string\n    \tMnemonic to use for signing\n  -prefix string\n    \tString that prefixes the data to be signed (default \"vvvvvvvv\")\n  -private-key string\n    \tPrivate key to use for signing\n  -suffix string\n    \tString that suffixes the data to be signed (default \"^^^^^^^^\")\n  -workdir string\n    \tDirectory in which to run the subprocess (default \".\")\n```\n\n### Usage\n\n`eip712sign` can either be run as a command wrapper, or data can be piped in via stdin.\nThe former is recommended as it will only attempt to sign if the subprocess exit code is 0.\n\n```shell\neip712sign --ledger -- <COMMAND>\n```\n\nor\n\n```shell\n<COMMAND> | eip712sign --ledger\n```\n\nExample signing some bytes output from a forge script:\n\n```shell\neip712sign --ledger -- forge script --rpc-url <RPC_URL> SomeScript\n```\n\n`eip712sign` will parse the stdout from the subprocess, and by default, sign any hex string between the magic strings `vvvvvvvv` and `^^^^^^^^`.\nThis prefix + suffix can be configured using the `-prefix` and `-suffix` flags.\nIn this example, `SomeScript` should print this to the console, for example:\n\n```solidity\nfunction printDataToSign(bytes memory data) internal pure {\n    console.log(\"vvvvvvvv\");\n    console.logBytes(data);\n    console.log(\"^^^^^^^^\");\n}\n```\n\n...where `data` is 66 bytes in length.\n\nExample output:\n\n```shell\nCompiling 5 files with 0.8.15\nSolc 0.8.15 finished in 7.01s\nCompiler run successful!\nScript ran successfully.\n\n== Logs ==\n  vvvvvvvv\n  0x19011b6ca1022dcb8ee88e2ab8dd1adf6f6bfa6af586f8b074e99c952e6e3c6befadd5c5183a56f8aa2520c9522029fc20aba61ce6c6aa32aec3b00519c95eb819e8\n  ^^^^^^^^\n\nforge exited with code 0\n\nDomain hash: 0x1b6ca1022dcb8ee88e2ab8dd1adf6f6bfa6af586f8b074e99c952e6e3c6befad\nMessage hash: 0xd5c5183a56f8aa2520c9522029fc20aba61ce6c6aa32aec3b00519c95eb819e8\n\nData: 0x19011b6ca1022dcb8ee88e2ab8dd1adf6f6bfa6af586f8b074e99c952e6e3c6befadd5c5183a56f8aa2520c9522029fc20aba61ce6c6aa32aec3b00519c95eb819e8\nSigner: 0x4A02DE0C8a1C74AB99D1eCeb56d1d5f54B8293b0\nSignature: 36b6a15e3e86b1ae44bdfc9183c4d86b0eaead44c838530ecb2e43dd0618559579195d42fe63868a44ee0279feef0181b1a9ed3b0faa89bf1ebd48b0f48f54bc1c\n```\n", "release_dates": []}, {"name": "EIPs", "description": "The Ethereum Improvement Proposal repository", "language": null, "license": null, "readme": "# Ethereum Improvement Proposals (EIPs)\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/EIPs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nEthereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.\n\n**Before you initiate a pull request**, please read the [EIP-1](https://eips.ethereum.org/EIPS/eip-1) process document. Ideas should be thoroughly discussed prior to opening a pull request, such as on the [Ethereum Magicians forums](https://ethereum-magicians.org) or in a GitHub issue in this repository.\n\nThis repository tracks the ongoing status of EIPs. It contains:\n\n- [Draft](https://eips.ethereum.org/all#draft) proposals which intend to complete the EIP review process.\n- [Last Call](https://eips.ethereum.org/all#last-call) for proposals that may become final (see also [RSS feed](https://eips.ethereum.org/last-call.xml)).\n- [Accepted](https://eips.ethereum.org/all#accepted) proposals which are awaiting implementation or deployment by Ethereum client developers.\n- [Final](https://eips.ethereum.org/all#final) and [Active](https://eips.ethereum.org/all#active) proposals that are recorded.\n- The [EIP process](./EIPS/eip-1.md#eip-work-flow) that governs the EIP repository.\n\nAchieving \"Final\" status in this repository only represents that a proposal has been reviewed for technical accuracy. It is solely the responsibility of the reader to decide whether a proposal will be useful to them.\n\nBrowse all current and draft EIPs on [the official EIP site](https://eips.ethereum.org/).\n\nOnce your first PR is merged, we have a bot that helps out by automatically merging PRs to draft EIPs. For this to work, it has to be able to tell that you own the draft being edited. Make sure that the 'author' line of your EIP contains either your GitHub username or your email address inside <triangular brackets>. If you use your email address, that address must be the one publicly shown on [your GitHub profile](https://github.com/settings/profile).\n\n## Project Goal\n\nThe Ethereum Improvement Proposals repository exists as a place to share concrete proposals with potential users of the proposal and the Ethereum community at large.\n\n## Preferred Citation Format\n\nThe canonical URL for a EIP that has achieved draft status at any point is at https://eips.ethereum.org/. For example, the canonical URL for EIP-1 is https://eips.ethereum.org/EIPS/eip-1.\n\nPlease consider anything which is not published on https://eips.ethereum.org/ as a working paper.\n\nAnd please consider anything published at https://eips.ethereum.org/ with a status of \"draft\" as an incomplete draft.\n\n# Validation\n\nEIPs must pass some validation tests.  The EIP repository ensures this by running tests using [html-proofer](https://rubygems.org/gems/html-proofer) and [eip_validator](https://rubygems.org/gems/eip_validator).\n\nIt is possible to run the EIP validator locally:\n```sh\ngem install eip_validator\neip_validator <INPUT_FILES>\n```\n\n# Automerger\n\nThe EIP repository contains an \"auto merge\" feature to ease the workload for EIP editors.  If a change is made via a PR to a draft EIP, then the authors of the EIP can GitHub approve the change to have it auto-merged by the [eip-automerger](https://github.com/eip-automerger/automerger) bot.\n\n# Local development\n\n## Prerequisites\n\n1. Open Terminal.\n\n2. Check whether you have Ruby 2.1.0 or higher installed:\n\n```sh\n$ ruby --version\n```\n\n3. If you don't have Ruby installed, install Ruby 2.1.0 or higher.\n\n4. Install Bundler:\n\n```sh\n$ gem install bundler\n```\n\n5. Install dependencies:\n\n```sh\n$ bundle install\n```\n\n## Build your local Jekyll site\n\n1. Bundle assets and start the server:\n\n```sh\n$ bundle exec jekyll serve\n```\n\n2. Preview your local Jekyll site in your web browser at `http://localhost:4000`.\n\nMore information on Jekyll and GitHub pages [here](https://help.github.com/en/enterprise/2.14/user/articles/setting-up-your-github-pages-site-locally-with-jekyll).\n", "release_dates": []}, {"name": "eth-faucet", "description": "Ether faucet server built with Go and Svelte.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# eth-faucet\n\n[![Build](https://github.com/chainflag/eth-faucet/workflows/Go/badge.svg)](https://github.com/chainflag/eth-faucet/actions?query=workflow%3AGo)\n[![Release](https://img.shields.io/github/v/release/chainflag/eth-faucet)](https://github.com/chainflag/eth-faucet/releases)\n[![Report](https://goreportcard.com/badge/github.com/chainflag/eth-faucet)](https://goreportcard.com/report/github.com/chainflag/eth-faucet)\n[![Go](https://img.shields.io/github/go-mod/go-version/chainflag/eth-faucet)](https://go.dev/)\n[![License](https://img.shields.io/github/license/chainflag/eth-faucet)](https://github.com/chainflag/eth-faucet/blob/main/LICENSE)\n\nThe faucet is a web application with the goal of distributing small amounts of Ether in private and test networks.\n\n## Features\n\n* Allow to configure the funding account via private key or keystore\n* Asynchronous processing Txs to achieve parallel execution of user requests\n* Rate limiting by ETH address and IP address as a precaution against spam\n* Prevent X-Forwarded-For spoofing by specifying the count of reverse proxies\n\n## Get started\n\n### Prerequisites\n\n* Go (1.16 or later)\n* Node.js\n\n### Installation\n\n1. Clone the repository and navigate to the app\u2019s directory\n```bash\ngit clone https://github.com/chainflag/eth-faucet.git\ncd eth-faucet\n```\n\n2. Bundle Frontend web with Rollup\n```bash\nnpm run build\n```\n\n3. Build Go project \n```bash\ngo build -o eth-faucet\n```\n\n## Usage\n\n**Use private key to fund users**\n\n```bash\n./eth-faucet -httpport 8080 -wallet.provider http://localhost:8545 -wallet.privkey privkey\n```\n\n**Use keystore to fund users**\n\n```bash\n./eth-faucet -httpport 8080 -wallet.provider http://localhost:8545 -wallet.keyjson keystore -wallet.keypass password.txt\n```\n\n### Configuration\n\nYou can configure the funder by using environment variables instead of command-line flags as follows:\n```bash\nexport WEB3_PROVIDER=rpc endpoint\nexport PRIVATE_KEY=hex private key\n```\n\nor\n\n```bash\nexport WEB3_PROVIDER=rpc endpoint\nexport KEYSTORE=keystore path\necho \"your keystore password\" > `pwd`/password.txt\n```\n\nThen run the faucet application without the wallet command-line flags:\n```bash\n./eth-faucet -httpport 8080\n```\n\n**Optional Flags**\n\nThe following are the available command-line flags(excluding above wallet flags):\n\n| Flag           | Description                                      | Default Value\n| -------------- | ------------------------------------------------ | -------------\n| -httpport      | Listener port to serve HTTP connection           | 8080\n| -proxycount    | Count of reverse proxies in front of the server  | 0\n| -queuecap      | Maximum transactions waiting to be sent          | 100\n| -faucet.amount | Number of Ethers to transfer per user request    | 1\n| -faucet.minutes| Number of minutes to wait between funding rounds | 1440\n| -faucet.name   | Network name to display on the frontend          | testnet\n\n### Docker deployment\n\n```bash\ndocker run -d -p 8080:8080 -e WEB3_PROVIDER=rpc endpoint -e PRIVATE_KEY=hex private key chainflag/eth-faucet:1.1.0\n```\n\nor\n\n```bash\ndocker run -d -p 8080:8080 -e WEB3_PROVIDER=rpc endpoint -e KEYSTORE=keystore path -v `pwd`/keystore:/app/keystore -v `pwd`/password.txt:/app/password.txt chainflag/eth-faucet:1.1.0\n```\n\n### Heroku deployment\n\n```bash\nheroku create\nheroku buildpacks:add heroku/nodejs\nheroku buildpacks:add heroku/go\nheroku config:set WEB3_PROVIDER=rpc endpoint\nheroku config:set PRIVATE_KEY=hex private key\ngit push heroku main\nheroku open\n```\n\nor\n\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\n> tip: Free web dyno goes to sleep and discards in-memory rate limiting records after 30 minutes of inactivity, so `faucet.minutes` configuration greater than 30 doesn't work properly in the free Heroku plan.\n\n## License\n\nDistributed under the MIT License. See LICENSE for more information.\n", "release_dates": []}, {"name": "ethereum-lite-explorer", "description": "Alethio's Light Weight Open Source Ethereum Explorer", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Ethereum Lite Explorer by Alethio\nThe **Lite Explorer**  is a client-side only web application that connects directly to a [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC) compatible node.\nThis means you can have your own private Ethereum Explorer should you wish so.\nNo need for servers, hosting or trusting any third parties to display chain data.\n\n[![CircleCI](https://circleci.com/gh/Alethio/ethereum-lite-explorer.svg?style=svg)](https://circleci.com/gh/Alethio/ethereum-lite-explorer)\n[![Docker](https://images.microbadger.com/badges/version/alethio/ethereum-lite-explorer.svg)](https://hub.docker.com/r/alethio/ethereum-lite-explorer \"Get Ethereum Lite Explorer through Docker Hub\")\n\n> **WARNING v1.x.x is a breaking update from previous v0.x.x releases**\n\n> NOTICE\n> Please report any bugs using Github's [issues](https://github.com/Alethio/ethereum-lite-explorer/issues/)\n\n## Contents\n<!-- TOC depthFrom:2 depthTo:4 -->\n\n- [Contents](#contents)\n- [Technical Details](#technical-details)\n    - [Project structure](#project-structure)\n- [Getting started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Configuration](#configuration)\n    - [Running in Docker](#running-in-docker)\n    - [Running in Kubernetes](#running-in-kubernetes)\n    - [Building from source](#building-from-source)\n        - [Deploying the built assets to production](#deploying-the-built-assets-to-production)\n        - [Custom build arguments](#custom-build-arguments)\n    - [Example setups](#example-setups)\n        - [With Memento](#with-memento)\n        - [With Infura](#with-infura)\n        - [With Parity Light Client](#with-parity-light-client)\n        - [With Ganache](#with-ganache)\n        - [With Pantheon](#with-pantheon)\n    - [Example Deployments](#example-deployments)\n        - [surge.sh](#surgesh)\n- [How to](#how-to)\n    - [Deploy to a domain sub-path](#deploy-to-a-domain-sub-path)\n    - [Show the network name](#show-the-network-name)\n    - [Link to a custom deployment of EthStats](#link-to-a-custom-deployment-of-ethstats)\n    - [Use a custom ETH currency symbol](#use-a-custom-eth-currency-symbol)\n    - [Show the transactions per account in account page](#show-the-transactions-per-account-in-account-page)\n    - [Override specific text strings (translations)](#override-specific-text-strings-translations)\n    - [Use a custom RPC node authentication method](#use-a-custom-rpc-node-authentication-method)\n\n<!-- /TOC -->\n- [Contributing](CONTRIBUTING.md)\n- [License](LICENSE.md)\n\n## Technical Details\n\nThe project is built on a React/MobX and TypeScript stack, using the [Alethio CMS](https://github.com/Alethio/cms), which allows us to add extensions dynamically through 3rd party plugins.\nThe basic functionality of the explorer is implemented via a series of open-source [core plugins](https://github.com/Alethio/explorer-core-plugins), which we also use internally for our [aleth.io](https://aleth.io) platform. Please refer to [Alethio CMS](https://github.com/Alethio/cms) for documentation on the plugin system.\n\n### Project structure\n```\n\ud83d\udcc1ethereum-lite-explorer\n\u251c\u2500\ud83d\udcc1dev             - dev server for serving the app\n\u251c\u2500\ud83d\udcc1dist            - target folder for application that contains deployables\n\u2514\u2500\ud83d\udcc1src             - source files\n  \u251c\u2500\ud83d\udcc1app (*1)      - application source code\n  \u251c\u2500\ud83d\udcc1assets        - static assets (e.g. images) that will be bundled together with the application\n  \u2514\u2500\ud83d\udcc1public        - contains static assets that are copied to the dist folder as they are\n\n(*1)\n\ud83d\udcc1app\n\u251c\u2500\ud83d\udcc1components      - React components\n\u251c\u2500\ud83d\udcc1translation     - localized strings\n\u251c\u2500\ud83d\udcc1util            - application-agnostic utilities. Ideally these would be in a separate repo/package.\n\u2514\u2500\ud83d\udcc4index.ts         - entry point\n```\n\n## Getting started\n\n### Prerequisites\nPlease make sure you have the following installed and running properly\n- [Node.js](https://nodejs.org/en/download/) >= 8.0 or [Docker](https://www.docker.com/)\n- If building it you will also need NPM >= 6.9 (NPM is distributed with Node.js. For more information see: https://www.npmjs.com/get-npm)\n- A JSON-RPC enabled and accessible Ethereum Client, some examples:\n    * [An Infura Account](#with-infura)\n    * [Parity Light Client](#with-parity-light-client)\n    * [Ganache](#with-ganache)\n    * [Pantheon Dev Mode](#with-pantheon) - private chain example\n- If not using the pre-built Docker images, you will need an HTTP server for serving the app and it must be deployed at the root of the domain/subdomain.\n\n### Configuration\n\nThe application requires a JSON configuration file which is loaded at runtime but with different approaches for `development` vs `production` environments.\n\nFor `development` the config file is called `config.dev.json` located in the root of the repository.\nAs for the `production` environment the config file is copied in the `dist` folder and renamed to `config.json`.\n\nThe `dist` is the target folder for the built application that needs to be served by an HTTP server.\n\nHere are 3 sample config files as starting point.\n\n| Config name | Description |\n| --- | --- |\n| config.default.json | Default configuration file which contains the core plugins of the app that are enough to run the explorer. |\n| config.ibft2.json | Configuration file that has the default core plugins plus an extra one useful for [IBFT2 based chains](https://pegasys.tech/another-day-another-consensus-algorithm-why-ibft-2-0/) that decodes the extraData field of a block. |\n| config.memento.json | Configuration file that has the default core plugins plus the memento plugins to use the Memento API as a data source |\n\nThe possibility to change the URL of the RPC enabled Ethereum node is done through the `eth-lite` core plugin.\nSee the [`nodeUrl`](https://github.com/Alethio/ethereum-lite-explorer/blob/master/config.default.json#L16) attribute for the plugin which has the default value set to `https://mainnet.infura.io/`.\n\nFor advanced configuration editing, please refer to the [Alethio CMS documentation](https://github.com/Alethio/cms)\n\n### Running in Docker\nYou can run the Lite Explorer in Docker by using the already published images on [Docker Hub](https://hub.docker.com/r/alethio/ethereum-lite-explorer).\nThe config file in the Docker images have the default values from the `config.default.json` sample file.\nBy default it will connect to `https://mainnet.infura.io/`.\n\nThe simplest command to run it is\n```sh\n$ docker run -p 80:80 alethio/ethereum-lite-explorer\n```\nwhich will start a container on port 80 of your computer with a nginx embedded to serve the pre-build explorer. You can now open [localhost](http://localhost) in your browser and use it.\n\nThere are 2 env vars that can be passed in at runtime:\n\n| ENV var | Description |\n|---|---|\n| APP_NODE_URL | URL of RPC enabled node. (e.g. `https://host:port`, also supports Basic Auth by prepending `user:pass@` to the `host`). This overrides in the config file the `nodeUrl` attribute of the `eth-lite` core plugin. |\n| APP_BASE_URL | It is used ONLY in `index.html` for `og:tags` (e.g. `https://my.app.tld`). Overrides build time defined value. |\n\nFor example if you want to connect to your node on localhost with all default configs run the following command:\n```sh\n$ docker run -p 80:80 -e APP_NODE_URL=\"http://localhost:8545\" alethio/ethereum-lite-explorer\n```\nIf more customization is needed, a full configuration file can be mounted in the application root (e.g. in the `/usr/share/nginx/html` folder).\n```sh\n$ docker run -p 80:80 -v /your-config-dir/config.json:/usr/share/nginx/html/config.json alethio/ethereum-lite-explorer\n```\n### Running in Kubernetes\nYou can deploy the Lite Explorer in Kubernetes using the following steps:\n- `cd .kubernetes`\n- Run `./deploy.sh` to deploy, uses `config.default.json` as config.\n- Use for example `./deploy.sh ../config.memento.json` to select other config files.\n- Run `./remove.sh` to remove\n\n\n### Building from source\nClone the explorer in a folder of your choosing\n```sh\n$ git clone https://github.com/Alethio/ethereum-lite-explorer.git\n$ cd ethereum-lite-explorer\n```\n\n**IMPORTANT**: Make sure you are using npm 6.9+ for the next step. Older versions will NOT work due to `alias` feature usages introduced in npm 6.9.\n\nInstall npm packages\n```sh\n$ npm install\n```\n\nCopy the sample config file\n```sh\n$ cp config.default.json config.dev.json\n```\nMake necessary modifications into `config.dev.json` if needed. For development, you must also remove the version query strings `?v=#.#.#` from the `\"plugins\"` URIs. Full list of configuration options available [here](#configuration)\n\nTo start the development build run the following command:\n```sh\n$ npm run watch\n```\n\nThis terminal will be kept open, as the above command continuously watches the source files for changes and triggers an incremental build on every change.\n\nAlternatively, to build the minified version (used also for `production`) use:\n```sh\n$ npm run build\n```\n\nSince the app is using the Alethio CMS for using the core plugins the next step is to install them:\n```sh\n$ npm i -g @alethio/cms-plugin-tool\n$ acp install --dev \\\n    @alethio/explorer-plugin-eth-common \\\n    @alethio/explorer-plugin-eth-lite \\\n    @alethio/explorer-plugin-eth-memento \\\n    @alethio/explorer-plugin-3box\n```\n\nIf you need other custom plugins like for example to decode the extraData field of a block for the IBFT2 based networks, you can install them at this step:\n```sh\n$ acp install --dev @alethio/explorer-plugin-eth-ibft2\n```\n\nThe above command `acp` installs the plugins in the `dist` folder. Basically they will be copied, together with the base app.\n\n**IMPORTANT**: Whenever you use `npm run build` or `npm run build-dev` the `dist` folder is emptied, thus the plugins are also deleted and they need to be reinstalled.\n\nFinally, you can start the local Explorer development server with\n```sh\n$ npm start\n```\n\n#### Deploying the built assets to production\n\nWhen building from source, you are responsible for setting up your own production environment. There are two available options: you can either start from our existing Dockerfile found in the root of the repo and customize that, or you can use your own custom solution.\n\nFor a custom deployment, first make sure you have built the Explorer distributables for production, using `npm run build`. Assuming you already have a web server, such as Nginx, you will need to copy everything from the `dist/` folder to the public folder of the web server (e.g. /usr/share/nginx/html). Then, in the same target folder you need a valid `config.json` file. Note the filename, which is different from the development version. You can use the `config.*.json` from the root of the repo as templates. Make sure to also fill in the `nodeUrl` in the `eth-lite` plugin config section. Lastly, make sure that your web server redirects all routes to the `index.html` to enable HTML5 routing. You can refer to `.docker/nginx.conf` as an example.\n\n#### Custom build arguments\n\nThe following env vars can be passed when building from source:\n\n| ENV var | Description |\n|---|---|\n| APP_BASE_URL | It is used ONLY in `index.html` for `og:tags` (e.g. `https://my.app.tld`) |\n| APP_BASE_PATH | Enables serving the app on a sub-path instead of the domain root (e.g. `some/path/to/app`). |\n\nExample:\nIf serving the app from `https://my.tld/path/to/app`:\n` $ APP_BASE_URL=\"https://my.tld\" APP_BASE_PATH=\"path/to/app\" npm run build`\n\n### Example setups\n\n#### With Memento\n[Memento](https://github.com/Alethio/memento) is Alethio's open source tool for scraping and indexing Ethereum data from any web3-compatible node.\nThe biggest advantage of using Memento as a data source is the indexed data which allows a faster access as well as the ability to show transactions on the account page.\n\nIf you don't have a Memento environment set up already, follow the instructions [here](https://github.com/Alethio/memento#installation)\n\n> This requires Memento >= v1.1.0\n\n**Easiest way to run with Memento** is to follow the steps from [Running in Docker](#running-in-docker) and mount `config.memento.js` as config file.\n\n**If you want a more customized setup**, follow [Building from source](#building-from-source) and the following steps\n\nBuild the Lite Explorer\n```sh\n$ npm run build\n```\n\nInstall the necessary plugins\n```sh\n$ acp install --dev \\\n    @alethio/explorer-plugin-eth-common \\\n    @alethio/explorer-plugin-eth-memento \\\n    @alethio/explorer-plugin-3box\n```\n\nCopy the config file\n```sh\n$ cp config.memento.json config.dev.json\n```\n\nModify the `apiBasePath` to point to Memento's API and, since we are running in dev mode, remove the version query strings `?v=#.#.#` from the \"plugins\". The \"plugins\" section should look as follows:\n```sh\n\"plugins\": [{\n    \"uri\": \"plugin://aleth.io/eth-common\"\n}, {\n    \"uri\": \"plugin://aleth.io/3box\",\n    \"config\": {\n        \"ipfsUrlMask\": \"https://ipfs.infura.io/ipfs/%s\"\n    }\n}, {\n    \"uri\": \"plugin://aleth.io/eth-memento\",\n    \"config\": {\n        \"apiBasePath\": \"http://localhost:3001/api/explorer\"\n    }\n}],\n```\n\nStart the explorer\n```sh\n$ npm start\n```\n\n#### With Infura\n- [Sign-up](https://infura.io/register) for an account or [sign-in](https://infura.io/login) into your Infura account.\n\n- From the control panel, obtain your endpoint url for the network you are interested in (mainnet, ropsten, kovan, rinkeby). It will looks similar to `https://mainnet.infura.io/v3/aa11bb22cc33.....`.\n\n- Update `config.dev.json` file and set the `nodeUrl` attribute for the `eth-lite` plugin to your Infura endpoint.\n\nBuild and start Lite Explorer\n```sh\n$ npm run build && npm start\n```\n\n####  With Parity Light Client\nThis will allow you to run both your own node and explorer.\nNo third-party dependencies.\nIt will be slower to browse older data because it is fetching it real time from other ethereum peer nodes but it's fast to sync and low in resource usage.\n\n[Install Parity Ethereum](https://wiki.parity.io/Setup) through one of the convenient methods and start it with the `--light` cli flag.\n\nAs a simple step, if you have Docker, you could just run\n\n```sh\n$ docker run -d --restart always --name parity-light -p 127.0.0.1:8545:8545 parity/parity:stable --light --jsonrpc-interface all\n```\n\nUpdate `config.dev.json` file and set the `nodeUrl` attribute for the `eth-lite` plugin to `http://127.0.0.1:8545`.\n\nBuild and start Lite Explorer\n```sh\n$ npm run build && npm start\n```\n\n#### With Ganache\nFirst of all, if you do not have it, download and install [Ganache](https://truffleframework.com/ganache) which will give you your own personal test chain.\n\nAfter setting up and starting Ganache, update the `config.dev.json` file and set the `nodeUrl` attribute for the `eth-lite` plugin to `http://127.0.0.1:7545`.\n\nBuild and start Lite Explorer\n```sh\n$ npm run build && npm start\n```\n\n#### With Pantheon\nThis is a great way to use a full featured client, and to see how the explorer works with a private network.\n\nFirst of all, if you do not have it, [download and install Pantheon stable release](https://docs.pantheon.pegasys.tech/en/stable/Installation/Install-Binaries/).\n\nTo get started, run a Pantheon node with the HTTP and WebSockets JSON-RPC services enabled, allowing traffic from all hosts and CORS origins:\n\n```sh\n$ pantheon --host-whitelist=\"*\" --rpc-http-cors-origins=\"*\" --rpc-http-enabled --rpc-http-host=0.0.0.0 --rpc-ws-enabled --rpc-ws-host=0.0.0.0\n```\n\n_(Note: using \"*\" values for host whitelist and CORS origins is not a recommended way to run a production node securely, this configuration is intended for test or developement purpose only. For more information about these options, refer to the [Pantheon CLI reference](https://docs.pantheon.pegasys.tech/en/stable/Reference/Pantheon-CLI-Syntax/))._\n\nAfter running Pantheon, update the `config.dev.json` file, and set the `nodeUrl` attribute for the `eth-lite` plugin to `http://127.0.0.1:8545`.\n\nBuild and start Lite Explorer\n```sh\n$ npm run build && npm start\n```\n\n### Example Deployments\n\n#### surge.sh\nSurge.sh is a simple, single-command web publishing service that you can use to deploy your own version of the Lite Explorer.\n\nMake sure you have set a proper and accessible `APP_NODE_URL` environment variable.\n\n```sh\n# copy and edit a config file\n$ cp config.default.json config.json\n# install surge\n$ npm install --global surge\n# build explorer\n$ npm run build\n# go to build dir\n$ cd dist\n# make push state work as it should\n$ cp ../config.json config.json && cp index.html 200.html\n# deploy\n$ surge\n```\n\n## How to\n\n### Deploy to a domain sub-path\n\nThis case is supported only when building from source. You will have to pass the `APP_BASE_PATH` env variable to the build command. See [Custom build arguments](#custom-build-arguments) for reference and examples.\n\n### Show the network name\n\nYou can use our predefined module that shows the current network and an optional switch for navigating to other deployments/networks. To use this module, just add the following in `config.json`:\n\n```jsonc\n{\n    // ...\n    \"pages\": [\n        // ...\n        {\n            \"def\": \"page://aleth.io/dashboard\",\n            \"children\": {\n                \"content\": [\n                    {\n                        \"def\": \"module://aleth.io/dashboard/network\",\n                        \"options\": {\n                            \"networkName\": \"MyTestNet\",\n                            // This is optional\n                            \"otherNetworks\": [\n                                { \"name\": \"Ethereum MainNet\", \"url\": \"https://aleth.io\" }\n                            ]\n                        }\n                    },\n                    // ...\n                ]\n            }\n        }\n    ]\n}\n```\n\n### Link to a custom deployment of EthStats\n\nIf you have a custom deployment of our [EthStats](https://github.com/Alethio/ethstats-network-dashboard) product, you can easily link to it from the main app toolbar using the predefined module. You'll have to edit `config.json` as shown below:\n\n```jsonc\n{\n    \"plugins\": [{\n        \"uri\": \"plugin://aleth.io/eth-common?v#.#.#\",\n        \"config\": {\n            // ...\n            \"ethstatsUrl\": \"https://ethstats.io\"\n        }\n    }],\n    // ...\n    \"rootModules\": {\n        \"toolbarTop\": [\n            // ...\n            { \"def\": \"module://aleth.io/toolbar/ethstats\" }\n        ],\n        // ...\n    }\n}\n```\n\n### Use a custom ETH currency symbol\n\nIf you are deploying for a private or test net, you can customize the main currency symbol by editing the config:\n\n\n```jsonc\n{\n    \"plugins\": [{\n        \"uri\": \"plugin://aleth.io/eth-lite?v#.#.#\",\n        \"config\": {\n            // ...\n            \"ethSymbol\": \"G\u00f6ETH\"\n        }\n    }]\n}\n```\n### Show the transactions per account in account page\n\nThis module requires `@alethio/explorer-plugin-eth-memento` and access to call the api of a memento lite pipeline deployment.\nEdit the config:\n\n```jsonc\n{\n    \"plugins\": [{\n        \"uri\": \"plugin://aleth.io/eth-memento?v#.#.#\",\n        \"config\": {\n            \"ethSymbol\": \"GoETH\",\n            \"apiBasePath\": \"http://memento-api.example/api/explorer\"\n        }\n    }]\n}\n```\n\nAnd add the module to account page:\n\n```jsonc\n{\n    \"pages\": [{\n        \"def\": \"page://aleth.io/account\",\n        \"children\": {\n            // ...\n            \"bottom\": [\n                { \"def\": \"module://aleth.io/memento/account/txs\" }\n                // ...\n            ]\n        }\n    }]\n}\n```\n\nIf you want to use Memento as a full backend replacement (recommended), see the [With Memento](#with-memento) section.\n\n### Override specific text strings (translations)\n\nYou can customize texts for each plugin by overriding the corresponding translation keys in the plugin's configuration:\n\n```jsonc\n{\n    \"plugins\": [{\n        \"uri\": \"plugin://aleth.io/eth-lite?v#.#.#\",\n        \"config\": {\n            //...\n        },\n        \"translations\": {\n            \"en-US\": {\n                \"dashboardView.title\": \"My Private Network Explorer\"\n            }\n        }\n    }]\n}\n```\n\nYou can refer to individual translation keys in the core plugins repo. Follow [this link](https://github.com/Alethio/explorer-core-plugins/tree/master/src/app/eth-lite/translation) for the eth-lite plugin translations and [this one](https://github.com/Alethio/explorer-core-plugins/tree/master/src/app/eth-common/translation) for eth-common plugin translations.\n\n### Use a custom RPC node authentication method\n\nIf your RPC node requires a custom authentication step (e.g. Besu), the `eth-lite` plugin supports initialization hooks for the purpose of injecting authorization headers into the web3 instance. You will need to create a plugin that handles the authentication steps (e.g. collects credentials via a login form or 3rd party page redirect). The plugin will export a data adapter returning an object that follows the [IAuthStore](https://github.com/Alethio/explorer-core-plugins/blob/master/src/app/eth-lite/IAuthStore.ts) interface definition. The public URI for that adapter is passed to the `eth-lite` plugin config via the [authStoreUri](https://github.com/Alethio/explorer-core-plugins/blob/master/src/app/eth-lite/EthLitePluginConfig.ts#L14) key. This will pause the initialization of the `eth-lite` plugin until the authentication is handled.\n\nCheck out this Besu plugin as an example: https://www.npmjs.com/package/@adetante/explorer-besu-plugin\n", "release_dates": []}, {"name": "ethereum-optimism.github.io", "description": "Unified token list for OP Mainnet, Base, and other OP Chains", "language": "TypeScript", "license": null, "readme": "# Superchain Token List\n\nThe Superchain token list is a list of tokens managed by the maintainers of this repo that have been deployed on Superchains including the OP Mainnet and Base. It serves as a source of truth for services such as the [Optimism bridge UI](https://app.optimism.io/bridge).\n\nIt is worth noting that the Superchain Token List makes a distinction between\u00a0token deployment / bridging\u00a0and\u00a0list curation. Tokens can be deployed / bridged in a permissionless manner, [anyone can deploy / bridge a token](https://github.com/ethereum-optimism/optimism-tutorial/tree/01e4f94fa2671cfed0c6c82257345f77b3b858ef/standard-bridge-standard-token) on the Superchain.\n\nPlease note that by adding a token to the list we aren\u2019t making any claims about the token itself; tokens are not reviewed for their quality, merits, or soundness as investments.\n\n## Review process and merge criteria\n\n### Process overview\n\n1. Follow the instructions below to create a PR that would [add your token to the list](#adding-a-token-to-the-list).\n2. Wait for a reviewer to kick off the [automated checks](#automated-checks).\n3. After the automated checks pass and a reviewer approves the PR, then it will automatically be merged.\n\n**Note:** The standard bridge does *not* support certain ERC-20 configurations:\n\n- [Fee on transfer tokens](https://github.com/d-xo/weird-erc20#fee-on-transfer)\n- [Tokens that modify balances without emitting a Transfer event](https://github.com/d-xo/weird-erc20#balance-modifications-outside-of-transfers-rebasingairdrops)\n\n### Base tokens\nFor right now, `Base` tokens go through a separate review process. So, if you are adding tokens across both `Optimism` and `Base`, please separate this pull request into separate pull requests for each chain, in order to streamline the review process. If you are adding a token to a `Base` chain (e.g. `base` [mainnet] or `base-goerli` [testnet]) please add [@roberto-bayardo](https://github.com/roberto-bayardo) as a reviewer as they are the point of contact for `Base` tokens and must approve all `Base` tokens before they are merged.\n\nInstead of using the predeploy token factory on Base, we recommend you use the token factory [listed here](https://docs.base.org/base-contracts/#l2-contract-addresses) for the time being to avoid having a token address that may conflict with a different token on Optimism.\n\n### Automated checks\n\nOur CI performs a series of automated checks on every PR.\nThese automated checks take place as part of the `Validate PR` check.\nSome issues raised by CI will trigger an error and must be resolved before your PR will be approved.\nThese issues are marked below as \"auto-reject\" issues.\nOther issues will surface a warning, and will require a manual review from a reviewer.\nThese issues are marked below as \"requires manual review\".\n\n- Given tokens actually exist on all specified chains (auto-reject)\n- L1 tokens are verified on Etherscan (auto-reject)\n- Description is under 1000 characters (auto-reject)\n- Token `name`, `symbol`, and `decimals` matches on-chain data (auto-reject)\n  - If `overrides` are used (requires manual review)\n- L2 token was deployed by the [StandardTokenFactory](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/L2StandardTokenFactory.sol) or is an [L2StandardERC20](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/standards/L2StandardERC20.sol) token that uses the standard L2 bridge address (`0x4200000000000000000000000000000000000010`) (requires manual review)\n- Ethereum token listed on the [CoinGecko Token List](https://tokenlists.org/token-list?url=https://tokens.coingecko.com/uniswap/all.json)(requires manual review)\n  - *Why CoinGecko? CoinGecko's token list updates every hour which means we get token list updates very quickly. CoinGecko also uses an in-depth [listing criteria](https://www.coingecko.com/en/methodology).*\n\n#### Debugging Automated checks failures\nIf your automated checks failed, you can see the reason for the failure by downloading `validation-artifacts.zip`, unzipping it and opening the `validation_results.txt` file. To locate the `validation-artifacts` follow these steps:\n\n1. Click on the `Details` link for `Validate PR` check in your PR\n2. Click `Summary` in the left panel\n3. Find the section on the page labeled `Artifacts` and click on `validation-artifacts`\n4. After download of `validation-artifacts.zip`, unzip it and open `validation_results.txt`\n\nIf you make changes and need to run the validation check again, you will need to wait for a reviewer to approve the checks to run again. However, if you do not want to wait for a reviewer to approve the checks to run again to see if the failures have been resolved, you can run the validation checks locally by running:\n```\nnpx tsx ./bin/cli.ts validate --datadir ./data --tokens <data folder name (e.g. ETH)>\n```\n### Final approval\n\nAll PRs are subject to a light-weight final approval, even if not marked as `requires manual review`.\n\n## Adding a token to the list\n\n### Create a folder for your token\n\nCreate a folder inside of the [data folder](https://github.com/ethereum-optimism/ethereum-optimism.github.io/tree/master/data) with the same name as the symbol of the token you are trying to add. For example, if you are adding a token with the symbol \"ETH\" you must create a folder called ETH.\n\n### Add a logo to your folder\n\nAdd a logo to the data folder you just created. Your logo MUST be an SVG called `logo.svg`. Your logo should be at least 200x200 pt minimum and 256x256 pt preferred.\n\n### Create a data file\n\nAdd a file to your folder called `data.json` with the following format:\n\n```json\n{\n  \"name\": \"Token Name\",\n  \"symbol\": \"SYMBOL\",\n  \"decimals\": 18,\n  \"description\": \"A multi-chain token\",\n  \"website\": \"https://token.com\",\n  \"twitter\": \"@token\",\n  \"tokens\": {\n    \"ethereum\": {\n      \"address\": \"0x1234123412341234123412341234123412341234\"\n    },\n    \"optimism\": {\n      \"address\": \"0x2345234523452345234523452345234523452345\"\n    },\n    \"goerli\": {\n      \"address\": \"0x5678567856785678567856785678567856785678\"\n    },\n    \"optimism-goerli\": {\n      \"address\": \"0x6789678967896789678967896789678967896789\"\n    },\n    \"base\": {\n      \"address\": \"0x7890789078907890789078907890789078907890\"\n    },\n    \"base-goerli\": {\n      \"address\": \"0x1011121011121011121011121011121011121011\"\n    }\n  }\n}\n```\n\nPlease include the token addresses for *all* of the below chains where the token you are submitting has been deployed.\nWe currently accept tokens on the following chains:\n\n- `ethereum`\n- `optimism`\n- `goerli`\n- `sepolia`\n- `base`\n- `base-goerli`\n- `base-sepolia`\n- `optimism-goerli`\n- `optimism-sepolia`\n\n#### Non-bridgable tokens\n\nIf you would like to add your token to this token list but you do not want your token to be included on the Optimism Bridge app, please include the `nobridge` option.\n\n```json\n{\n  \"name\": \"Token Name\",\n  \"symbol\": \"SYMBOL\",\n  \"decimals\": 18,\n  \"description\": \"A multi-chain token\",\n  \"website\": \"https://token.com\",\n  \"twitter\": \"@token\",\n  \"nobridge\": true,\n  \"tokens\": {\n    ...\n  }\n}\n```\n\n#### Non-standard tokens\n\nIf your token is not a standard ERC20 (e.g., DSToken), please include the `nonstandard` option.\n\n```json\n{\n  \"name\": \"Token Name\",\n  \"symbol\": \"SYMBOL\",\n  \"decimals\": 18,\n  \"description\": \"A multi-chain token\",\n  \"website\": \"https://token.com\",\n  \"twitter\": \"@token\",\n  \"nonstandard\": true,\n  \"tokens\": {\n    ...\n  }\n}\n```\n\n#### Per-token overrides\n\nIf you require overrides for specific tokens, you can include the `overrides` field. You are able to override the `name`, `symbol`, `decimals`, or `bridge` for any token. You do not need to override every token at the same time.\n\n```json\n{\n  \"name\": \"Token Name\",\n  \"symbol\": \"SYMBOL\",\n  \"decimals\": 18,\n  \"description\": \"A multi-chain token\",\n  \"website\": \"https://token.com\",\n  \"twitter\": \"@token\",\n  \"tokens\": {\n    \"ethereum\": {\n      \"address\": \"0x1234123412341234123412341234123412341234\",\n      \"overrides\": {\n        \"name\": \"My Ethereum Token\"\n      }\n    },\n    \"optimism\": {\n      \"address\": \"0x2345234523452345234523452345234523452345\",\n      \"overrides\": {\n        \"bridge\": \"0x1111111111111111111111111111111111111111\"\n      }\n    }\n  }\n}\n```\n\n##### Bridge overrides\nTo override an L1 bridge address, specify the L2 chain it bridges to along with the address of the L1 bridge. For an L2 bridge address override, just specify the address of the L2 bridge.\n\nHere is an example:\n\n```\n{\n  \"name\": \"Synthetix\",\n  \"symbol\": \"SNX\",\n  \"decimals\": 18,\n  \"tokens\": {\n    \"ethereum\": {\n      \"address\": \"0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f\",\n      \"overrides\": {\n        \"bridge\": {\n          \"optimism\": \"0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F\"\n        }\n      }\n    },\n    \"optimism\": {\n      \"address\": \"0x8700daec35af8ff88c16bdf0418774cb3d7599b4\",\n      \"overrides\": {\n        \"bridge\": \"0x136b1EC699c62b0606854056f02dC7Bb80482d63\"\n      }\n    },\n    \"goerli\": {\n      \"address\": \"0x51f44ca59b867E005e48FA573Cb8df83FC7f7597\",\n      \"overrides\": {\n        \"bridge\": {\n          \"optimism-goerli\": \"0x1427Bc44755d9Aa317535B1feE38922760Aa4e65\"\n        }\n      }\n    },\n    \"optimism-goerli\": {\n      \"address\": \"0x2E5ED97596a8368EB9E44B1f3F25B2E813845303\",\n      \"overrides\": {\n        \"bridge\": \"0xD2b3F0Ea40dB68088415412b0043F37B3088836D\"\n      }\n    }\n  }\n}\n```\n\n\n### Create a pull request\n\nOpen a [pull request](https://github.com/ethereum-optimism/ethereum-optimism.github.io/pulls) with the changes that you've made. Please only add one token per pull request to simplify the review process. This means two new files inside of one new folder. If you want to add multiple tokens, please open different PRs for each token.\n\n### Respond to validation checks\n\nYour pull request will be validated by a series of automated checks. If one of these checks fails, please resolve these issues and make sure that validation succeeds. We will review your pull request for final approval once automated validation succeeds.\n\n### Wait for the token list to update automatically\n\nOnce your PR is merged, the token list will update automatically to include your token. Please do NOT update the token list (`optimism.tokenlist.json`) directly. All token list updates will be handled automatically when PRs are merged into the `master` branch.\n\nNote that [the bridge UI](https://app.optimism.io/bridge/deposit) is updated approximately once every work day, so it might take a day (or three in the case of an update on Friday) until your token is available there.\n", "release_dates": []}, {"name": "ethereumjs-vm", "description": "[Optimism] The Optimistic Ethereumjs VM", "language": "TypeScript", "license": {"key": "mpl-2.0", "name": "Mozilla Public License 2.0", "spdx_id": "MPL-2.0", "url": "https://api.github.com/licenses/mpl-2.0", "node_id": "MDc6TGljZW5zZTE0"}, "readme": "# ethereumjs-ovm\n\nImplements Optimism's OVM in Javascript. Forked with <3 from `ethereumjs-vm`!\n\n## Logging\n\nThis fork provides some custom logging tools for introspecting the OVM via the `debug` package. Particularly, the environment variable `DEBUG='ethjs-ovm:interpreter` will allow you to log various degrees of internal EVM execution such as calls, stack, and memory.\nYou must also add `DEBUG_OVM=true` to enable debugging.\nThe logging namespace includes the start and ending bytes of the address and the call depth (e.g. `js-ovm:intrp:0xdeadde..ad0005:d5`)\n\nAvailable namespaces are:\n\n- All OVM debug logging (warning, lots of logs): `DEBUG='*'`\n- Call logging: `DEBUG='*:calls` (recommended to run first)\n- Step logging: `DEBUG='*:calls:steps` (recommended to run filtered by address, e.g. `DEBUG='*:calls,js-ovm:intrp:0xdeadde..ad0005:d2:calls:steps'`)\n- Memory logging: `DEBUG=*:calls:memory` (recommended to run filtered by address, see above)\n\nOr mix and match any of the above to get your desired logging level.\n\n# LICENSE\n\n[MPL-2.0](https://www.mozilla.org/MPL/2.0/)\n", "release_dates": []}, {"name": "evmgateway-starter", "description": "OP Goerli Passport NFT using EVMGateway", "language": "Solidity", "license": null, "readme": "# OP-Goerli Passport NFT (evmgateway example app)\n\n<img width=\"299\" alt=\"Screenshot 2023-11-07 at 11 52 37\u202fPM\" src=\"https://github.com/ethereum-optimism/evmgateway-starter/assets/9677071/02e9e4b3-f427-432e-b355-3351d011e0ba\">\n\n\nThis is an example app that uses Ethereum Name Service (ENS)'s [evmgateway](https://github.com/ensdomains/evmgateway). \n\nCheck it out at https://evmgateway-starter.vercel.app/\n\n## What is OP-Goerli Passport NFT\n\nThe Passport NFT is as non-transferrable NFT on L1 (Goerli) that dynamically updates based on some of the owner's actions on L2 (OP Goerli). The NFT's `tokenURI` function performs two subsequent CCIP-Reads, and returns a svg string that encodes the read results.\n\n## What is [evmgateway](https://github.com/ensdomains/evmgateway)?\n\nEVM Gateway is a [CCIP-Read](https://eips.ethereum.org/EIPS/eip-3668) gateway that allows L1 smart contracts to fetch and verify state from L2s. Read more about it [here](https://github.com/ensdomains/evmgateway#evm-ccip-read-gateway).\n\n## Who is this for?\n\n- Hackers hacking on [evmgateway](https://github.com/ensdomains/evmgateway)\n- Hackers interested in learning more about how an OP Stack chain works\n- Hackers interested in learning more about how CCIP-Read works\n\n## How does it work?\n\nCheck out the contract [here](https://github.com/ethereum-optimism/evmgateway-starter/blob/main/contracts/src/L1PassportNFT.sol)\n\n- `L2TestCoin` is deployed on OP Goerli\n- `L2TestNFT` is deployed on OP Goerli\n- `L1PassportNFT` is deployed on Goerli\n\n1. `tokenURI` function on the `L1PassportNFT` contract performs a CCIP-Read on the `L2TestCoin`'s `totalSupply` and `balanceOf` storage slots for the current owner of the NFT.\n2. When the CCIP-Read in step 1 succeeds, `L1PassportNFT`'s `tokenURIFetchL2TestCoinBalanceCallback` is called\n3. `tokenURIFetchL2TestCoinBalanceCallback` performs another CCIP-Read on `L2TestNFT`'s `_balanceOf`\n4. When the CCIP-Read in step 3 succeeds, `L1PassportNFT`'s `tokenURIFetchL2TestNFTBalanceCallback` is called\n5. `tokenURIFetchL2TestNFTBalanceCallback` takes the fetch results from the last 2 CCIP-Read calls, and then generates an svg string that displays the user's `L2TestCoin` and `L2TestNFT` balance.\n\n## Deployments\n\n### OP-Gateway and OP-Verifier deployments\n\nThe following are deployed versions of the [op-gateway](https://github.com/ensdomains/evmgateway/tree/main/op-gateway) with `delay = 0` and their corresponding [op-verifier](https://github.com/ensdomains/evmgateway/tree/main/op-verifier) contracts\n\n| **chain**   | **op-gateway service**                                                  | op-verifier contract (on Goerli)                                                                                             |\n| ----------- | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| OP Goerli   | https://op-goerli.op-gateway.transientdomain.xyz/{sender}/{data}.json   | [0xe58448bfc2fa097953e800e0af0b0a5257ecc4b1](https://goerli.etherscan.io/address/0xe58448bfc2fa097953e800e0af0b0a5257ecc4b1) |\n| Base Goerli | https://base-goerli.op-gateway.transientdomain.xyz/{sender}/{data}.json | [0x7e2f9c4a1467e8a41e1e8283ba3ba72e3d92f6b8](https://goerli.etherscan.io/address/0x7e2f9c4a1467e8a41e1e8283ba3ba72e3d92f6b8) |\n\n### Contract deployments\n\n| **contract**  | **chain** | **address**                                                                                                                           |\n| ------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| L1PassportNFT | Goerli    | [0x0e24f4af1d5cd7fac0a96649511a15439d7e0c04](https://goerli.etherscan.io/address/0x0e24f4af1d5cd7fac0a96649511a15439d7e0c04)          |\n| L2TestNFT     | OP Goerli | [0x22299910e573ecd436f4987c75f093894904d107](https://goerli-optimism.etherscan.io/address/0x22299910e573ecd436f4987c75f093894904d107) |\n| L2TestCoin    | OP Goerli | [0x5a81f1f4d30f4153150848c31fabd0311946ed72](https://goerli-optimism.etherscan.io/address/0x5a81f1f4d30f4153150848c31fabd0311946ed72) |\n\n## Local development\n\n### Set up environment\n\n#### Fork the repo\n\n```sh\ngit clone https://github.com/ethereum-optimism/evmgateway-starter.git\n```\n\n```sh\ncd evmgateway-starter\n```\n\n\n#### Specify .env\n\n1. Copy `.env.example` to `.env`.\n\n   ```sh\n   cp .env.example .env\n   ```\n\n2. Edit your `.env` to specify the environment variables.\n\n   - `VITE_RPC_URL_GOERLI`: HTTP RPC URL for Goerli\n\n   - `VITE_RPC_URL_OP_GOERLI`: HTTP RPC URL for OP-Goerli\n\n   - `VITE_WALLETCONNECT_PROJECT_ID`: WalletConnect v2 requires a project ID. You can obtain it from your WC dashboard: https://cloud.walletconnect.com/sign-in\n\n#### Start the application\n\n1. Install the necessary node packages:\n\n   ```sh\n   npm install\n   ```\n\n2. Start the frontend with `npm run dev`\n\n   ```sh\n   npm run dev\n   ```\n\n3. Open [localhost:5173](http://localhost:5173) in your browser.\n\n### Deploying Contracts\n\n#### Devnet vs. Testnet\n\nUsing a testnet is recommended. You can use the existing deployment for `op-verifier` contract and the `op-gateway` service on Goerli (listed above).\n\nFor a local development environment, you will need to do the following\n\n- run an [Optimism Devnet](https://community.optimism.io/docs/developers/build/dev-node/)\n- run an [op-gateway service](https://github.com/ensdomains/evmgateway/tree/main/op-gateway) against the devnet\n- deploy [op-verifier](https://github.com/ensdomains/evmgateway/tree/main/op-verifier) contract on the devnet that uses the op-gateway service\n\n#### Install Foundry\n\nYou will need to install [Foundry](https://book.getfoundry.sh/getting-started/installation) to build your smart contracts.\n\n1. Run the following command:\n\n   ```sh\n   curl -L https://foundry.paradigm.xyz | bash\n   ```\n\n1. Source your environment as requested by Foundry.\n\n1. Run `foundryup`.\n\n#### Get an Etherscan key\n\n1. Register for [Etherscan](https://explorer.optimism.io/register).\n   Add the api key to `ETHERSCAN_API_KEY_GOERLI` in your `.env` file\n\n2. Register for [Etherscan on Optimism](https://explorer.optimism.io/register).\n   This account is different from your normal Etherscan account. Add this api key to `ETHERSCAN_API_KEY_OP_GOERLI` in your `.env` file\n\n#### Deploy contracts\n\n1. Deploy the `L2TestCoin` contract on OP Goerli\n\n   ```sh\n   npm run deploy:l2-test-coin\n   ```\n\n1. Deploy the `L2TestNFT` contract on OP Goerli\n\n   ```sh\n   npm run deploy:l2-test-nft\n   ```\n\n1. Update the `VITE_L2TESTNFT_CONTRACT_ADDRESS_OP_GOERLI` and `VITE_L2TESTCOIN_CONTRACT_ADDRESS_OP_GOERLI` with the addresses of the newly deployed contracts. This will be used as inputs for the `L1PassportNFT` contract\n\n1. Deploy the `L1PassportNFT` contract on Goerli\n   ```sh\n   npm run deploy:l1-passport-nft\n   ```\n\n\n## Built using\n- [thorin (ENS Design System)](https://thorin.ens.domains/)\n- [wagmi](https://wagmi.sh/)\n- [rainbowkit](https://www.rainbowkit.com/)\n- [vite](https://vitejs.dev/)\n- [foundry](https://getfoundry.sh/)\n", "release_dates": []}, {"name": "explorer-core-plugins", "description": "Alethio Explorer core plugins that provide basic functionality", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# explorer-core-plugins\n\nCore plugins for Alethio Explorer\n\n## Project structure\n\nThe project contains 3 core plugins that provide basic explorer functionality and which share the same codebase, dependencies and build process. Each plugin has a folder in `packages/<pluginName>`, from which a separate npm package is created:\n\n- [eth-common](./packages/eth-common/README.md) - common pages and modules that should be available regardless of what data source is used\n- [eth-extended](./packages/eth-extended/README.md) - pages, modules and data sources specific to the \"full\" explorer. This plugin uses the Alethio explorer API endpoints and a Deepstream connection\n- [eth-lite](./packages/eth-lite/README.md) - a \"lite\" explorer plugin, using `web3` as a data source. It only offers what can be directly fetched from an eth node, without the aggregations provided by the Alethio API.\n\n## Development\n\n### Install (Linux, MacOS)\n\n`npm install`\n\n### Install (Windows)\n\n`npm --add-python-to-path='true' --debug install --global windows-build-tools`\n`npm install` just as with Linux\n\n### Build\n\n`npm run watch` or `npm run build-dev`.\n\n### Link to an explorer installation\n\nYou can `acp link` any plugin folder into your block explorer installation.\n\n`$ npm i -g @alethio/cms-plugin-tool`\n`$ cd <explorer-checkout-folder>`\n```\n$ acp link ../explorer-core-plugins/packages/eth-common \\\n    ../explorer-core-plugins/packages/eth-extended \\\n    ../explorer-core-plugins/packages/eth-lite\n```\n\n## Running the tests\n\n`npm test` (or `npm run test-coverage` to generate code coverage as well).\n\nTest coverage is written to `./coverage` in HTML and LCOV formats.\n\n## Release process\n\n1. Changes are proposed via pull requests and merged into master after they obtain approval.\n2. Releases are made from master, by a maintainer, collecting changes that were made since the previous release.\n3. A new independent version is chosen for plugins that were affected, according to [semver](https://semver.org/).\n4. Changes are documented in CHANGELOG files, found in each package folder, committed and pushed to master.\n5. Publish to npm, with implicit git tags and corresponding release (see below).\n\n### Publishing to npm\n\nThis repo uses [lerna](https://github.com/lerna/lerna). Because the source code is shared between packages, lerna will not automatically detect which packages were changed. The following commands need to be executed:\n\n1. `npx lerna version --force-publish=<explicitly_changed_package_names>`\n\ne.g. `npx lerna version --force-publish=@alethio/explorer-plugin-eth-common,@alethio/explorer-plugin-eth-lite`\n\n2. `npx lerna publish from-git`\n", "release_dates": []}, {"name": "foundry", "description": "Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<img src=\".github/logo.png\" alt=\"Foundry logo\" align=\"right\" width=\"120\" />\n\n## Foundry\n\n![Github Actions][gha-badge] [![Telegram Chat][tg-badge]][tg-url] [![Telegram Support][tg-support-badge]][tg-support-url]\n\n[gha-badge]: https://img.shields.io/github/actions/workflow/status/foundry-rs/foundry/test.yml?branch=master\n[tg-badge]: https://img.shields.io/endpoint?color=neon&logo=telegram&label=chat&style=flat-square&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Ffoundry_rs\n[tg-url]: https://t.me/foundry_rs\n[tg-support-badge]: https://img.shields.io/endpoint?color=neon&logo=telegram&label=support&style=flat-square&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Ffoundry_support\n[tg-support-url]: https://t.me/foundry_support\n\n**Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.**\n\nFoundry consists of:\n\n-   [**Forge**](./crates/forge): Ethereum testing framework (like Truffle, Hardhat and DappTools).\n-   [**Cast**](./crates/cast): Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.\n-   [**Anvil**](./crates/anvil): Local Ethereum node, akin to Ganache, Hardhat Network.\n-   [**Chisel**](./crates/chisel): Fast, utilitarian, and verbose solidity REPL.\n\n**Need help getting started with Foundry? Read the [\ud83d\udcd6 Foundry Book][foundry-book] (WIP)!**\n\n![Demo](.github/demo.gif)\n\n## Installation\n\nSee the [installation guide](https://book.getfoundry.sh/getting-started/installation) in the book.\n\nIf you're experiencing any issues while installing, check out [Getting Help](#getting-help) and the [FAQ](https://book.getfoundry.sh/faq).\n\n## Forge\n\n### Features\n\n-   **Fast & flexible compilation pipeline**\n    -   Automatic Solidity compiler version detection & installation (under `~/.svm`)\n    -   **Incremental compilation & caching**: Only changed files are re-compiled\n    -   Parallel compilation\n    -   Non-standard directory structures support (e.g. [Hardhat repos](https://twitter.com/gakonst/status/1461289225337421829))\n-   **Tests are written in Solidity** (like in DappTools)\n-   **Fast fuzz testing** with shrinking of inputs & printing of counter-examples\n-   **Fast remote RPC forking mode**, leveraging Rust's async infrastructure like tokio\n-   **Flexible debug logging**\n    -   DappTools-style, using `DsTest`'s emitted logs\n    -   Hardhat-style, using the popular `console.sol` contract\n-   **Portable (5-10MB) & easy to install** without requiring Nix or any other package manager\n-   **Fast CI** with the [Foundry GitHub action][foundry-gha].\n\n### How Fast?\n\nForge is quite fast at both compiling (leveraging [ethers-solc][ethers-solc]) and testing.\n\nSee the benchmarks below. More benchmarks can be found in the [v0.2.0 announcement post][benchmark-post] and in the [Convex Shutdown Simulation][convex] repository.\n\n**Testing Benchmarks**\n\n| Project                            | Forge | DappTools | Speedup |\n| ---------------------------------- | ----- | --------- | ------- |\n| [transmissions11/solmate][solmate] | 2.8s  | 6m34s     | 140x    |\n| [reflexer-labs/geb][geb]           | 0.4s  | 23s       | 57.5x   |\n| [Rari-Capital/vaults][vaults]      | 0.28s | 6.5s      | 23x     |\n\n_Note: In the above benchmarks, compilation was always skipped_\n\n**Compilation Benchmarks**\n\n<img alt=\"Compilation benchmarks\" src=\".github/compilation-benchmark.png\" width=\"693px\" />\n\n**Takeaway: Forge compilation is consistently faster by a factor of 1.7-11.3x, depending on the amount of caching involved.**\n\n## Cast\n\nCast is a swiss army knife for interacting with Ethereum applications from the command line.\n\nMore documentation can be found in the [cast package](./crates/cast).\n\n## Configuration\n\n### Using `foundry.toml`\n\nFoundry is designed to be very configurable. You can configure Foundry using a file called [`foundry.toml`](./crates/config) in the root of your project, or any other parent directory. See [config package](./crates/config/README.md#all-options) for all available options.\n\nConfiguration can be arbitrarily namespaced by profiles. The default profile is named `default` (see [\"Default Profile\"](./crates/config/README.md#default-profile)).\n\nYou can select another profile using the `FOUNDRY_PROFILE` environment variable. You can also override parts of your configuration using `FOUNDRY_` or `DAPP_` prefixed environment variables, like `FOUNDRY_SRC`.\n\n`forge init` creates a basic, extendable `foundry.toml` file.\n\nTo see your current configuration, run `forge config`. To see only basic options (as set with `forge init`), run `forge config --basic`. This can be used to create a new `foundry.toml` file with `forge config --basic > foundry.toml`.\n\nBy default `forge config` shows the currently selected foundry profile and its values. It also accepts the same arguments as `forge build`.\n\n### DappTools Compatibility\n\nYou can re-use your `.dapprc` environment variables by running `source .dapprc` before using a Foundry tool.\n\n### Additional Configuration\n\nYou can find additional setup and configurations guides in the [Foundry Book][foundry-book]:\n\n-   [Setting up VSCode][vscode-setup]\n-   [Shell autocompletions][shell-setup]\n\n## Contributing\n\nSee our [contributing guidelines](./CONTRIBUTING.md).\n\n## Getting Help\n\nFirst, see if the answer to your question can be found in [book][foundry-book], or in the relevant crate.\n\nIf the answer is not there:\n\n-   Join the [support Telegram][tg-support-url] to get help, or\n-   Open a [discussion](https://github.com/foundry-rs/foundry/discussions/new) with your question, or\n-   Open an issue with [the bug](https://github.com/foundry-rs/foundry/issues/new)\n\nIf you want to contribute, or follow along with contributor discussion, you can use our [main telegram](https://t.me/foundry_rs) to chat with us about the development of Foundry!\n\n## Acknowledgements\n\n-   Foundry is a clean-room rewrite of the testing framework [DappTools](https://github.com/dapphub/dapptools). None of this would have been possible without the DappHub team's work over the years.\n-   [Matthias Seitz](https://twitter.com/mattsse_): Created [ethers-solc](https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/) which is the backbone of our compilation pipeline, as well as countless contributions to ethers, in particular the `abigen` macros.\n-   [Rohit Narurkar](https://twitter.com/rohitnarurkar): Created the Rust Solidity version manager [svm-rs](https://github.com/roynalnaruto/svm-rs) which we use to auto-detect and manage multiple Solidity versions.\n-   [Brock Elmore](https://twitter.com/brockjelmore): For extending the VM's cheatcodes and implementing [structured call tracing](https://github.com/foundry-rs/foundry/pull/192), a critical feature for debugging smart contract calls.\n-   All the other [contributors](https://github.com/foundry-rs/foundry/graphs/contributors) to the [ethers-rs](https://github.com/gakonst/ethers-rs) & [foundry](https://github.com/foundry-rs/foundry) repositories and chatrooms.\n\n[foundry-book]: https://book.getfoundry.sh\n[foundry-gha]: https://github.com/foundry-rs/foundry-toolchain\n[ethers-solc]: https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/\n[solmate]: https://github.com/transmissions11/solmate/\n[geb]: https://github.com/reflexer-labs/geb\n[vaults]: https://github.com/rari-capital/vaults\n[benchmark-post]: https://www.paradigm.xyz/2022/03/foundry-02#blazing-fast-compilation--testing\n[convex]: https://github.com/mds1/convex-shutdown-simulation\n[vscode-setup]: https://book.getfoundry.sh/config/vscode.html\n[shell-setup]: https://book.getfoundry.sh/config/shell-autocompletion.html\n", "release_dates": ["2024-02-08T00:50:47Z", "2023-11-16T00:38:39Z", "2024-02-06T00:52:46Z", "2024-02-05T00:54:48Z", "2024-02-01T01:21:32Z", "2024-01-17T00:39:04Z", "2023-11-16T00:38:36Z"]}, {"name": "ganache-cli", "description": "Fast Ethereum RPC client for testing and development", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<p align=\"center\">\n  <em>NOTICE</em>: <code>testrpc</code> is now <code>ganache-cli</code>. Use it just as you would <code>testrpc</code>.\n</p>\n<hr/>\n\n[![npm](https://img.shields.io/npm/v/ganache-cli.svg)]()\n[![npm](https://img.shields.io/npm/dm/ganache-cli.svg)]()\n[![Build Status](https://travis-ci.org/trufflesuite/ganache-cli.svg?branch=master)](https://travis-ci.org/trufflesuite/ganache-cli)  \n\n<p align=\"center\">\n  <img src=\"https://github.com/trufflesuite/ganache-cli/raw/develop/resources/icons/ganache-cli-128x128.png\">\n</p>\n\n## Welcome to Ganache CLI\nGanache CLI, part of the Truffle suite of Ethereum development tools, is the command line version of [Ganache](https://github.com/trufflesuite/ganache), your personal blockchain for Ethereum development.\n\nGanache CLI uses ethereumjs to simulate full client behavior and make developing Ethereum applications faster, easier, and safer. It also includes all popular RPC functions and features (like events) and can be run deterministically to make development a breeze.\n\n### Looking for TestRPC?\n\nIf you came here expecting to find the TestRPC, you're in the right place! Truffle has taken the TestRPC under its wing and made it part of the Truffle suite of tools. From now on you can expect better support along with tons of new features that help make Ethereum development safer, easier, and more enjoyable. Use `ganache-cli` just as you would `testrpc`.\n\n## Installation\n\n`ganache-cli` is written in JavaScript and distributed as a Node.js package via `npm`. Make sure you have Node.js (>= v8) installed.\n\nUsing npm:\n\n```Bash\nnpm install -g ganache-cli\n```\n\nor, if you are using [Yarn](https://yarnpkg.com/):\n\n```Bash\nyarn global add ganache-cli\n```\n\n`ganache-cli` utilizes [`ganache-core`](https://github.com/trufflesuite/ganache-core) internally, which is distributed with optional native dependencies for increased performance. If these native dependencies fail to install on your system `ganache-cli` will automatically fallback to `ganache-core`\u2019s pre-bundled JavaScript build.\n\nHaving problems? Be sure to check out the [FAQ](https://github.com/trufflesuite/ganache-cli/wiki/FAQ) and if you're still having issues and you're sure its a problem with `ganache-cli` please open an issue.\n\n### Using Ganache CLI\n\n#### Command Line\n\n```Bash\n$ ganache-cli <options>\n```\n\n## Options:\n\n* `-a` or `--accounts`: Specify the number of accounts to generate at startup.\n* `-e` or `--defaultBalanceEther`: Amount of ether to assign each test account. Default is 100.\n* `-b` or `--blockTime`: Specify blockTime in seconds for automatic mining. If you don't specify this flag, ganache will instantly mine a new block for every transaction. Using the --blockTime flag is discouraged unless you have tests which require a specific mining interval.\n* `-d` or `--deterministic`: Generate deterministic addresses based on a pre-defined mnemonic.\n* `-n` or `--secure`: Lock available accounts by default (good for third party transaction signing)\n* `-m` or `--mnemonic`: Use a bip39 mnemonic phrase for generating a PRNG seed, which is in turn used for hierarchical deterministic (HD) account generation.\n* `-p` or `--port`: Port number to listen on. Defaults to 8545.\n* `-h` or `--host` or `--hostname`: Hostname to listen on. Defaults to 127.0.0.1 (defaults to 0.0.0.0 for Docker instances of ganache-cli).\n* `-s` or `--seed`: Use arbitrary data to generate the HD wallet mnemonic to be used.\n* `-g` or `--gasPrice`: The price of gas in wei (defaults to 20000000000)\n* `-l` or `--gasLimit`: The block gas limit (defaults to 0x6691b7)\n* `--callGasLimit`: Sets the transaction gas limit for `eth_call` and `eth_estimateGas` calls. Must be specified as a `hex` string. Defaults to `\"0x1fffffffffffff\"` (`Number.MAX_SAFE_INTEGER`)\n* `-k` or `--hardfork`: Allows users to specify which hardfork should be used. Supported hardforks are `byzantium`, `constantinople`, `petersburg`, `istanbul`, and `muirGlacier` (default).\n* `-f` or `--fork`: Fork from another currently running Ethereum client at a given block. Input should be the HTTP location and port of the other client, e.g. `http://localhost:8545`. You can optionally specify the block to fork from using an `@` sign: `http://localhost:8545@1599200`.\n* `forkCacheSize`: `number` - The maximum size, in bytes, of the in-memory cache for queries on a chain fork. Defaults to `1_073_741_824` bytes (1 gigabyte). You can set this to `0` to disable caching (not recommended), or to `-1` for unlimited (will be limited by your node process).\n* `-i` or `--networkId`: Specify the network id ganache-cli will use to identify itself (defaults to the current time or the network id of the forked blockchain if configured)\n* `--chainId`: Specify the Chain ID ganache-cli will use for `eth_chainId` RPC and the `CHAINID` opcode. For legacy reasons, the default is currently `1337` for `eth_chainId` RPC and `1` for the `CHAINID` opcode. Setting this flag will align the chainId values. This will be fixed in the next major version of ganache-cli and ganache-core!\n* `--db`: Specify a path to a directory to save the chain database. If a database already exists, ganache-cli will initialize that chain instead of creating a new one.\n* `--debug`: Output VM opcodes for debugging\n* `--mem`: Output ganache-cli memory usage statistics. This replaces normal output.\n* `-q` or `--quiet`: Run ganache-cli without any logs.\n* `-v` or `--verbose`: Log all requests and responses to stdout\n* `-?` or `--help`: Display help information\n* `--version`: Display the version of ganache-cli\n* `--account_keys_path` or `--acctKeys`: Specifies a file to save accounts and private keys to, for testing.\n* `--noVMErrorsOnRPCResponse`: Do not transmit transaction failures as RPC errors. Enable this flag for error reporting behaviour which is compatible with other clients such as geth and Parity.\n* `--allowUnlimitedContractSize`: Allows unlimited contract sizes while debugging. By enabling this flag, the check within the EVM for contract size limit of 24KB (see EIP-170) is bypassed. Enabling this flag **will** cause ganache-cli to behave differently than production environments.\n* `--keepAliveTimeout`: Sets the HTTP server's `keepAliveTimeout` in milliseconds. See the [NodeJS HTTP docs](https://nodejs.org/api/http.html#http_server_keepalivetimeout) for details. `5000` by default.\n* `-t` or `--time`: Date (ISO 8601) that the first block should start. Use this feature, along with the evm_increaseTime method to test time-dependent code.\n\nSpecial Options:\n\n* `--account`: Specify `--account=...` (no 's') any number of times passing arbitrary private keys and their associated balances to generate initial addresses:\n\n  ```\n  $ ganache-cli --account=\"<privatekey>,balance\" [--account=\"<privatekey>,balance\"]\n  ```\n\n  Note that private keys are 64 characters long, and must be input as a 0x-prefixed hex string. Balance can either be input as an integer or 0x-prefixed hex value specifying the amount of wei in that account.\n\n  An HD wallet will not be created for you when using `--account`.\n\n* `-u` or `--unlock`: Specify `--unlock ...` any number of times passing either an address or an account index to unlock specific accounts. When used in conjunction with `--secure`, `--unlock` will override the locked state of specified accounts.\n\n  ```\n  $ ganache-cli --secure --unlock \"0x1234...\" --unlock \"0xabcd...\"\n  ```\n\n  You can also specify a number, unlocking accounts by their index:\n\n  ```\n  $ ganache-cli --secure -u 0 -u 1\n  ```\n\n  This feature can also be used to impersonate accounts and unlock addresses you wouldn't otherwise have access to. When used with the `--fork` feature, you can use ganache-cli to make transactions as any address on the blockchain, which is very useful for testing and dynamic analysis.\n\n## Usage\n\nAs a [Web3](https://github.com/ethereum/web3.js/) provider:\n\n```javascript\nconst ganache = require(\"ganache-core\");\nconst web3 = new Web3(ganache.provider());\n```\nIf web3 is already initialized:\n```javascript\nconst ganache = require(\"ganache-core\");\nweb3.setProvider(ganache.provider());\n```\nNOTE: depending on your web3 version, you may need to set a number of confirmation blocks\n```javascript\nconst web3 = new Web3(provider, null, { transactionConfirmationBlocks: 1 });\n```\n\nAs an [ethers.js](https://github.com/ethers-io/ethers.js/) provider:\n\n```javascript\nconst ganache = require(\"ganache-cli\");\nconst provider = new ethers.providers.Web3Provider(ganache.provider());\n```\n\nAs a general HTTP and WebSocket server:\n\n```javascript\nconst ganache = require(\"ganache-cli\");\nconst server = ganache.server();\nserver.listen(port, function(err, blockchain) {...});\n```\n\n## Options\n\nBoth `.provider()` and `.server()` take a single object which allows you to specify behavior of ganache-cli. This parameter is optional. Available options are:\n\n* `\"accounts\"`: `Array` of `Object`'s. Each object should have a `balance` key with a hexadecimal value. The key `secretKey` can also be specified, which represents the account's private key. If no `secretKey`, the address is auto-generated with the given balance. If specified, the key is used to determine the account's address.\n* `\"debug\"`: `boolean` - Output VM opcodes for debugging\n* `\"blockTime\"`: `number` - Specify blockTime in seconds for automatic mining. If you don't specify this flag, ganache will instantly mine a new block for every transaction. Using the `blockTime` option is discouraged unless you have tests which require a specific mining interval.\n* `\"logger\"`: `Object` - Object, like `console`, that implements a `log()` function.\n* `\"mnemonic\"`: Use a specific HD wallet mnemonic to generate initial addresses.\n* `\"port\"`: `number` Port number to listen on when running as a server.\n* `\"seed\"`: Use arbitrary data to generate the HD wallet mnemonic to be used.\n* `\"default_balance_ether\"`: `number` - The default account balance, specified in ether.\n* `\"total_accounts\"`: `number` - Number of accounts to generate at startup.\n* `\"fork\"`: `string` or `object` - Fork from another currently running Ethereum client at a given block.  When a `string`, input should be the HTTP location and port of the other client, e.g. `http://localhost:8545`. You can optionally specify the block to fork from using an `@` sign: `http://localhost:8545@1599200`. Can also be a `Web3 Provider` object, optionally used in conjunction with the `fork_block_number` option below.\n* `\"fork_block_number\"`: `string` or `number` - Block number the provider should fork from, when the `fork` option is specified. If the `fork` option is specified as a string including the `@` sign and a block number, the block number in the `fork` parameter takes precedence.\n`forkCacheSize`: `number` - The maximum size, in bytes, of the in-memory cache for queries on a chain fork. Defaults to `1_073_741_824` bytes (1 gigabyte). You can set this to `0` to disable caching (not recommended), or to `-1` for unlimited (will be limited by your node/browser process).\n* `\"network_id\"`: Specify the network id ganache-core will use to identify itself (defaults to the current time or the network id of the forked blockchain if configured)\n* `\"time\"`: `Date` - Date that the first block should start. Use this feature, along with the `evm_increaseTime` method to test time-dependent code.\n* `\"locked\"`: `boolean` - whether or not accounts are locked by default.\n* `\"unlocked_accounts\"`: `Array` - array of addresses or address indexes specifying which accounts should be unlocked.\n* `\"db_path\"`: `String` - Specify a path to a directory to save the chain database. If a database already exists, `ganache-cli` will initialize that chain instead of creating a new one.  Note: You will not be able to modify state (accounts, balances, etc) on startup when you initialize ganache-core with a pre-existing database.\n* `\"db\"`: `Object` - Specify an alternative database instance, for instance [MemDOWN](https://github.com/level/memdown).\n* `\"ws\"`: `boolean` Enable a websocket server. This is `true` by default.\n* `\"account_keys_path\"`: `String` - Specifies a file to save accounts and private keys to, for testing.\n* `\"vmErrorsOnRPCResponse\"`: `boolean` - Whether or not to transmit transaction failures as RPC errors. Set to `false` for error reporting behaviour which is compatible with other clients such as geth and Parity. This is `true` by default to replicate the error reporting behavior of previous versions of ganache.\n* `\"hdPath\"`: The hierarchical deterministic path to use when generating accounts. Default: \"m/44'/60'/0'/0/\"\n* `\"hardfork\"`: `String` Allows users to specify which hardfork should be used. Supported hardforks are `byzantium`, `constantinople`, `petersburg`, `istanbul`, and `muirGlacier` (default).\n* `\"allowUnlimitedContractSize\"`: `boolean` - Allows unlimited contract sizes while debugging (NOTE: this setting is often used in conjuction with an increased `gasLimit`). By setting this to `true`, the check within the EVM for contract size limit of 24KB (see [EIP-170](https://git.io/vxZkK)) is bypassed. Setting this to `true` **will** cause `ganache-cli` to behave differently than production environments. (default: `false`; **ONLY** set to `true` during debugging).\n* `\"gasPrice\"`: `String::hex` Sets the default gas price for transactions if not otherwise specified. Must be specified as a `hex` encoded string in `wei`. Defaults to `\"0x77359400\"` (2 `gwei`).\n* `\"gasLimit\"`: `String::hex | number` Sets the block gas limit. Must be specified as a `hex` string or `number`. Defaults to `\"0x6691b7\"`.\n* `\"callGasLimit\"`: `number` Sets the transaction gas limit for `eth_call` and `eth_estimateGas` calls. Must be specified as a `hex` string. Defaults to `\"0x1fffffffffffff\"` (`Number.MAX_SAFE_INTEGER`).\n* `\"keepAliveTimeout\"`:  `number` If using `.server()` - Sets the HTTP server's `keepAliveTimeout` in milliseconds. See the [NodeJS HTTP docs](https://nodejs.org/api/http.html#http_server_keepalivetimeout) for details. `5000` by default.\n\n## Implemented Methods\n\nThe RPC methods currently implemented are:\n\n* [eth_accounts](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_accounts)\n* [eth_blockNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_blockNumber)\n* [eth_call](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_call)\n* [eth_coinbase](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_coinbase)\n* [eth_estimateGas](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_estimateGas)\n* [eth_gasPrice](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gasPrice)\n* [eth_getBalance](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBalance)\n* [eth_getBlockByNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockByNumber)\n* [eth_getBlockByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockByHash)\n* [eth_getBlockTransactionCountByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockTransactionCountByHash)\n* [eth_getBlockTransactionCountByNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockTransactionCountByNumber)\n* [eth_getCode](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getCode) (only supports block number \u201clatest\u201d)\n* [eth_getCompilers](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getCompilers)\n* [eth_getFilterChanges](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getFilterChanges)\n* [eth_getFilterLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getFilterLogs)\n* [eth_getLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getLogs)\n* [eth_getStorageAt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getStorageAt)\n* [eth_getTransactionByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByHash)\n* [eth_getTransactionByBlockHashAndIndex](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByBlockHashAndIndex)\n* [eth_getTransactionByBlockNumberAndIndex](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByBlockNumberAndIndex)\n* [eth_getTransactionCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionCount)\n* [eth_getTransactionReceipt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionReceipt)\n* [eth_hashrate](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_hashrate)\n* [eth_mining](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_mining)\n* [eth_newBlockFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newBlockFilter)\n* [eth_newFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newFilter) (includes log/event filters)\n* [eth_protocolVersion](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_protocolVersion)\n* [eth_sendTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendTransaction)\n* [eth_sendRawTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendRawTransaction)\n* [eth_sign](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\n* `eth_signTypedData`\n* [eth_subscribe](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_subscribe) (only for websocket connections. \"syncing\" subscriptions are not yet supported)\n* [eth_unsubscribe](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_unsubscribe) (only for websocket connections. \"syncing\" subscriptions are not yet supported)\n* [shh_version](https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_version)\n* [net_version](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_version)\n* [net_peerCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_peerCount)\n* [net_listening](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_listening)\n* [eth_uninstallFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_uninstallFilter)\n* [eth_syncing](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_syncing)\n* [web3_clientVersion](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_clientVersion)\n* [web3_sha3](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_sha3)\n* `bzz_hive`\n* `bzz_info`\n\n#### Management API Methods\n\n* [debug_traceTransaction](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#debug_tracetransaction)\n* [miner_start](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#miner_start)\n* [miner_stop](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#miner_stop)\n* [personal_sendTransaction](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sendTransaction)\n* [personal_unlockAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_unlockAccount)\n* [personal_importRawKey](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_importRawKey)\n* [personal_newAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_newAccount)\n* [personal_lockAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_lockAccount)\n* [personal_listAccounts](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_listaccounts)\n\n## Custom Methods\n\nSpecial non-standard methods that aren\u2019t included within the original RPC specification:\n* `evm_snapshot` : Snapshot the state of the blockchain at the current block. Takes no parameters. Returns the integer id of the snapshot created. A snapshot can only be used once. After a successful `evm_revert`, the same snapshot id cannot be used again. Consider creating a new snapshot after each `evm_revert` *if you need to revert to the same point multiple times*.\n  ```bash\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_snapshot\",\"params\":[]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" }\n  ```\n* `evm_revert` : Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to. This deletes the given snapshot, as well as any snapshots taken after (Ex: reverting to id `0x1` will delete snapshots with ids `0x1`, `0x2`, `etc`...  If no snapshot id is passed it will revert to the latest snapshot. Returns `true`.\n  ```bash\n  # Ex: ID \"1\" (hex encoded string)\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_revert\",\"params\":[\"0x1\"]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n* `evm_increaseTime` : Jump forward in time. Takes one parameter, which is the amount of time to increase in seconds. Returns the total time adjustment, in seconds.\n  ```bash\n  # Ex: 1 minute (number)\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_increaseTime\",\"params\":[60]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"060\" }\n  ```\n* `evm_mine` : Force a block to be mined. Takes one optional parameter, which is the timestamp a block should setup as the mining time. Mines a block independent of whether or not mining is started or stopped.\n  ```bash\n  # Ex: new Date(\"2009-01-03T18:15:05+00:00\").getTime()\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_mine\",\"params\":[1231006505000]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"0x0\" }\n  ```\n* `evm_unlockUnknownAccount` : Unlocks any unknown account. Accounts known to the `personal` namespace and accounts\nreturned by `eth_accounts` cannot be unlocked using this method; use `personal_lockAccount` instead.\n  ```bash\n  # Ex: account: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_unlockUnknownAccount\",\"params\":[\"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n* `evm_lockUnknownAccount` : Locks any unknown account. Accounts known to the `personal` namespace and accounts\nreturned by `eth_accounts` cannot be locked using this method; use `personal_unlockAccount` instead.\n  ```bash\n  # Ex: account: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_lockUnknownAccount\",\"params\":[\"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n  \n## Unsupported Methods\n\n* `eth_compileSolidity`: If you'd like Solidity compilation in Javascript, please see the [solc-js project](https://github.com/ethereum/solc-js).\n\n## Docker\n\nThe Simplest way to get started with the Docker image:\n\n```Bash\ndocker run -d -p 8545:8545 trufflesuite/ganache-cli:latest\n```\n\nTo pass options to ganache-cli through Docker simply add the arguments to\nthe run command:\n\n```Bash\ndocker run -d -p 8545:8545 trufflesuite/ganache-cli:latest -a 10 --debug\n                                                           ^^^^^^^^^^^^^\n```\n\nThe Docker container adds an environment variable `DOCKER=true`; when this variable is set to `true` (case insensitive), `ganache-cli` use a default hostname IP of `0.0.0.0` instead of the normal default `127.0.0.1`. You can still specify a custom hostname however:\n\n```Bash\ndocker run -d -p 8545:8545 trufflesuite/ganache-cli:latest -h XXX.XXX.XXX.XXX\n                                                           ^^^^^^^^^^^^^^^^^^\n```\n\nTo build and run the Docker container from source:\n\n```Bash\ngit clone https://github.com/trufflesuite/ganache-cli.git && cd ganache-cli\n```\nthen:\n```Bash\ndocker build -t trufflesuite/ganache-cli .\ndocker run -p 8545:8545 trufflesuite/ganache-cli\n```\nor\n```Bash\nnpm run docker\n```\n\n\n## Contributing to Ganache CLI\n\nThe Ganache CLI repository contains the cli logic and Docker config/build only. It utilizes [ganache-core](https://github.com/trufflesuite/ganache-core), the core logic powering [Ganache](https://github.com/trufflesuite/ganache), internally.\n\nYou can contribute to the core code at [ganache-core](https://github.com/trufflesuite/ganache-core).\n\nTo contribue to ganache-cli, run:\n\n```Bash\ngit clone https://github.com/trufflesuite/ganache-cli.git && cd ganache-cli\nnpm install\n```\n\nYou'll need Python 2.7 installed, and on Windows, you'll likely need to install [windows-build-tools](https://github.com/felixrieseberg/windows-build-tools) from an Administrator PowerShell Prompt via `npm install --global windows-build-tools`.\n\n### PR Message format:\n\n`<type>(<scope>): <subject>`\n\nWhere `type` must be one of the following:\n\n* **feat**: A new feature\n* **fix**: A bug fix\n* **docs**: Documentation only changes\n* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing\n  semi-colons, etc)\n* **refactor**: A code change that neither fixes a bug nor adds a feature\n* **perf**: A code change that improves performance\n* **test**: Adding missing or correcting existing tests\n* **chore**: Changes to the build process or auxiliary tools and libraries such as documentation\n  generation\n\nsee: https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\n\n# License\n[MIT](https://tldrlegal.com/license/mit-license)\n", "release_dates": []}, {"name": "ganache-core", "description": "Core code for Ganache", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "[![npm Version](https://img.shields.io/npm/v/ganache-core.svg)](https://www.npmjs.com/package/ganache-core)\n[![npm Downloads](https://img.shields.io/npm/dm/ganache-core.svg)](https://www.npmjs.com/package/ganache-core)\n[![Build Status](https://travis-ci.org/trufflesuite/ganache-core.svg?branch=master)](https://travis-ci.org/trufflesuite/ganache-core)\n[![Coverage Status](https://coveralls.io/repos/github/trufflesuite/ganache-core/badge.svg?branch=develop)](https://coveralls.io/github/trufflesuite/ganache-core?branch=develop)\n# Ganache Core\n\nThis is the core code that powers the Ganache application and the Ganache command line tool.\n\n[Usage](#usage) | [Options](#options) | [Implemented Methods](#implemented-methods) | [Custom Methods](#custom-methods) | [Unsupported Methods](#unsupported-methods) | [Testing](#testing)\n\n## Installation\n\n`ganache-core` is written in JavaScript and distributed as a Node.js package via `npm`. Make sure you have Node.js (>= v8.9.0) installed, and your environment is capable of installing and compiling `npm` modules.\n\n**macOS** Make sure you have the XCode Command Line Tools installed. These are needed in general to be able to compile most C based languages on your machine, as well as many npm modules.\n\n**Windows** See our [Windows install instructions](https://github.com/trufflesuite/ganache-cli/wiki/Installing-ganache-cli-on-Windows).\n\n**Ubuntu/Linux** Follow the basic instructions for installing [Node.js](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions) and make sure that you have `npm` installed, as well as the `build-essential` `apt` package (it supplies `make` which you will need to compile most things). Use the official Node.js packages, *do not use the package supplied by your distribution.*\n\nUsing npm:\n\n```Bash\nnpm install ganache-core\n```\n\nor, if you are using [Yarn](https://yarnpkg.com/):\n\n```Bash\nyarn add ganache-core\n```\n\n\n## Usage\n\nAs a [Web3](https://github.com/ethereum/web3.js/) provider:\n\n```javascript\nconst ganache = require(\"ganache-core\");\nconst web3 = new Web3(ganache.provider());\n```\nIf web3 is already initialized:\n```javascript\nconst ganache = require(\"ganache-core\");\nweb3.setProvider(ganache.provider());\n```\nNOTE: depending on your web3 version, you may need to set a number of confirmation blocks\n```javascript\nconst web3 = new Web3(provider, null, { transactionConfirmationBlocks: 1 });\n```\n\nAs an [ethers.js](https://github.com/ethers-io/ethers.js/) provider:\n\n```javascript\nconst ganache = require(\"ganache-core\");\nconst provider = new ethers.providers.Web3Provider(ganache.provider());\n```\n\nAs a general HTTP and WebSocket server:\n\n```javascript\nconst ganache = require(\"ganache-core\");\nconst server = ganache.server();\nconst provider = server.provider;\nserver.listen(port, function(err, blockchain) { ... });\n```\n\n## Options\n\nBoth `.provider()` and `.server()` take a single object which allows you to specify behavior of the Ganache instance. This parameter is optional. Available options are:\n\n* `\"accounts\"`: `Array` of `Object`'s of the following shape: `{ secretKey: privateKey, balance: HexString }`.\n  * If `secretKey` is specified, the key is used to determine the account's address. Otherwise, the address is auto-generated.\n  * The `balance` is a hexadecimal value of the amount of Ether (in Wei) you want the account to be pre-loaded with.\n* `\"debug\"`: `boolean` - Output VM opcodes for debugging\n* `\"blockTime\"`: `number` - Specify blockTime in seconds for automatic mining. If you don't specify this flag, ganache will instantly mine a new block for every transaction. Using the `blockTime` option is discouraged unless you have tests which require a specific mining interval.\n* `\"logger\"`: `Object` - Object, like `console`, that implements a `log()` function.\n* `\"mnemonic\"`: Use a specific HD wallet mnemonic to generate initial addresses.\n* `\"port\"`: `number` Port number to listen on when running as a server.\n* `\"seed\"`: Use arbitrary data to generate the HD wallet mnemonic to be used.\n* `\"default_balance_ether\"`: `number` - The default account balance, specified in ether.\n* `\"total_accounts\"`: `number` - Number of accounts to generate at startup.\n* `\"fork\"`: `string` or `object` - Fork from another currently running Ethereum client at a given block.  When a `string`, input should be the HTTP location and port of the other client, e.g. `http://localhost:8545`. You can optionally specify the block to fork from using an `@` sign: `http://localhost:8545@1599200`. Can also be a `Web3 Provider` object, optionally used in conjunction with the `fork_block_number` option below.\n* `\"fork_block_number\"`: `string` or `number` - Block number the provider should fork from, when the `fork` option is specified. If the `fork` option is specified as a string including the `@` sign and a block number, the block number in the `fork` parameter takes precedence.\n- `\"forkCacheSize\"`: `number` - The maximum size, in bytes, of the in-memory cache for queries on a chain fork. Defaults to `1_073_741_824` bytes (1 gigabyte). You can set this to `0` to disable caching (not recommended), or to `-1` for unlimited (will be limited by your node/browser process).\n* `\"network_id\"`: Specify the network id ganache-core will use to identify itself (defaults to the current time or the network id of the forked blockchain if configured)\n* `\"_chainId\"`: **(temporary option until v3)** Specify the chain's chainId. For legacy reasons, this does NOT affect the `eth_chainId` RPC response! Defaults to `1`\n* `\"_chainIdRpc\"`: **(temporary option until v3)** Specify the `eth_chainId` RPC response value. For legacy reasons, this does NOT affect the chain's `chainid`! Defaults to `1337`\n* `\"time\"`: `Date` - Date that the first block should start. Use this feature, along with the `evm_increaseTime` method to test time-dependent code.\n* `\"locked\"`: `boolean` - whether or not accounts are locked by default.\n* `\"unlocked_accounts\"`: `Array` - array of addresses or address indexes specifying which accounts should be unlocked.\n* `\"db_path\"`: `String` - Specify a path to a directory to save the chain database. If a database already exists, `ganache-core` will initialize that chain instead of creating a new one. Note: You will not be able to modify state (accounts, balances, etc) on startup when you initialize ganache-core with a pre-existing database.\n* `\"db\"`: `Object` - Specify an alternative database instance, for instance [MemDOWN](https://github.com/level/memdown).\n* `\"ws\"`: `boolean` Enable a websocket server. This is `true` by default.\n* `\"account_keys_path\"`: `String` - Specifies a file to save accounts and private keys to, for testing.\n* `\"vmErrorsOnRPCResponse\"`: `boolean` - Whether or not to transmit transaction failures as RPC errors. Set to `false` for error reporting behaviour which is compatible with other clients such as geth and Parity. This is `true` by default to replicate the error reporting behavior of previous versions of ganache.\n* `\"hdPath\"`: The hierarchical deterministic path to use when generating accounts. Default: \"m/44'/60'/0'/0/\"\n* `\"hardfork\"`: `String` Allows users to specify which hardfork should be used. Supported hardforks are `byzantium`, `constantinople`, `petersburg`, `istanbul`, and `muirGlacier` (default).\n* `\"allowUnlimitedContractSize\"`: `boolean` - Allows unlimited contract sizes while debugging (NOTE: this setting is often used in conjuction with an increased `gasLimit`). By setting this to `true`, the check within the EVM for contract size limit of 24KB (see [EIP-170](https://git.io/vxZkK)) is bypassed. Setting this to `true` **will** cause `ganache-core` to behave differently than production environments. (default: `false`; **ONLY** set to `true` during debugging).\n* `\"gasPrice\"`: `String::hex` Sets the default gas price for transactions if not otherwise specified. Must be specified as a `hex` encoded string in `wei`. Defaults to `\"0x77359400\"` (2 `gwei`).\n* `\"gasLimit\"`: `String::hex | number` Sets the block gas limit. Must be specified as a `hex` string or `number`(integer). Defaults to `\"0x6691b7\"`.\n* `\"callGasLimit\"`: `number` Sets the transaction gas limit for `eth_call` and `eth_estimateGas` calls. Must be specified as a `hex` string. Defaults to `\"0x1fffffffffffff\"` (`Number.MAX_SAFE_INTEGER`).\n* `\"keepAliveTimeout\"`:  `number` If using `.server()` - Sets the HTTP server's `keepAliveTimeout` in milliseconds. See the [NodeJS HTTP docs](https://nodejs.org/api/http.html#http_server_keepalivetimeout) for details. `5000` by default.\n\n## Implemented Methods\n\nThe RPC methods currently implemented are:\n\n* [eth_accounts](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_accounts)\n* [eth_blockNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_blockNumber)\n* [eth_call](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_call)\n* `eth_chainId`\n* [eth_coinbase](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_coinbase)\n* [eth_estimateGas](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_estimateGas)\n* [eth_gasPrice](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gasPrice)\n* [eth_getBalance](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBalance)\n* [eth_getBlockByNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockByNumber)\n* [eth_getBlockByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockByHash)\n* [eth_getBlockTransactionCountByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockTransactionCountByHash)\n* [eth_getBlockTransactionCountByNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getBlockTransactionCountByNumber)\n* [eth_getCode](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getCode)\n* [eth_getCompilers](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getCompilers)\n* [eth_getFilterChanges](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getFilterChanges)\n* [eth_getFilterLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getFilterLogs)\n* [eth_getLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getLogs)\n* [eth_getStorageAt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getStorageAt)\n* [eth_getTransactionByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByHash)\n* [eth_getTransactionByBlockHashAndIndex](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByBlockHashAndIndex)\n* [eth_getTransactionByBlockNumberAndIndex](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionByBlockNumberAndIndex)\n* [eth_getTransactionCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionCount)\n* [eth_getTransactionReceipt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getTransactionReceipt)\n* [eth_hashrate](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_hashrate)\n* [eth_mining](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_mining)\n* [eth_newBlockFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newBlockFilter)\n* [eth_newFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newFilter)\n* [eth_protocolVersion](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_protocolVersion)\n* [eth_sendTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendTransaction)\n* [eth_sendRawTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendRawTransaction)\n* [eth_sign](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\n* `eth_signTypedData`\n* [eth_subscribe](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_subscribe)\n* [eth_unsubscribe](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_unsubscribe)\n* [shh_version](https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_version)\n* [net_version](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_version)\n* [net_peerCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_peerCount)\n* [net_listening](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_listening)\n* [eth_uninstallFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_uninstallFilter)\n* [eth_syncing](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_syncing)\n* [web3_clientVersion](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_clientVersion)\n* [web3_sha3](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_sha3)\n* `bzz_hive`\n* `bzz_info`\n\n#### Management API Methods\n\n* [debug_traceTransaction](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#debug_tracetransaction)\n* [miner_start](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#miner_start)\n* [miner_stop](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#miner_stop)\n* [personal_sendTransaction](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sendTransaction)\n* [personal_unlockAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_unlockAccount)\n* [personal_importRawKey](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_importRawKey)\n* [personal_newAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_newAccount)\n* [personal_lockAccount](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_lockAccount)\n* [personal_listAccounts](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_listaccounts)\n\n## Custom Methods\n\nSpecial non-standard methods that aren\u2019t included within the original RPC specification:\n* `evm_snapshot` : Snapshot the state of the blockchain at the current block. Takes no parameters. Returns the integer id of the snapshot created. A snapshot can only be used once. After a successful `evm_revert`, the same snapshot id cannot be used again. Consider creating a new snapshot after each `evm_revert` *if you need to revert to the same point multiple times*.\n  ```bash\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_snapshot\",\"params\":[]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"0x1\" }\n  ```\n* `evm_revert` : Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to. This deletes the given snapshot, as well as any snapshots taken after (Ex: reverting to id `0x1` will delete snapshots with ids `0x1`, `0x2`, `etc`...  If no snapshot id is passed it will revert to the latest snapshot. Returns `true`.\n  ```bash\n  # Ex: ID \"1\" (hex encoded string)\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_revert\",\"params\":[\"0x1\"]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n* `evm_increaseTime` : Jump forward in time. Takes one parameter, which is the amount of time to increase in seconds. Returns the total time adjustment, in seconds.\n  ```bash\n  # Ex: 1 minute (number)\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_increaseTime\",\"params\":[60]}' \\\n          http://localhost:8545\n  ```\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"060\" }\n  ```\n* `evm_mine` : Force a block to be mined (independent of mining status: started | stopped). Takes one **optional** parameter, which is the timestamp a block should setup as the mining time. NOTE: the timestamp parameter should be specified in `seconds`. In JavaScript you would calculate it like this: `Math.floor(Date.now() / 1000);`\n  ```bash\n  # Ex: new Date(\"2009-01-03T18:15:05+00:00\").getTime()\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_mine\",\"params\":[1231006505000]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": \"0x0\" }\n  ```\n* `evm_unlockUnknownAccount` : Unlocks any unknown account. Accounts known to the `personal` namespace and accounts\nreturned by `eth_accounts` cannot be unlocked using this method; use `personal_lockAccount` instead.\n  ```bash\n  # Ex: account: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_unlockUnknownAccount\",\"params\":[\"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n* `evm_lockUnknownAccount` : Locks any unknown account. Accounts known to the `personal` namespace and accounts\nreturned by `eth_accounts` cannot be locked using this method; use `personal_unlockAccount` instead.\n  ```bash\n  # Ex: account: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n  curl -H \"Content-Type: application/json\" -X POST --data \\\n          '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"evm_lockUnknownAccount\",\"params\":[\"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"]}' \\\n          http://localhost:8545\n  ```\n\n  ```json\n  { \"id\": 1337, \"jsonrpc\": \"2.0\", \"result\": true }\n  ```\n\n## Unsupported Methods\n\n* `eth_compileSolidity`: If you'd like Solidity compilation in Javascript, please see the [solc-js project](https://github.com/ethereum/solc-js).\n\n\n## Testing\n\nRun tests via:\n\n```\n$ npm test\n```\n\n## License\n[MIT](https://tldrlegal.com/license/mit-license)\n", "release_dates": []}, {"name": "go-ethereum", "description": "[Optimism] Go implementation of the Optimistic Ethereum protocol", "language": "Go", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n## Go Ethereum\n\nOfficial Golang implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://godoc.org/github.com/ethereum/go-ethereum)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.org/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.org/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\n## Optimism\n\nThe same codebase is used to run both the Sequencer and the Verifier. Runtime\nconfiguration will determine the mode of operation. The configuration flags\ncan be configured using either environment variables or passed at runtime as\nflags.\n\nA prebuilt Docker image is available at `ethereumoptimism/go-ethereum`.\n\nTo compile the code, run:\n```\n$ make geth\n```\n\n### Running a Sequencer\n\nRunning a sequencer requires the [Data Transport Layer](https://github.com/ethereum-optimism/data-transport-layer)\nto be synced. The data transport layer is responsible for indexing transactions\nfrom Layer One concurrently. The sequencer pulls in transactions from the data\ntransport layer and executes them. The URL of the data transport layer should be\nused for the sequencer config option `--rollup.clienthttp`.\n\nSee the script `scripts/start.sh`. It sets many of the config options\nand accepts CLI flags. For usage, run the command:\n\n```bash\n$ ./scripts/start.sh -h\n```\n\nThis may be suitable for simple usecases, users that need more flexibility\nwith their configuration can run the command:\n\n```bash\n$ USING_OVM=true ./build/bin/geth \\\n    --rollup.addressmanagerowneraddress $ADDRESS_MANAGER_OWNER_ADDRESS \\\n    --rollup.clienthttp $ROLLUP_CLIENT_HTTP \\\n    --rollup.pollinterval 3s \\\n    --eth1.networkid $LAYER1_NETWORK_ID \\\n    --eth1.chainid $LAYER1_CHAIN_ID \\\n    --eth1.l1gatewayaddress $ETH1_L1_GATEWAY_ADDRESS \\\n    --eth1.l1crossdomainmessengeraddress $ETH1_L1_CROSS_DOMAIN_MESSENGER_ADDRESS \\\n    --eth1.addressresolveraddress $ETH1_ADDRESS_RESOLVER_ADDRESS \\\n    --eth1.ctcdeploymentheight $CTC_DEPLOY_HEIGHT \\\n    --eth1.syncservice \\\n    --rpc \\\n    --dev \\\n    --rpcaddr \"0.0.0.0\" \\\n    --rpccorsdomain '*' \\\n    --wsaddr \"0.0.0.0\" \\\n    --wsport 8546 \\\n    --wsorigins '*' \\\n    --networkid 420 \\\n    --rpcapi 'eth,net,rollup,web3' \\\n    --gasprice '0' \\\n    --targetgaslimit '8000000' \\\n    --nousb \\\n    --gcmode=archive \\\n    --ipcdisable\n```\n\nThe address manager owner address will be set in the layer two state at runtime.\n\nTo persist the database, pass the `--datadir` with a path to the directory for\nthe database to be persisted in. Without this flag, an in memory database will\nbe used. To tune the log level, use the `--verbosity` flag with an integer.\n\nThe initial state can be fetched via HTTPS using the flag `--rollup.statedumppath`.\nState dumps are available via the [regenesis repository](https://github.com/ethereum-optimism/regenesis).\nTo use a different genesis state, pass in a path to one of the JSON files in the repository.\n\n### Running a Verifier\n\nAdd the flag `--rollup.verifier`\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the [Installation Instructions](https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum) on the wiki.\n\nBuilding `geth` requires both a Go (version 1.10 or later) and a C compiler. You can install\nthem using your favourite package manager. Once the dependencies are installed, run\n\n```shell\nmake geth\n```\n\nor, to build the full suite of utilities:\n\n```shell\nmake all\n```\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd`\ndirectory.\n\n|    Command    | Description|\n| :-----------: ||\n|  **`geth`**   | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI Wiki page](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options) for command line options.          |\n|   `abigen`    | Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI) with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts) wiki page for details. |\n|  `bootnode`   | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.                                                                                                                                                                                                                                                                 |\n|     `evm`     | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug`).                                                                                                                                                                                                                                                                     |\n| `gethrpctest` | Developer utility tool to support our [ethereum/rpc-test](https://github.com/ethereum/rpc-tests) test suite which validates baseline conformity to the [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC) specs. Please see the [test suite's readme](https://github.com/ethereum/rpc-tests/blob/master/README.md) for details.                                                                                                                                                                                                     |\n|   `rlpdump`   | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://github.com/ethereum/wiki/wiki/RLP)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`).                                                                                                                                                                                                                                 |\n|   `puppeth`   | a CLI wizard that aids in creating a new Ethereum network.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n\n## Running `geth`\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options)),\nbut we've enumerated a few common parameter combos to get you up to speed quickly\non how you can run your own `geth` instance.\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum\nnetwork: create accounts; transfer funds; deploy and interact with contracts. For this\nparticular use-case the user doesn't care about years-old historical data, so we can\nfast-sync quickly to the current state of the network. To do so:\n\n```shell\n$ geth console\n```\n\nThis command will:\n * Start `geth` in fast sync mode (default, can be changed with the `--syncmode` flag),\n   causing it to download more data in exchange for avoiding processing the entire history\n   of the Ethereum network, which is very CPU intensive.\n * Start up `geth`'s built-in interactive [JavaScript console](https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console),\n   (via the trailing `console` subcommand) through which you can invoke all official [`web3` methods](https://github.com/ethereum/wiki/wiki/JavaScript-API)\n   as well as `geth`'s own [management APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs).\n   This tool is optional and if you leave it out you can always attach to an already running\n   `geth` instance with `geth attach`.\n\n### A Full node on the Ethereum test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum\ncontracts, you almost certainly would like to do that without any real money involved until\nyou get the hang of the entire system. In other words, instead of attaching to the main\nnetwork, you want to join the **test** network with your node, which is fully equivalent to\nthe main network, but with play-Ether only.\n\n```shell\n$ geth --testnet console\n```\n\nThe `console` subcommand has the exact same meaning as above and they are equally\nuseful on the testnet too. Please see above for their explanations if you've skipped here.\n\nSpecifying the `--testnet` flag, however, will reconfigure your `geth` instance a bit:\n\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), `geth`\n   will nest itself one level deeper into a `testnet` subfolder (`~/.ethereum/testnet` on\n   Linux). Note, on OSX and Linux this also means that attaching to a running testnet node\n   requires the use of a custom endpoint since `geth attach` will try to attach to a\n   production node endpoint by default. E.g.\n   `geth attach <datadir>/testnet/geth.ipc`. Windows users are not affected by\n   this.\n * Instead of connecting the main Ethereum network, the client will connect to the test\n   network, which uses different P2P bootnodes, different network IDs and genesis states.\n\n*Note: Although there are some internal protective measures to prevent transactions from\ncrossing over between the main network and test network, you should make sure to always\nuse separate accounts for play-money and real-money. Unless you manually move\naccounts, `geth` will by default correctly separate the two networks and will not make any\naccounts available between them.*\n\n### Full node on the Rinkeby test network\n\nThe above test network is a cross-client one based on the ethash proof-of-work consensus\nalgorithm. As such, it has certain extra overhead and is more susceptible to reorganization\nattacks due to the network's low difficulty/security. Go Ethereum also supports connecting\nto a proof-of-authority based test network called [*Rinkeby*](https://www.rinkeby.io)\n(operated by members of the community). This network is lighter, more secure, but is only\nsupported by go-ethereum.\n\n```shell\n$ geth --rinkeby console\n```\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a\nconfiguration file via:\n\n```shell\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea how the file should look like you can use the `dumpconfig` subcommand to\nexport your existing configuration:\n\n```shell\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with `geth` v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using\nDocker:\n\n```shell\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start `geth` in fast-sync mode with a DB memory allowance of 1GB just as the\nabove command does.  It will also create a persistent volume in your home directory for\nsaving your blockchain as well as map the default ports. There is also an `alpine` tag\navailable for a slim version of the image.\n\nDo not forget `--rpcaddr 0.0.0.0`, if you want to access RPC from other containers\nand/or hosts. By default, `geth` binds to the local interface and RPC endpoints is not\naccessible from the outside.\n\n### Programmatically interfacing `geth` nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with `geth` and the\nEthereum network via your own programs and not manually through the console. To aid\nthis, `geth` has built-in support for a JSON-RPC based APIs ([standard APIs](https://github.com/ethereum/wiki/wiki/JSON-RPC)\nand [`geth` specific APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs)).\nThese can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based\nplatforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by `geth`,\nwhereas the HTTP and WS interfaces need to manually be enabled and only expose a\nsubset of APIs due to security reasons. These can be turned on/off and configured as\nyou'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--rpc` Enable the HTTP-RPC server\n  * `--rpcaddr` HTTP-RPC server listening interface (default: `localhost`)\n  * `--rpcport` HTTP-RPC server listening port (default: `8545`)\n  * `--rpcapi` API's offered over the HTTP-RPC interface (default: `eth,net,web3`)\n  * `--rpccorsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--wsaddr` WS-RPC server listening interface (default: `localhost`)\n  * `--wsport` WS-RPC server listening port (default: `8546`)\n  * `--wsapi` API's offered over the WS-RPC interface (default: `eth,net,web3`)\n  * `--wsorigins` Origins from which to accept websockets requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: `admin,debug,eth,miner,net,personal,shh,txpool,web3`)\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to\nconnect via HTTP, WS or IPC to a `geth` node configured with the above flags and you'll\nneed to speak [JSON-RPC](https://www.jsonrpc.org/specification) on all transports. You\ncan reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based\ntransport before doing so! Hackers on the internet are actively trying to subvert\nEthereum nodes with exposed APIs! Further, all browser tabs can access locally\nrunning web servers, so malicious web pages could try to subvert locally available\nAPIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for\ngranted in the official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be\naware of and agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n    \"chainId\": <arbitrary positive integer>,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0\n  },\n  \"alloc\": {},\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\": \"0x20000\",\n  \"extraData\": \"\",\n  \"gasLimit\": \"0x2fefd8\",\n  \"nonce\": \"0x0000000000000042\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\": \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing\nthe `nonce` to some random value so you prevent unknown remote nodes from being able\nto connect to you. If you'd like to pre-fund some accounts for easier testing, create\nthe accounts and populate the `alloc` field with their addresses.\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\n    \"balance\": \"111111111\"\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    \"balance\": \"222222222\"\n  }\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every**\n`geth` node with it prior to starting it up to ensure all blockchain parameters are correctly\nset:\n\n```shell\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to\nstart a bootstrap node that others can use to find each other in your network and/or over\nthe internet. The clean way is to configure and run a dedicated bootnode:\n\n```shell\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://github.com/ethereum/wiki/wiki/enode-url-format)\nthat other nodes can use to connect to it and exchange peer information. Make sure to\nreplace the displayed IP address information (most probably `[::]`) with your externally\naccessible IP to get the actual `enode` URL.\n\n*Note: You could also use a full-fledged `geth` node as a bootnode, but it's the less\nrecommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try\n`telnet <ip> <port>` to ensure it's indeed reachable), start every subsequent `geth`\nnode pointed to the bootnode for peer discovery via the `--bootnodes` flag. It will\nprobably also be desirable to keep the data directory of your private network separated, so\ndo also specify a custom `--datadir` flag.\n\n```shell\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll\nalso need to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\nMining on the public Ethereum network is a complex task as it's only feasible using GPUs,\nrequiring an OpenCL or CUDA enabled `ethminer` instance. For information on such a\nsetup, please consult the [EtherMining subreddit](https://www.reddit.com/r/EtherMining/)\nand the [ethminer](https://github.com/ethereum-mining/ethminer) repository.\n\nIn a private network setting, however a single CPU miner instance is more than enough for\npractical purposes as it can produce a stable stream of blocks at the correct intervals\nwithout needing heavy resources (consider running on a single thread, no need for multiple\nones either). To start a `geth` instance for mining, run it with all your usual flags, extended\nby:\n\n```shell\n$ geth <usual-flags> --mine --miner.threads=1 --etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all\nproceedings to the account specified by `--etherbase`. You can further tune the mining\nby changing the default gas limit blocks converge to (`--targetgaslimit`) and the price\ntransactions are accepted at (`--gasprice`).\n\n## Contribution\n\nThank you for considering to help out with the source code! We welcome contributions\nfrom anyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit\nmore complex changes though, please check up with the core devs first on [our gitter channel](https://gitter.im/ethereum/go-ethereum)\nto ensure those changes are in line with the general philosophy of the project and/or get\nsome early feedback which can make both your efforts much lighter as well as our review\nand merge procedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting)\n   guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary)\n   guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://github.com/ethereum/go-ethereum/wiki/Developers'-Guide)\nfor more details on configuring your environment, managing project dependencies, and\ntesting procedures.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html),\nalso included in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) is licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also\nincluded in our repository in the `COPYING` file.\n", "release_dates": ["2021-04-09T04:53:20Z", "2021-04-05T21:46:26Z", "2021-02-26T01:51:24Z", "2021-02-25T20:23:39Z", "2021-01-15T19:40:52Z", "2021-01-14T03:20:24Z", "2021-01-07T00:50:37Z"]}, {"name": "go-ethereum-hdwallet", "description": "Ethereum HD Wallet derivations in Go (golang)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<h3 align=\"center\">\n  <br />\n  <img src=\"https://user-images.githubusercontent.com/168240/51436479-a4cf9e80-1c42-11e9-9af3-3bb827b8f2de.png\" alt=\"logo\" width=\"600\" />\n  <br />\n  <br />\n  <br />\n</h3>\n\n# go-ethereum-hdwallet\n\n> Ethereum HD Wallet derivations from [mnemonic] seed in Go (golang). Implements the [go-ethereum](https://github.com/ethereum/go-ethereum) [`accounts.Wallet`](https://github.com/ethereum/go-ethereum/blob/master/accounts/accounts.go) interface.\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/ethereum-optimism/go-ethereum-hdwallet/master/LICENSE)\n[![Build Status](https://travis-ci.org/ethereum-optimism/go-ethereum-hdwallet.svg?branch=master)](https://travis-ci.org/miguelmota/go-ethereum-hdwallet)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum-optimism/go-ethereum-hdwallet?)](https://goreportcard.com/report/github.com/miguelmota/go-ethereum-hdwallet)\n[![GoDoc](https://godoc.org/github.com/ethereum-optimism/go-ethereum-hdwallet?status.svg)](https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](#contributing)\n\n## Install\n\n```bash\ngo get -u github.com/ethereum-optimism/go-ethereum-hdwallet\n```\n\n## Documenation\n\n[https://godoc.org/github.com/ethereum-optimism/go-ethereum-hdwallet](https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet)\n\n## Getting started\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/ethereum-optimism/go-ethereum-hdwallet\"\n)\n\nfunc main() {\n\tmnemonic := \"tag volcano eight thank tide danger coast health above argue embrace heavy\"\n\twallet, err := hdwallet.NewFromMnemonic(mnemonic)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpath := hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/0\")\n\taccount, err := wallet.Derive(path, false)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(account.Address.Hex()) // 0xC49926C4124cEe1cbA0Ea94Ea31a6c12318df947\n\n\tpath = hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/1\")\n\taccount, err = wallet.Derive(path, false)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(account.Address.Hex()) // 0x8230645aC28A4EdD1b0B53E7Cd8019744E9dD559\n}\n```\n\n### Signing transaction\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"math/big\"\n\n\t\"github.com/davecgh/go-spew/spew\"\n\t\"github.com/ethereum/go-ethereum/common\"\n\t\"github.com/ethereum/go-ethereum/core/types\"\n\t\"github.com/ethereum-optimism/go-ethereum-hdwallet\"\n)\n\nfunc main() {\n\tmnemonic := \"tag volcano eight thank tide danger coast health above argue embrace heavy\"\n\twallet, err := hdwallet.NewFromMnemonic(mnemonic)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpath := hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/0\")\n\taccount, err := wallet.Derive(path, true)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tnonce := uint64(0)\n\tvalue := big.NewInt(1000000000000000000)\n\ttoAddress := common.HexToAddress(\"0x0\")\n\tgasLimit := uint64(21000)\n\tgasPrice := big.NewInt(21000000000)\n\tvar data []byte\n\n\ttx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)\n\tsignedTx, err := wallet.SignTx(account, tx, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tspew.Dump(signedTx)\n}\n```\n\n## CLI\n\n```bash\ngo install github.com/ethereum-optimism/go-ethereum-hdwallet/cmd/geth-hdwallet@latest\n```\n\n```bash\n$ geth-hdwallet -mnemonic \"tag volcano eight thank tide danger coast health above argue embrace heavy\" -path \"m/44'/60'/0'/0/0\"\n\npublic address: 0xC49926C4124cEe1cbA0Ea94Ea31a6c12318df947\nprivate key: 63e21d10fd50155dbba0e7d3f7431a400b84b4c2ac1ee38872f82448fe3ecfb9\n```\n\n## Test\n\n```bash\nmake test\n```\n\n## Contributing\n\nPull requests are welcome!\n\nFor contributions please create a new branch and submit a pull request for review.\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": []}, {"name": "go-optimistic-ethereum-utils", "description": null, "language": "Go", "license": null, "readme": "# go-optimistic-ethereum-utils\n\nThis package is meant to hold utilities used by\n[Optimistic Ethereum](https://github.com/ethereum-optimism/optimism) written in\nGolang.\n\n## Packages\n\n### Fees\n\nPackage fees includes helpers for dealing with fees on Optimistic Ethereum\n\n#### `EncodeTxGasLimit(data []byte, l1GasPrice, l2GasLimit, l2GasPrice *big.Int) *big.Int`\n\nEncodes `tx.gasLimit` based on the variables that are used to determine it.\n\n`data` - Calldata of the transaction being sent. This data should *not* include the full signed RLP transaction.\n\n`l1GasPrice` - gas price on L1 in wei\n\n`l2GasLimit` - amount of gas provided for execution in L2. Notably, accounts are charged for execution based on this gasLimit, even if the gasUsed ends up being less.\n\n`l2GasPrice` - gas price on L2 in wei\n\n#### `DecodeL2GasLimit(gasLimit *big.Int) *big.Int`\n\nAccepts the return value of `eth_estimateGas` and decodes the L2 gas limit that\nis encoded in the return value. This is the gas limit that is passed to the user\ncontract within the OVM.\n", "release_dates": []}, {"name": "hardhat", "description": "[Optimism] Hardhat Config for running a Hardhat Node", "language": "JavaScript", "license": null, "readme": "# Hardhat Node\n\nHardhat config for running a hardhat node.\n\n## Usage\n\n```bash\n$ git clone https://github.com/ethereum-optimism/hardhat.git\n$ cd hardhat\n$ npm install\n$ npx hardhat node\n```\n\nA very useful feature of Hardhat is forking from mainnet. This\ncan be done with the command:\n\n```bash\n$ npx hardhat node --hostname 0.0.0.0 --fork <web 3 url>\n```\n\nNote that an archive node is required for this. Alchemy provides\na free tier with archive nodes.\n\nThe `mine.sh` script calls `evm_mine` which will mine a block.\nTo automine on an interval:\n\n```bash\nINTERVAL=5\nwhile true; do ./mine.sh; sleep $INTERVAL; done\n```\n", "release_dates": []}, {"name": "hardhat-hackathon-boilerplate", "description": null, "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Hardhat Hackathon Boilerplate\n\nThis repository contains a sample project that you can use as the starting point\nfor your Ethereum project. It's also a great fit for learning the basics of\nsmart contract development.\n\nThis project is intended to be used with the\n[Hardhat Beginners Tutorial](https://hardhat.org/tutorial), but you should be\nable to follow it by yourself by reading the README and exploring its\n`contracts`, `tests`, `scripts` and `frontend` directories.\n\n## Quick start\n\nThe first things you need to do are cloning this repository and installing its\ndependencies:\n\n```sh\ngit clone https://github.com/nomiclabs/hardhat-hackathon-boilerplate.git\ncd hardhat-hackathon-boilerplate\nnpm install\n```\n\nOnce installed, let's run Hardhat's testing network:\n\n```sh\nnpx hardhat node\n```\n\nThen, on a new terminal, go to the repository's root folder and run this to\ndeploy your contract:\n\n```sh\nnpx hardhat run scripts/deploy.js --network localhost\n```\n\nFinally, we can run the frontend with:\n\n```sh\ncd frontend\nnpm install\nnpm start\n```\n\n> Note: There's [an issue in `ganache-core`](https://github.com/trufflesuite/ganache-core/issues/650) that can make the `npm install` step fail. \n>\n> If you see `npm ERR! code ENOLOCAL`, try running `npm ci` instead of `npm install`.\n\nOpen [http://localhost:3000/](http://localhost:3000/) to see your Dapp. You will\nneed to have [Metamask](https://metamask.io) installed and listening to\n`localhost 8545`.\n\n## User Guide\n\nYou can find detailed instructions on using this repository and many tips in [its documentation](https://hardhat.org/tutorial).\n\n- [Project description (Token.sol)](https://hardhat.org/tutorial/4-contracts/)\n- [Setting up the environment](https://hardhat.org/tutorial/1-setup/)\n- [Testing with Hardhat, Mocha and Waffle](https://hardhat.org/tutorial/5-test/)\n- [Setting up Metamask](https://hardhat.org/tutorial/8-frontend/#setting-up-metamask)\n- [Hardhat's full documentation](https://hardhat.org/getting-started/)\n\nFor a complete introduction to Hardhat, refer to [this guide](https://hardhat.org/getting-started/#overview).\n\n## What\u2019s Included?\n\nYour environment will have everything you need to build a Dapp powered by Hardhat and React.\n\n- [Hardhat](https://hardhat.org/): An Ethereum development task runner and testing network.\n- [Mocha](https://mochajs.org/): A JavaScript test runner.\n- [Chai](https://www.chaijs.com/): A JavaScript assertion library.\n- [ethers.js](https://docs.ethers.io/ethers.js/html/): A JavaScript library for interacting with Ethereum.\n- [Waffle](https://github.com/EthWorks/Waffle/): To have Ethereum-specific Chai assertions/mathers.\n- [A sample frontend/Dapp](./frontend): A Dapp which uses [Create React App](https://github.com/facebook/create-react-app).\n\n## Troubleshooting\n\n- `Invalid nonce` errors: if you are seeing this error on the `npx hardhat node`\n  console, try resetting your Metamask account. This will reset the account's\n  transaction history and also the nonce. Open Metamask, click on your account\n  followed by `Settings > Advanced > Reset Account`.\n\n## Feedback, help and news\n\nWe'd love to have your feedback on this tutorial. Feel free to reach us through\nthis repository or [our Discord server](https://invite.gg/HardhatSupport).\n\nAlso you can [follow us on Twitter](https://twitter.com/HardhatHQ).\n\n**Happy _buidling_!**\n", "release_dates": []}, {"name": "hardhat-state-dumps", "description": "[Optimism] Hardhat state dumps for integration testing.", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# @eth-optimism/hardhat-state-dumps\n\nAn integration testing repo!\n", "release_dates": []}, {"name": "hive", "description": "Ethereum end-to-end test harness", "language": "Go", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# hive - Ethereum end-to-end test harness\n\nHive is a system for running integration tests against Ethereum clients.\n\nEthereum Foundation maintains two public Hive instances to check for consensus, p2p and\nblockchain compatibility:\n\n- eth1 consensus, rpc, p2p tests are on <https://hivetests.ethdevops.io>\n- 'merge' testing runs on <https://hivetests2.ethdevops.io>\n\n**To read more about hive, please check [the documentation][doc].**\n\n### Trophies\n\nIf you find a bug in your client implementation due to this project, please be so kind as\nto add it here to the trophy list. It could help prove that `hive` is indeed a useful tool\nfor validating Ethereum client implementations.\n\n- go-ethereum:\n  - Genesis chain config couldn't handle present but empty settings: [#2790](https://github.com/ethereum/go-ethereum/pull/2790)\n  - Data race between remote block import and local block mining: [#2793](https://github.com/ethereum/go-ethereum/pull/2793)\n  - Downloader didn't penalize incompatible forks hashly enough: [#2801](https://github.com/ethereum/go-ethereum/pull/2801)\n- Nethermind:\n  - Bug in p2p whith bonding nodes algorithm found by Hive: [#1894](https://github.com/NethermindEth/nethermind/pull/1894)\n  - Difference in return value for 'r' parameter in getTransactionByHash: [#2372](https://github.com/NethermindEth/nethermind/issues/2372)\n  - CREATE/CREATE2 behavior when account already has max nonce [#3698](https://github.com/NethermindEth/nethermind/pull/3698)\n  - Blake2 performance issue with non-vectorized code [#3837](https://github.com/NethermindEth/nethermind/pull/3837)\n\n### Contributions\n\nThis project takes a different approach to code contributions than your usual FOSS project\nwith well ingrained maintainers and relatively few external contributors. It is an\nexperiment. Whether it will work out or not is for the future to decide.\n\nWe follow the [Collective Code Construction Contract (C4)][c4], code contribution model,\nas expanded and explained in [The ZeroMQ Process][zmq-process]. The core idea being that\nany patch that successfully solves an issue (bug/feature) and doesn't break any existing\ncode/contracts must be optimistically merged by maintainers. Followup patches may be used\nto for additional polishes \u2013 and patches may even be outright reverted if they turn out to\nhave a negative impact \u2013 but no change must be rejected based on personal values.\n\n### License\n\nThe hive project is licensed under the [GNU General Public License v3.0][gpl]. You can\nfind it in the COPYING file.\n\n[doc]: ./docs/overview.md\n[c4]: http://rfc.zeromq.org/spec:22/C4/\n[zmq-process]: https://hintjens.gitbooks.io/social-architecture/content/chapter4.html\n[gpl]: http://www.gnu.org/licenses/gpl-3.0.en.html\n", "release_dates": []}, {"name": "integration-tests", "description": "[Optimism] Service Integration Tests", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Integration Tests\n\nTypescript based integration test repo for Optimistic Ethereum.\n\nTest suites are defined as a package in the `packages` directory.\nThis repo can be ran on its own or as part of\n[Optimism Integration](https://github.com/ethereum-optimism/optimism-integration).\n\n\n## Running with Optimism Integration\n\nThe [Optimism Integration](https://github.com/ethereum-optimism/optimism-integration)\nrepo can be used to automatically configure and run the test suites found\nin this repo. See the [README](https://github.com/ethereum-optimism/optimism-integration/blob/master/README.md)\nfor usage information.\n\nIt is assumed that each test suite gets a fresh state when running this way.\nThis means that the packages must not depend on each other.\n\nDocker images found on [Dockerhub](https://hub.docker.com/u/ethereumoptimism)\nare used when running the test suites this way.\n\n## Running locally\n\nThis repo can be ran locally against existing services but the configuration\nmust be handled by the user. A `.env` file will be used to populate the\nconfiguration when then environment variable `NODE_ENV` is set to `local`.\n\nThere should be a `yarn` script for each package found in `packages`.\n\n```bash\n$ yarn test:x-domain\n$ yarn test:tx-ingestion\n$ yarn test:sequencer-interactions\n```\n\nThe environment variables that are used by this repository can be found in\nthe `Config` class in `common.ts`.\n\n| Environment Variable            | Description |\n| -----------                     | ----------- |\n| `L1_NODE_WEB3_URL`              | L1 HTTP endpoint |\n| `L2_NODE_WEB3_URL`              | L2 HTTP endpoint |\n| `MNEMONIC`                      | Mnemonic used to derive keys |\n| `ETH1_ADDRESS_RESOLVER_ADDRESS` | Address Resolver Address |\n| `SEQUENCER_PRIVATE_KEY`         | Private key used by sequencer |\n| `DEPLOYER_PRIVATE_KEY`          | Private key used by deployer |\n| `TARGET_GAS_LIMIT`              | L2 gas limit |\n| `CHAIN_ID`                      | L2 Chain ID |\n\n\nThe test suites must not run in parallel.\n", "release_dates": []}, {"name": "keygeneration", "description": "[Optimism] Airgapped Key Generation", "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# keygeneration\n\nOffline key generation. Generates a [bip 39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\ncompliant mnemonic. Useful for generating keys on an airgapped computer. This\npackage will download and package all of the required dependencies for key\ngeneration on an Ubuntu 18.xx (Bionic Beaver) machine. These dependencies can\nbe loaded onto an airgapped computer for key generation.\n\nUse this at your own risk as this comes with no guarantees.\n\n## Local Dependencies\n\n- docker\n- tar\n- wget\n- shasum\n\n## Downloads\n\nThe `download.sh` script will download all of the necessary dependencies\nfor generating keys on an airgapped computer. These dependencies\nare listed below.\n\n### Debian Packages\n\n- build-essential\n- nodejs v14.x\n\n### Git Repos\n\n- [node-gyp](https://github.com/nodejs/node-gyp)\n- [bcrypto](https://github.com/bcoin-org/bcrypto)\n- [bsert](https://github.com/chjj/bsert)\n- [bufio](https://github.com/bcoin-org/bufio)\n- [loady](https://github.com/chjj/loady)\n- [bmocha](https://github.com/bcoin-org/bmocha)\n\n### Vendor Directory\n\nFiles taken from [hsd](https://github.com/handshake-org/hsd).\nSee the [hd package](https://github.com/handshake-org/hsd/tree/master/lib/hd).\nTests are taken as well and run automatically after installation.\n\n## Usage\n\nFirst the dependencies for offline key generation must be bundled\ntogether. Run the command:\n\n```bash\n$ ./download.sh -o <output directory>\n```\n\nUse the `-o` flag to specify an output directory for the\nfiles. This could be set to the directory that represents\na USB stick. The `-h` flag will print its usage.\n\nThis will generate an `install.sh` script as well as a bunch\nof tarballs containing various dependencies for the keygen.\n\nOn the airgapped computer, copy the files off of the USB stick.\nThis computer must be running Ubuntu 18.xx and may be booted\nfrom a USB stick.\nNavigate to the directory full of the files and run the commands:\n\n```bash\n$ chmod +x install.sh\n$ ./install.sh\n```\n\nThis will install the dependencies and run tests.\n\nNow to generate the mnemonic, run the command:\n\n```bash\n$ node generate.js\n```\n\nThis will print off a mnemonic.\n\n## RNG\n\n[bcrypto](https://github.com/bcoin-org/bcrypto) is used to\ncreate the mnemonic. The RNG is from\n[libtorsion](https://github.com/bcoin-org/libtorsion). At time of writing,\nthis package uses `bcrypto` at `v5.3.0`. The RNG implementation can be\nfound [here](https://github.com/bcoin-org/bcrypto/blob/v5.3.0/deps/torsion/src/rand.c).\n\n", "release_dates": []}, {"name": "kona", "description": "A suite of libraries and build pipelines for developing verifiable Rust programs targeting Fault Proof VMs.", "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<h1 align=\"center\">\n<img src=\"./assets/banner.png\" alt=\"Kona\" width=\"100%\" align=\"center\">\n</h1>\n\n<h4 align=\"center\">\n    A verifiable implementation of the <a href=\"https://github.com/ethereum-optimism/optimism\">Optimism</a> rollup state transition.\n</h4>\n\n<p align=\"center\">\n  <a href=\"https://github.com/ethereum-optimism/kona/actions/workflows/ci.yaml\">\n    <img src=\"https://github.com/ethereum-optimism/kona/actions/workflows/ci.yaml/badge.svg?label=ci\" alt=\"CI\">\n  </a>\n  <a href=\"https://github.com/ethereum-optimism/kona/actions/workflows/fpvm-tests.yaml\">\n    <img src=\"https://github.com/ethereum-optimism/kona/actions/workflows/fpvm-tests.yaml/badge.svg?label=FPVM Tests\" alt=\"FPVM Tests\">\n  </a>\n  <img src=\"https://img.shields.io/badge/License-MIT-green.svg?label=license\" alt=\"License\">\n  <a href=\"https://ethereum-optimism.github.io/kona\">\n    <img src=\"https://img.shields.io/badge/Contributor%20Book-grey?logo=mdBook\" alt=\"Book\">\n  </a>\n  <a href=\"https://github.com/ethereum-optimism/monorepo\"><img src=\"https://img.shields.io/badge/OP%20Stack-monorepo-red\" alt=\"OP Stack\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#whats-kona\">What's Kona?</a> \u2022\n  <a href=\"#overview\">Overview</a> \u2022\n  <a href=\"https://static.optimism.io/kona/CONTRIBUTING.html\">Contributing</a> \u2022\n  <a href=\"#credits\">Credits</a>\n</p>\n\n## What's Kona?\n\nKona is a [fault proof program][fpp-specs] designed to deterministically execute a rollup state transition in order to\nverify an [L2 output root][g-output-root] from the L1 inputs it was [derived from][g-derivation-pipeline].\n\n### Development Status\n\n`kona` is currently in active development, and is not yet ready for use in production.\n\n## Overview\n\n**`kona`**\n\n- [`client`](./bin/client): The bare-metal program that runs on top of a [fault proof VM][g-fault-proof-vm].\n- [`host`](./bin/host): The host program that runs natively alongside the FPVM, serving as the [Preimage Oracle][g-preimage-oracle] server.\n\n**Build Pipelines**\n\n- [`cannon`](./build/cannon): Docker image for compiling to the bare-metal `mips-unknown-none` target.\n- [`asterisc`](./build/asterisc): Docker image for compiling to the bare-metal `riscv64gc-unknown-none-elf` target.\n\n**`client` / `host` SDK**\n\n- [`common`](./crates/common): A suite of utilities for developing `client` programs to be ran on top of Fault Proof VMs.\n- [`preimage`](./crates/preimage): High level interfaces to the [`PreimageOracle`][fpp-specs] ABI\n- [`derive`](./crates/derive): `no_std` compatible implementation of the [derivation pipeline][g-derivation-pipeline].\n\n## Book\n\nThe [book][book] contains a more in-depth overview of the project, contributor guidelines, tutorials for getting started with building your own programs, and a reference for the libraries and tools provided by Kona.\n\n## Credits\n\n`kona` is inspired by the work of several teams, namely [OP Labs][op-labs] and other contributors' work on the [`op-program`][op-program] and [BadBoiLabs][bad-boi-labs]'s work on [Cannon-rs][badboi-cannon-rs].\n\n[op-stack]: https://github.com/ethereum-optimism/optimism\n[op-program]: https://github.com/ethereum-optimism/optimism/tree/develop/op-program\n[cannon]: https://github.com/ethereum-optimism/optimism/tree/develop/cannon\n[cannon-rs]: https://github.com/anton-rs/cannon-rs\n[badboi-cannon-rs]: https://github.com/BadBoiLabs/cannon-rs\n[asterisc]: https://github.com/etheruem-optimism/asterisc\n[fpp-specs]: https://specs.optimism.io/experimental/fault-proof/index.html\n[book]: https://ethereum-optimism.github.io/kona/\n[op-labs]: https://github.com/ethereum-optimism\n[bad-boi-labs]: https://github.com/BadBoiLabs\n[g-output-root]: https://specs.optimism.io/glossary.html#l2-output-root\n[g-derivation-pipeline]: https://specs.optimism.io/protocol/derivation.html#l2-chain-derivation-pipeline\n[g-fault-proof-vm]: https://specs.optimism.io/experimental/fault-proof/index.html#fault-proof-vm\n[g-preimage-oracle]: https://specs.optimism.io/experimental/fault-proof/index.html#pre-image-oracle\n", "release_dates": ["2024-02-22T16:41:53Z", "2024-02-22T20:38:52Z", "2024-02-22T16:39:30Z"]}, {"name": "l2-geth-state-dumper", "description": "A small utility for generating an L2 genesis state", "language": "Go", "license": null, "readme": "# geth-dumper\n\nA special purpose geth state dumper which does a couple of strange things:\n\n1. Deploys some initcode to a blank state\n2. Creates a state dump\n3. Replaces all instances of the initial contract addresses with some hardcoded addresses\n4. Prints out the state dump\n\nThis is used for generating the initial OVM state (with an ExecutionManager & StateManager, etc) at specific addresses.\n\n## Usage\nTested with `go version go1.14.3 darwin/amd64`\n\n### Generating State Dump Input (`deployment-tx-data.json`)\nIf you want to replace state dump input txs, then you'll need to generate a new `deployment-tx-data.json` file. Do this when you make changes to the ExecutionManager\nand you'd like them reflected in the intial OVM state.\n\nTo do this, find the Geth Input Dump test file (https://github.com/ethereum-optimism/optimism-monorepo/blob/master/packages/contracts/test/deployment/geth-input-dump.spec.ts)\nand change `.skip` to `.only` -- this will run the test & generate a `deployment-tx-data.json` file. That file contains all of the txs we want to apply to our initial state.\n\nNext copy the `deployment-tx-data.json` into the root directory of this project.\n\n### Generating a state dump\n```\n$ go install\n$ go run main.go\n.... # this prints out a lot of stuff...\n653030633531303434663463623131326138623962346163376561623563313961227d7d7d7d\n\nDUMP PRINTED! Copy sent to: state-dump.hex\nJSON string version sent to: state-dump.json\nTo add to L2Geth, copy the dump hex into `ovm_constants.go`\n```\n\n### Ingesting the state dump\nYou can ingest either the JSON version of the state dump, or the hexified version of the state dump. Up to you!\n\n## TODO\nMake this process way cleaner & more automated. I am sorry for the poor tooling here!\n", "release_dates": []}, {"name": "lambda-cloudwatch-slack", "description": "Send AWS CloudWatch notifications to a Slack channel using Lambda", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# lambda-cloudwatch-slack\nForked from [here](http://github.com/assertible/lambda-cloudwatch-slack)\n\n\n## Configuration\n\n### 1. Clone this repository\n\n### 2. Setup Slack hook (one for each environment / application)\n\nFollow these steps to configure the webhook in Slack:\n\n  1. Navigate to\n     [https://slack.com/services/new](https://slack.com/services/new)\n     and search for and select \"Incoming WebHooks\".\n\n  3. Choose the default channel where messages will be sent and click\n     \"Add Incoming WebHooks Integration\".\n\n  4. Copy the webhook URL from the setup instructions and use it in\n     the next section.\n\n  5. Click 'Save Settings' at the bottom of the Slack integration\n     page.\n\n### 3. Configure environment variables\n\n```\ncp .env.example .env\n```\n\nFill in the variables in the `.env`.\n\nNote:\n1. The name that you configure for this function. It should indicate the environment / service it pertains to.\n1. The environment in the name should match the environment of the webhook that is configured.\n\n### 4. Deploy to AWS Lambda\n\nDeploy the integration to AWS Lambda:\n\n    npm install\n    npm run deploy\n    \n### 5. Create Lambda Subscription Filter in CloudWatch\n\nIn step 4 we created a Lambda function in AWS that will send to the Slack webhook configured in step 3. \n\nNow we need to configure CloudWatch to send error logs to this Lambda function.\n\n1. Go to `Log Groups` within CloudWatch\n1. Find the log group(s) that may contain error logs that should be sent to slack\n1. Select the log group and select `Actions -> Create Lambda Subscription Filter`\n1. In the Create Subscription Filter dialog\n    1. Select the Lambda function that corresponds to the Log group (dev to dev, uat to uat, etc.)\n    1. Select the Log format. I usually go with `AWS CloudTrail`, but you can choose different ones and see the format example below\n    1. Create a log pattern for which matches should be sent to slack (See existing ones by using `aws logs describe-subscription-filters --log-group-name <log group>` aws-cli command\n    1. Test out the pattern on data that you enter in the sample logs text area\n    1. Finalize the creation of the subscription filter.\n1. Test that errors logged are sent to slack\n\n\n", "release_dates": []}, {"name": "lib-keccak", "description": "Keccak-f[1600] permutation in the EVM", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# `lib-keccak`\n\n> [!WARNING]\n> These smart contracts have not been audited by cryptography experts. Proceed with caution.\n\nImplementation of the `Keccak-f[1600]` permutation in Solidity.\n\n## Examples\n\n**Differential test vs. `tiny-keccak`**\n\n```sh\njust rust-fuzz\n```\n\n**Run contract tests**\n```sh\njust sol-test\n```\n", "release_dates": []}, {"name": "merch", "description": "official optimism merch instructions", "language": null, "license": null, "readme": "# optimism merch\n\n## required materials\n\n1. `shirt`\n2. `marker`\n\n## instructions\n\n1. place `shirt` on hard surface\n\n![IMG_4383](https://user-images.githubusercontent.com/14298799/134743449-b977d845-cf6b-4f62-8854-16a63abe6cca.jpg)\n\n2. using `marker`, write \"OPTIMISM\" on `shirt`\n\n![IMG_4384](https://user-images.githubusercontent.com/14298799/134743461-bee3d82f-fae4-49a9-8a2b-b1611fdfcd29.jpg)\n\n3. draw vague circular shape on top left corner of `shirt`\n\n![IMG_4385](https://user-images.githubusercontent.com/14298799/134743474-0ea3e1cf-2ee0-4f53-ac20-54dd88237814.jpg)\n\n4. write \"OP\" inside circlular shape\n\n![IMG_4386](https://user-images.githubusercontent.com/14298799/134743486-a80e2d01-b4e4-4fca-8084-f848b21c4cbf.jpg)\n\n5. wear `shirt`\n", "release_dates": []}, {"name": "minigeth", "description": "Stripped-down oracle-augmented version of geth for use in fault proofs.", "language": "Go", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "The pieces of geth needed to verify a block\n\nSee `../sync_minigeth.sh`, most of this is just geth and we can copy many of the files\n\nThe database has been abstracted in the `oracle/`, this does not use leveldb\n\nRunning on PC, it fetches all the required pieces of state from RPC.\n\nRunning on MIPS, it uses the oracle MMIO interface to get state based on hash.\n", "release_dates": []}, {"name": "mocktimism", "description": "[WIP!] Coordinates two anvil process (L1 and L2) for testing / forking op-stack chains (mocktimism placeholder name)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# What is Mocktimism?\n\nMocktimism is an all-inclusive development tool for OP Stack, similar to hardhat and anvil. It serves as a valuable resource for OP Stack developers in their local and end-to-end development efforts.\n\nLocal development and testing are essential components of software development, and Mocktimism plays a key role in the broader **just works** initiative, aimed at ensuring the compatibility of existing Ethereum tools with Optimism.\n\nDeveloping on the OP Stack comes with its own set of challenges, including:\n\n- L1 Gas fees, which can be surprising for OP stack chain developers.\n- Anvil and hardhat lack support for Optimism native bridging.\n- Tedious setup when spinning up multiple devnets for applications like Evo-online.\n- The Optimism devnet is resource-intensive, relies on Docker, and lacks support for hardhat/anvil features such as impersonation.\n\nTo draw an analogy, think of Mocktimism as the **docker-compose** for hardhat and anvil. Just as Docker is used to configure a single container, and docker-compose configures multiple containers, Mocktimism is the tool that OP-chain developers use to configure multiple chains when working with anvil and hardhat.\n", "release_dates": []}, {"name": "op-analytics", "description": "Onchain Data, Utilities, References, and other Analytics on Optimism", "language": "Jupyter Notebook", "license": null, "readme": "# OP Analytics\nOnchain Data, Utilities, References, and other Analytics on Optimism. Join the conversation with other numba nerds in the #analytics channel in the Optimism Discord.\n\n## Table of Contents\n* [I'm looking for Data About](#im-looking-for-data-about)\n* [Select Optimism Data Abstractions](#select-optimism-data-abstractions)\n* [Contributors](#contributors)\n\n---\n\n## I'm Looking for Data About:\nA select list of Optimism data dashboards:\n\n### Optimism Network Activity\n- [OP Stack Chains - L1 Mainnet Activity & Fees Paid, L2 OP Chain Activity](https://dune.com/oplabspbc/op-stack-chains-l1-activity)\n- [OP Mainnet Protocol Metrics (i.e. transactions, fees, onchain value)](https://dune.com/optimismfnd/Optimism)\n- [Active Developer Metrics](https://dune.com/oplabspbc/developer-metrics-sploring)\n- [Popular Apps on OP Mainnet and Project Usage Trends](https://dune.com/optimismfnd/Optimism-Project-Usage-Trends)\n\n### Token House & Citizen's House Governance\n- [OP Token House Delegates](https://dune.com/optimismfnd/optimism-op-token-house)\n- [Governance & Voting (by Flipside Crypto)](https://fscrypto.co/op-governance)\n- [AttestationStation Usage](https://app.flipsidecrypto.com/dashboard/optimism-attestation-station-data-station-WAT27_)\n- [AttestationStation Key and Creator Distributions](https://dune.com/oplabspbc/optimism-attestationstation)\n\n### OP Token Distributions & Growth Programs Tracking\n- [Incentive Program Onchain Usage Summary Dashboard](https://dune.com/oplabspbc/optimism-incentive-program-usage-summary)\n- [Time-Series of TVL Flows by Program](https://static.optimism.io/op-analytics/op_rewards_tracking/img_outputs/overall/cumul_ndf_last_price.html) (Sourced from DefiLlama and TheGraph API)\n - [Program-Specific TVL Flows Charts](https://github.com/ethereum-optimism/op-analytics/tree/main/op_rewards_tracking/img_outputs/app/last_price/svg)\n\n*See Distributions mapping resources in [Select Optimism Data Abstractions](#select-optimism-data-abstractions)*\n\n### DeFi\n- [Perpetuals Market (by rplust)](https://dune.com/rplust/Perpetuals-Trading-on-Optimism)\n- [Total Value Locked in DeFi (by Defillama)](https://defillama.com/chain/Optimism)\n- [App Fees & Revenue (by Defillama)](https://defillama.com/fees/chains/optimism)\n- [DEX Trade Volume (by Defillama)](https://defillama.com/dexs/chains/optimism)\n- TVL Flows Between Apps and Chains: [Last 7 Days](https://static.optimism.io/op-analytics/value_locked_flows/img_outputs/html/net_app_flows_7d.html), [30 Days](https://static.optimism.io/op-analytics/value_locked_flows/img_outputs/html/net_app_flows_30d.html), [90 Days](https://static.optimism.io/op-analytics/value_locked_flows/img_outputs/html/net_app_flows_90d.html), [180 Days](https://static.optimism.io/op-analytics/value_locked_flows/img_outputs/html/net_app_flows_180d.html), [365 Days](https://static.optimism.io/op-analytics/value_locked_flows/img_outputs/html/net_app_flows_365d.html) (From Defillama API)\n\n### Consumer\n- [NFT Marketplaces and Collection Volume](https://dune.com/oplabspbc/optimism-nft-secondary-marketplaces)\n- [L1<>L2 NFT Bridge](https://dune.com/chuxin/optimism-nft-bridge?L1+NFT+Contract+Address_t4e85b=0x5180db8f5c931aae63c74266b211f580155ecac8)\n- [App Growth on Optimism After Quests](https://dune.com/oplabspbc/optimism-quests-project-usage-growth)\n- [CEX & On/Off-Ramp Usage](https://dune.com/oplabspbc/optimism-onoff-ramp-usage)\n\n### Protocol Economics\n- [L2 Transaction Fees, L1 Security Costs, Sequencer Fees](https://dune.com/optimismfnd/optimism-l1-batch-submission-fees-security-costs)\n- [Protocol Revenue (by TokenTerminal)](https://tokenterminal.com/terminal/projects/optimism/revenue-share)\n\n### Transaction Costs\n- [Transaction Fee Savings Calculator](https://dune.com/optimismfnd/How-Much-Could-You-Save-on-Optimism-Fee-Savings-Calculator)\n\n\n## Select Optimism Data Abstractions\n**[Dune Spellbook](https://github.com/duneanalytics/spellbook/tree/main/models)**: *Tables can be used in [Dune Analytics](https://dune.com/browse/dashboards)*\n- [`contracts_optimism.contract_mapping`](https://github.com/duneanalytics/spellbook/tree/main/models/contracts/optimism): Near exhaustive mappings of contracts to project names on Optimism - uses decoded contracts in Dune (`optimism.contracts`) and known deployer addresses to map contracts.\n- [`op_token_distributions_optimism.transfer_mapping`](https://github.com/duneanalytics/spellbook/tree/main/models/op/token_distributions/optimism): Mappings of token distributions from the OP Foundation & by Grant/Growth Experiment recipients. You can use this table to count how much OP has been deployed, by whom, and to where. *Note: These are \"best guess\" mappings* (contribute address mappings in the [Dune Spellbook repo](https://github.com/duneanalytics/spellbook/tree/main/models/op/token_distributions/optimism)).\n- [`dex.trades`](https://github.com/duneanalytics/spellbook/tree/main/models/dex): Aggregation of swaps across many decentralized exchanges\n- [`nft.trades`](https://github.com/duneanalytics/spellbook/tree/main/models/nft): Aggregation of swaps across many NFT marketplaces. Also see [`nft.wash_trades`](https://github.com/duneanalytics/spellbook/blob/main/models/nft/optimism/nft_optimism_wash_trades.sql) by hildobby for filtering out likely wash trades.\n- [`perpetual.trades`](https://github.com/duneanalytics/spellbook/tree/main/models/perpetual): Aggregation of swaps across many perpetuals exchanges (by rplust)\n\n**[Flipside Crypto - Optimism Models > Gold-Level Tables](https://github.com/FlipsideCrypto/optimism-models/tree/main/models/gold)**: *Tables can be used in [Flipside](https://flipsidecrypto.xyz/)*\n- [`optimism.core.ez_dex_swaps`](https://github.com/FlipsideCrypto/optimism-models/tree/main/models/gold/dex): Aggregation of swaps across many decentralized exchanges\n- [`optimism.core.ez_nft_sales`](https://github.com/FlipsideCrypto/optimism-models/blob/main/models/gold/core__ez_nft_sales.sql): Aggregation of swaps across many NFT marketplaces\n- [`optimism.core.fact_delegations`](https://github.com/FlipsideCrypto/optimism-models/blob/main/models/gold/core__fact_delegations.sql): Aggregation of OP governance delegation events.\n\n## Contributors\n### Configs\nFor scripts which use APIs from providers with API keys, add the lines like below in a .env file (Replace with your API key - remember to add to gitignore):\n```\nDUNE_API_KEY = 'Your API Key'\nFLIPSIDE_SHROOMDK_KEY = 'Your API Key'\n```\n\n### Installation\n```\npython -m pip install pipenv\npipenv install\n```\nSee `Pipfile` for all the requirements.\n\n### Common Requirements\nCommon packages used for python scripts include\n- [pandas](https://github.com/pandas-dev/pandas)\n- [requests](https://github.com/psf/requests)\n- [aiohttp-retry](https://github.com/inyutin/aiohttp_retry)\n- [dune-client](https://github.com/cowprotocol/dune-client)\n- [subgrounds](https://github.com/0xPlaygrounds/subgrounds)\n- [web3.py](https://github.com/ethereum/web3.py)\n- [ethereum-etl](https://github.com/blockchain-etl/ethereum-etl)\n\nIn this repository, we use `pre-commit` to ensure consistency of formatting. To install for Mac, run\n```\nbrew install pre-commit\n```\nOnce installed, in the command line of the repository, run\n```\npre-commit install\n```\nThis will install `pre-commit` to the Git hook, so that `pre-commit` will run and fix files covered in its config before committing.\n", "release_dates": []}, {"name": "op-geth", "description": null, "language": "Go", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "## Go Ethereum\n\nOfficial Golang execution layer implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.com/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.com/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\nAutomated builds are available for stable releases and the unstable master branch. Binary\narchives are published at https://geth.ethereum.org/downloads/.\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the [Installation Instructions](https://geth.ethereum.org/docs/getting-started/installing-geth).\n\nBuilding `geth` requires both a Go (version 1.19 or later) and a C compiler. You can install\nthem using your favourite package manager. Once the dependencies are installed, run\n\n```shell\nmake geth\n```\n\nor, to build the full suite of utilities:\n\n```shell\nmake all\n```\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd`\ndirectory.\n\n|  Command   | Description|\n| :--------: ||\n| **`geth`** | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI page](https://geth.ethereum.org/docs/fundamentals/command-line-options) for command line options. |\n|   `clef`   | Stand-alone signing tool, which can be used as a backend signer for `geth`.                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|  `devp2p`  | Utilities to interact with nodes on the networking layer, without running a full blockchain.                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n|  `abigen`  | Source code generator to convert Ethereum contract definitions into easy-to-use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://docs.soliditylang.org/en/develop/abi-spec.html) with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings) page for details.                                  |\n| `bootnode` | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.                                                                                                                                                                                                                                               |\n|   `evm`    | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug run`).                                                                                                                                                                                                                                               |\n| `rlpdump`  | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`).                                                                                                                                                                                |\n\n## Running `geth`\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://geth.ethereum.org/docs/fundamentals/command-line-options)),\nbut we've enumerated a few common parameter combos to get you up to speed quickly\non how you can run your own `geth` instance.\n\n### Hardware Requirements\n\nMinimum:\n\n* CPU with 2+ cores\n* 4GB RAM\n* 1TB free storage space to sync the Mainnet\n* 8 MBit/sec download Internet service\n\nRecommended:\n\n* Fast CPU with 4+ cores\n* 16GB+ RAM\n* High-performance SSD with at least 1TB of free space\n* 25+ MBit/sec download Internet service\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum\nnetwork: create accounts; transfer funds; deploy and interact with contracts. For this\nparticular use case, the user doesn't care about years-old historical data, so we can\nsync quickly to the current state of the network. To do so:\n\n```shell\n$ geth console\n```\n\nThis command will:\n * Start `geth` in snap sync mode (default, can be changed with the `--syncmode` flag),\n   causing it to download more data in exchange for avoiding processing the entire history\n   of the Ethereum network, which is very CPU intensive.\n * Start the built-in interactive [JavaScript console](https://geth.ethereum.org/docs/interacting-with-geth/javascript-console),\n   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md) \n   (note: the `web3` version bundled within `geth` is very old, and not up to date with official docs),\n   as well as `geth`'s own [management APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc).\n   This tool is optional and if you leave it out you can always attach it to an already running\n   `geth` instance with `geth attach`.\n\n### A Full node on the G\u00f6rli test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum\ncontracts, you almost certainly would like to do that without any real money involved until\nyou get the hang of the entire system. In other words, instead of attaching to the main\nnetwork, you want to join the **test** network with your node, which is fully equivalent to\nthe main network, but with play-Ether only.\n\n```shell\n$ geth --goerli console\n```\n\nThe `console` subcommand has the same meaning as above and is equally\nuseful on the testnet too.\n\nSpecifying the `--goerli` flag, however, will reconfigure your `geth` instance a bit:\n\n * Instead of connecting to the main Ethereum network, the client will connect to the G\u00f6rli\n   test network, which uses different P2P bootnodes, different network IDs and genesis\n   states.\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), `geth`\n   will nest itself one level deeper into a `goerli` subfolder (`~/.ethereum/goerli` on\n   Linux). Note, on OSX and Linux this also means that attaching to a running testnet node\n   requires the use of a custom endpoint since `geth attach` will try to attach to a\n   production node endpoint by default, e.g.,\n   `geth attach <datadir>/goerli/geth.ipc`. Windows users are not affected by\n   this.\n\n*Note: Although some internal protective measures prevent transactions from\ncrossing over between the main network and test network, you should always\nuse separate accounts for play and real money. Unless you manually move\naccounts, `geth` will by default correctly separate the two networks and will not make any\naccounts available between them.*\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a\nconfiguration file via:\n\n```shell\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea of how the file should look like you can use the `dumpconfig` subcommand to\nexport your existing configuration:\n\n```shell\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with `geth` v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using\nDocker:\n\n```shell\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start `geth` in snap-sync mode with a DB memory allowance of 1GB, as the\nabove command does.  It will also create a persistent volume in your home directory for\nsaving your blockchain as well as map the default ports. There is also an `alpine` tag\navailable for a slim version of the image.\n\nDo not forget `--http.addr 0.0.0.0`, if you want to access RPC from other containers\nand/or hosts. By default, `geth` binds to the local interface and RPC endpoints are not\naccessible from the outside.\n\n### Programmatically interfacing `geth` nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with `geth` and the\nEthereum network via your own programs and not manually through the console. To aid\nthis, `geth` has built-in support for a JSON-RPC based APIs ([standard APIs](https://ethereum.github.io/execution-apis/api-documentation/)\nand [`geth` specific APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc)).\nThese can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based\nplatforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by `geth`,\nwhereas the HTTP and WS interfaces need to manually be enabled and only expose a\nsubset of APIs due to security reasons. These can be turned on/off and configured as\nyou'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--http` Enable the HTTP-RPC server\n  * `--http.addr` HTTP-RPC server listening interface (default: `localhost`)\n  * `--http.port` HTTP-RPC server listening port (default: `8545`)\n  * `--http.api` API's offered over the HTTP-RPC interface (default: `eth,net,web3`)\n  * `--http.corsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--ws.addr` WS-RPC server listening interface (default: `localhost`)\n  * `--ws.port` WS-RPC server listening port (default: `8546`)\n  * `--ws.api` API's offered over the WS-RPC interface (default: `eth,net,web3`)\n  * `--ws.origins` Origins from which to accept WebSocket requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: `admin,debug,eth,miner,net,personal,txpool,web3`)\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to\nconnect via HTTP, WS or IPC to a `geth` node configured with the above flags and you'll\nneed to speak [JSON-RPC](https://www.jsonrpc.org/specification) on all transports. You\ncan reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based\ntransport before doing so! Hackers on the internet are actively trying to subvert\nEthereum nodes with exposed APIs! Further, all browser tabs can access locally\nrunning web servers, so malicious web pages could try to subvert locally available\nAPIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for\ngranted in the official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be\naware of and agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n    \"chainId\": <arbitrary positive integer>,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0\n  },\n  \"alloc\": {},\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\": \"0x20000\",\n  \"extraData\": \"\",\n  \"gasLimit\": \"0x2fefd8\",\n  \"nonce\": \"0x0000000000000042\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\": \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing\nthe `nonce` to some random value so you prevent unknown remote nodes from being able\nto connect to you. If you'd like to pre-fund some accounts for easier testing, create\nthe accounts and populate the `alloc` field with their addresses.\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\n    \"balance\": \"111111111\"\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    \"balance\": \"222222222\"\n  }\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every**\n`geth` node with it prior to starting it up to ensure all blockchain parameters are correctly\nset:\n\n```shell\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to\nstart a bootstrap node that others can use to find each other in your network and/or over\nthe internet. The clean way is to configure and run a dedicated bootnode:\n\n```shell\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://ethereum.org/en/developers/docs/networking-layer/network-addresses/#enode)\nthat other nodes can use to connect to it and exchange peer information. Make sure to\nreplace the displayed IP address information (most probably `[::]`) with your externally\naccessible IP to get the actual `enode` URL.\n\n*Note: You could also use a full-fledged `geth` node as a bootnode, but it's the less\nrecommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try\n`telnet <ip> <port>` to ensure it's indeed reachable), start every subsequent `geth`\nnode pointed to the bootnode for peer discovery via the `--bootnodes` flag. It will\nprobably also be desirable to keep the data directory of your private network separated, so\ndo also specify a custom `--datadir` flag.\n\n```shell\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll\nalso need to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\n\nIn a private network setting a single CPU miner instance is more than enough for\npractical purposes as it can produce a stable stream of blocks at the correct intervals\nwithout needing heavy resources (consider running on a single thread, no need for multiple\nones either). To start a `geth` instance for mining, run it with all your usual flags, extended\nby:\n\n```shell\n$ geth <usual-flags> --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all\nproceedings to the account specified by `--miner.etherbase`. You can further tune the mining\nby changing the default gas limit blocks converge to (`--miner.targetgaslimit`) and the price\ntransactions are accepted at (`--miner.gasprice`).\n\n## Contribution\n\nThank you for considering helping out with the source code! We welcome contributions\nfrom anyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit\nmore complex changes though, please check up with the core devs first on [our Discord Server](https://discord.gg/invite/nthXNEv)\nto ensure those changes are in line with the general philosophy of the project and/or get\nsome early feedback which can make both your efforts much lighter as well as our review\nand merge procedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting)\n   guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary)\n   guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://geth.ethereum.org/docs/developers/geth-developer/dev-guide)\nfor more details on configuring your environment, managing project dependencies, and\ntesting procedures.\n\n### Contributing to geth.ethereum.org\n\nFor contributions to the [go-ethereum website](https://geth.ethereum.org), please checkout and raise pull requests against the `website` branch.\nFor more detailed instructions please see the `website` branch [README](https://github.com/ethereum/go-ethereum/tree/website#readme) or the \n[contributing](https://geth.ethereum.org/docs/developers/geth-developer/contributing) page of the website.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html),\nalso included in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) are licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also\nincluded in our repository in the `COPYING` file.\n", "release_dates": ["2024-02-26T13:43:00Z", "2024-02-16T21:46:46Z", "2024-02-09T21:35:40Z", "2024-02-01T11:33:33Z", "2024-01-22T20:00:41Z", "2024-01-12T01:33:57Z", "2023-12-11T23:08:31Z", "2023-11-07T00:16:26Z", "2023-10-31T21:29:38Z", "2023-10-31T11:33:57Z", "2023-10-17T23:38:58Z", "2023-09-06T10:56:47Z", "2023-09-06T10:54:33Z", "2023-08-23T18:57:35Z", "2023-08-22T19:53:22Z", "2023-06-29T20:53:27Z", "2023-06-08T22:05:44Z", "2023-05-31T18:58:07Z", "2023-04-24T18:28:16Z", "2023-04-08T19:24:59Z", "2023-03-08T20:28:31Z"]}, {"name": "op-viem", "description": "Viem extensions for the Op Stack", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<br/>\n\n<p align=\"center\">\n  <a href=\"https://op-viem-site.vercel.app/\">\n  <h1>OP Viem</h1>\n  </a>\n</p>\n\n<p align=\"center\">\n  Viem Extension for OP Stack Chains\n<p>\n\n<br>\n\n## Features\n\n- Simplifies cross L1 & L2 interactions\n- Seamless extension to [Viem](https://github.com/wagmi-dev/viem)\n- TypeScript ready\n- Test suite running against [forked](https://ethereum.org/en/glossary/#fork) Ethereum network\n\n## Overview\n\n```ts\n// import modules\nimport { createWalletClient, createPublicClient, custom, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { mainnet, base } from 'viem/chains'\nimport { walletL1OpStackActions, publicL1OpStackActions, publicL2OpStackActions } from 'op-viem'\n\n// create clients\nexport const opStackL1WalletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum)\n}).extend(walletL1OpStackActions)\n\nexport const opStackL1PublicClient = createPublicClient({\n  chain: mainnet,\n  transport: http()\n}).extend(publicL1OpStackActions)\n\nexport const opStackL2PublicClient = createPublicClient({\n  chain: base,\n  transport: http()\n}).extend(publicL2OpStackActions)\n\n// perform an action\nopStackL1PublicClient.getOutputForL2Block(blockNumber: 2725977n, l2Chain: base)\n```\n\n## Community\n\nCheck out the following places for more viem-related content:\n\n- Follow [@wilsoncusack](https://twitter.com/wilsoncusack) Twitter for project updates\n\n## Contributing\n\nIf you're interested in contributing, please read the [contributing docs](CONTRIBUTING.md) **before submitting a pull request**.\n\n## Authors\n\n- [@wilsoncusack](https://github.com/wilsoncusack) (wilsoncusack.eth [Twitter](https://twitter.com/wilsoncusack))\n- [@zencephalon](https://github.com/zencephalon) (zencephalon.eth, [Twitter](https://twitter.com/zencephalon))\n- [@roninjin10](https://github.com/roninjin10) (fucory.eth, [Twitter](https://twitter.com/FUCORY))\n\n## License\n\n[MIT](LICENSE.md) License\n", "release_dates": []}, {"name": "OPerating-manual", "description": "OPerating Manual of the Optimism Collective. https://optimism.io/vision", "language": null, "license": null, "readme": "# OPerating Manual of the Optimism Collective\n\nThis repository contains the OPerating Manual of the [Optimism Collective](http://optimism.io/vision)--our large-scale experiment in digital democratic governance.\n\nThe OPerating Manual describes the current set of rules for the Optimism Collective's governance, as stewarded by the Optimism Foundation and empowered by the [Working Constitution of the Optimism Collective](https://gov.optimism.io/t/working-constitution-of-the-optimism-collective/55).\n\nThe OPerating Manual is a living document maintained by the Optimism Foundation. We [encourage frequent iteration and feedback](https://optimism.mirror.xyz/r888e4B5iiNQi-3_mO26ixgv-plQ099XWgqEOv9iWKA), and the manual is published here on github to encourage transparency and community feedback.", "release_dates": ["2022-09-29T19:34:01Z", "2022-08-25T18:49:32Z", "2022-07-06T17:02:52Z", "2022-06-03T20:47:02Z", "2022-05-31T15:50:46Z", "2022-05-30T19:10:59Z"]}, {"name": "optimism", "description": "Optimism is Ethereum, scaled.", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=600></a>\n  <br />\n  <h3><a href=\"https://optimism.io\">Optimism</a> is Ethereum, scaled.</h3>\n  <br />\n</div>\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [What is Optimism?](#what-is-optimism)\n- [Documentation](#documentation)\n- [Specification](#specification)\n- [Community](#community)\n- [Contributing](#contributing)\n- [Security Policy and Vulnerability Reporting](#security-policy-and-vulnerability-reporting)\n- [Directory Structure](#directory-structure)\n- [Development and Release Process](#development-and-release-process)\n  - [Overview](#overview)\n  - [Production Releases](#production-releases)\n  - [Development branch](#development-branch)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## What is Optimism?\n\n[Optimism](https://www.optimism.io/) is a project dedicated to scaling Ethereum's technology and expanding its ability to coordinate people from across the world to build effective decentralized economies and governance systems. The [Optimism Collective](https://app.optimism.io/announcement) builds open-source software for running L2 blockchains and aims to address key governance and economic challenges in the wider cryptocurrency ecosystem. Optimism operates on the principle of **impact=profit**, the idea that individuals who positively impact the Collective should be proportionally rewarded with profit. **Change the incentives and you change the world.**\n\nIn this repository, you'll find numerous core components of the OP Stack, the decentralized software stack maintained by the Optimism Collective that powers Optimism and forms the backbone of blockchains like [OP Mainnet](https://explorer.optimism.io/) and [Base](https://base.org). Designed to be \"aggressively open source,\" the OP Stack encourages you to explore, modify, extend, and test the code as needed. Although not all elements of the OP Stack are contained here, many of its essential components can be found within this repository. By collaborating on free, open software and shared standards, the Optimism Collective aims to prevent siloed software development and rapidly accelerate the development of the Ethereum ecosystem. Come contribute, build the future, and redefine power, together.\n\n## Documentation\n\n- If you want to build on top of OP Mainnet, refer to the [Optimism Documentation](https://docs.optimism.io)\n- If you want to build your own OP Stack based blockchain, refer to the [OP Stack Guide](https://docs.optimism.io/stack/getting-started), and make sure to understand this repository's [Development and Release Process](#development-and-release-process)\n\n## Specification\n\nIf you're interested in the technical details of how Optimism works, refer to the [Optimism Protocol Specification](https://github.com/ethereum-optimism/specs).\n\n## Community\n\nGeneral discussion happens most frequently on the [Optimism discord](https://discord.gg/optimism).\nGovernance discussion can also be found on the [Optimism Governance Forum](https://gov.optimism.io/).\n\n## Contributing\n\nRead through [CONTRIBUTING.md](./CONTRIBUTING.md) for a general overview of the contributing process for this repository.\nUse the [Developer Quick Start](./CONTRIBUTING.md#development-quick-start) to get your development environment set up to start working on the Optimism Monorepo.\nThen check out the list of [Good First Issues](https://github.com/ethereum-optimism/optimism/issues?q=is:open+is:issue+label:D-good-first-issue) to find something fun to work on!\nTypo fixes are welcome; however, please create a single commit with all of the typo fixes & batch as many fixes together in a PR as possible. Spammy PRs will be closed.\n\n## Security Policy and Vulnerability Reporting\n\nPlease refer to the canonical [Security Policy](https://github.com/ethereum-optimism/.github/blob/master/SECURITY.md) document for detailed information about how to report vulnerabilities in this codebase.\nBounty hunters are encouraged to check out [the Optimism Immunefi bug bounty program](https://immunefi.com/bounty/optimism/).\nThe Optimism Immunefi program offers up to $2,000,042 for in-scope critical vulnerabilities.\n\n## Directory Structure\n\n<pre>\n\u251c\u2500\u2500 <a href=\"./docs\">docs</a>: A collection of documents including audits and post-mortems\n\u251c\u2500\u2500 <a href=\"./op-batcher\">op-batcher</a>: L2-Batch Submitter, submits bundles of batches to L1\n\u251c\u2500\u2500 <a href=\"./op-bindings\">op-bindings</a>: Go bindings for Bedrock smart contracts.\n\u251c\u2500\u2500 <a href=\"./op-bootnode\">op-bootnode</a>: Standalone op-node discovery bootnode\n\u251c\u2500\u2500 <a href=\"./op-chain-ops\">op-chain-ops</a>: State surgery utilities\n\u251c\u2500\u2500 <a href=\"./op-challenger\">op-challenger</a>: Dispute game challenge agent\n\u251c\u2500\u2500 <a href=\"./op-e2e\">op-e2e</a>: End-to-End testing of all bedrock components in Go\n\u251c\u2500\u2500 <a href=\"./op-heartbeat\">op-heartbeat</a>: Heartbeat monitor service\n\u251c\u2500\u2500 <a href=\"./op-node\">op-node</a>: rollup consensus-layer client\n\u251c\u2500\u2500 <a href=\"./op-preimage\">op-preimage</a>: Go bindings for Preimage Oracle\n\u251c\u2500\u2500 <a href=\"./op-program\">op-program</a>: Fault proof program\n\u251c\u2500\u2500 <a href=\"./op-proposer\">op-proposer</a>: L2-Output Submitter, submits proposals to L1\n\u251c\u2500\u2500 <a href=\"./op-service\">op-service</a>: Common codebase utilities\n\u251c\u2500\u2500 <a href=\"./op-ufm\">op-ufm</a>: Simulations for monitoring end-to-end transaction latency\n\u251c\u2500\u2500 <a href=\"./op-wheel\">op-wheel</a>: Database utilities\n\u251c\u2500\u2500 <a href=\"./ops\">ops</a>: Various operational packages\n\u251c\u2500\u2500 <a href=\"./ops-bedrock\">ops-bedrock</a>: Bedrock devnet work\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/chain-mon\">chain-mon</a>: Chain monitoring services\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/common-ts\">common-ts</a>: Common tools for building apps in TypeScript\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-bedrock\">contracts-bedrock</a>: Bedrock smart contracts\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-ts\">contracts-ts</a>: ABI and Address constants\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/core-utils\">core-utils</a>: Low-level utilities that make building Optimism easier\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/fee-estimation\">fee-estimation</a>: Tools for estimating gas on OP chains\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/sdk\">sdk</a>: provides a set of tools for interacting with Optimism\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/web3js-plugin\">web3js-plugin</a>: Adds functions to estimate L1 and L2 gas\n\u251c\u2500\u2500 <a href=\"./proxyd\">proxyd</a>: Configurable RPC request router and proxy\n\u251c\u2500\u2500 <a href=\"./specs\">specs</a>: Specs of the rollup starting at the Bedrock upgrade\n\u2514\u2500\u2500 <a href=\"./ufm-test-services\">ufm-test-services</a>: Runs a set of tasks to generate metrics\n</pre>\n\n## Development and Release Process\n\n### Overview\n\nPlease read this section if you're planning to fork this repository, or make frequent PRs into this repository.\n\n### Production Releases\n\nProduction releases are always tags, versioned as `<component-name>/v<semver>`.\nFor example, an `op-node` release might be versioned as `op-node/v1.1.2`, and  smart contract releases might be versioned as `op-contracts/v1.0.0`.\nRelease candidates are versioned in the format `op-node/v1.1.2-rc.1`.\nWe always start with `rc.1` rather than `rc`.\n\nFor contract releases, refer to the GitHub release notes for a given release, which will list the specific contracts being released\u2014not all contracts are considered production ready within a release, and many are under active development.\n\nTags of the form `v<semver>`, such as `v1.1.4`, indicate releases of all Go code only, and **DO NOT** include smart contracts.\nThis naming scheme is required by Golang.\nIn the above list, this means these `v<semver` releases contain all `op-*` components, and exclude all `contracts-*` components.\n\n`op-geth` embeds upstream geth\u2019s version inside it\u2019s own version as follows: `vMAJOR.GETH_MAJOR GETH_MINOR GETH_PATCH.PATCH`.\nBasically, geth\u2019s version is our minor version.\nFor example if geth is at `v1.12.0`, the corresponding op-geth version would be `v1.101200.0`.\nNote that we pad out to three characters for the geth minor version and two characters for the geth patch version.\nSince we cannot left-pad with zeroes, the geth major version is not padded.\n\nSee the [Node Software Releases](https://docs.optimism.io/builders/node-operators/releases) page of the documentation for more information about releases for the latest node components.\nThe full set of components that have releases are:\n\n- `chain-mon`\n- `ci-builder`\n- `ci-builder`\n- `indexer`\n- `op-batcher`\n- `op-contracts`\n- `op-challenger`\n- `op-heartbeat`\n- `op-node`\n- `op-proposer`\n- `op-ufm`\n- `proxyd`\n- `ufm-metamask`\n\nAll other components and packages should be considered development components only and do not have releases.\n\n### Development branch\n\nThe primary development branch is [`develop`](https://github.com/ethereum-optimism/optimism/tree/develop/).\n`develop` contains the most up-to-date software that remains backwards compatible with the latest experimental [network deployments](https://community.optimism.io/docs/useful-tools/networks/).\nIf you're making a backwards compatible change, please direct your pull request towards `develop`.\n\n**Changes to contracts within `packages/contracts-bedrock/src` are usually NOT considered backwards compatible.**\nSome exceptions to this rule exist for cases in which we absolutely must deploy some new contract after a tag has already been fully deployed.\nIf you're changing or adding a contract and you're unsure about which branch to make a PR into, default to using a feature branch.\nFeature branches are typically used when there are conflicts between 2 projects touching the same code, to avoid conflicts from merging both into `develop`.\n\n## License\n\nAll other files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/optimism/blob/master/LICENSE) unless stated otherwise.\n", "release_dates": ["2024-02-26T13:39:04Z", "2024-02-16T21:41:29Z", "2024-02-09T21:28:42Z", "2024-02-05T19:47:49Z", "2024-02-01T12:05:32Z", "2024-02-23T11:21:25Z", "2024-02-15T12:08:35Z", "2024-01-26T10:03:11Z", "2024-01-12T01:58:36Z", "2024-01-12T02:06:01Z", "2023-12-11T23:22:03Z", "2023-12-11T23:13:29Z", "2023-11-07T02:01:09Z", "2023-10-31T21:42:34Z", "2023-11-17T21:08:41Z", "2023-10-17T23:34:52Z", "2024-02-22T21:30:22Z", "2023-10-12T21:50:05Z", "2023-09-06T20:18:00Z", "2023-09-06T11:05:06Z", "2023-08-16T22:38:49Z", "2023-08-14T23:15:39Z", "2023-06-28T03:51:44Z", "2023-06-09T00:38:32Z", "2023-06-06T17:40:13Z", "2024-02-22T21:23:40Z", "2023-05-31T19:05:51Z", "2023-05-22T23:17:47Z", "2023-05-15T19:46:22Z", "2023-05-08T23:33:07Z"]}, {"name": "optimism-audit-fixes", "description": "Fork for storing changes on frozen code. Process described in link below.", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <a href=\"https://community.optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/ad481978ceac19f5c1db91ca4586bf2ab238f46b/assets/svg/Profile-Logo.svg\" width=280></a>\n  <br />\n  <h1> The Optimism Monorepo</h1>\n</div>\n<p align=\"center\">\n  <a href=\"https://github.com/ethereum-optimism/optimism/actions/workflows/ts-packages.yml?query=branch%3Amaster\"><img src=\"https://github.com/ethereum-optimism/optimism/workflows/typescript%20/%20contracts/badge.svg\" /></a>\n  <a href=\"https://github.com/ethereum-optimism/optimism/actions/workflows/integration.yml?query=branch%3Amaster\"><img src=\"https://github.com/ethereum-optimism/optimism/workflows/integration/badge.svg\" /></a>\n  <a href=\"https://github.com/ethereum-optimism/optimism/actions/workflows/geth.yml?query=branch%3Amaster\"><img src=\"https://github.com/ethereum-optimism/optimism/workflows/geth%20unit%20tests/badge.svg\" /></a>\n</p>\n\n## TL;DR\n\nThis is where [Optimism](https://optimism.io) gets built.\n\n## Documentation\n\nExtensive documentation is available [here](http://community.optimism.io/).\n\n## Community\n\nCome hang on our very active [discord](https://discord.optimism.io) \ud83d\udd34\u2728\n\n## Contributing\n\nRead through [CONTRIBUTING.md](./CONTRIBUTING.md) for a general overview of our contribution process.\nThen check out our list of [good first issues](https://github.com/ethereum-optimism/optimism/contribute) to find something fun to work on!\n\n## Directory Structure\n\n<pre>\nroot\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/common-ts\">common-ts</a>: Common tools for building apps in TypeScript\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts\">contracts</a>: L1 and L2 smart contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-periphery\">contracts-periphery</a>: Peripheral contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/core-utils\">core-utils</a>: Low-level utilities that make building Optimism easier\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/data-transport-layer\">data-transport-layer</a>: Service for indexing Optimism-related L1 data\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/drippie-mon\">drippie-mon</a>: Service for monitoring Drippie instances\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/fault-detector\">fault-detector</a>: Service for detecting Sequencer faults\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/integration-tests-bedrock\">integration-tests-bedrock</a> (BEDROCK upgrade): Bedrock integration tests.\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/message-relayer\">message-relayer</a>: Tool for automatically relaying L1<>L2 messages in development\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/replica-healthcheck\">replica-healthcheck</a>: Service for monitoring the health of a replica node\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/sdk\">sdk</a>: provides a set of tools for interacting with Optimism\n\n~~ Production ~~\n\u251c\u2500\u2500 <a href=\"./batch-submitter\">batch-submitter</a>: Service for submitting batches of transactions and results to L1\n\u251c\u2500\u2500 <a href=\"./bss-core\">bss-core</a>: Core batch-submitter logic and utilities\n\u251c\u2500\u2500 <a href=\"./gas-oracle\">gas-oracle</a>: Service for updating L1 gas prices on L2\n\u251c\u2500\u2500 <a href=\"./indexer\">indexer</a>: indexes and syncs transactions\n\u251c\u2500\u2500 <a href=\"./infra/op-replica\">infra/op-replica</a>: Deployment examples and resources for running an Optimism replica\n\u251c\u2500\u2500 <a href=\"./integration-tests\">integration-tests</a>: Various integration tests for the Optimism network\n\u251c\u2500\u2500 <a href=\"./l2geth\">l2geth</a>: Optimism client software, a fork of <a href=\"https://github.com/ethereum/go-ethereum/tree/v1.9.10\">geth v1.9.10</a>  (deprecated for BEDROCK upgrade)\n\u251c\u2500\u2500 <a href=\"./l2geth-exporter\">l2geth-exporter</a>: A prometheus exporter to collect/serve metrics from an L2 geth node\n\u251c\u2500\u2500 <a href=\"./op-exporter\">op-exporter</a>: A prometheus exporter to collect/serve metrics from an Optimism node\n\u251c\u2500\u2500 <a href=\"./proxyd\">proxyd</a>: Configurable RPC request router and proxy\n\u251c\u2500\u2500 <a href=\"./technical-documents\">technical-documents</a>: audits and post-mortem documents\n\u251c\u2500\u2500 <a href=\"./teleportr\">teleportr</a>: Bridge for teleporting ETH between L1 and L2 at low cost\n\n~~ BEDROCK upgrade - Not production-ready yet, part of next major upgrade ~~\n\u251c\u2500\u2500 <a href=\"./contracts-bedrock\">contracts-bedrock</a>: Bedrock smart contracts. To be merged with ./packages/contracts.\n\u251c\u2500\u2500 <a href=\"./op-bindings\">op-bindings</a>: Go bindings for Bedrock smart contracts.\n\u251c\u2500\u2500 <a href=\"./op-batcher\">op-batcher</a>: L2-Batch Submitter, submits bundles of batches to L1\n\u251c\u2500\u2500 <a href=\"./op-e2e\">op-e2e</a>: End-to-End testing of all bedrock components in Go\n\u251c\u2500\u2500 <a href=\"./op-node\">op-node</a>: rollup consensus-layer client.\n\u251c\u2500\u2500 <a href=\"./op-proposer\">op-proposer</a>: L2-Output Submitter, submits proposals to L1\n\u251c\u2500\u2500 <a href=\"./ops-bedrock\">ops-bedrock</a>: Bedrock devnet work\n\u2514\u2500\u2500 <a href=\"./specs\">specs</a>: Specs of the rollup starting at the Bedrock upgrade\n</pre>\n\n## Branching Model and Releases\n\n<!-- TODO: explain about changesets + how we do npm publishing + docker publishing -->\n\n### Active Branches\n\n| Branch          | Status                                                                           |\n| --------------- | -------------------------------------------------------------------------------- |\n| [master](https://github.com/ethereum-optimism/optimism/tree/master/)                   | Accepts PRs from `develop` when we intend to deploy to mainnet.                                      |\n| [develop](https://github.com/ethereum-optimism/optimism/tree/develop/)                 | Accepts PRs that are compatible with `master` OR from `release/X.X.X` branches.                    |\n| release/X.X.X                                                                          | Accepts PRs for all changes, particularly those not backwards compatible with `develop` and `master`. |\n\n### Overview\n\nWe generally follow [this Git branching model](https://nvie.com/posts/a-successful-git-branching-model/).\nPlease read the linked post if you're planning to make frequent PRs into this repository (e.g., people working at/with Optimism).\n\n### The `master` branch\n\nThe `master` branch contains the code for our latest \"stable\" releases.\nUpdates from `master` always come from the `develop` branch.\nWe only ever update the `master` branch when we intend to deploy code within the `develop` to the Optimism mainnet.\nOur update process takes the form of a PR merging the `develop` branch into the `master` branch.\n\n### The `develop` branch\n\nOur primary development branch is [`develop`](https://github.com/ethereum-optimism/optimism/tree/develop/).\n`develop` contains the most up-to-date software that remains backwards compatible with our latest experimental [network deployments](https://community.optimism.io/docs/useful-tools/networks/).\nIf you're making a backwards compatible change, please direct your pull request towards `develop`.\n\n**Changes to contracts within `packages/contracts/contracts` are usually NOT considered backwards compatible and SHOULD be made against a release candidate branch**.\nSome exceptions to this rule exist for cases in which we absolutely must deploy some new contract after a release candidate branch has already been fully deployed.\nIf you're changing or adding a contract and you're unsure about which branch to make a PR into, default to using the latest release candidate branch.\nSee below for info about release candidate branches.\n\n### Release new versions\n\nDevelopers can release new versions of the software by adding changesets to their pull requests using `yarn changeset`. Changesets will persist over time on the `develop` branch without triggering new version bumps to be proposed by the Changesets bot. Once changesets are merged into `master`, the bot will create a new pull request called \"Version Packages\" which bumps the versions of packages. The correct flow for triggering releases is to update the base branch of these pull requests onto `develop` and merge them, and then create a new pull request to merge `develop` into `master`. Then, the `release` workflow will trigger the actual publishing to `npm` and Docker hub.\n\nBe sure to not merge other pull requests into `develop` if partially through the release process. This can cause problems with Changesets doing releases and will require manual intervention to fix it.\n\n### Release candidate branches\n\nBranches marked `release/X.X.X` are **release candidate branches**.\nChanges that are not backwards compatible and all changes to contracts within `packages/contracts/contracts` MUST be directed towards a release candidate branch.\nRelease candidates are merged into `develop` and then into `master` once they've been fully deployed.\nWe may sometimes have more than one active `release/X.X.X` branch if we're in the middle of a deployment.\nSee table in the **Active Branches** section above to find the right branch to target.\n\n### Releasing new versions\n\nDevelopers can release new versions of the software by adding changesets to their pull requests using `yarn changeset`. Changesets will persist over time on the `develop` branch without triggering new version bumps to be proposed by the Changesets bot. Once changesets are merged into `master`, the bot will create a new pull request called \"Version Packages\" which bumps the versions of packages. The correct flow for triggering releases is to re-base these pull requests onto `develop` and merge them, and then create a new pull request to merge `develop` onto `master`. Then, the `release` workflow will trigger the actual publishing to `npm` and Docker hub.\n\n## License\n\nCode forked from [`go-ethereum`](https://github.com/ethereum/go-ethereum) under the name [`l2geth`](https://github.com/ethereum-optimism/optimism/tree/master/l2geth) is licensed under the [GNU GPLv3](https://gist.github.com/kn9ts/cbe95340d29fc1aaeaa5dd5c059d2e60) in accordance with the [original license](https://github.com/ethereum/go-ethereum/blob/master/COPYING).\n\nAll other files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/optimism/blob/master/LICENSE) unless stated otherwise.\n", "release_dates": []}, {"name": "optimism-faq-bot", "description": "Optimism FAQ bot for Discord. A fork of Rari-Capital's FAQ bot :0", "language": "Python", "license": null, "readme": "# Optimism FAQ bot\nAutomatically answers frequently asked questions on the Optimism Discord Server \n\n## Installation\nInstall requirements by running `pip install -r requirements.txt` \nCreate a `.env` file, and set `DISCORD_TOKEN` and `WIT_ACCESS_TOKEN` to the discord bot token and the Wit.ai server access token, respectively. \n\n## Run\nTo run, execute `bot.py` in the `bot` directory (`python bot/bot.py`)\n", "release_dates": []}, {"name": "optimism-integration", "description": "[Optimism] Service Integration & Rapid Development", "language": "Shell", "license": null, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Optimism Integration\n\nA single repository intended to provide the ability to run a local\nOptimistic Ethereum environment including both L1 & L2 chains. This\ncan be used to rapidly iterate over the many Optimism repositories and\nrun integration tests.\n\n## Requirements\n\n- [docker](https://docs.docker.com/get-docker/)\n  - At least version 19.03.12\n- [docker-compose](https://docs.docker.com/compose/install/)\n  - At least version 1.27.3\n- Recommended Docker memory allocation of >=8 GB.\n\n\n## Usage\nThis package can be used to run tests, or even just spin up an easy-to-edit\noptimism system.\n\n```bash\n# Git clone with submodules\n$ git clone git@github.com:ethereum-optimism/optimism-integration.git --recurse-submodules\n\n$ cd optimism-integration\n\n# The `docker` submodule is a one stop shop for building containers\n$ ./docker/build.sh\n\n# Run tests\n$ make test\n\n# Run published images of full system\n$ make up\n```\n\nSubmodules are updated automatically as commits land in `master` in the\nrespective repositories through a Github action.\n\nThe submodules can be updated with:\n\n```bash\n$ git submodule update\n```\n\n## Scripts\n\n### up.sh\n\nThere are two ways to run `up.sh`.\n\n#### Running with Published Docker Images\n\nThis is the recommended way to use this repository for building an application\non the Optimistic Ethereum protocol.\n\nDocker images are built and automatically published to [Dockerhub](https://hub.docker.com/u/ethereumoptimism).\nDocker will automaticaly use images found locally. To pull the latest images,\nuse the command:\n\n```bash\n$ docker-compose pull\n```\n\nTo start all of the services, run the command:\n\n```bash\n$ make up\n```\n\nParticular Docker images can be used by specifying an environment variable at\nruntime. `<service_name>_TAG` will be templated into the `docker-compose.yml`\nfiles at runtime.\n\nTo run the docker image `ethereumoptimism/go-ethereum:myfeature`, use the\ncommand:\n\n```\n$ GETH_L2_TAG=myfeature make up\n```\n\nThis is helpful when making changes to multiple repositories and testing the\nchanges across the whole system. See the [docker](https://github.com/ethereum-optimism/docker)\nrepository for instructions on building custom images locally.\n\n#### Running with Local Code\n\nThis is the recommended way to use this repository when developing the\nOptimistic Ethereum protocol itself.\n\nThe submodules can be mounted in at runtime so that any changes to the\nsubmodules can be observed in the context of the whole system.\nAny compiled code must be built inside of a Docker container so that\nit is compiled correctly. The Makefile is used for this\npurpose.\n\nTo build all local submodules, run the command:\n\n```bash\n$ make all\n```\n\nTo compile only a specific service, the `-s` flag can be used. The possible\nservices can be found in the `docker-compose.build.yml` file.\n\nTo build only `go-ethereum`, run the command:\n\n```bash\n$ make geth-l2\n```\n\nTo specify using the submodules with `up.sh`, use the `-l` flag:\n\n```bash\n$ make up-local\n```\n\n### Testing\n\nTo run all of the tests:\n\n```bash\n$ make test\n```\n\nThis script is used to run each of the `integration-tests` test suites\nagainst the whole system. Each package in the `integration-tests` repo\ngets its own fresh state, meaning that the tests cannot run in parallel\nunless each test suite has its own instances of each of the Optimistic\nEthereum services.\n\nTo run only a specific test suite:\n\n```bash\n$ make test-<test-suite>\n```\n\nThe `-p` flag is used to set the `PKGS` environment variable and is\nused to specify which test suite runs. The possible test suites are found\nin the [integration tests](https://github.com/ethereum-optimism/integration-tests)\nrepository, in the `packages` directory.\n\nSet `PKGS` to the package name to run a particular package. If `PKGS` is unset,\neach test suite will run in sequence. The name of a test suite can be found\nin its `package.json` as the `.name` property without the `@eth-optimism`\nprefix. Note that the name must match the name of the directory containing\nthe test suite for the automation to work. If `PKGS` contains\nmultiple packages delimated by a comma, the results will be non-deterministic\nand the tests should be expected to fail.\n\nThe `optional` directory contains additional service files that will be used\nif the name of the test suite has a corresponding file\n`optional/<test-suite>-service.yml`. This is useful for adding additional\nservices that are not required for all test suites.\n\n", "release_dates": []}, {"name": "optimism-legacy", "description": "Legacy Optimism Monorepo", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n<div align=\"center\">\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=600></a>\n  <br />\n  <h3><a href=\"https://optimism.io\">Optimism</a> is Ethereum, scaled.</h3>\n  <br />\n</div>\n\n## What is Optimism?\n\n[Optimism](https://www.optimism.io/) is a project dedicated to scaling Ethereum's technology and expanding its ability to coordinate people from across the world to build effective decentralized economies and governance systems. The [Optimism Collective](https://app.optimism.io/announcement) builds open-source software for running L2 blockchains and aims to address key governance and economic challenges in the wider cryptocurrency ecosystem. Optimism operates on the principle of **impact=profit**, the idea that individuals who positively impact the Collective should be proportionally rewarded with profit. **Change the incentives and you change the world.**\n\nIn this repository, you'll find numerous core components of the OP Stack, the decentralized software stack maintained by the Optimism Collective that powers Optimism and forms the backbone of blockchains like [OP Mainnet](https://explorer.optimism.io/) and [Base](https://base.org). Designed to be \"aggressively open source,\" the OP Stack encourages you to explore, modify, extend, and test the code as needed. Although not all elements of the OP Stack are contained here, many of its essential components can be found within this repository. By collaborating on free, open software and shared standards, the Optimism Collective aims to prevent siloed software development and rapidly accelerate the development of the Ethereum ecosystem. Come contribute, build the future, and redefine power, together.\n\n## Documentation\n\n- If you want to build on top of OP Mainnet, refer to the [Optimism Documentation](https://docs.optimism.io)\n- If you want to build your own OP Stack based blockchain, refer to the [OP Stack docs](https://docs.optimism.io/stack/getting-started)\n- If you want to contribute to the OP Stack, check out the [Protocol Specs](./specs)\n\n## Community\n\nGeneral discussion happens most frequently on the [Optimism discord](https://discord.gg/optimism).\nGovernance discussion can also be found on the [Optimism Governance Forum](https://gov.optimism.io/).\n\n## Contributing\n\nRead through [CONTRIBUTING.md](./CONTRIBUTING.md) for a general overview of the contributing process for this repository.\nUse the [Developer Quick Start](./CONTRIBUTING.md#development-quick-start) to get your development environment set up to start working on the Optimism Monorepo.\nThen check out the list of [Good First Issues](https://github.com/ethereum-optimism/optimism/contribute) to find something fun to work on!\n\n## Security Policy and Vulnerability Reporting\n\nPlease refer to the canonical [Security Policy](https://github.com/ethereum-optimism/.github/blob/master/SECURITY.md) document for detailed information about how to report vulnerabilities in this codebase.\nBounty hunters are encouraged to check out [the Optimism Immunefi bug bounty program](https://immunefi.com/bounty/optimism/).\nThe Optimism Immunefi program offers up to $2,000,042 for in-scope critical vulnerabilities.\n\n## The Bedrock Upgrade\n\nOP Mainnet is currently preparing for [its next major upgrade, Bedrock](https://dev.optimism.io/introducing-optimism-bedrock/).\nYou can find detailed specifications for the Bedrock upgrade within the [specs folder](./specs) in this repository.\n\nPlease note that a significant number of packages and folders within this repository are part of the Bedrock upgrade and are NOT currently running in production.\nRefer to the Directory Structure section below to understand which packages are currently running in production and which are intended for use as part of the Bedrock upgrade.\n\n## Directory Structure\n\n<pre>\n~~ Production ~~\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/common-ts\">common-ts</a>: Common tools for building apps in TypeScript\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-bedrock\">contracts-bedrock</a>: Bedrock smart contracts.\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-periphery\">contracts-periphery</a>: Peripheral contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/core-utils\">core-utils</a>: Low-level utilities that make building Optimism easier\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/data-transport-layer\">data-transport-layer</a>: Service for indexing Optimism-related L1 data\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/chain-mon\">chain-mon</a>: Chain monitoring services\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/fault-detector\">fault-detector</a>: Service for detecting Sequencer faults\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/message-relayer\">message-relayer</a>: Tool for automatically relaying L1<>L2 messages in development\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/replica-healthcheck\">replica-healthcheck</a>: Service for monitoring the health of a replica node\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/sdk\">sdk</a>: provides a set of tools for interacting with Optimism\n\u251c\u2500\u2500 <a href=\"./op-bindings\">op-bindings</a>: Go bindings for Bedrock smart contracts.\n\u251c\u2500\u2500 <a href=\"./op-batcher\">op-batcher</a>: L2-Batch Submitter, submits bundles of batches to L1\n\u251c\u2500\u2500 <a href=\"./op-bootnode\">op-bootnode</a>: Standalone op-node discovery bootnode\n\u251c\u2500\u2500 <a href=\"./op-chain-ops\">op-chain-ops</a>: State surgery utilities\n\u251c\u2500\u2500 <a href=\"./op-challenger\">op-challenger</a>: Dispute game challenge agent\n\u251c\u2500\u2500 <a href=\"./op-e2e\">op-e2e</a>: End-to-End testing of all bedrock components in Go\n\u251c\u2500\u2500 <a href=\"./op-exporter\">op-exporter</a>: Prometheus exporter client\n\u251c\u2500\u2500 <a href=\"./op-heartbeat\">op-heartbeat</a>: Heartbeat monitor service\n\u251c\u2500\u2500 <a href=\"./op-node\">op-node</a>: rollup consensus-layer client\n\u251c\u2500\u2500 <a href=\"./op-program\">op-program</a>: Fault proof program\n\u251c\u2500\u2500 <a href=\"./op-proposer\">op-proposer</a>: L2-Output Submitter, submits proposals to L1\n\u251c\u2500\u2500 <a href=\"./op-service\">op-service</a>: Common codebase utilities\n\u251c\u2500\u2500 <a href=\"./op-signer\">op-signer</a>: Client signer\n\u251c\u2500\u2500 <a href=\"./op-wheel\">op-wheel</a>: Database utilities\n\u251c\u2500\u2500 <a href=\"./ops-bedrock\">ops-bedrock</a>: Bedrock devnet work\n\u251c\u2500\u2500 <a href=\"./proxyd\">proxyd</a>: Configurable RPC request router and proxy\n\u2514\u2500\u2500 <a href=\"./specs\">specs</a>: Specs of the rollup starting at the Bedrock upgrade\n\n~~ Pre-BEDROCK ~~\n\u251c\u2500\u2500 <a href=\"./packages\">packages</a>\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/common-ts\">common-ts</a>: Common tools for building apps in TypeScript\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts\">contracts</a>: L1 and L2 smart contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/contracts-periphery\">contracts-periphery</a>: Peripheral contracts for Optimism\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/core-utils\">core-utils</a>: Low-level utilities that make building Optimism easier\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/data-transport-layer\">data-transport-layer</a>: Service for indexing Optimism-related L1 data\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/chain-mon\">chain-mon</a>: Chain monitoring services\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/fault-detector\">fault-detector</a>: Service for detecting Sequencer faults\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/message-relayer\">message-relayer</a>: Tool for automatically relaying L1<>L2 messages in development\n\u2502   \u251c\u2500\u2500 <a href=\"./packages/replica-healthcheck\">replica-healthcheck</a>: Service for monitoring the health of a replica node\n\u2502   \u2514\u2500\u2500 <a href=\"./packages/sdk\">sdk</a>: provides a set of tools for interacting with Optimism\n\u251c\u2500\u2500 <a href=\"./batch-submitter\">batch-submitter</a>: Service for submitting batches of transactions and results to L1\n\u251c\u2500\u2500 <a href=\"./bss-core\">bss-core</a>: Core batch-submitter logic and utilities\n\u251c\u2500\u2500 <a href=\"./gas-oracle\">gas-oracle</a>: Service for updating L1 gas prices on L2\n\u251c\u2500\u2500 <a href=\"./indexer\">indexer</a>: indexes and syncs transactions\n\u251c\u2500\u2500 <a href=\"./infra/op-replica\">infra/op-replica</a>: Deployment examples and resources for running an Optimism replica\n\u251c\u2500\u2500 <a href=\"./l2geth\">l2geth</a>: Optimism client software, a fork of <a href=\"https://github.com/ethereum/go-ethereum/tree/v1.9.10\">geth v1.9.10</a>\n\u251c\u2500\u2500 <a href=\"./l2geth-exporter\">l2geth-exporter</a>: A prometheus exporter to collect/serve metrics from an L2 geth node\n\u251c\u2500\u2500 <a href=\"./op-exporter\">op-exporter</a>: A prometheus exporter to collect/serve metrics from an Optimism node\n\u251c\u2500\u2500 <a href=\"./proxyd\">proxyd</a>: Configurable RPC request router and proxy\n\u2514\u2500\u2500 <a href=\"./technical-documents\">technical-documents</a>: audits and post-mortem documents\n</pre>\n\n## Branching Model\n\n### Active Branches\n\n| Branch          | Status                                                                           |\n| --------------- | -------------------------------------------------------------------------------- |\n| [master](https://github.com/ethereum-optimism/optimism/tree/master/)                   | Accepts PRs from `develop` when intending to deploy to production.                  |\n| [develop](https://github.com/ethereum-optimism/optimism/tree/develop/)                 | Accepts PRs that are compatible with `master` OR from `release/X.X.X` branches.                    |\n| release/X.X.X                                                                          | Accepts PRs for all changes, particularly those not backwards compatible with `develop` and `master`. |\n\n### Overview\n\nThis repository generally follows [this Git branching model](https://nvie.com/posts/a-successful-git-branching-model/).\nPlease read the linked post if you're planning to make frequent PRs into this repository.\n\n### Production branch\n\nThe production branch is `master`.\nThe `master` branch contains the code for latest \"stable\" releases.\nUpdates from `master` **always** come from the `develop` branch.\n\n### Development branch\n\nThe primary development branch is [`develop`](https://github.com/ethereum-optimism/optimism/tree/develop/).\n`develop` contains the most up-to-date software that remains backwards compatible with the latest experimental [network deployments](https://community.optimism.io/docs/useful-tools/networks/).\nIf you're making a backwards compatible change, please direct your pull request towards `develop`.\n\n**Changes to contracts within `packages/contracts/contracts` are usually NOT considered backwards compatible and SHOULD be made against a release candidate branch**.\nSome exceptions to this rule exist for cases in which we absolutely must deploy some new contract after a release candidate branch has already been fully deployed.\nIf you're changing or adding a contract and you're unsure about which branch to make a PR into, default to using the latest release candidate branch.\nSee below for info about release candidate branches.\n\n### Release candidate branches\n\nBranches marked `release/X.X.X` are **release candidate branches**.\nChanges that are not backwards compatible and all changes to contracts within `packages/contracts/contracts` MUST be directed towards a release candidate branch.\nRelease candidates are merged into `develop` and then into `master` once they've been fully deployed.\nWe may sometimes have more than one active `release/X.X.X` branch if we're in the middle of a deployment.\nSee table in the **Active Branches** section above to find the right branch to target.\n\n## Releases\n\n### Changesets\n\nWe use [changesets](https://github.com/changesets/changesets) to mark packages for new releases.\nWhen merging commits to the `develop` branch you MUST include a changeset file if your change would require that a new version of a package be released.\n\nTo add a changeset, run the command `yarn changeset` in the root of this monorepo.\nYou will be presented with a small prompt to select the packages to be released, the scope of the release (major, minor, or patch), and the reason for the release.\nComments within changeset files will be automatically included in the changelog of the package.\n\n### Triggering Releases\n\nReleases can be triggered using the following process:\n\n1. Create a PR that merges the `develop` branch into the `master` branch.\n2. Wait for the auto-generated `Version Packages` PR to be opened (may take several minutes).\n3. Change the base branch of the auto-generated `Version Packages` PR from `master` to `develop` and merge into `develop`.\n4. Create a second PR to merge the `develop` branch into the `master` branch.\n\nAfter merging the second PR into the `master` branch, packages will be automatically released to their respective locations according to the set of changeset files in the `develop` branch at the start of the process.\nPlease carry this process out exactly as listed to avoid `develop` and `master` falling out of sync.\n\n**NOTE**: PRs containing changeset files merged into `develop` during the release process can cause issues with changesets that can require manual intervention to fix.\nIt's strongly recommended to avoid merging PRs into develop during an active release.\n\n## License\n\nCode forked from [`go-ethereum`](https://github.com/ethereum/go-ethereum) under the name [`l2geth`](https://github.com/ethereum-optimism/optimism/tree/master/l2geth) is licensed under the [GNU GPLv3](https://gist.github.com/kn9ts/cbe95340d29fc1aaeaa5dd5c059d2e60) in accordance with the [original license](https://github.com/ethereum/go-ethereum/blob/master/COPYING).\n\nAll other files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/optimism/blob/master/LICENSE) unless stated otherwise.\n", "release_dates": []}, {"name": "optimism-mud-starter", "description": "A MUD based starterkit by optimism", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <div align=\"center\">\n  <a href=\"https://v2.mud.dev/\"><img width=\"205\" alt=\"mud logo\" src=\"https://github.com/ethereum-optimism/optimism-mud-starter/assets/35039927/598580a6-0da5-40bc-8b5b-8a3f4a45a29a\">\n  </a>\n  <br />\n  <br />\n  \u2726\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=320></a>\n  <br />\n  <h2><a href=\"https://optimism.io\">Optimism Mud</a> starterkit.</h2>\n  <br />\n  </div>\n</div>\n\nThis is a [Optimism](https://github.com/ethereum-optimism) + [MUD](https://github.com/latticexyz/mud) project built with \u2764 for hackers.\n\n## Who is this for?\n\nMUD is a full-stack Dapp development framework. Think of it as the Ruby-on-Rails or NEXT.js of Dapp development.\n\n![image](https://github.com/ethereum-optimism/optimism-mud-starter/assets/35039927/d5a99b42-6746-43fc-b392-d427961fa1ee)\n\nIt comes with the following features:\n\n- Automatic indexer generation with [MUD storage](https://v2.mud.dev/mode)\n- Automatic frontend SDK generation to the [mud store](https://v2.mud.dev/store/reading-and-writing)\n- Uniquely [gas efficient storage](https://v2.mud.dev/store/gas-efficiency)\n- An amazing [cli](https://v2.mud.dev/cli) with great code generation tools\n\nThis starter is a great choice for any of the following groups:\n\n- Hackers hacking on [Optimism](https://www.optimism.io/)\n- Hackers interested in trying out an opinionated full stack framework\n\nMUD2 is in alpha. Looking for a more traditional starterkit? Check out [Optimism Starter](https://github.com/ethereum-optimism/optimism-starter).\n\n## Why MUD?\n\nMUD takes care of all the plumbing of building blockchain-based applications so you can focus on your application logic. In the MUD builders' own words:\n\n> MUD is a framework for ambitious Ethereum applications. It compresses the complexity of building EVM apps with a tightly integrated software stack.\n\nGo take a deep dive at [mud.dev](https://mud.dev/)! You'll be as excited as we are.\n\n[![MUD 101](https://img.youtube.com/vi/IjxzJjJJSs8/0.jpg)](https://www.youtube.com/watch?v=IjxzJjJJSs8)\n\n## Getting Started\n\n### Install Node 18\n\n[See here](https://nodejs.org/en/download/).\n\n### Install Foundry\n\nYou will need to install [Foundry](https://book.getfoundry.sh/getting-started/installation) to build your smart contracts.\n\n1. Run the following command:\n\n   ```sh\n   curl -L https://foundry.paradigm.xyz | bash\n   ```\n\n1. Source your environment as requested by Foundry.\n\n1. Run `foundryup`.\n\n</details>\n\n### Install pnpm\n\nPnpm is the package manager MUD uses. It's usage is very similar to NPM but speed is much faster\n\n```bash\nnpm install pnpm --global\n```\n\n## Start the application\n\n1. Clone/fork the optimism-mud-starter repo\n\n   ```sh\n   git clone https://github.com/ethereum-optimism/optimism-mud-starter.git\n   ```\n\n2. Install the necessary node packages:\n\n   ```sh\n   cd optimism-mud-starter\n   pnpm install\n   ```\n\n3. Initialize the mud project\n\n   ```sh\n   pnpm initialize\n   ```\n\n   If you get errors during this step, you might need to [update your Foundry to the latest version](#install-foundry).\n\n4. Start dev server\n\n```sh\npnpm dev\n```\n\n5. Open [localhost:3000](http://localhost:3000) in your browser.\n\nSee below for general usage instructions or [FAQ](./FAQ.md) for answers to general questions such as:\n\n- [Where to get goerli eth]().\n- [How to deploy a public version of your app](./FAQ.md#how-do-i-deploy-this).\n\n## Check out the MUD documentation\n\nMUD is in Alpha so make sure to check out the [official MUD documentation](https://v2.mud.dev/) for latest usage instructions.\n\n## Join the MUD discord\n\nMUD has a vibrant community ready to help. [Join the discord](https://discord.com/invite/CzXAgtFqgq) to share your MUD project or ask any questions.\n\n## Set up environment\n\n### Get an Etherscan key\n\n1. Register for [Etherscan on Optimism](https://explorer.optimism.io/register).\n   This account is different from your normal Etherscan account.\n\n2. Go to [the API keys page](https://explorer.optimism.io/myapikey) and click **Add** to create a new API key.\n\n3. You can now [add the etherscan key to your foundry.toml](https://book.getfoundry.sh/reference/config/etherscan?highlight=etherscan#etherscan)\n\n## Alternatives\n\nLooking to use burner wallets? Prefer hardhat? Prefer NEXT.js? Check out these amazing alternatives:\n\n- [optimism starter](https://github.com/ethereum-optimism/optimism-starter) - A more traditional wagmi/viem based starterkit\n- [create mud](https://v2.mud.dev/cli#create) - This starterkit uses the react template. MUD offers a vanillajs version too\n- [create wagmi cli](https://wagmi.sh/cli/create-wagmi) - A flexible cli with many templates (this starterkit was started from vite-react-cli-foundry)\n- [scaffold-eth](https://github.com/scaffold-eth/se-2) - The new 2nd version of a popular NEXT.js based starter including hardhat, burner wallets, great documentation, and an active telegram for support\n\n## Learn more\n\n- [MUD Documentation](https://v2.mud.dev/) \u2013 learn about wagmi Hooks and API.\n- [Foundry Documentation](https://book.getfoundry.sh/) \u2013 learn more about the Foundry stack (Anvil, Forge, etc).\n- [Vite Documentation](https://vitejs.dev/) \u2013 learn about Vite features and API.\n", "release_dates": []}, {"name": "optimism-project-ideas", "description": "Ways to contribute to the Optimism Collective", "language": null, "license": null, "readme": "![Frame 1 (10) copy](https://user-images.githubusercontent.com/1016190/176318619-852ebfb8-7972-4c30-8c47-06e6ca3d5493.png)\n\nThis repository has been migrated to the [Ecosystem Contributions Repository](https://github.com/ethereum-optimism/ecosystem-contributions). Head over there to find opportunities to contribute to the Optimism Collective!\n", "release_dates": []}, {"name": "optimism-starter", "description": "A boilerplate for getting started with optimism", "language": "Solidity", "license": null, "readme": "<div align=\"center\">\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=320></a>\n  <br />\n  <br />\n</div>\n\nThis is a [Optimism](https://github.com/ethereum-optimism) + [wagmi](https://wagmi.sh) + [Foundry](https://book.getfoundry.sh/) + [Rainbowkit](https://www.rainbowkit.com/) + [Vite](https://vitejs.dev/) project originally bootstrapped with [`create-wagmi`](https://github.com/wagmi-dev/wagmi/tree/main/packages/create-wagmi) built with \u2764\ufe0f for hackers.\n\n## Who is this for?\n\nThis starter is a great choice for any of the following groups:\n\n- Hackers hacking on [Optimism](https://www.optimism.io/)\n- Hackers hacking on the [Attestation Station](https://community.optimism.io/docs/identity/build/)\n- Hackers interested in using [the most modern and robust web3 full stack development stack](https://twitter.com/gakonst/status/1630038261941796866)\n\n## Getting Started\n\n### Install Node\n\n[See here](https://nodejs.org/en/download/).\nNote that you need Node at a later version than 14.18.0, or 16 and above.\nThese instructions were verified with Node 18.\n\n### Install Foundry\n\nYou will need to install [Foundry](https://book.getfoundry.sh/getting-started/installation) to build your smart contracts.\n\n1. Run the following command:\n\n   ```sh\n   curl -L https://foundry.paradigm.xyz | bash\n   ```\n\n1. Source your environment as requested by Foundry.\n\n1. Run `foundryup`.\n\n</details>\n\n## Set up environment\n\n### Get an Etherscan key\n\n1. Register for [Etherscan on Optimism](https://explorer.optimism.io/register).\n   This account is different from your normal Etherscan account.\n\n1. Go to [the API keys page](https://explorer.optimism.io/myapikey) and click **Add** to create a new API key.\n\n### Specify .env\n\nYou will first need to set up your `.env` to tell Forge where to deploy your contract.\n\n1. Copy `.env.example` to `.env`.\n\n   ```sh\n   cp .env.example .env\n   ```\n\n1. Edit your `.env` to specify the environment variables.\n\n   - `ETHERSCAN_API_KEY`: Your Etherscan API Key.\n\n   - `FORGE_RPC_URL`: The RPC URL of the network to which you deploy.\n     If you use [Alchemy](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/ecosystem/alchemy), your URL will look like this: `https://opt-goerli.g.alchemy.com/v2/<Alchemy API Key>`\n\n   - `FORGE_PRIVATE_KEY`: The private key of the wallet you want to deploy from.\n\n   - `VITE_WALLETCONNECT_PROJECT_ID`: WalletConnect v2 requires a project ID. You can obtain it from your WC dashboard: https://docs.walletconnect.com/2.0/web/web3wallet/installation#obtain-project-id\n\n## Start the application\n\n<img width=\"450\" alt=\"starter-app-screenshot\" src=\"https://user-images.githubusercontent.com/389705/225778318-4e6fb8c0-c5d7-4aea-9fc2-2efd17ca435c.png\">\n\n1. Clone/fork the optimism-starter repo\n\n   ```sh\n   git clone https://github.com/ethereum-optimism/optimism-starter.git\n   ```\n\n1. Install the necessary node packages:\n\n   ```sh\n   cd optimism-starter\n   npm install\n   ```\n\n1. Start the frontend with `npm run dev`\n\n   ```sh\n   npm run dev\n   ```\n\n   If you get errors during this step, you might need to [update your Foundry to the latest version](#install-foundry).\n\n1. Open [localhost:5173](http://localhost:5173) in your browser.\n\n   Once the webpage has loaded, changes made to files inside the `src/` directory (e.g. `src/App.tsx`) will automatically update the webpage.\n\nSee below for general usage instructions or [FAQ](./FAQ.md) for answers to general questions such as:\n\n- [Where to get goerli eth]().\n- [How to deploy a public version of your app](./FAQ.md#how-do-i-deploy-this).\n\n## Generate ABIs & React Hooks\n\nThis project comes with `@wagmi/cli` built-in, which means you can generate wagmi-compatible (type safe) ABIs & React Hooks straight from the command line.\n\nTo generate ABIs & Hooks, follow the steps below.\n\n## Generate code\n\nTo generate ABIs & React Hooks from your Foundry project (in `./contracts`), you can run:\n\n```sh\nnpm run wagmi\n```\n\nThis will use the wagmi config (`wagmi.config.ts`) to generate a `src/generated.ts` file which will include your ABIs & Hooks that you can start using in your project.\n\n[Here is an example](https://github.com/ethereum-optimism/optimism-starter/blob/main/src/components/Attestoooooor.tsx#L77) of Hooks from the generated file being used.\n\n## Deploying Contracts\n\nTo deploy your contracts to a network, you can use Foundry's [Forge](https://book.getfoundry.sh/forge/) \u2013 a command-line tool to tests, build, and deploy your smart contracts.\n\nYou can read a more in-depth guide on using Forge to deploy a smart contract [here](https://book.getfoundry.sh/forge/deploying), but we have included a simple script in the `package.json` to get you started.\n\nBelow are the steps to deploying a smart contract to Ethereum Mainnet using Forge:\n\n## Deploy contract\n\nYou can now deploy your contract!\n\n```sh\nnpm run deploy\n```\n\n## Developing with Anvil (Optimism Mainnet Fork)\n\nLet's combine the above sections and use Anvil alongside our development environment to use our contracts (`./contracts`) against an Optimism fork.\n\n### Start dev server\n\nRun the command:\n\n```sh\nnpm run dev:foundry\n```\n\nThis will:\n\n- Start a vite dev server,\n- Start the `@wagmi/cli` in [**watch mode**](https://wagmi.sh/cli/commands/generate#options) to listen to changes in our contracts, and instantly generate code,\n- Start an Anvil instance (Goerli Optimism Fork) on an RPC URL.\n\n### Deploy our contract to Anvil\n\nNow that we have an Anvil instance up and running, let's deploy our smart contract to the Anvil network:\n\n```sh\nnpm run deploy:anvil\n```\n\n## Start developing\n\nNow that your contract has been deployed to Anvil, you can start playing around with your contract straight from the web interface!\n\nHead to [localhost:5173](http://localhost:5173) in your browser, connect your wallet, and try increment a counter on the Foundry chain. Use the generated code in `src/generated.ts` to do it and follow the [Attestooooor](https://github.com/ethereum-optimism/optimism-starter/blob/main/src/components/Attestoooooor.tsx) component as an example\n\n> Tip: If you import an Anvil private key into your browser wallet (MetaMask, Coinbase Wallet, etc) \u2013 you will have 10,000 ETH to play with \ud83d\ude0e. The private key is found in the terminal under \"Private Keys\" when you start up an Anvil instance with `npm run dev:foundry`.\n\n## Alternatives\n\nLooking to use burner wallets? Prefer hardhat? Prefer NEXT.js? Check out these amazing alternatives:\n\n- [create wagmi cli](https://wagmi.sh/cli/create-wagmi) - A flexible cli with many templates (this starterkit was started from vite-react-cli-foundry)\n- [scaffold-eth](https://github.com/scaffold-eth/se-2) - The new 2nd version of a popular NEXT.js based starter including hardhat, burner wallets, great documentation, and an active telegram for support\n- [Awesome wagmi](https://github.com/wagmi-dev/awesome-wagmi#templates) - Has other alternative examples\n- [Create Eth App](https://usedapp-docs.netlify.app/docs/Getting%20Started/Create%20Eth%20App) - Uses a wagmi alternative called useDapp that is used at OP Labs\n\n## Learn more\n\nTo learn more about [Optimism](https://optimism.io), [Vite](https://vitejs.dev/), [Foundry](https://book.getfoundry.sh/), [Rainbow kit](https://www.rainbowkit.com/) or [wagmi](https://wagmi.sh), check out the following resources:\n\n- [Foundry Documentation](https://book.getfoundry.sh/) \u2013 learn more about the Foundry stack (Anvil, Forge, etc).\n- [wagmi Documentation](https://wagmi.sh) \u2013 learn about wagmi Hooks and API.\n- [wagmi Examples](https://wagmi.sh/examples/connect-wallet) \u2013 a suite of simple examples using wagmi.\n- [@wagmi/cli Documentation](https://wagmi.sh/cli) \u2013 learn more about the wagmi CLI.\n- [Vite Documentation](https://vitejs.dev/) \u2013 learn about Vite features and API.\n", "release_dates": ["2023-03-01T07:34:38Z", "2023-02-28T13:37:55Z", "2023-02-27T08:03:37Z"]}, {"name": "optimism-ts-services", "description": "[Optimism] Client-Side Services", "language": "TypeScript", "license": null, "readme": "# optimism-ts-services\n[Optimism] Client-Side Services\n\n## Fraud Prover\n\n| Environment Variable        | Required? | Default Value         | Description            |\n| -----------                 | --------- | -------------         | -----------           |\n| `L1_WALLET_KEY`             | Yes       | N/A                   | Private key for an account on Layer 1 (Ethereum) to be used to submit fraud proof transactions. |\n| `L2_NODE_WEB3_URL`          | No        | http://localhost:9545 | HTTP endpoint for a Layer 2 (Optimism) Verifier node.  |\n| `L1_NODE_WEB3_URL`          | No        | http://localhost:8545 | HTTP endpoint for a Layer 1 (Ethereum) node.      |\n| `RELAY_GAS_LIMIT`           | No        | 9,000,000             | Maximum amount of gas to provide to fraud proof transactions (except for the \"transaction execution\" step). |\n| `RUN_GAS_LIMIT`             | No        | 9,000,000             | Maximum amount of gas to provide to the \"transaction execution\" step. |\n| `POLLING_INTERVAL`          | No        | 5,000                 | Time (in milliseconds) to wait while polling for new transactions. |\n| `L2_BLOCK_OFFSET`           | No        | 1                     | Offset between the `CanonicalTransactionChain` contract on Layer 1 and the blocks on Layer 2. Currently defaults to 1, but will likely be removed as soon as possible. |\n| `L1_BLOCK_FINALITY`         | No        | 0                     | Number of Layer 1 blocks to wait before considering a given event. |\n| `L1_START_OFFSET`           | No        | 0                     | Layer 1 block number to start scanning for transactions from. |\n| `FROM_L2_TRANSACTION_INDEX` | No        | 0                     | Layer 2 block number to start scanning for transactions from. |\n\n## Message Passer\n\nThe Message Passer is used to confirm L2 to L1 messages on L1.\nBy default, it will send transactions to L1 when it detects that\nit needs to. It can also be configured to write data to a Google\nSheet so that the transactions can be closely inspected.\n\nTo run in spreadsheet mode, the following environment variables\nare used:\n\n| Environment Variable | Description |\n| -----------          | ----------- |\n| `SPREADSHEET_MODE`   | Set this to anything to run in spreadsheet mode |\n| `SHEET_ID`           | The ID of the Google Sheet, can be found in the URL |\n| `CLIENT_EMAIL`       | A service account email address |\n| `CLIENT_PRIVATE_KEY` | A service account RSA private key|\n\nThe key and service account can be managed at `console.developers.google.com`.\nA Google Sheet must be created with the correct row headers and the `SHEET_ID`\ncan be pulled from the URL of the Google Sheet.\n", "release_dates": ["2021-01-15T02:22:08Z", "2021-01-07T04:53:45Z"]}, {"name": "optimism-tutorial", "description": "Build your first app on Optimism!", "language": "Solidity", "license": null, "readme": "# [DEPRECATED] OP Mainnet Tutorials\n\nThis documentation is deprecated. Please use our new [technical documentation](https://docs.optimism.io).\n\n[![Discord](https://img.shields.io/discord/667044843901681675.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discord-gateway.optimism.io)\n[![Twitter Follow](https://img.shields.io/twitter/follow/optimismFND.svg?label=optimismFND&style=social)](https://twitter.com/optimismFND)\n\n## Getting Started\n\n* [Getting started developing for OP Mainnet](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started)\n* [Writing your first contract on OP Mainnet (or OP Goerli)](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/first-contract) - if you are just getting started with blockchain development\n\n\n## Cross Domain\n\n* [Communication between contracts on OP Mainnet and Ethereum](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-comm)\n* [Bridging ETH with the Optimism SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-eth)\n* [Bridging ERC-20 tokens with the Optimism SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20)\n* [View transactions between layers](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-view-tx)\n* [Creating an ERC20 Token on L2 to represent one on L1](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-standard-token)\n* [Registering a Custom ERC20 Token on L2](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-custom-token)\n\n\n\n## Misc.\n\n* [Estimate the costs of an OP Mainnet transaction](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas)\n\n\n## Ecosystem\n\n- [AttestationStation (Reputation primitive on OP Mainnet)](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/ecosystem/attestation-station)\n- [Tenderly](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/ecosystem/tenderly)\n", "release_dates": []}, {"name": "optimistic-pm", "description": "Modeled after https://github.com/ethereum/eth2.0-pm", "language": null, "license": null, "readme": "# optimistic pm\nInspired by: https://github.com/ethereum/eth2.0-pm\n\n## Meeting Notes\nTODO\n", "release_dates": []}, {"name": "optimistic-specs", "description": "Optimistic: Bedrock, is a protocol that strives to be an extremely simple optimistic rollup that maintains 1:1 compatibility with Ethereum", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Optimistic Specs - Archived\n\nThis git repository held the specs and initial implementation of the bedrock upgrade\nto the Optimistic network.\n\nAll development is now happening the [Optimism Monorepo](https://github.com/ethereum-optimism/optimism)\n\n## License\n\nSpecification: CC0 1.0 Universal, see [`specs/LICENSE`](./specs/LICENSE) file.\n\nReference software: MIT, see [`LICENSE`](./LICENSE) file.\n", "release_dates": ["2022-01-28T22:07:55Z", "2022-01-21T22:57:36Z"]}, {"name": "ovm-subgraphs", "description": null, "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Optimism subgraphs\n\nEach layer's subgraph has its own directory which shares the same name as the deployed subgraphs:\n- `optimism-l1-subgraph`\n- `optimism-l2-subgraph`\n\nThe package.json contains prep scripts that generate the subgraph.yaml files using subgraph.TEMPLATE.yaml depending on which network and/or layer you're targetting. It swaps out the contract addresses (can also be used for other dynamic data if needed, like start block).\n\n### Adding tokens\n\n1. Deploy token bridge contracts to layer 1 and 2 (if they don't exist yet). [Instructions here](https://community.optimism.io/docs/developers/integration.html#bridging-l1-and-l2).\n2. Add the l1 & l2 bridge contracts in the `networks.yaml` file. No changes to the mapping files should be needed. \n3. Build the subgraphs by running `yarn prep:[network]`, `yarn codegen`, `yarn build`.\n4. Please make a PR and the Optimism team will deploy (you would need `THE_GRAPH_API_KEY` to `yarn deploy`).", "release_dates": []}, {"name": "plugins", "description": "[Optimism] Plugins!", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# @eth-optimism/plugins\n\n## What is this?\n\nA collection of useful JavaScript/TypeScript tooling plugins that you might need when building on top of Optimistic Ethereum!\n\n## What kind of plugins are we talking about?\n\n### Plugins for [`hardhat`](https://hardhat.org)\n\n#### `@eth-optimism/plugins/hardhat/compiler`\n\nAutomatically compiles your Solidity contracts with the OVM compiler.\nDefaults to Solidity version 0.7.6, but also has support for 0.5.16 and 0.6.12.\n[Full README available here](./src/hardhat/compiler).\n", "release_dates": ["2021-04-07T17:05:14Z", "2021-03-25T20:50:38Z", "2021-03-24T20:00:34Z", "2021-03-12T01:39:59Z", "2021-03-10T17:17:52Z", "2021-03-06T16:31:04Z", "2021-03-03T05:52:51Z"]}, {"name": "presigner", "description": "Multisig transaction presigner made easy", "language": "Go", "license": null, "readme": "# Presigner\n\nMultisig transaction presigner made easy <3\n\n## Setup\n\n1. Install [golang](https://golang.org/doc/install)\n\n1. Install Foundry\n```bash\nmake install-foundry\n```\n\n3. Download Foundry dependencies\n```bash\nmake deps\n```\n\n## Usage\n\nThis tool is used to create and sign transactions for multisig safe calls.\n\nThe transactions are created and verified using [solidity scripting](https://book.getfoundry.sh/tutorials/solidity-scripting) by calling\nthe actual [safe contract](https://github.com/safe-global/safe-contracts/tree/main/contracts) functions.\nIt stores state in a single self-contained JSON file.\n\nOnce the transaction is fully signed, the `simulate` command produces a oneliner\nshell script encoded in Base64 that can be easily stored in secret vaults for later use.\nThe onliner has dependency only on `cast` ([from Foundry](https://book.getfoundry.sh/reference/cast/cast-send)).\n\n### File format\n\n```json\n{\n    \"chain_id\": \"5\",\n    \"created_at\": \"2023-11-06T14:53:30-08:00\",\n    \"data\": \"0x1901c0d0e680d49115459ede72891964cf5adc2cf1930f57e7d8f7cf2408ed63d6ad81b0007322861e475d3f147da54ca8278d8f2850deaf5c736817f679a65332fc\",\n    \"rpc_url\": \"https://ethereum-goerli.publicnode.com\",\n    \"safe_addr\": \"0xb7b28ac0c0ffab4188826b14d02b17e8b444ed9e\",\n    \"safe_nonce\": \"3\",\n    \"script_name\": \"CallPause\",\n    \"signatures\": [\n        {\n            \"signer\": \"0x1234567890123456789012345678901234567890\",\n            \"signature\": \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n        },\n        {\n            \"signer\": \"0x1234567890123456789012345678901234567891\",\n            \"signature\": \"2111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n        }\n    ],\n    \"target_addr\": \"0x95B78e7A9f856161B8fE255Cf92C38d693aC6f5e\"\n}\n```\n\n### Commands\n\n### nonce\n\nVerifies the current nonce of a safe, example:\n\n```bash\ngo run presigner.go \\\n    --safe-addr 0xb7b28ac0c0ffab4188826b14d02b17e8b444ed9e \\\n    nonce\n```\n\n#### create\n\nCreates a new transaction to be signed, example:\n\n```bash\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    --chain 5 \\\n    --rpc-url https://ethereum-goerli.publicnode.com \\\n    --target-addr 0xfAF96f23026CA4863B6dcA30204aD5D2675738b8 \\\n    --safe-addr 0xb7b28ac0c0ffab4188826b14d02b17e8b444ed9e \\\n    --safe-nonce 3 \\\n    create\n\n2023/11/06 13:12:32 saved: tx/2023-11-06-goerli-pause-3.json\n```\n\nCustomizing the `safe-nonce` parameter it is possible to create transactions in advance.\n\n### sign\n\nSigns a transaction previously created, example:\n\n```bash\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    --private-key 0000000000000000000000000000000000000000000000000000000000000000 \\\n    sign\n\n2023/11/06 13:12:42 added signature for 0x1234567890123456789012345678901234567890\n```\n\nAs new signatures are added, the transaction is updated and saved.\n\nWe use [eip712signer](https://github.com/base-org/eip712signer) to sign the transaction, which currently supports:\n* private-key\n* ledger\n* mnemonic\n\n### verify\n\nVerifies if a transaction previously created has valid signatures to be executed, example:\n\n```bash\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    verify\n```\n\n### simulate\n\nSimulate the transaction execution in a forked VM, example:\n\n```bash\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    simulate\n```\n\nIf the simulation succeeds, it will also print a cheat sheet to execute the transaction in the network, i.e.:\n\n```bash\n- - 8< - -\n\nEXECUTORKEY=********\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    --private-key $EXECUTORKEY \\\n    execute\n\n- - 8< - -\n```\n\nOr you can use the oneliner script encoded in base64, i.e.:\n\n```bash\n- - 8< - -\n/bin/bash <(base64 -d -i tx/2023-11-06-goerli-pause-3.sh.b64) --rpc-url https://ethereum-goerli.publicnode.com\n- - 8< - -\n```\n\nThe onliner script is a single line shell script that uses `cast` to execute the transaction.\n\nThe arguments passed to the oneliner script are passed to `cast send`,\nso you can provide keys with `--ledger`, `--private-key` or `--menmonics`,\noverride the `--rpc-url`\nand customize gas parameters at time of execution.\n\nTo see all options, just run `cast send --help`.\n\nTo double-check the contents of the oneliner script, you can use:\n```bash\nbase64 -d -i tx/2023-11-07-goerli-pause-3.sh.b64\n```\n\n### execute\n\nExecute the transaction in the network, example:\n\n```bash\ngo run presigner.go \\\n    --json-file tx/2023-11-06-goerli-pause-3.json \\\n    --private-key 0000000000000000000000000000000000000000000000000000000000000000 \\\n    execute\n```\n\nNote you need a private-key to execute the transaction, but it does not need to be a signer.\n\n\n## Safe error codes\n\nFrom [safe-contracts](https://github.com/safe-global/safe-contracts/blob/main/docs/error_codes.md) repo:\n\n### General init related\n- `GS000`: `Could not finish initialization`\n- `GS001`: `Threshold needs to be defined`\n- `GS002`: `A call to set up modules couldn't be executed because the destination account was not a contract`\n\n### General gas/ execution related\n- `GS010`: `Not enough gas to execute Safe transaction`\n- `GS011`: `Could not pay gas costs with ether`\n- `GS012`: `Could not pay gas costs with token`\n- `GS013`: `Safe transaction failed when gasPrice and safeTxGas were 0`\n\n### General signature validation related\n- `GS020`: `Signatures data too short`\n- `GS021`: `Invalid contract signature location: inside static part`\n- `GS022`: `Invalid contract signature location: length not present`\n- `GS023`: `Invalid contract signature location: data not complete`\n- `GS024`: `Invalid contract signature provided`\n- `GS025`: `Hash has not been approved`\n- `GS026`: `Invalid owner provided`\n\n### General auth related\n- `GS030`: `Only owners can approve a hash`\n- `GS031`: `Method can only be called from this contract`\n\n### Module management related\n- `GS100`: `Modules have already been initialized`\n- `GS101`: `Invalid module address provided`\n- `GS102`: `Module has already been added`\n- `GS103`: `Invalid prevModule, module pair provided`\n- `GS104`: `Method can only be called from an enabled module`\n- `GS105`: `Invalid starting point for fetching paginated modules`\n- `GS106`: `Invalid page size for fetching paginated modules`\n\n### Owner management related\n- `GS200`: `Owners have already been set up`\n- `GS201`: `Threshold cannot exceed owner count`\n- `GS202`: `Threshold needs to be greater than 0`\n- `GS203`: `Invalid owner address provided`\n- `GS204`: `Address is already an owner`\n- `GS205`: `Invalid prevOwner, owner pair provided`\n\n### Guard management related\n- `GS300`: `Guard does not implement IERC165`\n\n### Fallback handler related\n- `GS400`: `Fallback handler cannot be set to self`", "release_dates": []}, {"name": "provider", "description": "[Optimism] Custom ethers provider", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# NOTICE\n\nThis package is no longer functional. We'll be archiving it in a matter of days. Please do not continue to use this package!\n", "release_dates": ["2021-03-11T01:27:58Z", "2021-03-11T01:11:22Z", "2021-03-11T01:02:20Z"]}, {"name": "rainbowkit", "description": "The best way to connect a wallet \ud83c\udf08 \ud83e\uddf0", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<a href=\"https://rainbowkit.com\">\n  <img alt=\"rainbowkit\" src=\"https://user-images.githubusercontent.com/372831/168174718-685980e0-391e-4621-94a1-29bf83979fa5.png\" />\n</a>\n\n# RainbowKit\n\n**The best way to connect a wallet \ud83c\udf08**\n\nRainbowKit is a [React](https://reactjs.org/) library that makes it easy to add wallet connection to your dapp.\n\n- \ud83d\udd25 Out-of-the-box wallet management\n- \u2705 Easily customizable\n- \ud83e\udd84 Built on top of [wagmi](https://github.com/tmm/wagmi) and [ethers](https://docs.ethers.io)\n\n## Quick start\n\nYou can scaffold a new RainbowKit + [wagmi](https://wagmi.sh) + [Next.js](https://nextjs.org) app with one of the following commands, using your package manager of choice:\n\n```bash\nnpm init @rainbow-me/rainbowkit@latest\n# or\nyarn create @rainbow-me/rainbowkit@latest\n# or\npnpm create @rainbow-me/rainbowkit@latest\n```\n\n## Documentation\n\nFor full documentation, visit [rainbowkit.com](https://rainbowkit.com).\n\n### Try it out\n\nYou can use the CodeSandbox links below try out RainbowKit:\n\n- with [Create React App](https://codesandbox.io/s/rainbowkit-create-react-app-1vwx1r)\n- with [Create React App (TypeScript)](https://codesandbox.io/s/rainbowkit-create-typescript-app-xuxnqy)\n- with [Next.js](https://codesandbox.io/s/rainbowkit-nextjs-gz890p)\n\n## Examples\n\nThe following examples are provided in the [examples](./examples/) folder of this repo.\n\n- `with-create-react-app`\n- `with-next`\n- `with-next-custom-button`\n- `with-next-mint-nft`\n- `with-next-siwe-next-auth`\n- `with-next-siwe-iron-session`\n- `with-remix`\n\n### Running examples\n\nTo run an example locally, install dependencies.\n\n```bash\npnpm install\n```\n\nThen go into an example directory, eg: `with-next`.\n\n```bash\ncd examples/with-next\n```\n\nThen run the dev script.\n\n```bash\npnpm run dev\n```\n\n## Contributing\n\nPlease follow our [contributing guidelines](./.github/CONTRIBUTING.md).\n\n## License\n\nLicensed under the MIT License, Copyright \u00a9 2022-present [Rainbow](https://rainbow.me).\n\nSee [LICENSE](./LICENSE) for more information.\n", "release_dates": []}, {"name": "reference-optimistic-geth", "description": null, "language": "Go", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "# THIS REPOSITORY IS ARCHIVED. PLEASE USE [op-geth](https://github.com/ethereum-optimism/op-geth) INSTEAD.\n\n## Go Ethereum\n\nOfficial Golang implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.com/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.com/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\nAutomated builds are available for stable releases and the unstable master branch. Binary\narchives are published at https://geth.ethereum.org/downloads/.\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the [Installation Instructions](https://geth.ethereum.org/docs/install-and-build/installing-geth).\n\nBuilding `geth` requires both a Go (version 1.16 or later) and a C compiler. You can install\nthem using your favourite package manager. Once the dependencies are installed, run\n\n```shell\nmake geth\n```\n\nor, to build the full suite of utilities:\n\n```shell\nmake all\n```\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd`\ndirectory.\n\n|    Command    | Description|\n| :-----------: ||\n|  **`geth`**   | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI page](https://geth.ethereum.org/docs/interface/command-line-options) for command line options.          |\n|   `clef`    | Stand-alone signing tool, which can be used as a backend signer for `geth`.  |\n|   `devp2p`    | Utilities to interact with nodes on the networking layer, without running a full blockchain. |\n|   `abigen`    | Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://docs.soliditylang.org/en/develop/abi-spec.html) with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://geth.ethereum.org/docs/dapp/native-bindings) page for details. |\n|  `bootnode`   | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.                                                                                                                                                                                                                                                                 |\n|     `evm`     | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug run`).                                                                                                                                                                                                                                                                     |\n|   `rlpdump`   | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`).                                                                                                                                                                                                                                 |\n|   `puppeth`   | a CLI wizard that aids in creating a new Ethereum network.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n\n## Running `geth`\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://geth.ethereum.org/docs/interface/command-line-options)),\nbut we've enumerated a few common parameter combos to get you up to speed quickly\non how you can run your own `geth` instance.\n\n### Hardware Requirements\n\nMinimum:\n\n* CPU with 2+ cores\n* 4GB RAM\n* 1TB free storage space to sync the Mainnet\n* 8 MBit/sec download Internet service\n\nRecommended:\n\n* Fast CPU with 4+ cores\n* 16GB+ RAM\n* High Performance SSD with at least 1TB free space\n* 25+ MBit/sec download Internet service\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum\nnetwork: create accounts; transfer funds; deploy and interact with contracts. For this\nparticular use-case the user doesn't care about years-old historical data, so we can\nsync quickly to the current state of the network. To do so:\n\n```shell\n$ geth console\n```\n\nThis command will:\n * Start `geth` in snap sync mode (default, can be changed with the `--syncmode` flag),\n   causing it to download more data in exchange for avoiding processing the entire history\n   of the Ethereum network, which is very CPU intensive.\n * Start up `geth`'s built-in interactive [JavaScript console](https://geth.ethereum.org/docs/interface/javascript-console),\n   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md) \n   (note: the `web3` version bundled within `geth` is very old, and not up to date with official docs),\n   as well as `geth`'s own [management APIs](https://geth.ethereum.org/docs/rpc/server).\n   This tool is optional and if you leave it out you can always attach to an already running\n   `geth` instance with `geth attach`.\n\n### A Full node on the G\u00f6rli test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum\ncontracts, you almost certainly would like to do that without any real money involved until\nyou get the hang of the entire system. In other words, instead of attaching to the main\nnetwork, you want to join the **test** network with your node, which is fully equivalent to\nthe main network, but with play-Ether only.\n\n```shell\n$ geth --goerli console\n```\n\nThe `console` subcommand has the exact same meaning as above and they are equally\nuseful on the testnet too. Please, see above for their explanations if you've skipped here.\n\nSpecifying the `--goerli` flag, however, will reconfigure your `geth` instance a bit:\n\n * Instead of connecting the main Ethereum network, the client will connect to the G\u00f6rli\n   test network, which uses different P2P bootnodes, different network IDs and genesis\n   states.\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), `geth`\n   will nest itself one level deeper into a `goerli` subfolder (`~/.ethereum/goerli` on\n   Linux). Note, on OSX and Linux this also means that attaching to a running testnet node\n   requires the use of a custom endpoint since `geth attach` will try to attach to a\n   production node endpoint by default, e.g.,\n   `geth attach <datadir>/goerli/geth.ipc`. Windows users are not affected by\n   this.\n\n*Note: Although there are some internal protective measures to prevent transactions from\ncrossing over between the main network and test network, you should make sure to always\nuse separate accounts for play-money and real-money. Unless you manually move\naccounts, `geth` will by default correctly separate the two networks and will not make any\naccounts available between them.*\n\n### Full node on the Rinkeby test network\n\nGo Ethereum also supports connecting to the older proof-of-authority based test network\ncalled [*Rinkeby*](https://www.rinkeby.io) which is operated by members of the community.\n\n```shell\n$ geth --rinkeby console\n```\n\n### Full node on the Ropsten test network\n\nIn addition to G\u00f6rli and Rinkeby, Geth also supports the ancient Ropsten testnet. The\nRopsten test network is based on the Ethash proof-of-work consensus algorithm. As such,\nit has certain extra overhead and is more susceptible to reorganization attacks due to the\nnetwork's low difficulty/security.\n\n```shell\n$ geth --ropsten console\n```\n\n*Note: Older Geth configurations store the Ropsten database in the `testnet` subdirectory.*\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a\nconfiguration file via:\n\n```shell\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea how the file should look like you can use the `dumpconfig` subcommand to\nexport your existing configuration:\n\n```shell\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with `geth` v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using\nDocker:\n\n```shell\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start `geth` in snap-sync mode with a DB memory allowance of 1GB just as the\nabove command does.  It will also create a persistent volume in your home directory for\nsaving your blockchain as well as map the default ports. There is also an `alpine` tag\navailable for a slim version of the image.\n\nDo not forget `--http.addr 0.0.0.0`, if you want to access RPC from other containers\nand/or hosts. By default, `geth` binds to the local interface and RPC endpoints are not\naccessible from the outside.\n\n### Programmatically interfacing `geth` nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with `geth` and the\nEthereum network via your own programs and not manually through the console. To aid\nthis, `geth` has built-in support for a JSON-RPC based APIs ([standard APIs](https://ethereum.github.io/execution-apis/api-documentation/)\nand [`geth` specific APIs](https://geth.ethereum.org/docs/rpc/server)).\nThese can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based\nplatforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by `geth`,\nwhereas the HTTP and WS interfaces need to manually be enabled and only expose a\nsubset of APIs due to security reasons. These can be turned on/off and configured as\nyou'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--http` Enable the HTTP-RPC server\n  * `--http.addr` HTTP-RPC server listening interface (default: `localhost`)\n  * `--http.port` HTTP-RPC server listening port (default: `8545`)\n  * `--http.api` API's offered over the HTTP-RPC interface (default: `eth,net,web3`)\n  * `--http.corsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--ws.addr` WS-RPC server listening interface (default: `localhost`)\n  * `--ws.port` WS-RPC server listening port (default: `8546`)\n  * `--ws.api` API's offered over the WS-RPC interface (default: `eth,net,web3`)\n  * `--ws.origins` Origins from which to accept websockets requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: `admin,debug,eth,miner,net,personal,txpool,web3`)\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to\nconnect via HTTP, WS or IPC to a `geth` node configured with the above flags and you'll\nneed to speak [JSON-RPC](https://www.jsonrpc.org/specification) on all transports. You\ncan reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based\ntransport before doing so! Hackers on the internet are actively trying to subvert\nEthereum nodes with exposed APIs! Further, all browser tabs can access locally\nrunning web servers, so malicious web pages could try to subvert locally available\nAPIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for\ngranted in the official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be\naware of and agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n    \"chainId\": <arbitrary positive integer>,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0\n  },\n  \"alloc\": {},\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\": \"0x20000\",\n  \"extraData\": \"\",\n  \"gasLimit\": \"0x2fefd8\",\n  \"nonce\": \"0x0000000000000042\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\": \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing\nthe `nonce` to some random value so you prevent unknown remote nodes from being able\nto connect to you. If you'd like to pre-fund some accounts for easier testing, create\nthe accounts and populate the `alloc` field with their addresses.\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\n    \"balance\": \"111111111\"\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    \"balance\": \"222222222\"\n  }\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every**\n`geth` node with it prior to starting it up to ensure all blockchain parameters are correctly\nset:\n\n```shell\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to\nstart a bootstrap node that others can use to find each other in your network and/or over\nthe internet. The clean way is to configure and run a dedicated bootnode:\n\n```shell\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://ethereum.org/en/developers/docs/networking-layer/network-addresses/#enode)\nthat other nodes can use to connect to it and exchange peer information. Make sure to\nreplace the displayed IP address information (most probably `[::]`) with your externally\naccessible IP to get the actual `enode` URL.\n\n*Note: You could also use a full-fledged `geth` node as a bootnode, but it's the less\nrecommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try\n`telnet <ip> <port>` to ensure it's indeed reachable), start every subsequent `geth`\nnode pointed to the bootnode for peer discovery via the `--bootnodes` flag. It will\nprobably also be desirable to keep the data directory of your private network separated, so\ndo also specify a custom `--datadir` flag.\n\n```shell\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll\nalso need to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\nMining on the public Ethereum network is a complex task as it's only feasible using GPUs,\nrequiring an OpenCL or CUDA enabled `ethminer` instance. For information on such a\nsetup, please consult the [EtherMining subreddit](https://www.reddit.com/r/EtherMining/)\nand the [ethminer](https://github.com/ethereum-mining/ethminer) repository.\n\nIn a private network setting, however a single CPU miner instance is more than enough for\npractical purposes as it can produce a stable stream of blocks at the correct intervals\nwithout needing heavy resources (consider running on a single thread, no need for multiple\nones either). To start a `geth` instance for mining, run it with all your usual flags, extended\nby:\n\n```shell\n$ geth <usual-flags> --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all\nproceedings to the account specified by `--miner.etherbase`. You can further tune the mining\nby changing the default gas limit blocks converge to (`--miner.targetgaslimit`) and the price\ntransactions are accepted at (`--miner.gasprice`).\n\n## Contribution\n\nThank you for considering to help out with the source code! We welcome contributions\nfrom anyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit\nmore complex changes though, please check up with the core devs first on [our Discord Server](https://discord.gg/invite/nthXNEv)\nto ensure those changes are in line with the general philosophy of the project and/or get\nsome early feedback which can make both your efforts much lighter as well as our review\nand merge procedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting)\n   guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary)\n   guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://geth.ethereum.org/docs/developers/devguide)\nfor more details on configuring your environment, managing project dependencies, and\ntesting procedures.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html),\nalso included in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) is licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also\nincluded in our repository in the `COPYING` file.\n", "release_dates": []}, {"name": "regenesis", "description": "[Optimism] State Dumps & Regenesis Automation", "language": "JavaScript", "license": null, "readme": null, "release_dates": []}, {"name": "scaffold-op", "description": "A boilerplate for dApps on Optimism", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=320></a>\n  <br />\n  <br />\n</div>\n\n# \ud83c\udfd7\ud83d\udd34 Scaffold-OP\n\n<h4 align=\"center\">\n  <a href=\"https://docs.scaffoldeth.io\">Documentation</a> |\n  <a href=\"https://scaffoldeth.io\">Website</a>\n</h4>\n\nScaffold-OP is a fork of Scaffold-ETH2 with minimal differences, providing additional dApp examples, native support for Superchain testnets, and more low-level instructions. We highly recommend the Scaffold-ETH2 docs as the primary guideline.\n\n\ud83e\uddea An open-source, up-to-date toolkit for building decentralized applications (dapps) on the Ethereum blockchain. It's designed to make it easier for developers to create and deploy smart contracts and build user interfaces that interact with those contracts.\n\n\u2699\ufe0f Built using NextJS, RainbowKit, Hardhat, Wagmi, Viem, and Typescript.\n\n- \u2705 **Contract Hot Reload**: Your frontend auto-adapts to your smart contract as you edit it.\n- \ud83e\ude9d **[Custom hooks](https://docs.scaffoldeth.io/hooks/)**: Collection of React hooks wrapper around [wagmi](https://wagmi.sh/) to simplify interactions with smart contracts with typescript autocompletion.\n- \ud83e\uddf1 [**Components**](https://docs.scaffoldeth.io/components/): Collection of common web3 components to quickly build your frontend.\n- \ud83d\udd25 **Burner Wallet & Local Faucet**: Quickly test your application with a burner wallet and local faucet.\n- \ud83d\udd10 **Integration with Wallet Providers**: Connect to different wallet providers and interact with the Ethereum network.\n\n![Debug Contracts tab](https://github.com/ethereum-optimism/scaffold-op/blob/main/packages/nextjs/public/scaffold-op-landing.png)\n\n## Requirements\n\nBefore you begin, you need to install the following tools:\n\n- [Node (>= v18.17)](https://nodejs.org/en/download/)\n- Yarn ([v1](https://classic.yarnpkg.com/en/docs/install/) or [v2+](https://yarnpkg.com/getting-started/install))\n- [Git](https://git-scm.com/downloads)\n\n## Quickstart\n\nTo get started with Scaffold-OP, follow the steps below:\n\n1. Clone this repo & install dependencies\n\n```\ngit clone https://github.com/ethereum-optimism/scaffold-op.git\ncd scaffold-op\nyarn install\n```\n\n2. Run a local network in the first terminal:\n\n```\nyarn chain\n```\n\nThis command starts a local Ethereum network using Hardhat. The network runs on your local machine and can be used for testing and development. You can customize the network configuration in `hardhat.config.ts`.\n\n3. On a second terminal, deploy the test contract:\n\n```\nyarn deploy\n```\n\nThis command deploys a test smart contract to the local network. The contract is located in `packages/hardhat/contracts` and can be modified to suit your needs. The `yarn deploy` command uses the deploy script located in `packages/hardhat/deploy` to deploy the contract to the network. You can also customize the deploy script.\n\n4. On the same terminal, start your NextJS app:\n\n```\nyarn start\n```\n\nVisit your app on: `http://localhost:3000`. You can interact with your smart contract using the `Debug Contracts` page. You can tweak the app config in `packages/nextjs/scaffold.config.ts`.\n\nRun smart contract test with `yarn hardhat:test`\n\n- Edit your smart contract `YourContract.sol` in `packages/hardhat/contracts`\n- Edit your frontend in `packages/nextjs/pages`\n- Edit your deployment scripts in `packages/hardhat/deploy`\n\n## Deploy Contracts to Superchain Testnet(s)\n\nTo deploy contracts to a remote testnet (e.g. Optimism Sepolia), follow the steps below:\n\n1. Get Superchain Sepolia ETH from the [Superchain Faucet](https://app.optimism.io/faucet)\n\n2. Inside the `packages/hardhat` directory, copy `.env.example` to `.env`.\n\n   ```bash\n   cd packages/hardhat && cp .env.example .env\n   ```\n\n3. Edit your `.env` to specify the environment variables. Only specifying the`DEPLOYER_PRIVATE_KEY` is necessary here. The contracr will be deployed from the address associated with this private key, so make sure it has enough Sepolia ETH.\n\n   ```bash\n   DEPLOYER_PRIVATE_KEY = \"your_private_key_with_sepolia_ETH\";\n   ```\n\n4. Inside `scaffold-op`, run\n\n   ```bash\n   yarn deploy --network-options\n   ```\n\n   Use spacebar to make your selection(s). This command deploys all smart contracts in `packages/hardhat/contracts` to the selected network(s). Alternatively, you can try\n\n   ```bash\n   yarn deploy --network networkName\n   ```\n\n   Network names are found in `hardhat.config.js`. Please ensure you have enough Sepolia ETH on all these Superchains. If the deployments are successful, you will see the deployment tx hash on the terminal.\n\n## Adding Foundry\n\nHardhat's NodeJS stack and cleaner deployment management makes it a better default for Scaffold-OP.\n\nTo add Foundry to Scaffold-OP, follow this simple [tutorial](https://hardhat.org/hardhat-runner/docs/advanced/hardhat-and-foundry) by Hardhat. We recommend users who want more robust and faster testing to add Foundry.\n\n## Documentation\n\nWe highly recommend visiting the original [docs](https://docs.scaffoldeth.io) to learn how to start building with Scaffold-ETH 2.\n\nTo know more about its features, check out their [website](https://scaffoldeth.io).\n", "release_dates": []}, {"name": "scripts", "description": "[Optimism] Various misc. scripts", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# scripts\n\nA repo for prototyping small scripts.\n\n## Process\n\n### Script Format\nAll scripts are located in `./scripts` & each should have a header which describes the script's purpose and how to use it. For instance:\n\n```\n/*\n * This script is used to detect mismatched transactions between two nodes.\n * To use it simply make sure that the node's URLs are correctly set in your ENV.\n*/\n```\n\n### Turn Scripts into Tests\nSome scripts should actually be added to our [integration test suite](https://github.com/ethereum-optimism/integration-tests). For instance, the example script above could be very useful for sync service testing. If we notice a script that could be polished and added to the tests, we should label that script as `should be a test` & add it to our testing backlog.\n\n```\n/* [should be a test]\n * This script is used to detect mismatched transactions between two nodes.\n * To use it simply make sure that the node's URLs are correctly set in your ENV.\n*/\n```\n", "release_dates": []}, {"name": "service-base", "description": "[Optimism] A simple framework for stateful JS services", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# @eth-optimism/service-base\n\n## What is this?\n\n`@eth-optimism/service-base` is a package that exposes a `BaseService` JavaScript class that can be used to implement various stateful JavaScript services.\nNice!\n\nIf you aren't working on the back-end side of Optimism, you probably don't need to use this package.\nOtherwise, keep reading!\n\n## Installation\n\n### Via `npm`\n\n```\nnpm install @eth-optimism/service-base --save\n```\n\n### Via `yarn`\n\n```\nyarn add @eth-optimism/service-base --save\n```\n\n## Usage\n\n```typescript\nimport { BaseService } from '@eth-optimism/service-base'\n\ninterface MyServiceOptions {\n    // Options to be passed into the service\n}\n\nclass MyService extends BaseService<MyServiceOptions> {\n    protected name = 'My Service'\n    protected defaultOptions = {\n        // Fill these out if you want defaults for anything\n    }\n\n    protected async _init() {\n        // Do initialization logic here, will be called before anything else is run.\n    }\n\n    protected async _start() {\n        // Do stuff here. Gets called inside of `service.start()`.\n    }\n\n    protected async _stop() {\n        // Shut down things here. Gets called inside of `service.stop()`.\n    }\n}\n\nconst main = async () => {\n    const service = MyService({\n        // Options go here, if any.\n    })\n\n    await service.start()\n}\n\nmain()\n```\n", "release_dates": ["2021-03-09T01:36:58Z", "2021-03-02T00:23:14Z", "2021-03-01T23:32:11Z"]}, {"name": "smock", "description": "[Optimism] Solidity mock contracts in JavaScript", "language": "TypeScript", "license": null, "readme": "# @eth-optimism/smock\n\n## NOTICE\n\nSmock v1 is deprecated!\nPlease migrate to [Smock v2](https://github.com/defi-wonderland/smock).\nYou can find an archive of the Smock v1 codebase at [optimism@d337713c91](https://github.com/ethereum-optimism/optimism/tree/d337713c91c6634f546b8d6572392c0784ab8217/packages/smock).\n", "release_dates": ["2021-04-09T00:44:01Z", "2021-04-08T23:14:32Z", "2021-04-08T02:07:29Z", "2021-03-30T02:36:59Z", "2021-03-25T18:33:59Z", "2021-03-25T17:17:53Z", "2021-03-24T19:56:59Z"]}, {"name": "solc-bin", "description": "Current and historical (emscripten) binaries for Solidity", "language": null, "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# @eth-optimism/solc-bin\n\nCurrent and historical (emscripten) binaries for Optimism's custom Solidity compilers.\n", "release_dates": []}, {"name": "solc-js", "description": "Javascript bindings for the Solidity compiler", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "[![Build Status](https://img.shields.io/travis/ethereum/solc-js.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereum/solc-js)\n[![CircleCI](https://img.shields.io/circleci/project/github/ethereum/solc-js/master.svg?style=flat-square)](https://circleci.com/gh/ethereum/solc-js/tree/master)\n[![Coverage Status](https://img.shields.io/coveralls/ethereum/solc-js.svg?style=flat-square)](https://coveralls.io/r/ethereum/solc-js)\n\n# solc-js\n\nJavaScript bindings for the [Solidity compiler](https://github.com/ethereum/solidity).\n\nUses the Emscripten compiled Solidity found in the [solc-bin repository](https://github.com/ethereum/solc-bin).\n\n## Node.js Usage\n\nTo use the latest stable version of the Solidity compiler via Node.js you can install it via npm:\n\n```bash\nnpm install solc\n```\n\n### Usage on the Command-Line\n\nIf this package is installed globally (`npm install -g solc`), a command-line tool called `solcjs` will be available.\n\nTo see all the supported features, execute:\n\n```bash\nsolcjs --help\n```\n\nTo compile a contract that imports other contracts via relative paths:\n```bash\nsolcjs --bin --base-path . ./MainContract.sol\n```\nThe option ``--base-path`` enables automatic loading of imports from the filesystem and\ntakes a path as argument that contains the source files.\n\nNote: this commandline interface is not compatible with `solc` provided by the Solidity compiler package and thus cannot be\nused in combination with an Ethereum client via the `eth.compile.solidity()` RPC method. Please refer to the\n[Solidity compiler documentation](https://solidity.readthedocs.io/) for instructions to install `solc`.\nFurthermore, the commandline interface to solc-js provides fewer features than the binary release.\n\n### Usage in Projects\n\nThere are two ways to use `solc`:\n\n1. Through a high-level API giving a uniform interface to all compiler versions\n2. Through a low-level API giving access to all the compiler interfaces, which depend on the version of the compiler\n\n#### High-level API\n\nThe high-level API consists of a single method, `compile`, which expects the [Compiler Standard Input and Output JSON](https://solidity.readthedocs.io/en/v0.5.0/using-the-compiler.html#compiler-input-and-output-json-description).\n\nIt also accepts an optional set of callback functions, which include the ``import`` and the ``smtSolver`` callbacks.\nStarting 0.6.0 it only accepts an object in place of the callback to supply the callbacks.\n\nThe ``import`` callback function is used to resolve unmet dependencies.\nThis callback receives a path and must synchronously return either an error or the content of the dependency\nas a string.  It cannot be used together with callback-based, asynchronous,\nfilesystem access. A workaround is to collect the names of dependencies, return\nan error, and keep re-running the compiler until all of them are resolved.\n\n#### Example usage without the import callback\n\nExample:\n\n```javascript\nvar solc = require('solc');\n\nvar input = {\n  language: 'Solidity',\n  sources: {\n    'test.sol': {\n      content: 'contract C { function f() public { } }'\n    }\n  },\n  settings: {\n    outputSelection: {\n      '*': {\n        '*': ['*']\n      }\n    }\n  }\n};\n\nvar output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n// `output` here contains the JSON output as specified in the documentation\nfor (var contractName in output.contracts['test.sol']) {\n  console.log(\n    contractName +\n      ': ' +\n      output.contracts['test.sol'][contractName].evm.bytecode.object\n  );\n}\n```\n\n#### Example usage with import callback\n\n```javascript\nvar solc = require('solc');\n\nvar input = {\n  language: 'Solidity',\n  sources: {\n    'test.sol': {\n      content: 'import \"lib.sol\"; contract C { function f() public { L.f(); } }'\n    }\n  },\n  settings: {\n    outputSelection: {\n      '*': {\n        '*': ['*']\n      }\n    }\n  }\n};\n\nfunction findImports(path) {\n  if (path === 'lib.sol')\n    return {\n      contents:\n        'library L { function f() internal returns (uint) { return 7; } }'\n    };\n  else return { error: 'File not found' };\n}\n\n// New syntax (supported from 0.5.12, mandatory from 0.6.0)\nvar output = JSON.parse(\n  solc.compile(JSON.stringify(input), { import: findImports })\n);\n\n// `output` here contains the JSON output as specified in the documentation\nfor (var contractName in output.contracts['test.sol']) {\n  console.log(\n    contractName +\n      ': ' +\n      output.contracts['test.sol'][contractName].evm.bytecode.object\n  );\n}\n```\n\nThe ``smtSolver`` callback function is used to solve SMT queries generated by\nSolidity's SMTChecker.  If you have an SMT solver installed locally, it can\nbe used to solve the given queries, where the callback must synchronously\nreturn either an error or the result from the solver.  A default\n``smtSolver`` callback is distributed by ``solc-js``, which relies on either\nZ3 or CVC4 being installed locally.\n\n#### Example usage with smtSolver callback\n\n```javascript\nvar solc = require('solc');\nvar smt = require('smtsolver');\n// Note that this example only works via node and not in the browser.\n\nvar input = {\n  language: 'Solidity',\n  sources: {\n    'test.sol': {\n      content: 'pragma experimental SMTChecker; contract C { function f(uint x) public { assert(x > 0); } }'\n    }\n  }\n};\n\nvar output = JSON.parse(\n  solc.compile(JSON.stringify(input), { smtSolver: smt.smtSolver })\n);\n\n```\nThe assertion is clearly false, and an ``assertion failure`` warning\nshould be returned.\n\n#### Low-level API\n\nThe low-level API is as follows:\n\n- `solc.lowlevel.compileSingle`: the original entry point, supports only a single file\n- `solc.lowlevel.compileMulti`: this supports multiple files, introduced in 0.1.6\n- `solc.lowlevel.compileCallback`: this supports callbacks, introduced in 0.2.1\n- `solc.lowlevel.compileStandard`: this works just like `compile` above, but is only present in compilers after (and including) 0.4.11\n\nFor examples how to use them, please refer to the README of the above mentioned solc-js releases.\n\n### Using with Electron\n\n**Note:**\nIf you are using Electron, `nodeIntegration` is on for `BrowserWindow` by default. If it is on, Electron will provide a `require` method which will not behave as expected and this may cause calls, such as `require('solc')`, to fail.\n\nTo turn off `nodeIntegration`, use the following:\n\n```javascript\nnew BrowserWindow({\n  webPreferences: {\n    nodeIntegration: false\n  }\n});\n```\n\n### Using a Legacy Version\n\nIn order to compile contracts using a specific version of Solidity, the `solc.loadRemoteVersion(version, callback)` method is available. This returns a new `solc` object that uses a version of the compiler specified.\n\nYou can also load the \"binary\" manually and use `setupMethods` to create the familiar wrapper functions described above:\n`var solc = solc.setupMethods(require(\"/my/local/soljson.js\"))`.\n\n### Using the Latest Development Snapshot\n\nBy default, the npm version is only created for releases. This prevents people from deploying contracts with non-release versions because they are less stable and harder to verify. If you would like to use the latest development snapshot (at your own risk!), you may use the following example code.\n\n```javascript\nvar solc = require('solc');\n\n// getting the development snapshot\nsolc.loadRemoteVersion('latest', function(err, solcSnapshot) {\n  if (err) {\n    // An error was encountered, display and quit\n  } else {\n    // NOTE: Use `solcSnapshot` here with the same interface `solc` has\n  }\n});\n```\n\n### Linking Bytecode\n\nWhen using libraries, the resulting bytecode will contain placeholders for the real addresses of the referenced libraries. These have to be updated, via a process called linking, before deploying the contract.\n\nThe `linker` module (`require('solc/linker')`) offers helpers to accomplish this.\n\nThe `linkBytecode` method provides a simple helper for linking:\n\n```javascript\nvar linker = require('solc/linker');\n\nbytecode = linker.linkBytecode(bytecode, { MyLibrary: '0x123456...' });\n```\n\nAs of Solidity 0.4.11 the compiler supports [standard JSON input and output](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description) which outputs a _link references_ map. This gives a map of library names to offsets in the bytecode to replace the addresses at. It also doesn't have the limitation on library file and contract name lengths.\n\nThere is a method available in the `linker` module called `findLinkReferences` which can find such link references in bytecode produced by an older compiler:\n\n```javascript\nvar linker = require('solc/linker');\n\nvar linkReferences = linker.findLinkReferences(bytecode);\n```\n\n### Updating the ABI\n\nThe ABI generated by Solidity versions can differ slightly, due to new features introduced. There is a tool included which aims to translate the ABI generated by an older Solidity version to conform to the latest standard.\n\nIt can be used as:\n\n```javascript\nvar abi = require('solc/abi');\n\nvar inputABI = [\n  {\n    constant: false,\n    inputs: [],\n    name: 'hello',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    type: 'function'\n  }\n];\nvar outputABI = abi.update('0.3.6', inputABI);\n// Output contains: [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"type\":\"function\"},{\"type\":\"fallback\",\"payable\":true}]\n```\n\n### Formatting old JSON assembly output\n\nThere is a helper available to format old JSON assembly output into a text familiar to earlier users of Remix IDE.\n\n```\nvar translate = require('solc/translate')\n\n// assemblyJSON refers to the JSON of the given assembly and sourceCode is the source of which the assembly was generated from\nvar output = translate.prettyPrintLegacyAssemblyJSON(assemblyJSON, sourceCode)\n```\n\n## Browser Usage\n\nAdd the version of `solc` you want to use into `index.html`:\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"https://solc-bin.ethereum.org/bin/{{ SOLC VERSION }}.js\"\n></script>\n```\n\n(Alternatively use `https://solc-bin.ethereum.org/bin/soljson-latest.js` to get the latests version.)\n\nThis will load `solc` into the global variable `window.Module`. Then use this inside Javascript as:\n\n```javascript\nvar wrapper = require('solc/wrapper');\nvar solc = wrapper(window.Module);\n```\n\nOr in ES6 syntax:\n\n```javascript\nimport * as wrapper from 'solc/wrapper';\nconst solc = wrapper(window.Module);\n```\n\nAlternatively, to iterate the releases, one can load `list.js` from `solc-bin`:\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"https://solc-bin.ethereum.org/bin/list.js\"\n></script>\n```\n\nThis will result in two global variables, `window.soljsonReleases` listing all releases and `window.soljsonSources` listing all nightly builds and releases.\n", "release_dates": []}, {"name": "solidity", "description": "[Optimism] (Slightly) modified Solidity compiler", "language": "C++", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# The Solidity Contract-Oriented Programming Language\n[![Join the chat at https://gitter.im/ethereum/solidity](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ethereum/solidity?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nSolidity is a statically typed, contract-oriented, high-level language for implementing smart contracts on the Ethereum platform.\n\n## Table of Contents\n\n- [Background](#background)\n- [Build and Install](#build-and-install)\n- [Example](#example)\n- [Documentation](#documentation)\n- [Development](#development)\n- [Maintainers](#maintainers)\n- [License](#license)\n\n## Background\n\nSolidity is a statically-typed curly-braces programming language designed for developing smart contracts\nthat run on the Ethereum Virtual Machine. Smart contracts are programs that are executed inside a peer-to-peer\nnetwork where nobody has special authority over the execution, and thus they allow to implement tokens of value,\nownership, voting and other kinds of logics.\n\nWhen deploying contracts, you should use the latest released version of Solidity. This is because breaking changes as well as new features and bug fixes are introduced regularly. We currently use a 0.x version number [to indicate this fast pace of change](https://semver.org/#spec-item-4).\n\n## Build and Install\n\nInstructions about how to build and install the Solidity compiler can be found in the [Solidity documentation](https://solidity.readthedocs.io/en/latest/installing-solidity.html#building-from-source).\n\n\n## Example\n\nA \"Hello World\" program in Solidity is of even less use than in other languages, but still:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract HelloWorld {\n  function helloWorld() external pure returns (string memory) {\n    return \"Hello, World!\";\n  }\n}\n```\n\nTo get started with Solidity, you can use [Remix](https://remix.ethereum.org/), which is an\nbrowser-based IDE. Here are some example contracts:\n\n1. [Voting](https://solidity.readthedocs.io/en/latest/solidity-by-example.html#voting)\n2. [Blind Auction](https://solidity.readthedocs.io/en/latest/solidity-by-example.html#blind-auction)\n3. [Safe remote purchase](https://solidity.readthedocs.io/en/latest/solidity-by-example.html#safe-remote-purchase)\n4. [Micropayment Channel](https://solidity.readthedocs.io/en/latest/solidity-by-example.html#micropayment-channel)\n\n## Documentation\n\nThe Solidity documentation is hosted at [Read the docs](https://solidity.readthedocs.io).\n\n## Development\n\nSolidity is still under development. Contributions are always welcome!\nPlease follow the\n[Developers Guide](https://solidity.readthedocs.io/en/latest/contributing.html)\nif you want to help.\n\nYou can find our current feature and bug priorities for forthcoming releases [in the projects section](https://github.com/ethereum/solidity/projects).\n\n## Maintainers\n* [@axic](https://github.com/axic)\n* [@chriseth](https://github.com/chriseth)\n\n## License\nSolidity is licensed under [GNU General Public License v3.0](LICENSE.txt).\n\nSome third-party code has its [own licensing terms](cmake/templates/license.h.in).\n", "release_dates": []}, {"name": "sourcify", "description": "Solidity re-compiler that can be used to verify that bytecode corresponds to certain source code", "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Sourcify \ud83e\uddd1\u200d\ud83d\udcbb\ud83d\udcdd\ud83d\udd0d\n\nSourcify wants to help make contract interactions on the blockchain safer and more transparent for users.\n\nTo achieve this goal, Sourcify supports several efforts to foster adoption of open-source source file verification, metadata files and NatSpec comments.\n\n**\u2139\ufe0f [This repository](https://github.com/ethereum/sourcify) only contains the main components, the Sourcify monorepo with main services and the verification UI. The [Sourcify Github organization](https://github.com/sourcifyeth) contains all other auxiliary services and components.**\n\nAt its core, Sourcify currently maintains:\n\n- an [interface](https://github.com/sourcifyeth/sourcify/tree/master/ui) that helps developers to verify metadata and contract source code. It is accessible via [sourcify.dev](https://sourcify.dev/).\n- a decentralized contract repository of all verified contracts, powered by IPFS, accessible via [sourcify.dev](https://sourcify.dev/) and [verificat.eth](verificat.eth.link).\n- a monitoring & verifier service that checks for new contracts on selected EVM-compatible chains and tries to verify them automatically.\n- verify & fetch plugins for several IDEs.\n\nSourcify aims to provide a base layer allowing other tools build on top of it. Its main purpose is to keep metadata and source files available via IPFS and Swarm (preventing that the links in the bytecode turn into dead links).\n\nBesides the technical infrastructure, Sourcify is also a collective initiative to bring transparency and awareness to the space. We want to educate and build bridges between development tools, wallets, interfaces and other components which all play an important role in demystifying interaction with smart contracts for the end user and hence making blockchain interactions safer.\n\n**Have questions or improvement ideas?**\n\n\ud83d\udcac Chat with us on [Gitter](https://gitter.im/ethereum/source-verify) or [Discord](https://discord.gg/8WEykm2aHC) (channels are bridged).\n\n\ud83c\udf10 Follow us and help us spread the word on [Twitter](https://twitter.com/SourcifyEth).\n\n## The Basic Concept\n\nSourcify verifies that Ethereum bytecode was compiled from a certain\nSolidity source code and maintains a public repository of contract metadata.\n\nThe repository indexes metadata with IPFS or Swarm hashes which the solc compiler\nembeds in contract bytecode. By fetching code on-chain and extracting this hash,\nit is possible to obtain related metadata from Sourcify's records.\n\nRead more about Sourcify in the [FAQ](https://solidity.ethereum.org/2020/06/25/sourcify-faq/).\nInformation on metadata can be found in [Solidity documentation][30].\n\n[30]: https://solidity.readthedocs.io/en/latest/metadata.html#contract-metadata\n\n## The Technical Details\n\nAs mentioned above, Sourcify has several components:\n\n- a \"monitoring & verifier service\" which watches public Ethereum networks for contract deployments\n  and tries to associate them with sources and metadata published to Swarm or IPFS. It currently\n  watches Ethereum mainnet and test networks, and other EVM based chains listed [here](#supported-networks)\n\n- a website which allows you to submit sources and metadata for a specific contract address manually\n\n  - https://sourcify.dev (Stable)\n  - https://staging.sourcify.dev (Unstable)\n  - https://draft.staging.sourcify.dev (New UI design)\n\n- a public metadata repository that contains uploaded (or discovered) metadata and their sources:\n  - https://repo.sourcify.dev (Stable)\n  - https://repo.staging.sourcify.dev (Unstable)\n\n### Getting Metadata\n\nUsing solc directly on the commandline:\n\n```\nsolc --metadata --metadata-literal <mySource.sol>\n```\n\nor with JSON/IO\n\n```\n{\n  \"settings\": {\n    \"metadata\": { \"useLiteralContent\": true }\n  }\n}\n```\n\n### Using the Monitoring Service\n\nIf your Solidity code compiles with solc >= 0.6.0, all you need to do is to upload your\ncontract metadata and sources to IPFS as part of your deployment process. The monitoring service will\nautomatically add your files to the metadata repository when it sees your contract created on the\nnetwork.\n\nA simple example for Truffle projects can be found at [cgewecke/metacoin-source-verify][40]\nwhich contains [a script][41] to publish to IPFS directly from a Truffle compilation artifact.\n\n[40]: https://github.com/cgewecke/metacoin-source-verify\n[41]: https://github.com/cgewecke/metacoin-source-verify/blob/master/scripts/ipfs.js\n\n### Security Precautions\n\nPlease note that source code verification is only reliable if it is performed\non the **creation** bytecode, i.e. the bytecode payload used when the contract\nwas created. The deployed bytecode, i.e. the bytecode stored in the blockchain\nas code is not sufficient, because the constructor can still be different and\nset arbitrary storage entries.\n\nFurthermore, if the constructor requires parameters, these have to be checked\nas well.\n\nAlso note that there can still be differences in the source code that are not\nvisible in the bytecode. Variables can be renamed or unused code can be\nintroduced. Since the bytecode contains a hash of the source code, such\nmodifications have to be prepared at deploy time, but it is still a possibility.\n\n### Pinning the Repository on IPFS\n\nPin and help us decentralize the Sourcify repository!\n\nRefer to [the guide](https://github.com/wmitsuda/otterscan/blob/develop/docs/ipfs.md#pinning-sourcify-locally) by @wmitsuda\n\n### Using the Repository\n\nThere is a repository which contains all the files that the monitoring service has found\non the networks that are being watched.\n\nThe repository is accessible via this [link](https://repo.sourcify.dev/).\n\nThe repository UI currently looks like this:\n<img src=\"./public/ui_start.png\" width=\"80%\"/>\n\nIt offers the option to search, download or open folders.\n\nFor example to download:\n\n<img src=\"./public/download.png\" width=\"80%\"/>\n\nOr if you want to search something:\n\n<img src=\"./public/search.png\" width=\"80%\"/>\n\nThe metadata inside is visible as raw, and can be downloaded like that:\n\n<img src=\"./public/metadata.png\" width=\"80%\"/>\n\nAlternatively, if you want to take a look at the contract in the browser, you can open it like this:\n\n<img src=\"./public/sol.png\" width=\"80%\"/>\n\n## Future Plans\n\n- cope with metadata that does not have in-place source code\n- automatically retrieve the metadata and the source code from SWARM or IPFS,\n  so you only need to supply the metadata hash or bytecode\n- perform source verification given only an address instead of the bytecode\n  or the metadata\n\n### How to\n\n## Install and run server with UI\n\n```\n$ npx lerna bootstrap\n$ npx lerna run build\n$ npm run server:start\n$ npm run dev:ui\n```\n\n## Run inside docker\n\n### Prerequisites\n\n[Docker](https://docs.docker.com/docker-for-mac/install/)\n\n[Docker-compose](https://docs.docker.com/compose/install/)\n\n### How to run\n\nPrepare environment and start by running these commands from the `environments` directory:\nTo build images locally run:\n`docker-compose -f geth.yaml -f ipfs.yaml -f localchain.yaml -f monitor.yaml -f repository.yaml -f s3.yaml -f server.yaml -f ui.yaml -f build-ipfs.yaml -f build-localchain.yaml -f build-monitor.yaml -f build-repository.yaml -f build-s3.yaml -f build-server.yaml -f build-ui.yaml build --parallel`\n\nIf you just want to run it do:\n`docker-compose -f ipfs.yaml -f localchain.yaml -f monitor.yaml -f repository.yaml -f s3.yaml -f server.yaml -f ui.yaml up -d` (-d flag means that output won't be printed in stdout)\n\nNote: you don't need to run all the services, just the ones you want.\n\n### How to run\n\n## Development\n\n**Launch**\n\n```\ncp .env.testing .env\ndocker-compose -f ipfs.yaml -f localchain.yaml -f monitor.yaml -f repository.yaml -f s3.yaml -f server.yaml -f ui.yaml up -d\n```\n\nOther approach would be to run every service in docker except one that you are working on.\n\nThis will build the project in docker containers, launching the monitor and server.\nVerified sources and contract addresses will be stored in `repository` and `db` folders\nin your project root. The directories are created automatically if they don't exist.\n\n`/ui/dist/index.html` will be served to **http://localhost:1234**\n\n**UI**\n\nTo help with manual UI testing, some contracts whose sources and metadata can be found in the\n`test/sources/all` folder are automatically deployed to a local ganache instance running\non port 8545. Their contract addresses are deterministically generated at:\n\n| Contracts            | Addresses                                  |\n| -------------------- | ------------------------------------------ |\n| Simple.sol           | 0x8168f192F7432C93FCb16e039B57FB890AaB3230 |\n| SimpleWithImport.sol | 0x0Ef7de872C7110d6020fa5e62d7cD31Fd90FF811 |\n\nSimilar sources are also pre-deployed to **Ropsten** and can be found in the `test/sources/ropsten` folder:\n\n| Contracts            | Addresses                                  |\n| -------------------- | ------------------------------------------ |\n| Simple.sol           | 0xEB6Cf7952c666F81f1a5678E80D4fC5Ce3a7bF0b |\n| SimpleWithImport.sol | 0x4668b709182F41837c4e06C8de1D3568df7778D9 |\n\n**Shutdown**\nStop the docker run with `ctrl+c`.\nTo remove exited containers type `docker-compose -f server.yaml -f ... down`. You can list all previously started containers with `-f` flag.\n\n### Tests\n\nRun tests with:\n\n```\nlerna run test\n```\n\n`test/sources` contains contracts, compilation artifacts and metadata files which can be used for\nbuilding test cases.\n\n- **contracts/**: Solidity files (browser tests)\n- **metadata/**: raw metadata files (browser tests)\n- **pass/**: compilation artifacts which should verify (unit tests)\n- **fail/**: compilation artifacts which should not verify (unit tests)\n- **compiler.json**: compiler config for generating more cases\n\nTest sources are compiled with 0x's [sol-compiler][22]. This lets you pick any compiler version or\nsettings by modifying the `compiler.json` file as needed.\n\nTo generate more test data, go to the `test/sources` directory, add Solidity files to the\n`contracts` folder and run:\n\n```\nnpx sol-compiler\n```\n\nCompilation artifacts will be written to an `artifacts` folder.\n\n[22]: https://sol-compiler.com/\n\n# API\n\nWe also provide publicly available API for both environments that you can use.\nYou can find examples in our Postman collection in the root of this project `Sourcify.postman_collection.json`.\n\n### Server API\n\n- [Check by addresses](docs/api/server/verification1/check-by-addresses.md) : `GET /check-by-addresses?addresses={address}&chainIds={chainIds}`\n- Verification API (v1)\n  - [Verify](docs/api/server/verification1/verify.md) : `POST /` or `POST /verify`\n- Verification API (v2 - session based)\n  - [Add input files](docs/api/server/verification2/input-files.md) : `POST /input-files`\n  - [Verify validated](docs/api/server/verification2/verify-validated.md) : `POST /verify-validated`\n  - [Get session data](docs/api/server/verification2/session-data.md) : `GET /session-data`\n  - [Restart session](docs/api/server/verification2/restart-session.md) : `POST /restart-session`\n- [Get file tree (full match)](docs/api/server/getTreeByChainAndAddress.md) : `GET /files/tree/:chain/:address`\n- [Get source files (full match)](docs/api/server/getByChainAndAddress.md) : `GET /files/:chain/:address`\n- [Get file tree (full or partial match)](docs/api/server/getAnyTreeByChainAndAddress.md) : `GET /files/tree/any/:chain/:address`\n- [Get source files (full or partial match)](docs/api/server/getAnyByChainAndAddress.md) : `GET /files/any/:chain/:address`\n- [Get contract addresses (full or partial match)](docs/api/server/getContractsByChain.md) : `GET /files/contracts/:chain`\n- [Server health](docs/api/server/health.md) : `GET /health`\n\n### Repository API\n\nThis paragraph should be read with the following in mind:\n\n- `<MATCH_QUALITY>` is either `full_match` or `partial_match`.\n- `<CHAIN_ID>` is the respective ID of the chain (e.g. 1 for Ethereum Mainnet, 5 for G\u00f6rli). See the full list [here](https://chainid.network/).\n- `<CONTRACT_ADDRESS>` is the hexadecimal address of the contract (40 hex digits prefixed by `0x`).\n- `<FILE_PATH>` is the original path of a source file. Sourcify doesn't flatten the file hierarchy, so everything is provided as during compilation.\n\nThe repository (https://repo.sourcify.dev) provides the following GET endpoints:\n\n- JSON-formatted metadata file (with ABI): `/contracts/<MATCH_QUALITY>/<CHAIN_ID>/<CONTRACT_ADDRESS>/metadata.json`\n- JSON-formatted file with constructor arguments (only for fully matched contracts using [immutable variables](https://ethereum.stackexchange.com/questions/82240/what-is-the-immutable-keyword-in-solidity)): `/contracts/full_match/<CHAIN_ID>/<CONTRACT_ADDRESS>/constructor-args.txt`\n- JSON-formatted file mapping library address placeholders to actual addresses: `/contracts/<MATCH_QUALITY>/<CHAIN_ID>/<CONTRACT_ADDRESS>/library-map.json`\n- Source file: `/contracts/<MATCH_QUALITY>/<CHAIN_ID>/<CONTRACT_ADDRESS>/sources/<FILE_PATH>`\n- JSON-formatted full and partial match count per chain: `/stats.json`\n- JSON-formatted timestamp and version of the repo: `/manifest.json`\n\nE.g. the following URL fetches `browser/OceanMan.sol`, a source of the contract deployed on Ethereum Mainnet (chain ID: 1) at address 0x00000000064Ecc11c97AC4a5551F279532Bf9E0D.\n\n- https://repo.sourcify.dev/contracts/full_match/1/0x00000000064Ecc11c97AC4a5551F279532Bf9E0D/sources/browser/OceanMan.sol\n\nIn order to fetch from the staging repository, replace https://repo.sourcify.dev with https://repo.staging.sourcify.dev.\n\n# Supported Networks\n\n- Ethereum Mainnet\n- Ropsten\n- Rinkeby\n- Kovan\n- Goerli\n- xDai\n- POA Network Sokol\n- Polygon (previously Matic)\n- Mumbai Testnet (Polygon/Matic)\n- Binance Smart Chain Mainnet (monitoring temporarily suspended)\n- Binance Smart Chain Testnet (monitoring temporarily suspended)\n- Celo Mainnet\n- Celo Alfajores Testnet\n- Celo Baklava Testnet\n- Avalanche Mainnet\n- Avalanche Fuji Testnet\n- Arbitrum Mainnet\n- Arbitrum Testnet Rinkeby\n- Ubiq\n- OneLedger Testnet Frankenstein\n- Syscoin Tanenbaum Testnet\n\n## Adding a new chain\n\nIf you'd like to add a new chain support to Sourcify you can open a pull request to the **staging** branch with following:\n\n- Make sure the chain is listed in [chains.json](services/core/src/chains.json). This file is kept in sync with [chainlist.org](https://chainlist.org/chains.json) and should not be edited.\n\n- Add the chain details in [sourcify-chains.ts](services/core/src/sourcify-chains.ts) similar to other chains with `supported: true` and `monitored: false`.\n\n- Add the chain to the front-end in [constants.ts](ui/src/common/constants.ts)\n\n- Provide a test contract on the chain with address, source code, and metadata file in the pull request.\n\n# Contributing\n\nWhen opening a pull request, please set the base branch as **staging**. Direct merges to master is not possible.\n", "release_dates": []}, {"name": "specs", "description": null, "language": "Just", "license": {"key": "cc0-1.0", "name": "Creative Commons Zero v1.0 Universal", "spdx_id": "CC0-1.0", "url": "https://api.github.com/licenses/cc0-1.0", "node_id": "MDc6TGljZW5zZTY="}, "readme": "<div align=\"center\">\n  <br />\n  <br />\n  <a href=\"https://optimism.io\"><img alt=\"Optimism\" src=\"https://raw.githubusercontent.com/ethereum-optimism/brand-kit/main/assets/svg/OPTIMISM-R.svg\" width=600></a>\n  <br />\n  <h3><a href=\"https://optimism.io\">Optimism</a> is Ethereum, scaled.</h3>\n  <br />\n</div>\n\n## OP Stack Specification\n\nThis repository contains the [Specs Book](https://static.optimism.io/specs).\n\n## Contributing\n\n### Dependencies\n\n**Rust Toolchain**\n\n```sh\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n**`mdbook` + plugins**\n\n```sh\ncargo install mdbook mdbook-katex mdbook-linkcheck mdbook-mermaid\n```\n\n### Serving the book locally\n\n```sh\njust serve\n```\n\n### Linting\n\n`doctoc` is used to automatically add a table of contents.\n\n```sh\njust lint-specs-toc-check\n```\n\nTo fix markdown linting errors:\n\n```sh\njust lint-specs-md-fix\n```\n\nSee the [markdownlint rule reference](https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md)\nand an example [config file](https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc).\n\nJustification for linting rules in\n[.markdownlint.json](https://github.com/ethereum-optimism/specs/blob/main/.markdownlint.json):\n\n- _line_length_ (`!strict && stern`): don't trip up on url lines\n- _no-blanks-blockquote_: enable multiple consecutive blockquotes separated by white lines\n- _single-title_: enable reusing `<h1>` for content\n- _no-emphasis-as-heading_: enable emphasized paragraphs\n\nTo lint links:\n\n```sh\njust lint-links\n```\n\n[lychee][lychee] is used for linting links.\n", "release_dates": []}, {"name": "stack-docs", "description": "OP Stack documentation", "language": "Vue", "license": null, "readme": "# [DEPRECATED] The OP Stack Docs\n\nThis documentation is deprecated. Please use our new [technical documentation](https://docs.optimism.io/stack/getting-started).\n\n[![Discord](https://img.shields.io/discord/667044843901681675.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discord.gg/optimism)\n[![Twitter Follow](https://img.shields.io/twitter/follow/optimismPBC.svg?label=optimismPBC&style=social)](https://twitter.com/optimismPBC)\n\nThe OP Stack is an open, collectively maintained development stack for blockchain ecosystems.\nThis repository contains the source code for the [OP Stack Docs](https://stack.optimism.io).\n\n## Development\n\n### Serving docs locally\n\n```sh\nyarn dev\n```\n\nThen navigate to [http://localhost:8080](http://localhost:8080).\nIf that link doesn't work, double check the output of `yarn dev`.\nYou might already be serving something on port 8080 and the site may be on another port (e.g., 8081).\n\n### Building docs for production\n\n```sh\nyarn build\n```\n\nYou probably don't need to run this command, but now you know.\n\n### Editing docs\n\nEdit the markdown directly in [src/docs](./src/docs).\n\n### Adding new docs\n\nAdd your markdown files to [src/docs](./src/docs).\nYou will also have to update [src/.vuepress/config.js](./src/.vuepress/config.js) if you want these docs to show up in the sidebar.\n\n### Updating the theme\n\nWe currently use an ejected version of [vuepress-theme-hope](https://vuepress-theme-hope.github.io/).\nSince the version we use was ejected from the original theme, you'll see a bunch of compiled JavaScript files instead of the original TypeScript files.\nThere's not much we can do about that right now, so you'll just need to make do and edit the raw JS if you need to make theme adjustments.\nWe're planning to move away from VuePress relatively soon anyway so we won't be fixing this.\n", "release_dates": []}, {"name": "superchain-ops", "description": null, "language": "Just", "license": null, "readme": "# superchain-ops\n\nThis repo contains execution code and artifacts related to superchain deployments and other tasks.\n\nThis repo is structured with each network having a high level directory which contains sub directories of any \"tasks\" which have occured on that network.\n\nTasks include:\n\n- new contract deployments\n- contract upgrades\n- onchain configuration changes\n\nEffectively any significant change to the state of the network, requiring authorization to execute, should be considered a task.\n\n## Directory structure\n\nTop level direct names should be the [EIP 3770](https://eips.ethereum.org/EIPS/eip-3770) short name for the network (see [shortNameMapping.json](https://chainid.network/shortNameMapping.json))\n\nEach task will have a directory structure similar to the following:\n\n- `task-name.json`: A json file which defines the task to be executed. This file may either be generated automatically or manually created.\n- `.env`: a place to store env variables specific to this task\n- `/records/`: foundry will autogenerate files here as a result of executing the task\n- `/script/`: (optional) for storing one-off scripts\n\n## Installation\n\nThe following instructions are for MacOS, but should be similar for other operating systems.\n\nFor each of these steps, if you already have some version of the software installed, it should be safe to skip it.\n\n### Installing git\n\nVery likely you have git on your system. To verify this, open a Terminal and type `git --version`.\nIf an error message shows, these are the steps to download and install it:\n\n1. Go to the official Git website at https://git-scm.com/downloads\n1. Download the appropriate installer for your operating system.\n1. Run the installer and follow the instructions.\n1. Once the installation is complete, open a command prompt or Git Bash and type `git --version`. You should see the version number of Git that you just installed.\n\n### Installing Go\n\n1. Go to the official Go website at https://golang.org/dl/\n1. Download the appropriate installer for your operating system.\n1. Run the installer and follow the instructions.\n\nFrom the command prompt:\nType `go version`.\n\nYou should see the version number of Go that you just installed.\n\n### Installing Cargo (and Rust)\n\n1. Go to the official Rust website at https://www.rust-lang.org/tools/install\n1. Follow the instructions for your operating system to install Rust and Cargo.\n1. Verify the installation from the command prompt:\n  - Type rustc --version\n  - Type cargo --version.\n Both commands should print a version number.\n\n### Installing eip712sign\n\nWe\u2019ll use the [eip712sign](https://github.com/base-org/eip712sign) utility developed by Base for signing hashes:\n\n1. From the command prompt run:\n\t`go install github.com/base-org/eip712sign@v0.0.3`\n1. Verify the installation:\n  Type  `$(go env GOPATH)/bin/eip712sign`.\nYou should see a message something like this:\n  ` One (and only one) of --private-key, --ledger, --mnemonic must be set`\n\n### Installing foundry\n\nWe\u2019ll use foundry to simulate the transaction we\u2019re approving:\n\n1. From the command prompt run:\n  `curl -L https://foundry.paradigm.xyz | bash`\n1. Run foundryup\n1. Verify the installation by typing `cast --version`\n1. You should see the version number printed.\n\n### Installing just\n\nJust is a command runner, which is similar to `make`.\n\n1. From the command prompt run:\n  `cargo install just`\n1. Verify the installation by typing `just --version`\n1. You should see the version number printed.\n\n### Cloning the superchain-ops repo\n\nThe superchain-ops repo holds the tools and artifacts that define any on-chain actions taken to either upgrade our system, or modify its configuration.\n\n1. Clone the superchain-ops repo\n  `git clone https://github.com/ethereum-optimism/superchain-ops.git`\n1. Or if you\u2019ve already cloned, just pull the main branch:\n  `git checkout main`\n \t`git pull`\n\nMove into the repo and install the contract dependencies\n\n`just install-contracts`\n\n### Create a Tenderly account\n\nTenderly is used to simulate transactions.\nIf you don\u2019t already have a Tenderly account, go to https://dashboard.tenderly.co/login and sign up.\nThe free account is sufficient.\n", "release_dates": []}, {"name": "superchain-registry", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# superchain-registry\n\n> \u26a0\ufe0f This repository is a **work in progress**.  At a later date, it will be proposed to, and must be approved by, Optimism Governance.  Until that time, the configuration described here is subject to change.\n\nThe Superchain Registry repository hosts Superchain-configuration data in a minimal human-readable form.\nThis includes mainnet and testnet Superchain targets, and their respective member chains.\n\nOther configuration, such as contract-permissions and `SystemConfig` parameters are hosted and governed onchain.\n\nThe superchain configs are made available in minimal form, to embed in OP-Stack software.\nFull deployment artifacts and genesis-states can be derived from the minimal form\nusing the reference [`op-chain-ops`] tooling.\n\nThe `semver.yaml` files each represent the semantic versioning lockfile for the all of the smart contracts in that superchain.\nIt is meant to be used when building transactions that upgrade the implementations set in the proxies.\n\nIf you would like to contribute a new chain or superchain, please see our [contributing guide](./CONTRIBUTING.md).\n\n## Superchain Go Module\n\nSuperchain configs can be imported as Go-module:\n```\ngo get github.com/ethereum-optimism/superchain-registry/superchain@latest\n```\nSee [`op-chain-ops`] for config tooling and\n for smart-contract bindings.\n\n[`op-chain-ops`]: https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops\n[`op-bindings`]: https://github.com/ethereum-optimism/optimism/tree/develop/op-bindings\n\n\n## Validation Go Module\nA second module exists in this repo whose purpose is to validate the config exported by the `superchain` module. It is a separate module to avoid import cycles and polluting downstream dependencies with things like `go-ethereum` (which is used in the validation tests). The modules are tracked by a top level `go.work` file. The associated `go.work.sum` file is gitignored and not important to typical workflows, which should mirror those of the [CI configuration](.circleci/config.yml).\n\n## CheckSecurityConfigs\n\nThe `CheckSecurityConfigs.s.sol` script is used in CI to perform\nsecurity checks of OP Chains registered in the `superchain`\ndirectory. At high level, it performs checks to ensure privileges are\nproperly granted to the right addresses. More specifically, it checks\nthe following privilege grants and role designations:\n\n1. Generic privileges:\n   1. Proxy admins. For example, `L1ERC721BridgeProxy` and\n      `OptimismMintableERC20FactoryProxy` specify the proxy admin\n      addresses who can change their implementations.\n   2. Address managers. For example, `ProxyAdmin` specifies the\n      address manager it trusts to look up certain addresses by name.\n   3. Contract owners. For example, many `Ownable` contracts use this\n      role to specify the message senders allowed to make privileged\n      calls.\n2. Optimism privileged cross-contract calls:\n   1. Trusted messengers. For example, `L1ERC721BridgeProxy` and\n      `L1StandardBridgeProxy` specify the cross domain messenger\n      address they trust with cross domain message sender information.\n   2. Trusted bridges. For example,\n      `OptimismMintableERC20FactoryProxy` specifies the L1 standard\n      bridge it trusts to mint and burn tokens.\n   3. Trusted portal. For example, `L1CrossDomainMessengerProxy`\n      specifies the portal it trusts to deposit transactions and get\n      L2 senders.\n   4. Trusted oracles. For example, `OptimismPortalProxy` specifies\n      the L2 oracle they trust with the L2 state root information.\n   5. Trusted system config. For example, `OptimismPortalProxy`\n      specifies the system config they trust to get resource config\n      from. TODO(issues/37): add checks for the `ResourceMetering`\n      contract.\n3. Optimism privileged operational roles:\n   1. Guardians. This is the role that can pause withdraws in the\n      Optimism protocol.\n   2. Challengers. This is the role that can delete\n      `L2OutputOracleProxy`'s output roots in the Optimism protocol\n\nAs a result, here is a visualization of all the relationships the\n`CheckSecurityConfigs.s.sol` script checks:\n\n``` mermaid\ngraph TD\n  L1ERC721BridgeProxy -- \"admin()\" --> ProxyAdmin\n  L1ERC721BridgeProxy -- \"messenger()\" --> L1CrossDomainMessengerProxy\n\n  OptimismMintableERC20FactoryProxy -- \"admin()\" --> ProxyAdmin\n  OptimismMintableERC20FactoryProxy -- \"BRIDGE()\" --> L1StandardBridgeProxy\n\n  ProxyAdmin -- \"addressManager()\" --> AddressManager\n  ProxyAdmin -- \"owner()\" --> ProxyOwnerMultisig\n\n  L1CrossDomainMessengerProxy -- \"PORTAL()\" --> OptimismPortalProxy\n  L1CrossDomainMessengerProxy -- \"addressManager[address(this)]\" --> AddressManager\n\n  L1StandardBridgeProxy -- \"getOwner()\" -->  ProxyAdmin\n  L1StandardBridgeProxy -- \"messenger()\" --> L1CrossDomainMessengerProxy\n\n  AddressManager -- \"owner()\" -->  ProxyAdmin\n\n  OptimismPortalProxy -- \"admin()\" --> ProxyAdmin\n  OptimismPortalProxy -- \"GUARDIAN()\" --> GuardianMultisig\n  OptimismPortalProxy -- \"L2_ORACLE()\" --> L2OutputOracleProxy\n  OptimismPortalProxy -- \"SYSTEM_CONFIG()\" --> SystemConfigProxy\n\n  L2OutputOracleProxy -- \"admin()\" --> ProxyAdmin\n  L2OutputOracleProxy -- \"CHALLENGER()\" --> ChallengerMultisig\n\n  SystemConfigProxy -- \"admin()\" --> ProxyAdmin\n  SystemConfigProxy -- \"owner()\" --> SystemConfigOwnerMultisig\n\n```\n\n## License\n\nMIT License, see [`LICENSE` file](./LICENSE).\n", "release_dates": []}, {"name": "superchain-relayer", "description": "Interface to relay messages from L2 to L1 for OP Chains using the Optimism SDK", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Superchain L2 to L1 message relayer\nThis repository contains an open-source user interface developed for relaying messages from OP Chains like OP Mainnet / Base (L2) to Ethereum Mainnet (L1) using [the Optimism SDK](https://sdk.optimism.io/). \n\n# Getting started \nAs a pre-requisite, you will need to install Node and Foundry. Follow the instructions in https://github.com/ethereum-optimism/optimism-starter for guidance. \n\n1. Clone/fork the superchain-relayer repo\n   ```sh\n   git clone https://github.com/ethereum-optimism/superchain-relayer.git\n   ```\n2. Install the necessary node packages:\n   ```sh\n   cd superchain-relayer\n   npm install\n   ```\n3. Start the frontend with `npm run dev`\n4. Open localhost:5173 in your browser\n", "release_dates": []}, {"name": "sync-tests", "description": null, "language": "JavaScript", "license": null, "readme": "# Sync Tests\n\nTest suite for syncing related tests. Transactions and state roots are posted\nto a layer one smart contract without execution. These transactions are\nsynced and then executed offchain so that the state roots that are computed\noffchain can be compared against the state roots that were posted to layer one.\nIf a difference is noticed, then a fraud proof can be submitted.\n\nThese tests use a Hardhat node for L1\n\n### Requirements\n\n- docker\n- docker-compose\n- jq\n- node.js\n\n### Usage\n\nThe `test` and `fixtures` directories should have matching file prefixes by name.\nBefore a `test` file runs, the corresponding fixture will run beforehand and\ninitialize a L1 state. This L1 state is used to sync.\n\n```bash\n$ ./test.sh\n```\n", "release_dates": []}, {"name": "synpress", "description": "Synpress is an wrapper around Cypress.io with metamask support thanks to puppeteer.", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "[![npm version](https://badge.fury.io/js/%40synthetixio%2Fsynpress.svg)](https://badge.fury.io/js/%40synthetixio%2Fsynpress)\n![Synpress CI](https://github.com/Synthetixio/synpress/workflows/Synpress%20CI/badge.svg?branch=master)\n[![CodeQL](https://github.com/Synthetixio/synpress/actions/workflows/codeql.yml/badge.svg?branch=master)](https://github.com/Synthetixio/synpress/actions/workflows/codeql.yml)\n[![Release CI](https://github.com/Synthetixio/synpress/actions/workflows/release.yml/badge.svg?branch=master)](https://github.com/Synthetixio/synpress/actions/workflows/release.yml)\n[![Discord](https://img.shields.io/discord/961408653502599171.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discordapp.com/channels/961408653502599171/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/synpress_.svg?label=Synpress_&style=social)](https://twitter.com/Synpress_)\n\n#\n\n<p align=\"center\">\n  <img src=\"https://i.imgur.com/Bg8Rch6.png\" />\n</p>\n\n#\n\n[Synpress](https://github.com/Synthetixio/synpress) is a wrapper around\n[Cypress.io](https://github.com/cypress-io/cypress) with\n[metamask](https://metamask.io/) support thanks to\n[puppeteer](https://github.com/puppeteer/puppeteer).\n\nSynpress makes sure to always use latest version of metamask before tests are\nran.\n\nIt also provides an easy way to use metamask straight from your e2e tests.\n\nFor usage examples, feel free to take a look at\n[kwenta](https://github.com/kwenta/kwenta/tree/master/tests/e2e),\n[staking](https://github.com/Synthetixio/staking/tree/master/tests/e2e) or\n[synpress](https://github.com/Synthetixio/synpress/tree/master/tests/e2e)\nrepository.\n\nFor additional custom commands and their examples,\n[check here](https://github.com/synthetixio/synpress/blob/master/support/index.d.ts).\n\nTo see in which direction Synpress is headed to, take a look at this\n[planning board](https://github.com/orgs/Synthetixio/projects/14).\n\n**Features:**\n\n- metamask support\n- ability to use latest metamask or lock it's version to avoid unexpected\n  failures related to metamask update\n- supports multi-lang of metamask, it doesn't depend on any labels\n- synpress is fully\n  [tested](https://github.com/Synthetixio/synpress/tree/dev/tests/e2e/specs)\n- automatically waits for all XHR requests to be finished before tests are run\n- ability to fail e2e tests if there are any browser console error found during\n  test run\n- types support for all additional custom commands\n- the best possible options set up in place to avoid flakiness\n- etherscan API helpers in place which for ex. allows to compare your\n  transaction results with etherscan and check tx status\n- synthetix helpers in place which allows to interact with synthetix protocol\n  programatically\n\n## \ud83d\udc77 Example setup for eslint and tsconfig\n\nProject structure:\n\n```text\nproject_dir\n\u2514\u2500\u2500 src\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 e2e\n        \u2514\u2500\u2500 .eslintrc.js\n        \u2514\u2500\u2500 tsconfig.json\n        \u2514\u2500\u2500 specs\n            \u2514\u2500\u2500 example-spec.js\n        \u2514\u2500\u2500 pages\n            \u2514\u2500\u2500 example-page.js\n```\n\n1. Create `.eslintrc.js` inside your tests folder (`/project_dir/tests/e2e`):\n\n```js\nconst path = require('path');\nconst synpressPath = path.join(\n  process.cwd(),\n  '/node_modules/@synthetixio/synpress',\n);\n\nmodule.exports = {\n  extends: `${synpressPath}/.eslintrc.js`,\n};\n```\n\n2. Create `tsconfig.json` inside your tests folder (`/project_dir/tests/e2e`):\n\n```json\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"baseUrl\": \"../../node_modules\",\n    \"types\": [\n      \"cypress\",\n      \"@types/puppeteer-core\",\n      \"@synthetixio/synpress/support\",\n      \"cypress-wait-until\",\n      \"@testing-library/cypress\"\n    ],\n    \"outDir\": \"./output\"\n  },\n  \"include\": [\"**/*.*\"]\n}\n```\n\n3. You're done! \ud83c\udf89\n\nIf you would like to use custom paths for your tests and configs, feel free to\nmirror\n[default synpress config](https://github.com/Synthetixio/synpress/blob/dev/synpress.json)\nand modify it for your needs. Then you can direct synpress to use it with\n`--configFile` flag.\n\nFor example: `synpress run --configFile __tests__/e2e/customConfig.config.js`\n\n## \u26a1 Important\n\nSynpress doesn't seem to communicate with metamask properly if\n`\"chromeWebSecurity\": false` flag is set. More about it\n[here](https://github.com/Synthetixio/synpress/issues/17).\n\nTests work only in headed mode because extensions are not supported in headless\nmode in [puppeteer](https://github.com/puppeteer/puppeteer/issues/659) and\n[Cypress](https://docs.cypress.io/api/plugins/browser-launch-api.html#Add-browser-extensions).\nIt's intended to be used in conjunction with `xvfb` on CI.\n\nThere is a global\n[`before()`](https://github.com/synthetixio/synpress/blob/master/support/index.js#L25)\nwhich runs metamask setup before all tests:\n\n- passes welcome page\n- imports wallet\n- changes network (defaults to `kovan`) or creates custom network and changes to\n  it (depending on your setup)\n- switches back to Cypress window and starts testing\n\nIt requires environmental variable called `SECRET_WORDS` to be present in\nfollowing format => `'word1, word2, etc..'` or private key in an environmental\nvariable called `PRIVATE_KEY`.\n\nTo change default network (`kovan`), you can use `NETWORK_NAME` environmental\nvariable, for example: `NETWORK_NAME=rinkeby`.\n\nAvailable choices are: `mainnet`, `ropsten`, `kovan`, `rinkeby`, `goerli` and\n`localhost`.\n\nTo create and switch to custom network at metamask setup phase, use these:\n\n1. `NETWORK_NAME` => ex: `synthetix`\n2. `RPC_URL` => ex: `https://synthetix-node.io`\n3. `CHAIN_ID` => ex: `123`\n4. `SYMBOL` (optional) => ex: `SNX`\n5. `BLOCK_EXPLORER` (optional) => ex: `https://synthetix-explorer.io`\n6. `IS_TESTNET` (optional) => ex: `false`\n\nMetamask version is hardcoded and frequently updated under supervision to avoid\na case when e2e tests break because of CSS classes changes in new version, so\nall you need is to keep synpress updated in your project. However, you can still\noverride metamask with `METAMASK_VERSION` environmental variable, for example:\n`METAMASK_VERSION=9.3.0` or `METAMASK_VERSION=latest`.\n\nIf you don't want to use environmental variables, you can modify\n[`setupMetamask()`](https://github.com/synthetixio/synpress/blob/master/support/index.js#L26)\nto following:\n\n`setupMetamask(secretWordsOrPrivateKey, network, password)`, for example:\n`setupMetamask('word1, word2, etc..', 'mainnet', 'password')`.\n\nYou can also add and switch to custom network by passing an `object` instead of\n`string` inside `setupMetamask(secretWordsOrPrivateKey, network, password)`\nfunction for `network` parameter.\n\nIf you want to use Etherscan API helpers, you will have to provide Etherscan API\nkey using `ETHERSCAN_KEY` enironmental variable.\n\nTo fail a test if there are any browser console errors, set `FAIL_ON_ERROR` to\n`1` or `true`.\n\nAutomatic waiting for XHR requests to finish before tests start can be turned\noff with `CYPRESS_SKIP_RESOURCES_WAIT` environmental variable, set it to `1` or\n`true`.\n\nIf you want to skip metamask extension installation or metamask setup, you can\nuse `SKIP_METAMASK_INSTALL` and `SKIP_METAMASK_SETUP` separately. Both variables\naccept `1` or `true`.\n\n## \ud83e\uddea Usage\n\n- `synpress run` to run tests\n- `synpress open` to open Cypress UI (may be bugged in some cases because it\n  doesn't clear metamask state before each e2e test, please use `synpress run`)\n\nCommand line interface (`synpress help`):\n\n```text\nUsage: synpress run [options]\n\nlaunch tests\n\nOptions:\n  -b, --browser <name>               run on specified browser (default: \"chrome\")\n  -c, --config <config>              set configuration values, separate multiple values with a comma\n  -cf, --configFile <path>          specify a path to a JSON file where configuration values are set\n  -e, --env <env=val>                set environment variables, separate multiple values with comma\n  -s, --spec <path or glob>          run only provided spec files\n  -ne, --noExit                     keep runner open after tests finish\n  -pr, --project <path>              run with specific project path\n  -q, --quiet                        only test runner output in console\n  -r, --reporter <reporter>          specify mocha reporter\n  -ro, --reporterOptions <options>  specify mocha reporter options, separate multiple values with comma\n  -r, --record                       [dashboard] record video of tests running after setting up your project to record\n  -k, --key <key>                    [dashboard] set record key\n  -p, --parallel                     [dashboard] run recorded specs in parallel across multiple machines\n  -g, --group <name>                 [dashboard] group recorded tests together under a single run\n  -t, --tag <name>                   [dashboard] add tags to dashboard for test run\n  -h, --help                         display help for command\n```\n\n```text\nUsage: synpress open [options]\n\nlaunch test runner UI\n\nOptions:\n  -cf, --configFile <path>  specify a path to a JSON file where configuration values are set\n  -h, --help                display help for command\n```\n\n## \ud83d\udea2 Release process\n\n1. Create PR from `dev` branch to `master` branch\n2. Merge it (new `-beta` version is automatically released)\n3. Run GitHub Action workflow named\n   [Release CI](https://github.com/Synthetixio/synpress/actions/workflows/release.yml)\n   with `patch|minor|major` depending on your needs to promote your build.\n\nAlternatively, instead of running GitHub Action for release, you can move on\nwith manual release process:\n\n1. Switch to `master` branch and pull latest changes\n2. Run `npm run release:patch/minor/major` command\n3. Keep `dev` branch up to date with `master`\n\nAbove actions will lead to:\n\n- New npm node module release\n- New GitHub packages node module release\n- New GitHub release (tagged) created with changelog from commit messages\n", "release_dates": []}, {"name": "synthetix-optimism", "description": "Synthetix Solidity smart contracts", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Synthetix\n\n[![CircleCI](https://circleci.com/gh/Synthetixio/synthetix.svg?style=svg)](https://circleci.com/gh/Synthetixio/synthetix)\n[![codecov](https://codecov.io/gh/Synthetixio/synthetix/branch/develop/graph/badge.svg)](https://codecov.io/gh/Synthetixio/synthetix)\n[![npm version](https://badge.fury.io/js/synthetix.svg)](https://badge.fury.io/js/synthetix)\n[![Discord](https://img.shields.io/discord/413890591840272394.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discordapp.com/channels/413890591840272394/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/synthetix_io.svg?label=synthetix_io&style=social)](https://twitter.com/synthetix_io)\n\nSynthetix is a crypto-backed synthetic asset platform.\n\nIt is a multi-token system, powered by SNX, the Synthetix Network Token. SNX holders can stake SNX to issue Synths, on-chain synthetic assets via the [Mintr dApp](https://mintr.synthetix.io) The network currently supports an ever growing [list of synthetic assets](https://www.synthetix.io/tokens/). Please see the [list of the deployed contracts on MAIN and TESTNETS](https://developer.synthetix.io/api/docs/deployed-contracts.html)\nSynths can be traded using [synthetix.exchange](https://synthetix.exchange)\n\nSynthetix uses a proxy system so that upgrades will not be disruptive to the functionality of the contract. This smooths user interaction, since new functionality will become available without any interruption in their experience. It is also transparent to the community at large, since each upgrade is accompanied by events announcing those upgrades. New releases are managed via the [Synthetix Improvement Proposal (SIP)](https://sips.synthetix.io/all-sip) system similar to the [EF's EIPs](https://eips.ethereum.org/all)\n\nPrices are committed on chain by a trusted oracle. Moving to a decentralised oracle is phased in with the first phase completed for all forex prices using [Chainlink](https://feeds.chain.link/)\n\nPlease note that this repository is under development.\n\nFor the latest system documentation see [docs.synthetix.io](https://docs.synthetix.io)\n\n## DApps\n\n- [mintr.synthetix.io](https://mintr.synthetix.io)\n- [synthetix.exchange](https://synthetix.exchange)\n- [dashboard.synthetix.io](https://dashboard.synthetix.io)\n\n### Community\n\n[![Discord](https://img.shields.io/discord/413890591840272394.svg?color=768AD4&label=discord&logo=https%3A%2F%2Fdiscordapp.com%2Fassets%2F8c9701b98ad4372b58f13fd9f65f966e.svg)](https://discordapp.com/channels/413890591840272394/) [![Twitter Follow](https://img.shields.io/twitter/follow/synthetix_io.svg?label=synthetix_io&style=social)](https://twitter.com/synthetix_io)\n\nFor a guide from the community, see [synthetix.community](https://synthetix.community)\n\n---\n\n## Repo Guide\n\n### Branching\n\nA note on the branches used in this repo.\n\n- `master` represents the contracts live on `mainnet` and all testnets.\n- `alpha` is for the newest version of contracts, and is reserved for deploys to `kovan`\n- `beta` is for promoted alpha contracts, and is reserved for deploys to `rinkeby`\n- `release-candidate` is for promoted beta contracts, and is reserved for deploys to `ropsten`\n\nWhen a new version of the contracts makes its way through all testnets, it eventually becomes promoted in `master`, with [semver](https://semver.org/) reflecting contract changes in the `major` or `minor` portion of the version (depending on backwards compatibility). `patch` changes are simply for changes to the JavaScript interface.\n\n### Testing\n\n[![CircleCI](https://circleci.com/gh/Synthetixio/synthetix.svg?style=svg)](https://circleci.com/gh/Synthetixio/synthetix)\n[![codecov](https://codecov.io/gh/Synthetixio/synthetix/branch/develop/graph/badge.svg)](https://codecov.io/gh/Synthetixio/synthetix)\n\nPlease see [docs.synthetix.io/contracts/testing](https://docs.synthetix.io/contracts/testing) for an overview of the automated testing methodologies.\n\n## Module Usage\n\n[![npm version](https://badge.fury.io/js/synthetix.svg)](https://badge.fury.io/js/synthetix)\n\nThis repo may be installed via `npm install` to support both node.js scripting applications and Solidity contract development.\n\n### Examples\n\n:100: Please see our walkthrus for code examples in both JavaScript and Solidity: [docs.synthetix.io/contracts/walkthrus](https://docs.synthetix.io/contracts/walkthrus)\n\n### Solidity API\n\nAll interfaces are available via the path [`synthetix/contracts/interfaces`](./contracts/interfaces/).\n\n:zap: In your code, the key is to use `IAddressResolver` which can be tied to the immutable proxy: [`ReadProxyAddressResolver`](https://contracts.synthetix.io/ReadProxyAddressResolver) ([introduced in SIP-57](https://sips.synthetix.io/sips/sip-57)). You can then fetch `Synthetix`, `FeePool`, `Depot`, et al via `IAddressResolver.getAddress(bytes32 name)` where `name` is the `bytes32` version of the contract name (case-sensitive). Or you can fetch any synth using `IAddressResolver.getSynth(bytes32 synth)` where `synth` is the `bytes32` name of the synth (e.g. `iETH`, `sUSD`, `sDEFI`).\n\nE.g.\n\n`npm install synthetix`\n\nthen you can write Solidity as below (using a compiler that links named imports via `node_modules`):\n\n```solidity\npragma solidity 0.5.16;\n\nimport 'synthetix/contracts/interfaces/IAddressResolver.sol';\nimport 'synthetix/contracts/interfaces/ISynthetix.sol';\n\n\ncontract MyContract {\n\t// This should be instantiated with our ReadProxyAddressResolver\n\t// it's a ReadProxy that won't change, so safe to code it here without a setter\n\t// see https://docs.synthetix.io/addresses for addresses in mainnet and testnets\n\tIAddressResolver public synthetixResolver;\n\n\tconstructor(IAddressResolver _snxResolver) public {\n\t\tsynthetixResolver = _snxResolver;\n\t}\n\n\tfunction synthetixIssue() external {\n\t\tISynthetix synthetix = synthetixResolver.getAddress('Synthetix');\n\t\trequire(synthetix != address(0), 'Synthetix is missing from Synthetix resolver');\n\n\t\t// Issue for msg.sender = address(MyContract)\n\t\tsynthetix.issueMaxSynths();\n\t}\n\n\tfunction synthetixIssueOnBehalf(address user) external {\n\t\tISynthetix synthetix = synthetixResolver.getAddress('Synthetix');\n\t\trequire(synthetix != address(0), 'Synthetix is missing from Synthetix resolver');\n\n\t\t// Note: this will fail if `DelegateApprovals.approveIssueOnBehalf(address(MyContract))` has\n\t\t// not yet been invoked by the `user`\n\t\tsynthetix.issueMaxSynthsOnBehalf(user);\n\t}\n}\n```\n\n### Node.js API\n\n- `getAST({ source, match = /^contracts\\// })` Returns the Abstract Syntax Tree (AST) for all compiled sources. Optionally add `source` to restrict to a single contract source, and set `match` to an empty regex if you'd like all source ASTs including third party contracts\n- `getPathToNetwork({ network, file = '' })` Returns the path to the folder (or file within the folder) for the given network\n- `getSource({ network })` Return `abi` and `bytecode` for a contract `source`\n- `getSuspensionReasons({ code })` Return mapping of `SystemStatus` suspension codes to string reasons\n- `getStakingRewards({ network })` Return the list of staking reward contracts available.\n- `getSynths({ network })` Return the list of synths for a network\n- `getTarget({ network })` Return the information about a contract's `address` and `source` file. The contract names are those specified in [docs.synthetix.io/addresses](https://docs.synthetix.io/addresses)\n- `getTokens({ network })` Return the list of tokens (synths and `SNX`) used in the system, along with their addresses.\n- `getUsers({ network })` Return the list of user accounts within the Synthetix protocol (e.g. `owner`, `fee`, etc)\n- `getVersions({ network, byContract = false })` Return the list of deployed versions to the network keyed by tagged version. If `byContract` is `true`, it keys by `contract` name.\n- `networks` Return the list of supported networks\n- `toBytes32` Convert any string to a `bytes32` value\n\n#### Via code\n\n```javascript\nconst snx = require('synthetix');\n\nsnx.getAST();\n/*\n{ 'contracts/AddressResolver.sol':\n   { imports:\n      [ 'contracts/Owned.sol',\n        'contracts/interfaces/IAddressResolver.sol',\n        'contracts/interfaces/ISynthetix.sol' ],\n     contracts: { AddressResolver: [Object] },\n     interfaces: {},\n     libraries: {} },\n  'contracts/Owned.sol':\n   { imports: [],\n     contracts: { Owned: [Object] },\n     interfaces: {},\n     libraries: {} },\n*/\n\nsnx.getAST({ source: 'Synthetix.sol' });\n/*\n{ imports:\n   [ 'contracts/ExternStateToken.sol',\n     'contracts/MixinResolver.sol',\n     'contracts/interfaces/ISynthetix.sol',\n     'contracts/TokenState.sol',\n     'contracts/interfaces/ISynth.sol',\n     'contracts/interfaces/IERC20.sol',\n     'contracts/interfaces/ISystemStatus.sol',\n     'contracts/interfaces/IExchanger.sol',\n     'contracts/interfaces/IEtherCollateral.sol',\n     'contracts/interfaces/IIssuer.sol',\n     'contracts/interfaces/ISynthetixState.sol',\n     'contracts/interfaces/IExchangeRates.sol',\n     'contracts/SupplySchedule.sol',\n     'contracts/interfaces/IRewardEscrow.sol',\n     'contracts/interfaces/IHasBalance.sol',\n     'contracts/interfaces/IRewardsDistribution.sol' ],\n  contracts:\n   { Synthetix:\n      { functions: [Array],\n        events: [Array],\n        variables: [Array],\n        modifiers: [Array],\n        structs: [],\n        inherits: [Array] } },\n  interfaces: {},\n  libraries: {} }\n*/\n\n// Get the path to the network\nsnx.getPathToNetwork({ network: 'mainnet' });\n//'.../Synthetixio/synthetix/publish/deployed/mainnet'\n\n// retrieve an object detailing the contract ABI and bytecode\nsnx.getSource({ network: 'rinkeby', contract: 'Proxy' });\n/*\n{\n  bytecode: '0..0',\n  abi: [ ... ]\n}\n*/\n\nsnx.getSuspensionReasons();\n/*\n{\n\t1: 'System Upgrade',\n\t2: 'Market Closure',\n\t3: 'Circuit breaker',\n\t99: 'Emergency',\n};\n*/\n\n// retrieve the array of synths used\nsnx.getSynths({ network: 'rinkeby' }).map(({ name }) => name);\n// ['sUSD', 'sEUR', ...]\n\n// retrieve an object detailing the contract deployed to the given network.\nsnx.getTarget({ network: 'rinkeby', contract: 'ProxySynthetix' });\n/*\n{\n\tname: 'ProxySynthetix',\n  address: '0x322A3346bf24363f451164d96A5b5cd5A7F4c337',\n  source: 'Proxy',\n  link: 'https://rinkeby.etherscan.io/address/0x322A3346bf24363f451164d96A5b5cd5A7F4c337',\n  timestamp: '2019-03-06T23:05:43.914Z',\n  txn: '',\n\tnetwork: 'rinkeby'\n}\n*/\n\n// retrieve the list of system user addresses\nsnx.getUsers({ network: 'mainnet' });\n/*\n[ { name: 'owner',\n    address: '0xEb3107117FEAd7de89Cd14D463D340A2E6917769' },\n  { name: 'deployer',\n    address: '0xDe910777C787903F78C89e7a0bf7F4C435cBB1Fe' },\n  { name: 'marketClosure',\n    address: '0xC105Ea57Eb434Fbe44690d7Dec2702e4a2FBFCf7' },\n  { name: 'oracle',\n    address: '0xaC1ED4Fabbd5204E02950D68b6FC8c446AC95362' },\n  { name: 'fee',\n    address: '0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF' },\n  { name: 'zero',\n    address: '0x0000000000000000000000000000000000000000' } ]\n*/\n\nsnx.getVersions();\n/*\n{ 'v2.21.12-107':\n   { tag: 'v2.21.12-107',\n     fulltag: 'v2.21.12-107',\n     release: 'Hadar',\n     network: 'kovan',\n     date: '2020-05-08T12:52:06-04:00',\n     commit: '19997724bc7eaceb902c523a6742e0bd74fc75cb',\n\t\t contracts: { ReadProxyAddressResolver: [Object] }\n\t\t}\n}\n*/\n\nsnx.networks;\n// [ 'local', 'kovan', 'rinkeby', 'ropsten', 'mainnet' ]\n\nsnx.toBytes32('sUSD');\n// '0x7355534400000000000000000000000000000000000000000000000000000000'\n```\n\n#### As a CLI tool\n\nSame as above but as a CLI tool that outputs JSON, using names without the `get` prefixes:\n\n```bash\n$ npx synthetix ast contracts/Synth.sol\n{\n  \"imports\": [\n    \"contracts/Owned.sol\",\n    \"contracts/ExternStateToken.sol\",\n    \"contracts/MixinResolver.sol\",\n    \"contracts/interfaces/ISynth.sol\",\n    \"contracts/interfaces/IERC20.sol\",\n    \"contracts/interfaces/ISystemStatus.sol\",\n    \"contracts/interfaces/IFeePool.sol\",\n    \"contracts/interfaces/ISynthetix.sol\",\n    \"contracts/interfaces/IExchanger.sol\",\n    \"contracts/interfaces/IIssue\"\n    # ...\n  ]\n}\n\n$ npx synthetix bytes32 sUSD\n0x7355534400000000000000000000000000000000000000000000000000000000\n\n$ npx synthetix networks\n[ 'local', 'kovan', 'rinkeby', 'ropsten', 'mainnet' ]\n\n$ npx synthetix source --network rinkeby --contract Proxy\n{\n  \"bytecode\": \"0..0\",\n  \"abi\": [ ... ]\n}\n\n$ npx synthetix suspension-reason --code 2\nMarket Closure\n\n$ npx synthetix synths --network rinkeby --key name\n[\"sUSD\", \"sEUR\", ... ]\n\n$ npx synthetix target --network rinkeby --contract ProxySynthetix\n{\n  \"name\": \"ProxySynthetix\",\n  \"address\": \"0x322A3346bf24363f451164d96A5b5cd5A7F4c337\",\n  \"source\": \"Proxy\",\n  \"link\": \"https://rinkeby.etherscan.io/address/0x322A3346bf24363f451164d96A5b5cd5A7F4c337\",\n  \"timestamp\": \"2019-03-06T23:05:43.914Z\",\n  \"network\": \"rinkeby\"\n}\n\n$ npx synthetix users --network mainnet --user oracle\n{\n  \"name\": \"oracle\",\n  \"address\": \"0xaC1ED4Fabbd5204E02950D68b6FC8c446AC95362\"\n}\n\n$ npx synthetix versions\n{\n  \"v2.0-19\": {\n    \"tag\": \"v2.0-19\",\n    \"fulltag\": \"v2.0-19\",\n    \"release\": \"\",\n    \"network\": \"mainnet\",\n    \"date\": \"2019-03-11T18:17:52-04:00\",\n    \"commit\": \"eeb271f4fdd2e615f9dba90503f42b2cb9f9716e\",\n    \"contracts\": {\n      \"Depot\": {\n        \"address\": \"0x172E09691DfBbC035E37c73B62095caa16Ee2388\",\n        \"status\": \"replaced\",\n        \"replaced_in\": \"v2.18.1\"\n      },\n      \"ExchangeRates\": {\n        \"address\": \"0x73b172756BD5DDf0110Ba8D7b88816Eb639Eb21c\",\n        \"status\": \"replaced\",\n        \"replaced_in\": \"v2.1.11\"\n      },\n\n      # ...\n\n    }\n  }\n}\n\n$ npx synthetix versions --by-contract\n{\n  \"Depot\": [\n    {\n      \"address\": \"0x172E09691DfBbC035E37c73B62095caa16Ee2388\",\n      \"status\": \"replaced\",\n      \"replaced_in\": \"v2.18.1\"\n    },\n    {\n      \"address\": \"0xE1f64079aDa6Ef07b03982Ca34f1dD7152AA3b86\",\n      \"status\": \"current\"\n    }\n  ],\n  \"ExchangeRates\": [\n    {\n      \"address\": \"0x73b172756BD5DDf0110Ba8D7b88816Eb639Eb21c\",\n      \"status\": \"replaced\",\n      \"replaced_in\": \"v2.1.11\"\n    },\n\n    # ...\n  ],\n\n  # ...\n}\n```\n", "release_dates": []}, {"name": "Truffle-ERC20-Example", "description": "A simple ERC20 token project in Truffle to get started with the OVM", "language": "JavaScript", "license": null, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Getting Started with Optimistic Ethereum: Simple ERC20 Token Truffle Tutorial\n\nHi there! Welcome to our Optimistic Ethereum ERC20 Truffle example!\n\nIf your preferred smart contract testing framework is Waffle, see our Optimistic Ethereum ERC20 Waffle tutorial [here](https://github.com/ethereum-optimism/Waffle-ERC20-Example). \n\nIf you're interested in writing your first L2-compatible smart contract using Truffle as your smart contract testing framework, then you've come to the right place!\nThis repo serves as an example for how go through and compile/test/deploy your contracts on both Ethereum and Optimistic Ethereum.\n\nLet's begin!\n\n## Prerequisites\n\nPlease make sure you've installed the following before continuing:\n\n- [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- [Node.js](https://nodejs.org/en/download/)\n- [Yarn 1](https://classic.yarnpkg.com/en/docs/install#mac-stable)\n- [Docker](https://docs.docker.com/engine/install/)\n\n## Setup\n\nTo start, clone this `Truffle-ERC20-Example` repo, enter it, and install all of its dependencies:\n\n```sh\ngit clone https://github.com/ethereum-optimism/Truffle-ERC20-Example.git\ncd Truffle-ERC20-Example\nyarn install\n```\n\n## Step 1: Compile your contracts for Optimistic Ethereum\n\nCompiling a contract for Optimistic Ethereum is pretty easy!\nFirst we'll need to install the [`@eth-optimism/solc`](https://www.npmjs.com/package/@eth-optimism/solc).\nSince we currently only support `solc` versions `0.5.16`, `0.6.12`, and `0.7.6` for Optimistic Ethereum contracts, we'll be using version `0.7.6` in this example.\nLet's add this package:\n\n```sh\nyarn add @eth-optimism/solc@0.7.6-alpha.1\n```\n\nNext, we just need to add a new `truffle-config-ovm.js` file to compile our contracts.\n\nCreate `truffle-config-ovm.js` and add the following to it:\n\n```js\nconst mnemonicPhrase = \"candy maple cake sugar pudding cream honey rich smooth crumble sweet treat\"\nconst HDWalletProvider = require('@truffle/hdwallet-provider')\n\nmodule.exports = {\n  contracts_build_directory: './build-ovm',\n  networks: {\n    optimistic_ethereum: {\n      provider: function () {\n        return new HDWalletProvider({\n          mnemonic: {\n            phrase: mnemonicPhrase\n          },\n          providerOrUrl: 'http://127.0.0.1:8545'\n        })\n      },\n      network_id: 420,\n      host: '127.0.0.1',\n      port: 8545,\n      gasPrice: 0,\n    }\n  },\n  compilers: {\n    solc: {\n      // Add path to the optimism solc fork\n      version: \"node_modules/@eth-optimism/solc\",\n      settings: {\n        optimizer: {\n          enabled: true,\n          runs: 1\n        },\n      }\n    }\n  }\n}\n```\n\nHere, we specify the new custom Optimistic Ethereum compiler we just installed and the new build path for our optimistically compiled contracts.\nWe also specify the network parameters of a local Optimistic Ethereum instance.\nThis local instance will be set up soon, but we'll set this up in our config now so that it's easy for us later when we compile and deploy our Optimistic Ethereum contracts.\n\nAnd we're ready to compile! All you have to do is specify the `truffle-config-ovm.js` config in your `truffle` command, like so:\n\n```sh\nyarn truffle compile --config truffle-config-ovm.js\n```\n\nOur `truffle-config-ovm.js` config file tells Truffle that we want to use the Optimistic Ethereum solidity compiler.\n\nYep, it's that easy. You can verify that everything went well by looking for the `build-ovm` directory that contains your new JSON files.\n\nHere, `build-ovm` signifies that the contracts contained in this directory have been compiled for the OVM, the **O**ptimistic **V**irtual **M**achine, as opposed to the Ethereum Virtual Machine. Now let's move on to testing!\n\n## Step 2: Testing your Optimistic Ethereum contracts\n\nWoot! It's finally time to test our contract on top of Optimistic Ethereum.\nBut first we'll need to get a local version of an Optimistic Ethereum node running...\n\n-------\n\nFortunately, we have some handy dandy tools that make it easy to spin up a local Optimistic Ethereum node!\n\nSince we're going to be using Docker, make sure that Docker is installed on your machine prior to moving on (info on how to do that [here](https://docs.docker.com/engine/install/)).\n**We recommend opening up a second terminal for this part.**\nThis way you'll be able to keep the Optimistic Ethereum node running so you can execute some contract tests.\n\nNow we just need to download, build, and install our Optimistic Ethereum node by running the following commands.\nPlease note that `docker-compose build` *will* take a while.\nWe're working on improving this (sorry)!\n\n```sh\ngit clone git@github.com:ethereum-optimism/optimism.git\ncd optimism\nyarn install\nyarn build\ncd ops\ndocker-compose build\ndocker-compose up\n```\n\nYou now have your very own locally deployed instance of Optimistic Ethereum! \ud83d\ude4c\n\n-------\n\nWith your local instance of Optimistic Ethereum up and running, let's test your contracts! Since the two JSON RPC provider URLs (one for your local instance Ethereum and Optimistic Ethereum) have already been specified in your Truffle config files, all we need to do next is run the test command.\n\nTo do that, run:\n\n```sh\nyarn truffle test ./test/erc20.spec.js --network optimistic_ethereum --config truffle-config-ovm.js\n```\n\nNotice that we are using `truffle-config-ovm.js` to let `truffle` know that we want to use the `build-ovm` folder as our path to our JSON files.\n(Remember that these JSON files were compiled using the Optimistic Ethereum solidity compiler!)\n\nAdditionally, we also specify the network we are testing on.\nIn this case, we're testing our contract on `optimistic_ethereum`.\n\nYou should see a set of passing tests for your ERC20 contract. If so, congrats!\nYou're ready to deploy an application to Optimistic Ethereum.\nIt really is that easy.\n\n## Step 3: Deploying your Optimistic Ethereum contracts\n\nGoing through this routine one more time. Now we're going to deploy an Optimisic Ethereum contract using `truffle`. For Truffle based deployments, we're going to use Truffle's `migrate` command to run a migrations file for us that will deploy the contract we specify.\n\nFirst, let's create that migrations file.\nCreate a new directory called `migrations` in the topmost path of your project and create a file within it called `1_deploy_ERC20_contract.js`.\n\nNext, within `1_deploy_ERC20_contract.js`, we're going to add the following logic:\n\n```js\nconst ERC20 = artifacts.require('ERC20')\n\nmodule.exports = function (deployer, accounts) {\n  const tokenName = 'My Optimistic Coin'\n  const tokenSymbol = 'OPT'\n  const tokenDecimals = 1\n\n  // deployment steps\n  deployer.deploy(\n    ERC20, \n    10000, \n    tokenName, \n    tokenDecimals, \n    tokenSymbol,\n    { gasPrice: 0 }\n  )\n}\n```\n\nTo quickly explain this file, first we import our artifact for our ERC20 contract.\nSince we specified the build directory in our Truffle configs, Truffle knows whether we want to use either an Ethereum or Optimistic Ethereum contract artifact.\n\nNow we're ready to run our migrations file!\nLet's go ahead and deploy this contract:\n\n```sh\nyarn truffle migrate --network optimistic_ethereum --config truffle-config-ovm.js\n```\n\nThis should deploy against a local (in-memory) Optimistic Ethereum node that was spin up when we started the integrations repo.\n\nAfter a few seconds your contract should be deployed! Now you'll see this in your terminal:\n\n![Truffle contract migrations to Optimistic Ethereum complete](./assets/deploy-to-optimistic-ethereum.png)\n\nAnd uh... yeah.\nThat's pretty much it.\nContracts deployed!\nTutorial complete. Hopefully now you know the basics of working with Optimistic Ethereum! \ud83c\udd7e\ufe0f\n\n------\n\n## Further Reading\n\n### OVM vs. EVM Incompatibilities\n\nOur goal is to bring the OVM as close to 100% compatibility with all existing Ethereum projects, but our software is still in an early stage. [Our community hub docs](https://community.optimism.io/docs/protocol/evm-comparison.html) will maintain the most up to date list of known incompatibilities between the OVM and EVM, along with our plans to fix them.\n\n### Wasn't that easy?\n\nThe OVM provides a fresh new take on layer 2 development: it's _mostly_ identical to layer 1 development.\nHowever, there are a few differences that are worth noting, which you can read more about in our [EVM comparison documentation](https://community.optimism.io/docs/protocol/evm-comparison.html).\nNo hoops, no tricks--the Ethereum you know and love, ready to scale up with L2.\nFor more info on our progress and what's going on behind the scenes, you can follow us on [Twitter](https://twitter.com/optimismPBC).\n\nWant to try deploying contracts to the Optimistic Ethereum testnet next? [Check out the full integration guide](https://community.optimism.io/docs/developers/integration.html) on the Optimism community hub.\n\n------\n\n## Troubleshooting\n\nExample project not working? [Create a Github Issue](https://github.com/ethereum-optimism/Truffle-ERC20-Example/issues), or hop in our [Discord](https://discordapp.com/invite/jrnFEvq) channel and ask away.\n", "release_dates": []}, {"name": "tx-overload", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Transaction Overload\n\nGenerate load on Optimism Bedrock using transactions with random calldata.\n\n## Usage\n\n```go\ngo build \n\n./tx-overload \\\n    --eth-rpc http://localhost:8545 \\\n    --private-key <private_key> \\\n    --num-distributors 10 \\\n    --data-rate 1000 \\\n```\n\nMore options are avaiable:\n```\n./tx-overload --help\n```\n\n## License\n\nAll files within this repository are licensed under the [MIT License](https://github.com/ethereum-optimism/tx-overload/blob/master/LICENSE).\n", "release_dates": []}, {"name": "uniswap-v2-core", "description": "\ud83c\udf9b Core smart contracts of Uniswap V2", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# Uniswap V2\n\n[![Actions Status](https://github.com/Uniswap/uniswap-v2-core/workflows/CI/badge.svg)](https://github.com/Uniswap/uniswap-v2-core/actions)\n[![Version](https://img.shields.io/npm/v/@uniswap/v2-core)](https://www.npmjs.com/package/@uniswap/v2-core)\n\nIn-depth documentation on Uniswap V2 is available at [uniswap.org](https://uniswap.org/docs).\n\nThe built contract artifacts can be browsed via [unpkg.com](https://unpkg.com/browse/@uniswap/v2-core@latest/).\n\n# Local Development\n\nThe following assumes the use of `node@>=10`.\n\n## Install Dependencies\n\n`yarn`\n\n## Compile Contracts\n\n`yarn compile`\n\n## Run Tests\n\n`yarn test`\n", "release_dates": []}, {"name": "verifier", "description": "[Optimism] Layer 2 Verifier", "language": "JavaScript", "license": null, "readme": "# Verifier\n\nRun an Optimistic Ethereum Verifier and Fraud Prover with minimal configuration.\nThis repository currently supports the Kovan testnet.\n\n## Requirements\n\n- [Docker](https://docs.docker.com/get-docker/)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n- [npm](https://nodejs.org/en/download/) - optional\n\n## Instructions\n\nThe configuration options are in the file `docker-compose.env`.\n\nThe Fraud Prover needs a private key to be able to send a transaction\ncontaining the fraud proof. To automatically create a key, run the commands:\n\n```bash\n$ npm install\n$ npm run create-key\n```\n\nThis will create a key, print the address and populate the `L1_WALLET_KEY`\nvariable in `docker-compose.env` with the key. Fund the address with Kovan ETH.\nDo not use this address on mainnet. To print the address again, rerun the\ncommand `$ npm run create-key`.\n\nThe variables that need to be set are `ETH1_HTTP` and `L1_NODE_WEB_3_URL`.\n\n- `ETH1_HTTP` is the Ethereum RPC server that will be used by the verifier\n- `L1_NODE_WEB_3_URL` is the Ethereum RPC server that will be used by the fraud prover\n\nThese must be set to Ethereum nodes that have synced the Kovan testnet.\n\nTo start the Verifier and the Fraud Prover, run the command:\n\n```bash\n$ npm start\n```\n", "release_dates": []}, {"name": "viem", "description": "TypeScript Interface for Ethereum", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<br/>\n\n<p align=\"center\">\n  <a href=\"https://viem.sh\">\n      <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/wevm/viem/blob/main/.github/gh-logo-dark.svg\">\n        <img alt=\"viem logo\" src=\"https://github.com/wevm/viem/blob/main/.github/gh-logo-light.svg\" width=\"auto\" height=\"60\">\n      </picture>\n</a>\n</p>\n\n<p align=\"center\">\n  TypeScript Interface for Ethereum\n<p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/viem\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/npm/v/viem?colorA=21262d&colorB=21262d&style=flat\">\n      <img src=\"https://img.shields.io/npm/v/viem?colorA=f6f8fa&colorB=f6f8fa&style=flat\" alt=\"Version\">\n    </picture>\n  </a>\n  <a href=\"https://app.codecov.io/gh/wevm/viem\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/codecov/c/github/wevm/viem?colorA=21262d&colorB=21262d&style=flat\">\n      <img src=\"https://img.shields.io/codecov/c/github/wevm/viem?colorA=f6f8fa&colorB=f6f8fa&style=flat\" alt=\"Code coverage\">\n    </picture>\n  </a>\n  <a href=\"https://github.com/wevm/viem/blob/main/LICENSE\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/npm/l/viem?colorA=21262d&colorB=21262d&style=flat\">\n      <img src=\"https://img.shields.io/npm/l/viem?colorA=f6f8fa&colorB=f6f8fa&style=flat\" alt=\"MIT License\">\n    </picture>\n  </a>\n  <a href=\"https://www.npmjs.com/package/viem\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/npm/dm/viem?colorA=21262d&colorB=21262d&style=flat\">\n      <img src=\"https://img.shields.io/npm/dm/viem?colorA=f6f8fa&colorB=f6f8fa&style=flat\" alt=\"Downloads per month\">\n    </picture>\n  </a>\n  <a href=\"https://bestofjs.org/projects/viem\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/endpoint?colorA=21262d&colorB=21262d&style=flat&url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=wevm%2Fviem%26since=daily\">\n      <img src=\"https://img.shields.io/endpoint?colorA=f6f8fa&colorB=f6f8fa&style=flat&url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=wevm%2Fviem%26since=daily\" alt=\"Best of JS\">\n    </picture>\n  </a>\n</p>\n\n<br>\n\n## Features\n\n- Abstractions over the [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) to make your life easier\n- First-class APIs for interacting with [Smart Contracts](https://ethereum.org/en/glossary/#smart-contract)\n- Language closely aligned to official [Ethereum terminology](https://ethereum.org/en/glossary/)\n- Import your Browser Extension, WalletConnect or Private Key Wallet\n- Browser native [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), instead of large BigNumber libraries\n- Utilities for working with [ABIs](https://ethereum.org/en/glossary/#abi) (encoding/decoding/inspection)\n- TypeScript ready ([infer types](https://viem.sh/docs/typescript) from ABIs and EIP-712 Typed Data)\n- First-class support for [Anvil](https://book.getfoundry.sh/), [Hardhat](https://hardhat.org/) & [Ganache](https://trufflesuite.com/ganache/)\n- Test suite running against [forked](https://ethereum.org/en/glossary/#fork) Ethereum network\n\n... and a lot lot more.\n\n## Overview\n\n```ts\n// 1. Import modules.\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n## Documentation\n\n[Head to the documentation](https://viem.sh/docs/getting-started) to read and learn more about viem.\n\n## Community\n\nCheck out the following places for more viem-related content:\n\n- Follow [@wagmi_sh](https://twitter.com/wagmi_sh), [@jakemoxey](https://twitter.com/jakemoxey), and [@awkweb](https://twitter.com/awkweb) on Twitter for project updates\n- Join the [discussions on GitHub](https://github.com/wevm/viem/discussions)\n- [Share your project/organization](https://github.com/wevm/viem/discussions/104) that uses viem\n\n## Support\n\n- [GitHub Sponsors](https://github.com/sponsors/wevm?metadata_campaign=docs_support)\n- [Gitcoin Grant](https://wagmi.sh/gitcoin)\n- [wevm.eth](https://etherscan.io/enslookup-search?search=wevm.eth)\n\n## Sponsors\n\n<a href=\"https://paradigm.xyz\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/paradigm-dark.svg\">\n    <img alt=\"paradigm logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/paradigm-light.svg\" width=\"auto\" height=\"70\">\n  </picture>\n</a>\n\n<br>\n\n<a href=\"https://twitter.com/family\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/family-dark.svg\">\n    <img alt=\"family logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/family-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://twitter.com/context\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/context-dark.svg\">\n    <img alt=\"context logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/context-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://walletconnect.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/walletconnect-dark.svg\">\n    <img alt=\"WalletConnect logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/walletconnect-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://zksync.io/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/zksync-dark.svg\">\n    <img alt=\"zksync logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/zksync-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://twitter.com/prtyDAO\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/partydao-dark.svg\">\n    <img alt=\"PartyDAO logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/partydao-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://dynamic.xyz\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/dynamic-dark.svg\">\n    <img alt=\"Dynamic logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/dynamic-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://sushi.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/sushi-dark.svg\">\n    <img alt=\"Sushi logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/sushi-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://stripe.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/stripe-dark.svg\">\n    <img alt=\"Stripe logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/stripe-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://bitkeep.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/bitkeep-dark.svg\">\n    <img alt=\"BitKeep logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/bitkeep-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://privy.io\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/privy-dark.svg\">\n    <img alt=\"Privy logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/privy-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://spruceid.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/spruce-dark.svg\">\n    <img alt=\"Spruce logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/spruce-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://rollup.id\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/rollup.id-dark.svg\">\n    <img alt=\"rollup.id logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/rollup.id-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://pancakeswap.finance/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/pancake-dark.svg\">\n    <img alt=\"pancake logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/pancake-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://celo.org/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/celo-dark.svg\">\n    <img alt=\"celo logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/celo-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://pimlico.io/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/pimlico-dark.svg\">\n    <img alt=\"pimlico logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/pimlico-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://zora.co/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/zora-dark.svg\">\n    <img alt=\"zora logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/zora-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://lattice.xyz\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/lattice-dark.svg\">\n    <img alt=\"lattice logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/lattice-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://twitter.com/supafinance\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/supa-dark.svg\">\n    <img alt=\"supa logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/supa-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://blocto.io/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/blocto-dark.svg\">\n    <img alt=\"blocto logo\" src=\"https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/blocto-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n\n## Contributing\n\nIf you're interested in contributing, please read the [contributing docs](/.github/CONTRIBUTING.md) **before submitting a pull request**.\n\n## Authors\n\n- [@jxom](https://github.com/jxom) (jxom.eth, [Twitter](https://twitter.com/_jxom))\n- [@tmm](https://github.com/tmm) (awkweb.eth, [Twitter](https://twitter.com/awkweb))\n\n## License\n\n[MIT](/LICENSE) License\n", "release_dates": []}, {"name": "Waffle-ERC20-Example", "description": "A simple ERC20 token project in Waffle to get started with the OVM", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "**[DEPRECATED]** This repository is now deprecated in favour of the new development [monorepo](https://github.com/ethereum-optimism/optimism-monorepo).\n\n# Getting Started with the Optimistic Ethereum: Simple ERC20 Token Waffle Tutorial\n\nHi there! Welcome to our Optimistic Ethereum ERC20 Waffle example!\n\nIf your preferred smart contract testing framework is Truffle, see our Optimistic Ethereum ERC20 Truffle tutorial [here](https://github.com/ethereum-optimism/Truffle-ERC20-Example).\n\nIf you're interested in writing your first L2-compatible smart contract using Waffle as your smart contract testing framework, then you've come to the right place!\nThis repo serves as an example for how go through and compile & test your contracts on both Ethereum and Optimistic Ethereum.\n\nLet's begin!\n\n## Prerequisites\n\nPlease make sure you've installed the following before continuing:\n\n- [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- [Node.js](https://nodejs.org/en/download/)\n- [Yarn 1](https://classic.yarnpkg.com/en/docs/install#mac-stable)\n- [Docker](https://docs.docker.com/engine/install/)\n\n## Setup\n\nTo start, clone this `Waffle-ERC20-Example` repo, enter it, and install all of its dependencies:\n\n```sh\ngit clone https://github.com/ethereum-optimism/Waffle-ERC20-Example.git\ncd Waffle-ERC20-Example\nyarn install\n```\n\n## Step 1: Compile your contracts for Optimistic Ethereum\n\nCompiling a contract for Optimistic Ethereum is pretty easy!\nFirst we'll need to install the [`@eth-optimism/solc`](https://www.npmjs.com/package/@eth-optimism/solc) and [`solc`](https://www.npmjs.com/package/solc) packages.\nSince we currently only support `solc` versions `0.5.16`, `0.6.12`, and `0.7.6` for Optimistic Ethereum contracts, we'll be using version `0.7.6` in this example.\nLet's add these two packages:\n\n```sh\nyarn add @eth-optimism/solc@0.7.6-alpha.1\nyarn add solc@0.7.6\n```\n\nNext we just need to add a new Waffle config to compile our contracts.\nCreate `waffle-ovm.json` and add this to it:\n\n```json\n{\n  \"compilerVersion\": \"./node_modules/@eth-optimism/solc\",\n  \"sourceDirectory\": \"./contracts\",\n  \"outputDirectory\": \"./build-ovm\"\n}\n```\n\nHere, we specify the new custom Optimistic Ethereum compiler we just installed and the new build path for our compiled contracts.\n\nAnd we're ready to compile! All you have to do is specify the `waffle-ovm.json` config in your `waffle` command:\n\n```sh\nyarn waffle waffle-ovm.json\n```\n\nOur `waffle-ovm.json` config file tells Waffle that we want to use the Optimistic Ethereum solidity compiler.\n\nYep, it's that easy. You can verify that everything went well by looking for the `build-ovm` directory.\n\nHere, `build-ovm` signifies that the contracts contained in this directory have been compiled for the OVM, the Optimistic Virtual Machine, as opposed to the Ethereum Virtual Machine. Now let's move on to testing!\n\n## Step 2: Testing your Optimistic Ethereum contracts\n\nTesting with Waffle is easy. We've included a simple set of ERC20 tests inside [`Waffle-ERC20-Example/test/erc20.spec.js`](https://github.com/ethereum-optimism/Waffle-ERC20-Example/blob/main/test/erc20.test.js). Let's run these tests with `waffle`:\n\n```sh\nyarn mocha 'test/*.spec.js' --timeout 10000\n```\n\nIf everything went well, you should see a bunch of green checkmarks.\n\n### Testing an Optimistic Ethereum contract\n\nWoot! It's finally time to test our contract on top of Optimistic Ethereum.\nBut first we'll need to get a local version of an Optimistic Ethereum node running...\n\n-------\n\nFortunately, we have some handy dandy tools that make it easy to spin up a local Optimistic Ethereum node!\n\nSince we're going to be using Docker, make sure that Docker is installed on your machine prior to moving on (info on how to do that [here](https://docs.docker.com/engine/install/)).\n**We recommend opening up a second terminal for this part.**\nThis way you'll be able to keep the Optimistic Ethereum node running so you can execute some contract tests.\n\nNow we just need to download, build, and install our Optimistic Ethereum node by running the following commands.\nPlease note that `docker-compose build` *will* take a while.\nWe're working on improving this (sorry)!\n\n```sh\ngit clone git@github.com:ethereum-optimism/optimism.git\ncd optimism\nyarn install\nyarn build\ncd ops\ndocker-compose build\ndocker-compose up\n```\n\nYou now have your very own locally deployed instance of Optimistic Ethereum! \ud83d\ude4c\n\n-------\n\nWith your local instance of Optimistic Ethereum up and running, let's test your contracts! Since the two JSON RPC provider URLs (one for your local instance Ethereum and Optimistic Ethereum) have already been specified in your `.env` file, all we need to do next is run the test command.\n\nTo do that, run:\n\n```sh\nyarn TARGET=OVM mocha 'test/*.spec.js' --timeout 50000\n```\n\nNotice that we use the `TARGET=OVM` flag to let `mocha` know that we want to use the `build-ovm` folder as our path to our JSON files.\n(Remember that these JSON files were compiled using the Optimistic Ethereum solidity compiler!)\n\nYou should see a set of passing tests for your ERC20 contract. If so, congrats!\nYou're ready to deploy an application to Optimistic Ethereum.\nIt really is that easy.\n\nAnd uh... yeah. That's pretty much it.\nTutorial complete.\nHopefully now you know the basics of working with Optimistic Ethereum! \ud83c\udd7e\ufe0f\n\n------\n\n## Further Reading\n\n### OVM vs. EVM Incompatibilities\n\nOur goal is to bring the OVM as close to 100% compatibility with all existing Ethereum projects, but our software is still in an early stage. [Our community hub docs](https://community.optimism.io/docs/protocol/evm-comparison.html) will maintain the most up to date list of known incompatibilities between the OVM and EVM, along with our plans to fix them.\n\n### Wasn't that easy?\n\nThe OVM provides a fresh new take on layer 2 development: it's _mostly_ identical to layer 1 development.\nHowever, there are a few differences that are worth noting, which you can read more about in our [EVM comparison documentation](https://community.optimism.io/docs/protocol/evm-comparison.html).\nNo hoops, no tricks--the Ethereum you know and love, ready to scale up with L2.\nFor more info on our progress and what's going on behind the scenes, you can follow us on [Twitter](https://twitter.com/optimismPBC).\n\nWant to try deploying contracts to the Optimistic Ethereum testnet next? [Check out the full integration guide](https://community.optimism.io/docs/developers/integration.html) on the Optimism community hub.\n\n------\n\n## Troubleshooting\n\nExample project not working? [Create a Github Issue](https://github.com/ethereum-optimism/Truffle-ERC20-Example/issues), or hop in our [Discord](https://discordapp.com/invite/jrnFEvq) channel and ask away.\n", "release_dates": []}, {"name": "wagmi", "description": "React Hooks for Ethereum", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/logo-dark.svg\">\n    <img alt=\"wagmi logo\" src=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/logo-light.svg\" width=\"auto\" height=\"60\">\n  </picture>\n</p>\n\n<p align=\"center\">\n  React Hooks for Ethereum\n<p>\n\n<div align=\"center\">\n  <a href=\"https://www.npmjs.com/package/wagmi\">\n    <img src=\"https://img.shields.io/npm/v/wagmi?colorA=21262d&colorB=161b22&style=flat\" alt=\"Version\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/wagmi\">\n    <img src=\"https://img.shields.io/npm/dm/wagmi?colorA=21262d&colorB=161b22&style=flat\" alt=\"Downloads per month\">\n  </a>\n  <a href=\"https://bestofjs.org/projects/wagmi\">\n    <img src=\"https://img.shields.io/endpoint?colorA=21262d&colorB=161b22&style=flat&url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=wagmi-dev%2Fwagmi%26since=daily\" alt=\"Best of JS\">\n  </a>\n</div>\n\n<br>\n\n## Features\n\n- \ud83d\ude80 20+ hooks for working with wallets, ENS, contracts, transactions, signing, etc.\n- \ud83d\udcbc Built-in wallet connectors for MetaMask, WalletConnect, Coinbase Wallet, and Injected\n- \ud83d\udc5f Caching, request deduplication, multicall, batching, and persistence\n- \ud83c\udf00 Auto-refresh data on wallet, block, and network changes\n- \ud83e\udd84 TypeScript ready\n- \ud83c\udf33 Test suite running against forked Ethereum network\n\n...and a lot more.\n\n## Documentation\n\nFor full documentation and examples, visit [wagmi.sh](https://wagmi.sh).\n\n## Installation\n\nInstall wagmi and its ethers peer dependency.\n\n```bash\nnpm install wagmi ethers\n```\n\n## Quick Start\n\nConnect a wallet in under 60 seconds. LFG.\n\n```tsx\nimport { WagmiConfig, createClient } from 'wagmi'\nimport { getDefaultProvider } from 'ethers'\n\nconst client = createClient({\n  autoConnect: true,\n  provider: getDefaultProvider(),\n})\n\nfunction App() {\n  return (\n    <WagmiConfig client={client}>\n      <Profile />\n    </WagmiConfig>\n  )\n}\n```\n\n```tsx\nimport { useAccount, useConnect, useDisconnect } from 'wagmi'\nimport { InjectedConnector } from 'wagmi/connectors/injected'\n\nfunction Profile() {\n  const { address } = useAccount()\n  const { connect } = useConnect({\n    connector: new InjectedConnector(),\n  })\n  const { disconnect } = useDisconnect()\n\n  if (address)\n    return (\n      <div>\n        Connected to {address}\n        <button onClick={() => disconnect()}>Disconnect</button>\n      </div>\n    )\n  return <button onClick={() => connect()}>Connect Wallet</button>\n}\n```\n\nIn this example, we create a wagmi `Client` and pass it to the `WagmiConfig` React Context. The client is set up to use the ethers Default Provider and automatically connect to previously connected wallets.\n\nNext, we use the `useConnect` hook to connect an injected wallet (e.g. MetaMask) to the app. Finally, we show the connected account's address with `useAccount` and allow them to disconnect with `useDisconnect`.\n\nWe've only scratched the surface for what you can do with wagmi!\n\n\u2014\n\nCheck out [ConnectKit](https://docs.family.co/connectkit?utm_source=wagmi-dev) to get started with pre-built interface on top of wagmi for managing wallet connections.\n\n## Community\n\nCheck out the following places for more wagmi-related content:\n\n- Join the [discussions on GitHub](https://github.com/wagmi-dev/wagmi/discussions)\n- Follow [@wagmi_sh](https://twitter.com/wagmi_sh) on Twitter for project updates\n- Share [your project/organization](https://github.com/wagmi-dev/wagmi/discussions/201) using wagmi\n- Browse the [awesome-wagmi](https://github.com/wagmi-dev/awesome-wagmi) list of awesome projects and resources\n\n## Support\n\nIf you find wagmi useful, please consider supporting development. Thank you \ud83d\ude4f\n\n- [GitHub Sponsors](https://github.com/sponsors/wagmi-dev?metadata_campaign=gh_readme_support)\n- [Gitcoin Grant](https://gitcoin.co/grants/4493/wagmi-react-hooks-library-for-ethereum)\n- [wagmi-dev.eth](https://etherscan.io/enslookup-search?search=wagmi-dev.eth)\n\n## Sponsors\n\n<a href=\"https://twitter.com/family\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/family-dark.svg\">\n    <img alt=\"family logo\" src=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/family-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://twitter.com/context\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/context-dark.svg\">\n    <img alt=\"context logo\" src=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/context-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://walletconnect.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/walletconnect-dark.svg\">\n    <img alt=\"WalletConnect logo\" src=\"https://raw.githubusercontent.com/wagmi-dev/.github/main/content/sponsors/walletconnect-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n<a href=\"https://looksrare.org\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/wagmi-dev/.github/8923685e23fe9708b74d456c3f9e7a2b90f6abd9/content/sponsors/looksrare-dark.svg\">\n    <img alt=\"LooksRare logo\" src=\"https://raw.githubusercontent.com/wagmi-dev/.github/8923685e23fe9708b74d456c3f9e7a2b90f6abd9/content/sponsors/looksrare-light.svg\" width=\"auto\" height=\"50\">\n  </picture>\n</a>\n\n## Contributing\n\nIf you're interested in contributing, please read the [contributing docs](/.github/CONTRIBUTING.md) **before submitting a pull request**.\n\n## Authors\n\n- awkweb.eth ([@awkweb](https://twitter.com/awkweb)) \u2013 [Mirror](https://mirror.xyz)\n- moxey.eth ([@jakemoxey](https://twitter.com/jakemoxey)) \u2013 [Rainbow](https://rainbow.me)\n\nThanks to julianhutton.eth ([@julianjhutton](https://twitter.com/julianjhutton)) for providing the awesome logo!\n\n## License\n\n[WAGMIT](/LICENSE) License\n\n<br />\n\n<a href=\"https://vercel.com/?utm_source=wagmi-dev&utm_campaign=oss\">\n  <img src=\"https://www.datocms-assets.com/31049/1618983297-powered-by-vercel.svg\" alt=\"Powered by Vercel\" height=\"35\">\n</a>\n", "release_dates": []}, {"name": "web3-react", "description": "\ud83e\uddf0 A simple, maximally extensible, dependency minimized framework for building modern Ethereum dApps", "language": "TypeScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# `web3-react` \ud83e\uddf0\n\n_A simple, maximally extensible, dependency minimized framework for building modern [Ethereum dApps](https://ethereum.org/beginners/)_\n\n[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n\n[![Actions Status](https://github.com/NoahZinsmeister/web3-react/workflows/CI/badge.svg)](https://github.com/NoahZinsmeister/web3-react/actions)\n\n| Packages                              | `@latest` Version                                                                                                                                                         | Size                                                                                                                                                                                 | Description                                                                         |\n| ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------- |\n| \ud83c\udfe0 **Core**                           |\n| `@web3-react/core`                    | [![npm version](https://img.shields.io/npm/v/@web3-react/core/latest.svg)](https://www.npmjs.com/package/@web3-react/core/v/latest)                                       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/core/latest.svg)](https://bundlephobia.com/result?p=@web3-react/core@latest)                                       | [React](https://reactjs.org/) Interface                                             |\n| \ud83d\udd0c **Connectors**                     |\n| _Browser Extension/dApp Browser_      |\n| `@web3-react/injected-connector`      | [![npm version](https://img.shields.io/npm/v/@web3-react/injected-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/injected-connector/v/latest)           | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/injected-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/injected-connector@latest)           | [Injected](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md) Connector |\n| _Remote API_                          |\n| `@web3-react/network-connector`       | [![npm version](https://img.shields.io/npm/v/@web3-react/network-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/network-connector/v/latest)             | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/network-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/network-connector@latest)             | [RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC) Connector                     |\n| _QR Code_                             |\n| `@web3-react/walletconnect-connector` | [![npm version](https://img.shields.io/npm/v/@web3-react/walletconnect-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/walletconnect-connector/v/latest) | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/walletconnect-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/walletconnect-connector@latest) | [WalletConnect](https://walletconnect.org/) Connector                               |\n| `@web3-react/walletlink-connector`    | [![npm version](https://img.shields.io/npm/v/@web3-react/walletlink-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/walletlink-connector/v/latest)       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/walletlink-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/walletlink-connector@latest)       | [WalletLink](https://www.walletlink.org/#/) Connector                               |\n| _Hardware_                            |\n| `@web3-react/ledger-connector`        | [![npm version](https://img.shields.io/npm/v/@web3-react/ledger-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/ledger-connector/v/latest)               | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/ledger-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/ledger-connector@latest)               | [Ledger](https://www.ledger.com/) Connector                                         |\n| `@web3-react/trezor-connector`        | [![npm version](https://img.shields.io/npm/v/@web3-react/trezor-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/trezor-connector/v/latest)               | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/trezor-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/trezor-connector@latest)               | [Trezor](https://trezor.io/) Connector                                              |\n| `@web3-react/lattice-connector`        | [![npm version](https://img.shields.io/npm/v/@web3-react/lattice-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/lattice-connector/v/latest)               | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/lattice-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/lattice-connector@latest)               | [Lattice](https://gridplus.io/) Connector                                              |\n| _Native_                              |\n| `@web3-react/frame-connector`         | [![npm version](https://img.shields.io/npm/v/@web3-react/frame-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/frame-connector/v/latest)                 | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/frame-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/frame-connector@latest)                 | [Frame](https://frame.sh/) Connector                                                |\n| _Hosted_                              |\n| `@web3-react/authereum-connector`     | [![npm version](https://img.shields.io/npm/v/@web3-react/authereum-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/authereum-connector/v/latest)         | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/authereum-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/authereum-connector@latest)         | [Authereum](https://authereum.org/) Connector                                       |\n| `@web3-react/fortmatic-connector`     | [![npm version](https://img.shields.io/npm/v/@web3-react/fortmatic-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/fortmatic-connector/v/latest)         | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/fortmatic-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/fortmatic-connector@latest)         | [Fortmatic](https://fortmatic.com/) Connector                                       |\n| `@web3-react/portis-connector`        | [![npm version](https://img.shields.io/npm/v/@web3-react/portis-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/portis-connector/v/latest)               | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/portis-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/portis-connector@latest)               | [Portis](https://www.portis.io/) Connector                                          |\n| `@web3-react/squarelink-connector`    | [![npm version](https://img.shields.io/npm/v/@web3-react/squarelink-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/squarelink-connector/v/latest)       | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/squarelink-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/squarelink-connector@latest)       | [Squarelink](https://squarelink.com/) Connector                                     |\n| `@web3-react/torus-connector`         | [![npm version](https://img.shields.io/npm/v/@web3-react/torus-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/torus-connector/v/latest)                 | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/torus-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/torus-connector@latest)                 | [Torus](https://tor.us/) Connector                                                  |\n| \ud83d\udc09 **Low-Level**                      |\n| `@web3-react/abstract-connector`      | [![npm version](https://img.shields.io/npm/v/@web3-react/abstract-connector/latest.svg)](https://www.npmjs.com/package/@web3-react/abstract-connector/v/latest)           | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/abstract-connector/latest.svg)](https://bundlephobia.com/result?p=@web3-react/abstract-connector@latest)           | Shared Connector Class                                                              |\n| `@web3-react/types`                   | [![npm version](https://img.shields.io/npm/v/@web3-react/types/latest.svg)](https://www.npmjs.com/package/@web3-react/types/v/latest)                                     | [![minzip](https://img.shields.io/bundlephobia/minzip/@web3-react/types/latest.svg)](https://bundlephobia.com/result?p=@web3-react/types@latest)                                     | Shared [TypeScript](https://www.typescriptlang.org/) Types                          |\n\n## Quickstart\n\n[![Edit web3-react-example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/NoahZinsmeister/web3-react/tree/v6/example?fontsize=14&hidenavigation=1&theme=dark)\n\n## [Documentation](docs)\n\n## Projects using `web3-react`\n\n_Open a PR to add your project to the list!_\n\n- [Uniswap.exchange](https://github.com/Uniswap/uniswap-frontend)\n- [hypertext.finance](https://github.com/NoahZinsmeister/hypertext)\n- [useWallet](https://github.com/aragon/use-wallet)\n- [Terminal](https://blog.terminal.co/web3-react-integration/)\n- [Everest](https://github.com/metacartel/everest-web-app)\n- [NFT Scribe](https://github.com/conlan/nft-scribe)\n- [Compound Liquidator](https://github.com/conlan/compound-liquidator)\n- [wildcards.world](https://github.com/wildcards-world/ui)\n- [Outpost](https://github.com/OutpostProtocol/outpost-app)\n- [Async Art](https://async.art)\n- [Union](https://union.finance)\n- [Aave](https://app.aave.com)\n- [Eth2 Launchpad](https://launchpad.ethereum.org/)\n- [EthBlockArt](https://ethblock.art/)\n\n\n## Related Efforts\n\n- [Web3Modal](https://github.com/web3modal/web3modal)\n\n## Local Development\n\n- Clone repo\\\n  `git clone https://github.com/NoahZinsmeister/web3-react.git`\n\n- Install top-level dependencies\\\n  `yarn`\n\n- Install sub-dependencies\\\n  `yarn bootstrap`\n\n- Build and watch for changes\\\n  `yarn start`\n", "release_dates": []}, {"name": "workshops", "description": "Workshops that we teach", "language": "Solidity", "license": null, "readme": "# Optimism Workshops\n\nFor classes we teach (as opposed to self-guided tutorials)\n", "release_dates": []}, {"name": "ynatm", "description": "You Need A Transaction Manager (for Ethereum)", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# You Need A Transaction Manager (YNATM)\n\nThank you [kendricktan](https://github.com/kendricktan) for writing this\nlibrary.\n\n[![circleci](https://badgen.net/circleci/github/ethereum-optimism/ynatm)](https://app.circleci.com/pipelines/github/ethereum-optimism/ynatm)\n[![npm](https://badgen.net/npm/v/ynatm)](https://www.npmjs.com/package/@eth-optimism/ynatm)\n\n**(For Ethereum)**\n\nWith the recent spike in gas prices, you can't just send a 1 GWEI gas price for your Ethereum tx and hope that it will get mined.\n\nThis small module helps you guarantee that your transaction gets mined within a reasonable time frame, by bumping up the gas price (up till a threshold) until your transaction gets mined.\n\n## Examples\n\n### Quickstart\n\n```bash\nnpm install ynatm\n```\n\n```javascript\nconst ynatm = require(\"ynatm\");\n\nconst nonce = provider.getTransactionCount(SENDER_ADDRESS);\n\nconst txOptions = {\n  from: SENDER_ADDRESS,\n  to: RECIPIENT_ADDRESS,\n  nonce\n}\n\nconst tx = await ynatm.send({\n  sendTransactionFunction: (gasPrice) =>\n    wallet.sendTransaction({ ...txOptions, gasPrice }),\n  minGasPrice: ynatm.toGwei(1),\n  maxGasPrice: ynatm.toGwei(20),\n  gasPriceScalingFunction: ynatm.LINEAR(5), // Scales by 5 GWEI in gasPrice between each try\n  delay: 15000, // Waits 15 second between each try\n});\n```\n\n### Contract Interaction\n\nSince `ynatm` is framework agnostic, you can also use it for contract interaction like so:\n\n```javascript\nconst ynatm = require(\"ynatm\");\n\nconst nonce = provider.getTransactionCount(SENDER_ADDRESS);\nconst options = {\n  from: SENDER_ADDRESS,\n  nonce,\n}\n\nconst ethersSendContractFunction = (gasPrice) => {\n  const tx = MyContract.functionName(params, { ...options, gasPrice });\n  const txRecp = await tx.wait(1); // wait for 1 confirmations\n  return txRecp;\n};\n\nconst web3SendContractFunction = (gasPrice) => {\n  // Web3 by default waits for the receipt\n  return MyContract.methods.functionName(params).send({ ...options, gasPrice });\n};\n\nconst tx = await ynatm.send({\n  sendTransactionFunction: ethersSendContractFunction, // or web3SendContractFunction\n  minGasPrice: ynatm.toGwei(1),\n  maxGasPrice: ynatm.toGwei(20),\n  gasPriceScalingFunction: ynatm.LINEAR(5), // Scales by 5 GWEI in gasPrice between each try\n  delay: 15000, // Waits 15 second between each try\n});\n```\n\n### Custom `gasPriceScalingFunction`\n\nYou can define your own `gasPriceScalingFunction`, which takes in a destructured object containing the following keys:\n- `x`: X'th number of try\n- `y`: Current gasPrice\n- `c`: Constant, `minGasPrice`\n\n```javascript\nconst customGasScalingFunction = ({ x, y, c }) => {\n  return ...\n}\n```\n\n### Immediate Error Handling with `rejectImmediatelyOnCondition`\n\nThe expected behavior when the transaction manager hits an error is to:\n\n1. Check if the error meets the condition specified in `rejectImmediatelyOnCondition` (Defaults to checking for reverts)\n   - If the condition is met, all future transactions are cancelled the the promise is rejected\n2. Checks to see if all the transactions have failed\n   - If all transactions have failed, reject the last error\n3. Keep trying\n\nThat means that if you're queued up 5 invalid transactions, all 5 of them will need to fail before you can thrown an error.\n\nIf you'd like to speed up the process and immediately throw an error when the first invalid transaction is thrown matches a certain criteria, you can do so by overriding the `rejectImmediatelyOnCondition` like so:\n\n```javascript\nconst ynatm = require(\"ynatm\");\n\nconst rejectOnTheseMessages = (err) => {\n  const errMsg = err.toString().toLowerCase();\n\n  const conditions = [\"revert\", \"gas\", \"nonce\", \"invalid\"];\n\n  for (const i of conditions) {\n    if (errMsg.includes(i)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst nonce = await provider.getTransactionCount(SENDER_ADDRESS);\n\nconst tx = {\n  from: SENDER_ADDRESS,\n  to: RECIPIENT_ADDRESS,\n  nonce,\n  data: '0x'\n}\n\nawait ynatm.send({\n  sendTransactionFunction: (gasPrice) => wallet.sendTransaction({ ...tx, gasPrice }),\n  minGasPrice: ynatm.toGwei(1),\n  maxGasPrice: ynatm.toGwei(20),\n  gasPriceScalingFunction: ynatm.LINEAR(5),\n  delay: 15000,\n  rejectImmediatelyOnCondition: rejectOnTheseMessages,\n});\n```\n\n## Testing\n\n```bash\n# Terminal 1\nyes '' | geth --dev --dev.period 15 --http --http.addr '0.0.0.0' --http.port 8545 --http.api 'eth,net,web3,account,admin,personal' --unlock '0' --allow-insecure-unlock\n\n# Terminal 2\nyarn test\n```\n\nIf you don't have `geth` installed locally, you can also use `docker`\n\n```bash\n# Terminal 1\ndocker run -p 127.0.0.1:8545:8545/tcp --entrypoint /bin/sh ethereum/client-go:v1.9.14 -c \"yes '' | geth --dev --dev.period 15 --http --http.addr '0.0.0.0' --http.port 8545 --http.api 'eth,net,web3,account,admin,personal' --unlock '0' --allow-insecure-unlock\"\n\n# Terminal 2\nyarn test\n```\n", "release_dates": []}]