[{"name": ".github", "description": "useful to contain FUNDING.yml", "language": null, "license": null, "readme": "# .github\nuseful to contain FUNDING.yml\n", "release_dates": []}, {"name": "android", "description": "Sage's Android App (GSoC 2014)", "language": "Java", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# Sage Android\nThe [Sage Android Application](https://play.google.com/store/apps/details?id=org.sagemath.droid) allows Android users to use Sage on the go by tapping into the power of the Sage Cell Server. To find out more, visit [sagecell.sagemath.org](http://sagecell.sagemath.org/), and for more information on the Application itself, check out the [Wiki](https://github.com/sagemath/android/wiki/_pages).\n\n![Sage Android Screenshot](http://rasmi.io/downloads/sagescreenshot.png)\n\n", "release_dates": []}, {"name": "anything-sage", "description": "An anything extension for sage-shell-mode", "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "[![melpa badge][melpa-badge]][melpa-link] [![melpa stable badge][melpa-stable-badge]][melpa-stable-link]\n\n# Overview\n`anything-sage` provides an [anything](https://github.com/emacs-anything/anything)\n source for\n[sage-shell-mode](https://github.com/stakemori/sage-shell-mode).\n\nThis package is an `anything` version of\n[helm-sage](https://github.com/stakemori/helm-sage).\nIf you use Emacs 24 or newer, then it is recommended to use [helm-sage](https://github.com/stakemori/helm-sage).\n\n# Installation\nYou can install `anything-sage` from\n[MELPA](https://github.com/milkypostman/melpa.git) by package.el\n(`M-x package-install anything-sage`).\n\n\n# Commands\n`anything-sage` provides 3 commands, `anything-sage-shell`,\n`anything-sage-shell-describe-object-at-point` and\n`anything-sage-command-history`.\n\n| Command                                  | Description                                                            |\n|------------------------------------------|------------------------------------------------------------------------|\n| anything-sage-shell                          | Show completions at point.                                             |\n| anything-sage-shell-describe-object-at-point | Almost same as `anything-sage-shell`. But the default action is different. |\n| anything-sage-command-history                | Show command history.                                                  |\n\nIn `anything-sage-shell`, press `TAB` to show the list of actions.\nThere are 3 actions, \"Insert\", \"View Docstring\" and \"View Source File\".\n\n\n\n# Sample configuration\nBind `anything-sage-shell`,\n`anything-sage-shell-describe-object-at-point` and\n`anything-sage-command-history` to some keys, e.g.:\n```lisp\n(defun anything-sage-set-up ()\n  (local-set-key (kbd \"C-c C-i\") 'anything-sage-shell)\n  (local-set-key (kbd \"C-c C-d\") 'anything-sage-shell-describe-object-at-point)\n  (local-set-key (kbd \"M-r\") 'anything-sage-command-history))\n(add-hook 'sage-shell-mode-hook 'anything-sage-set-up)\n```\n\n[melpa-link]: http://melpa.org/#/anything-sage\n[melpa-stable-link]: http://stable.melpa.org/#/anything-sage\n[melpa-badge]: http://melpa.org/packages/anything-sage-badge.svg\n[melpa-stable-badge]: http://stable.melpa.org/packages/anything-sage-badge.svg\n", "release_dates": []}, {"name": "artwork", "description": "collection of various graphics related to SageMath", "language": null, "license": null, "readme": "# Artwork for SageMath\n\nThese graphics and images are for [www.sagemath.org](http://www.sagemath.org).\n\n\n\n## License\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br />This <span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/StillImage\" rel=\"dct:type\">work</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"http://www.sagemath.org\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">SageMath</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n\n", "release_dates": []}, {"name": "asv-data", "description": "Collects doctest timings from the Sage repository for speed regression testing with Airspeed Velocity", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "auto-complete-sage", "description": "An auto-complete source for sage-shell-mode", "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# auto-complete-sage\n\n[![melpa badge][melpa-badge]][melpa-link]\n[![melpa stable badge][melpa-stable-badge]][melpa-stable-link]\n[![Build Status](https://travis-ci.org/stakemori/auto-complete-sage.svg)](https://travis-ci.org/stakemori/auto-complete-sage)\n\n## Overview\n\n`auto-complete-sage` provides [auto-complete](https://github.com/auto-complete/auto-complete)\n sources for [sage-shell-mode](https://github.com/stakemori/sage-shell-mode).\n\n![ac-sage](images/ac-sage.gif)\n\n## Installation\nYou can install `auto-complete-sage` from\n[MELPA](https://github.com/milkypostman/melpa.git) by package.el\n(`M-x package-install auto-complete-sage`).\n\nFor the setting of [auto-complete](https://github.com/auto-complete/auto-complete),\nsee the [manual](http://cx4a.org/software/auto-complete/manual.html)\nof `auto-complete-mode`.\n\n`auto-complete-sage` provides specific sources for `sage-shell-mode`.\nTo add these sources to `ac-sources`, put the following lines to `\"~/.emacs.d/init.el\"`:\n```lisp\n(add-hook 'sage-shell:sage-mode-hook 'ac-sage-setup)\n(add-hook 'sage-shell-mode-hook 'ac-sage-setup)\n```\n\n## Tab Completion\n`auto-complete-sage` replaces the default completion function of\n`sage-shell-mode` (`completion-at-point`) by `auto-complete`.\nIf you want to use `completion-at-point` for the Tab completion,\nput the following line to `\"~/.emacs.d/init.el\"`:\n\n```\n(eval-after-load \"auto-complete-sage\"\n  '(setq sage-shell:completion-function 'completion-at-point))\n```\n\n\n## Customization\n\n* `ac-sage-show-quick-help` (default value: `nil`).\n  To show a quick help, set this variable to `non-nil`.\n  ```\n  (setq ac-sage-show-quick-help t)\n  ```\n  By default, quick help for an instance of\n  `sage.misc.lazy_import.LazyImport` is not shown.\n  To show quick help for all instances, put the following line to\n  `\"~/.emacs.d/init.el\"`.\n  ```\n  (setq ac-sage-quick-help-ignore-classes '(\"\"))\n  ```\n\n* `ac-sage-complete-on-dot` (default value: `nil`).\n  This variable is similar to `jedi:complete-on-dot` in\n  [jedi](https://github.com/tkf/emacs-jedi).\n  When `non-nil`, `auto-complete` starts when a dot is inserted.\n\nFor more customization, `M-x customize-group RET auto-complete-sage`.\n\n[melpa-link]: http://melpa.org/#/auto-complete-sage\n[melpa-stable-link]: http://stable.melpa.org/#/auto-complete-sage\n[melpa-badge]: http://melpa.org/packages/auto-complete-sage-badge.svg\n[melpa-stable-badge]: http://stable.melpa.org/packages/auto-complete-sage-badge.svg\n", "release_dates": []}, {"name": "binary-pkg", "description": "Tools for creating binary tarballs", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "TL;DR\n=====\n\nTo build Sage binaries, just clone this repository and run\n\n    git clone https://github.com/sagemath/binary-pkg.git\n    cd binary-pkg\n    make bdist-sage-linux     # If you are on Linux\n    make bdist-sage-osx       # If you are on OSX\n    ls dist/                  # Built binaries will be in this directory\n\nEdit `sage.yaml` if you want to build something else than the current\nSage `develop` git branch.\n\n\nBinary Packaging\n================\n\nThis utility helps with creating binaries for distribution. Similar to\nconda, it builds the source tree in a long directory name which is\nthen patched at install time. It is written for Sage\n(http://www.sagemath.org) but equally work for other software.\n\n\nUsage\n-----\n\nBuilding and packaging of an application is configured with a yaml\nfile in the repository root. As an example, there is test.yaml and\nsage.yaml. To create a binary tarball for Sage, for example, all you\nhave to do is run\n\n    make package-sage\n\nThis creates a tarball with an added ``relocate-once.py`` file that\npatches any hard-coded paths. If there are more than one packaging\nconfigurations (see below), then the first one is used by default. Use\nthe ``PACKAGE`` variable to pick another one, for example\n\n    make package-sage PACKAGE=\"OSX DMG image\"\n\nIn particular, see below for the different Mac packaging possibilities.\n\nConfiguration Syntax\n--------------------\n\nBinary packaging information can be specified with a YAML\nconfiguration file. As a simplified example, let us look at the test\napplication in the test.yaml file. It starts with the name:\n\n    name: PackagingTest\n\nwhich will be the name of the root directory in the binary\ntarball. Our basic assumption is that your source code lives in a git\nrepository, which we specify next:\n\n    repository: https://github.com/octol/minimal-gtest-autotools\n    branch: master\n\nThen we have a (bash) build script to build the application\n\n    build: |\n        autoreconf -vfi\n        ./configure\n        make\n\nAfter the build is complete, we need to know the version. Typically\nthis can be gotten via a command line switch of the application,\nthough in this case we cheat. In any case, the output of this script\nis the version:\n\n    version: |\n        echo 1.0\n\nFinally, we define how to package the built source tree. There may be\nmore than one way to package the application, each of which is\ndistinguished by an internal name.\n\n    package:\n      - name: Full binary tarball\n        command: |\n            tar cjf {dist}/test-{version}-{osname}-{arch}.tar.bz2 {path}\n        files:\n          - include: '**'\n        rewrite_path:\n          - exclude: '**/*.a'\n    \nThe `files` section is a list of include/exclude directives, to be\nread from the bottom up. That is, later directives override earlier\nones. The `rewrite_path` section defines a subset of the files that\nare to be ignored when rewriting hard-coded paths. In this example,\nall files are included but paths in static archives are not patched.\n\n\nAuxiliary Make Targets\n----------------------\n\nAny ``*.mk`` file in the root directory will be included in the\n``Makefile`` for recurring build targets.\n\nMac Packaging Options\n---------------------\n\nThere are three options for packaging Mac.  The default will simply\ncreate a ``.tar.gz`` file, which is usually not what one wants on Mac.\n\nTo create a Mac disk image file of the normal Sage command line distribution,\nuse this package option:\n\n    make package-sage PACKAGE=\"OSX DMG image\"\n\nTo create a Mac disk image file of the Mac app bundle with menu items and\nwhich automatically launches a notebook, use\n\n    make package-sage PACKAGE=\"OSX mac app\"\n", "release_dates": []}, {"name": "binary-pkg-test", "description": "Test for the binary-pkg repo", "language": "C++", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "Test for Binary Packaging\n=========================\n\nThis project demonstrates how paths are typically hardcoded in\nbinaries. It is a testcase for https://github.com/sagemath/binary-pkg", "release_dates": []}, {"name": "cloud", "description": "*MOVED TO*  https://github.com/sagemathinc/cocalc", "language": "JavaScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# MOVED TO  https://github.com/sagemathinc/cocalc\n", "release_dates": []}, {"name": "cloud.sagemath.org", "description": "redirect to cocalc", "language": "HTML", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# cloud.sagemath.org\nredirect to cloud.sagemath.com\n", "release_dates": []}, {"name": "codemirror-sage-mode", "description": "for developing a codemirror sage mode", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# CodeMirror `sage` mode\n\nThe goal is to host a codemirror \"mode\" file, such that syntax highlighting works properly.\n\nIn particular, `K.<x,y> = ...` constructs are broken when using [\"python\"-mode](https://github.com/codemirror/CodeMirror/blob/master/mode/python/python.js) as a fallback.\n\n\n", "release_dates": []}, {"name": "combinat", "description": "Website combinat.sagemath.org (redirect to https://wiki.sagemath.org/combinat)", "language": "HTML", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# combinat.sagemath.org\n## History of Sage-Combinat\nSage-Combinat started back in 2008, as a reincarnation of a similar\nproject MuPAD-Combinat (MuPAD is nown owned by MathWorks\n& we switched the underlying platform from MuPAD to Sage).\nAt some point Sage-Combinat was a tightly knit group of\nabout 30 people working together on the core combinatorics feature;\nthis required tight coordination and a common location for sharing\nin-development code (which was the Sage-Combinat queue).\n\n## Purpose\n\nWe want the combinat.sagemath.org website to work for historical reasons:\nfor example, being a part of the Sage CAS, many publications include the\nwebsite in a citation.\n\nMost pages should redirect to a suitable http://wiki.sagemath.org/combinat\npage. Check the /misc and /publications folders for publications that we are\nkeeping for the above reasons.\n", "release_dates": []}, {"name": "company-sage", "description": null, "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "conway-polynomials", "description": "Python interface to Frank L\u00fcbeck's Conway polynomial database", "language": "Python", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "cypari2", "description": "Python interface to the number theory library PARI/GP", "language": "Cython", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": null, "release_dates": ["2023-10-10T17:05:08Z"]}, {"name": "cysignals", "description": "cysignals: interrupt and signal handling for Cython", "language": "Cython", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": null, "release_dates": ["2023-10-07T19:31:25Z", "2023-10-04T17:43:36Z", "2021-12-15T09:05:09Z", "2021-11-26T07:39:32Z", "2021-04-01T08:02:45Z", "2019-03-14T13:43:47Z", "2019-03-12T16:26:00Z", "2019-03-09T10:12:03Z", "2019-01-16T12:24:25Z", "2018-12-18T14:09:48Z", "2018-12-14T22:03:45Z", "2018-07-10T20:23:57Z", "2018-04-17T12:11:44Z", "2018-04-06T11:36:03Z", "2018-03-13T13:34:36Z", "2018-03-08T11:34:43Z", "2018-02-10T11:45:17Z", "2018-01-12T12:58:51Z", "2017-07-20T15:01:43Z", "2017-04-23T13:05:29Z", "2017-04-17T17:23:08Z", "2017-04-14T09:38:48Z", "2017-04-14T08:47:13Z", "2017-04-13T13:52:23Z", "2017-04-11T13:51:17Z", "2016-11-22T07:45:25Z", "2016-11-08T14:07:48Z", "2016-11-01T16:58:18Z", "2016-11-01T14:34:44Z", "2016-10-05T13:22:56Z"]}, {"name": "database_stein_watkins", "description": "The Stein-Watkins database of elliptic curves", "language": null, "license": null, "readme": "# database_stein_watkins\nThe Stein-Watkins database of elliptic curves.\n", "release_dates": []}, {"name": "days117", "description": null, "language": "Jupyter Notebook", "license": null, "readme": "# Organization of sage days 117\n\nOrganization of sage days 117 in le Teich (February 2023).\n\n## Participant check list\n\n* double check the spreadsheet [meals.csv](https://github.com/sagemath/days117/blob/master/organization/output/meals.csv).\n* write down your project at https://codimd.math.cnrs.fr/fXNTId-5Q06e2RVvu31g4w\n* create an account on https://sagemath.zulipchat.com/\n* check where you stay in Maison de la nature: [organization/rooms.md](https://github.com/sagemath/days117/blob/master/organization/rooms.md)\n\n## Schedule\n\n### All days\n\n* 08:00-09:00 : breakfast\n* 12:00-13:00 : lunch\n* 19:30-20:30 : dinner\n\n### Monday 6\n\nHigh tides : 05:54 and 18:13\n\n* 09:00-10:30 : install party + refine participant projects + make schedule for tutorials\n* 10:30 : participant presentations (who they are and what they want to work on)\n* 12:00 or 12:30 : meal\n* 14:00-15:30 : Introduction to SageMath + adapting your workflow (by S\u00e9bastien)\n* 16:00-17:00 : Basic Python and SageMath (by Vincent)\n* 17:30 : remote talk on \"SageMath development on github\" on [BigBlueButton](https://webconf.u-bordeaux.fr/b/vin-g33-6qy) (by Matthias K\u00f6ppe)\n\n### Tuesday 7\n\nHigh tides : 06:29 and 18:49\n\n* 09:00-10:30 Sharing code and writing Python libraries (by S\u00e9bastien)\n* 16:00-17:30 Combinatorics in SageMath (by Fr\u00e9d\u00e9ric)\n\n### Wednesday 8\n\nHigh tides : 07:03 and 19:56\n\n* 10:30-12:00 Write clean, efficient, documented and beautiful code (by Julian)\n* 14:00-15:30 Graphs in SageMath (by Vincent)\n\n### Thursday 9\n\nHigh tides : 07:36 and 19:56\n\n### Friday 10\n\nHigh tides : 08:08 and 20:28\n\n### Saturday 11\n\nHigh tides : 08:40 and 21:01\n", "release_dates": []}, {"name": "deformation", "description": "An implementation of the deformation algorithm for point counting in smooth projective families of hypersurfaces over finite fields", "language": "C", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# Deformation\nAn implementation of the deformation algorithm for point counting in smooth projective families of hypersurfaces over finite fields,\nsee e.g. [Pancratz-Tuitman 2015](https://doi.org/10.1007/s10208-014-9242-8).\n\n\nImplemented by Sebastian Pancratz.\n\nWith later contributions by Jean-Pierre Flori, Edgar Costa, Dima Pasechnik.\n\nThis fork uses GMP instead of MPIR\nDependencies: [GMP](https://gmplib.org), [MPFR](https://www.mpfr.org), [Flint (2.7+)](http://flintlib.org).\n", "release_dates": ["2021-05-03T10:44:24Z", "2021-04-26T10:28:26Z", "2021-03-23T17:33:25Z"]}, {"name": "docker-images", "description": "Dockerfiles for Sage", "language": "Makefile", "license": null, "readme": "**This repository is obsolete. Docker images are created by [GitLab CI scripts](https://github.com/sagemath/sage/blob/master/.gitlab-ci.yml) from a [Dockerfile](https://github.com/sagemath/sage/blob/master/docker/Dockerfile) that is in the main [sagemath/sage](https://github.com/sagemath/sage) repository now.**\n\n# Containers for SageMath & friends\n\nThis repository contains a collection of Dockerfiles and supporting files\nfor building various containers for SageMath and its components (GAP,\nSingular, PARI/GP, ...).\n\nThe containers are available on [dockerhub](https://hub.docker.com/u/sagemath/).\n\n## Tag format\n\nEach image is tagged with the version of SageMath installed in that image (e.g.\n8.0).\n\nTags with a version like `X.Y-N` represent revisions to the image itself i.e.\nchanges that were made to the Dockerfile it was built from.  For example while\n`sagemath:8.0` is the first image to contain SageMath 8.0, `sagemath:8.0-1` is\nthe first revised SageMath 8.0 image.\n\n## [sagemath/sagemath](sagemath/Dockerfile) (roughly 3.6 GB)\n\nThis container contains a basic installation of the latest version of\nSageMath, built from sources on the latest Ubuntu. Commands are run as\nthe Sage user. The SageMath distribution includes several programs\nlike GAP, Singular, PARI/GP, R, ... which are available in the path.\n\n### Installation\n\n    docker pull sagemath/sagemath\n\nor simply continue to the next step.\n\n### Running Sage & co with a console interface\n\nTo run Sage:\n\n    docker run -it sagemath/sagemath\n\nOther software included in this image can be run similarly:\n\n    docker run -it sagemath/sagemath gap\n\n    docker run -it sagemath/sagemath gp         # PARI/GP\n\n    docker run -it sagemath/sagemath maxima\n\n    docker run -it sagemath/sagemath R\n\n    docker run -it sagemath/sagemath singular\n\n### Running the notebook interfaces\n\nTo run the Jupyter Notebook interface (for Sage, ...):\n\n    docker run -p 8888:8888 sagemath/sagemath-jupyter\n\nAlternatively, to run the legacy Sage notebook server:\n\n    docker run -p 8080:8080 sagemath/sagemath sage -notebook\n\nYou can then connect your web browser to the printed out typically, namely\nhttp://localhost:8888 for the Jupyter notebook and http://localhost:8080 for\nthe legacy notebook. For the legacy notebook the webbrowser will ask for a\nlogin and password which are respectively `admin` and `sage`.\n\n**Note** Running the sagemath-jupyter container is equivalent to running the\n`sagemath/sagemath` base docker container with the following command:\n\n    docker run -p 127.0.0.1:8888:8888 sagemath/sagemath sage -notebook=jupyter --no-browser --ip='*' --port=8888\n\nThe `--ip` option is required by the Jupyter notebook to allow connections to\nthe notebook through the Docker network.\n\n### Rebuilding the container\n\nPrequisites: network access to download Sage (http/https)\n\n    docker build --tag=\"sagemath/sagemath\" sagemath\n\n## [sagemath/sagemath-develop](sagemath-develop/Dockerfile)\n\nThis container is similar to the previous one, except that SageMath is built\nfrom the latest unstable release version of Sage, retrieved by cloning the\ndevelop branch from github.\n\nTODO: include git-trac\n\nTo download and start it:\n\n    docker run -it sagemath/sagemath-develop\n\n### Rebuilding the container\n\n    docker build --tag=\"sagemath/sagemath-develop\" sagemath-develop\n\n## [sagemath/sagemath-jupyter](sagemath-jupyter/Dockerfile)\n\nIf you want to have a container already set up for the Jupyter enviroment,\nyou can use sagemath/sagemath-jupyter. It is based on sagemath/sagemath.\n\n    docker run -p 8888:8888 sagemath/sagemath-jupyter\n\nmakes the Jupyter notebook accessible via `localhost:8888`, while\n\n    docker run sagemath/sagemath-jupyter\n\nmakes it accessible under the container's ip address on port `8888`. You can\nsee the ip address of the container using `docker inspect`. This is useful if\nyou want to have more than one notebook server running.  Typically this will\nbe something like:\n\n    172.17.0.1\n\nwhere the fourth field may be incremented depending on the number of running\ncontainers on the host.\n\n### Rebuilding the container\n\n    docker build --tag=\"sagemath/sagemath-jupyter\" sagemath-jupyter\n\n## [sagemath/sagemath-patchbot](sagemath-patchbot/Dockerfile)\n\nThis container, built on top of sagemath-develop, is meant to run\ninstances of the [Sage patchbot](http://patchbot.sagemath.org/)\nrunning securely in a sandbox, to ensure that the untrusted code it\nfetches and run cannot harm the host machine.\n\n### Starting the patchbot:\n\n    docker run -t --name=\"patchbot\" -d sagemath/sagemath-patchbot\n    pid=$(docker inspect -f '{{.State.Pid}}' patchbot )\n    ip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' patchbot )\n    trac_ip=$(getent hosts trac.sagemath.org | awk '{ print $1 }')\n    patchbot_ip=$(getent hosts patchbot.sagemath.org | awk '{ print $1 }')\n    nsenter -t $pid -n iptables -A FORWARD -s ${ip} -d ${trac_ip} -j ACCEPT\n    nsenter -t $pid -n iptables -A FORWARD -s ${ip} -d ${patchbot_ip} -j ACCEPT\n    nsenter -t $pid -n iptables -A FORWARD -s ${ip} -j REJECT --reject-with icmp-host-prohibited\n\n    while true; docker run --tty=true --rm=true sagemath/sagemath-patchbot; done\n\n### Rebuilding the container:\n\n    docker build --tag=\"sagemath/sagemath-patchbot\" sagemath-patchbot\n\n## sagemath/sagemath-fat (planned)\n\nsagemath/sagemath with latex, the commonly used (GAP) packages, etc.\n\n## sagemath/sagemath-fat-jupyter (planned)\n\nSame as sagemath-jupyter, but based on sagemath-fat\n", "release_dates": []}, {"name": "documentation", "description": "Only hosting documentation files. Development happens here: https://github.com/sagemath/sage", "language": "HTML", "license": null, "readme": "# SageMath Documentation Publication\n\nThis repository creates a GitHub page hosting the generated documentation files of [SageMath](https://sagemath.org).\n\n**Bug reports and changes to the documentation itself have to go to http://trac.sagemath.org under the category \"doc\".**\n\n## Purpose\n\nThe purpose of this repo is to do these things:\n\n1. Apply a couple of patches on top of what SageMath provides (analytics code, disabling \"thebe\", ...).\n2. Generated additional index pages (a CDN does not provide dynamically generated index pages, hence we have to create them on our own)\n3. There are symlinks, causing all sorts of problems with CDNs, and hence some of the generated output has to be fixed.\n4. Provide sitemaps to guide search engines with their quest to index the entire WWW!\n\n## Usage\n\nPlease read the header doc of [index.py](index.py)\n\n## License\n\nIn case anyone wonders, this is all Apache 2.0 and in particular, compatible with however SageMath is licensed.\n\n", "release_dates": []}, {"name": "files", "description": "skeleton repo for served files on the mirror network", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "FlintQS", "description": "Quadratic Sieve", "language": "C++", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "Standalone CLI implementation of William Hart's Quadratic Sieve.\n\nWilliam Hart was the maintainer of FLINT (https://www.flintlib.org/)\nfor many years; a modern and actively-maintained version of this\nquadratic sieve is available in FLINT itself, as qsieve_factor().\nThere remain unfixed build issues and at least one security\nvulnerability (CVE-2023-29465) in FlintQS. As a result, FlintQS is\nconsidered obsolete.\n", "release_dates": ["2015-12-13T13:17:05Z"]}, {"name": "giac", "description": "Fork of https://salsa.debian.org/science-team/giac for the purpose of tracking the upstream Giac sources at http://www-fourier.ujf-grenoble.fr/~parisse/debian/dists/stable/main/source \u2013 branch sagemath adds integration testing with SageMath on GH Actions", "language": "C++", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "General Information\n===================\nSee giac homepage:\nhttp://www-fourier.ujf-grenoble.fr/~parisse/giac.html (English)\nhttp://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html (French)\n\nLICENSES\n========\n* The giac library and the Xcas program are released under the GPL license,\nversion 3 or above, as published by the Free Software Foundation, \nsee <http://www.gnu.org/licenses/> or the COPYING file.\nThe copyright holders are\n(c) B. Parisse, Institut Fourier, 2002-2014\n    R. De Graeve, 2002-2014\nexcept for:\na/ The first GNUification of the giac package (automake,autoconf) is\n(c) Richard Kreckel, Universitat Mainz, 10/2000 and the complete\nrewrite 10/2008 of the auto-tool files \n(c) A. Sheplyakov \nb/ The very first version of the expression parser was a modification from \nGiNaC expression parser\nGiNaC Copyright (C) 1999-2000 Johannes Gutenberg University Mainz, Germany\nc/ The mathml/svg conversion is (c) Jean-Pierre Branchard, 2003-2004, later modified by F. Han\nd/ implicit3d plot code by Paul Bourke and Cory Gene Bloyd in plot3d.cc\ne/ gl2ps code copyrighted by Christophe Geuzaine\nf/ Fl* code part of FLTK\ng/ Optimization, signalprocessing, graph theory code and manuals: \n(c) Luka Marohni\u0107\nh/ MicroPython (directory micropython-1-x) is \nCopyright (c) 2013-2019 Damien P. George, LICENSE.py\ni/ QuickJS is Copyright (c) 2017-2020 Fabrice Bellard, Charlie Gordon\nLicense is inside each source file:\nfenv.h libregexp.h libregext-opcode.h libunicode.h libunicode-table.h \nlibbf.h list.h cutils.h quickjs.h quickjs-atom.h quickjs-libc.h quickjs-opcode.h\ncutils.c graphic.c libbf.c libregexp.c libunicode.c quickjs.c quickjs-libc.c\nj/ Numworks delta* firmwares and recovery are derived from Epsilon 14, (c) Numworks, https://github.com/numworks/epsilon, CC-BY-NC-SA  license (https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode). Delta source code is available from https://www-fourier.univ-grenoble-alpes.fr/~parisse/numworks/delta14_device.tar.bz2.\nk/ Maxime Friess for numworks.js (Numworks webusb)\n\n* Documentation:\n  The on-line help is included in Xcas and giac/icas. The resposible\nfile is doc/aide_cas. It is released under the GPL version 3 or above\nand is copyrighted by R. de Graeve, B. Parisse (English/French), M. Lopez de la Fuente\nand X. Vidaux (Spanish), and A. Akritas (Greek).\n  The English documentation is currently incomplete (help welcome!). A tutorial\nis available in English, released under the FDL,\ncopyrighted by B. Parisse. A few information are also available in the\nfiles giac_us.texinfo and giac_es.texinfo, both files are released under\nthe GPL version 3 or above and are (c) B. Parisse or M. Lopez de la Fuente.\n  The French documentation is *not* released under the GPL. It is (c)\nby Renee de Graeve. It can be freely distributed for non commercial purpose.\nOther kind of redistributions require the consent of the copyright holder.\n\nInstallation\n============\nSee the file \"INSTALL\" or look at the Install section of the info manual\n(e.g. open doc/giac_us.info with emacs command C-u C-h i)\nIf you are really in a hurry: \ninstall at least GMP, untar the archive, configure, make, make install, then run xcas\n\nCredits:\n========\nSee www-fourier.ujf-grenoble.fr/~parisse/giac.html#thanks\n\n", "release_dates": []}, {"name": "git-developer-guide", "description": "Git version of the Sage developer manual", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Git Version of the Sage Developer Manual\n========================================\n\nSee the current documentation at http://sagemath.github.io/git-developer-guide/\n\n\nPrerequisites\n-------------\n\nTo build the manual you need Python and Sphinx installed. If you have\nSage, you can use a Sage shell (run `sage -sh`).\n\n\n\nUsage\n-----\n\n* The developer manual is in the `/developer` directory in the\n  repository root. Edit files there to modify the docs.\n\n* Use the `build` script to build the html documentation.\n\n* Use the `publish` script to copy the documentation to the github\n  pages (the web page hosted on github).\n\n* Sphinx uses caching to only rebuild pages as necessary. Sometimes,\n  you can get problems with stale caches. It is safe to delete the\n  `/html` directory and then rebuild all docs with `./build`.\n", "release_dates": []}, {"name": "git-trac-command", "description": "A \"git trac\" subcommand for git", "language": "Python", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "Git-Trac Integration\n====================\n\nAbout\n-----\n\nThis module implements a \"git trac\" subcommand of the git suite that\ninterfaces with trac over XMLRPC.\n\nIncluded is a one-page git cheat sheet for Sage/Git/Trac: \nhttp://github.com/sagemath/git-trac-command/raw/master/doc/git-cheat-sheet.pdf\n\nInstallation\n------------\n\nThe easiest way to just try out the code in this repo is to source the\n``enable.sh`` script, which will prepend it to your PATH. This enables\nthe git trac subcommand until you close that shell, so no permanent\nchange is made:\n\n    $ git clone https://github.com/sagemath/git-trac-command.git\n    $ source git-trac-command/enable.sh\n    Prepending the git-trac command to your search PATH\n    \n**Note for `zsh` users:** `enable.sh` requires bash. Use one of the other options described below. \n\nTo permanently install the code from this repo, clone it and run\n``setup.py``:\n\n    $ git clone https://github.com/sagemath/git-trac-command.git\n    $ cd git-trac-command\n    $ python setup.py install --user\n\nAlternatively you can just symlink ``git-trac`` to anywhere in your path:\n\n    $ git clone https://github.com/sagemath/git-trac-command.git\n    $ cd git-trac-command\n    $ ln -s `pwd`/git-trac ~/bin/\n\nOn a Mac, which may not have a default in the home directory for commands,\nit may be easier to add this to your ``.profile``: \n\n    $ git clone https://github.com/sagemath/git-trac-command.git\n    $ cd git-trac-command\n    $ pico/vim/emacs $HOME/.profile\n    <add a line like \"export PATH=$PATH:$HOME/Downloads/git-trac-command/bin\">\n\nUsage\n-----\n\n* Print the trac ticket information using ``git trac print\n  <ticket_number>``. \n\n      $ git trac print 12345\n      ==============================================================================\n      Trac #12345: Title of ticket 12345\n      ...\n      ==============================================================================\n\n  Alternatively, you can pass a remote branch name, in which case trac\n  is searched for a ticket whose (remote) \"Branch:\" field equals the\n  branch name.  If that fails, the ticket number will be deduced from\n  the branch name by scanning for a number. If you neither specify a\n  ticket number or branch name, the local git branch name is used:\n\n      $ git branch\n      /u/user/description\n      $ git trac print\n      ==============================================================================\n      Trac #nnnnn: Title\n      <BLANKLINE>\n      Description\n      Status: Status                          Component: Component                \n      ...\n      Branch: u/user/description\n      ==============================================================================\n\n\n* Checkout \n  a remote branch:\n\n      $ git trac checkout 12345\n\n  Will automatically pick a local branch name ``t/12345/description``\n  based on the remote branch name. If you want a particular local\n  branch name, you can specify it manually:\n\n      $ git trac checkout -b my_branch 12345\n\n\n* Create a new ticket on trac, and a new local branch \n  corresponding to it:\n\n      $ git trac create \"This is the summary\"\n\n  This will automatically create a local branch name\n  ``t/12345/this_is_the_summary``. You can specify it manually if you\n  prefer with:\n  \n      $ git trac create -b my_branch \"This is the summary\"\n\n\n* Pull (= fetch + merge) from the branch\n  on a ticket:\n\n      $ git trac pull 12345\n\n  You can omit the ticket number, in which case the script will try to\n  search for the ticket having the local branch name attached. If that\n  fails, an attempt is made to deduce the ticket number from the local\n  branch name.\n\n\n* Push (upload) to the branch\n  on a ticket, and set the trac \"Branch:\" field accordingly:\n\n      $ git trac push 12345\n\n  You can omit the ticket number, in which case the script will try to\n  search for the ticket having the local branch name attached. If that\n  fails, an attempt is made to deduce the ticket number from the local\n  branch name.\n\n\n* Log of the commits for a\n  ticket:\n\n      $ git trac log 12345\n    \n\n* Find the trac ticket for a \n  commit, either identified by its SHA1 or branch/tag name.\n\n      $ git log --oneline -1 ee5e39e\n      ee5e39e Allow default arguments in closures\n      $ git trac find ee5e39e\n      Commit has been merged by the release manager into your current branch.\n      commit 44efa774c5f991ea5f160646515cfe8d3f738479\n      Merge: 5fd5442 679310b\n      Author: Release Manager <release@sagemath.org>\n      Date:   Sat Dec 21 01:16:56 2013 +0000\n\n          Trac #15447: implement evaluation of PARI closures\n\n* Review tickets with minimal recompiling. This assumes that you are\n  currently on the \"develop\" branch, that is, the latest beta. Just\n  checking out an older ticket would most likely reset the Sage tree\n  to an older version, so you would have to compile older versions of\n  packages to make it work. Instead, you can create an anonymous\n  (\"detached HEAD\") merge of the ticket and the develop branch::\n\n      $ git trac try 12345\n\n  This will only touch files that are really modified by the\n  ticket. In particular, if only Python files are changed by the\n  ticket (which is true for most tickets) then you just have to run\n  `sage -b` to rebuild the Sage library. When you are finished\n  reviewing, just checkout a named branch. For example::\n\n      $ git checkout develop\n     \n  If you want to edit the ticket branch (that is, add additional\n  commits) you cannot use `git trac try`. You must use `git trac\n  checkout` to get the actual ticket branch as a starting point.\n\n\nToo Long, Didn't Read\n---------------------\n\nTo fix a bug, start with\n\n    $ git trac create \"Fix foo\"\n    \nThis will open the ticket and create a new local branch\n``t/<number>/fix_foo``. Then edit Sage, followed by \n\n    $ git add <filename>\n    $ git commit\n\nRepeat edit/commit as necessary. When you are finished, run\n\n    $ git trac push\n\nIt will take the ticket number out of the branch name, so you don't\nhave to specify it.\n\n    \nConfiguration\n-------------\n\nThe scripts assume that the trac remote repository is set up as the\nremote ``trac`` in the local repo. That is, you should have the\nfollowing for the Sage git server:\n\n    $ git remote add trac https://trac.sagemath.org/sage.git      # read-only\n    $ git remote add trac ssh://git@trac.sagemath.org/sage.git   # read-write\n    $ git remote -v\n    trac\tssh://git@trac.sagemath.org/sage.git (fetch)\n    trac\tssh://git@trac.sagemath.org/sage.git (push)\n\nTrac username and password are stored in the local repo (the\nDOT_GIT/config file):\n\n    $ git trac config --user=Myself --pass=s3kr1t\n    Trac xmlrpc URL:\n        https://trac.sagemath.org/xmlrpc (anonymous)\n        https://trac.sagemath.org/login/xmlrpc (authenticated)\n    Username: Myself\n    Password: ******\n\nInstead of a username and password you may also configure authentication via\na generated token by passing `--token=<token>` instead of `--pass`:\n\n    $ git trac config --user=<username> --token=<token>\n\n**This is required if you authenticate to Trac with your GitHub account, as\nyou do not have a Trac password.**.  Logged in users can find their token\nunder https://trac.sagemath.org/prefs/token .  Technically, token\nauthentication does not require configuring a username.  However, explicitly\nproviding your username to the configuration is still required for many\nfeatures to work correctly.  If you log into Trac via GitHub, make sure this\nis your full username, including the `gh-` prefix.\n\nIf both a token and a username/password are configured, the token-based\nauthentication takes precedence.\n\nIf you do not want to store your trac username/password/token on disk you\ncan temporarily override it with the environment variables\n``TRAC_USERNAME``,  ``TRAC_PASSWORD``, and ``TRAC_TOKEN`` respectively.\nThese take precedence over any other configuration.\n\n\nSage-Trac Specifics\n-------------------\n\nSome of the functionality depends on the special trac plugins (see\nhttps://github.com/sagemath/sage_trac), namely:\n\n* Searching for a trac ticket by branch name requires the\n  ``trac_plugin_search_branch.py`` installed in trac and a custom trac\n  field named \"Branch:\":\n\n      $ git trac search --branch=u/vbraun/toric_bundle\n      15328\n\n* SSH public key management requires the ``sshkeys.py`` trac \n  plugin:\n\n      $ git trac ssh-keys\n      $ git trac ssh-keys --add=~/.ssh/id_rsa.pub\n      This is not implemented yet\n\n\nRelease Management\n------------------\n\nThe Sage release management scripts are in the `git-trac.releasemgr`\nsubdirectory. They are probably only useful to the Sage release\nmanager.\n\n\nTesting and Python Compatibility\n--------------------------------\n\n* The git-trac command supports Python 2.7, 3.3, 3.4 and 3.7.\n* Most recent [Travis CI](https://travis-ci.org/sagemath/git-trac-command) test:\n  [![Build Status](https://travis-ci.org/sagemath/git-trac-command.svg?branch=master)](https://travis-ci.org/sagemath/git-trac-command)\n", "release_dates": []}, {"name": "grant-europe", "description": "The H2020 Grant proposal. ", "language": "TeX", "license": null, "readme": null, "release_dates": []}, {"name": "helm-sage", "description": "A helm extension for sage-shell-mode", "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "[![melpa badge][melpa-badge]][melpa-link]\n[![melpa stable badge][melpa-stable-badge]][melpa-stable-link]\n[![Build Status](https://travis-ci.org/stakemori/helm-sage.svg)](https://travis-ci.org/stakemori/helm-sage)\n\n# Overview\n`helm-sage` provides a [helm](https://github.com/emacs-helm/helm)\n source for\n[sage-shell-mode](https://github.com/stakemori/sage-shell-mode).\n\n![helm-sage](images/helm-sage.gif)\n\n# Installation\nYou can install `helm-sage` from\n[MELPA](https://github.com/milkypostman/melpa.git) by package.el\n(`M-x package-install helm-sage`).\n\n# Commands\n`helm-sage` provides 4 commands, `helm-sage-complete`,\n`helm-sage-describe-object-at-point`,\n`helm-sage-command-history` and `helm-sage-output-history`.\n\n| Command                                  | Description                                                            |\n|------------------------------------------|------------------------------------------------------------------------|\n| helm-sage-complete                          | Show completions at point.                                             |\n| helm-sage-describe-object-at-point | Almost same as `helm-sage-shell`. But the default action is different. |\n| helm-sage-command-history                | Show command history.                                                  |\n| helm-sage-output-history | Show output history. |\n\nIn `helm-sage-complete`, press `TAB` to show the list of actions.\nThere are 3 actions, \"Insert\", \"View Docstring\" and \"View Source File\".\n\n\n# Sample configuration\nBind these commands to some keys, e.g.:\n```lisp\n(eval-after-load \"sage-shell-mode\"\n  '(sage-shell:define-keys sage-shell-mode-map\n     \"C-c C-i\"  'helm-sage-complete\n     \"C-c C-h\"  'helm-sage-describe-object-at-point\n     \"M-r\"      'helm-sage-command-history\n     \"C-c o\"    'helm-sage-output-history))\n```\n\n[melpa-link]: http://melpa.org/#/helm-sage\n[melpa-stable-link]: http://stable.melpa.org/#/helm-sage\n[melpa-badge]: http://melpa.org/packages/helm-sage-badge.svg\n[melpa-stable-badge]: http://stable.melpa.org/packages/helm-sage-badge.svg\n", "release_dates": []}, {"name": "homebrew-science", "description": ":snowflake: Scientific formulae for Homebrew and Linuxbrew (legacy)", "language": "Ruby", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Brewsci/science (legacy)\n\nThis tap provided scientific formulae for both the Homebrew and Linuxbrew package managers.\n\nThis tap is not maintained. We are not accepting new pull requests, except to migrate a formula to [Homebrew/core](https://github.com/Homebrew/homebrew-core), [Brewsci/bio](https://github.com/brewsci/homebrew-bio), or a different tap within the [Brewsci organization](https://github.com/brewsci). Please open an issue if you are interested in creating and maintaining a new tap within the Brewsci organization.\n\n# Hosting Your Own Tap\n\nAnyone can host their own tap. See [Interesting Taps & Forks](https://docs.brew.sh/Interesting-Taps-and-Forks.html) and [How to Create and Maintain a Tap](https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap.html)\n\n![Brewsci logo](https://raw.githubusercontent.com/brewsci/homebrew-science/master/.github/brewsci-256x256.png)\n[![For science.](https://i.imgur.com/Bswp1.png)](https://xkcd.com/585)\n\n## How do I install these formulae?\n\n```sh\nbrew tap brewsci/science\nbrew install FORMULA\n```\n\nor\n\n```sh\nbrew install brewsci/science/FORMULA\n```\n\n## Troubleshooting\n\n**IMPORTANT** First read the [Troubleshooting Checklist](https://docs.brew.sh/Troubleshooting.html).\n\nUse `brew gist-logs FORMULA` to create a [Gist](https://gist.github.com/) and post the link in your issue.\n\nSearch [open](https://github.com/brewsci/homebrew-science/issues?state=open) and [closed](https://github.com/brewsci/homebrew-science/issues?state=closed) issues. See also Homebrew's [Common Issues](https://docs.brew.sh/Common-Issues.html) and [FAQ](https://docs.brew.sh/FAQ.html).\n\n## Documentation\n\n`brew help`, `man brew`, or check [Homebrew's documentation](https://github.com/Homebrew/brew/blob/master/docs/README.md).\n\n## Contributing\n\nPlease see the [contributing guide](https://github.com/brewsci/homebrew-science/blob/master/.github/CONTRIBUTING.md).\n", "release_dates": []}, {"name": "MathJax", "description": "Beautiful math in all browsers", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# MathJax\n\n## Beautiful math in all browsers\n\nMathJax is an open-source JavaScript display engine for LaTeX, MathML, and\nAsciiMath notation that works in all modern browsers.  It was designed with\nthe goal of consolidating the recent advances in web technologies into a\nsingle, definitive, math-on-the-web platform supporting the major browsers\nand operating systems.  It requires no setup on the part of the user (no\nplugins to download or software to install), so the page author can write\nweb documents that include mathematics and be confident that users will be\nable to view it naturally and easily.  Simply include MathJax and some\nmathematics in a web page, and MathJax does the rest.\n\nSome of the main features of MathJax include:\n\n- High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages\n\n- Supported in most browsers with no plug-ins, extra fonts, or special\n  setup for the reader\n\n- Easy for authors, flexible for publishers, extensible for developers\n\n- Supports math accessibility, cut-and-paste interoperability, and other\n  advanced functionality\n\n- Powerful API for integration with other web applications\n\nSee <http://www.mathjax.org/> for additional details.\n\n\n## Installation and Usage\n\nThe MathJax installation and usage documentation is available in the\n`docs/html` directory of the MathJax distribution (see\n`docs/html/index.html` for the starting point).  The documents are also\navailable on the MathJax web site on line at <http://www.mathjax.org/resources/docs/>.\n\n\n## Community\n\nThe main MathJax website is <http://www.mathjax.org>, and it includes\nannouncements and other important information.  MathJax is maintained and\ndistributed on GitHub at <http://github.com/mathjax/MathJax>.  A user forum\nfor asking questions and getting assistance is hosted at Google, and the\nbug tracker is hosted at GitHub:\n\nBug tracker:         <https://github.com/mathjax/MathJax/issues>  \nMathJax-Users Group: <http://groups.google.com/group/mathjax-users>\n\nBefore reporting a bug, please check that it has not already been reported.\nAlso, please use the bug tracker for reporting bugs rather than the help forum.\n", "release_dates": []}, {"name": "memory_allocator", "description": null, "language": "Cython", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# MemoryAllocator\nAn extension class to allocate memory easily with cython.\n\nThis extension class started as part of the [Sage](https://sagemath.org) software.\n\nIt provides a single extension class `MemoryAllocator` with `cdef` methods\n\n- `malloc`,\n- `calloc`,\n- `alloarray`,\n- `realloc`,\n- `reallocarray`,\n- `aligned_malloc`,\n- `aligned_calloc`,\n- `aligned_allocarray`.\n\nMemory is freed when the instance of `MemoryAllocator` is deallocated.\nOn failure to allocate the memory, a proper error is raised.\n\n# Changelog\n\n## 0.1.3\n\n- Python 3.11 compatible.\n\n## 0.1.2\n\n- Provide wheels build by github actions.\n\n## 0.1.1\n\n- Fixed doctests on 32bit systems.\n", "release_dates": ["2022-06-02T14:51:29Z", "2021-10-15T06:00:55Z", "2021-09-30T13:48:17Z", "2021-06-02T19:38:18Z", "2021-05-27T13:13:28Z", "2021-05-27T12:13:33Z"]}, {"name": "modular_resolution", "description": "modular_resolution, a C library part of p_group_cohomology", "language": "Shell", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "This is modular_resolution, version 1.1\n\nmodular_resolution is a sub-package of p_group_cohomology and is a set of programs\nand a C-library to compute presentations and minimal free resolutions of modular\ngroup algebras of prime power groups.\n\nThe original version of the code was written by David J. Green, using meataxe-2.2.3.\nSimon A. King has refactored the code to use meataxe-2.4.24 instead, and use\nautotools.\n\nSee INSTALL for installing modular_resolution-1.1.\n\nThe package comprises a shared library \"libmodres\", as well as the executables\nmakeActionMatrices, makeNontips, perm2Gap, groupInfo, and makeInclusionMatrix.\n\nSee COPYING for licence information.\n", "release_dates": ["2022-03-09T11:39:53Z"]}, {"name": "more-sagemath-tutorials", "description": "More SageMath Tutorials: A place to share and evolve tutorials for Sage, with the aim to contribute them to Sage", "language": "Jupyter Notebook", "license": null, "readme": null, "release_dates": []}, {"name": "ob-sagemath", "description": "org-babel integration with SageMath", "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "office-hours", "description": "Virtual office hours on youtube -- notes", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "pari-jupyter", "description": "Jupyter kernel for PARI/GP", "language": "JavaScript", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "pari-utils", "description": "Utility tools for PARI/GP", "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "planet", "description": "planet.sagemath.org: source in master, files in gh-pages", "language": "Python", "license": null, "readme": "# Planet SageMath Blog\n\nhttp://planet.sagemath.org\n\n", "release_dates": []}, {"name": "pplpy", "description": "Python wrapper to the PPL library", "language": "Cython", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "publications", "description": "Generate the publication pages listing documents citing Sage", "language": "TeX", "license": null, "readme": "# Sage Publications [![Build Status](https://travis-ci.org/sagemath/publications.svg?branch=master)](https://travis-ci.org/sagemath/publications)\n\n\nLicense: GPLv2+\n\nAuthors:\n* Minh Van Nguyen <mvngu.name@gmail.com>\n* Harald Schilly <harald.schilly@gmail.com>\n\nDescription:\n\nThis script requires [Pybtex](https://launchpad.net/pybtex)\nfor parsing a BibTeX database.\n\nInstall it this way:\n\n    $ pip install -U --user pybtex\n\nThe general database of publications that cite Sage is contained in the\ntext file named by the variable `publications_general`.\nThe file referred to by this variable is a BibTeX database.\nEach publication entry is described in BibTeX format.\nIf you want to add or delete items from the publications database,\nyou should edit the file named by the variable `publications_general`.\nBesides that,\nfiles for `*-combinat` and `*-mupad` citations do the analogous.\n\nMake sure that your edit follows the formatting rules of BibTeX.\nOnce you are done editing, call `make` to rebuild the files.\n\nThe resulting `*.html` files are macro-templates for jinja. \n\nTo integrate the new page on the actual website,\nthe [website project](http://www.github.com/sagemath/website)\ncalls the `makefile` here and\nuses the generated templates and copies over the `*.bib` files.\n\n", "release_dates": []}, {"name": "PyGithub", "description": "Fork of PyGithub, adding support for writing Migration Archives for https://github.com/sagemath/trac-to-github", "language": "Python", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "# PyGitHub\n\n[![PyPI](https://img.shields.io/pypi/v/PyGithub.svg)](https://pypi.python.org/pypi/PyGithub)\n![CI](https://github.com/PyGithub/PyGithub/workflows/CI/badge.svg)\n[![readthedocs](https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat)](https://pygithub.readthedocs.io/en/latest/?badge=latest)\n[![License](https://img.shields.io/badge/license-LGPL-blue.svg)](https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License)\n[![Slack](https://img.shields.io/badge/Slack%20channel-%20%20-blue.svg)](https://join.slack.com/t/pygithub-project/shared_invite/zt-duj89xtx-uKFZtgAg209o6Vweqm8xeQ)\n[![Open Source Helpers](https://www.codetriage.com/pygithub/pygithub/badges/users.svg)](https://www.codetriage.com/pygithub/pygithub)\n[![codecov](https://codecov.io/gh/PyGithub/PyGithub/branch/master/graph/badge.svg)](https://codecov.io/gh/PyGithub/PyGithub)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nPyGitHub is a Python library to access the [GitHub REST API].\nThis library enables you to manage [GitHub] resources such as repositories, user profiles, and organizations in your Python applications.\n\n[GitHub REST API]: https://docs.github.com/en/rest\n[GitHub]: https://github.com\n\n## Install\n\n```bash\n$ pip install PyGithub\n```\n\n## Simple Demo\n\n```python\nfrom github import Github\n\n# First create a Github instance:\n\n# using an access token\ng = Github(\"access_token\")\n\n# Github Enterprise with custom hostname\ng = Github(base_url=\"https://{hostname}/api/v3\", login_or_token=\"access_token\")\n\n# Then play with your Github objects:\nfor repo in g.get_user().get_repos():\n    print(repo.name)\n```\n\n## Documentation\n\nMore information can be found on the [PyGitHub documentation site.](https://pygithub.readthedocs.io/en/latest/introduction.html)\n\n## Development\n\n### Contributing\n\nLong-term discussion and bug reports are maintained via GitHub Issues.\nCode review is done via GitHub Pull Requests.\n\nFor more information read [CONTRIBUTING.md].\n\n[CONTRIBUTING.md]: /CONTRIBUTING.md\n\n### Maintainership\n\nWe're actively seeking maintainers that will triage issues and pull requests and cut releases.\nIf you work on a project that leverages PyGitHub and have a vested interest in keeping the code alive and well, send an email to someone in the MAINTAINERS file.\n", "release_dates": []}, {"name": "p_group_cohomology", "description": "Sage package for computing modular cohomology rings of finite groups ", "language": "Cython", "license": null, "readme": "# p_group_cohomology\nSage Python/Cython package for computing modular cohomology rings of finite groups \nSee src/README for full information.\n\nTo create a Sage-ready tarball p_group_cohomology-<VERSION>.tar.xz,\nto be put in Sage's upstream/ (and in GitHub release), run the script \n\n   ./dist_helpers/create_dist.sh\n\nat \"sage -sh\" prompt. Currently the package VERSION is hardcoded\nin this script.\n", "release_dates": ["2022-03-09T22:51:34Z", "2020-10-18T07:47:28Z"]}, {"name": "sage", "description": "Main repository of SageMath. Now open for Issues and Pull Requests.", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<div>\n<a href=\"https://sagemath.org\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"src/doc/common/static/logo_sagemath_white.svg\">\n    <img src=\"src/doc/common/static/logo_sagemath_black.svg\" height=\"60\" align=\"left\">\n  </picture>\n</a>\n   <em>\"Creating a Viable Open Source Alternative to\n   Magma, Maple, Mathematica, and MATLAB\"</em>\n</div>\n\n#\n\nSage is open source mathematical software released under the GNU General Public\nLicence GPLv2+, and includes packages that have [compatible software licenses](./COPYING.txt).\n[People all around the globe](https://www.sagemath.org/development-map.html) have contributed to the\ndevelopment of Sage. [Full documentation](https://doc.sagemath.org/html/en/index.html) is available online.\n\nTable of Contents\n-----------------\n\n* [Getting Started](#getting-started)\n* [Supported Platforms](#supported-platforms)\n* [\\[Windows\\] Preparing the Platform](#windows-preparing-the-platform)\n* [\\[macOS\\] Preparing the Platform](#macos-preparing-the-platform)\n* [Instructions to Build from Source](#instructions-to-build-from-source)\n* [SageMath Docker Images](#sagemath-docker-images)\n* [Troubleshooting](#troubleshooting)\n* [Contributing to Sage](#contributing-to-sage)\n* [Directory Layout](#directory-layout)\n* [Build System](#build-system)\n* [Relocation](#relocation)\n* [Redistribution](#redistribution)\n* [Build System](#build-system)\n* [Changes to Included Software](#changes-to-included-software)\n\nGetting Started\n---------------\n\nThose who are impatient may use prebuilt Sage available online from any of\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sagemath/sage-binder-env/master\n) &nbsp; [![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/sagemath/sage/tree/master\n) &nbsp; [![Open in GitHub Codespaces](https://img.shields.io/badge/Open_in_GitHub_Codespaces-black?logo=github)](https://codespaces.new/sagemath/sage/tree/master)\n\nwithout local installation. Otherwise read on.\n\nThe [Sage Installation Guide](https://doc.sagemath.org/html/en/installation/index.html)\nprovides a decision tree that guides you to the type of installation\nthat will work best for you. This includes building from source,\nobtaining Sage from a package manager, using a container image, or using\nSage in the cloud.\n\n**This README contains self-contained instructions for building Sage from source.**\nIt assumes that you have already cloned the git repository or downloaded the\n[sources](https://www.sagemath.org/download-source.html) in the form\nof a tarball.\n\nIf you have questions or encounter problems, please do not hesitate\nto email the [sage-support mailing list](https://groups.google.com/group/sage-support)\nor ask on the [Ask Sage questions and answers site](https://ask.sagemath.org).\n\nSupported Platforms\n-------------------\n\nSage attempts to support all major Linux distributions, recent versions of\nmacOS, and Windows (using Windows Subsystem for Linux or\nvirtualization).\n\nDetailed information on supported platforms for a specific version of Sage\ncan be found in the section _Availability and installation help_ of the\n[release tour](https://wiki.sagemath.org/ReleaseTours) for this version.\n\nWe highly appreciate contributions to Sage that fix portability bugs\nand help port Sage to new platforms; let us know at the [sage-devel\nmailing list](https://groups.google.com/group/sage-devel).\n\n[Windows] Preparing the Platform\n--------------------------------\n\nThe preferred way to run Sage on Windows is using the [Windows Subsystem for\nLinux](https://docs.microsoft.com/en-us/windows/wsl/faq), a.k.a. WSL, which allows\nyou to install a standard Linux distribution such as Ubuntu within\nyour Windows. Make sure you allocate WSL sufficient RAM; 5GB is known to work, while\n2GB might be not enough for building Sage from source.\nThen all instructions for installation in Linux apply.\n\nAs an alternative, you can also run Linux on Windows using Docker ([see\nbelow](#sagemath-docker-images)) or other virtualization solutions.\n\n[macOS] Preparing the Platform\n------------------------------\n\n- If your Mac uses the Apple Silicon (M1, M2, M3; arm64) architecture and\n  you set up your Mac by transferring files from an older Mac, make sure\n  that the directory ``/usr/local`` does not contain an old copy of Homebrew\n  (or other software) for the x86_64 architecture that you may have copied\n  over.  Note that Homebrew for the M1 is installed in ``/opt/homebrew``, not\n  ``/usr/local``.\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, we strongly recommend to use Homebrew (\"the missing package\n  manager for macOS\") from https://brew.sh/, which provides the ``gfortran``\n  compiler and many libraries.\n\n- Otherwise, if you do not wish to install Homebrew, you will need to install\n  the latest version of Xcode Command Line Tools.  Open a terminal window and\n  run `xcode-select --install`; then click \"Install\" in the pop-up window.  If\n  the Xcode Command Line Tools are already installed, you may want to check if\n  they need to be updated by typing `softwareupdate -l`.\n\nInstructions to Build from Source\n---------------------------------\n\nLike many other software packages, Sage is built from source using\n`./configure`, followed by `make`.  However, we strongly recommend to\nread the following step-by-step instructions for building Sage.\n\nThe instructions cover all of Linux, macOS, and WSL.\n\nMore details, providing a background for these instructions, can be found\nin the [section \"Install from Source Code\"](https://doc.sagemath.org/html/en/installation/source.html).\nin the Installation Guide.\n\n\n1.  Decide on the source/build directory (`SAGE_ROOT`):\n\n    - On personal computers, any subdirectory of your :envvar:`HOME`\n      directory should do.\n\n    - For example, you could use `SAGE_ROOT=~/sage/sage-x.y`, which we\n      will use as the running example below, where `x.y` is the\n      current Sage version.\n\n    - You need at least 10 GB of free disk space.\n\n    - The full path to the source directory must contain **no spaces**.\n\n    - After starting the build, you cannot move the source/build\n      directory without breaking things.\n\n    - You may want to avoid slow filesystems such as\n      [network file systems (NFS)](https://en.wikipedia.org/wiki/Network_File_System)\n      and the like.\n\n    - [macOS] macOS allows changing directories without using exact capitalization.\n      Beware of this convenience when compiling for macOS. Ignoring exact\n      capitalization when changing into :envvar:`SAGE_ROOT` can lead to build\n      errors for dependencies requiring exact capitalization in path names.\n\n2.  Download/unpack or clone the sources.\n\n    - Go to https://www.sagemath.org/download-source.html, select a mirror,\n      and download the file :file:`sage-x.y.tar.gz`.\n\n      This compressed archive file contains the source code for Sage and\n      the source for all programs on which Sage depends.\n\n    - After downloading the source tarball `sage-x.y.tar.gz` into\n      `~/sage/`:\n\n            $ cd ~/sage/\n            $ tar xf sage-x.y.tar.gz  # adapt x.y; takes a while\n\n      This creates the subdirectory `sage-x.y`. Now change into it:\n\n            $ cd sage-x.y/  # adapt x.y\n\n    - [Git] Alternatively, and required for Sage development, clone the Sage\n      git repository:\n\n            $ ORIG=https://github.com/sagemath/sage.git\n            $ git clone -c core.symlinks=true --branch develop --tags $ORIG\n\n      This will create the directory `sage`. (See the section\n      [Setting up git](https://doc.sagemath.org/html/en/developer/git_setup.html)\n      and the following sections in the Sage Developer's Guide\n      for more information.)\n\n      Change into it and pick the branch you need, typically\n      the latest development branch:\n\n            $ cd sage\n            $ git checkout develop\n\n    - [Windows] The Sage source tree contains symbolic links, and the\n      build will not work if Windows line endings rather than UNIX\n      line endings are used.\n\n      Therefore it is crucial that you unpack the source tree from the\n      WSL `bash` using the WSL `tar` utility and not using other\n      Windows tools (including mingw). Likewise, when using `git`, it\n      is recommended (but not necessary) to use the WSL version of\n      `git`.\n\n3.  [Linux, WSL] Install the required minimal build prerequisites.\n\n    - Compilers: `gcc`, `gfortran`, `g++` (GCC versions from 8.4.0 to 13.x\n      and recent versions of Clang (LLVM) are supported).\n      See [build/pkgs/gcc/SPKG.rst](build/pkgs/gcc/SPKG.rst) and\n      [build/pkgs/gfortran/SPKG.rst](build/pkgs/gfortran/SPKG.rst)\n      for a discussion of suitable compilers.\n\n    - Build tools: GNU `make`, GNU `m4`, `perl` (including\n      ``ExtUtils::MakeMaker``), `ranlib`, `git`, `tar`, `bc`.\n      See [build/pkgs/_prereq/SPKG.rst](build/pkgs/_prereq/SPKG.rst) for\n      more details.\n\n    - Python 3.4 or later, or Python 2.7, a full installation including\n      `urllib`; but ideally version 3.9.x, 3.10.x, or 3.11.x, which\n      will avoid having to build Sage's own copy of Python 3.\n      See [build/pkgs/python3/SPKG.rst](build/pkgs/python3/SPKG.rst)\n      for more details.\n\n    We have collected lists of system packages that provide these build\n    prerequisites. See, in the folder\n    [build/pkgs/_prereq/distros](build/pkgs/_prereq/distros),\n    the files\n    [arch.txt](build/pkgs/_prereq/distros/arch.txt),\n    [debian.txt](build/pkgs/_prereq/distros/debian.txt)\n    (also for Ubuntu, Linux Mint, etc.),\n    [fedora.txt](build/pkgs/_prereq/distros/fedora.txt)\n    (also for Red Hat, CentOS),\n    [opensuse.txt](build/pkgs/_prereq/distros/opensuse.txt),\n    [slackware.txt](build/pkgs/_prereq/distros/slackware.txt), and\n    [void.txt](build/pkgs/_prereq/distros/void.txt), or visit\n    https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq\n\n4.  [Git] If you plan to do Sage development or otherwise work with ticket branches\n    and not only releases, install the bootstrapping prerequisites. See the\n    files in the folder\n    [build/pkgs/_bootstrap/distros](build/pkgs/_bootstrap/distros), or\n    visit\n    https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap\n\n5.  [Git] If you cloned the Sage repository using `git`, bootstrap the\n    source tree using the following command:\n\n        $ make configure\n\n    (If the bootstrapping prerequisites are not installed, this command will\n    download a package providing pre-built bootstrap output instead.)\n\n6.  Sanitize the build environment. Use the command\n\n        $ env\n\n    to inspect the current environment variables, in particular `PATH`,\n    `PKG_CONFIG_PATH`, `LD_LIBRARY_PATH`, `CFLAGS`, `CPPFLAGS`, `CXXFLAGS`,\n    and `LDFLAGS` (if set).\n\n    Remove items from these (colon-separated) environment variables\n    that Sage should not use for its own build. In particular, remove\n    items if they refer to a previous Sage installation.\n\n    - [WSL] In particular, WSL imports many items from the Windows\n      `PATH` variable into the Linux environment, which can lead to\n      confusing build errors. These items typically start with `/mnt/c`.\n      It is best to remove all of them from the environment variables.\n      For example, you can set `PATH` using the command:\n\n            $ export PATH=/usr/sbin/:/sbin/:/bin/:/usr/lib/wsl/lib/\n\n    - [macOS with homebrew] Set required environment variables for the build:\n\n            $ source ./.homebrew-build-env\n\n      This is to make some of Homebrew's packages (so-called keg-only\n      packages) available for the build. Run it once to apply the\n      suggestions for the current terminal session. You may need to\n      repeat this command before you rebuild Sage from a new terminal\n      session, or after installing additional homebrew packages.  (You\n      can also add it to your shell profile so that it gets run\n      automatically in all future sessions.)\n\n7.  Optionally, decide on the installation prefix (`SAGE_LOCAL`):\n\n    - Traditionally, and by default, Sage is installed into the\n      subdirectory hierarchy rooted at `SAGE_ROOT/local/`.\n\n    - This can be changed using `./configure --prefix=SAGE_LOCAL`,\n      where `SAGE_LOCAL` is the desired installation prefix, which\n      must be writable by the user.\n\n      If you use this option in combination with `--disable-editable`,\n      you can delete the entire Sage source tree after completing\n      the build process.  What is installed in `SAGE_LOCAL` will be\n      a self-contained installation of Sage.\n\n    - Note that in Sage's build process, `make` builds **and**\n      installs (`make install` is a no-op).  Therefore the\n      installation hierarchy must be writable by the user.\n\n    - See the installation manual for options if you want to\n      install into shared locations such as `/usr/local/`.\n      Do not attempt to build Sage as `root`.\n\n8.  Optional: It is recommended that you have both LaTeX and\n    the ImageMagick tools (e.g. the \"convert\" command) installed\n    since some plotting functionality benefits from them.\n\n9.  Optionally, review the configuration options, which includes\n    many optional packages:\n\n        $ ./configure --help\n\n    Notable options for Sage developers are the following:\n\n    - Use the option `--config-cache` to have `configure`\n      keep a disk cache of configuration values. This gives a nice speedup\n      when trying out ticket branches that make package upgrades, which\n      involves automatic re-runs of the configuration step.\n\n    - Use the option `--enable-ccache` to have Sage install and use the\n      optional package `ccache`, which is preconfigured to keep a\n      disk cache of object files created from source files. This can give\n      a great speedup when switching between different branches, at the\n      expense of disk space use.\n\n10. Optional, but highly recommended: Set some environment variables to\n    customize the build.\n\n    For example, the `MAKE` environment variable controls whether to\n    run several jobs in parallel.  On a machine with 4 processors, say,\n    typing `export MAKE=\"make -j4\"` will configure the build script to\n    perform a parallel compilation of Sage using 4 jobs. On some\n    powerful machines, you might even consider `-j16`, as building with\n    more jobs than CPU cores can speed things up further.\n\n    To reduce the terminal output during the build, type `export V=0`.\n    (`V` stands for \"verbosity\".)\n\n    Some environment variables deserve a special mention: `CC`,\n    `CXX` and `FC`. These variables defining your compilers\n    can be set at configuration time and their values will be recorded for\n    further use at build time and runtime.\n\n    For an in-depth discussion of more environment variables for\n    building Sage, see [the installation\n    guide](https://doc.sagemath.org/html/en/installation/source.html#environment-variables).\n\n11. Type `./configure`, followed by any options that you wish to use.\n    For example, to build Sage with `gf2x` package supplied by Sage,\n    use `./configure --with-system-gf2x=no`.\n\n    At the end of a successful `./configure` run, you may see messages\n    recommending to install extra system packages using your package\n    manager.\n\n    For a large [list of Sage\n    packages](https://github.com/sagemath/sage/issues/27330), Sage is able to\n    detect whether an installed system package is suitable for use with\n    Sage; in that case, Sage will not build another copy from source.\n\n    Sometimes, the messages will recommend to install packages that are\n    already installed on your system. See the earlier configure\n    messages or the file `config.log` for explanation.  Also, the\n    messages may recommend to install packages that are actually not\n    available; only the most recent releases of your distribution will\n    have all of these recommended packages.\n\n12. Optional: If you choose to install the additional system packages,\n    a re-run of `./configure` will test whether the versions installed\n    are usable for Sage; if they are, this will reduce the compilation\n    time and disk space needed by Sage. The usage of packages may be\n    adjusted by `./configure` parameters (check again the output of\n    `./configure --help`).\n\n13. Type `make`.  That's it! Everything is automatic and\n    non-interactive.\n\n    If you followed the above instructions, in particular regarding the\n    installation of system packages recommended by the output of\n    `./configure` (step 10), and regarding the parallel build (step 9),\n    building Sage takes less than one hour on a modern computer.\n    (Otherwise, it can take much longer.)\n\n    The build should work fine on all fully supported platforms. If it\n    does not, we want to know!\n\n14. Type `./sage` to try it out. In Sage, try for example `2 + 2`,\n    `plot(x^2)`, `plot3d(lambda x, y: x*y, (-1, 1), (-1, 1))`\n    to test a simple computation and plotting in 2D and 3D.\n    Type <kbd>Ctrl</kbd>+<kbd>D</kbd> or `quit` to quit Sage.\n\n15. Optional: Type `make ptestlong` to test all examples in the documentation\n    (over 200,000 lines of input!) -- this takes from 10 minutes to\n    several hours. Don't get too disturbed if there are 2 to 3 failures,\n    but always feel free to email the section of `logs/ptestlong.log` that\n    contains errors to the [sage-support mailing list](https://groups.google.com/group/sage-support).\n    If there are numerous failures, there was a serious problem with your build.\n\n16. The HTML version of the [documentation](https://doc.sagemath.org/html/en/index.html)\n    is built during the compilation process of Sage and resides in the directory\n    `local/share/doc/sage/html/`. You may want to bookmark it in your browser.\n\n17. Optional: If you want to build the PDF version of the documentation,\n    run `make doc-pdf` (this requires LaTeX to be installed).\n\n18. Optional: Install optional packages of interest to you:\n    get a list by typing  `./sage --optional` or by visiting the\n    [packages documentation page](https://doc.sagemath.org/html/en/reference/spkg/).\n\n19. Optional: Create a symlink to the installed `sage` script in a\n    directory in your `PATH`, for example ``/usr/local``. This will\n    allow you to start Sage by typing `sage` from anywhere rather than\n    having to either type the full path or navigate to the Sage\n    directory and type `./sage`. This can be done by running:\n\n        $ sudo ln -s $(./sage -sh -c 'ls $SAGE_ROOT/venv/bin/sage') /usr/local/bin\n\n20. Optional: Set up SageMath as a Jupyter kernel in an existing Jupyter notebook\n    or JupyterLab installation, as described in [section\n    \"Launching SageMath\"](https://doc.sagemath.org/html/en/installation/launching.html)\n    in the installation manual.\n\nAlternative Installation using PyPI\n---------------\n\nFor installing Sage in a Python environment from PyPI, Sage provides the\n`pip`-installable package [sagemath-standard](https://pypi.org/project/sagemath-standard/).\n\nUnless you need to install Sage into a specific existing environment, we recommend\nto create and activate a fresh virtual environment, for example `~/sage-venv/`:\n\n            $ python3 -m venv ~/sage-venv\n            $ source ~/sage-venv/bin/activate\n\nAs the first installation step, install [sage_conf](https://pypi.org/project/sage-conf/),\nwhich builds various prerequisite packages in a subdirectory of `~/.sage/`:\n\n            (sage-venv) $ python3 -m pip install -v sage_conf\n\nAfter a successful installation, a wheelhouse provides various Python packages.\nYou can list the wheels using the command:\n\n            (sage-venv) $ ls $(sage-config SAGE_SPKG_WHEELS)\n\nIf this gives an error saying that `sage-config` is not found, check any messages\nthat the `pip install` command may have printed. You may need to adjust your `PATH`,\nfor example by:\n\n            $ export PATH=\"$(python3 -c 'import sysconfig; print(sysconfig.get_path(\"scripts\", \"posix_user\"))'):$PATH\"\n\nNow install the packages from the wheelhouse and the [sage_setup](https://pypi.org/project/sage-conf/)\npackage, and finally install the Sage library:\n\n            (sage-venv) $ python3 -m pip install $(sage-config SAGE_SPKG_WHEELS)/*.whl sage_setup\n            (sage-venv) $ python3 -m pip install --no-build-isolation -v sagemath-standard\n\nThe above instructions install the latest stable release of Sage.\nTo install the latest development version instead, add the switch `--pre` to all invocations of\n`python3 -m pip install`.\n\n**NOTE:** PyPI has various other `pip`-installable packages with the word \"sage\" in their names.\nSome of them are maintained by the SageMath project, some are provided by SageMath users for\nvarious purposes, and others are entirely unrelated to SageMath. Do not use the packages\n`sage` and `sagemath`. For a curated list of packages, see the chapter\n[Packages and Features](https://doc.sagemath.org/html/en/reference/spkg/index.html) of the\nSage Reference Manual.\n\nSageMath Docker images\n----------------------\n\n[![Docker Status](http://dockeri.co/image/sagemath/sagemath)](https://hub.docker.com/r/sagemath/sagemath)\n\nSageMath is available on Docker Hub and can be downloaded by:\n``` bash\ndocker pull sagemath/sagemath\n```\n\nCurrently, only stable versions are kept up to date.\n\nTroubleshooting\n---------------\n\nIf you have problems building Sage, check the Sage Installation Guide,\nas well as the version-specific Sage Installation FAQ in the [Sage Release\nTour](https://wiki.sagemath.org/ReleaseTours) corresponding to the\nversion that you are installing.\n\nPlease do not hesitate to ask for help in the [SageMath forum\n](https://ask.sagemath.org/questions/) or the [sage-support mailing\nlist](https://groups.google.com/forum/#!forum/sage-support).  The\n[Troubleshooting section in the Sage Installation Guide\n](https://doc.sagemath.org/html/en/installation/troubles.html)\nprovides instructions on what information to provide so that we can provide\nhelp more effectively.\n\nContributing to Sage\n--------------------\n\nIf you'd like to contribute to Sage, we strongly recommend that you read the\n[Developer's Guide](https://doc.sagemath.org/html/en/developer/index.html).\n\nSage has significant components written in the following languages:\nC/C++, Python, Cython, Common Lisp, Fortran, and a bit of Perl.\n\nDirectory Layout\n----------------\n\nSimplified directory layout (only essential files/directories):\n```\nSAGE_ROOT                 Root directory (sage-x.y in Sage tarball)\n\u251c\u2500\u2500 build\n\u2502   \u2514\u2500\u2500 pkgs              Every package is a subdirectory here\n\u2502       \u251c\u2500\u2500 4ti2/\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib/\n\u251c\u2500\u2500 configure             Top-level configure script\n\u251c\u2500\u2500 COPYING.txt           Copyright information\n\u251c\u2500\u2500 pkgs                  Source trees of Python distribution packages\n\u2502   \u251c\u2500\u2500 sage-conf\n\u2502   \u2502   \u251c\u2500\u2500 sage_conf.py\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-docbuild\n\u2502   \u2502   \u251c\u2500\u2500 sage_docbuild/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-setup\n\u2502   \u2502   \u251c\u2500\u2500 sage_setup/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-sws2rst\n\u2502   \u2502   \u251c\u2500\u2500 sage_sws2rst/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u2514\u2500\u2500 sagemath-standard\n\u2502       \u251c\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 sage -> ../../src/sage\n\u2502       \u2514\u2500\u2500 setup.py\n\u251c\u2500\u2500 local  (SAGE_LOCAL)   Installation hierarchy for non-Python packages\n\u2502   \u251c\u2500\u2500 bin               Executables\n\u2502   \u251c\u2500\u2500 include           C/C++ headers\n\u2502   \u251c\u2500\u2500 lib               Shared libraries, architecture-dependent data\n\u2502   \u251c\u2500\u2500 share             Databases, architecture-independent data, docs\n\u2502   \u2502   \u2514\u2500\u2500 doc           Viewable docs of Sage and of some components\n\u2502   \u2514\u2500\u2500 var\n\u2502       \u251c\u2500\u2500 lib/sage\n\u2502       \u2502   \u251c\u2500\u2500 installed/\n\u2502       \u2502   \u2502             Records of installed non-Python packages\n\u2502       \u2502   \u251c\u2500\u2500 scripts/  Scripts for uninstalling installed packages\n\u2502       \u2502   \u2514\u2500\u2500 venv-python3.9  (SAGE_VENV)\n\u2502       \u2502       \u2502         Installation hierarchy (virtual environment)\n\u2502       \u2502       \u2502         for Python packages\n\u2502       \u2502       \u251c\u2500\u2500 bin/  Executables and installed scripts\n\u2502       \u2502       \u251c\u2500\u2500 lib/python3.9/site-packages/\n\u2502       \u2502       \u2502         Python modules/packages are installed here\n\u2502       \u2502       \u2514\u2500\u2500 var/lib/sage/\n\u2502       \u2502           \u2514\u2500\u2500 wheels/\n\u2502       \u2502                 Python wheels for all installed Python packages\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 tmp/sage/     Temporary files when building Sage\n\u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 install.log       Full install log\n\u2502   \u2514\u2500\u2500 pkgs              Build logs of individual packages\n\u2502       \u251c\u2500\u2500 alabaster-0.7.12.log\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib-1.2.11.log\n\u251c\u2500\u2500 m4                    M4 macros for generating the configure script\n\u2502   \u2514\u2500\u2500 *.m4\n\u251c\u2500\u2500 Makefile              Running \"make\" uses this file\n\u251c\u2500\u2500 prefix -> SAGE_LOCAL  Convenience symlink to the installation tree\n\u251c\u2500\u2500 README.md             This file\n\u251c\u2500\u2500 sage                  Script to start Sage\n\u251c\u2500\u2500 src                   Monolithic Sage library source tree\n\u2502   \u251c\u2500\u2500 bin/              Scripts that Sage uses internally\n\u2502   \u251c\u2500\u2500 doc/              Sage documentation sources\n\u2502   \u2514\u2500\u2500 sage/             The Sage library source code\n\u251c\u2500\u2500 upstream              Source tarballs of packages\n\u2502   \u251c\u2500\u2500 Babel-2.9.1.tar.gz\n\u2502   \u2026\n\u2502   \u2514\u2500\u2500 zlib-1.2.11.tar.gz\n\u251c\u2500\u2500 venv -> SAGE_VENV     Convenience symlink to the virtual environment\n\u2514\u2500\u2500 VERSION.txt\n```\nFor more details see [our Developer's Guide](https://doc.sagemath.org/html/en/developer/coding_basics.html#files-and-directory-structure).\n\nBuild System\n------------\n\nThis is a brief summary of the Sage software distribution's build system.\nThere are two components to the full Sage system--the Sage Python library\nand its associated user interfaces, and the larger software distribution of\nSage's main dependencies (for those dependencies not supplied by the user's\nsystem).\n\nSage's Python library is built and installed using a `setup.py` script as is\nstandard for Python packages (Sage's `setup.py` is non-trivial, but not\nunusual).\n\nMost of the rest of the build system is concerned with building all of Sage's\ndependencies in the correct order in relation to each other.  The dependencies\nincluded by Sage are referred to as SPKGs (i.e. \"Sage Packages\") and are listed\nunder `build/pkgs`.\n\nThe main entrypoint to Sage's build system is the top-level `Makefile` at the\nroot of the source tree.  Unlike most normal projects that use autoconf (Sage\ndoes as well, as described below), this `Makefile` is not generated.  Instead,\nit contains a few high-level targets and targets related to bootstrapping the\nsystem.  Nonetheless, we still run `make <target>` from the root of the source\ntree--targets not explicitly defined in the top-level `Makefile` are passed\nthrough to another Makefile under `build/make/Makefile`.\n\nThe latter `build/make/Makefile` *is* generated by an autoconf-generated\n`configure` script, using the template in `build/make/Makefile.in`.  This\nincludes rules for building the Sage library itself (`make sagelib`), and for\nbuilding and installing each of Sage's dependencies (e.g. `make gf2x`).\n\nThe `configure` script itself, if it is not already built, can be generated by\nrunning the `bootstrap` script (the latter requires _GNU autotools_ being installed).\nThe top-level `Makefile` also takes care of this automatically.\n\nTo summarize, running a command like `make python3` at the top-level of the\nsource tree goes something like this:\n\n1.  `make python3`\n2.  run `./bootstrap` if `configure` needs updating\n3.  run `./configure` with any previously configured options if `build/make/Makefile`\n    needs updating\n4.  change directory into `build/make` and run the `install` script--this is\n    little more than a front-end to running `make -f build/make/Makefile python3`,\n    which sets some necessary environment variables and logs some information\n5.  `build/make/Makefile` contains the actual rule for building `python3`; this\n    includes building all of `python3`'s dependencies first (and their\n    dependencies, recursively); the actual package installation is performed\n    with the `sage-spkg` program\n\nRelocation\n----------\n\nIt is not supported to move the `SAGE_ROOT` or `SAGE_LOCAL` directory\nafter building Sage.  If you do move the directories, you will have to\nrun ``make distclean`` and build Sage again from scratch.\n\nFor a system-wide installation, you have to build Sage as a \"normal\" user\nand then as root you can change permissions. See the [Installation Guide](https://doc.sagemath.org/html/en/installation/source.html#installation-in-a-multiuser-environment)\nfor further information.\n\nRedistribution\n--------------\n\nYour local Sage install is almost exactly the same as any \"developer\"\ninstall. You can make changes to documentation, source, etc., and very\neasily package the complete results up for redistribution just like we\ndo.\n\n1.  To make a binary distribution with your currently installed packages,\n    visit [sagemath/binary-pkg](https://github.com/sagemath/binary-pkg).\n\n2.  To make your own source tarball of Sage, type:\n\n        $ make dist\n\n    The result is placed in the directory `dist/`.\n\nChanges to Included Software\n----------------------------\n\nAll software included with Sage is copyrighted by the respective authors\nand released under an open source license that is __GPL version 3 or\nlater__ compatible. See [COPYING.txt](./COPYING.txt) for more details.\n\nSources are in unmodified (as far as possible) tarballs in the\n`upstream/` directory. The remaining description, version\ninformation, patches, and build scripts are in the accompanying\n`build/pkgs/<packagename>` directory. This directory is\npart of the Sage git repository.\n\n<p align=\"center\">\n   Copyright (C) 2005-2023 The Sage Development Team\n</p>\n<p align=\"center\">\n   https://www.sagemath.org\n</p>\n\n", "release_dates": ["2023-12-03T11:54:06Z", "2023-08-23T10:00:44Z", "2023-05-20T23:59:54Z", "2023-02-11T16:23:54Z", "2022-10-01T08:14:23Z", "2022-07-23T11:35:09Z", "2022-02-24T16:08:00Z", "2021-08-27T09:49:58Z", "2021-05-12T08:12:04Z", "2020-10-25T21:18:20Z", "2020-06-24T11:44:11Z", "2017-06-29T09:46:54Z", "2015-08-19T12:42:35Z", "2015-08-19T12:42:07Z", "2015-04-23T10:49:37Z"]}, {"name": "sage-archive-2023-02-01", "description": "This repository used to be the user-facing mirror of the Sage source tree. As Sage development migrated on 2023-02-01 from https://trac.sagemath.org/ to our new repository on GitHub, https://github.com/sagemath/sage, we have renamed and archived this repository.", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<a href=\"https://sagemath.org\"><img src=\"src/doc/common/themes/sage/static/logo_sagemath_black.svg\" height=\"60\" align=\"right\" /></a>\n\n# Sage: Open Source Mathematical Software\n\n>   \"Creating a Viable Open Source Alternative to\n>   Magma, Maple, Mathematica, and MATLAB\"\n\n>   Copyright (C) 2005-2022 The Sage Development Team\n\nhttps://www.sagemath.org\n\nThe Sage Library is free software released under the\nGNU General Public Licence GPLv2+, and included packages\nhave [compatible software licenses](./COPYING.txt).\n[Over 800 people](https://www.sagemath.org/development-map.html)\nhave contributed code to Sage. In many cases, documentation\nfor modules and functions list the authors.\n\nGetting Started\n---------------\n\nThe [Sage Installation Guide](https://doc.sagemath.org/html/en/installation/index.html)\nprovides a decision tree that guides you to the type of installation\nthat will work best for you. This includes building from source,\nobtaining Sage from a package manager, using a container image, or using\nSage in the cloud.\n\n**This README contains self-contained instructions for building Sage from source.**\nIt assumes that you have already cloned the git repository or downloaded the\n[sources](https://www.sagemath.org/download-source.html) in the form\nof a tarball.\n\nIf you have questions or encounter problems, please do not hesitate\nto email the [sage-support mailing list](https://groups.google.com/group/sage-support)\nor ask on the [Ask Sage questions and answers site](https://ask.sagemath.org).\n\nSupported Platforms\n-------------------\n\nSage attempts to support all major Linux distributions, recent versions of\nmacOS, and Windows (using Windows Subsystem for Linux or\nvirtualization).\n\nDetailed information on supported platforms for a specific version of Sage\ncan be found in the section \"Availability and installation help\" of the\n[release tour](https://wiki.sagemath.org/ReleaseTours) for this version.\n\nWe highly appreciate contributions to Sage that fix portability bugs\nand help port Sage to new platforms; let us know at the [sage-devel\nmailing list](https://groups.google.com/group/sage-devel).\n\n[Windows] Preparing the Platform\n--------------------------------\n\nThe preferred way to run Sage on Windows is using the [Windows Subsystem for\nLinux](https://docs.microsoft.com/en-us/windows/wsl/faq), which allows\nyou to install a standard Linux distribution such as Ubuntu within\nyour Windows.  Then all instructions for installation in Linux apply.\n\nAs an alternative, you can also run Linux on Windows using Docker (see\nabove) or other virtualization solutions.\n\n[macOS] Preparing the Platform\n------------------------------\n\nIf your Mac uses the Apple Silicon (M1, arm64) architecture:\n\n- If you set up your Mac by transfering files from an older Mac, make sure\n  that the directory ``/usr/local`` does not contain an old copy of Homebrew\n  (or other software) for the x86_64 architecture that you may have copied\n  over.  Note that Homebrew for the M1 is installed in ``/opt/homebrew``, not\n  ``/usr/local``.\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, using Homebrew (\"the missing package manager for macOS\") from\n  https://brew.sh/ required because it provides a version of ``gfortran`` with\n  necessary changes for this platform that are not in a released upstream\n  version of GCC. (The ``gfortran`` package that comes with the Sage\n  distribution is not suitable for the M1/M2.)\n\nIf your Mac uses the Intel (x86_64) architecture:\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, we strongly recommend to use Homebrew (\"the missing package\n  manager for macOS\") from https://brew.sh/, which provides the ``gfortran``\n  compiler and many libraries.\n\n- Otherwise, if you do not wish to install Homebrew, you will need to install\n  the latest version of Xcode Command Line Tools.  Open a terminal window and\n  run `xcode-select --install`; then click \"Install\" in the pop-up window.  If\n  the Xcode Command Line Tools are already installed, you may want to check if\n  they need to be updated by typing `softwareupdate -l`.\n\nInstructions to Build from Source\n---------------------------------\n\nLike many other software packages, Sage is built from source using\n`./configure`, followed by `make`.  However, we strongly recommend to\nread the following step-by-step instructions for building Sage.\n\nThe instructions cover all of Linux, macOS, and WSL.\n\nMore details, providing a background for these instructions, can be found\nin the [section \"Install from Source Code\"](https://doc.sagemath.org/html/en/installation/source.html).\nin the Installation Guide.\n\n1.  Decide on the source/build directory (`SAGE_ROOT`):\n\n    - On personal computers, any subdirectory of your :envvar:`HOME`\n      directory should do.\n\n    - For example, you could use `SAGE_ROOT=~/sage/sage-x.y`, which we\n      will use as the running example below, where `x.y` is the\n      current Sage version.\n\n    - You need at least 10 GB of free disk space.\n\n    - The full path to the source directory must contain **no spaces**.\n\n    - After starting the build, you cannot move the source/build\n      directory without breaking things.\n\n    - You may want to avoid slow filesystems such as\n      [network file systems (NFS)](https://en.wikipedia.org/wiki/Network_File_System)\n      and the like.\n\n    - [macOS] macOS allows changing directories without using exact capitalization.\n      Beware of this convenience when compiling for macOS. Ignoring exact\n      capitalization when changing into :envvar:`SAGE_ROOT` can lead to build\n      errors for dependencies requiring exact capitalization in path names.\n\n2.  Download/unpack or clone the sources.\n\n    - Go to https://www.sagemath.org/download-source.html, select a mirror,\n      and download the file :file:`sage-x.y.tar.gz`.\n\n      This compressed archive file contains the source code for Sage and\n      the source for all programs on which Sage depends.\n\n    - After downloading the source tarball `sage-x.y.tar.gz` into\n      `~/sage/`:\n\n            $ cd ~/sage/\n            $ tar xf sage-x.y.tar.gz  # adapt x.y; takes a while\n\n      This creates the subdirectory `sage-x.y`. Now change into it:\n\n            $ cd sage-x.y/  # adapt x.y\n\n    - [Git] Alternatively, and required for Sage development, clone the Sage\n      git repository:\n\n            $ ORIG=https://github.com/sagemath/sage.git\n            $ git clone -c core.symlinks=true --branch develop --tags $ORIG\n\n      This will create the directory `sage`. (See the section\n      [Setting up git](https://doc.sagemath.org/html/en/developer/git_setup.html)\n      and the following sections in the Sage Developer's Guide\n      for more information.)\n\n      Change into it and pick the branch you need, typically\n      the latest development branch:\n\n            $ cd sage\n            $ git checkout develop\n\n    - [Windows] The Sage source tree contains symbolic links, and the\n      build will not work if Windows line endings rather than UNIX\n      line endings are used.\n\n      Therefore it is crucial that you unpack the source tree from the\n      WSL `bash` using the WSL `tar` utility and not using other\n      Windows tools (including mingw). Likewise, when using `git`, it\n      is recommended (but not necessary) to use the WSL version of\n      `git`.\n\n3.  [Linux, WSL] Install the required minimal build prerequisites.\n\n    - Compilers: `gcc`, `gfortran`, `g++` (GCC 8.x to 12.x and recent\n      versions of Clang (LLVM) are supported).\n      See [build/pkgs/gcc/SPKG.rst](build/pkgs/gcc/SPKG.rst) and\n      [build/pkgs/gfortran/SPKG.rst](build/pkgs/gfortran/SPKG.rst)\n      for a discussion of suitable compilers.\n\n    - Build tools: GNU `make`, GNU `m4`, `perl` (including\n      ``ExtUtils::MakeMaker``), `ranlib`, `git`, `tar`, `bc`.\n      See [build/pkgs/_prereq/SPKG.rst](build/pkgs/_prereq/SPKG.rst) for\n      more details.\n\n    - Python 3.4 or later, or Python 2.7, a full installation including\n      `urllib`; but ideally version 3.8.x, 3.9.x, or 3.10.x, which\n      will avoid having to build Sage's own copy of Python 3.\n      See [build/pkgs/python3/SPKG.rst](build/pkgs/python3/SPKG.rst)\n      for more details.\n\n    We have collected lists of system packages that provide these build\n    prerequisites. See, in the folder\n    [build/pkgs/_prereq/distros](build/pkgs/_prereq/distros),\n    the files\n    [arch.txt](build/pkgs/_prereq/distros/arch.txt),\n    [debian.txt](build/pkgs/_prereq/distros/debian.txt)\n    (also for Ubuntu, Linux Mint, etc.),\n    [fedora.txt](build/pkgs/_prereq/distros/fedora.txt)\n    (also for Red Hat, CentOS),\n    [opensuse.txt](build/pkgs/_prereq/distros/opensuse.txt),\n    [slackware.txt](build/pkgs/_prereq/distros/slackware.txt), and\n    [void.txt](build/pkgs/_prereq/distros/void.txt), or visit\n    https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq\n\n4.  [Git] If you plan to do Sage development or otherwise work with ticket branches\n    and not only releases, install the bootstrapping prerequisites. See the\n    files in the folder\n    [build/pkgs/_bootstrap/distros](build/pkgs/_bootstrap/distros), or\n    visit\n    https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap\n\n5.  [Git] If you cloned the Sage repository using `git`, bootstrap the\n    source tree using the following command:\n\n        $ make configure\n\n    (If the bootstrapping prerequisites are not installed, this command will\n    download a package providing pre-built bootstrap output instead.)\n\n6.  Sanitize the build environment. Use the command\n\n        $ env\n\n    to inspect the current environment variables, in particular `PATH`,\n    `PKG_CONFIG_PATH`, `LD_LIBRARY_PATH`, `CFLAGS`, `CPPFLAGS`, `CXXFLAGS`,\n    and `LDFLAGS` (if set).\n\n    Remove items from these (colon-separated) environment variables\n    that Sage should not use for its own build. In particular, remove\n    items if they refer to a previous Sage installation.\n\n    - [WSL] In particular, WSL imports many items from the Windows\n      `PATH` variable into the Linux environment, which can lead to\n      confusing build errors. These items typically start with `/mnt/c`.\n      It is best to remove all of them from the environment variables.\n      For example, you can set `PATH` using the command:\n\n            $ export PATH=/usr/sbin/:/sbin/:/bin/:/usr/lib/wsl/lib/\n\n    - [macOS with homebrew] Set required environment variables for the build:\n\n            $ source ./.homebrew-build-env\n\n      This is to make some of Homebrew's packages (so-called keg-only\n      packages) available for the build. Run it once to apply the\n      suggestions for the current terminal session. You may need to\n      repeat this command before you rebuild Sage from a new terminal\n      session, or after installing additional homebrew packages.  (You\n      can also add it to your shell profile so that it gets run\n      automatically in all future sessions.)\n\n7.  Optionally, decide on the installation prefix (`SAGE_LOCAL`):\n\n    - Traditionally, and by default, Sage is installed into the\n      subdirectory hierarchy rooted at `SAGE_ROOT/local/`.\n\n    - This can be changed using `./configure --prefix=SAGE_LOCAL`,\n      where `SAGE_LOCAL` is the desired installation prefix, which\n      must be writable by the user.\n\n      If you use this option in combination with `--disable-editable`,\n      you can delete the entire Sage source tree after completing\n      the build process.  What is installed in `SAGE_LOCAL` will be\n      a self-contained installation of Sage.\n\n    - Note that in Sage's build process, `make` builds **and**\n      installs (`make install` is a no-op).  Therefore the\n      installation hierarchy must be writable by the user.\n\n    - See the installation manual for options if you want to\n      install into shared locations such as `/usr/local/`.\n      Do not attempt to build Sage as `root`.\n\n8.  Optional: It is recommended that you have both LaTeX and\n    the ImageMagick tools (e.g. the \"convert\" command) installed\n    since some plotting functionality benefits from them.\n\n9.  Optionally, review the configuration options, which includes\n    many optional packages:\n\n        $ ./configure --help\n\n    A notable option for Sage developers is the following:\n\n    - Use `./configure --enable-download-from-upstream-url` to allow\n      downloading packages from their upstream URL if they cannot (yet) be\n      found on the Sage mirrors. This is useful for trying out ticket branches\n      that make package upgrades.\n\n10. Optional, but highly recommended: Set some environment variables to\n    customize the build.\n\n    For example, the `MAKE` environment variable controls whether to\n    run several jobs in parallel.  On a machine with 4 processors, say,\n    typing `export MAKE=\"make -j4\"` will configure the build script to\n    perform a parallel compilation of Sage using 4 jobs. On some\n    powerful machines, you might even consider `-j16`, as building with\n    more jobs than CPU cores can speed things up further.\n\n    To reduce the terminal output during the build, type `export V=0`.\n    (`V` stands for \"verbosity\".)\n\n    Some environment variables deserve a special mention: `CC`,\n    `CXX` and `FC`. These variables defining your compilers\n    can be set at configuration time and their values will be recorded for\n    further use at build time and runtime.\n\n    For an in-depth discussion of more environment variables for\n    building Sage, see [the installation\n    guide](https://doc.sagemath.org/html/en/installation/source.html#environment-variables).\n\n11. Type `./configure`, followed by any options that you wish to use.\n    For example, to build Sage with `gf2x` package supplied by Sage,\n    use `./configure --with-system-gf2x=no`.\n\n    At the end of a successful `./configure` run, you may see messages\n    recommending to install extra system packages using your package\n    manager.\n\n    For a large [list of Sage\n    packages](https://trac.sagemath.org/ticket/27330), Sage is able to\n    detect whether an installed system package is suitable for use with\n    Sage; in that case, Sage will not build another copy from source.\n\n    Sometimes, the messages will recommend to install packages that are\n    already installed on your system. See the earlier configure\n    messages or the file `config.log` for explanation.  Also, the\n    messages may recommend to install packages that are actually not\n    available; only the most recent releases of your distribution will\n    have all of these recommended packages.\n\n12. Optional: If you choose to install the additional system packages,\n    a re-run of `./configure` will test whether the versions installed\n    are usable for Sage; if they are, this will reduce the compilation\n    time and disk space needed by Sage. The usage of packages may be\n    adjusted by `./configure` parameters (check again the output of\n    `./configure --help`).\n\n13. Type `make`.  That's it! Everything is automatic and\n    non-interactive.\n\n    If you followed the above instructions, in particular regarding the\n    installation of system packages recommended by the output of\n    `./configure` (step 10), and regarding the parallel build (step 9),\n    building Sage takes less than one hour on a modern computer.\n    (Otherwise, it can take much longer.)\n\n    The build should work fine on all fully supported platforms. If it\n    does not, we want to know!\n\n14. Type `./sage` to try it out. In Sage, try for example `2 + 2`,\n    `plot(x^2)`, `plot3d(lambda x, y: x*y, (-1, 1), (-1, 1))`\n    to test a simple computation and plotting in 2D and 3D.\n    Type <kbd>Ctrl</kbd>+<kbd>D</kbd> or `quit` to quit Sage.\n\n15. Optional: Type `make ptestlong` to test all examples in the documentation\n    (over 200,000 lines of input!) -- this takes from 10 minutes to\n    several hours. Don't get too disturbed if there are 2 to 3 failures,\n    but always feel free to email the section of `logs/ptestlong.log` that\n    contains errors to the [sage-support mailing list](https://groups.google.com/group/sage-support).\n    If there are numerous failures, there was a serious problem with your build.\n\n16. The HTML version of the [documentation](https://doc.sagemath.org/html/en/index.html)\n    is built during the compilation process of Sage and resides in the directory\n    `local/share/doc/sage/html/`. You may want to bookmark it in your browser.\n\n17. Optional: If you want to build the PDF version of the documentation,\n    run `make doc-pdf` (this requires LaTeX to be installed).\n\n18. Optional: Install optional packages of interest to you:\n    get a list by typing  `./sage --optional` or by visiting the\n    [packages documentation page](https://doc.sagemath.org/html/en/reference/spkg/).\n\n19. Optional: Create a symlink to the installed `sage` script in a\n    directory in your `PATH`, for example ``/usr/local``. This will\n    allow you to start Sage by typing `sage` from anywhere rather than\n    having to either type the full path or navigate to the Sage\n    directory and type `./sage`. This can be done by running:\n\n        $ sudo ln -s $(./sage -sh -c 'ls $SAGE_ROOT/venv/bin/sage') /usr/local/bin\n\n20. Optional: Set up SageMath as a Jupyter kernel in an existing Jupyter notebook\n    or JupyterLab installation, as described in [section\n    \"Launching SageMath\"](https://doc.sagemath.org/html/en/installation/launching.html)\n    in the installation manual.\n\nTroubleshooting\n---------------\n\nIf you have problems building Sage, check the Sage Installation Guide,\nas well as the version-specific Sage Installation FAQ in the [Sage Release\nTour](https://wiki.sagemath.org/ReleaseTours) corresponding to the\nversion that you are installing.\n\nPlease do not hesitate to ask for help in the [SageMath forum\n](https://ask.sagemath.org/questions/) or the [sage-support mailing\nlist](https://groups.google.com/forum/#!forum/sage-support).  The\n[Troubleshooting section in the Sage Installation Guide\n](https://doc.sagemath.org/html/en/installation/troubles.html)\nprovides instructions on what information to provide so that we can provide\nhelp more effectively.\n\nContributing to Sage\n--------------------\n\nIf you'd like to contribute to Sage, we strongly recommend that you read the\n[Developer's Guide](https://doc.sagemath.org/html/en/developer/index.html).\n\nSage has significant components written in the following languages:\nC/C++, Python, Cython, Common Lisp, Fortran, and a bit of Perl.\n\nDirectory Layout\n----------------\n\nSimplified directory layout (only essential files/directories):\n```\nSAGE_ROOT                 Root directory (sage-x.y in Sage tarball)\n\u251c\u2500\u2500 build\n\u2502   \u2514\u2500\u2500 pkgs              Every package is a subdirectory here\n\u2502       \u251c\u2500\u2500 4ti2/\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib/\n\u251c\u2500\u2500 configure             Top-level configure script\n\u251c\u2500\u2500 COPYING.txt           Copyright information\n\u251c\u2500\u2500 pkgs                  Source trees of Python distribution packages\n\u2502   \u251c\u2500\u2500 sage-conf\n\u2502   \u2502   \u251c\u2500\u2500 sage_conf.py\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-docbuild\n\u2502   \u2502   \u251c\u2500\u2500 sage_docbuild/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-setup\n\u2502   \u2502   \u251c\u2500\u2500 sage_setup/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-sws2rst\n\u2502   \u2502   \u251c\u2500\u2500 sage_sws2rst/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u2514\u2500\u2500 sagemath-standard\n\u2502       \u251c\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 sage -> ../../src/sage\n\u2502       \u2514\u2500\u2500 setup.py\n\u251c\u2500\u2500 local  (SAGE_LOCAL)   Installation hierarchy for non-Python packages\n\u2502   \u251c\u2500\u2500 bin               Executables\n\u2502   \u251c\u2500\u2500 include           C/C++ headers\n\u2502   \u251c\u2500\u2500 lib               Shared libraries, architecture-dependent data\n\u2502   \u251c\u2500\u2500 share             Databases, architecture-independent data, docs\n\u2502   \u2502   \u2514\u2500\u2500 doc           Viewable docs of Sage and of some components\n\u2502   \u2514\u2500\u2500 var\n\u2502       \u251c\u2500\u2500 lib/sage\n\u2502       \u2502   \u251c\u2500\u2500 installed/\n\u2502       \u2502   \u2502             Records of installed non-Python packages\n\u2502       \u2502   \u251c\u2500\u2500 scripts/  Scripts for uninstalling installed packages\n\u2502       \u2502   \u2514\u2500\u2500 venv-python3.9  (SAGE_VENV)\n\u2502       \u2502       \u2502         Installation hierarchy (virtual environment)\n\u2502       \u2502       \u2502         for Python packages\n\u2502       \u2502       \u251c\u2500\u2500 bin/  Executables and installed scripts\n\u2502       \u2502       \u251c\u2500\u2500 lib/python3.9/site-packages/\n\u2502       \u2502       \u2502         Python modules/packages are installed here\n\u2502       \u2502       \u2514\u2500\u2500 var/lib/sage/\n\u2502       \u2502           \u2514\u2500\u2500 wheels/\n\u2502       \u2502                 Python wheels for all installed Python packages\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 tmp/sage/     Temporary files when building Sage\n\u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 install.log       Full install log\n\u2502   \u2514\u2500\u2500 pkgs              Build logs of individual packages\n\u2502       \u251c\u2500\u2500 alabaster-0.7.12.log\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib-1.2.11.log\n\u251c\u2500\u2500 m4                    M4 macros for generating the configure script\n\u2502   \u2514\u2500\u2500 *.m4\n\u251c\u2500\u2500 Makefile              Running \"make\" uses this file\n\u251c\u2500\u2500 prefix -> SAGE_LOCAL  Convenience symlink to the installation tree\n\u251c\u2500\u2500 README.md             This file\n\u251c\u2500\u2500 sage                  Script to start Sage\n\u251c\u2500\u2500 src                   Monolithic Sage library source tree\n\u2502   \u251c\u2500\u2500 bin/              Scripts that Sage uses internally\n\u2502   \u251c\u2500\u2500 doc/              Sage documentation sources\n\u2502   \u2514\u2500\u2500 sage/             The Sage library source code\n\u251c\u2500\u2500 upstream              Source tarballs of packages\n\u2502   \u251c\u2500\u2500 Babel-2.9.1.tar.gz\n\u2502   \u2026\n\u2502   \u2514\u2500\u2500 zlib-1.2.11.tar.gz\n\u251c\u2500\u2500 venv -> SAGE_VENV     Convenience symlink to the virtual environment\n\u2514\u2500\u2500 VERSION.txt\n```\nFor more details see [our Developer's Guide](https://doc.sagemath.org/html/en/developer/coding_basics.html#files-and-directory-structure).\n\nBuild System\n------------\n\nThis is a brief summary of the Sage software distribution's build system.\nThere are two components to the full Sage system--the Sage Python library\nand its associated user interfaces, and the larger software distribution of\nSage's main dependencies (for those dependencies not supplied by the user's\nsystem).\n\nSage's Python library is built and installed using a `setup.py` script as is\nstandard for Python packages (Sage's `setup.py` is non-trivial, but not\nunusual).\n\nMost of the rest of the build system is concerned with building all of Sage's\ndependencies in the correct order in relation to each other.  The dependencies\nincluded by Sage are referred to as SPKGs (i.e. \"Sage Packages\") and are listed\nunder `build/pkgs`.\n\nThe main entrypoint to Sage's build system is the top-level `Makefile` at the\nroot of the source tree.  Unlike most normal projects that use autoconf (Sage\ndoes as well, as described below), this `Makefile` is not generated.  Instead,\nit contains a few high-level targets and targets related to bootstrapping the\nsystem.  Nonetheless, we still run `make <target>` from the root of the source\ntree--targets not explicitly defined in the top-level `Makefile` are passed\nthrough to another Makefile under `build/make/Makefile`.\n\nThe latter `build/make/Makefile` *is* generated by an autoconf-generated\n`configure` script, using the template in `build/make/Makefile.in`.  This\nincludes rules for building the Sage library itself (`make sagelib`), and for\nbuilding and installing each of Sage's dependencies (e.g. `make gf2x`).\n\nThe `configure` script itself, if it is not already built, can be generated by\nrunning the `bootstrap` script (the latter requires _GNU autotools_ being installed).\nThe top-level `Makefile` also takes care of this automatically.\n\nTo summarize, running a command like `make python3` at the top-level of the\nsource tree goes something like this:\n\n1.  `make python3`\n2.  run `./bootstrap` if `configure` needs updating\n3.  run `./configure` with any previously configured options if `build/make/Makefile`\n    needs updating\n4.  change directory into `build/make` and run the `install` script--this is\n    little more than a front-end to running `make -f build/make/Makefile python3`,\n    which sets some necessary environment variables and logs some information\n5.  `build/make/Makefile` contains the actual rule for building `python3`; this\n    includes building all of `python3`'s dependencies first (and their\n    dependencies, recursively); the actual package installation is performed\n    with the `sage-spkg` program\n\nRelocation\n----------\n\nIt is not supported to move the `SAGE_ROOT` or `SAGE_LOCAL` directory\nafter building Sage.  If you do move the directories, you will have to\nrun ``make distclean`` and build Sage again from scratch.\n\nFor a system-wide installation, you have to build Sage as a \"normal\" user\nand then as root you can change permissions. See the [Installation Guide](https://doc.sagemath.org/html/en/installation/source.html#installation-in-a-multiuser-environment)\nfor further information.\n\nRedistribution\n--------------\n\nYour local Sage install is almost exactly the same as any \"developer\"\ninstall. You can make changes to documentation, source, etc., and very\neasily package the complete results up for redistribution just like we\ndo.\n\n1.  To make a binary distribution with your currently installed packages,\n    visit [sagemath/binary-pkg](https://github.com/sagemath/binary-pkg).\n\n2.  To make your own source tarball of Sage, type:\n\n        $ make dist\n\n    The result is placed in the directory `dist/`.\n\nChanges to Included Software\n----------------------------\n\nAll software included with Sage is copyrighted by the respective authors\nand released under an open source license that is __GPL version 3 or\nlater__ compatible. See [COPYING.txt](./COPYING.txt) for more details.\n\nSources are in unmodified (as far as possible) tarballs in the\n`upstream/` directory. The remaining description, version\ninformation, patches, and build scripts are in the accompanying\n`build/pkgs/<packagename>` directory. This directory is\npart of the Sage git repository.\n", "release_dates": ["2022-10-01T08:14:23Z", "2022-07-23T11:35:09Z", "2022-02-24T16:08:00Z", "2021-08-27T09:49:58Z", "2021-05-12T08:12:04Z", "2020-10-25T21:18:20Z", "2020-06-24T11:44:11Z", "2017-06-29T09:46:54Z", "2015-08-19T12:42:35Z", "2015-08-19T12:42:07Z", "2015-04-23T10:49:37Z"]}, {"name": "sage-binder-env", "description": "A Binder repo for SageMath computing environment", "language": "Jupyter Notebook", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "sage-changelogs", "description": "Script to make changelogs for SageMath releases in the traditional format. By Jeroen Demeyer. Obsolete after the transition to GitHub.", "language": "Roff", "license": null, "readme": "= merger =\n\n== Description ==\n\nScript to make Sage changelogs.\n\n== License ==\n\nGNU General Public License, either version 2 of the License, or\n(at your option) any later version.\n\n== Authors ==\n\n * Jeroen Demeyer <jdemeyer@cage.ugent.be>\n\n== Variables ==\n\nThe following variables MAY be set.  If not set, a default value will\nbe used.  In all cases, a non-existing directory will be created.\n\n* VERSION: The new version of Sage.\n\n* SAGE_MERGER_TOP (default: $HOME/merger): Fully qualified top working\ndirectory, shared across Sage versions.  It is used as a default for\nseveral other variables and is also used to extract Sage.\n\n* LOGDIR (default: $DIST/logs): Directory where the log files of the\nmerger script will be written to.  Also the release notes will be put\nhere before Sage is built (so you can already look at the notes before\nthe build is finished).  This directory will be deleted and recreated\nif it already exists.\n\n* RELEASEURL (default: http://boxen.math.washington.edu/home/release)\nWhere can Sage releases (old and new) be downloaded from?\n\n* TRACURL (default: http://trac.sagemath.org/sage_trac): URL for the\nSage Trac.\n\n* RELEASEMANAGER (default: real name of current user): Real name of\nthe release manager.\n\n\n== Hook functions ==\n\nBefore every step in the merge process above, a hook function is\ncalled if defined in the merger script.  The name of the function is\nthe name of the step with \"_hook\" appended, for example\ntest_sage_hook().  If a function all_hook is defined, it will be run\nbefore every step.  If a hook function sets the variable skip=yes, then\nthat particular step will be skipped.  Any non-zero return value is\ntreated as an error and will abort the merger.\n", "release_dates": []}, {"name": "sage-combinat-widgets", "description": "A collection of Jupyter widgets for combinatorial objects in SageMath", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": []}, {"name": "sage-explorer", "description": "A Jupyter widget for exploring SageMath objects", "language": "Python", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": null, "release_dates": ["2020-06-03T16:34:01Z"]}, {"name": "sage-gh-templates-sandbox", "description": "Develop templates for Issues and Pull Requests here -- see https://groups.google.com/g/sage-devel/c/hX6ojxlNwOU/m/nD3AsFuhBAAJ", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<a href=\"https://sagemath.org\"><img src=\"src/doc/common/themes/sage/static/logo_sagemath_black.svg\" height=\"60\" align=\"right\" /></a>\n\n# Sage: Open Source Mathematical Software\n\n>   \"Creating a Viable Open Source Alternative to\n>   Magma, Maple, Mathematica, and MATLAB\"\n\n>   Copyright (C) 2005-2022 The Sage Development Team\n\nhttps://www.sagemath.org\n\nThe Sage Library is free software released under the\nGNU General Public Licence GPLv2+, and included packages\nhave [compatible software licenses](./COPYING.txt).\n[Over 800 people](https://www.sagemath.org/development-map.html)\nhave contributed code to Sage. In many cases, documentation\nfor modules and functions list the authors.\n\nGetting Started\n---------------\n\nThe [Sage Installation Guide](https://doc.sagemath.org/html/en/installation/index.html)\nprovides a decision tree that guides you to the type of installation\nthat will work best for you. This includes building from source,\nobtaining Sage from a package manager, using a container image, or using\nSage in the cloud.\n\n**This README contains self-contained instructions for building Sage from source.**\nIt assumes that you have already cloned the git repository or downloaded the\n[sources](https://www.sagemath.org/download-source.html) in the form\nof a tarball.\n\nIf you have questions or encounter problems, please do not hesitate\nto email the [sage-support mailing list](https://groups.google.com/group/sage-support)\nor ask on the [Ask Sage questions and answers site](https://ask.sagemath.org).\n\nSupported Platforms\n-------------------\n\nSage attempts to support all major Linux distributions, recent versions of\nmacOS, and Windows (using Windows Subsystem for Linux or\nvirtualization).\n\nDetailed information on supported platforms for a specific version of Sage\ncan be found in the section \"Availability and installation help\" of the\n[release tour](https://wiki.sagemath.org/ReleaseTours) for this version.\n\nWe highly appreciate contributions to Sage that fix portability bugs\nand help port Sage to new platforms; let us know at the [sage-devel\nmailing list](https://groups.google.com/group/sage-devel).\n\n[Windows] Preparing the Platform\n--------------------------------\n\nThe preferred way to run Sage on Windows is using the [Windows Subsystem for\nLinux](https://docs.microsoft.com/en-us/windows/wsl/faq), which allows\nyou to install a standard Linux distribution such as Ubuntu within\nyour Windows.  Then all instructions for installation in Linux apply.\n\nAs an alternative, you can also run Linux on Windows using Docker (see\nabove) or other virtualization solutions.\n\n[macOS] Preparing the Platform\n------------------------------\n\nIf your Mac uses the Apple Silicon (M1, arm64) architecture:\n\n- If you set up your Mac by transfering files from an older Mac, make sure\n  that the directory ``/usr/local`` does not contain an old copy of Homebrew\n  (or other software) for the x86_64 architecture that you may have copied\n  over.  Note that Homebrew for the M1 is installed in ``/opt/homebrew``, not\n  ``/usr/local``.\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, using Homebrew (\"the missing package manager for macOS\") from\n  https://brew.sh/ required because it provides a version of ``gfortran`` with\n  necessary changes for this platform that are not in a released upstream\n  version of GCC. (The ``gfortran`` package that comes with the Sage\n  distribution is not suitable for the M1/M2.)\n\nIf your Mac uses the Intel (x86_64) architecture:\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, we strongly recommend to use Homebrew (\"the missing package\n  manager for macOS\") from https://brew.sh/, which provides the ``gfortran``\n  compiler and many libraries.\n\n- Otherwise, if you do not wish to install Homebrew, you will need to install\n  the latest version of Xcode Command Line Tools.  Open a terminal window and\n  run `xcode-select --install`; then click \"Install\" in the pop-up window.  If\n  the Xcode Command Line Tools are already installed, you may want to check if\n  they need to be updated by typing `softwareupdate -l`.\n\nInstructions to Build from Source\n---------------------------------\n\nLike many other software packages, Sage is built from source using\n`./configure`, followed by `make`.  However, we strongly recommend to\nread the following step-by-step instructions for building Sage.\n\nThe instructions cover all of Linux, macOS, and WSL.\n\nMore details, providing a background for these instructions, can be found\nin the [section \"Install from Source Code\"](https://doc.sagemath.org/html/en/installation/source.html).\nin the Installation Guide.\n\n1.  Decide on the source/build directory (`SAGE_ROOT`):\n\n    - On personal computers, any subdirectory of your :envvar:`HOME`\n      directory should do.\n\n    - For example, you could use `SAGE_ROOT=~/sage/sage-x.y`, which we\n      will use as the running example below, where `x.y` is the\n      current Sage version.\n\n    - You need at least 10 GB of free disk space.\n\n    - The full path to the source directory must contain **no spaces**.\n\n    - After starting the build, you cannot move the source/build\n      directory without breaking things.\n\n    - You may want to avoid slow filesystems such as\n      [network file systems (NFS)](https://en.wikipedia.org/wiki/Network_File_System)\n      and the like.\n\n    - [macOS] macOS allows changing directories without using exact capitalization.\n      Beware of this convenience when compiling for macOS. Ignoring exact\n      capitalization when changing into :envvar:`SAGE_ROOT` can lead to build\n      errors for dependencies requiring exact capitalization in path names.\n\n2.  Download/unpack or clone the sources.\n\n    - Go to https://www.sagemath.org/download-source.html, select a mirror,\n      and download the file :file:`sage-x.y.tar.gz`.\n\n      This compressed archive file contains the source code for Sage and\n      the source for all programs on which Sage depends.\n\n    - After downloading the source tarball `sage-x.y.tar.gz` into\n      `~/sage/`:\n\n            $ cd ~/sage/\n            $ tar xf sage-x.y.tar.gz  # adapt x.y; takes a while\n\n      This creates the subdirectory `sage-x.y`. Now change into it:\n\n            $ cd sage-x.y/  # adapt x.y\n\n    - [Git] Alternatively, and required for Sage development, clone the Sage\n      git repository:\n\n            $ ORIG=https://github.com/sagemath/sage.git\n            $ git clone -c core.symlinks=true --branch develop --tags $ORIG\n\n      This will create the directory `sage`. (See the section\n      [Setting up git](https://doc.sagemath.org/html/en/developer/git_setup.html)\n      and the following sections in the Sage Developer's Guide\n      for more information.)\n\n      Change into it and pick the branch you need, typically\n      the latest development branch:\n\n            $ cd sage\n            $ git checkout develop\n\n    - [Windows] The Sage source tree contains symbolic links, and the\n      build will not work if Windows line endings rather than UNIX\n      line endings are used.\n\n      Therefore it is crucial that you unpack the source tree from the\n      WSL `bash` using the WSL `tar` utility and not using other\n      Windows tools (including mingw). Likewise, when using `git`, it\n      is recommended (but not necessary) to use the WSL version of\n      `git`.\n\n3.  [Linux, WSL] Install the required minimal build prerequisites.\n\n    - Compilers: `gcc`, `gfortran`, `g++` (GCC 8.x to 12.x and recent\n      versions of Clang (LLVM) are supported).\n      See [build/pkgs/gcc/SPKG.rst](build/pkgs/gcc/SPKG.rst) and\n      [build/pkgs/gfortran/SPKG.rst](build/pkgs/gfortran/SPKG.rst)\n      for a discussion of suitable compilers.\n\n    - Build tools: GNU `make`, GNU `m4`, `perl` (including\n      ``ExtUtils::MakeMaker``), `ranlib`, `git`, `tar`, `bc`.\n      See [build/pkgs/_prereq/SPKG.rst](build/pkgs/_prereq/SPKG.rst) for\n      more details.\n\n    - Python 3.4 or later, or Python 2.7, a full installation including\n      `urllib`; but ideally version 3.8.x, 3.9.x, or 3.10.x, which\n      will avoid having to build Sage's own copy of Python 3.\n      See [build/pkgs/python3/SPKG.rst](build/pkgs/python3/SPKG.rst)\n      for more details.\n\n    We have collected lists of system packages that provide these build\n    prerequisites. See, in the folder\n    [build/pkgs/_prereq/distros](build/pkgs/_prereq/distros),\n    the files\n    [arch.txt](build/pkgs/_prereq/distros/arch.txt),\n    [debian.txt](build/pkgs/_prereq/distros/debian.txt)\n    (also for Ubuntu, Linux Mint, etc.),\n    [fedora.txt](build/pkgs/_prereq/distros/fedora.txt)\n    (also for Red Hat, CentOS),\n    [opensuse.txt](build/pkgs/_prereq/distros/opensuse.txt),\n    [slackware.txt](build/pkgs/_prereq/distros/slackware.txt), and\n    [void.txt](build/pkgs/_prereq/distros/void.txt), or visit\n    https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq\n\n4.  [Git] If you plan to do Sage development or otherwise work with ticket branches\n    and not only releases, install the bootstrapping prerequisites. See the\n    files in the folder\n    [build/pkgs/_bootstrap/distros](build/pkgs/_bootstrap/distros), or\n    visit\n    https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap\n\n5.  [Git] If you cloned the Sage repository using `git`, bootstrap the\n    source tree using the following command:\n\n        $ make configure\n\n    (If the bootstrapping prerequisites are not installed, this command will\n    download a package providing pre-built bootstrap output instead.)\n\n6.  [macOS with homebrew] Set required environment variables for the build:\n\n        $ source ./.homebrew-build-env\n\n    This is to make some of Homebrew's packages (so-called keg-only packages)\n    available for the build. Run it once to apply the suggestions for the current\n    terminal session. You may need to repeat this command before you rebuild Sage\n    from a new terminal session, or after installing additional homebrew packages.\n    (You can also add it to your shell profile so that it gets run automatically\n    in all future sessions.)\n\n7.  Optionally, decide on the installation prefix (`SAGE_LOCAL`):\n\n    - Traditionally, and by default, Sage is installed into the\n      subdirectory hierarchy rooted at `SAGE_ROOT/local/`.\n\n    - This can be changed using `./configure --prefix=SAGE_LOCAL`,\n      where `SAGE_LOCAL` is the desired installation prefix, which\n      must be writable by the user.\n\n      If you use this option in combination with `--disable-editable`,\n      you can delete the entire Sage source tree after completing\n      the build process.  What is installed in `SAGE_LOCAL` will be\n      a self-contained installation of Sage.\n\n    - Note that in Sage's build process, `make` builds **and**\n      installs (`make install` is a no-op).  Therefore the\n      installation hierarchy must be writable by the user.\n\n    - See the installation manual for options if you want to\n      install into shared locations such as `/usr/local/`.\n      Do not attempt to build Sage as `root`.\n\n8.  Optional: It is recommended that you have both LaTeX and\n    the ImageMagick tools (e.g. the \"convert\" command) installed\n    since some plotting functionality benefits from them.\n\n9.  Optionally, review the configuration options, which includes\n    many optional packages:\n\n        $ ./configure --help\n\n    A notable option for Sage developers is the following:\n\n    - Use `./configure --enable-download-from-upstream-url` to allow\n      downloading packages from their upstream URL if they cannot (yet) be\n      found on the Sage mirrors. This is useful for trying out ticket branches\n      that make package upgrades.\n\n10. Optional, but highly recommended: Set some environment variables to\n    customize the build.\n\n    For example, the `MAKE` environment variable controls whether to\n    run several jobs in parallel.  On a machine with 4 processors, say,\n    typing `export MAKE=\"make -j4\"` will configure the build script to\n    perform a parallel compilation of Sage using 4 jobs. On some\n    powerful machines, you might even consider `-j16`, as building with\n    more jobs than CPU cores can speed things up further.\n\n    To reduce the terminal output during the build, type `export V=0`.\n    (`V` stands for \"verbosity\".)\n\n    Some environment variables deserve a special mention: `CC`,\n    `CXX` and `FC`. These variables defining your compilers\n    can be set at configuration time and their values will be recorded for\n    further use at build time and runtime.\n\n    For an in-depth discussion of more environment variables for\n    building Sage, see [the installation\n    guide](https://doc.sagemath.org/html/en/installation/source.html#environment-variables).\n\n11. Type `./configure`, followed by any options that you wish to use.\n    For example, to build Sage with `gf2x` package supplied by Sage,\n    use `./configure --with-system-gf2x=no`.\n\n    At the end of a successful `./configure` run, you may see messages\n    recommending to install extra system packages using your package\n    manager.\n\n    For a large [list of Sage\n    packages](https://trac.sagemath.org/ticket/27330), Sage is able to\n    detect whether an installed system package is suitable for use with\n    Sage; in that case, Sage will not build another copy from source.\n\n    Sometimes, the messages will recommend to install packages that are\n    already installed on your system. See the earlier configure\n    messages or the file `config.log` for explanation.  Also, the\n    messages may recommend to install packages that are actually not\n    available; only the most recent releases of your distribution will\n    have all of these recommended packages.\n\n12. Optional: If you choose to install the additional system packages,\n    a re-run of `./configure` will test whether the versions installed\n    are usable for Sage; if they are, this will reduce the compilation\n    time and disk space needed by Sage. The usage of packages may be\n    adjusted by `./configure` parameters (check again the output of\n    `./configure --help`).\n\n13. Type `make`.  That's it! Everything is automatic and\n    non-interactive.\n\n    If you followed the above instructions, in particular regarding the\n    installation of system packages recommended by the output of\n    `./configure` (step 10), and regarding the parallel build (step 9),\n    building Sage takes less than one hour on a modern computer.\n    (Otherwise, it can take much longer.)\n\n    The build should work fine on all fully supported platforms. If it\n    does not, we want to know!\n\n14. Type `./sage` to try it out. In Sage, try for example `2 + 2`,\n    `plot(x^2)`, `plot3d(lambda x, y: x*y, (-1, 1), (-1, 1))`\n    to test a simple computation and plotting in 2D and 3D.\n    Type <kbd>Ctrl</kbd>+<kbd>D</kbd> or `quit` to quit Sage.\n\n15. Optional: Type `make ptestlong` to test all examples in the documentation\n    (over 200,000 lines of input!) -- this takes from 10 minutes to\n    several hours. Don't get too disturbed if there are 2 to 3 failures,\n    but always feel free to email the section of `logs/ptestlong.log` that\n    contains errors to the [sage-support mailing list](https://groups.google.com/group/sage-support).\n    If there are numerous failures, there was a serious problem with your build.\n\n16. The HTML version of the [documentation](https://doc.sagemath.org/html/en/index.html)\n    is built during the compilation process of Sage and resides in the directory\n    `local/share/doc/sage/html/`. You may want to bookmark it in your browser.\n\n17. Optional: If you want to build the PDF version of the documentation,\n    run `make doc-pdf` (this requires LaTeX to be installed).\n\n18. Optional: Install optional packages of interest to you:\n    get a list by typing  `./sage --optional` or by visiting the\n    [packages documentation page](https://doc.sagemath.org/html/en/reference/spkg/).\n\n19. Optional: Create a symlink to the installed `sage` script in a\n    directory in your `PATH`, for example ``/usr/local``. This will\n    allow you to start Sage by typing `sage` from anywhere rather than\n    having to either type the full path or navigate to the Sage\n    directory and type `./sage`. This can be done by running:\n\n        $ sudo ln -s $(./sage -sh -c 'ls $SAGE_ROOT/venv/bin/sage') /usr/local/bin\n\n20. Optional: Set up SageMath as a Jupyter kernel in an existing Jupyter notebook\n    or JupyterLab installation, as described in [section\n    \"Launching SageMath\"](https://doc.sagemath.org/html/en/installation/launching.html)\n    in the installation manual.\n\nTroubleshooting\n---------------\n\nIf you have problems building Sage, check the Sage Installation Guide,\nas well as the version-specific Sage Installation FAQ in the [Sage Release\nTour](https://wiki.sagemath.org/ReleaseTours) corresponding to the\nversion that you are installing.\n\nPlease do not hesitate to ask for help in the [SageMath forum\n](https://ask.sagemath.org/questions/) or the [sage-support mailing\nlist](https://groups.google.com/forum/#!forum/sage-support).  The\n[Troubleshooting section in the Sage Installation Guide\n](https://doc.sagemath.org/html/en/installation/troubles.html)\nprovides instructions on what information to provide so that we can provide\nhelp more effectively.\n\nContributing to Sage\n--------------------\n\nIf you'd like to contribute to Sage, we strongly recommend that you read the\n[Developer's Guide](https://doc.sagemath.org/html/en/developer/index.html).\n\nSage has significant components written in the following languages:\nC/C++, Python, Cython, Common Lisp, Fortran, and a bit of Perl.\n\nDirectory Layout\n----------------\n\nSimplified directory layout (only essential files/directories):\n```\nSAGE_ROOT                 Root directory (sage-x.y in Sage tarball)\n\u251c\u2500\u2500 build\n\u2502   \u2514\u2500\u2500 pkgs              Every package is a subdirectory here\n\u2502       \u251c\u2500\u2500 4ti2/\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zn_poly/\n\u251c\u2500\u2500 configure             Top-level configure script\n\u251c\u2500\u2500 COPYING.txt           Copyright information\n\u251c\u2500\u2500 pkgs                  Source trees of Python distribution packages\n\u2502   \u251c\u2500\u2500 sage-conf\n\u2502   \u2502   \u251c\u2500\u2500 sage_conf.py\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-docbuild\n\u2502   \u2502   \u251c\u2500\u2500 sage_docbuild/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-setup\n\u2502   \u2502   \u251c\u2500\u2500 sage_setup/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-sws2rst\n\u2502   \u2502   \u251c\u2500\u2500 sage_sws2rst/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u2514\u2500\u2500 sagemath-standard\n\u2502       \u251c\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 sage -> ../../src/sage\n\u2502       \u2514\u2500\u2500 setup.py\n\u251c\u2500\u2500 local  (SAGE_LOCAL)   Installation hierarchy for non-Python packages\n\u2502   \u251c\u2500\u2500 bin               Executables\n\u2502   \u251c\u2500\u2500 include           C/C++ headers\n\u2502   \u251c\u2500\u2500 lib               Shared libraries, architecture-dependent data\n\u2502   \u251c\u2500\u2500 share             Databases, architecture-independent data, docs\n\u2502   \u2502   \u2514\u2500\u2500 doc           Viewable docs of Sage and of some components\n\u2502   \u2514\u2500\u2500 var\n\u2502       \u251c\u2500\u2500 lib/sage\n\u2502       \u2502   \u251c\u2500\u2500 installed/\n\u2502       \u2502   \u2502             Records of installed non-Python packages\n\u2502       \u2502   \u251c\u2500\u2500 scripts/  Scripts for uninstalling installed packages\n\u2502       \u2502   \u2514\u2500\u2500 venv-python3.9  (SAGE_VENV)\n\u2502       \u2502       \u2502         Installation hierarchy (virtual environment)\n\u2502       \u2502       \u2502         for Python packages\n\u2502       \u2502       \u251c\u2500\u2500 bin/  Executables and installed scripts\n\u2502       \u2502       \u251c\u2500\u2500 lib/python3.9/site-packages/\n\u2502       \u2502       \u2502         Python modules/packages are installed here\n\u2502       \u2502       \u2514\u2500\u2500 var/lib/sage/\n\u2502       \u2502           \u2514\u2500\u2500 wheels/\n\u2502       \u2502                 Python wheels for all installed Python packages\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 tmp/sage/     Temporary files when building Sage\n\u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 install.log       Full install log\n\u2502   \u2514\u2500\u2500 pkgs              Build logs of individual packages\n\u2502       \u251c\u2500\u2500 alabaster-0.7.12.log\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zn_poly-0.9.2.log\n\u251c\u2500\u2500 m4                    M4 macros for generating the configure script\n\u2502   \u2514\u2500\u2500 *.m4\n\u251c\u2500\u2500 Makefile              Running \"make\" uses this file\n\u251c\u2500\u2500 prefix -> SAGE_LOCAL  Convenience symlink to the installation tree\n\u251c\u2500\u2500 README.md             This file\n\u251c\u2500\u2500 sage                  Script to start Sage\n\u251c\u2500\u2500 src                   Monolithic Sage library source tree\n\u2502   \u251c\u2500\u2500 bin/              Scripts that Sage uses internally\n\u2502   \u251c\u2500\u2500 doc/              Sage documentation sources\n\u2502   \u2514\u2500\u2500 sage/             The Sage library source code\n\u251c\u2500\u2500 upstream              Source tarballs of packages\n\u2502   \u251c\u2500\u2500 Babel-2.9.1.tar.gz\n\u2502   \u2026\n\u2502   \u2514\u2500\u2500 zn_poly-0.9.2.tar.gz\n\u251c\u2500\u2500 venv -> SAGE_VENV     Convenience symlink to the virtual environment\n\u2514\u2500\u2500 VERSION.txt\n```\nFor more details see [our Developer's Guide](https://doc.sagemath.org/html/en/developer/coding_basics.html#files-and-directory-structure).\n\nBuild System\n------------\n\nThis is a brief summary of the Sage software distribution's build system.\nThere are two components to the full Sage system--the Sage Python library\nand its associated user interfaces, and the larger software distribution of\nSage's main dependencies (for those dependencies not supplied by the user's\nsystem).\n\nSage's Python library is built and installed using a `setup.py` script as is\nstandard for Python packages (Sage's `setup.py` is non-trivial, but not\nunusual).\n\nMost of the rest of the build system is concerned with building all of Sage's\ndependencies in the correct order in relation to each other.  The dependencies\nincluded by Sage are referred to as SPKGs (i.e. \"Sage Packages\") and are listed\nunder `build/pkgs`.\n\nThe main entrypoint to Sage's build system is the top-level `Makefile` at the\nroot of the source tree.  Unlike most normal projects that use autoconf (Sage\ndoes as well, as described below), this `Makefile` is not generated.  Instead,\nit contains a few high-level targets and targets related to bootstrapping the\nsystem.  Nonetheless, we still run `make <target>` from the root of the source\ntree--targets not explicitly defined in the top-level `Makefile` are passed\nthrough to another Makefile under `build/make/Makefile`.\n\nThe latter `build/make/Makefile` *is* generated by an autoconf-generated\n`configure` script, using the template in `build/make/Makefile.in`.  This\nincludes rules for building the Sage library itself (`make sagelib`), and for\nbuilding and installing each of Sage's dependencies (e.g. `make gf2x`).\n\nThe `configure` script itself, if it is not already built, can be generated by\nrunning the `bootstrap` script (the latter requires _GNU autotools_ being installed).\nThe top-level `Makefile` also takes care of this automatically.\n\nTo summarize, running a command like `make python3` at the top-level of the\nsource tree goes something like this:\n\n1.  `make python3`\n2.  run `./bootstrap` if `configure` needs updating\n3.  run `./configure` with any previously configured options if `build/make/Makefile`\n    needs updating\n4.  change directory into `build/make` and run the `install` script--this is\n    little more than a front-end to running `make -f build/make/Makefile python3`,\n    which sets some necessary environment variables and logs some information\n5.  `build/make/Makefile` contains the actual rule for building `python3`; this\n    includes building all of `python3`'s dependencies first (and their\n    dependencies, recursively); the actual package installation is performed\n    with the `sage-spkg` program\n\nRelocation\n----------\n\nIt is not supported to move the `SAGE_ROOT` or `SAGE_LOCAL` directory\nafter building Sage.  If you do move the directories, you will have to\nrun ``make distclean`` and build Sage again from scratch.\n\nFor a system-wide installation, you have to build Sage as a \"normal\" user\nand then as root you can change permissions. See the [Installation Guide](https://doc.sagemath.org/html/en/installation/source.html#installation-in-a-multiuser-environment)\nfor further information.\n\nRedistribution\n--------------\n\nYour local Sage install is almost exactly the same as any \"developer\"\ninstall. You can make changes to documentation, source, etc., and very\neasily package the complete results up for redistribution just like we\ndo.\n\n1.  To make a binary distribution with your currently installed packages,\n    visit [sagemath/binary-pkg](https://github.com/sagemath/binary-pkg).\n\n2.  To make your own source tarball of Sage, type:\n\n        $ make dist\n\n    The result is placed in the directory `dist/`.\n\nChanges to Included Software\n----------------------------\n\nAll software included with Sage is copyrighted by the respective authors\nand released under an open source license that is __GPL version 3 or\nlater__ compatible. See [COPYING.txt](./COPYING.txt) for more details.\n\nSources are in unmodified (as far as possible) tarballs in the\n`upstream/` directory. The remaining description, version\ninformation, patches, and build scripts are in the accompanying\n`build/pkgs/<packagename>` directory. This directory is\npart of the Sage git repository.\n", "release_dates": []}, {"name": "sage-numerical-backends-coin", "description": "COIN-OR mixed integer linear programming backend for SageMath - can be installed on top of distributions providing SageMath. See also https://github.com/sagemath/sage-numerical-backends-gurobi and https://github.com/sagemath/sage-numerical-backends-cplex", "language": "Cython", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "# sage-numerical-backends-coin: COIN-OR mixed integer linear programming backend for SageMath\n\n[![PyPI](https://img.shields.io/pypi/v/sage-numerical-backends-coin)](https://pypi.org/project/sage-numerical-backends-coin/ \"PyPI: sage-numerical-backends-coin\")\n[![GitHub Workflow Status](https://github.com/mkoeppe/sage-numerical-backends-coin/workflows/Build%20and%20test%20Python%20package/badge.svg)](https://github.com/mkoeppe/sage-numerical-backends-coin/actions \"GitHub Actions: sage-numerical-backends-coin\")\n\n`CoinBackend` has previously been available as part of the [SageMath](http://www.sagemath.org/) source tree,\nfrom which it is built as an \"optional extension\" when the `cbc` Sage package is installed.\n\nHowever, it is not available in binary distributions such as:\n- the Sage binary distribution (which does not package any optional packages),\n- homebrew (which just uses the Sage binary distribution),\n- Ubuntu (bionic 18.04LTS and several newer versions ship versions of SageMath, with various optional packages including CBC, but not the optional extension module CoinBackend),\n- conda-forge (which ships SageMath and CBC but not the optional extension).\n- Fedora\n\nThe present standalone Python package `sage-numerical-backends-coin` has been created from the SageMath sources, version 9.0.beta10.  It can be installed on top of various Sage installations using pip, including all of the above, including older versions of Sage such as 8.1 (as shipped by Ubuntu bionic 18.04LTS).\n\nSage ticket https://trac.sagemath.org/ticket/28175 uses this package to remove the in-tree version of `CoinBackend`.\n\n## Installation\n\nCBC can either be installed using its Sage package using\n\n    $ sage -i cbc\n\nor any of the methods explained at https://github.com/coin-or/Cbc .\n\nThis package finds the CBC installation by means of ``pkgconfig``.\n\nInstall this package from PyPI using\n\n    $ sage -python -m pip install sage-numerical-backends-coin\n\nor from GitHub using\n\n    $ sage -python -m pip install git+https://github.com/mkoeppe/sage-numerical-backends-coin\n\n(See [`.github/workflows/build.yml`](.github/workflows/build.yml) for details about package prerequisites on various systems.)\n\n## Using this package\n\nTo obtain a solver (backend) instance:\n\n    sage: from sage_numerical_backends_coin.coin_backend import CoinBackend\n    sage: CoinBackend()\n    <sage_numerical_backends_coin.coin_backend.CoinBackend object at 0x7fb72c2c7528>\n\nEquivalently:\n\n    sage: from sage_numerical_backends_coin.coin_backend import CoinBackend\n    sage: from sage.numerical.backends.generic_backend import get_solver\n    sage: get_solver(solver=CoinBackend)\n    <sage_numerical_backends_coin.coin_backend.CoinBackend object at 0x7fe21ffbe2b8>\n\nTo use this solver (backend) with [`MixedIntegerLinearProgram`](http://doc.sagemath.org/html/en/reference/numerical/sage/numerical/mip.html):\n\n    sage: from sage_numerical_backends_coin.coin_backend import CoinBackend\n    sage: M = MixedIntegerLinearProgram(solver=CoinBackend)\n    sage: M.get_backend()\n    <sage_numerical_backends_coin.coin_backend.CoinBackend object at 0x7fb72c2c7868>\n\nTo make it available as the solver named `'Coin'`, we need to make the new module\nknown as `sage.numerical.backends.coin_backend` (note dots, not underscores), using\nthe following commands:\n\n    sage: import sage_numerical_backends_coin.coin_backend as coin_backend, sage.numerical.backends as backends, sys\n    sage: sys.modules['sage.numerical.backends.coin_backend'] = backends.coin_backend = coin_backend\n\nIf these commands are executed in a Sage session before any `MixedIntegerLinearProgram` is created, then\nthe new `'Coin'` solver wins over the `'GLPK'` solver in the selection of the default MIP backend.\nTo select the `'Coin'` solver explicitly as the default MIP backend, additionally use the following command.\n\n    sage: default_mip_solver('Coin')\n\nTo make these settings permanent, add the above 2 + 1 commands to your `~/.sage/init.sage` file.\nNote that this setting will not affect doctesting (`sage -t`) because this file is ignored in doctesting mode.\n\n## Running doctests\n\nTo run the (limited) testsuite of this package, use:\n\n    $ sage setup.py test\n\nTo run the Sage testsuite with the default MIP solver set to the backend provided by this package, use:\n\n    $ sage setup.py check_sage_testsuite\n\n## Running tests with tox\n\nThe doctests can also be invoked using `tox`:\n\n    $ tox -e local\n    $ tox -e local-sage_testsuite\n\nIf you have `docker` installed, more tests can be run:\n\n    $ tox -e docker-sage_binary-cbc_coinbrew\n\nSee `tox.ini` for the available options.\n\n## Overriding the default solver by patching the Sage installation\n\nAnother method is to patch the module in permanently to the sage installation (at your own risk).\nThis method will affect doctesting.\n\n    $ sage -c 'import os; import sage.numerical.backends as dm; import sage_numerical_backends_coin.coin_backend as sm; s = sm.__file__; f = os.path.basename(s); d = os.path.join(dm.__path__[0], f); (os.path.exists(d) or os.path.lexists(d)) and os.remove(d); os.symlink(s, d);'\n\nOr use the script [`patch_into_sage_module.py`](patch_into_sage_module.py) in the source distribution that does the same:\n\n    $ sage -c 'load(\"patch_into_sage_module.py\")'\n    Success: Patched in the module as sage.numerical.backends.coin_backend\n\nVerify with [`check_get_solver_with_name.py`](check_get_solver_with_name.py) that the patching script has worked:\n\n    $ sage -c 'load(\"check_get_solver_with_name.py\")'\n    Success: get_solver(solver='coin') gives <sage_numerical_backends_coin.coin_backend.CoinBackend object at 0x7f8f20218528>\n", "release_dates": ["2019-12-24T16:39:13Z"]}, {"name": "sage-numerical-backends-cplex", "description": "CPLEX mixed integer linear programming backend for SageMath - can be installed on top of distributions providing SageMath. See also https://github.com/sagemath/sage-numerical-backends-coin and https://github.com/sagemath/sage-numerical-backends-gurobi", "language": "Cython", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "# sage-numerical-backends-cplex: CPLEX mixed integer linear programming backend for SageMath\n\n[![PyPI](https://img.shields.io/pypi/v/sage-numerical-backends-cplex)](https://pypi.org/project/sage-numerical-backends-cplex/ \"PyPI: sage-numerical-backends-cplex\")\n\nPrior to SageMath 9.1, `CPLEXBackend` was available as part of the [SageMath](http://www.sagemath.org/) source tree,\nfrom which it would be built as an \"optional extension\" if the proprietary CPLEX library and header files have been symlinked into `$SAGE_LOCAL` manually.\n\nBecause of the proprietary nature of the CPLEX software, `CPLEXBackend` is not available in any binary distributions of SageMath.\n\nThe present standalone Python package `sage-numerical-backends-cplex` has been created from the SageMath sources, version 9.0.beta10; the in-tree version of `CPLEXBackend` has been removed in Sage ticket https://trac.sagemath.org/ticket/28175.  \n\nThe package can be installed on top of various Sage installations using pip, including older versions of Sage such as 8.1 (as shipped by Ubuntu bionic 18.04LTS).  SageMath 9.1 and later makes the package available as an optional Sage package (SPKG).\n\n## Installation of CPLEX\n\n[CPLEX](https://www.ibm.com/products/ilog-cplex-optimization-studio)\nis proprietary software.  It is available for free for researchers and students through IBM's Academic Initiative.\n\nInstall CPLEX according to the instructions on the website.\n\nTo prepare installation of `sage-numerical-backends-cplex`, find the installation directory of your ILOG CPLEX Studio installation, which contains subdirectories ``cplex``, ``doc``, ``opl``, etc. Set the environment variable ``CPLEX_HOME`` to this directory; for example using the following shell command (on macOS):\n\n        $ export CPLEX_HOME=/Applications/CPLEX_Studio1210\n\nor (on Linux):\n\n        $ export CPLEX_HOME=/opt/ibm/ILOG/CPLEX_Studio1210\n\nNow verify that the CPLEX binary that you will find in the subdirectory ``cplex/bin/ARCH_OS`` starts correctly, for example::\n\n    $ $CPLEX_HOME/cplex/bin/x86-64_osx/cplex\n    Welcome to IBM(R) ILOG(R) CPLEX(R) Interactive Optimizer...\n\n(Alternatively, set compiler/linker flags (or use symbolic links) so that `cplex.h` and `libcplex.so` can be found.)\n\n## Installation of this package in SageMath 9.1 or later\n\nThis package is prepared as an optional Sage package (SPKG) in SageMath 9.1 or later.\nTo install it, use\n\n        $ sage -i sage_numerical_backends_cplex\n\nAfter a successful installation, Sage will automatically make this new backend\nthe default MIP solver.\n\n## Installation of this package in older versions of SageMath\n\nInstall this package from PyPI using\n\n    $ sage -python -m pip install sage-numerical-backends-cplex\n\nor from a checked out source tree using\n\n    $ sage -python -m pip install .\n\nor from GitHub using\n\n    $ sage -python -m pip install git+https://github.com/mkoeppe/sage-numerical-backends-cplex\n\n(See [`build.yml` in the related package sage-numerical-backends-coin package](https://github.com/mkoeppe/sage-numerical-backends-coin/blob/master/.github/workflows/build.yml) for details about package prerequisites on various systems.)\n\n### Using this package in older versions of SageMath\n\nTo obtain a solver (backend) instance:\n\n    sage: from sage_numerical_backends_cplex.cplex_backend import CPLEXBackend\n    sage: CPLEXBackend()\n    <sage_numerical_backends_cplex.cplex_backend.CPLEXBackend object at 0x7fb72c2c7528>\n\nEquivalently:\n\n    sage: from sage_numerical_backends_cplex.cplex_backend import CPLEXBackend\n    sage: from sage.numerical.backends.generic_backend import get_solver\n    sage: get_solver(solver=CPLEXBackend)\n    <sage_numerical_backends_cplex.cplex_backend.CPLEXBackend object at 0x7fe21ffbe2b8>\n\nTo use this solver (backend) with [`MixedIntegerLinearProgram`](http://doc.sagemath.org/html/en/reference/numerical/sage/numerical/mip.html):\n\n    sage: from sage_numerical_backends_cplex.cplex_backend import CPLEXBackend\n    sage: M = MixedIntegerLinearProgram(solver=CPLEXBackend)\n    sage: M.get_backend()\n    <sage_numerical_backends_cplex.cplex_backend.CPLEXBackend object at 0x7fb72c2c7868>\n\nTo make it available as the solver named `'CPLEX'`, we need to make the new module\nknown as `sage.numerical.backends.cplex_backend` (note dots, not underscores), using\nthe following commands:\n\n    sage: import sage_numerical_backends_cplex.cplex_backend as cplex_backend, sage.numerical.backends as backends, sys\n    sage: sys.modules['sage.numerical.backends.cplex_backend'] = backends.cplex_backend = cplex_backend\n\nIf these commands are executed in a Sage session before any `MixedIntegerLinearProgram` is created, then\nthe new `'CPLEX'` solver wins over the `'GLPK'` solver in the selection of the default MIP backend.\nTo select the `'CPLEX'` solver explicitly as the default MIP backend, additionally use the following command.\n\n    sage: default_mip_solver('CPLEX')\n\nTo make these settings permanent, add the above 2 + 1 commands to your `~/.sage/init.sage` file.\nNote that this setting will not affect doctesting (`sage -t`) because this file is ignored in doctesting mode.\n\n### Overriding the default solver in older versions of SageMath by patching the Sage installation\n\nAnother method is to patch the module in permanently to the sage installation (at your own risk).\nThis method will affect doctesting.\n\n    $ sage -c 'import os; import sage.numerical.backends as dm; import sage_numerical_backends_cplex.cplex_backend as sm; s = sm.__file__; f = os.path.basename(s); d = os.path.join(dm.__path__[0], f); (os.path.exists(d) or os.path.lexists(d)) and os.remove(d); os.symlink(s, d);'\n\nOr use the script [`patch_into_sage_module.py`](patch_into_sage_module.py) in the source distribution that does the same:\n\n    $ sage -c 'load(\"patch_into_sage_module.py\")'\n    Success: Patched in the module as sage.numerical.backends.cplex_backend\n\nVerify with [`check_get_solver_with_name.py`](check_get_solver_with_name.py) that the patching script has worked:\n\n    $ sage -c 'load(\"check_get_solver_with_name.py\")'\n    Success: get_solver(solver='cplex') gives <sage_numerical_backends_cplex.cplex_backend.CPLEXBackend object at 0x7f8f20218528>\n\n## Running doctests\n\nTo run the (limited) testsuite of this package, use:\n\n    $ sage setup.py test\n\nTo run the Sage testsuite with the default MIP solver set to the backend provided by this package, use:\n\n    $ sage setup.py check_sage_testsuite\n\n", "release_dates": []}, {"name": "sage-numerical-backends-gurobi", "description": "Gurobi mixed integer linear programming backend for SageMath - can be installed on top of distributions providing SageMath. See also https://github.com/sagemath/sage-numerical-backends-cplex and https://github.com/sagemath/sage-numerical-backends-coin", "language": "Cython", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "# sage-numerical-backends-gurobi: Gurobi mixed integer linear programming backend for SageMath\n\n[![PyPI](https://img.shields.io/pypi/v/sage-numerical-backends-gurobi)](https://pypi.org/project/sage-numerical-backends-gurobi/ \"PyPI: sage-numerical-backends-gurobi\")\n\n`GurobiBackend` has previously been available as part of the [SageMath](http://www.sagemath.org/) source tree,\nfrom which it is built as an \"optional extension\" if the proprietary Gurobi library and header files have been symlinked into `$SAGE_LOCAL` manually.\n\nBecause of the proprietary nature of the Gurobi software, `GurobiBackend` is not available in any binary distributions of SageMath.\n\nThe present standalone Python package `sage-numerical-backends-gurobi` has been created from the SageMath sources, version 9.0.beta10; the in-tree version of `GurobiBackend` has been removed in [Sage ticket #28175](https://trac.sagemath.org/ticket/28175).  The present package can be installed on top of various Sage installations using `pip`, including older versions of Sage such as 8.1 (as shipped by Ubuntu bionic 18.04LTS).\n\n## Installation of Gurobi\n\nInstall Gurobi according to the instructions on the website,\nwhich includes obtaining a license key.\n\n- On a Linux system, after unpacking the Gurobi archive in the desired location,\n  such as `/opt`, set the environment variable `GUROBI_HOME` to the directory containing the subdirectories `bin`, `lib`, ...:\n\n        $ export GUROBI_HOME=/opt/gurobi900/linux64\n\n  Then adjust your `PATH` (or create symbolic links) so that the interactive Gurobi shell `gurobi.sh` can be found from your `PATH`:\n\n        $ export PATH=\"$GUROBI_HOME/bin:$PATH\"\n\n- On macOS, the Gurobi installer should make the interactive Gurobi shell ``gurobi.sh`` available in `/usr/local/bin` and therefore from your ``PATH``.\n\nVerify this by typing the shell command ``gurobi.sh``::\n\n    $ gurobi.sh\n    Python 3.7.4 (default, Aug 27 2019, 11:27:39)\n    ...\n    Gurobi Interactive Shell (mac64), Version 9.0.0\n    Copyright (c) 2019, Gurobi Optimization, LLC\n    Type \"help()\" for help\n    gurobi>\n\nIf this does not work, adjust your ``PATH`` (or create symbolic links) so\nthat ``gurobi.sh`` is found.\n\n## Installation of this package\n\nThis package finds the Gurobi installation using the `GUROBI_HOME` environment variable.  (On macOS, it suffices to have `gurobi.sh` in your ``PATH``.)\nAn alternative method of build configuration is to set compiler/linker flags appropriately.\n\nIn [SageMath 9.1 and newer](https://wiki.sagemath.org/ReleaseTours/sage-9.1#Easier_installation_of_optional_linear_and_mixed_integer_linear_optimization_backends), this package is available as an optional SPKG and can be installed using\n\n    $ sage -i sage_numerical_backends_gurobi\n\nAlternatively, you can install this package from PyPI using\n\n    $ sage -python -m pip install sage-numerical-backends-gurobi\n\nor from a checked out source tree using\n\n    $ sage -python -m pip install .\n\nor from GitHub using\n\n    $ sage -python -m pip install git+https://github.com/sagemath/sage-numerical-backends-gurobi\n\n(See [`build.yml` in the related package sage-numerical-backends-coin package](https://github.com/sagemath/sage-numerical-backends-coin/blob/master/.github/workflows/build.yml) for details about package prerequisites on various systems.)\n\n## Using this package\n\nTo obtain a solver (backend) instance:\n\n    sage: from sage_numerical_backends_gurobi.gurobi_backend import GurobiBackend\n    sage: GurobiBackend()\n    <sage_numerical_backends_gurobi.gurobi_backend.GurobiBackend object at 0x7fb72c2c7528>\n\nEquivalently:\n\n    sage: from sage_numerical_backends_gurobi.gurobi_backend import GurobiBackend\n    sage: from sage.numerical.backends.generic_backend import get_solver\n    sage: get_solver(solver=GurobiBackend)\n    <sage_numerical_backends_gurobi.gurobi_backend.GurobiBackend object at 0x7fe21ffbe2b8>\n\nTo use this solver (backend) with [`MixedIntegerLinearProgram`](http://doc.sagemath.org/html/en/reference/numerical/sage/numerical/mip.html):\n\n    sage: from sage_numerical_backends_gurobi.gurobi_backend import GurobiBackend\n    sage: M = MixedIntegerLinearProgram(solver=GurobiBackend)\n    sage: M.get_backend()\n    <sage_numerical_backends_gurobi.gurobi_backend.GurobiBackend object at 0x7fb72c2c7868>\n\nTo make it available as the solver named `'Gurobi'`, we need to make the new module\nknown as `sage.numerical.backends.gurobi_backend` (note dots, not underscores), using\nthe following commands:\n\n    sage: import sage_numerical_backends_gurobi.gurobi_backend as gurobi_backend, sage.numerical.backends as backends, sys\n    sage: sys.modules['sage.numerical.backends.gurobi_backend'] = backends.gurobi_backend = gurobi_backend\n\nIf these commands are executed in a Sage session before any `MixedIntegerLinearProgram` is created, then\nthe new `'Gurobi'` solver wins over the `'GLPK'` solver in the selection of the default MIP backend.\nTo select the `'Gurobi'` solver explicitly as the default MIP backend, additionally use the following command.\n\n    sage: default_mip_solver('Gurobi')\n\nTo make these settings permanent, add the above 2 + 1 commands to your `~/.sage/init.sage` file.\nNote that this setting will not affect doctesting (`sage -t`) because this file is ignored in doctesting mode.\n\n## Running doctests\n\nTo run the (limited) testsuite of this package, use:\n\n    $ sage setup.py test\n\nIf no Gurobi license is available, the testing is skipped without error.\n\nTo run the Sage testsuite with the default MIP solver set to the backend provided by this package, use:\n\n    $ sage setup.py check_sage_testsuite\n\nIf no Gurobi license is available, the testing is skipped without error.\n\n## Running tests with tox\n\nThe doctests can also be invoked using `tox`:\n\n    $ tox -e local\n    $ tox -e local check_sage_testsuite.py\n\nTesting multiple installed Gurobi versions in parallel (see `tox.ini`):\n\n    $ tox -p auto\n\n## Overriding the default solver by patching the Sage installation\n\nAnother method is to patch the module in permanently to the sage installation (at your own risk).\nThis method will affect doctesting.\n\n    $ sage -c 'import os; import sage.numerical.backends as dm; import sage_numerical_backends_gurobi.gurobi_backend as sm; s = sm.__file__; f = os.path.basename(s); d = os.path.join(dm.__path__[0], f); (os.path.exists(d) or os.path.lexists(d)) and os.remove(d); os.symlink(s, d);'\n\nOr use the script [`patch_into_sage_module.py`](patch_into_sage_module.py) in the source distribution that does the same:\n\n    $ sage -c 'load(\"patch_into_sage_module.py\")'\n    Success: Patched in the module as sage.numerical.backends.gurobi_backend\n\nVerify with [`check_get_solver_with_name.py`](check_get_solver_with_name.py) that the patching script has worked:\n\n    $ sage -c 'load(\"check_get_solver_with_name.py\")'\n    Success: get_solver(solver='gurobi') gives <sage_numerical_backends_gurobi.gurobi_backend.GurobiBackend object at 0x7f8f20218528>\n", "release_dates": []}, {"name": "sage-package", "description": "Utilities for authoring packages for SageMath", "language": "HTML", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": null, "release_dates": []}, {"name": "sage-patchbot", "description": "Sage Patchbot", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# PATCHBOT\n\nThe patchbot only needs a Sage source install (clone of git repository)\nand is started with\n\n    `python3 -m sage_patchbot.patchbot --sage-root=XXX [other options]`\n\nType `--help` for a list of options, though most configuration is done via an optional JSON config file.\n\nFor more documentation on running a patchbot, see [this page][1].\n\n[1]: https://wiki.sagemath.org/patchbot\n\n# SERVER\n\nThe server needs a Python with Flask and mongodb installed.\n", "release_dates": ["2015-05-21T19:46:02Z", "2015-05-18T12:24:18Z", "2015-05-17T16:57:59Z", "2015-04-15T15:36:43Z", "2015-04-05T18:25:50Z", "2015-03-27T12:15:16Z"]}, {"name": "sage-release-management", "description": "Utility scripts for release managements", "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "sage-shell-mode", "description": "Emacs front end for SageMath", "language": "Emacs Lisp", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": null, "release_dates": []}, {"name": "sage-wheels", "description": "Prebuilt wheels of the SageMath distribution", "language": null, "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "# sage-wheels\nPrebuilt wheels of the SageMath distribution\n\nThis is the deployment target of wheels built using https://trac.sagemath.org/ticket/31396\n\n", "release_dates": ["2022-01-11T22:50:00Z", "2022-01-17T00:36:05Z", "2021-06-07T04:57:07Z", "2021-04-07T03:08:01Z", "2021-04-04T01:24:13Z", "2021-05-11T07:01:00Z"]}, {"name": "sage-windows", "description": "Build tools for the Sagemath Windows installer", "language": "Shell", "license": null, "readme": "SageMath for Windows\r\n====================\r\n\r\nBuild files and instructions for the Cygwin-compatible build of Sage and\r\nits executable installer and auxiliary files.\r\n\r\nYou can find the latest release (for now) at https://github.com/sagemath/sage-windows/releases\r\n\r\nOccasionally new versions of SageMath for Windows are released independently\r\nof the Sage version (e.g. to make improvements with the Windows installer\r\nitself).  The changes between installer versions are listed in the\r\n[changelog](CHANGES.md).\r\n\r\nInstructions\r\n============\r\n\r\nThis repository should be run from within Cygwin.\r\n\r\nThis Cygwin requires the 'wget' and 'python' packages.\r\n", "release_dates": ["2021-08-25T23:12:58Z", "2021-01-05T10:10:45Z", "2020-11-28T17:51:51Z", "2020-07-29T15:48:57Z", "2020-02-13T17:44:06Z", "2020-01-08T15:13:48Z", "2019-10-10T15:27:11Z", "2019-07-12T14:50:11Z", "2019-07-11T20:11:42Z", "2019-05-06T14:36:41Z", "2019-02-19T12:53:13Z", "2019-01-24T09:28:55Z", "2018-12-28T19:14:13Z", "2018-11-06T09:15:05Z", "2018-09-24T10:01:17Z", "2018-08-10T10:45:19Z", "2018-05-10T20:04:58Z", "2017-12-15T09:39:03Z", "2017-08-07T18:08:10Z"]}, {"name": "sage-workflow", "description": "script(s) to help with the transition to a single Sage repository", "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "sagecell", "description": "The Sage Cell Server---providing a way to embed Sage computations into any web page.", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "This is SageMathCell - a Sage computation web service.\n\nOur mailing list is https://groups.google.com/forum/#!forum/sage-cell\n\n# Security Warning\n\nIf you are going to run a world accessible SageMathCell server, you must understand security implications and should be able to implement reasonable precautions.\n\nThe worker account (which is your own one by default) will be able to execute arbitrary code, which may be malicious. Make **sure** that you are securing the account properly. Working with a professional IT person is a very good idea here. Since the untrusted accounts can be on any computer, one way to isolate these accounts is to host them in a virtual machine that can be reset if the machine is compromised.\n\n\n# Simple Installation\n\nWe assume that you have access to the Internet and can install any needed dependencies. If you need to know more precisely what tools are needed, please consult the scripts for building virtual machine images in [contrib/vm](contrib/vm).\nIn particular, system packages installed in the base container are listed [here](https://github.com/sagemath/sagecell/blob/master/contrib/vm/container_manager.py#L58).\n\n\n1.  Install requirejs:\n\n    ```bash\n    sudo apt-get install npm\n    # On Debian based systems we need to make an alias\n    sudo ln -s /usr/bin/nodejs /usr/bin/node\n    ```\n\n2.  Get and build Sage (`export MAKE=\"make -j8\"` or something similar can speed things up):\n\n    ```bash\n    git clone https://github.com/sagemath/sage.git\n    pushd sage\n    ./bootstrap\n    ./configure --enable-download-from-upstream-url\n    # read messages at the end, follow instructions given there.\n    # possibly install more system packages (using apt-get, if on Debian/Ubuntu)\n    make\n    popd\n    ```\n\n3.  Prepare Sage for SageMathCell:\n\n    ```bash\n    sage/sage -pip install lockfile\n    sage/sage -pip install paramiko\n    sage/sage -pip install sockjs-tornado\n    sage/sage -pip install sqlalchemy\n    ```\n\n4.  Build SageMathCell:\n\n    ```bash\n    git clone https://github.com/sagemath/sagecell.git\n    pushd sagecell\n    ../sage/sage -sh -c make\n    ```\n    \nTo build just the Javascript components, from the `sagecell` directory run\n\n```bash\nmake static/embedded_sagecell.js\n```\n\nBy default, Javascript dependencies are copied from an existing Sage install. To fetch dependencies\nfrom Github instead, you can run\n\n```bash\nexport FETCH_SAGE_DEPS=yes\nmake static/embedded_sagecell.js\n```\n\n# Configuration\n\n1.  Go into the `sagecell` directory (you are there in the end of the above instructions).\n2.  Copy `config_default.py` to `config.py`. (Or fill `config.py` only with entries that you wish to change from default values.)\n3.  Edit `config.py` according to your needs. Of particular interest are `host` and `username` entries of the `provider_info` dictionary: you should be able to SSH to `username@host` *without typing in a password*. For example, by default, it assumes you can do `ssh localhost` without typing in a password. Unless you are running a private and **firewalled** server for youself, you\u2019ll want to change this to a more restrictive account; otherwise **anyone will be able to execute any code under your username**. You can set up a passwordless account using SSH: type \u201cssh passwordless login\u201d into Google to find lots of guides for doing this, like http://www.debian-administration.org/articles/152. You may also wish to adjust `db_config[\"uri\"]` (make the database files readable *only* by the trusted account).\n4.  You may want to adjust `log.py` to suit your needs and/or adjust system configuration. By default logging is done via syslog which handles multiple processes better than plain files.\n5.  Start the server via\n\n    ```bash\n    ../sage/sage web_server.py [-p <PORT_NUMBER>]\n    ```\n\n    where the default `<PORT_NUMBER>` is `8888` and go to `http://localhost:<PORT_NUMBER>` to use the Sage Cell server.\n\n    When you want to shut down the server, press `Ctrl-C` in the same terminal.\n\n\n# Javascript Development\n\nJavascript source files are compiled using [Webpack](https://webpack.js.org/). Sagecell depends on source files copied\nfrom the Jupyter notebook project. To start development navigate to the `sagecell` source directory and run\n\n```bash\nnpm install\nnpm run build:deps\n```\n\nAfter this, all dependencies will be located in the `build/vendor` directory. You can now run\n\n```bash\nnpm run build\n```\n\nto build `build/embedded_sagecell.js`\n\nor\n\n```bash\nnpm run watch\n```\n\nto build `build/embedded_sagecell.js` and watch files for changes. If a file is changed, `embedded_sagecell.js` will be automatically\nrebuilt.\n\n# License\n\nSee the [LICENSE.txt](LICENSE.txt) file for terms and conditions for usage and a\nDISCLAIMER OF ALL WARRANTIES.\n\n# Browser Compatibility\n\nSageMathCell is designed to be compatible with recent versions of:\n\n* Chrome\n* Firefox\n* Internet Explorer\n* Opera\n* Safari\n\nIf you notice issues with any of these browsers, please let us know.\n", "release_dates": []}, {"name": "sagelib", "description": "Git mirror of http://hg.sagemath.org/sage-main/", "language": "Python", "license": null, "readme": "This is the SAGE source install.", "release_dates": []}, {"name": "sagemath.github.io", "description": "www.sagemath.org files - edit the https://github.com/sagemath/website repository, not this one here!", "language": "HTML", "license": null, "readme": null, "release_dates": []}, {"name": "sagenb", "description": "Sage Notebook (flask), docs in $SAGE_LOCAL/share/doc/sagenb/index.html", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": ["2019-11-08T22:03:35Z", "2019-02-01T20:23:32Z", "2018-11-05T15:50:17Z", "2018-10-17T22:36:38Z", "2018-10-17T15:11:07Z", "2018-06-10T22:48:48Z", "2018-05-22T16:41:46Z", "2017-06-02T22:53:59Z", "2017-05-24T00:08:59Z", "2017-05-10T14:08:59Z"]}, {"name": "sagesmc", "description": "The git repo for the SageMathCloud's system-wide Sage install", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "    Sage: Open Source Mathematical Software\n\n       \"Creating a Viable Open Source Alternative to\n          Magma, Maple, Mathematica, and MATLAB\"\n\n    Copyright (C) 2005-2012 William Stein and the Sage Development Team\n\n        http://www.sagemath.org\n\n    Over 200 people have contributed code to Sage. Please see the\n    following web page for a list:\n\n        http://www.sagemath.org/development-map.html\n\n    In many cases, documentation for modules and functions list the\n    authors.\n\n\nGETTING STARTED\n---------------\n\nThis README.txt contains build instructions for Sage. If you downloaded\na binary, you do not need to do anything; just execute:\n\n    ./sage\n\nfrom the command line. If you downloaded the sources, please read below\non how to build Sage and work around common issues.\n\nIf you have questions or encounter problems, please do not hesitate\nto email the sage-support mailing list:\n\n    http://groups.google.com/group/sage-support\n\n\nSUPPORTED PLATFORMS\n-------------------\n\nSage fully supports several Linux distributions, recent versions of\nMac OS X, as well as a number of Solaris and OpenSolaris releases.\n\nThere should be no serious bugs in an officially released version of\nSage on any of the fully supported platforms, but any major issues with\na particular release will be documented on an errata page:\n\n    http://wiki.sagemath.org/errata\n\nPorts are in progress to some other, less common platforms. The list of\nsupported platforms and their current statuses are given at the\nfollowing web page:\n\n    http://wiki.sagemath.org/SupportedPlatforms\n\nIf you are interested in helping port Sage to a new platform, please let\nus know at the sage-devel mailing list:\n\n    http://groups.google.com/group/sage-devel\n\n\nQUICK INSTRUCTIONS TO BUILD FROM SOURCE\n---------------------------------------\n\nThe following steps briefly outline the process of building Sage from\nsource. More detailed instructions, including how to build faster on\nmulticore machines are contained later in this README and in the\nInstallation Guide:\n\n    http://www.sagemath.org/doc/installation\n\n1. Make sure you have the dependencies and 3 GB of free disk space.\n\n   Linux: gcc, make, m4, perl, ranlib, and tar.\n   (install these using your package manager)\n   On recent Debian or Ubuntu systems (in particular Ubuntu 12.04\n   \"Precise\"), you need the dpkg-dev package.\n\n   OS X: Xcode. Make sure you have installed the most recent version\n   of Xcode. With recent versions of OS X (OS X Lion or later), you\n   can install Xcode for free from the App Store. For pre-Lion\n   versions of OS X, you can download Xcode from\n   http://developer.apple.com/downloads/.\n\n   With OS X, you also need to install the \"command line tools\". When\n   using OS X Mavericks, after installing Xcode, run this command from\n   a terminal window:\n\n      xcode-select --install\n\n   Then click \"Install\" in the pop-up window.\n\n   When using OS X Mountain Lion or earlier, you need to install the\n   command line tools from Xcode: run Xcode; then from the File\n   menu, choose \"Preferences\", then the \"Downloads\" tab, and then\n   \"Install\" the Command Line Tools.\n\n   Other platforms: See detailed instructions below.\n\n2. Extract the tarball:\n\n       tar xvf sage-*.tar\n\n3. cd into the Sage directory and type make:\n\n       cd sage-*/\n       make\n\n   That's it! Everything is automatic and non-interactive. The build\n   should work fine on all fully supported platforms. If it does not, we\n   want to know!\n\n\nENVIRONMENT VARIABLES\n---------------------\n\nThere are a lot of environment variables which control the install\nprocess of Sage, see:\n\n    http://sagemath.org/doc/installation/source.html#environment-variables\n\n\nSELINUX\n--------\n\nOn Linux, if you get this error message:\n\n    Error: cannot restore segment prot after reloc: Permission denied\n\nthe problem is probably related to SELinux. See the following URL for\nfurther information:\n\n    http://www.exelisvis.com/Support/HelpArticleDetail/ArticleId/3092.aspx\n\n\nIMPLEMENTATION\n--------------\n\nSage has significant components written in the following languages:\nC/C++, Python, Cython, Lisp, and Fortran. Lisp (ECL), Python, and Cython\nare built as part of Sage and a GNU Fortran (gfortran) binary is\nincluded (OS X only), so you do not need them in order to build Sage.\n\n\nMORE DETAILED INSTRUCTIONS TO BUILD FROM SOURCE\n-----------------------------------------------\n\n1. Make sure you have about 3 GB of free disk space.\n\n2. Install build dependencies.\n\n   Linux: See quick instructions above.\n\n   OS X: Make sure you have XCode version >= 2.4, i.e. \"gcc -v\" should\n   output build >= 5363. If you don't, go to:\n\n       http://developer.apple.com/\n\n   sign up, and download the free XCode package. Only OS X >= 10.4 is\n   supported.\n\n   Solaris and OpenSolaris: Building Sage on these platforms is more\n   tricky than on Linux or OS X. For details on how to build Sage on\n   these platforms, see:\n\n       http://wiki.sagemath.org/solaris\n\n   Windows: Not supported. A solution is to download and install\n   VirtualBox, install Linux into it, etc.\n\n   NOTE: On some operating systems, it might be necessary to install\n   gas/as, gld/ld, gnm/nm. On most platforms, these are automatically\n   installed when you install the programs listed above.\n\n3. Extract the Sage source tarball and cd into a directory with no\n   spaces in it. If you have a machine with 4 processors, say, type\n   the following to configure the build script to perform a parallel\n   compilation of Sage using 4 jobs:\n\n       export MAKE=\"make -j4\"\n\n   (With 4 processors, you might also consider \"-j5\" or \"-j6\" --\n   building with more jobs than CPU cores can speed things up.)\n   You might in addition pass a \"-l\" flag to \"make\": this\n   sets a load limit, so for example if you execute\n\n       export MAKE=\"make -j4 -l5.5\"\n\n   then \"make\" won't start more than one job at a time if the system\n   load average is above 5.5.  See\n   http://www.gnu.org/software/make/manual/make.html#Options-Summary\n   and http://www.gnu.org/software/make/manual/make.html#Parallel.\n\n   If you want to run the test suite for each individual spkg as it is\n   installed, type:\n\n       export SAGE_CHECK=\"yes\"\n\n   before starting the Sage build. This will run each test suite and\n   will raise an error if any failures occur. Python's test suite has\n   been disabled by default, because it causes failures on most\n   systems. To renable the Python testsuite, set the environment\n   variable SAGE_CHECK_PACKAGES to \"python\".\n\n   To start the build, type:\n\n       make\n\n4. Wait about 1 hour to 14 days, depending on your computer (it took\n   about 2 weeks to build Sage on the T-Mobile G1 Android cell phone).\n\n5. Type \"./sage\" to try it out.\n\n6. OPTIONAL: Start Sage and run the command\n\n       install_scripts(\"/usr/local/bin/\")   # change /usr/local/bin/\n\n   Type \"install_scripts?\" in Sage for more details about what this\n   command does.\n\n7. OPTIONAL: Type \"make ptest\" to test all examples in the documentation\n   (over 93,000 lines of input!) -- this takes from 30 minutes to\n   several hours. Don't get too disturbed if there are 2 to 3 failures,\n   but always feel free to email the section of logs/ptest.log that\n   contains errors to the sage-support mailing list. If there are\n   numerous failures, there was a serious problem with your build.\n\n8. OPTIONAL: If you want to (try to) build the documentation, run:\n\n       sage --docbuild --help\n\n   for instructions. The HTML version of the documentation is built\n   during the compilation process of Sage and resides in the directory:\n\n       $SAGE_ROOT/devel/sage/doc/output/html/\n\n   LaTeX is required to build the PDF version of the documentation.\n\n9. OPTIONAL: It is highly recommended that you install the optional GAP\n   database by typing:\n\n       ./sage --optional\n\n   then installing (with \"./sage -i\") the package whose name begins with\n   database_gap. This will download the package from\n   sage.math.washington.edu and install it. While you're at it, you\n   might install other databases of interest to you.\n\n10. OPTIONAL: It is recommended that you have both LaTeX and the\n    ImageMagick tools (e.g. the \"convert\" command) installed since some\n    plotting functionality benefits from it.\n\n11. OPTIONAL: Read this if you are intending to run a Sage notebook\n    server for multiple users. For security (i.e., to run\n    \"notebook(secure=True)\") you may wish users to access the server\n    using the HTTPS protocol. You also may want to use OpenID for user\n    authentication. The first of these requires you to install\n    pyOpenSSL, and they both require OpenSSL. If you have OpenSSL and\n    the OpenSSL development headers installed on your system, you can\n    install pyOpenSSL by building Sage and then typing\n\n        ./sage -i pyopenssl\n\n    Note that this command requires internet access.  Alternatively,\n    \"make ssl\" builds Sage and installs pyOpenSSL.  If you are missing\n    either OpenSSL or OpenSSL's development headers, you can install a\n    local copy of both into your Sage installation first. Ideally,\n    this should be done before installing Sage; otherwise, you should\n    at least rebuild Sage's Python, and ideally any part of Sage\n    relying on it. So the procedure is as follows (again, with a\n    computer connected to the internet). Starting from a fresh Sage\n    tarball:\n\n        ./sage -i patch\n        ./sage -i openssl\n        make ssl\n\n    Alternatively, if you've already built Sage:\n\n        ./sage -i openssl\n        ./sage -f python   # rebuilds Python\n        SAGE_UPGRADING=yes make ssl\n\n    The third line will rebuild all parts of Sage that depend on\n    Python; this can take a while.\n\nPROBLEMS\n--------\n\nIf you have problems building Sage, check the Sage Installation Guide,\nand also note the following.  Each separate component of Sage is\ncontained in an spkg; these are stored in spkg/standard/.  As each one\nis built, a build log is stored in logs/pkgs/, so you can browse these\nto find error messages.  If an spkg fails to build, the whole build\nprocess will stop soon after, so check the most recent log files\nfirst, or run\n\n   grep -li \"^Error\" logs/pkgs/*\n\nfrom the top-level Sage directory to find log files with error\nmessages in them.  Send (a small part of) the relevant log file to the\nsage-devel mailing list, making sure to include at least some of the\nerror messages; probably someone there will have some helpful\nsuggestions.\n\n\nSUPPORTED COMPILERS\n-------------------\n\nSage includes a GCC (GNU Compiler Collection) package. In order to\nbuild Sage, you need a C compiler which can build GCC and its\nprerequisites. gcc version 4.0.1 or later should probably work. On\nSolaris or OpenSolaris, building with the Sun compiler should also work.\n\nThe GCC package in Sage is not always installed. It is determined\nautomatically whether it needs to be installed. You can override this\nby setting the environment variable SAGE_INSTALL_GCC=yes (to force\ninstallation of GCC) or SAGE_INSTALL_GCC=no (to disable installation of\nGCC). If you don't want to install GCC, you need to have recent\nversions of gcc, g++ and gfortran; moreover, the versions must be equal.\n\nThere are some known problems with old assemblers, in particular when\nbuilding the ECM package. You should ensure that your assembler\nunderstands all instructions for your processor. On Linux, this means\nyou need a recent version of binutils; on OS X you need a recent version\nof XCode.\n\n\nRELOCATION\n----------\n\nYou *should* be able to move the sage-x.y.z/ directory anywhere you\nwant. If you copy the sage script or make a symbolic link to it, you\nshould modify the script to reflect this (as instructed at the top of\nthe script). It is best if the path to Sage does not have any spaces in\nit.\n\nFor a system-wide installation, as root you can move the sage-x.y.z/\ndirectory to a system-wide directory. Afterwards, you need to start up\nSage as root at least once prior to using the system-wide Sage as a\nnormal user. See the Installation Guide for further information on\nperforming a system-wide installation:\n\n    http://www.sagemath.org/doc/installation/source.html#installation-in-a-multiuser-environment\n\nIf you find anything that doesn't work correctly after you moved the\ndirectory, please email the sage-support mailing list.\n\n\nREDISTRIBUTION\n--------------\n\nYour local Sage install is almost exactly the same as any \"developer\"\ninstall. You can make changes to documentation, source, etc., and very\neasily package the complete results up for redistribution just like we\ndo.\n\n1. To make your own source tarball (sage-x.y.z.tar) of Sage, type:\n\n       sage --sdist x.y.z\n\n   where the version is whatever you want.\n\n2. To make a binary distribution with your currently installed packages,\n   type:\n\n       sage --bdist x.y.z\n\n3. To make a binary that will run on the widest range of target\n   machines, set the SAGE_FAT_BINARY environment variable to \"yes\"\n   before building Sage:\n\n       export SAGE_FAT_BINARY=\"yes\"\n       make\n       ./sage --bdist x.y.z-fat\n\nIn all cases, the result is placed in the directory \"$SAGE_ROOT/dist/\".\n\n\nCHANGES TO INCLUDED SOFTWARE\n----------------------------\n\nAll software included with Sage is copyrighted by the respective authors\nand released under an open source license that is \"GPL version 3 or\nlater\" compatible. See the file COPYING.txt for more details.\n\nAlmost every spkg in $SAGE_ROOT/spkg/standard/ is a bzip2-compressed\ntarball (currently, the only exception is the bzip2 spkg itself, which\nis gzip-compressed). You can extract it with:\n\n    tar xvf name-*.spkg\n\nInside the spkg, there is a file SPKG.txt that details all changes made\nto the given package for inclusion with Sage. The inclusion of such a\nfile detailing changes is specifically required by some of the packages\nincluded with Sage (e.g. for GAP).\n", "release_dates": []}, {"name": "sagetex", "description": "embed code, results of computations, and plots from the Sage mathematics software suite (https://www.sagemath.org) into LaTeX documents", "language": "TeX", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# This is the SageTeX package. \n\nIt allows you to embed code, results of\ncomputations, and plots from the Sage mathematics software suite\n(https://www.sagemath.org) into LaTeX documents.\n\n## Using SageTeX\n\nSageTeX is included with Sage, so to use it, you only need to make the\nfile sagetex.sty known to TeX; that file will be in\nSAGE_ROOT/venv/share/texmf/tex/latex/sagetex, along with\ndocumentation and examples. See the Sage tutorial at\nhttps://doc.sagemath.org/html/en/tutorial/sagetex.html \nfor a quick usage introduction, and for complete installation\ninstructions later on the same page at\nhttps://doc.sagemath.org/html/en/tutorial/sagetex.html#sec-sagetex-install\n\nThe complete documentation is in sagetex.pdf, in\nthe SAGE_ROOT/... directory mentioned above.\n\n## Generating SageTeX\n\nIf you want to extract any of SageTeX's files from the .dtx sources, you\ncan do\n\n  0. Run `latex sagetex.ins`\n\nTo regenerate the documentation, do\n\n  1. Run `latex sagetex.dtx`\n  2. Run `sage sagetex.sage`\n  3. Run the indexing commands that the .ins file told you about.\n  4. Run `latex sagetex.dtx` again.\n\nYou can skip step 3 if you don't care about the index. You will need the\npgf and tikz packages installed to typeset the figures.\n\nThe file example.tex has, as you likely guessed, a bunch of examples\nshowing you how this package works. You can compile it using a another\nlatex-sage-latex cycle as in steps 1-2-4 above. Note that example.tex\nincludes some PNG graphics which latex cannot use; to see those, use\npdflatex instead of regular latex or enable the imagemagick option. (See\nthe documentation.)\n\nTo use the SageTeX package with your own documents, see the\n\"Installation\" section of the documentation.\n\n## Contributing to SageTeX\n\nPlease let us know your experience with SageTeX, especially bug\nreports or feature requests, at \nhttps://github.com/sagemath/sagetex/\n\nSageTeX welcomes code contributions, subject to approval by the\nmaintainers.  Release managers should note the instructions at HACKING.md\n\nThis work builds on a lot of work by others; see the CONTRIBUTORS file\nand the \"Credits\" section of the documentation for credits. The source\ncode may be modified and distributed under the terms of the GPL, version\n2 or later; the documentation may be modified and distributed under a\nCreative Commons Attribution - Share Alike 3.0 License. See the \"Copying\nand licenses\" section of the documentation.\n\nSagemath Developers and SageTeX maintainers\n", "release_dates": ["2023-01-11T11:49:39Z", "2021-12-07T17:17:15Z", "2020-08-12T08:48:38Z", "2019-11-14T11:08:13Z", "2019-01-09T16:56:34Z", "2015-08-27T22:24:52Z"]}, {"name": "sagetrac-mirror", "description": "Archive of the git branches attached to tickets on https://trac.sagemath.org/ before the migration to GitHub (Jan 30, 2023)", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<a href=\"https://sagemath.org\"><img src=\"src/doc/common/themes/sage/static/logo_sagemath_black.svg\" height=\"60\" align=\"right\" /></a>\n\n# Sage: Open Source Mathematical Software\n\n>   \"Creating a Viable Open Source Alternative to\n>   Magma, Maple, Mathematica, and MATLAB\"\n\n>   Copyright (C) 2005-2022 The Sage Development Team\n\nhttps://www.sagemath.org\n\nThe Sage Library is free software released under the\nGNU General Public Licence GPLv2+, and included packages\nhave [compatible software licenses](./COPYING.txt).\n[Over 800 people](https://www.sagemath.org/development-map.html)\nhave contributed code to Sage. In many cases, documentation\nfor modules and functions list the authors.\n\nGetting Started\n---------------\n\nThe [Sage Installation Guide](https://doc.sagemath.org/html/en/installation/index.html)\nprovides a decision tree that guides you to the type of installation\nthat will work best for you. This includes building from source,\nobtaining Sage from a package manager, using a container image, or using\nSage in the cloud.\n\n**This README contains self-contained instructions for building Sage from source.**\nIt assumes that you have already cloned the git repository or downloaded the\n[sources](https://www.sagemath.org/download-source.html) in the form\nof a tarball.\n\nIf you have questions or encounter problems, please do not hesitate\nto email the [sage-support mailing list](https://groups.google.com/group/sage-support)\nor ask on the [Ask Sage questions and answers site](https://ask.sagemath.org).\n\nSupported Platforms\n-------------------\n\nSage attempts to support all major Linux distributions, recent versions of\nmacOS, and Windows (using Windows Subsystem for Linux or\nvirtualization).\n\nDetailed information on supported platforms for a specific version of Sage\ncan be found in the section \"Availability and installation help\" of the\n[release tour](https://wiki.sagemath.org/ReleaseTours) for this version.\n\nWe highly appreciate contributions to Sage that fix portability bugs\nand help port Sage to new platforms; let us know at the [sage-devel\nmailing list](https://groups.google.com/group/sage-devel).\n\n[Windows] Preparing the Platform\n--------------------------------\n\nThe preferred way to run Sage on Windows is using the [Windows Subsystem for\nLinux](https://docs.microsoft.com/en-us/windows/wsl/faq), which allows\nyou to install a standard Linux distribution such as Ubuntu within\nyour Windows.  Then all instructions for installation in Linux apply.\n\nAs an alternative, you can also run Linux on Windows using Docker (see\nabove) or other virtualization solutions.\n\n[macOS] Preparing the Platform\n------------------------------\n\nIf your Mac uses the Apple Silicon (M1, arm64) architecture:\n\n- If you set up your Mac by transfering files from an older Mac, make sure\n  that the directory ``/usr/local`` does not contain an old copy of Homebrew\n  (or other software) for the x86_64 architecture that you may have copied\n  over.  Note that Homebrew for the M1 is installed in ``/opt/homebrew``, not\n  ``/usr/local``.\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, using Homebrew (\"the missing package manager for macOS\") from\n  https://brew.sh/ required because it provides a version of ``gfortran`` with\n  necessary changes for this platform that are not in a released upstream\n  version of GCC. (The ``gfortran`` package that comes with the Sage\n  distribution is not suitable for the M1/M2.)\n\nIf your Mac uses the Intel (x86_64) architecture:\n\n- If you wish to use conda, please see the [section on\n  conda](https://doc.sagemath.org/html/en/installation/conda.html) in the Sage\n  Installation Manual for guidance.\n\n- Otherwise, we strongly recommend to use Homebrew (\"the missing package\n  manager for macOS\") from https://brew.sh/, which provides the ``gfortran``\n  compiler and many libraries.\n\n- Otherwise, if you do not wish to install Homebrew, you will need to install\n  the latest version of Xcode Command Line Tools.  Open a terminal window and\n  run `xcode-select --install`; then click \"Install\" in the pop-up window.  If\n  the Xcode Command Line Tools are already installed, you may want to check if\n  they need to be updated by typing `softwareupdate -l`.\n\nInstructions to Build from Source\n---------------------------------\n\nLike many other software packages, Sage is built from source using\n`./configure`, followed by `make`.  However, we strongly recommend to\nread the following step-by-step instructions for building Sage.\n\nThe instructions cover all of Linux, macOS, and WSL.\n\nMore details, providing a background for these instructions, can be found\nin the [section \"Install from Source Code\"](https://doc.sagemath.org/html/en/installation/source.html).\nin the Installation Guide.\n\n1.  Decide on the source/build directory (`SAGE_ROOT`):\n\n    - On personal computers, any subdirectory of your :envvar:`HOME`\n      directory should do.\n\n    - For example, you could use `SAGE_ROOT=~/sage/sage-x.y`, which we\n      will use as the running example below, where `x.y` is the\n      current Sage version.\n\n    - You need at least 10 GB of free disk space.\n\n    - The full path to the source directory must contain **no spaces**.\n\n    - After starting the build, you cannot move the source/build\n      directory without breaking things.\n\n    - You may want to avoid slow filesystems such as\n      [network file systems (NFS)](https://en.wikipedia.org/wiki/Network_File_System)\n      and the like.\n\n    - [macOS] macOS allows changing directories without using exact capitalization.\n      Beware of this convenience when compiling for macOS. Ignoring exact\n      capitalization when changing into :envvar:`SAGE_ROOT` can lead to build\n      errors for dependencies requiring exact capitalization in path names.\n\n2.  Download/unpack or clone the sources.\n\n    - Go to https://www.sagemath.org/download-source.html, select a mirror,\n      and download the file :file:`sage-x.y.tar.gz`.\n\n      This compressed archive file contains the source code for Sage and\n      the source for all programs on which Sage depends.\n\n    - After downloading the source tarball `sage-x.y.tar.gz` into\n      `~/sage/`:\n\n            $ cd ~/sage/\n            $ tar xf sage-x.y.tar.gz  # adapt x.y; takes a while\n\n      This creates the subdirectory `sage-x.y`. Now change into it:\n\n            $ cd sage-x.y/  # adapt x.y\n\n    - [Git] Alternatively, and required for Sage development, clone the Sage\n      git repository:\n\n            $ ORIG=https://github.com/sagemath/sage.git\n            $ git clone -c core.symlinks=true --branch develop --tags $ORIG\n\n      This will create the directory `sage`. (See the section\n      [Setting up git](https://doc.sagemath.org/html/en/developer/git_setup.html)\n      and the following sections in the Sage Developer's Guide\n      for more information.)\n\n      Change into it and pick the branch you need, typically\n      the latest development branch:\n\n            $ cd sage\n            $ git checkout develop\n\n    - [Windows] The Sage source tree contains symbolic links, and the\n      build will not work if Windows line endings rather than UNIX\n      line endings are used.\n\n      Therefore it is crucial that you unpack the source tree from the\n      WSL `bash` using the WSL `tar` utility and not using other\n      Windows tools (including mingw). Likewise, when using `git`, it\n      is recommended (but not necessary) to use the WSL version of\n      `git`.\n\n3.  [Linux, WSL] Install the required minimal build prerequisites.\n\n    - Compilers: `gcc`, `gfortran`, `g++` (GCC 8.x to 12.x and recent\n      versions of Clang (LLVM) are supported).\n      See [build/pkgs/gcc/SPKG.rst](build/pkgs/gcc/SPKG.rst) and\n      [build/pkgs/gfortran/SPKG.rst](build/pkgs/gfortran/SPKG.rst)\n      for a discussion of suitable compilers.\n\n    - Build tools: GNU `make`, GNU `m4`, `perl` (including\n      ``ExtUtils::MakeMaker``), `ranlib`, `git`, `tar`, `bc`.\n      See [build/pkgs/_prereq/SPKG.rst](build/pkgs/_prereq/SPKG.rst) for\n      more details.\n\n    - Python 3.4 or later, or Python 2.7, a full installation including\n      `urllib`; but ideally version 3.8.x, 3.9.x, or 3.10.x, which\n      will avoid having to build Sage's own copy of Python 3.\n      See [build/pkgs/python3/SPKG.rst](build/pkgs/python3/SPKG.rst)\n      for more details.\n\n    We have collected lists of system packages that provide these build\n    prerequisites. See, in the folder\n    [build/pkgs/_prereq/distros](build/pkgs/_prereq/distros),\n    the files\n    [arch.txt](build/pkgs/_prereq/distros/arch.txt),\n    [debian.txt](build/pkgs/_prereq/distros/debian.txt)\n    (also for Ubuntu, Linux Mint, etc.),\n    [fedora.txt](build/pkgs/_prereq/distros/fedora.txt)\n    (also for Red Hat, CentOS),\n    [opensuse.txt](build/pkgs/_prereq/distros/opensuse.txt),\n    [slackware.txt](build/pkgs/_prereq/distros/slackware.txt), and\n    [void.txt](build/pkgs/_prereq/distros/void.txt), or visit\n    https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq\n\n4.  [Git] If you plan to do Sage development or otherwise work with ticket branches\n    and not only releases, install the bootstrapping prerequisites. See the\n    files in the folder\n    [build/pkgs/_bootstrap/distros](build/pkgs/_bootstrap/distros), or\n    visit\n    https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap\n\n5.  [Git] If you cloned the Sage repository using `git`, bootstrap the\n    source tree using the following command:\n\n        $ make configure\n\n    (If the bootstrapping prerequisites are not installed, this command will\n    download a package providing pre-built bootstrap output instead.)\n\n6.  Sanitize the build environment. Use the command\n\n        $ env\n\n    to inspect the current environment variables, in particular `PATH`,\n    `PKG_CONFIG_PATH`, `LD_LIBRARY_PATH`, `CFLAGS`, `CPPFLAGS`, `CXXFLAGS`,\n    and `LDFLAGS` (if set).\n\n    Remove items from these (colon-separated) environment variables\n    that Sage should not use for its own build. In particular, remove\n    items if they refer to a previous Sage installation.\n\n    - [WSL] In particular, WSL imports many items from the Windows\n      `PATH` variable into the Linux environment, which can lead to\n      confusing build errors. These items typically start with `/mnt/c`.\n      It is best to remove all of them from the environment variables.\n      For example, you can set `PATH` using the command:\n\n            $ export PATH=/usr/sbin/:/sbin/:/bin/:/usr/lib/wsl/lib/\n\n    - [macOS with homebrew] Set required environment variables for the build:\n\n            $ source ./.homebrew-build-env\n\n      This is to make some of Homebrew's packages (so-called keg-only\n      packages) available for the build. Run it once to apply the\n      suggestions for the current terminal session. You may need to\n      repeat this command before you rebuild Sage from a new terminal\n      session, or after installing additional homebrew packages.  (You\n      can also add it to your shell profile so that it gets run\n      automatically in all future sessions.)\n\n7.  Optionally, decide on the installation prefix (`SAGE_LOCAL`):\n\n    - Traditionally, and by default, Sage is installed into the\n      subdirectory hierarchy rooted at `SAGE_ROOT/local/`.\n\n    - This can be changed using `./configure --prefix=SAGE_LOCAL`,\n      where `SAGE_LOCAL` is the desired installation prefix, which\n      must be writable by the user.\n\n      If you use this option in combination with `--disable-editable`,\n      you can delete the entire Sage source tree after completing\n      the build process.  What is installed in `SAGE_LOCAL` will be\n      a self-contained installation of Sage.\n\n    - Note that in Sage's build process, `make` builds **and**\n      installs (`make install` is a no-op).  Therefore the\n      installation hierarchy must be writable by the user.\n\n    - See the installation manual for options if you want to\n      install into shared locations such as `/usr/local/`.\n      Do not attempt to build Sage as `root`.\n\n8.  Optional: It is recommended that you have both LaTeX and\n    the ImageMagick tools (e.g. the \"convert\" command) installed\n    since some plotting functionality benefits from them.\n\n9.  Optionally, review the configuration options, which includes\n    many optional packages:\n\n        $ ./configure --help\n\n    A notable option for Sage developers is the following:\n\n    - Use `./configure --enable-download-from-upstream-url` to allow\n      downloading packages from their upstream URL if they cannot (yet) be\n      found on the Sage mirrors. This is useful for trying out ticket branches\n      that make package upgrades.\n\n10. Optional, but highly recommended: Set some environment variables to\n    customize the build.\n\n    For example, the `MAKE` environment variable controls whether to\n    run several jobs in parallel.  On a machine with 4 processors, say,\n    typing `export MAKE=\"make -j4\"` will configure the build script to\n    perform a parallel compilation of Sage using 4 jobs. On some\n    powerful machines, you might even consider `-j16`, as building with\n    more jobs than CPU cores can speed things up further.\n\n    To reduce the terminal output during the build, type `export V=0`.\n    (`V` stands for \"verbosity\".)\n\n    Some environment variables deserve a special mention: `CC`,\n    `CXX` and `FC`. These variables defining your compilers\n    can be set at configuration time and their values will be recorded for\n    further use at build time and runtime.\n\n    For an in-depth discussion of more environment variables for\n    building Sage, see [the installation\n    guide](https://doc.sagemath.org/html/en/installation/source.html#environment-variables).\n\n11. Type `./configure`, followed by any options that you wish to use.\n    For example, to build Sage with `gf2x` package supplied by Sage,\n    use `./configure --with-system-gf2x=no`.\n\n    At the end of a successful `./configure` run, you may see messages\n    recommending to install extra system packages using your package\n    manager.\n\n    For a large [list of Sage\n    packages](https://trac.sagemath.org/ticket/27330), Sage is able to\n    detect whether an installed system package is suitable for use with\n    Sage; in that case, Sage will not build another copy from source.\n\n    Sometimes, the messages will recommend to install packages that are\n    already installed on your system. See the earlier configure\n    messages or the file `config.log` for explanation.  Also, the\n    messages may recommend to install packages that are actually not\n    available; only the most recent releases of your distribution will\n    have all of these recommended packages.\n\n12. Optional: If you choose to install the additional system packages,\n    a re-run of `./configure` will test whether the versions installed\n    are usable for Sage; if they are, this will reduce the compilation\n    time and disk space needed by Sage. The usage of packages may be\n    adjusted by `./configure` parameters (check again the output of\n    `./configure --help`).\n\n13. Type `make`.  That's it! Everything is automatic and\n    non-interactive.\n\n    If you followed the above instructions, in particular regarding the\n    installation of system packages recommended by the output of\n    `./configure` (step 10), and regarding the parallel build (step 9),\n    building Sage takes less than one hour on a modern computer.\n    (Otherwise, it can take much longer.)\n\n    The build should work fine on all fully supported platforms. If it\n    does not, we want to know!\n\n14. Type `./sage` to try it out. In Sage, try for example `2 + 2`,\n    `plot(x^2)`, `plot3d(lambda x, y: x*y, (-1, 1), (-1, 1))`\n    to test a simple computation and plotting in 2D and 3D.\n    Type <kbd>Ctrl</kbd>+<kbd>D</kbd> or `quit` to quit Sage.\n\n15. Optional: Type `make ptestlong` to test all examples in the documentation\n    (over 200,000 lines of input!) -- this takes from 10 minutes to\n    several hours. Don't get too disturbed if there are 2 to 3 failures,\n    but always feel free to email the section of `logs/ptestlong.log` that\n    contains errors to the [sage-support mailing list](https://groups.google.com/group/sage-support).\n    If there are numerous failures, there was a serious problem with your build.\n\n16. The HTML version of the [documentation](https://doc.sagemath.org/html/en/index.html)\n    is built during the compilation process of Sage and resides in the directory\n    `local/share/doc/sage/html/`. You may want to bookmark it in your browser.\n\n17. Optional: If you want to build the PDF version of the documentation,\n    run `make doc-pdf` (this requires LaTeX to be installed).\n\n18. Optional: Install optional packages of interest to you:\n    get a list by typing  `./sage --optional` or by visiting the\n    [packages documentation page](https://doc.sagemath.org/html/en/reference/spkg/).\n\n19. Optional: Create a symlink to the installed `sage` script in a\n    directory in your `PATH`, for example ``/usr/local``. This will\n    allow you to start Sage by typing `sage` from anywhere rather than\n    having to either type the full path or navigate to the Sage\n    directory and type `./sage`. This can be done by running:\n\n        $ sudo ln -s $(./sage -sh -c 'ls $SAGE_ROOT/venv/bin/sage') /usr/local/bin\n\n20. Optional: Set up SageMath as a Jupyter kernel in an existing Jupyter notebook\n    or JupyterLab installation, as described in [section\n    \"Launching SageMath\"](https://doc.sagemath.org/html/en/installation/launching.html)\n    in the installation manual.\n\nTroubleshooting\n---------------\n\nIf you have problems building Sage, check the Sage Installation Guide,\nas well as the version-specific Sage Installation FAQ in the [Sage Release\nTour](https://wiki.sagemath.org/ReleaseTours) corresponding to the\nversion that you are installing.\n\nPlease do not hesitate to ask for help in the [SageMath forum\n](https://ask.sagemath.org/questions/) or the [sage-support mailing\nlist](https://groups.google.com/forum/#!forum/sage-support).  The\n[Troubleshooting section in the Sage Installation Guide\n](https://doc.sagemath.org/html/en/installation/troubles.html)\nprovides instructions on what information to provide so that we can provide\nhelp more effectively.\n\nContributing to Sage\n--------------------\n\nIf you'd like to contribute to Sage, we strongly recommend that you read the\n[Developer's Guide](https://doc.sagemath.org/html/en/developer/index.html).\n\nSage has significant components written in the following languages:\nC/C++, Python, Cython, Common Lisp, Fortran, and a bit of Perl.\n\nDirectory Layout\n----------------\n\nSimplified directory layout (only essential files/directories):\n```\nSAGE_ROOT                 Root directory (sage-x.y in Sage tarball)\n\u251c\u2500\u2500 build\n\u2502   \u2514\u2500\u2500 pkgs              Every package is a subdirectory here\n\u2502       \u251c\u2500\u2500 4ti2/\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib/\n\u251c\u2500\u2500 configure             Top-level configure script\n\u251c\u2500\u2500 COPYING.txt           Copyright information\n\u251c\u2500\u2500 pkgs                  Source trees of Python distribution packages\n\u2502   \u251c\u2500\u2500 sage-conf\n\u2502   \u2502   \u251c\u2500\u2500 sage_conf.py\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-docbuild\n\u2502   \u2502   \u251c\u2500\u2500 sage_docbuild/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-setup\n\u2502   \u2502   \u251c\u2500\u2500 sage_setup/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u251c\u2500\u2500 sage-sws2rst\n\u2502   \u2502   \u251c\u2500\u2500 sage_sws2rst/\n\u2502   \u2502   \u2514\u2500\u2500 setup.py\n\u2502   \u2514\u2500\u2500 sagemath-standard\n\u2502       \u251c\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 sage -> ../../src/sage\n\u2502       \u2514\u2500\u2500 setup.py\n\u251c\u2500\u2500 local  (SAGE_LOCAL)   Installation hierarchy for non-Python packages\n\u2502   \u251c\u2500\u2500 bin               Executables\n\u2502   \u251c\u2500\u2500 include           C/C++ headers\n\u2502   \u251c\u2500\u2500 lib               Shared libraries, architecture-dependent data\n\u2502   \u251c\u2500\u2500 share             Databases, architecture-independent data, docs\n\u2502   \u2502   \u2514\u2500\u2500 doc           Viewable docs of Sage and of some components\n\u2502   \u2514\u2500\u2500 var\n\u2502       \u251c\u2500\u2500 lib/sage\n\u2502       \u2502   \u251c\u2500\u2500 installed/\n\u2502       \u2502   \u2502             Records of installed non-Python packages\n\u2502       \u2502   \u251c\u2500\u2500 scripts/  Scripts for uninstalling installed packages\n\u2502       \u2502   \u2514\u2500\u2500 venv-python3.9  (SAGE_VENV)\n\u2502       \u2502       \u2502         Installation hierarchy (virtual environment)\n\u2502       \u2502       \u2502         for Python packages\n\u2502       \u2502       \u251c\u2500\u2500 bin/  Executables and installed scripts\n\u2502       \u2502       \u251c\u2500\u2500 lib/python3.9/site-packages/\n\u2502       \u2502       \u2502         Python modules/packages are installed here\n\u2502       \u2502       \u2514\u2500\u2500 var/lib/sage/\n\u2502       \u2502           \u2514\u2500\u2500 wheels/\n\u2502       \u2502                 Python wheels for all installed Python packages\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 tmp/sage/     Temporary files when building Sage\n\u251c\u2500\u2500 logs\n\u2502   \u251c\u2500\u2500 install.log       Full install log\n\u2502   \u2514\u2500\u2500 pkgs              Build logs of individual packages\n\u2502       \u251c\u2500\u2500 alabaster-0.7.12.log\n\u2502       \u2026\n\u2502       \u2514\u2500\u2500 zlib-1.2.11.log\n\u251c\u2500\u2500 m4                    M4 macros for generating the configure script\n\u2502   \u2514\u2500\u2500 *.m4\n\u251c\u2500\u2500 Makefile              Running \"make\" uses this file\n\u251c\u2500\u2500 prefix -> SAGE_LOCAL  Convenience symlink to the installation tree\n\u251c\u2500\u2500 README.md             This file\n\u251c\u2500\u2500 sage                  Script to start Sage\n\u251c\u2500\u2500 src                   Monolithic Sage library source tree\n\u2502   \u251c\u2500\u2500 bin/              Scripts that Sage uses internally\n\u2502   \u251c\u2500\u2500 doc/              Sage documentation sources\n\u2502   \u2514\u2500\u2500 sage/             The Sage library source code\n\u251c\u2500\u2500 upstream              Source tarballs of packages\n\u2502   \u251c\u2500\u2500 Babel-2.9.1.tar.gz\n\u2502   \u2026\n\u2502   \u2514\u2500\u2500 zlib-1.2.11.tar.gz\n\u251c\u2500\u2500 venv -> SAGE_VENV     Convenience symlink to the virtual environment\n\u2514\u2500\u2500 VERSION.txt\n```\nFor more details see [our Developer's Guide](https://doc.sagemath.org/html/en/developer/coding_basics.html#files-and-directory-structure).\n\nBuild System\n------------\n\nThis is a brief summary of the Sage software distribution's build system.\nThere are two components to the full Sage system--the Sage Python library\nand its associated user interfaces, and the larger software distribution of\nSage's main dependencies (for those dependencies not supplied by the user's\nsystem).\n\nSage's Python library is built and installed using a `setup.py` script as is\nstandard for Python packages (Sage's `setup.py` is non-trivial, but not\nunusual).\n\nMost of the rest of the build system is concerned with building all of Sage's\ndependencies in the correct order in relation to each other.  The dependencies\nincluded by Sage are referred to as SPKGs (i.e. \"Sage Packages\") and are listed\nunder `build/pkgs`.\n\nThe main entrypoint to Sage's build system is the top-level `Makefile` at the\nroot of the source tree.  Unlike most normal projects that use autoconf (Sage\ndoes as well, as described below), this `Makefile` is not generated.  Instead,\nit contains a few high-level targets and targets related to bootstrapping the\nsystem.  Nonetheless, we still run `make <target>` from the root of the source\ntree--targets not explicitly defined in the top-level `Makefile` are passed\nthrough to another Makefile under `build/make/Makefile`.\n\nThe latter `build/make/Makefile` *is* generated by an autoconf-generated\n`configure` script, using the template in `build/make/Makefile.in`.  This\nincludes rules for building the Sage library itself (`make sagelib`), and for\nbuilding and installing each of Sage's dependencies (e.g. `make gf2x`).\n\nThe `configure` script itself, if it is not already built, can be generated by\nrunning the `bootstrap` script (the latter requires _GNU autotools_ being installed).\nThe top-level `Makefile` also takes care of this automatically.\n\nTo summarize, running a command like `make python3` at the top-level of the\nsource tree goes something like this:\n\n1.  `make python3`\n2.  run `./bootstrap` if `configure` needs updating\n3.  run `./configure` with any previously configured options if `build/make/Makefile`\n    needs updating\n4.  change directory into `build/make` and run the `install` script--this is\n    little more than a front-end to running `make -f build/make/Makefile python3`,\n    which sets some necessary environment variables and logs some information\n5.  `build/make/Makefile` contains the actual rule for building `python3`; this\n    includes building all of `python3`'s dependencies first (and their\n    dependencies, recursively); the actual package installation is performed\n    with the `sage-spkg` program\n\nRelocation\n----------\n\nIt is not supported to move the `SAGE_ROOT` or `SAGE_LOCAL` directory\nafter building Sage.  If you do move the directories, you will have to\nrun ``make distclean`` and build Sage again from scratch.\n\nFor a system-wide installation, you have to build Sage as a \"normal\" user\nand then as root you can change permissions. See the [Installation Guide](https://doc.sagemath.org/html/en/installation/source.html#installation-in-a-multiuser-environment)\nfor further information.\n\nRedistribution\n--------------\n\nYour local Sage install is almost exactly the same as any \"developer\"\ninstall. You can make changes to documentation, source, etc., and very\neasily package the complete results up for redistribution just like we\ndo.\n\n1.  To make a binary distribution with your currently installed packages,\n    visit [sagemath/binary-pkg](https://github.com/sagemath/binary-pkg).\n\n2.  To make your own source tarball of Sage, type:\n\n        $ make dist\n\n    The result is placed in the directory `dist/`.\n\nChanges to Included Software\n----------------------------\n\nAll software included with Sage is copyrighted by the respective authors\nand released under an open source license that is __GPL version 3 or\nlater__ compatible. See [COPYING.txt](./COPYING.txt) for more details.\n\nSources are in unmodified (as far as possible) tarballs in the\n`upstream/` directory. The remaining description, version\ninformation, patches, and build scripts are in the accompanying\n`build/pkgs/<packagename>` directory. This directory is\npart of the Sage git repository.\n", "release_dates": []}, {"name": "sagewiki-to-github", "description": "Migration script. Input: Snapshot of https://wiki.sagemath.org/ \u27a0 Output: https://github.com/sagemath/sagewiki_to_gh", "language": "Python", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": "# sagewiki\n\nTools for the Sage wikis.\n\n## convert.py\n\nMaster script for converting an existing (SageMath) MoinMoin wiki to a gollum wiki.\n\n## config.ru\n\nRack script for running gollum with the necessary authentication bits,\nand loading the correct modules.\n\n## moin2git and moin2mdwn\n\nThese files are modifications of the same-named files from http://ikiwiki.info/tips/convert_moinmoin_to_ikiwiki/\n\nI believe the original authors are Josh Triplett and Antoine Beaupr\u00e9.\n\n## Licenses\n\n`moin2git` and `moin2mdwn` are probably licensed under the GPLv2 license (see `GPL_LICENSE`).\n\n`unidecode` is vendored in `unidecode`, and is licensed under GPLv2 (see `GPL_LICENSE`).\n\nThe rest of everything in this repository is licensed under the MIT license (see `MIT_LICENSE`).\n\n## Converting the Sage wiki to markdown:\n\nThis needs python2; pyenv makes it easy to install it.\n\n    pyenv install 2.7\n    eval \"$(pyenv init -)\"\n    python -m pip install -r requirements.txt\n\nSymlink the wiki configuration and data (unpacked from an archive):\n\n    ln -s SOMEWHERE/wiki wiki\n    ln -s wiki/data data\n\nStart the conversion:\n\n    ./convert.py\n\nThis creates a bare repo ``test.git`` and a clone ``test``.\n", "release_dates": []}, {"name": "sagewiki_to_gh-2022-10-10", "description": "Output from the sagewiki-to-github migration script with input = an archive of https://wiki.sagemath.org/ from October 2022", "language": "Jupyter Notebook", "license": null, "readme": null, "release_dates": []}, {"name": "sage_sample", "description": "A sample project illustrating how to write and distribute SageMath extensions", "language": "Python", "license": {"key": "gpl-2.0", "name": "GNU General Public License v2.0", "spdx_id": "GPL-2.0", "url": "https://api.github.com/licenses/gpl-2.0", "node_id": "MDc6TGljZW5zZTg="}, "readme": null, "release_dates": []}, {"name": "sage_trac", "description": null, "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "sage_trac_plugin", "description": "Trac plugin used to support Sage development at trac.sagemath.org", "language": "Python", "license": null, "readme": "# sage_trac plugin\n\nThis Trac plugin provides features unique to the trac.sagemath.org Trac\ninstance, to meet needs of the SageMath project. Although some of its\nfeatures are fairly general and may be useful for other Trac sites.\n\nThe majority of this plugin consists of features for integrating the Trac site\nwith a git repository, for which the\n[GitTrac](https://trac.edgewall.org/wiki/TracGit) plugin was found, at some\npoint or another, to be insufficient or too slow.\n\nIn place of the Trac repository browser this assumes that the (singular) git\nrepository for the Trac site is hosted on a web-based repository browser\nlike [cgit](https://git.zx2c4.com/cgit/about/).  The plugin supplies\nintegration with Trac tickets by allowing either a commit to be associated\nwith a ticket (by SHA-1 hash) or a branch name in the repository.  If\na branch is associated with a ticket, new commits to that branch are also\nshown in the ticket history (with help of a post-receive hook that is not\ncurrently included with this plugin).  Further, the branch field in tickets\nis rendered as a link displaying a merge diff of the branch with the current\ndevelop (\"master\") branch.\n\nOther features include management of SSH keys used for\nauthentication/authorization of access to the repository via SSH (using\n[gitolite](http://gitolite.com/gitolite/index.html)), RPC methods for reading\nfrom the repository, and built-bot integration.\n\nThe plugin is intended to work with the latest dev version of Trac\n(currently v1.1.6) but some features are not currently in use on\ntrac.sagemath.org and have gone unmaintained for a while.\n\n\n## Components\n\nThe `sage_trac` plugin currently consists of five main components:\n\n* [SshKeysPlugin](#SshKeysPlugin)\n* [TicketBox](#TicketBox)\n* [TicketLog](#TicketLog)\n* [BranchSearchModule](#BranchSearchModule)\n* [GitLabWebHook](#GitLabWebHook)\n* [BuildBotHook](#BuildBotHook) (broken)\n\n### SshKeysPlugin\n\nThis plugin provides a User Preferences panel for managing their SSH keys\nused to access the git repository (or repositories, in principle).  This\nis intended for integration with git repositories configured to use\ngitolite for authorization.\n\nThe UI is currently very bare-bones--users simply copy an SSH public\nkey signature into a line in a text entry box, one key per line.\n\nSSH keys are stored under the user's Trac username in the gitolite-admin\nrepository.  The `keys` directory in the gitolite-admin repository is\nsubdivided into directories named `00`, `01`, ..., `N`, ..., `ff`.  This\nis to support users with multiple keys.  Each user's Nth key goes into the\nsubdirectory `N` (which is zero-padded).  As such users may only store up\nto 256 keys.\n\nThis plugin works by making its own clone of the gitolite-admin repository\nwhich it keeps in the Trac environment (by default), and commits to and\npushes from whenever users add, remove, or update their SSH keys.\n\n#### Configuration\n\nTo enable this component add the following to trac.ini under the\n`[components]` section:\n\n```\n[components]\n...\nsage_trac.sshkeys.sshkeysplugin = enabled\nsage_trac.sshkeys.userdatastore = enabled\n```\n\nThe `UserDataStore` component is an associated component that must be enabled\nas well.\n\nIn order for this component to work, one other `trac.ini` settings must be\nspecified, under the `[sage_trac]` section:\n\n```\n[sage_trac]\n...\ngitolite_host = <hostname>\n```\n\nwhere `<hostname>` is the IP address or hostname of the server hosting the\ngit repository over SSH, and may be `localhost` if it is the same server that\nTrac is run on.\n\n**Important:** Finally, the user under which the Trac server runs (e.g.\n`www-data` when Trac is run in Apache in the typical configuration) *must* have\nan SSH key with R/W access on the gitolite-admin repository hosted on the\nserver given by `gitolite_host`.\n\nThis documentation will assume the reader is already familiar with\nadministering gitolite, but for a refresher you can read the\n[documentation for adding users to gitolite](http://gitolite.com/gitolite/basic-admin.html#users).\nFor Trac, generate an SSH public/private key pair, and store them\nin the `.ssh` directory under the Trac user's home directory (such as\n`/var/www` for the typical case of Apaache) and ensure that appropriate\npermissions are set for that directory and for the keys.\n\nThen copy the public key and give it an unambiguous name like\n`_trac.pub` and add it to the `gitolite-admin` keys directory.  Then\nedit the gitolite config to give R/W access to the gitolite-admin\nrepository to the `_trac` user.\n\n##### Optional configuration\n\nThis component takes two optional `trac.ini` settings:\n\n* `[sage_trac]/gitolite_user`--the user to log in as when connecting to\n  the gitolite server (default: `git`)\n* `[sage_trac]/gitolite_admin`--the path to the local clone of the\n  gitolite-admin repository that Trac will commit to and use to push changes\n  upstream (default: `/path/to/trac/env/gitolite-admin`)\n\n#### Caveats\n\nThe trickiest thing about this plugin is keeping the local copy of the\ngitolite-admin repository in a consistent state.  Many bugs related to\nthis have been squashed and it works fine almost always.  However, there\nis a possibility for a server process to be shut down uncleanly while\nin the middle of a `git` command, which *can* leave the repository in an\ninaccessible state.  When this happens the plugin will normally try to\nre-clone the local repository, but if this continues to fail manual\nintervention may be required by an administrator.  If for some reason\nusers are failing to update their SSH keys this is the first thing to check.\nThere should also be relevant error messages in the Trac log.\n\n#### UserDataStore\n\nThis component provides the database table used to store SSH keys.  Originally\nit was intended to do more, but in the future will probably be merged into\nthe functionality of `SshKeysPlugin`, as there's no reason for it to be\nseparate anymore.\n\nThis component *must* be enabled in order for `SshKeysPlugin` to work.\n\n\n### TicketBox\n\n\n### TicketLog\n\n\n### BranchSearchModule\n\n\n### GitLabWebHook\n\nA component to receive GitLab [webhook\nevents](https://gitlab.com/help/user/project/integrations/webhooks).\nCurrently it only receives merge request events, and as such is used to\nsynchronize GitLab merge requests to Trac tickets.  That is, when a merge\nrequest is opened on the relevant GitLab project, the merge request creation\nevent is used to open a ticket tracking that merge request on Trac.  It also\nsynchronizes the Git branch from GitLab to a branch in Sage's main Git\nrepository and adds that branch to the ticket.  Further updates to the\nbranch on the merge request are also synchronized.  When the merge request\nis closed, so is the Trac ticket.\n\nThis takes a bit of work on both the Trac side and on the GitLab side to\nconfigure.  First of all you need two things:\n\n* A user on the Trac site--preferably a user created solely to act as a bot,\n  under whose name merge requests will be posted.  For the purpose of these\n  instructions let's say the username is \"trac\".\n\n  * For this user we will also need their access token (see the\n    `sage_trac.token` module), obtained by logging in to Trac as that user\n    and going to `/prefs/token`.\n\n* Likewise, a user on the GitLab site who will post updates about the ticket\n  to the GitLab merge request--this user should have at least the Developer\n  role on the GitLab project.\n\n  * For this user we also also need a GitLab access token so that Trac can\n    post back to GitLab using its API.  This can be obtained by logging in\n    as the bot user and going to\n    https://gitlab.com/profile/personal_access_tokens  Give the token an\n    obvious name like \"trac sync\", and grant it the \"api\" scope.  An\n    expiry date may be set but you will have to generate a new token and\n    update the Trac configuration when the token expires.\n\nGiven these things, add the following configuration in `trac.ini`:\n\n    [components]\n    sage_trac.gitlab.gitlabwebhook = enabled\n    sage_trac.markdown.markdownmacro = enabled\n\n    [sage_trac]\n    gitlab_webhook_username = trac\n    gitlab_api_token = <api token obtained through gitlab>\n    gitlab_default_ticket_status = needs_review\n\nNote: The markdown macro is used by the plugin to embed a copy of the\nmerge request description in the Trac ticket, and supports a minimal amount\nof markdown rendering.\n\nNote: The `gitlab_default_ticket_status` option is optional and defaults to\n'new', but we set it to 'needs_review', meaning that Trac tickets\nautomatically created from merge requets are created in the 'needs_review'\nstatus of our workflow.\n\nOn the GitLab side, go to the project's webhook integrations and add\n\n    https://trac.sagemath.org/gitlab-hook\n\nand configure it to trigger only for \"Merge request events\".  In the future\nmaybe we will handle more events as well.  Do enable SSL verification.  For\nthe \"Secret Token\", paste the access token for the Trac user obtained from\nTrac.  This will allow the webhook to authenticate to Trac as the user\nconfigured to post to Trac on its behalf.  And that should do it.\n\n\n### BuildBotHook\n\nThis module is intended to provide integration with a build bot build status\non the ticket page, but it is currently disabled on trac.sagemath.org and is\nnot certain to work.\n", "release_dates": []}, {"name": "sphinx-sagecell-ext", "description": "The Sphinx extension embedding a Sage cell into a webpage", "language": "Python", "license": {"key": "unlicense", "name": "The Unlicense", "spdx_id": "Unlicense", "url": "https://api.github.com/licenses/unlicense", "node_id": "MDc6TGljZW5zZTE1"}, "readme": null, "release_dates": []}, {"name": "strongly_regular_graphs_database", "description": "A database of strongly regular graphs for Sage", "language": "Python", "license": null, "readme": "Database of Strongly Regular Graphs (SRG).\n\nThis directory contains code to parse and reproduce Andries Brouwer's online\ndatabase [1] using Sage [2], and store it in two computer-friendly files. They\ncan be obtained by running 'make'.\n\n    - brouwer_srg_database.txt\n    - brouwer_srg_database.json\n\nA comment on the actual data?\n-----------------------------\n\nPlease write directly to Andries Brouwer at aeb@cwi.nl.\n\n[1] http://www.win.tue.nl/~aeb/graphs/srg/srgtab.html\n[2] http://www.sagemath.org/", "release_dates": []}, {"name": "threejs-sage", "description": "Custom build of Three.js for SageMath", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n# Custom build of Three.js for SageMath\n\nThe steps to create this build from a stable tagged version are\n\n* Perform a shallow clone of the desired version with\n\n`git clone --depth=1 --branch r<n> --single-branch https://github.com/mrdoob/three.js.git`\n\n* Add the following lines to `src/Three.js` just after all other exports\n\n```\nexport { OrbitControls } from '../examples/jsm/controls/OrbitControls.js';\nexport { Line2 } from '../examples/jsm/lines/Line2.js';\nexport { LineGeometry } from '../examples/jsm/lines/LineGeometry.js';\nexport { LineMaterial } from '../examples/jsm/lines/LineMaterial.js';\nexport { LineSegments2 } from '../examples/jsm/lines/LineSegments2.js';\nexport { LineSegmentsGeometry } from '../examples/jsm/lines/LineSegmentsGeometry.js';\n```\n\n* Move into the library directory with `cd three.js`\n\n* Configure the library with `npm install`\n\n* Build the library with `npm run build`\n\nThe minified file will be located in the `build` directory and has been copied to the same directory here. The final step before releasing is to update the `version` file with the new number.\n\nAs noted in [this issue](https://github.com/mrdoob/three.js/issues/20591), Three.js releases can be modified for up to a week after the initial release. This build process should wait for this period of time to ensure future consistency of building.\n", "release_dates": ["2021-07-07T23:03:53Z", "2021-06-03T22:48:57Z", "2021-05-03T00:07:24Z", "2021-04-06T20:05:37Z", "2021-03-01T21:39:21Z", "2021-02-02T01:14:12Z", "2020-12-31T22:03:23Z", "2020-12-04T01:19:40Z"]}, {"name": "trac-code-comments-plugin", "description": "Trac plugin for code comments and sending them to tickets", "language": "JavaScript", "license": null, "readme": "Code Comments, an enhancement for Trac\n=====================================\n\nThe problem is two-fold. When reviewing code, it's difficult to\nassociate your comments with their appropriate context. Then,\ncollecting all of these new issues into actionable tickets requires\na lot of manual effort.\n\nThis plugin allows you to leave comments on top of files, changesets, and\nattachments. Once you've added all of your comments, you can send them to\ntickets. These include links to these comments and their description.\n\nIt's Github, in your Trac.\n\nInstallation\n------------\n\nPick an `.egg` file from the Downloads section and place it in the `plugins/`\ndirectory of your Trac install.\n\nTrac Code Comments plugin requres at least python 2.4 and runs on Trac 0.12.\n\nFeatures\n--------\n\n* Comments on files \u2013 you can comment on every file in the repository.\n\n* Inline comments on files \u2013 comment on a specific line. The comments appears\nin context, below the line in question.\n\n* Comments on changesets \u2013 useful when doing code reviews of incoming commits.\n\n* Comments on attachment pages \u2013 useful when reviewing patches.\n\n* Wiki Markup \u2013 you can use the standard Trac wiki markup inside your\ncomments.\n\n* Instant preview \u2013 to make sure you get the formatting right.\n\n* Sending comments to tickets \u2013 you can select arbitrary number of comments\nand create a new ticket out of them. The text of the ticket defaults to links\nto the comments and their text, but you can edit these before saving the\nticket.\n\n* Comments/ticket cross-reference \u2013 to remember which comments are already in\ntickets and which are not.\n\nScreenshots\n-----------\n\n![Inline comment screenshot](https://github.com/Automattic/trac-code-comments-plugin/raw/master/screenshots/0.png)\n\nContributing\n------------\n\nWe'd love your help!\n\nIf you are a developer, feel free to fork the project here, on github and\nsubmit a pull request with your changes.\n\nIf you are a designer and have UI suggestions, [open an issue](https://github.com/Automattic/trac-code-comments-plugin/issues), and we'll make sure to address your concerns.\n\nIf you want to help with copy, or just wanna say how great or sucky we are\n[creating an issue](https://github.com/Automattic/trac-code-comments-plugin/issues) is the way to go.\n\nYou can find help with setting up a local development environment in the [`HACKING`](https://github.com/Automattic/trac-code-comments-plugin/blob/master/HACKING) file in this repostitory.\n\nRoadmap\n-------\n\nNobody can predict the future, but here are some features on the roadmap:\n\n* Line-level comments for changesets and diff atatchments, too\n* E-mail notifictaions\n\nLicense\n-------\nCopyright (C) 2011-2012, Automattic Inc.\n\nThis plugin is distributed under the GPLv2 or later license.", "release_dates": []}, {"name": "trac-dump", "description": "dump of sage's trac database", "language": null, "license": null, "readme": null, "release_dates": []}, {"name": "trac-git-plugin", "description": "Git Plugin for Trac", "language": "Python", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "=========\nGitPlugin\n=========\n\nsee http://www.trac-hacks.org/wiki/GitPlugin for instructions\n\n", "release_dates": []}, {"name": "trac-githooks", "description": null, "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "trac-to-github", "description": "Script to migrate Trac tickets to GitHub issues and the Trac wiki to markdown. Input:\u00a0https://trac.sagemath.org/ \u27a0 Intermediate:\u00a0https://github.com/sagemath/trac_to_gh \u27a0 Output: https://github.com/sagemath/sage/issues", "language": "Python", "license": null, "readme": "What\n=====\n\nThis script migrates milestones, issues/tickets, and wiki pages from Trac to GitHub.\n\nThe script has its origin at https://github.com/moimael/trac-to-gitlab,\nwhich then was [extended to suite a specific use case of SVN+Trac to GitLab migration](https://www.gams.com/~stefan/svn2git/).\nNext, GitLab specific code was removed, and a migration to GitHub was added.\n\nIn its present form, it is used for the migration of SageMath from\nhttps://trac.sagemath.org/ to GitHub. This migration is described in more detail in\nhttps://trac.sagemath.org/ticket/30363\n\nWhy\n===\n\n[docs/Github-vs-Gitlab-vs-trac.md](docs/Github-vs-Gitlab-vs-trac.md) compares\n[Github](https://github.com/) and [Trac](https://trac.sagemath.org/),\nfocusing on the specific differences that are important to the SageMath\ncommunity.\n\nHow\n====\n\nMigrating a Trac project to GitHub is a relatively complex process involving four steps:\n\n * Create a new project\n * Migrate the repository\n * Migrate issues and milestones\n * Migrate wiki pages\n\nThe script [migrate.py](./migrate.py) takes care of the third and fourth bullet points.\n\nUsage:\n\n  1. Symlink or copy [migrate.cfg.sagetracmigrationarchive](./migrate.cfg.sagetracmigrationarchive) to ```migrate.cfg```\n  2. Configure the values\n  3. Run (```./migrate.py```).\n\nSee [docs/Migration-Trac-to-Github.md](docs/Migration-Trac-to-Github.md) for details of the migration process\nand a proposed workflow on GitHub (with transition guide from Trac for developers).\n\nFeatures\n--------\n\n * Creates a [migration archive](https://github.github.com/enterprise-migrations/#/./2.1-export-archive-format)\n   in a subdirectory ``archive/``, containing records for issues (converted from Trac tickets).\n * Creates a markdown file for each converted ticket for easy inspection of the generated migration archive\n   in subdirectories of ``wiki/`` like [Issues-33xxx](https://github.com/sagemath/trac_to_gh/tree/main/Issues-33xxx).\n * Ticket title, description, comments, attachments are copied over.\n * Component, issue type, priority, severity, resolution are converted to labels.\n * Selected keywords and milestones can be converted to labels.\n * CC is added to the issue description as \"@\" mentions.\n * Attribute changes are converted to issue events or issue comments.\n * Creates a file ``minimized_issue_comments.json`` that lists the IDs of issue comments that\n   correspond to attribute changes.\n * Links to the cgit server are rewritten as GitHub repository links.\n * Links to Trac tickets and ticket comments are rewritten as GitHub issue links.\n * Links to the Trac wiki are rewritten as GitHub wiki links.\n * Wiki pages including attachments are exported into files in ``wiki/`` that can be\n   added to the GitHub project wiki repository.\n\nMissing\n-------\n\n * History on wiki pages is not kept.\n * Edit history of ticket comments is not kept.\n\nOther modes of operation of the script (not used in the SageMath migration)\n---------------------------------------------------------------------------\n\nInstead of creating a migration archive, the script can directly add issues to a GitHub project.\nSee [migrate.cfg.example](./migrate.cfg.example) for a sample configuration for this mode of operation.\n\n * It needs either a GitHub access token or a username/password pair.\n * All issues and issue comments are attributed to this username, and timestamps are not preserved.\n * Original usernames and timestamps are noted as part of the Issue descriptions and comments.\n * Make sure you test it on a test project prior; if you run the script twice against the same project,\n   you will get duplicated issues.\n * Issue text attachments are uploaded as Gist (GitHub doesn't allow to attach files to issues via the GitHub API)\n   or all issue attachments are exported to local files\n\n\nLicense\n=======\n\nLGPL license version 3.0.\n\nRequirements\n==============\n\n * Python 3; various packages, see ```requirements.txt```\n * Trac server on which [XML-RPC plugin](http://trac-hacks.org/wiki/XmlRpcPlugin) enabled\n", "release_dates": []}, {"name": "trac.sagemath.org", "description": "GitHub pages for redirecting trac.sagemath.org to the new sagemath/sage GitHub repo", "language": "HTML", "license": {"key": "bsd-3-clause", "name": "BSD 3-Clause \"New\" or \"Revised\" License", "spdx_id": "BSD-3-Clause", "url": "https://api.github.com/licenses/bsd-3-clause", "node_id": "MDc6TGljZW5zZTU="}, "readme": "# trac.sagemath.org\nGitHub pages for redirecting trac.sagemath.org to the new sagemath/sage GitHub repo\n\nRedirection, trac tickets to GitHub issues, is done by statically generated links\n", "release_dates": []}, {"name": "trac_to_gh", "description": "Output from the trac-to-github migration script with input https://trac.sagemath.org", "language": "Python", "license": null, "readme": "# trac_to_gh\nAn experimental repo for trac->GitHub transition\n", "release_dates": []}, {"name": "utmost-website", "description": "UTMOST Website", "language": "Python", "license": null, "readme": null, "release_dates": []}, {"name": "website", "description": "this is the code for the sagemath.org website", "language": "HTML", "license": null, "readme": "[![Build Status](https://travis-ci.org/sagemath/website.svg?branch=master)](https://travis-ci.org/sagemath/website)\n# [Sagemath.org](https://www.sagemath.org/) Website\n\n\nThe `src` contains the sources for the files,\nthey are rendered to fill-in the blanks for the templates\nand the output is placed into `www`.\n\nThere are various support scripts for processing the data sources\nand a `makefile` to help working with it.\n\nGetting Started\n---------------\n\nMake sure to not only clone from here or your fork,\nbut also to initialize all\n[submodules](http://git-scm.com/book/en/Git-Tools-Submodules).\n\n    git clone --recursive git@github.com:sagemath/website.git\n\nor if you forgot the `--recursive` switch, do this:\n\n    git submodule update --init --recursive\n\nLater, don't forget to not only update the `website` project,\nbut also the submodules\n(or whatever it is the right thing to do).\nFor example:\n\n    git submodule foreach \"git checkout master; git pull origin master\"\n\n### Ubuntu Packages\n\nTo get started on Ubuntu:\n\n    sudo apt-get install -y pybtex python-jinja2 python-markdown python-yaml\n\nDevelopment\n-----------\n\nThe website needs various data-sources to build its pages.\nFor example, the publications pages use HTML snippets\ngenerated by the `publications` submodule.\n\nIdeally, a courageous `make` should do everything for you\nand an additional `make open` opens up your web-browser\nto inspect the result.\n\nTo test the website under realistic conditions,\n`make server` starts a minimal HTTP server on port 8181 and\n`make show` opens it in your web-browser.\n\n### NQ8 Images\n\nShrinking PNG images further down via e.g.\n\n    pngnq -v -f -s 64 index_icons.png\n\n\n### Continuous Build Mode\n\nFor your convenience, there is a continuous build mode available: `make cont`\n\nIt depends on\n\n* [pyInotify](https://github.com/seb-m/pyinotify) - `pip install --user pyinotify` -\n  to pick up any changes in your local file-system.\n\n* [xdotool](http://www.semicomplete.com/projects/xdotool/) - `apt-get install xdotool` -\n  which does reload the open tab in your web-browser (by sending `Shift+Ctrl+R`).\n\nTheir combined effect is that less than a second after you \"save\" a file,\nyou can see the result without lifting a finger.\n\nStyle\n-----\n\n* HTML: Modern HTML5, but nothing too fancy please.\n  One of the main design goals is that everything should still work\n  without Javascript and no Flash.\n\n* Python: PEP8 is authoritative for various Python scripts -- except E501 (long lines).\n  Just make sure your `pep8` and `autopep8` is up-to-date and\n  do a healthy `make style` to clean up your code before you commit.\n\nLicense\n-------\n\nThe actual content and included media files are licensed under\n[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)\nlike the rest of the Sage documentation pages.\n\nThe included scripts have their appropriate licensing\nexplained at the top of their respective source files.\nIf no licensing information can be found,\nregard it as [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).\n\n### markerclusterer.js\n\nThat's copied from https://github.com/googlemaps/js-marker-clusterer\n\n\nGoogle Cloud Storage Notes\n--------------------------\n\n* RSync: `gsutil -m rsync -d -r www gs://www.sagemath.org`\n* Publish all files: `gsutil -m acl ch -r -u AllUsers:R gs://www.sagemath.org`\n* Cache-Control 10 minutes: `gsutil -m setmeta -r -h \"Cache-Control:public, max-age=600\" gs://www.sagemath.org`\n", "release_dates": []}]