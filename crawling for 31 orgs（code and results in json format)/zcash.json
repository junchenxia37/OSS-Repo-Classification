[{"name": ".github", "description": null, "language": null, "license": null, "readme": "# .github\n", "release_dates": []}, {"name": "developers", "description": null, "language": "Python", "license": null, "readme": "# Zcash Developers Hub\n\nThis is the source repository for the Zcash Developers Hub website: https://zcash.github.io/developers/\n\nFor now, this repo hosts the script used to generate ECC's development dependency graph, and a workflow that generates and hosts it.\n\n## Setup\n\nThis project uses `poetry` for dependency management: https://python-poetry.org/\nIt also depends on the Graphviz library; for Debian-based distros, install the\n`libgraphviz-dev` package.\n\nAfter installing `poetry`, run `poetry install`.\n\n### Authorization Tokens\n\nThe scripts provided by this project require two files:\n\n- `GITHUB_TOKEN`: a GitHub API token with permission to read the necessary repositories.\n- `ZENHUB_TOKEN`: a ZenHub REST API token. (Not a GraphQL token.)\n\nAfter generating each token, paste the literal contents into the associated file. There is a\n`.gitignore` which ignores these files to ensure they are not committed. Be careful to avoid\nthat editor temporary files or any copies or renames of these files aren't committed.\n\nYou can generate a GitHub token with [this url](https://github.com/settings/tokens/new). This\ntoken should not have any excess authority; it only needs public read access! Make sure all of\nthose extra capability checkboxes are unchecked.\n\nThe DAG script depends upon GraphQL APIs for GitHub which can be generated using\n`./gen-schema.sh`.\n\n## Generating DAGs\n\nThe simplest way to generate one or more DAGs is to use `./gen-dag.sh` script. This takes\na list of DAGs to render as arguments (default: `core wallet tfl halo2 zf`).\n\nAlternatively, the `zcash-issue-dag.py` script supports several configuration options\nsupplied as environment variables:\n\n- `DAG_VIEW=[core|halo2|tfl|wallet|wallet-ios|wallet-android|zf]`: The DAG to render (default: `core`).\n- `SHOW_MILESTONES=[true|false]`: Whether or not to render GitHub milestones as boxes (default: `false`).\n- `SHOW_EPICS=[true|false]`: Whether or not to render ZenHub epics as boxes (default: `false`).\n- `INCLUDE_FINISHED=[true|false]`: Whether or not to include closed issues with no open blockers (default: `false`).\n\nExample command:\n\n```\nDAG_VIEW=core SHOW_MILESTONES=false poetry run python ./zcash-issue-dag.py\n```\n", "release_dates": []}, {"name": "gitian.sigs", "description": "Gitian signatures for Zcash", "language": "Python", "license": null, "readme": "This repository contains Gitian signatures for [Zcash](https://github.com/zcash/zcash).\n\nIt should be updated on each release.\n\nIf you have 2FA on your GitHub account, you'll need an auth token to push your sigs from within the Vagrant VM.\nAnother way is to copy them into a clone of this repo on your local computer before pushing:\n\n`vagrant scp :/home/vagrant/gitian.sigs/v1.0.11 ~/Zcash/gitian.sigs/`\n", "release_dates": []}, {"name": "halo2", "description": "The Halo2 zero-knowledge proving system", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# halo2\n\n## Usage\n\nThis repository contains the [halo2_proofs](halo2_proofs/README.md) and\n[halo2_gadgets](halo2_gadgets/README.md) crates, which should be used directly.\n\n## Minimum Supported Rust Version\n\nRequires Rust **1.60** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be done with a\nminor version bump.\n\n## Controlling parallelism\n\n`halo2` currently uses [rayon](https://github.com/rayon-rs/rayon) for parallel computation.\nThe `RAYON_NUM_THREADS` environment variable can be used to set the number of threads.\n\nYou can disable `rayon` by disabling the `\"multicore\"` feature.\nWarning! Halo2 will lose access to parallelism if you disable the `\"multicore\"` feature.\nThis will significantly degrade performance.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "halo2_legacy_pdqsort", "description": null, "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# halo2_legacy_pdqsort [![Crates.io](https://img.shields.io/crates/v/halo2_legacy_pdqsort.svg)](https://crates.io/crates/halo2_legacy_pdqsort) #\n\n## [Documentation](https://docs.rs/halo2_legacy_pdqsort)\n\n## Description\n\nA copy of the `core::slice::sort` module from the Rust 1.56.1 standard\nlibrary, modified to behave the same on 32-bit platforms as on 64-bit.\nThis is intended to work around a determinism bug in the\n[`halo2_proofs`](https://github.com/zcash/halo2) crate.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "homebrew-formulae", "description": "A homebrew tap for zcash projects", "language": "Ruby", "license": null, "readme": "# Homebrew Formulae\n> [brew tap][] by [@zcash][].\n\n## Usage\n\nPackages in located in the [./Formula][] directory can be installed via canonical formula path:\n\n    brew install --verbose zcash/formulae/zecwallet-light-cli\n\nor, add the `zcash/formulae` tap:\n\n    brew tap zcash/formulae\n\nthen, install packages contained in the tap:\n\n    brew install zecwallet-light-cli\n\n## Casks\n> [zecwallet-lite](https://formulae.brew.sh/cask/zecwallet-lite) ([source](https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/zecwallet-lite.rb))\n```\n\u276f brew install --cask zecwallet-lite\n```\n\n## Contributing\n\nSubmit pull requests against the respective repos:\n\n* [zecwallet-cli](https://github.com/adityapk00/zecwallet-light-cli) ([releases](https://github.com/adityapk00/zecwallet-lite/releases))\n\n\n[./Formula]: https://github.com/zcash/homebrew-formulae/tree/master/Formula\n[@zcash]: https://github.com/zcash\n[brew tap]: https://github.com/Homebrew/brew/blob/master/docs/Taps.md\n", "release_dates": []}, {"name": "incrementalmerkletree", "description": "An append-only merkle tree which is always pruned, along with incremental, fast-forwarding witnesses", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": null, "release_dates": []}, {"name": "lcwg", "description": "Light Client Working Group project management repository", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Light Client Working Group - Project Management Repository\n\nThis repository is used for project management for various initiatives affecting Zcash light clients. The main use of this repository is for the LCWG bi-weekly meeting. It is setup and modeled after the [Ethereum Project Management Repository](https://github.com/ethereum/pm/) under the guidance and direct advice of it's creator @Souptacular, building on 4+ years of lessons learned [herding cats on ETH](https://www.ethereumcatherders.com/).\n\n## LCWG Devs Meetings\n\n### Purpose\nThe Light Client Working Group Devs meeting is a technical call intended to bring together various development teams who play major roles in determining the direction of light clients. Zcash light client teams provide updates on their projects, discuss various open issues and [ZIPs](https://zips.z.cash/) related to light client work, and support each other as we build the connection between users and Zcash.\n\n### Agendas\n\nThe agendas for the calls are tracked in the Issues tab of this repository, under the \"agenda\" label ([link](https://github.com/zcash/lcwg/issues?q=is%3Aissue+label%3Aagenda+)). To add an item to an agenda, please [open an issue in this repository](https://github.com/zcash/lcwg/issues/new) which mentions the topic you want to discuss and links any relevant materials (ZIPs, prototypes, github issues, etc.). Then, leave a comment in the agenda where you would like this to be discussed. You can see an example [here](https://github.com/ethereum/pm/issues/289#issuecomment-809501046).\n\nAnyone is welcome to add an item to the agenda as long as it follows these guidelines:\n- The topic is technical in nature.\n- The topic involves light clients at a low-level.\n- The topic should not be philosophical. The LCWG developer meetings are not meant to decide contentious issues that should be decided by the community. There are exceptions to this but generally these topics distract from more productive technical discussion.\n\n### Who Can Attend\nLight client developers, Protocol developers, and lightwalletd developers are invited to attend the meetings. This is not a meeting for passive participants. The primary guidelines are:\n#### Attendance Guidelines\n- Attendees must adhere to the Zcash [Code of Conduct](https://electriccoin.co/code-of-conduct/)\n- You have been actively pushing PRs to wallet projects\n  - For at least the last 6 months\n  - OR at least 10 PRs total to Zcash wallet projects\n- No anonymous attendees\n  - These are working meetings and members are most comfortable when they can put a face to a name\n \nGenerally every light client is represented. Sometimes a non-developer with particular expertise on a topic is invited on to discuss a specific agenda item. If you feel you would contribute to the meetings by your attendance please reach out to @pacu.\n\n### Who Manages the Meetings\n- @pacu as ZWCD takes notes and facilitates \n- @decentralistdan facilitates and provides conference call venue on behalf of ZF\n\n### Previous Meetings\n\n \u2116  | Date                             | Agenda        |Notes          | Recording            |\n--- | -------------------------------- | -------------- |-------------- | -------------------- |\n71 | February 22nd, 2024 17:00 UTC | [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-71.md) | not recorded |\n70 | February 8th, 2024 17:00 UTC | [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-70.md) | not recorded |\n69 | January 25th, 2024 17:00 UTC | [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-69.md) | not recorded |\n68 | January 11th, 2024 17:00 UTC | [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-68.md) | not recorded |\n67 | December 14th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-67.md) | not recorded |\n66 | November 30th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-66.md) | not recorded |\n65 | November 16th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-65.md) | not recorded |\n64 | November 2nd, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-64.md) | not recorded |\n63 | October 19th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-63.md) | not recorded |\n62 | October 5th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-62.md) | not recorded |\n61 | September 21st, 2023 17:00 UTC| [agenda] | notes N/A | not recorded |\n60 | September 7th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-60.md) | not recorded |\n59 | August 31st, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-59.md) | not recorded |\n58 | August 23rd, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-58.md) | not recorded |\n57 | August 17th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-57.md) | not recorded |\n56 | August 10th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-56.md) | not recorded |\n55 | August 3rd, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-55.md) | not recorded | \n54 | July 13th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-54.md) | not recorded | \n53 | June 29th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-53.md) | not recorded | \n52 | June 15th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-52.md) | not recorded | \n51 | June 1st, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-51.md) | not recorded | \n50 | May 18th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-50.md) | not recorded | \n49 | May 4th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-49.md) | not recorded | \n48 | April 20th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-48.md) | not recorded | \n47 | April 6th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-47.md) | not recorded | \n46 | March 23rd, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-46.md) | not recorded | \n45 | March 9th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-45.md) | not recorded | \n44 | February 23rd, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-44.md) | not recorded | \n43 | February 9th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-43.md) | not recorded | \n42 | January 26th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-42.md) | not recorded | \n41 | January 12th, 2023 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-41.md) | not recorded | \n40 | December 15th, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-40.md) | not recorded | \n39 | December 1st, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-39.md) | not recorded | \n38 | November 17th, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-38.md) | not recorded | \n37 | November 3rd, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-37.md) | not recorded | \n36 | October 20th, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-36.md) | not recorded | \n35 | October 6th, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-35.md) | not recorded | \n34 | September 8th, 2022 17:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-34.md) | not recorded | \n33 | August 26th, 2022 16:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-33.md) | not recorded | \n32 | July 27th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-32.md) | not recorded | \n31 | July 13th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-31.md) | not recorded | \n30 | June 29th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-30.md) | not recorded | \n29 | June 15th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-29.md) | not recorded | \n28 | June 1st, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-28.md) | not recorded | \n27 | May 18th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-27.md) | not recorded | \n26 | May 4th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-26.md) | not recorded | \n25 | April 20th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-25.md) | not recorded | \n24 | April 6th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-24.md) | not recorded | \n23 | March 23rd, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-23.md) | not recorded | \n22 | March 9th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-22.md) | not recorded | \n21 | February 23rd, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-21.md) | not recorded | \n20 | February 9th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-20.md) | not recorded | \n19 | January 28th, 2022 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-19.md) | not recorded | \n18 | December 17th, 2021 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-18.md) | not recorded | \n17 | December 3rd, 2021 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-17.md) | not recorded | \n16 | November 19th, 2021 15:00 UTC| [agenda]| [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-16.md) | not recorded | \n15 | October 22th, 2021 15:00 UTC| [agenda] | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-15.md) | not recorded | \n14 | September 24th, 2021 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/25) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-14.md) | not recorded | \n13 | September 10th, 2021 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/24) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-13.md) | not recorded | \n12 | Friday 27 Aug 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/22) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-12.md) | not recorded | \n11 | Friday 13 Aug 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/21) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-11.md) | not recorded | \n10 | Friday 30 Jul 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/18) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-10.md) | not recorded | \n9 | Friday 16 Jul 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/15) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-9.md) | not recorded | \n8 | Friday 25 Jun 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/12) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-8.md) | not recorded | \n7 | Friday 11 Jun 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/8) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-7.md) | not recorded | \n6 | Friday 28 May 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/7) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-6.md) | not recorded | \n5 | Friday 21 May 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/6) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-5.md) | not recorded | \n4 | Friday 14 May 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/5) | [notes](https://github.com/zcash/lcwg/blob/main/meeting-notes/lcwg-dev-4.md) | not recorded | \n3 | Friday 07 May 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/4) | no notes | not recorded | \n2 | Friday 30 Apr 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/3) | no notes | not recorded | \n1 | Friday 23 Apr 2021, 15:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/2) | no notes | not recorded | \n0 | Friday 05 Mar 2021, 20:00 UTC| [agenda](https://github.com/zcash/lcwg/issues/1) | no notes | not recorded | \n", "release_dates": []}, {"name": "librustzcash", "description": "Rust-language assets for Zcash", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Zcash Rust crates\n\nThis repository contains a (work-in-progress) set of Rust crates for\nworking with Zcash.\n\n## Security Warnings\n\nThese libraries are currently under development and have not been fully-reviewed.\n\n## License\n\nAll code in this workspace is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": ["2023-06-28T19:32:26Z", "2021-04-02T03:22:19Z", "2021-01-22T23:41:28Z", "2021-01-22T23:40:46Z", "2021-01-22T23:39:15Z", "2019-11-19T23:02:40Z"]}, {"name": "libsnark", "description": "libsnark: a C++ library for zkSNARK proofs", "language": "C++", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "libsnark: a C++ library for zkSNARK proofs\n================================================================================\n\n\ud83d\udea9\ud83d\udea9\ud83d\udea9 This repository is not maintained \ud83d\udea9\ud83d\udea9\ud83d\udea9\n---------------------------------------------\n\nThis is the fork of libsnark that was used by Zcash up to the point at which\n[zcashd stopped verifying BCTV14/BN254 proofs](https://github.com/zcash/zcash/pull/4060)\nin 2019. It is retained purely for historical reference, and we would not recommend\nusing it in any deployment.\n\n--------------------------------------------------------------------------------\nAuthors\n--------------------------------------------------------------------------------\n\nThe libsnark library is developed by the [SCIPR Lab] project and contributors\nand is released under the MIT License (see the [LICENSE] file).\n\nCopyright (c) 2012-2014 SCIPR Lab and contributors (see [AUTHORS] file).\n\n--------------------------------------------------------------------------------\n[TOC]\n\n<!---\n  NOTE: the file you are reading is in Markdown format, which is is fairly readable\n  directly, but can be converted into an HTML file with much nicer formatting.\n  To do so, run \"make doc\" (this requires the python-markdown package) and view\n  the resulting file README.html. Alternatively, view the latest HTML version at\n  https://github.com/scipr-lab/libsnark .\n-->\n\n--------------------------------------------------------------------------------\nOverview\n--------------------------------------------------------------------------------\n\nThis library implements __zkSNARK__ schemes, which are a cryptographic method\nfor proving/verifying, in zero knowledge, the integrity of computations.\n\nA computation can be expressed as an NP statement, in forms such as the following:\n\n- \"The C program _foo_, when executed, returns exit code 0 if given the input _bar_ and some additional input _qux_.\"\n- \"The Boolean circuit _foo_ is satisfiable by some input _qux_.\"\n- \"The arithmetic circuit _foo_ accepts the partial assignment _bar_, when extended into some full assignment _qux_.\"\n- \"The set of constraints _foo_ is satisfiable by the partial assignment _bar_, when extended into some full assignment _qux_.\"\n\nA prover who knows the witness for the NP statement (i.e., a satisfying input/assignment) can produce a short proof attesting to the truth of the NP statement. This proof can be verified by anyone, and offers the following properties.\n\n-   __Zero knowledge:__\n    the verifier learns nothing from the proof beside the truth of the statement (i.e., the value _qux_, in the above examples, remains secret).\n-   __Succinctness:__\n    the proof is short and easy to verify.\n-   __Non-interactivity:__\n    the proof is a string (i.e. it does not require back-and-forth interaction between the prover and the verifier).\n-   __Soundness:__\n    the proof is computationally sound (i.e., it is infeasible to fake a proof of a false NP statement). Such a proof system is also called an _argument_.\n-   __Proof of knowledge:__\n    the proof attests not just that the NP statement is true, but also that the\n    prover knows why (e.g., knows a valid _qux_).\n\nThese properties are summarized by the _zkSNARK_ acronym, which stands for _Zero-Knowledge Succinct Non-interactive ARgument of Knowledge_ (though zkSNARKs are also knows as\n_succinct non-interactive computationally-sound zero-knowledge proofs of knowledge_).\nFor formal definitions and theoretical discussions about these, see\n\\[BCCT12], \\[BCIOP13], and the references therein.\n\nThe libsnark library currently provides a C++ implementation of:\n\n1.  General-purpose proof systems:\n    1.  A preprocessing zkSNARK for the NP-complete language \"R1CS\"\n        (_Rank-1 Constraint Systems_), which is a language that is similar to arithmetic\n        circuit satisfiability.\n    2. A preprocessing SNARK for a language of arithmetic circuits, \"BACS\"\n       (_Bilinear Arithmetic Circuit Satisfiability_). This simplifies the writing\n       of NP statements when the additional flexibility of R1CS is not needed.\n       Internally, it reduces to R1CS.\n    3. A preprocessing SNARK for the language \"USCS\"\n       (_Unitary-Square Constraint Systems_). This abstracts and implements the core\n       contribution of \\[DFGK14]\n    4. A preprocessing SNARK for a language of Boolean circuits, \"TBCS\"\n       (_Two-input Boolean Circuit Satisfiability_). Internally, it reduces to USCS.\n       This is much more  efficient than going through R1CS.\n    5. ADSNARK, a preprocessing SNARKs for proving statements on authenticated\n       data, as described in \\[BBFR15].\n    6. Proof-Carrying Data (PCD). This uses recursive composition of SNARKs, as\n       explained in \\[BCCT13] and optimized in \\[BCTV14b].\n2.  Gadget libraries (gadgetlib1 and gadgetlib2) for constructing R1CS\n    instances out of modular \"gadget\" classes.\n3.  Examples of applications that use the above proof systems to prove\n    statements about:\n    1. Several toy examples.\n    2. Execution of TinyRAM machine code, as explained in \\[BCTV14a] and\n       \\[BCGTV13]. (Such machine code can be obtained, e.g., by compiling from C.)\n       This is easily adapted to any other Random Access Machine that satisfies a\n       simple load-store interface.\n    3. A scalable for TinyRAM using Proof-Carrying Data, as explained in \\[BCTV14b]\n    4. Zero-knowldge cluster MapReduce, as explained in \\[CTV15].\n\nThe zkSNARK construction implemented by libsnark follows, extends, and\noptimizes the approach described in \\[BCTV14], itself an extension of\n\\[BCGTV13], following the approach of \\[BCIOP13] and \\[GGPR13]. An alternative\nimplementation of the basic approach is the _Pinocchio_ system of \\[PGHR13].\nSee these references for discussions of efficiency aspects that arise in\npractical use of such constructions, as well as security and trust\nconsiderations.\n\nThis scheme is a _preprocessing zkSNARK_ (_ppzkSNARK_): before proofs can be\ncreated and verified, one needs to first decide on a size/circuit/system\nrepresenting the NP statements to be proved, and run a _generator_ algorithm to\ncreate corresponding public parameters (a long proving key and a short\nverification key).\n\nUsing the library involves the following high-level steps:\n\n1.  Express the statements to be proved as an R1CS (or any of the other\n    languages above, such as arithmetic circuits, Boolean circuits, or TinyRAM).\n    This is done by writing C++ code that constructs an R1CS, and linking this code\n    together with libsnark\n2.  Use libsnark's generator algorithm to create the public parameters for this\n    statement (once and for all).\n3.  Use libsnark's prover algorithm to create proofs of true statements about\n    the satisfiability of the R1CS.\n4.  Use libsnark's verifier algorithm to check proofs for alleged statements.\n\n\n--------------------------------------------------------------------------------\nThe NP-complete language R1CS\n--------------------------------------------------------------------------------\n\nThe ppzkSNARK supports proving/verifying membership in a specific NP-complete\nlanguage: R1CS (*rank-1 constraint systems*). An instance of the language is\nspecified by a set of equations over a prime field F, and each equation looks like:\n                   < A, (1,X) > * < B , (1,X) > = < C, (1,X) >\nwhere A,B,C are vectors over F, and X is a vector of variables.\n\nIn particular, arithmetic (as well as boolean) circuits are easily reducible to\nthis language by converting each gate into a rank-1 constraint. See \\[BCGTV13]\nAppendix E (and \"System of Rank 1 Quadratic Equations\") for more details about this.\n\n\n--------------------------------------------------------------------------------\nElliptic curve choices\n--------------------------------------------------------------------------------\n\nThe ppzkSNARK can be instantiated with different parameter choices, depending on\nwhich elliptic curve is used. The libsnark library currently provides three\noptions:\n\n* \"edwards\":\n   an instantiation based on an Edwards curve, providing 80 bits of security.\n\n* \"bn128\":\n   an instantiation based on a Barreto-Naehrig curve, providing 128\n   bits of security. The underlying curve implementation is\n   \\[ate-pairing], which has incorporated our patch that changes the\n   BN curve to one suitable for SNARK applications.\n\n    *   This implementation uses dynamically-generated machine code for the curve\n        arithmetic. Some modern systems disallow execution of code on the heap, and\n        will thus block this implementation.\n\n        For example, on Fedora 20 at its default settings, you will get the error\n        `zmInit ERR:can't protect` when running this code. To solve this,\n        run `sudo setsebool -P allow_execheap 1` to allow execution,\n        or use `make CURVE=ALT_BN128` instead.\n\n* \"alt_bn128\":\n   an alternative to \"bn128\", somewhat slower but avoids dynamic code generation.\n\nNote that bn128 requires an x86-64 CPU while the other curve choices\nshould be architecture-independent; see [portability](#portability).\n\n\n--------------------------------------------------------------------------------\nGadget libraries\n--------------------------------------------------------------------------------\n\nThe libsnark library currently provides two libraries for conveniently constructing\nR1CS instances out of reusable \"gadgets\". Both libraries provide a way to construct\ngadgets on other gadgets as well as additional explicit equations. In this way,\ncomplex R1CS instances can be built bottom up.\n\n### gadgetlib1\n\nThis is a low-level library which expose all features of the preprocessing\nzkSNARK for R1CS. Its design is based on templates (as does the ppzkSNARK code)\nto efficiently support working on multiple elliptic curves simultaneously. This\nlibrary is used for most of the constraint-building in libsnark, both internal\n(reductions and Proof-Carrying Data) and examples applications.\n\n### gadgetlib2\n\nThis is an alternative library for constructing systems of polynomial equations\nand, in particular, also R1CS instances. It is better documented and easier to\nuse than gadgetlib1, and its interface does not use templates. However, fewer\nuseful gadgets are provided.\n\n\n--------------------------------------------------------------------------------\nSecurity\n--------------------------------------------------------------------------------\n\nThe theoretical security of the underlying mathematical constructions, and the\nrequisite assumptions, are analyzed in detailed in the aforementioned research\npapers.\n\n**\nThis code is a research-quality proof of concept, and has not\nyet undergone extensive review or testing. It is thus not suitable,\nas is, for use in critical or production systems.\n**\n\nKnown issues include the following:\n\n* The ppzkSNARK's generator and prover exhibit data-dependent running times\n  and memory usage. These form timing and cache-contention side channels,\n  which may be an issue in some applications.\n\n* Randomness is retrieved from /dev/urandom, but this should be\n  changed to a carefully considered (depending on system and threat\n  model) external, high-quality randomness source when creating\n  long-term proving/verification keys.\n\n\n--------------------------------------------------------------------------------\nBuild instructions\n--------------------------------------------------------------------------------\n\nThe libsnark library relies on the following:\n\n- C++ build environment\n- GMP for certain bit-integer arithmetic\n- libprocps for reporting memory usage\n- GTest for some of the unit tests\n\nSo far we have tested these only on Linux, though we have been able to make the library work,\nwith some features disabled (such as memory profiling or GTest tests), on Windows via Cygwin\nand on Mac OS X. (If you succeed in achieving more complete ports of the library, please\nlet us know!) See also the notes on [portability](#portability) below.\n\nFor example, on a fresh install of Ubuntu 14.04, install the following packages:\n\n    $ sudo apt-get install build-essential git libgmp3-dev libprocps3-dev libgtest-dev python-markdown libboost-all-dev libssl-dev\n\nOr, on Fedora 20:\n\n    $ sudo yum install gcc-c++ make git gmp-devel procps-ng-devel gtest-devel python-markdown\n\nRun the following, to fetch dependencies from their GitHub repos and compile them.\n(Not required if you set `CURVE` to other than the default `BN128` and also set `NO_SUPERCOP=1`.)\n\n    $ ./prepare-depends.sh\n\nThen, to compile the library, tests, profiling harness and documentation, run:\n\n    $ make\n\nTo create just the HTML documentation, run\n\n    $ make doc\n\nand then view the resulting `README.html` (which contains the very text you are reading now).\n\nTo create Doxygen documentation summarizing all files, classes and functions,\nwith some (currently sparse) comments, install the `doxygen` and `graphviz` packages, then run\n\n    $ make doxy\n\n(this may take a few minutes). Then view the resulting [`doxygen/index.html`](doxygen/index.html).\n\n### Using libsnark as a library\n\nTo develop an application that uses libsnark, you could add it within the libsnark directory tree and adjust the Makefile, but it is far better to build libsnark as a (shared or static) library. You can then write your code in a separate directory tree, and link it against libsnark.\n\n\nTo build just the shared object library `libsnark.so`, run:\n\n    $ make lib\n\nTo build just the static library `libsnark.a`, run:\n\n    $ make lib STATIC=1\n\nNote that static compilation requires static versions of all libraries it depends on.\nIt may help to minize these dependencies by appending\n`CURVE=ALT_BN128 NO_PROCPS=1 NO_GTEST=1 NO_SUPERCOP=1`. On Fedora 21, the requisite \nlibrary RPM dependencies are then: \n`boost-static glibc-static gmp-static libstdc++-static openssl-static zlib-static\n boost-devel glibc-devel gmp-devel gmp-devel libstdc++-devel openssl-devel openssl-devel`.\n\nTo build *and install* the libsnark library:\n\n    $ make install PREFIX=/install/path\n\nThis will install `libsnark.so` into `/install/path/lib`; so your application should be linked using `-L/install/path/lib -lsnark`. It also installs the requisite headers into `/install/path/include`; so your application should be compiled using `-I/install/path/include`.\n\nIn addition, unless you use `NO_SUPERCOP=1`, `libsupercop.a` will be installed and should be linked in using `-lsupercop`.\n\n\n### Building on Windows using Cygwin\nInstall Cygwin using the graphical installer, including the `g++`, `libgmp`\nand `git` packages. Then disable the dependencies not easily supported under CygWin,\nusing:\n\n    $ make NO_PROCPS=1 NO_GTEST=1 NO_DOCS=1\n\n\n### Building on Mac OS X\n\nOn Mac OS X, install GMP from MacPorts (`port install gmp`). Then disable the\ndependencies not easily supported under CygWin, using:\n\n    $ make NO_PROCPS=1 NO_GTEST=1 NO_DOCS=1\n\nMacPorts does not write its libraries into standard system folders, so you\nmight need to explicitly provide the paths to the header files and libraries by\nappending `CXXFLAGS=-I/opt/local/include LDFLAGS=-L/opt/local/lib` to the line\nabove. Similarly, to pass the paths to ate-pairing you would run\n`INC_DIR=-I/opt/local/include LIB_DIR=-L/opt/local/lib ./prepare-depends.sh`\ninstead of `./prepare-depends.sh` above.\n\n--------------------------------------------------------------------------------\nTutorials\n--------------------------------------------------------------------------------\n\nlibsnark includes a tutorial, and some usage examples, for the high-level API.\n\n* `src/gadgetlib1/examples1` contains a simple example for constructing a\n  constraint system using gadgetlib1.\n\n* `src/gadgetlib2/examples` contains a tutorial for using gadgetlib2 to express\n  NP statements as constraint systems. It introduces basic terminology, design\n  overview, and recommended programming style. It also shows how to invoke\n  ppzkSNARKs on such constraint systems. The main file, `tutorial.cpp`, builds\n  into a standalone executable.\n\n* `src/zk_proof_systems/ppzksnark/r1cs_ppzksnark/profiling/profile_r1cs_ppzksnark.cpp`\n  constructs a simple constraint system and runs the ppzksnark. See below for how to\n   run it.\n\n\n--------------------------------------------------------------------------------\nExecuting profiling example\n--------------------------------------------------------------------------------\n\nThe command\n\n     $ src/zk_proof_systems/ppzksnark/r1cs_ppzksnark/profiling/profile_r1cs_ppzksnark 1000 10 Fr\n\nexercises the ppzkSNARK (first generator, then prover, then verifier) on an\nR1CS instance with 1000 equations and an input consisting of 10 field elements.\n\n(If you get the error `zmInit ERR:can't protect`, see the discussion\n[above](#elliptic-curve-choices).)\n\nThe command\n\n     $ src/zk_proof_systems/ppzksnark/r1cs_ppzksnark/profiling/profile_r1cs_ppzksnark 1000 10 bytes\n\ndoes the same but now the input consists of 10 bytes.\n\n\n--------------------------------------------------------------------------------\nBuild options\n--------------------------------------------------------------------------------\n\nThe following flags change the behavior of the compiled code.\n\n*    `make FEATUREFLAGS='-Dname1 -Dname2 ...'`\n\n     Override the active conditional #define names (you can see the default at the top of the Makefile).\n     The next bullets list the most important conditionally-#defined features.\n     For example, `make FEATUREFLAGS='-DBINARY_OUTPUT'` enables binary output and disables the default\n     assembly optimizations and Montgomery-representation output.\n\n*    define `BINARY_OUTPUT`\n\n     In serialization, output raw binary data (instead of decimal, when not set).\n\n*   `make CURVE=choice` / define `CURVE_choice` (where `choice` is one of: \n     ALT_BN128, BN128, EDWARDS, MNT4, MNT6)\n\n     Set the default curve to one of the above (see [elliptic curve choices](#elliptic-curve-choices)).\n\n*   `make DEBUG=1` / define `DEBUG`\n\n    Print additional information for debugging purposes.\n\n*   `make LOWMEM=1` / define `LOWMEM`\n\n    Limit the size of multi-exponentiation tables, for low-memory platforms.\n\n*   `make NO_DOCS=1`\n\n     Do not generate HTML documentation, e.g. on platforms where Markdown is not easily available.\n\n*   `make NO_PROCPS=1`\n\n     Do not link against libprocps. This disables memory profiling.\n\n*   `make NO_GTEST=1`\n\n     Do not link against GTest. The tutorial and test suite of gadgetlib2 tutorial won't be compiled.\n\n*   `make NO_SUPERCOP=1`\n\n     Do not link against SUPERCOP for optimized crypto. The ADSNARK executables will not be built.\n\n*   `make MULTICORE=1`\n\n     Enable parallelized execution of the ppzkSNARK generator and prover, using OpenMP.\n     This will utilize all cores on the CPU for heavyweight parallelizabe operations such as\n     FFT and multiexponentiation. The default is single-core.\n\n     To override the maximum number of cores used, set the environment variable `OMP_NUM_THREADS`\n     at runtime (not compile time), e.g., `OMP_NUM_THREADS=8 test_r1cs_sp_ppzkpc`. It defaults\n     to the autodetected number of cores, but on some devices, dynamic core management confused\n     OpenMP's autodetection, so setting `OMP_NUM_THREADS` is necessary for full utilization.\n\n*   define `NO_PT_COMPRESSION`\n\n    Do not use point compression.\n    This gives much faster serialization times, at the expense of ~2x larger\n    sizes for serialized keys and proofs.\n\n*   define `MONTGOMERY_OUTPUT` (on by default)\n\n    Serialize Fp elements as their Montgomery representations. If this\n    option is disabled then Fp elements are serialized as their\n    equivalence classes, which is slower but produces human-readable\n    output.\n\n*   `make PROFILE_OP_COUNTS=1` / define `PROFILE_OP_COUNTS`\n\n    Collect counts for field and curve operations inside static variables\n    of the corresponding algebraic objects. This option works for all\n    curves except bn128.\n\n*   define `USE_ASM` (on by default)\n\n    Use unrolled assembly routines for F[p] arithmetic and faster heap in\n    multi-exponentiation. (When not set, use GMP's `mpn_*` routines instead.)\n\n*   define `USE_MIXED_ADDITION`\n\n    Convert each element of the proving key and verification key to\n    affine coordinates. This allows using mixed addition formulas in\n    multiexponentiation and results in slightly faster prover and\n    verifier runtime at expense of increased proving time.\n\n*   `make PERFORMANCE=1`\n\n    Enables compiler optimizations such as link-time optimization, and disables debugging aids.\n    (On some distributions this causes a `plugin needed to handle lto object` link error and `undefined reference`s, which can be remedied by `AR=gcc-ar make ...`.)\n\nNot all combinations are tested together or supported by every part of the codebase.\n\n\n--------------------------------------------------------------------------------\nPortability\n--------------------------------------------------------------------------------\n\nlibsnark is written in fairly standard C++11.\n\nHowever, having been developed on Linux on x86-64 CPUs, libsnark has some limitations\nwith respect to portability. Specifically:\n\n1. libsnark's algebraic data structures assume little-endian byte order.\n\n2. Profiling routines use `clock_gettime` and `readproc` calls, which are Linux-specific.\n\n3. Random-number generation is done by reading from `/dev/urandom`, which is\n   specific to Unix-like systems.\n\n4. libsnark binary serialization routines (see `BINARY_OUTPUT` above) assume\n   a fixed machine word size (i.e. sizeof(mp_limb_t) for GMP's limb data type).\n   Objects serialized in binary on a 64-bit system cannot be de-serialized on\n   a 32-bit system, and vice versa.\n   (The decimal serialization routines have no such limitation.)\n\n5. libsnark requires a C++ compiler with good C++11 support. It has been\n   tested with g++ 4.7, g++ 4.8, and clang 3.4.\n\n6. On x86-64, we by default use highly optimized assembly implementations for some\n   operations (see `USE_ASM` above). On other architectures we fall back to a\n   portable C++ implementation, which is slower.\n\nTested configurations include:\n\n* Debian jessie with g++ 4.7 on x86-64\n* Debian jessie with clang 3.4 on x86-64\n* Fedora 20/21 with g++ 4.8.2/4.9.2 on x86-64 and i686\n* Ubuntu 14.04 LTS with g++ 4.8 on x86-64\n* Ubuntu 14.04 LTS with g++ 4.8 on x86-32, for EDWARDS and ALT_BN128 curve choices\n* Debian wheezy with g++ 4.7 on ARM little endian (Debian armel port) inside QEMU, for EDWARDS and ALT_BN128 curve choices\n* Windows 7 with g++ 4.8.3 under Cygwin 1.7.30 on x86-64 with NO_PROCPS=1, NO_GTEST=1 and NO_DOCS=1, for EDWARDS and ALT_BN128 curve choices\n* Mac OS X 10.9.4 (Mavericks) with Apple LLVM version 5.1 (based on LLVM 3.4svn) on x86-64 with NO_PROCPS=1, NO_GTEST=1 and NO_DOCS=1\n\n\n--------------------------------------------------------------------------------\nDirectory structure\n--------------------------------------------------------------------------------\n\nThe directory structure of the libsnark library is as follows:\n\n* src/ --- main C++ source code, containing the following modules:\n    * algebra/ --- fields and elliptic curve groups\n    * common/ --- miscellaneous utilities\n    * gadgetlib1/ --- gadgetlib1, a library to construct R1CS instances\n        * gadgets/ --- basic gadgets for gadgetlib1\n    * gadgetlib2/ --- gadgetlib2, a library to construct R1CS instances\n    * qap/ --- quadratic arithmetic program\n        * domains/ --- support for fast interpolation/evaluation, by providing\n          FFTs and Lagrange-coefficient computations for various domains\n    * relations/ --- interfaces for expressing statement (relations between instances and witnesses) as various NP-complete languages\n        * constraint_satisfaction_problems/ --- R1CS and USCS languages\n        * circuit_satisfaction_problems/ ---  Boolean and arithmetic circuit satisfiability languages\n        * ram_computations/ --- RAM computation languages\n    * zk_proof_systems --- interfaces and implementations of the proof systems\n    * reductions --- reductions between languages (used internally, but contains many examples of building constraints)\n\n    Some of these module directories have the following subdirectories:\n\n    * ...\n        * examples/ --- example code and tutorials for this module\n        * tests/ --- unit tests for this module\n\n    In particular, the top-level API examples are at `src/r1cs_ppzksnark/examples/` and `src/gadgetlib2/examples/`.\n\n* depsrc/ --- created by `prepare_depends.sh` for retrieved sourcecode and local builds of external code\n  (currently: \\[ate-pairing], and its dependency xbyak).\n\n* depinst/ --- created by `prepare_depends.sh` and `Makefile`\n  for local installation of locally-compiled dependencies.\n\n* doxygen/ --- created by `make doxy` and contains a Doxygen summary of all files, classes etc. in libsnark.\n\n\n--------------------------------------------------------------------------------\nFurther considerations\n--------------------------------------------------------------------------------\n\n### Multiexponentiation window size\n\nThe ppzkSNARK's generator has to solve a fixed-base multi-exponentiation\nproblem.  We use a window-based method in which the optimal window size depends\non the size of the multiexponentiation instance *and* the platform.\n\nOn our benchmarking platform (a 3.40 GHz Intel Core i7-4770 CPU), we have\ncomputed for each curve optimal windows, provided as\n\"fixed_base_exp_window_table\" initialization sequences, for each curve; see\n`X_init.cpp` for X=edwards,bn128,alt_bn128.\n\nPerformance on other platforms may not be optimal (but probably not be far off).\nFuture releases of the libsnark library will include a tool that generates\noptimal window sizes.\n\n\n--------------------------------------------------------------------------------\nReferences\n--------------------------------------------------------------------------------\n\n\\[BBFR15] [\n  _ADSNARK: nearly practical and privacy-preserving proofs on authenticated data_\n](https://eprint.iacr.org/2014/617),\n  Michael Backes, Manuel Barbosa, Dario Fiore, Raphael M. Reischuk,\n  IEEE Symposium on Security and Privacy (Oakland) 2015\n\n\\[BCCT12] [\n  _From extractable collision resistance to succinct non-Interactive arguments of knowledge, and back again_\n](http://eprint.iacr.org/2011/443),\n  Nir Bitansky, Ran Canetti, Alessandro Chiesa, Eran Tromer,\n  Innovations in Computer Science (ITCS) 2012\n\n\\[BCCT13] [\n  _Recursive composition and bootstrapping for SNARKs and proof-carrying data_\n](http://eprint.iacr.org/2012/095)\n  Nir Bitansky, Ran Canetti, Alessandro Chiesa, Eran Tromer,\n  Symposium on Theory of Computing (STOC) 13\n\n\\[BCGTV13] [\n  _SNARKs for C: Verifying Program Executions Succinctly and in Zero Knowledge_\n](http://eprint.iacr.org/2013/507),\n  Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, Madars Virza,\n  CRYPTO 2013\n\n\\[BCIOP13] [\n  _Succinct Non-Interactive Arguments via Linear Interactive Proofs_\n](http://eprint.iacr.org/2012/718),\n  Nir Bitansky, Alessandro Chiesa, Yuval Ishai, Rafail Ostrovsky, Omer Paneth,\n  Theory of Cryptography Conference 2013\n\n\\[BCTV14a] [\n  _Succinct Non-Interactive Zero Knowledge for a von Neumann Architecture_\n](http://eprint.iacr.org/2013/879),\n  Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, Madars Virza,\n  USENIX Security 2014\n\n\\[BCTV14b] [\n  _Scalable succinct non-interactive arguments via cycles of elliptic curves_\n](https://eprint.iacr.org/2014/595),\n  Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, Madars Virza,\n  CRYPTO 2014\n\n\\[CTV15] [\n  _Cluster computing in zero knowledge_\n](https://eprint.iacr.org/2015/377),\n  Alessandro Chiesa, Eran Tromer, Madars Virza,\n  Eurocrypt 2015\n\n\\[DFGK14] [\n  Square span programs with applications to succinct NIZK arguments\n](https://eprint.iacr.org/2014/718),\n  George Danezis, Cedric Fournet, Jens Groth, Markulf Kohlweiss,\n  ASIACCS 2014\n\n\\[GGPR13] [\n  _Quadratic span programs and succinct NIZKs without PCPs_\n](http://eprint.iacr.org/2012/215),\n  Rosario Gennaro, Craig Gentry, Bryan Parno, Mariana Raykova,\n  EUROCRYPT 2013\n\n\\[ate-pairing] [\n  _High-Speed Software Implementation of the Optimal Ate Pairing over Barreto-Naehrig Curves_\n](https://github.com/herumi/ate-pairing),\n  MITSUNARI Shigeo, TERUYA Tadanori\n\n\\[PGHR13] [\n  _Pinocchio: Nearly Practical Verifiable Computation_\n](http://eprint.iacr.org/2013/279),\n  Bryan Parno, Craig Gentry, Jon Howell, Mariana Raykova,\n  IEEE Symposium on Security and Privacy (Oakland) 2013\n\n[SCIPR Lab]: http://www.scipr-lab.org/ (Succinct Computational Integrity and Privacy Research Lab)\n\n[LICENSE]: LICENSE (LICENSE file in top directory of libsnark distribution)\n\n[AUTHORS]: AUTHORS (AUTHORS file in top directory of libsnark distribution)\n", "release_dates": []}, {"name": "lightwalletd", "description": "Lightwalletd is a backend service that provides a bandwidth-efficient interface to the Zcash blockchain", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "\n[![pipeline status](https://gitlab.com/zcash/lightwalletd/badges/master/pipeline.svg)](https://gitlab.com/zcash/lightwalletd/commits/master)\n[![codecov](https://codecov.io/gh/zcash/lightwalletd/branch/master/graph/badge.svg)](https://codecov.io/gh/zcash/lightwalletd)\n\n# Security Disclaimer\n\nlightwalletd is under active development, some features are more stable than\nothers. The code has not been subjected to a thorough review by an external\nauditor, and recent code changes have not yet received security review from\nElectric Coin Company's security team.\n\nDevelopers should familiarize themselves with the [wallet app threat\nmodel](https://zcash.readthedocs.io/en/latest/rtd_pages/wallet_threat_model.html),\nsince it contains important information about the security and privacy\nlimitations of light wallets that use lightwalletd.\n\n---\n\n# Overview\n\n[lightwalletd](https://github.com/zcash/lightwalletd) is a backend service that provides a bandwidth-efficient interface to the Zcash blockchain. Currently, lightwalletd supports the Sapling protocol version and beyond as its primary concern. The intended purpose of lightwalletd is to support the development and operation of mobile-friendly shielded light wallets.\n\nlightwalletd is a backend service that provides a bandwidth-efficient interface to the Zcash blockchain for mobile and other wallets, such as [Zashi](https://github.com/Electric-Coin-Company/zashi-android) and [Ywallet](https://github.com/hhanh00/zwallet).\n\nTo view status of [CI pipeline](https://gitlab.com/zcash/lightwalletd/pipelines)\n\nTo view detailed [Codecov](https://codecov.io/gh/zcash/lightwalletd) report\n\nDocumentation for lightwalletd clients (the gRPC interface) is in `docs/rtd/index.html`. The current version of this file corresponds to the two `.proto` files; if you change these files, please regenerate the documentation by running `make doc`, which requires docker to be installed. \n# Local/Developer docker-compose Usage\n\n[docs/docker-compose-setup.md](./docs/docker-compose-setup.md)\n\n# Local/Developer Usage\n\n## Zcashd\n\nYou must start a local instance of `zcashd`, and its `.zcash/zcash.conf` file must include the following entries\n(set the user and password strings accordingly):\n```\ntxindex=1\nlightwalletd=1\nexperimentalfeatures=1\nrpcuser=xxxxx\nrpcpassword=xxxxx\n```\n\nThe `zcashd` can be configured to run `mainnet` or `testnet` (or `regtest`). If you stop `zcashd` and restart it on a different network (switch from `testnet` to `mainnet`, for example), you must also stop and restart lightwalletd.\n\nIt's necessary to run `zcashd --reindex` one time for these options to take effect. This typically takes several hours, and requires more space in the `.zcash` data directory.\n\nLightwalletd uses the following `zcashd` RPCs:\n- `getinfo`\n- `getblockchaininfo`\n- `getbestblockhash`\n- `z_gettreestate`\n- `getblock`\n- `getrawtransaction`\n- `sendrawtransaction`\n- `getrawmempool`\n- `getaddresstxids`\n- `getaddressbalance`\n- `getaddressutxos`\n\n## Lightwalletd\n\nFirst, install [Go](https://golang.org/dl/#stable) version 1.17 or later. You can see your current version by running `go version`.\n\nClone the [current repository](https://github.com/zcash/lightwalletd) into a local directory that is _not_ within any component of\nyour `$GOPATH` (`$HOME/go` by default), then build the lightwalletd server binary by running `make`.\n\n## To run SERVER\n\nAssuming you used `make` to build the server, here's a typical developer invocation:\n\n```\n./lightwalletd --no-tls-very-insecure --zcash-conf-path ~/.zcash/zcash.conf --data-dir . --log-file /dev/stdout\n```\nType `./lightwalletd help` to see the full list of options and arguments.\n\n# Production Usage\n\nRun a local instance of `zcashd` (see above), except do _not_ specify `--no-tls-very-insecure`.\nEnsure [Go](https://golang.org/dl/#stable) version 1.17 or later is installed.\n\n**x509 Certificates**\nYou will need to supply an x509 certificate that connecting clients will have good reason to trust (hint: do not use a self-signed one, our SDK will reject those unless you distribute them to the client out-of-band). We suggest that you be sure to buy a reputable one from a supplier that uses a modern hashing algorithm (NOT md5 or sha1) and that uses Certificate Transparency (OID 1.3.6.1.4.1.11129.2.4.2 will be present in the certificate).\n\nTo check a given certificate's (cert.pem) hashing algorithm:\n```\nopenssl x509 -text -in certificate.crt | grep \"Signature Algorithm\"\n```\n\nTo check if a given certificate (cert.pem) contains a Certificate Transparency OID:\n```\necho \"1.3.6.1.4.1.11129.2.4.2 certTransparency Certificate Transparency\" > oid.txt\nopenssl asn1parse -in cert.pem -oid ./oid.txt | grep 'Certificate Transparency'\n```\n\nTo use Let's Encrypt to generate a free certificate for your frontend, one method is to:\n1) Install certbot\n2) Open port 80 to your host\n3) Point some forward dns to that host (some.forward.dns.com)\n4) Run\n```\ncertbot certonly --standalone --preferred-challenges http -d some.forward.dns.com\n```\n5) Pass the resulting certificate and key to frontend using the -tls-cert and -tls-key options.\n\n## To run production SERVER\n\nExample using server binary built from Makefile:\n\n```\n./lightwalletd --tls-cert cert.pem --tls-key key.pem --zcash-conf-path /home/zcash/.zcash/zcash.conf --log-file /logs/server.log\n```\n\n## Block cache\n\nlightwalletd caches all blocks from Sapling activation up to the\nmost recent block, which takes about an hour the first time you run\nlightwalletd. During this syncing, lightwalletd is fully available,\nbut block fetches are slower until the download completes.\n\nAfter syncing, lightwalletd will start almost immediately,\nbecause the blocks are cached in local files (by default, within\n`/var/lib/lightwalletd/db`; you can specify a different location using\nthe `--data-dir` command-line option).\n\nlightwalletd checks the consistency of these files at startup and during\noperation as these files may be damaged by, for example, an unclean shutdown.\nIf the server detects corruption, it will automatically re-downloading blocks\nfrom `zcashd` from that height, requiring up to an hour again (no manual\nintervention is required). But this should occur rarely.\n\nIf lightwalletd detects corruption in these cache files, it will log\na message containing the string `CORRUPTION` and also indicate the\nnature of the corruption.\n\n## Darksidewalletd & Testing\n\nlightwalletd now supports a mode that enables integration testing of itself and\nwallets that connect to it. See the [darksidewalletd\ndocs](docs/darksidewalletd.md) for more information.\n\n# Pull Requests\n\nWe welcome pull requests! We like to keep our Go code neatly formatted in a standard way,\nwhich the standard tool [gofmt](https://golang.org/cmd/gofmt/) can do. Please consider\nadding the following to the file `.git/hooks/pre-commit` in your clone:\n\n```\n#!/bin/sh\n\nmodified_go_files=$(git diff --cached --name-only -- '*.go')\nif test \"$modified_go_files\"\nthen\n    need_formatting=$(gofmt -l $modified_go_files)\n    if test \"$need_formatting\"\n    then\n        echo files need formatting (then don't forget to git add):\n        echo gofmt -w $need_formatting\n        exit 1\n    fi\nfi\n```\n\nYou'll also need to make this file executable:\n\n```\n$ chmod +x .git/hooks/pre-commit\n```\n\nDoing this will prevent commits that break the standard formatting. Simply run the\n`gofmt` command as indicated and rerun the `git add` and `git commit` commands.\n", "release_dates": ["2023-07-29T17:38:21Z", "2023-07-07T05:24:18Z", "2023-07-04T19:42:42Z", "2022-07-21T17:59:25Z", "2022-05-24T23:27:10Z", "2022-05-24T15:25:50Z", "2022-04-26T03:22:00Z", "2021-12-09T22:40:02Z", "2021-10-26T17:51:18Z", "2021-05-18T21:45:53Z", "2021-04-08T18:24:40Z", "2021-03-08T20:03:36Z", "2020-08-21T13:50:22Z", "2020-01-14T01:22:24Z"]}, {"name": "logos", "description": "Zcash logos", "language": null, "license": null, "readme": "# Zcash logos\n\nThe logos in this repository are trademarks of the Zerocoin Electric Coin Company. Their use by third parties is governed by the Trademark Policy: https://www.zfnd.org/about/trademark-policy/\n", "release_dates": []}, {"name": "mpc", "description": "zk-SNARK parameter multi-party computation protocol", "language": "Rust", "license": null, "readme": "# mpc\n\nThis is a multi-party computation protocol for the key-generation step of Pinocchio zkSNARKs [[PGHR13]](https://eprint.iacr.org/2013/279) designed for use in the Zcash \"Sprout\" public parameter ceremony.\n\n## Zcash Ceremony\n\nThe public parameters (zk-SNARK proving and verifying keys) for Zcash's 1.0 \"Sprout\" launch\nwere constructed in a ceremony that took place on October 22-23.\n\nThe following individuals participated in the ceremony:\n\n* Andrew Miller\n* Peter Van Valkenberg\n* John Dobbertin\n* Zooko Wilcox\n* Derek Hinch\n* Peter Todd\n\nThe ceremony used a multi-party computation protocol with the property that the resulting\nparameters are secure unless _all_ of the participants were dishonest or compromised\nduring the ceremony.\n\n### Assets\n\n[`r1cs`](https://download.z.cash/zcashfinalmpc/r1cs): 6111c2bce234867201d887170d68712c8f8785a1c97d43ab4ca540d7704ee8f7\n\n[`transcript`](https://download.z.cash/zcashfinalmpc/transcript.cached): 7da0c07a4bec04fbe4ae99ebd62d4ce7e1710b1f7a1f317345b0a48feec984d3\n\n[`sprout-proving.key`](https://download.z.cash/zcashfinalmpc/sprout-proving.key): 8bc20a7f013b2b58970cddd2e7ea028975c88ae7ceb9259a5344a16bc2c0eef7\n\n[`sprout-verifying.key`](https://download.z.cash/zcashfinalmpc/sprout-verifying.key): 4bd498dae0aacfd8e98dc306338d017d9c08dd0918ead18172bd0aec2fc5df82\n\n[`finalmpc2-compute.iso`](https://download.z.cash/zcashfinalmpc/finalmpc2-compute.iso): 5f43aa1244a01b3cf9da4abeadde9e34b954a873565fc56b58c10780f3ce0e4c\n\n[`finalmpc2-network.iso`](https://download.z.cash/zcashfinalmpc/finalmpc2-network.iso): 375550be4c64ebc68a9306421bb71ad3556bc73f156a231503084f923900f4cb\n\n#### r1cs\n\nThis is the rank-1 quadratic constraint system used by Zcash. You can use Zcash to construct it with the following PR: <https://github.com/zcash/zcash/pull/3691>.\n\n#### transcript\n\nThis is a transcript of the protocol that can be used to verify the protocol's evaluation and construct the proving/verifying keys.\n\n#### sprout-*.key\n\nThese are the final parameters that can be built from the transcript.\n\n#### finalmpc2-*.iso\n\nThese are reproducibly generated Live CD images used during the ceremony, using a modified [Alpine Linux](https://www.alpinelinux.org/) distribution.\n\nThe minimal operating system is patched with [grsecurity](https://grsecurity.net/), an extensive security enhancement to the Linux kernel. The compute nodes have a restrictive RBAC (role-based access control) policy which is intended to allow *only* the execution of code and granting of permissions that are necessary for its function. The ISOs are built inside [Docker](https://www.docker.com/) containers.\n\n### Code and verification\n\nThe code used for the ceremony was tagged at `finalmpc2`. It's mostly written in [Rust](https://www.rust-lang.org/).\n\n#### ISOs\n\nThe participants all booted from the `finalmpc2-compute.iso` on hardware they obtained securely. It can be reproducibly built using the `build-iso.sh` tool. Some of the participants also used `finalmpc2-network.iso` for the networking during the ceremony, though it was not necessary.\n\n#### Transcript verification\n\nGiven `r1cs` and `transcript`, and powerful enough hardware, you can verify the protocol transcript and construct `pk`/`vk` within a few hours. Run `cargo run --release --bin verifier`.\n\nHere is the log from verifying the transcript:\n\n```\nNumber of players: 6\nPlayer 1 commitment: 2iQQBkf7k4K9aigJm4uHHufaSB8rXLLaRTMmTerK7dx6RCqNc9\nPlayer 2 commitment: 6yV3Ji7zuVWVCQEfkhQ6Vfv51t5VfQHQVaLDGH6zkeunKmohr\nPlayer 3 commitment: 6mGvvMFMKJNwKFmHXUwcCQMk7iu92bSqhtRabX3nkdnadEKte\nPlayer 4 commitment: VGyYjzYc39em9TithdWFySSUwATMgcXcLtQ7ias7i4SkNdS4G\nPlayer 5 commitment: 2YrFsjMadFukhdkQpn8oFgET2EQd9WnDW3AzYqNc3kELU45p7t\nPlayer 6 commitment: 2B2HXuZAKayqgJpxojuUU9RN78pTv2gLvEDmEbWRBWEJ6Z1LS\nPlayer 1 hash of disk A: 2oX6hBNiQxiZYZgDbSkgk3mhBACXmoGCfdhfZrSquNztZuZaqt\nPlayer 1 hash of disk B: 2T2ceUDomnrCVCtJw2SwtYAeHCfnAhM9HBdzVkq6BdZ59nST5m\nPlayer 2 hash of disk A: 2axdkGL6QzngjvY9jRBX5AqhSokukji8eQuYUfJwhp7sxcXvPr\nPlayer 2 hash of disk B: 2RymyNbAWaBVDuzW4m1iKA72MsmZFnwMhNvqxxXDwugLTa62wc\nPlayer 3 hash of disk A: YAQs9PiruKxfTwMTdTUHkYgt9QRvjpkF95cJRbNP8WLqPqjLW\nPlayer 3 hash of disk B: 2omA7bsepmmxeygQzNBbodhdXTyhuK1i2KCRH9esB3azunwZPn\nPlayer 4 hash of disk A: EDEtkk1PUhu4BQbTzx5yPSSpyqB6kV9g39p6sNt1ERGRG3APQ\nPlayer 4 hash of disk B: 2fvnbP22XWHVD1DstGQ5FsHNaBLiZQg4MBVKmWf7sWCYg5A9L7\nPlayer 5 hash of disk A: 2oQgZxPLAL2f8xkvm71RqwKK6dCFQSrazESXci32M2LZeG7nxe\nPlayer 5 hash of disk B: UBjr6UU8oJ4ZzpsTU3vRHmzZmuN7TjX3eLsmdRhw4dW6dEbvH\nPlayer 6 hash of disk A: rnMAJE2bxMbCT6yRvufD2ww17kmP9qaKnipxrvZTWXe27d6GW\nPlayer 6 hash of disk B: 27Em5cp6QSGVsJsAcvZLW7CoMkKv5Ybi3LAGPPeGwqCF7Diex\nPlayer 1 hash of disk C: 29PLu7dtT9BjJhtoAzxpSxvrp4tE15xjJufL1ANHGwkwieyxMo\nPlayer 1 hash of disk D: 2YVAELKtHdufKRPTzT5ZpHFgxrcro6JmBKkYz4GEQqcXbQdViM\nPlayer 2 hash of disk C: 2qSQhJvQLjmXfQWHKMCR5EukSWU9BQ3KwdPSqkPUCSRzwmxowM\nPlayer 2 hash of disk D: 2uAxySzeptYhEowKuBRGituPnc1U4BU1GMuL4Hfbyvtgq7x4Qn\nPlayer 3 hash of disk C: 2DZ3pnkZcTMfAa28KfJpD5fQbnkQZZG5mFnFqvHHUDXJquSJAX\nPlayer 3 hash of disk D: 2tfcauKUDBirJFSo8jbyEenLfHULThsQjVdN8FY3hJGn3dC2JP\nPlayer 4 hash of disk C: 2gH6XJ8BeA5yXZL95ThSp9ucicwAoevaDK6xNBck9QUxXF1gEE\nPlayer 4 hash of disk D: VFXKdDoYrA58evyJUrvkocGCHVvYF2h8HVLmuEtFkDfZY6EHk\nPlayer 5 hash of disk C: 2RvKUp94tXE5b1qhyLpGPTXeWpS7FdNDvCG5MJPmZiccNuRYcw\nPlayer 5 hash of disk D: ApPFWMqGBMemE3sTAuMRnwbmGonsPoXYC4r45HBMdmiRWLXqH\nPlayer 6 hash of disk C: 2wGGYBXaeQdbLHvViArnLkGRERhztVk5qZmreSKwxEcFjMBNMC\nPlayer 6 hash of disk D: 2g3rMWwyCL5wgKYHiVHR6EdnBc9Q5dPc1RW6tWwvwyJnx6AKq9\nPlayer 1 hash of disk E: 2Zbrd1XhYKvZqeNcGQPVrusx1rRjxaQjFfzWcn64wCfTnEGTMg\nPlayer 1 hash of disk F: 27ZzVxLTxXpjeTo86sdQ9kKU83UfNHLyGPuQ4CCV9ZRJ4g84jC\nPlayer 2 hash of disk E: YWKCeTeYiKUNnd4aJBYcd8ZwBxscibmtDa4pxbz52fpYX2H9S\nPlayer 2 hash of disk F: 2o1wWJHYzCirDmijHmnGFQ4pSfoYTkEKdPinag22eYonKf8EGC\nPlayer 3 hash of disk E: 2jquuLB8omrtWV1GnXvghRN1A3MWMouyBSwEKD5fCMwk5SvktP\nPlayer 3 hash of disk F: 2jrEGwnSyX9oX8UUGYhpEiPaLmGmrbhfFtcciXt3o5N7nPh63A\nPlayer 4 hash of disk E: AY1Vm8dDSxDdpNhac8Mr7GkS18vomvXaoreg1mVcXyApmgbu8\nPlayer 4 hash of disk F: 2RVi4vpjXtzD6gPLsFDSVrtX545HbVnNBhjAJVUTXpG22oLDD5\nPlayer 5 hash of disk E: CFEWpN9STr4iVM8NLGcSUyoaEDr94FEp7VWR9HhQQYhuwUu7f\nPlayer 5 hash of disk F: 2vohW4tyybTEZyf3ZarX5R1CgsUehQfwASExZQ86EWNd8ByC6a\nPlayer 6 hash of disk E: chZdF1yRVDTsaD14KdaFv6N7e8ZPkMnxr9CpXkzq8JzonhLPx\nPlayer 6 hash of disk F: 2HjRqGyKjPxDSbhP8KgyYtKpWCwrGt3v4ZEUZHsZpJHbJ2V9QL\n```\n\n## License\n\nLicensed under either of\n\n * MIT license, ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n\nat your option.\n\nThis dual license applies to all of the files listed in the assets section of this `README`.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n\n## Authors\n\n* [Sean Bowe](https://github.com/ebfull)\n* [Ariel Gabizon](https://github.com/arielgabizon)\n* [Matthew Green](https://isi.jhu.edu/~mgreen/)\n", "release_dates": []}, {"name": "orchard", "description": "Implementation of the Zcash Orchard Protocol", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# orchard [![Crates.io](https://img.shields.io/crates/v/orchard.svg)](https://crates.io/crates/orchard) #\n\nRequires Rust 1.65+.\n\n## Documentation\n\n- [The Orchard Book](https://zcash.github.io/orchard/)\n- [Crate documentation](https://docs.rs/orchard)\n\n## License\n\nCopyright 2020-2023 The Electric Coin Company.\n\nAll code in this workspace is licensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "pasta", "description": "Generator and supporting evidence for security of the Pallas/Vesta pair of elliptic curves suitable for Halo", "language": "Sage", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "Pallas/Vesta supporting evidence\n--------------------------------\n\nThis repository contains supporting evidence that the amicable pair of\nprime-order curves:\n\n* Ep : y^2 = x^3 + 5 over GF(p) of order q, called Pallas;\n* Eq : y^2 = x^3 + 5 over GF(q) of order p, called Vesta;\n\nwith\n\n* p = 2^254 + 45560315531419706090280762371685220353\n* q = 2^254 + 45560315531506369815346746415080538113\n\nsatisfy *some* of the [SafeCurves criteria](https://safecurves.cr.yp.to/index.html).\n\nThe criteria that are *not* satisfied are, in summary:\n\n* large-magnitude CM discriminant (both curves have CM discriminant of absolute value 3,\n  as a consequence of how they were constructed);\n* completeness (complete formulae are possible, but not according to the Safe curves\n  criterion);\n* ladder support (not possible for prime-order curves);\n* Elligator 2 support (indistinguishability is possible using\n  [Elligator Squared](https://ifca.ai/pub/fc14/paper_25.pdf), but not using Elligator 2);\n* twist security above 100 bits for Pallas.\n\nPallas/Vesta is the first cycle output by\n``sage amicable.sage --sequential --requireisos --sortpq --ignoretwist --nearpowerof2 255 32``.\n\n(The `--sequential` option makes the output completely deterministic and so resolves\nambiguity about which result is \"first\". For exploratory searches it is faster not to\nuse `--sequential`.)\n\nPrerequisites:\n\n* ``apt-get install sagemath``\n\nRun ``sage verify.sage Ep`` and ``sage verify.sage Eq``; or ``./run.sh`` to run both\nand also print out the results.\n\nThe output of ``amicable.sage`` with the above options includes isogenies of degree 3,\nsuitable for use with the \"simplified SWU\" method for hashing to an elliptic curve.\nThis is based on code from Appendix A of [Wahby and Boneh 2019](https://eprint.iacr.org/2019/403.pdf).\n\nTo check the correctness of the endomorphism optimization described in the Halo paper, run\n``python3 injectivitylemma.py`` and ``python3 checksumsets.py``. To also generate animations\nshowing the minimum distances between multiples of \u03b6 used in the proof, run ``./animation.sh``.\n\n``animation.sh`` has the following prerequisites:\n\n* ``apt-get install ffmpeg ffcvt``\n* ``pip3 install bintrees Pillow``\n\n``checksumsets.py`` on its own only requires the ``bintrees`` Python package.\n", "release_dates": []}, {"name": "pasta_curves", "description": "Rust implementation for zcash/pasta", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# `pasta_curves`\n\nThis crate provides an implementation of the Pasta elliptic curve constructions,\nPallas and Vesta. More details about the Pasta curves can be found\n[in this blog post](https://electriccoin.co/blog/the-pasta-curves-for-halo-2-and-beyond/).\n\n## RFC process\n\nThis crate follows the [zkcrypto RFC process](https://zkcrypto.github.io/rfcs/).\nIf you want to propose \"substantial\" changes to this crate, please\n[create an RFC](https://github.com/zkcrypto/rfcs) for wider discussion.\n\n## [Documentation](https://docs.rs/pasta_curves)\n\n## Minimum Supported Rust Version\n\nRequires Rust **1.60** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be done with a\nminor version bump.\n\n## Curve Descriptions\n\n- Pallas: y<sup>2</sup> = x<sup>3</sup> + 5 over\n  `GF(0x40000000000000000000000000000000224698fc094cf91b992d30ed00000001)`.\n\n- Vesta:  y<sup>2</sup> = x<sup>3</sup> + 5 over\n  `GF(0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001)`.\n\nThe Pasta curves form a cycle with one another: the order of each curve is exactly the\nbase field of the other. This property is critical to the efficiency of recursive proof\nsystems. They are designed to be highly 2-adic, meaning that a large power-of-two\nmultiplicative subgroup exists in each field. This is important for the performance of\npolynomial arithmetic over their scalar fields and is essential for protocols similar\nto PLONK.\n\nThese curves can be reproducibly obtained\n[using a curve search utility we\u2019ve published](https://github.com/zcash/pasta).\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "protocol.z.cash", "description": "Source for the Zcash Protocol website", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# protocol.z.cash\n\nThis is the source of the Zcash Protocol website.\n", "release_dates": []}, {"name": "rpc", "description": null, "language": "HTML", "license": null, "readme": "# Zcash RPC Documentation Generator\n\nThis tool extracts and formats the help text for each of the Zcash RPC calls. The output of this script is hosted at [zcash-rpc.github.io](https://zcash-rpc.github.io). \n\nSee the `script` directory for the `zcash.go` script that generates the output and template.\n\n### How to use\n\nEnsure that you have Go installed and a working and running `zcashd` instance and that the `zcash-cli` executable is available in `/usr/bin/zcash-cli` (or update the path to your zcash-cli executable in `zcash.go`). From the `script` directory simply run `go run zcash.go` and the documentation will be produced for all Zcash RPC calls and styled according to the template in `template.html`.\n\n## License\n\nLicense of the docs is MIT (see https://github.com/zcash/zcash), license of the scripts and webpage is also MIT ((C) 2018 Karel Bilek)\n", "release_dates": []}, {"name": "rust-ecosystem", "description": "Rust wants and tracking for Zcash \u24cf\u2764\ufe0f\ud83e\udd80", "language": null, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Zcash Rust Ecosystem\n\nThis repository serves two purposes:\n\n- Its issue tracker hosts high-level tracking and discussions about improving\n  Rust and the Rust ecosystem for use cases within the Zcash ecosystem.\n- The repository itself hosts general artifacts from the Zcash ecosystem that\n  are useful to the wider Rust ecosystem.\n\nThis repository is modeled after https://github.com/EmbarkStudios/rust-ecosystem.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "sapling-crypto", "description": "Zcash \"Sapling\" cryptography", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# sapling-crypto\n\nThis repository contains a (work-in-progress) implementation of Zcash's \"Sapling\" cryptography.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "sapling-mpc", "description": "Multi-party computation for Zcash's \"Sapling\" zk-SNARK public parameters", "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# sapling-mpc\n\nThis code can be used to participate and verify the Sapling network upgrade MPC.\n\n## What do I do?\n\nContact **mpc@z.cash** to schedule a time to participate. You'll need the latest (stable) [Rust compiler](https://www.rust-lang.org/) to participate using this code.\n\nWhen it's your turn, you'll receive a `params` file from us. Place this file in the current directory and run:\n\n```\ncargo run --release --bin compute\n```\n\nThis will compute for a little while, and then spit out a `new_params` file. That's what you'll upload back to us.\n\nThe tool also prints a hash. This hash is what you and others can use to verify that your contribution actually ended up in the final parameters, so you're encouraged to save it to check later!\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "sapling-security-analysis", "description": null, "language": "TeX", "license": null, "readme": "# sapling-security-analysis\n\nFormal proofs of security properties for the Zcash Sapling protocol.\n\n\n", "release_dates": []}, {"name": "zcash", "description": "Zcash - Internet Money", "language": "C++", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "Zcash 5.8.0\n<img align=\"right\" width=\"120\" height=\"80\" src=\"doc/imgs/logo.png\">\n===========\n\nWhat is Zcash?\n--------------\n\n[Zcash](https://z.cash/) is HTTPS for money.\n\nInitially based on Bitcoin's design, Zcash has been developed from\nthe Zerocash protocol to offer a far higher standard of privacy and\nanonymity. It uses a sophisticated zero-knowledge proving scheme to\npreserve confidentiality and hide the connections between shielded\ntransactions. More technical details are available in our\n[Protocol Specification](https://zips.z.cash/protocol/protocol.pdf).\n\n## The `zcashd` Full Node\n\nThis repository hosts the `zcashd` software, a Zcash consensus node\nimplementation. It downloads and stores the entire history of Zcash\ntransactions. Depending on the speed of your computer and network\nconnection, the synchronization process could take several days.\n\n<p align=\"center\">\n  <img src=\"doc/imgs/zcashd_screen.gif\" height=\"500\">\n</p>\n\nThe `zcashd` code is derived from a source fork of\n[Bitcoin Core](https://github.com/bitcoin/bitcoin). The code was forked\ninitially from Bitcoin Core v0.11.2, and the two codebases have diverged\nsubstantially.\n\n#### :lock: Security Warnings\n\nSee important security warnings on the\n[Security Information page](https://z.cash/support/security/).\n\n**Zcash is experimental and a work in progress.** Use it at your own risk.\n\n####  :ledger: Deprecation Policy\n\nThis release is considered deprecated 16 weeks after the release day. There\nis an automatic deprecation shutdown feature which will halt the node some\ntime after this 16-week period. The automatic feature is based on block\nheight.\n\n## Other Zcash Implementations\n\nThe [Zebra](https://github.com/ZcashFoundation/zebra) project offers a\ndifferent Zcash consensus node implementation, written largely from the\nground up.\n\n## Getting Started\n\nPlease see our [user\nguide](https://zcash.readthedocs.io/en/latest/rtd_pages/rtd_docs/user_guide.html)\nfor instructions on joining the main Zcash network.\n\n### Need Help?\n\n* :blue_book: See the documentation at the [ReadTheDocs](https://zcash.readthedocs.io)\n  for help and more information.\n* :incoming_envelope: Ask for help on the [Zcash](https://forum.z.cash/) forum.\n* :speech_balloon: Join our community on [Discord](https://discordapp.com/invite/PhJY6Pm)\n* \ud83e\uddd1\u200d\ud83c\udf93: Learn at [ZecHub](https://wiki.zechub.xyz/)\n\nParticipation in the Zcash project is subject to a\n[Code of Conduct](code_of_conduct.md).\n\n### Building\n\nBuild Zcash along with most dependencies from source by running the following command:\n\n```\n./zcutil/build.sh -j$(nproc)\n```\n\nCurrently, Zcash is only officially supported on Debian and Ubuntu. See the\n[Debian / Ubuntu build](https://zcash.readthedocs.io/en/latest/rtd_pages/Debian-Ubuntu-build.html)\nfor detailed instructions.\n\nLicense\n-------\n\nFor license information see the file [COPYING](COPYING).\n", "release_dates": ["2024-01-02T23:39:41Z", "2023-09-28T22:09:34Z", "2023-06-23T17:35:58Z", "2023-06-14T23:55:59Z", "2023-05-18T19:24:17Z", "2023-04-28T02:29:39Z", "2023-03-13T11:16:22Z", "2023-03-13T11:15:44Z", "2023-02-14T14:43:26Z", "2023-02-09T15:12:51Z", "2022-12-13T23:06:10Z", "2022-12-13T23:06:04Z", "2022-10-20T23:20:43Z", "2022-07-28T20:53:28Z", "2022-07-08T12:55:07Z", "2022-05-11T03:57:47Z", "2022-04-14T13:18:46Z", "2022-04-06T08:33:25Z", "2022-01-05T22:40:24Z", "2021-12-23T03:28:44Z", "2021-10-10T00:08:29Z", "2021-09-29T02:42:33Z", "2021-09-23T11:24:02Z", "2021-06-10T02:08:47Z", "2021-04-15T08:58:19Z", "2021-02-24T23:30:00Z", "2020-12-21T22:10:42Z", "2020-11-17T18:01:29Z", "2020-11-10T05:17:15Z", "2020-09-01T22:39:35Z"]}, {"name": "zcash-android-wallet-plugins", "description": "Generic interfaces for plugging functionality into the wallets", "language": "Kotlin", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# zcash-android-wallet-plugins\n[![license](https://img.shields.io/github/license/zcash/kotlin-bip39.svg?maxAge=2592000&style=plastic)](https://github.com/zcash/kotlin-bip39/blob/master/LICENSE)\n[![@gmale](https://img.shields.io/badge/contact-android@z.cash-5AA9E7.svg?style=plastic)](https://github.com/gmale)\n![Bintray](https://img.shields.io/bintray/v/ecc-mobile/android/zcash-android-wallet-plugins?color=success&style=plastic)\n\n\n\nGeneric interfaces for plugging functionality into Zcash Anrdroid wallets. Adhering to these interfaces creates a common ground for wallets to use for adding behavior. Then, if any particular 3rd party implementation needs to be changed, it will have a minor impact on the wallets, as a whole.\n\n## Gradle\nAdd dependency\n\n```groovy\ndependencies {\n    implementation \"cash.z.ecc.android:zcash-android-wallet-plugins:1.0.0\"\n}\n\nrepository {\n    jcenter()\n}\n```\n\n## Usage\n\nCreate implementations of the provided interfaces, plugging in your favorite libraries that get the job done. Then use them to create the seed needed for initializing the [Android SDK](https://github.com/zcash/zcash-android-wallet-sdk).\n\n```kotlin\n/** class for storing seeds */\nclass LockBox @Inject constructor(private val appContext: Context) : LockBoxPlugin {\n    // add implementation\n}\n/** class for generating mnemonic phrases */\nclass Mnemonics @Inject constructor(): MnemonicPlugin {\n    // add implementation\n}\n```\n", "release_dates": []}, {"name": "zcash-android-wallet-poc", "description": "Frontend Android code for the reference wallet", "language": "Kotlin", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Security Disclaimer\n\n#### :warning:  WARNING: This is an *early preview* under active development and *anything may change at anytime!*\n\n----\n\nIn the spirit of transparency, we provide this as a window into what we are actively developing. This is an alpha build, not yet intended for 3rd party use. Please be advised of the following:\n\n* \ud83d\uded1 This code currently is not audited \ud83d\uded1\n* \u274c This is a public, active branch with **no support**\n* \u274c The code **does not have** documentation that is reviewed and approved by our Documentation team\n* \u274c The code **does not have** adequate unit tests, acceptance tests and stress tests\n* \u274c The code **does not have** automated tests that use the officially supported CI system\n* \u274c The code **has not been subjected to thorough review** by engineers at the Electric Coin Company\n* \u274c This product **does not run** compatibly with the latest version of zcashd\n* \u274c The product **may be** majorly broken in several ways\n* \u274c The app **only runs** on testnet\n* \u274c The app **does not run** on mainnet and **cannot** run on regtest\n* \u274c We **are actively changing** the codebase and adding features where/when needed\n* \u274c We **do not** undertake appropriate security coverage (threat models, review, response, etc.)\n* :heavy_check_mark: There is a product manager for this app\n* :heavy_check_mark: Electric Coin Company maintains the app as we discover bugs and do network upgrades/minor releases\n* :heavy_check_mark: Users can expect to get a response within a few weeks after submitting an issue\n* \u274c The User Support team **had not yet been briefed** on the features provided to users and the functionality of the associated test-framework\n* \u274c The code is **unpolished**\n* \u274c The code is **not documented**\n* \u274c The code **is not yet published** (to Bintray/Maven Central)\n* \u274c Requires external lightwalletd server\n\n\n ### \ud83d\uded1 Use of this code may lead to a loss of funds \ud83d\uded1 \n \nUse of this code in its current form or with modifications may lead to loss of funds, loss of \"expected\" privacy, or denial of service for a large portion of users, or a bug which could leverage any of those kinds of attacks (especially a \"0 day\" where we suspect few people know about the vulnerability).\n\n### :eyes: At this time, this is for preview purposes only. :eyes: \n\n# Zcash Android Reference Wallet - Proof of Concept    \n[![Build Status](https://app.bitrise.io/app/3f9040b242d98534/status.svg?token=AxoSmdULfUeBgW_GpS6VWg&branch=feature/revert-gradle-kotlin-dsl)](https://app.bitrise.io/app/3f9040b242d98534) [<img src=\"https://dply.me/n4br57/button/small\" alt=\"Download to device\">](https://dply.me/n4br57#install)    \n\nProof of concept for shielded-only Zcash wallet. Additional documentation will be added in a future milestone.\n\n[![Zcash Reference Wallet Demo](https://img.youtube.com/vi/BgNO5Wn-9r0/0.jpg)](https://www.youtube.com/watch?v=BgNO5Wn-9r0)\n", "release_dates": []}, {"name": "zcash-docs", "description": "Translations of Zcash documentation", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Zcash Documentation\n\nTranslations of Zcash documentation. Currently contains Spanish, Russian, Portuguese, and Chinese translations of:\n\n+ Zcash Mining Guide - [original found here](https://github.com/zcash/zcash/wiki/Mining-Guide)\n+ Zcash 1.0 \"Sprout\" User Guide - [original found here](https://github.com/zcash/zcash/wiki/1.0-User-Guide)\n\n## Espa\u00f1ol\n\n+ [Gu\u00eda de Minado de Zcash](https://github.com/zcash/zcash-docs/blob/master/es/Mining_Guide.md)\n+ [Gu\u00eda Zcash 1.0 \"Brote\"](https://github.com/zcash/zcash-docs/blob/master/es/Sprout_User_Guide.md)\n\n## \u4e2d\u6587\n\n+ [Zcash \u6316\u77ff\u6307\u5357](https://github.com/zcash/zcash-docs/blob/master/zh/Mining_Guide.md)\n+ [Zcash 1.0 \"\u53d1\u82bd\" \u7248\u672c\u6307\u5357](https://github.com/zcash/zcash-docs/blob/master/zh/Sprout_User_Guide.md)\n\n## \u0440\u0443\u0441\u0441\u043a\u0438\u0439\n\n+ [\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u043c\u0430\u0439\u043d\u0438\u043d\u0433\u0443 Zcash](https://github.com/zcash/zcash-docs/blob/master/ru/Mining_Guide.md)\n+ [\u0413\u0438\u0434 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 Zcash 1.0 \"Sprout\"](https://github.com/zcash/zcash-docs/blob/master/ru/Sprout_User_Guide.md)\n\n## Portugu\u00eas\n\n+ [Guia de Minera\u00e7\u00e3o Zcash](https://github.com/zcash/zcash-docs/blob/master/pt_BR/Mining_Guide.md)\n+ [Guia Zcash 1.0 \"Sprout\"](https://github.com/zcash/zcash-docs/blob/master/pt_BR/Sprout_User_Guide.md)\n", "release_dates": []}, {"name": "zcash-gitcoin", "description": "Repo for all gitcoin hackathon related tickets", "language": null, "license": null, "readme": "# zcash-gitcoin\nRepo for all gitcoin hackathon related tickets\n", "release_dates": []}, {"name": "zcash-gitian", "description": "Deterministic build environment for Zcash", "language": "Shell", "license": null, "readme": "Zcash deterministic builds\n==========================\n\nThis is a deterministic build environment for [Zcash](https://github.com/zcash/zcash/) that uses [Gitian](https://gitian.org/).\n\nGitian provides a way to be reasonably certain that the Zcash executables are really built from the exact source on GitHub and have not been tampered with. It also makes sure that the same, tested dependencies are used and statically built into the executable.\n\nMultiple developers build from source code by following a specific descriptor (\"recipe\"), cryptographically sign the result, and upload the resulting signature. These results are compared and only if they match is the build accepted.\n\nMore independent Gitian builders are needed, which is why this guide exists.\n\nRequirements\n------------\n\n6GB of RAM, four cores.\n\nNote: This project uses VirtualBox to run a virtual machine. If you are running this inside a\nvirtual machine, you'll likely need to enable a feature such as \u201cnested virtualization\u201d, \u201cVT-x\u201d, or\nsimilar in your virtualization software's settings for that virtual machine.\n\n\nInstall Dependencies\n--------------------\n\nIf you're using one of the following platforms, see the linked instructions for that platform:\n\n- [Debian 9.x](dependency_install_steps_by_platform/Debian_9.x.md)\n- [Ubuntu 18.04.x](dependency_install_steps_by_platform/Ubuntu_18.04.x.md)\n- [macOS](dependency_install_steps_by_platform/macOS.md)\n\n\nIf you're not using one of the platforms that we have specific instructions for, this is the list of\ndependencies we want. Please document the steps involved and we can add another platform to the list\nabove!\n\n- [Git](https://git-scm.com/)\n- [VirtualBox](https://www.virtualbox.org/)\n- [Vagrant](https://www.vagrantup.com/) 2.0.3 or higher\n- [GnuPG](https://www.gnupg.org/) 2.x (2.11.18 or greater)\n- [Python](https://www.python.org/) 3.x (with `venv` support in case that is packaged separately)\n- [direnv](https://direnv.net/) (Optional/Recommended)\n\n\n\nConfiguration\n-------------\n\n## Configure git\n\nWe want a configuration file in the home directory of the account you'll be working in. This will\ndetermine how you are identified on the projects you contribute to. These settings can be overridden\non a per-project basis.\n\nGit provides some convenient command options for setting this up:\n\n```\n$ git config --global user.name \"Harry Potter\"\n$ git config --global user.email \"hpotter@hogwarts.wiz\"\n```\n\nChecking that this worked:\n\n```\n$ git config user.name\nHarry Potter\n$ git config user.email\nhpotter@hogwarts.wiz\n```\n\nThis is all the git configuration needed for the steps below, but here is a good reference for\nfurther reading on configuring git:\n\nhttps://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\n\n\n\n## Decide on an ssh keypair to use when uploading build signatures to github\n\nYou can generate a keypair specifically for connecting to github like this:\n\n```\n$ ssh-keygen -t ed25519 -C \"hpotter@hogwarts.wiz\" -f ~/.ssh/github_id_rsa -N ''\nGenerating public/private ed25519 key pair.\nYour identification has been saved in /Users/hpotter/.ssh/github_id_rsa.\nYour public key has been saved in /Users/hpotter/.ssh/github_id_rsa.pub.\nThe key fingerprint is:\nSHA256:qBCOybcJkgs1xdNoocYlsZz3jNQhGgOymreQAQRyh0c hpotter@hogwarts.wiz\nThe key's randomart image is:\n+--[ED25519 256]--+\n|Oo*=E+.          |\n|+=.%*o..         |\n|o %oo..          |\n|o@ = + .         |\n|@o+.. + S        |\n|o+ooo.           |\n|. .o.            |\n|                 |\n|                 |\n+----[SHA256]-----+\n```\n\nSome explanation of the arguments used in the above example:\n\n```\n    -t ed25519                     Use a key type of ed25519\n\n    -C \"hpotter@hogwarts.wiz\"      Provide an identity to associate with the key (default is\n                                   user@host in the local environment)\n\n    -f ~/.ssh/github_id_rsa        Path to the private key to generate. The corresponding public key\n                                   will be saved at ~/.ssh/github_id_rsa.pub\n\n    -N ''                          Passphrase for the generated key. An empty string as shown here\n                                   means save the private key unencrypted.\n```\n\n\n\n# Set up your ssh keypair for use with github\n\n[Add the new key to your github account.](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/)\n\nAdd an entry to `~/.ssh/config` (create this file if necessary) telling ssh to use the keypair you\ngenerated above when connecting to github.com.\n\n\nFor instance:\n\n```\nHost github.com\n  User harrypotter\n  PreferredAuthentications publickey\n  IdentityFile /home/hpotter/.ssh/github_id_rsa\n  AddKeysToAgent yes\n```\n\nThe 'User' entry should match your github username.\n\nIf using macOS, the IdentityFile path will be:\n\n```\n/Users/yourusername/.ssh/github_id_rsa\n```\n\nIf you do generate a new ssh config file you'll need to set its permission bits appropriately.  On\na Unix system you may do so with a command like this:\n\n```\nchmod 400 ~/.ssh/config\n```\n\nTest that ssh will successfully use your new key to connect to github.\n\n```\n$ ssh -T git@github.com\nThe authenticity of host 'github.com (192.30.253.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.\nHi harrypotter! You've successfully authenticated, but GitHub does not provide shell access.\n$\n```\n\n\n\n## Clone this git project on your machine\n\nFrom a location where you want to place your local clone of this repository (e.g. `~/Projects`). If\nthere's a possibility you'll want to make and contribute changes, consider forking the repository\nand cloning from your fork. For example: \n\n```\ngit clone git@github.com:harrypotter/zcash-gitian.git\n```\n\ncd into the project repo\n\n```\n$ cd zcash-gitian\nzcash-gitian\n```\n\n\n## Copy example environment configuration files\n\nThe files `.env.example` and `.envrc.example` are tracked in the repo as example configurations you\nshould be able to use to get started. The filenames `.env` and `.envrc` are `.gitignore`'d to allow\nyou to easily make local customizations that don't show up as untracked changes.\n\nNote that `.envrc` is probably only useful if you are using `direnv`. If you're not, you can ignore\nthat file and the places below that talk about it, and use your preferred way of managing\nenvironment variables instead.\n\n```\nzcash-gitian$ cp .env.example .env\nzcash-gitian$ cp .envrc.example .envrc\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nzcash-gitian$\n```\n\nMore on that above message in the following section...\n\n\n\n## Enable auto-execution of .envrc\n\nIf you installed and activated `direnv`, it will detect when `.envrc` is created in your current\ndirectory, as shown above. As a security precaution, it won't automatically run it without your\napproval (to prevent untrusted code from doing something malicious). Let's take a look at what's in\nthe file:\n\n```\nzcash-gitian$ cat .envrc\nsource_up\ndotenv\n\nexport GIT_NAME=`git config user.name`\nexport GIT_EMAIL=`git config user.email`\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nzcash-gitian$\n```\n\nSome explanation of the lines in the above `.envrc` file:\n\n```\n`source_up`                        Load any .envrc higher up in the folder structure. So if for\n                                   example you place an `.envrc` in your home directory, variables\n                                   set there will still be available within this project, rather\n                                   than being overridden by this project's `.envrc`.\n\n`dotenv`                           Set the environment variables defined in `.env`. Think of\n                                   `.envrc` as code (it runs in a bash interpreter with some extra\n                                   functions added) and `.env` as data (you can basically just set\n                                   literal values, and each update to it doesn't require approval).\n\n\nexport GIT_NAME=`git config user.name`\nexport GIT_EMAIL=`git config user.email`\n\n                                   Use your local git configuration values for the name and email\n                                   that will be used to add build signatures inside the virtual\n                                   environment.\n```\n\n\nIf you're ok with running `.envrc`, follow the directions in the prompt to allow it.\n\n```\nzcash-gitian$ echo $ZCASH_GIT_REPO_URL\n\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nzcash-gitian$ direnv allow\ndirenv: loading .envrc\ndirenv: export +GIT_EMAIL +GIT_NAME +GPG_KEY_ID +GPG_KEY_NAME +ZCASH_GIT_REPO_URL +ZCASH_VERSION\nzcash-gitian$ echo $ZCASH_GIT_REPO_URL\nhttps://github.com/zcash/zcash\nzcash-gitian$\n```\n\nA variable defined in `.env` is now active in our environment. If we leave this project, it is\nunloaded. When we return, it is reloaded:\n\n```\nzcash-gitian$ cd ..\ndirenv: unloading\n$ echo $ZCASH_GIT_REPO_URL\n\n$ cd zcash-gitian/\ndirenv: loading .envrc\ndirenv: export +GIT_EMAIL +GIT_NAME +GPG_KEY_ID +GPG_KEY_NAME +ZCASH_GIT_REPO_URL +ZCASH_VERSION\nzcash-gitian$ echo $ZCASH_GIT_REPO_URL\nhttps://github.com/zcash/zcash\nzcash-gitian$\n```\n\nProject-specific environment settings will come in handy in the next step, when we'll create an\nisolated python virtual environment specifically for use with this project.\n\n\n\n## Create a python virtual environment for this project\n\nNote: The main purpose of this part is to get a current version of ansible, and keep it locally\nwithin this project. If you already installed ansible (e.g. from an OS package manager like apt),\nyou can skip this part and the following parts about pip and pip packages.\n\nWhen creating a virtual environment, call the python executable you want the virtual environment to\nuse. The location and version will depend on your specific setup -- your OS may provide a suitably\ncurrent python interpreter, or you may have built and installed one yourself. If it's in your PATH,\na command like `type python3` should tell you where it is installed on your system. For example:\n\n```\n% type python3\npython3 is /usr/bin/python3\n% /usr/bin/python3 --version\nPython 3.9.7\n```\n\nWe can use python's built-in `venv` module to create a virtual environment:\n\n```\nzcash-gitian % /usr/bin/python3 -m venv ./local/python_v3.9.7_venv\n```\n\nTranslation: \"Create a virtual environment at ./local/python_v3.9.7_venv\".\n\nThe project subdirectory `local` is `.gitignored` to provide a convenient location for files we\ndon't want to commit and track in version control.\n\nYou should now have a tree of directories and files in `local/python_v3.9.7_venv`:\n\n```\nzcash-gitian % ls -F ./local/python_v3.9.7_venv\nbin/\t\tinclude/\tlib/\t\tpyvenv.cfg\n```\n\nInside the `bin` directory, among other things, are the entries `python` and `python3`, which are\nsymlinks that point back to the `python3` executable we used to create this environment:\n\n```\nzcash-gitian % ls -F ./local/python_v3.9.7_venv/bin/\nActivate.ps1\tactivate.csh\tpip*\t\tpip3.9*\t\tpython3@\nactivate\tactivate.fish\tpip3*\t\tpython@\t\tpython3.9@\n```\n\nA python virtual environment is 'active' if the python interpreter being executed is run from its\npath inside the environment's `bin` directory. Even though the file being executed is the same\nwhether run directly or via a symlink, it pays attention to the path of the command that was used to\nrun it.\n\nAn `activate` script is provided, and you can use that, but if you're using `direnv` you can set up\na simple automatic activation for the project directory by adding the following line to `.envrc`:\n\n```\nload_prefix local/python_v3.9.7_venv\n```\n\nThe command `load_prefix` is provided by `direnv` to modify a whole set of common \"path\" variables\n(including PATH) according to a common unix pattern.\n\nLet's add that line now:\n\n```\nzcash-gitian$ echo \"load_prefix local/python_v3.9.7_venv\" >> .envrc\ndirenv: error .envrc is blocked. Run `direnv allow` to approve its content.\nzcash-gitian$ direnv allow\ndirenv: loading .envrc\ndirenv: export +CPATH +GIT_EMAIL +GIT_NAME +GPG_KEY_ID +GPG_KEY_NAME +LD_LIBRARY_PATH +LIBRARY_PATH +MANPATH +PKG_CONFIG_PATH +ZCASH_GIT_REPO_URL +ZCASH_VERSION ~PATH\nzcash-gitian$\n```\n\nWhen the content of `.envrc` is changed, it needs to be approved again (another security\nprecaution). Then, several variables were set or updated to add paths within our virtual environment\ndirectory at the front (left side) of the list. Let's look at PATH and its effect on which `python`\nlocations we default to:\n\n```\nzcash-gitian$ echo $PATH\n/Users/harrypotter/Projects/zcash-gitian/local/python_v3.9.7_venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\nzcash-gitian$ type python\npython is /Users/harrypotter/Projects/zcash-gitian/local/python_v3.9.7_venv/bin/python\nzcash-gitian$ type python3\npython3 is /Users/harrypotter/Projects/zcash-gitian/local/python_v3.9.7_venv/bin/python3\n```\n\nSince the `python` and `python3` commands will now run from the locations we've installed into our\nproject's virtual environment while we are in the project directory, we can consider the virtual\nenvironment active when using a shell at (or below) that location.\n\n\n\n## Upgrade pip\n\n`pip3` has a command to upgrade itself. Let's go ahead and run that:\n\n```\nzcash-gitian % pip3 install --upgrade pip\nRequirement already satisfied: pip in ./local/python_v3.9.7_venv/lib/python3.9/site-packages (21.2.4)\n```\n\n\n\n## Install pip packages\n\nWe have some dependencies to install as python packages, using the pip package manager installed\nabove. The set we need, with version numbers managed via git, is in `requirements-pip.lock`; we can\nrun `pip3 install` with that file as input:\n\n```\nzcash-gitian$ pip3 install --requirement requirements-pip.lock\n```\n\nCheck that you can run `ansible` from the command line:\n\n```\nzcash-gitian % ansible --version\nansible [core 2.11.5]\n[...]\nzcash-gitian %\n```\n\n\n\n## Decide on a gpg keypair to use for gitian\n\nYou can generate a keypair specifically for zcash gitian builds with a command like the one below.\n\n\n```\nzcash-gitian$ gpg --quick-generate-key --batch --passphrase '' \"Harry Potter (zcash gitian) <hpotter@hogwarts.wiz>\"\ngpg: key 3F0C2117D53A4A49 marked as ultimately trusted\ngpg: directory '/home/hpotter/.gnupg/openpgp-revocs.d' created\ngpg: revocation certificate stored as '/home/hpotter/.gnupg/openpgp-revocs.d/3F14A629C06FA31D59C64FE93F0C2117D53A4A49.rev'\n```\n\nSome explanation of the arguments used in the above example:\n\n    --quick-generate-key --batch   This combination of options allows options to be given on the\n                                   command line. Other key generation options use interative\n                                   prompts.\n\n    --passphrase ''                Passphrase for the generated key. An empty string as shown here\n                                   means save the private key unencrypted.\n\n    \"Name (Comment) <Email>\"       The user id (also called uid) to associate with the generated\n                                   keys. Concatenating a name, an optional comment, and an email\n                                   address using this format is a gpg convention.\n\n\nYou can check that the key was generated and added to your local gpg key database, and see its\nfingerprint value, like this:\n```\nzcash-gitian$ gpg --list-keys\n/home/hpotter/.gnupg/pubring.kbx\n----------------------------------\npub   rsa2048 2018-04-23 [SC] [expires: 2020-04-22]\n      3F14A629C06FA31D59C64FE93F0C2117D53A4A49\nuid           [ultimate] Harry Potter (zcash gitian) <hpotter@hogwarts.wiz>\nsub   rsa2048 2018-04-23 [E]\n```\n\nUpdate your `GPG_KEY_ID` and `GPG_KEY_NAME` variables in `.env` as follows:\n\n- `GPG_KEY_ID`: In the example output shown here, this is the 40 character string\n`3F14A629C06FA31D59C64FE93F0C2117D53A4A49`. Some versions of gpg may truncate this value, e.g. to 8\nor 16 characters. You should be able to use the truncated value.\n\n- `GPG_KEY_NAME`: This is passed as the '--signer' argument to Gitian, and used as the name of a\ndirectory for your signatures in our `gitian.sigs` repository. We suggest using the username portion\nof the email address associated with your GPG key. In our example this is `hpotter`.\n\nFor more info about updating or revoking gpg keys, see [Notes on updating or revoking GPG keys](docs/gpg_keys.md)\n\n\n\n## Publish your GPG public key\n\nThere is a network of key servers that we can use to quickly and easily make your key available for\nothers to find, download, and use to verify any signatures you publish for gitian builds. These\nkeyservers won't let you delete a key you upload, but as long as you have the private key you can\npost a revocation of a key you've previously uploaded.\n\nThe keyservers (mostly) synchronize with one another using (mostly)\n[SKS Keyserver](https://bitbucket.org/skskeyserver/sks-keyserver/wiki/Home) so it may not matter\nvery much which one you upload your key to. That said, at the time of writing,\n[gitian-builder's `gverify` command uses pgp.mit.edu as its keyserver](https://github.com/devrandom/gitian-builder/blob/ee1806672b7b45fa6149d0163de5828ade4f8659/bin/gverify#L116) so\nit makes sense in this case to upload there.\n\nYou can upload your public key like this:\n\n```\n$ gpg --keyserver pgp.mit.edu --send-keys 3F14A629C06FA31D59C64FE93F0C2117D53A4A49\ngpg: sending key 3F0C2117D53A4A49 to hkp://pgp.mit.edu\n```\n\nSome explanation of the arguments used in the above example:\n\n    --keyserver pgp.mit.edu        Specify the keyserver to use. gpg will use a default server if\n                                   you don't provide one here or one that has been defined in\n                                   gpg.conf\n\n    --send-keys 3F14A629C06FA31D59C64FE93F0C2117D53A4A49\n                                   The gpg_key_id for the key to upload.\n\n\nYou can verify that the key was successfully uploaded like this:\n\n```\n$ gpg --keyserver pgp.mit.edu --receive-keys 3F14A629C06FA31D59C64FE93F0C2117D53A4A49\ngpg: key 3F0C2117D53A4A49: \"Harry Potter (zcash gitian) <hpotter@hogwarts.wiz>\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n```\n\n\n\n## Install Vagrant plugins\n\nThis project uses some 3rd party Vagrant plugins. These dependencies are specified in `Vagrantfile`.\nWe can install them locally in the `.vagrant` directory with the following command:\n\n```\nzcash-gitian$ vagrant plugin install --local\n```\n\n\n\n## Configure the version of zcash you want to build and sign\n\nSet the value of the `ZCASH_VERSION` variable in `.env` to point to the zcash commit you want to\ncreate a signature for. Likely you want the name of a\n[git-tagged zcash version](https://github.com/zcash/zcash/tags), usually the most recent released\nversion.  \n\n## Provision a virtual machine\n\nEdit the `Vagrantfile` so the `v.memory` and `v.cpus` values are a bit lower than the memory and CPU count in the actual physical machine. If they're set too high then you might badly wedge your machine.\n\nFrom the project root directory, run:\n\n```\nzcash-gitian$ vagrant up zcash-build\n```\n\nThis will provision a Gitian host virtual machine that uses a Linux container (LXC) guest to perform\nthe actual builds.\n\n\nLoad your ssh key into ssh-agent\n--------------------------------\n\nLoad your ssh key (for pushing signatures to github) into ssh-agent. The approach here is to allow\nprograms in the zcash-build VM to connect to ssh-agent to perform operations with the private key.\nThis way, we don't need to copy ssh keys into the VM.\n\nIf you don't already have an ssh-agent running you may need to start one.  For example, you might be\nable to start one like this:\n\n```\neval `ssh-agent -s`\n```\n\n You can verify that the key is loaded by\nrunning `ssh-add -l`.\n\n```\nzcash-gitian$ ssh-add -l\nThe agent has no identities.\n\nzcash-gitian$ ssh-add ~/.ssh/github_id_rsa\nIdentity added: /home/hpotter/.ssh/github_id_rsa (/home/hpotter/.ssh/github_id_rsa)\n\nzcash-gitian$ ssh-add -l\n4096 SHA256:4fFdwJ71VIpF5cW0dqrsU7jxjctaFcAKmdQZPEqR0Y4 /home/hpotter/.ssh/github_id_rsa (RSA)\n```\n\n\nSSH into the VM\n---------------\n\nVagrant should now show that the new VM is in the 'running' state:\n\n```\nzcash-gitian$ vagrant status\nCurrent machine states:\n\nzcash-build               running (virtualbox)\n\nThe VM is running. To stop this VM, you can run `vagrant halt` to\nshut it down forcefully, or you can run `vagrant suspend` to simply\nsuspend the virtual machine. In either case, to restart it again,\nsimply run `vagrant up`.\n```\n\nUse the `vagrant ssh` command to start a shell session in the VM. Once in that session, you can use\nssh-add again to see that your forwarded key is available, and check that you can use that key to\nauthenticate to github.\n\n```\nzcash-gitian$ vagrant ssh zcash-build\n[...]\n\n# on the virtualbox vm\nvagrant@zcash-build:~$ ssh-add -l\n4096 d1:43:75:a7:95:65:9e:d4:8e:57:d8:98:58:7d:92:4c /home/hpotter/.ssh/github_id_rsa (RSA)\n\nvagrant@zcash-build:~$ ssh -T git@github.com\nWarning: Permanently added the RSA host key for IP address '192.30.253.112' to the list of known hosts.\nHi harrypotter! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n\nBuilding Zcash\n--------------\n\nOnce in a shell session in the VM, we're ready to run the gitian build.\n\n```\n# on the virtualbox vm\nvagrant@zcash-build:~$ ./gitian-build.sh\n```\n\nIf you want to run a parallel build, invoke `./gitian-parallel-build.sh` instead.\n\nThe output from `gbuild` is informative. There are some common warnings which can be ignored, e.g. if you get an intermittent privileges error related to LXC then just execute the script again. The most important thing is that one reaches the step which says `Running build script (log in var/build.log)`. If not, then something else is wrong and you should let us know.\n\nTake a look at the variables near the top of `~/gitian-build.sh` and get familiar with its functioning, as it can handle most tasks.\n\nIt's also a good idea to regularly `git pull` on this repository to obtain updates and re-run the entire VM provisioning for each release, to ensure current and consistent state for your builder.\n\nGenerating and uploading signatures\n-----------------------------------\n\nSignatures can be verified by running `gitian-build.sh --verify`, but set `build=false` in the script to skip building. Run a `git pull` beforehand on `gitian.sigs` so you have the latest. The provisioning includes a task which imports Zcash developer public keys to the Vagrant user's keyring and sets them to ultimately trusted, but they can also be found at `contrib/gitian-downloader` within the Zcash source repository.\n\nAfter the build successfully completes, the gitian command `gsign` will be called, which will\ngenerate signatures, and a commit will be added.\n\nFork the [zcash/gitian.sigs](https://github.com/zcash/gitian.sigs) repository by following the link\nand clicking \"fork\".\n\nNow you can cd into the gitian.sigs directory, set the repository to point to your fork of\n[zcash/gitian.sigs](https://github.com/zcash/gitian.sigs), push\nyour updates to a branch, and then make a pull request on github.\n\n```\ncd gitian.sigs\ngit remote rename origin upstream\ngit remote add origin git@github.com:harrypotter/gitian.sigs.git\ngit checkout -b v2.0.6\ngit push origin v2.0.6\n```\n\n\nWorking with GPG\n----------------\n\nWe provide two options for automatically importing keys into the VM, or you may choose to copy them manually. GPG keys are needed to sign the manifests which get pushed to [gitian.sigs](https://github.com/zcash/gitian.sigs).\n\nGPG is tricky, especially if you use a smartcard and can't copy the secret key. We have a script intended to forward the gpg-agent socket into the VM, `forward_gpg_agent.sh`, but it is not currently working. If you want your full keyring to be available, you can use the following workaround involving `sshfs` and synced folders:\n\n    vagrant plugin install vagrant-sshfs\n\nUncomment the line beginning with `gitian.vm.synced_folder \"~/.gnupg\"` in `Vagrantfile`. Ensure the destination mount point is empty. Then run:\n\n    vagrant sshfs --mount zcash-build\n\nVagrant synced folders may also work natively with `vboxfs` if you install VirtualBox Guest Additions into the VM from `contrib`, but that's not as easy to setup.\n\n\nCopying files\n-------------\n\nTo copy files to the VM: `vagrant scp file_on_host.txt :file_on_vm.txt`\n\nTo copy files from the VM: `vagrant scp :file_on_vm.txt file_on_host.txt`\n\nOther notes\n-----------\n\nPort 2200 on the host machine should be forwarded to port 22 on the guest virtual machine.\n\nThe automation and configuration management assumes that VirtualBox will assign the IP address `10.0.2.15` to the Gitian host Vagrant VM.\n", "release_dates": []}, {"name": "zcash-seeder", "description": "Network bootstrapping for the Zcash cryptocurrency via DNS", "language": "C++", "license": null, "readme": "bitcoin-seeder\n==============\n\nBitcoin-seeder is a crawler for the Bitcoin network, which exposes a list\nof reliable nodes via a built-in DNS server.\n\nFeatures:\n* regularly revisits known nodes to check their availability\n* bans nodes after enough failures, or bad behaviour\n* accepts nodes down to v0.3.19 to request new IP addresses from,\n  but only reports good post-v0.3.24 nodes.\n* keeps statistics over (exponential) windows of 2 hours, 8 hours,\n  1 day and 1 week, to base decisions on.\n* very low memory (a few tens of megabytes) and cpu requirements.\n* crawlers run in parallel (by default 24 threads simultaneously).\n\nREQUIREMENTS\n------------\n\n$ sudo apt-get install build-essential libboost-all-dev libssl-dev\n\nUSAGE\n-----\n\nAssuming you want to run a dns seed on dnsseed.example.com, you will\nneed an authorative NS record in example.com's domain record, pointing\nto for example vps.example.com:\n\n$ dig -t NS dnsseed.example.com\n\n;; ANSWER SECTION\ndnsseed.example.com.   86400    IN      NS     vps.example.com.\n\nOn the system vps.example.com, you can now run dnsseed:\n\n./dnsseed -h dnsseed.example.com -n vps.example.com\n\nIf you want the DNS server to report SOA records, please provide an\ne-mail address (with the @ part replaced by .) using -m.\n\nCOMPILING\n---------\nCompiling will require boost and ssl.  On debian systems, these are provided\nby `libboost-dev` and `libssl-dev` respectively.\n\n$ make\n\nThis will produce the `dnsseed` binary.\n\n\nRUNNING AS NON-ROOT\n-------------------\n\nTypically, you'll need root privileges to listen to port 53 (name service).\n\nOne solution is using an iptables rule (Linux only) to redirect it to\na non-privileged port:\n\n$ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-port 5353\n\nIf properly configured, this will allow you to run dnsseed in userspace, using\nthe -p 5353 option.\n\nAnother solution is allowing a binary to bind to ports < 1024 with setcap (IPv6 access-safe)\n\n$ setcap 'cap_net_bind_service=+ep' /path/to/dnsseed\n", "release_dates": []}, {"name": "zcash-test-vectors", "description": null, "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Zcash Python test vectors\n\nCode to generate test vectors for various parts of Zcash.\n\nThe generated test vectors are checked into the repository:\n- `test-vectors/json/`: JSON format.\n- `test-vectors/rust/`: Rust format, suitable for copying into a Rust library or\n  application to use from `#[cfg(test)]` code.\n- `test-vectors/zcash/`: Bitcoin-flavoured JSON format (where 256-bit values are\n  encoded as byte-reversed hex strings), for use in `zcashd` unit tests.\n\nTo generate the test vectors yourself (for example, to generate a larger set\nafter adjusting:\n\n- Install [`poetry`](https://python-poetry.org/).\n- `poetry install`\n- `poetry run SCRIPT_NAME [-t json|rust|zcash]`\n  - `SCRIPT_NAME` is one of the scripts listed in `pyproject.toml`.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "zcash-wordpress-theme", "description": "Zcash Wordpress theme", "language": "CSS", "license": null, "readme": "# Zcash WordPress Theme\nTwenty Seventeen child theme developed for and maintained by Zerocoin Electric Coin Company\n", "release_dates": []}, {"name": "zcash.github.io", "description": null, "language": null, "license": null, "readme": "# Zcash\n\nWelcome to the zcash documentation pages. Here you can find information on zcash itself and underlying crpytographic libraries.\n\n## Getting Started\nhttps://zcash.readthedocs.io/en/latest/ \n\n## Zcash RPCs\nhttps://zcash.github.io/rpc/\n\n## Zcash Book\nhttps://zcash.github.io/zcash/\n\n## Cryptographic Libraries\nhttps://github.com/zcash/orchard\nhttps://github.com/zcash/halo2\nhttps://github.com/zcash/librustzcash\n\n## Cryptographic Library Docs\nhttps://zcash.github.io/orchard\nhttps://zcash.github.io/halo2\nhttps://zcash.github.io/librustzcash\n\n## Zcash Developer Roadmap\nhttps://zcash.github.io/developers/\n", "release_dates": []}, {"name": "zcash_note_encryption", "description": "Note encryption interfaces & convenience methods for the Sapling and Orchard Zcash Protocols", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# zcash_note_encryption\n\nThis crate implements the [in-band secret distribution scheme] for the Sapling and\nOrchard protocols. It provides reusable methods that implement common note encryption\nand trial decryption logic, and enforce protocol-agnostic verification requirements.\n\nProtocol-specific logic is handled via the `Domain` trait. Implementations of this\ntrait are provided in the [`zcash_primitives`] (for Sapling) and [`orchard`] crates;\nusers with their own existing types can similarly implement the trait themselves.\n\n[in-band secret distribution scheme]: https://zips.z.cash/protocol/protocol.pdf#saplingandorchardinband\n[`zcash_primitives`]: https://crates.io/crates/zcash_primitives\n[`orchard`]: https://crates.io/crates/orchard\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "zcash_spec", "description": "Rust crate with low-level types for implementing Zcash specifications", "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# zcash_spec\n\nThis crate provides low-level types for implementing Zcash specifications. When a common\nfunction defined in [the Zcash Protocol Specification] is used in multiple protocols (for\nexample the Sapling and Orchard shielded protocols), a corresponding common type in this\ncrate can be shared between implementations (for example by the [`sapling-crypto`] and\n[`orchard`] crates).\n\n[the Zcash Protocol Specification]: https://zips.z.cash/protocol/protocol.pdf\n[`sapling-crypto`]: https://github.com/zcash/sapling-crypto\n[`orchard`]: https://github.com/zcash/orchard\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for\ninclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed\nas above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "zfaucet", "description": "Simple faucet for cryptocurrency testnet coins, currently configured for zcash.", "language": "Python", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Zcash Testnet Faucet \n\nA Django app that dispenses testnet TAZ to transparent and shielded addresses. Accepts donations as well.\n\n## Initial setup instructions:  \n\nInstall dependencies:\n```\nsudo apt-get install libpq-dev python-dev postgresql postgresql-contrib python-psycopg2 nginx fail2ban\n```\n\nAfter cloning the repo for zfaucet, be sure to clone the pyZcash library (contains wrappers around zcash-cli rpc calls and a few custom functions):\n\nCreate a subdirectory for the lib. From `/home/{{ faucet_user }}/faucet`:\n```\nmkdir lib\nchmod 0755 lib \ncd lib\ngit clone https://github.com/arcalinea/pyZcash\n```\nFrom `/home/{{ faucet_user }}/faucet`, create a symlink to the lib:\n`ln -s lib/pyZcash/pyZcash pyZcash`\n\n## Configuring Django\n\nModify settings.py to configure settings.  \n\nEnter DB secrets:\n```\nDJANGO_SECRET_KEY=xxx\nDJANGO_POSTGRESQL_PASSWORD=xxx\n```\nSet 'dev' or 'prod' mode for development or production: `DJANGO_ENVIRONMENT=prod`\n\nInstall the requirements in requirements.txt:\n```\npip install -r requirements.txt  \npip install -r requirements-prod.txt  \n```\nCreate a user \"postgres\" and create a database named \"django\":\n```\nsudo su - postgres  \ncreatedb django  \ncreateuser -P django  \n```\nEnter the postgres shell and grant privileges on the django db to django:\n```\npsql  \nGRANT ALL PRIVILEGES ON DATABASE django TO django;\n```\nMake the migrations for the django db:\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n## Configuring the webserver\n\nSet up nginx and Gunicorn:\n\n```\ngunicorn --workers=2 zfaucet.wsgi  \nsudo service nginx start  \nvim /etc/nginx/sites-available/zfaucet \n```\n\n    server {\n        server_name faucet.yoursite.com;\n\n        access_log off;\n\n        location /static/ {\n       \t\talias /home/{{ faucet_user }}/faucet/faucet/static/;\n    \t}\n\n        location / {\n        \tproxy_pass http://127.0.0.1:8000;\n        \tproxy_set_header Host $host;\n        \tproxy_set_header X-Forwarded-Host $server_name;\n       \t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       \t\tproxy_set_header X-Real-IP $remote_addr;\n        \tadd_header P3P 'CP=\"ALL DSP COR PSAa PSDa OUR NOR ONL UNI COM NAV\"';\n    \t}\n    }\n\nEnable the nginx config for zfaucet and remove the default config:\n```\ncd /etc/nginx/sites-enabled  \nsudo ln -s ../sites-available/zfaucet  \nsudo rm default\n```\n\nCollect the static resources for the Django app. \n\nMake sure path to static resources in settings.py is set to the same location specified in the nginx config.\nIn settings.py, set `STATIC_ROOT = '/home/{{faucet_user}}/faucet/faucet/static'`\n\nThen from within `/home/{{ faucet_user }}/faucet/`, run command: `python manage.py collectstatic`\n\nSet up fail2ban to rate-limit requests for the faucet. Put the following in `/etc/fail2ban/filter.d/zcash-faucet.conf`:\n```\n# Fail2ban filter for Zcash faucet\n[Definition]\n\nfailregex = ^ -.*POST / HTTP/1\\..\" 200\nignoreregex =\n```\nAnd append this block within `/etc/fail2ban/jail.local`:\n```\n      [zcash-faucet]\n\n      enabled  = true\n      filter   = zcash-faucet\n      port     = http,https\n      action   = iptables-multiport[name=zcash-faucet, port=\"http,https\"]\n      logpath  = /var/log/nginx/access.log\n      maxretry = 10\n      findtime = 3600\n      bantime  = 86400\n```\n  \n## Setting up custom functions\n\nCreate a cron job for a regular faucet health check to collect wallet/network stats, and to sweep coinbase funds into a zaddr:\n`crontab -e`\n\nAdd lines:\n```\n*/5 * * * * python /home/{{faucet_user}}/faucet/manage.py healthcheck \n*/5 * * * * python /home/{{faucet_user}}/faucet/manage.py sweepfunds\n```\nMake sure you run the healthcheck before starting the server so the database has at least one entry.\n \n`python manage.py healthcheck`\n", "release_dates": []}, {"name": "zip32", "description": null, "language": "Rust", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# zip32 [![Crates.io](https://img.shields.io/crates/v/zip32.svg)](https://crates.io/crates/zip32) #\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions.\n", "release_dates": []}, {"name": "zips", "description": "Zcash Improvement Proposals", "language": "HTML", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": null, "release_dates": []}]