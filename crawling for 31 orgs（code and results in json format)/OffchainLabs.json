[{"name": "actions", "description": "Collection of reusable GitHub actions and workflows", "language": "Shell", "license": null, "readme": "# Offchain Labs GitHub Actions\n\nA collection of reusable GitHub actions and workflows.\n", "release_dates": []}, {"name": "Arb-Burner-Wallet", "description": null, "language": "TypeScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "## Burner Wallet 2.0\n\nThe Burner Wallet 2.0 is a modular, extendable and customizable web application for seamless crypto payments.\n\nCreate a burner wallet in just a few lines of code:\n\n```JSX\nconst core = new BurnerCore({\n  signers: [new InjectedSigner(), new LocalSigner()],\n  gateways: [new InfuraGateway(process.env.REACT_APP_INFURA_KEY), new XDaiGateway()],\n  assets: [xdai, dai, eth],\n});\n\nconst exchange = new Exchange({ pairs: [new XDaiBridge(), new Uniswap('dai')] });\n\nconst BurnerWallet = () =>\n  <ModernUI\n    core={core}\n    plugins={[exchange, new ENSPlugin()]}\n  />\n```\n\n### Full documentation\n\nVisit https://burner-wallet.readthedocs.io/ for more documentation on using the Burner Wallet libraries.\n\n### Building a Wallet\n\n#### Simple, customized wallet\n\nDo you want to customize your own version of the wallet? This repo contains the source files for\nthe Burner Wallet 2 libraries, but you don't need to download or fork this to build a Burner Wallet!\n\nCheck out [sample-wallet](https://github.com/burner-wallet/sample-wallet) to build a simple,\ncustomized wallet. If you're interested in building a Burner Wallet plugin, check out the\n[sample-plugin](https://github.com/burner-wallet/sample-plugin) repo.\n\n\nAlternatively, visit https://burnerfactory.com to create your own wallet without writing any code!\n\n##### Setting Infura key\n\nBy default, `basic-wallet` uses the InfuraGateway for connecting to commonly used Ethereum chains.\n\nThe entry point takes an Infura key from the `REACT_APP_INFURA_KEY` environment variable. For your wallet to\nfunction correctly, you must create a file named `.env` in the `basic-wallet` folder with the following value:\n\n```\nREACT_APP_INFURA_KEY=<your infura key>\n```\n\nYou can generate an Infura key at https://infura.io/\n\n##### Add a custom token\n\nYou can add any ERC20 token to your wallet by constructing a new ERC20Asset and adding it to the asset list.\n\nThe `id` parameter is the internal ID used by the wallet, while the `name` parameter is the display name\nthat will be displayed to the user. `network` is the chain ID of the chain the token is deployed to\n(`'1'` for mainnet, `'100'` xDai, etc). `address` is the address where the token contract is deployed.\n\n```JS\nimport { xdai, dai, eth, ERC20Asset } from '@burner-wallet/assets';\n\nconst bos = new ERC20Asset({\n  id: 'bos',\n  name: 'Boston Token',\n  network: '100',\n  address: '0x52ad726d80dbb4A9D4430d03657467B99843406b',\n});\n\nconst core = new BurnerCore({\n  assets: [bos, xdai, dai, eth],\n});\n```\n\n#### Local developer wallet\n\nAre you a developer, hoping to test changes to other modules in this project (modern-ui, ui-core or various plugins)?\n\nIn the project root, run these commands:\n```\nyarn install\nyarn run build\nyarn start-local\n```\nThis will start a wallet on http://localhost:3000 that is connected to your local\nGanache instance (connecting to node http://localhost:8545 by default).\n\nBefore the wallet server launches, a script create a pre-filled account. This account will hold 1 Ganache ETH and 100\ntest tokens.\n\nNote that Metamask will override the local account, disable it or open in incognito mode for local development.\n\n## Packages\n\nThis is a monorepo that contains the following packages:\n\n- `@burner-wallet/modern-ui`: The standard user interface for burner wallets\n- `@burner-wallet/classic-ui`: The original burner wallet design. Maintained for nostalgia.\n- `@burner-wallet/ui-core`: The core UI logic for all burner wallets (not to be confused with the @burner-wallet/core\n  package, which contains core blockchain logic).\n- `@burner-wallet/types`: Typescript type bindings\n\nPlugins:\n\n- `@burner-wallet/exchange`: An extendable plugin for implementing asset exchanges and bridges\n- `@burner-wallet/ens-plugin`: Support for the Ethereum Name Service\n- `@burner-wallet/erc681-plugin`: Support for scanning ERC681 payment request QR codes\n- `@burner-wallet/legacy-plugin`: Allow scanning old paper wallets and handling old URL routes\n- `@burner-wallet/link-plugin`: Send tokens to friends over text by sending funds to a URL\n- `@burner-wallet/metamask-plugin`: Button to unlock Metamask. Requires `InjectedSigner`\n- `@burner-wallet/recent-accounts-plugin`: Suggest recent accounts when sending funds\n- `@burner-wallet/seed-phrase-plugin`: Load accounts by seed phrase\n\nThe Burner Wallet 2 is dependent on the [`burner-core`](austintgriffith/burner-core) packages\n(`@burner-wallet/core` and `@burner-wallet/assets`) for handling core blockchain functionality.\n\n## Plugin Development\n\nThe burner wallet functionality can be extended by passing plugin objects to the BurnerUI component.\n\n### Reference Plugins\n\nThis repo contains a number of standard plugins that can be considered \"officially supported\"\n\n- **[Exchange](/packages/exchange)**: For exchanging or bridging different assets. Note that the exchange itself is also extendable\n  by adding new exchange pairs.\n- **[LegacyPlugin](/packages/legacy)**: Supports URLs and QR codes from Austin's original burner code\n- **[LinkPlugin](/packages/link)**: Allows generating links, which can be opened to claim tokens\n\nThe burner-factory-plugins repo also contains a number of other plugins:\n\n- **[@burner-factory/collectable-plugin](https://github.com/dmihal/burner-factory-plugins/tree/master/plugins/collectable-plugin)**: A plugin for collecting NFTs\n- **[@burner-factory/order-menu-plugin](https://github.com/dmihal/burner-factory-plugins/tree/master/plugins/order-menu-plugin)**: Plugin for ordering predefined menu items. Useful for food/drink events.\n- **[@burner-factory/schedule-plugin](https://github.com/dmihal/burner-factory-plugins/tree/master/plugins/schedule-plugin)**: Displays schedules in the wallet. Useful for events.\n- **[@burner-factory/stock-market-menu-plugin](https://github.com/dmihal/burner-factory-plugins/tree/master/plugins/stock-market-menu-plugin)**: Similar to the order-menu-plugin, this allows users to order pre-defined items off a menu. However, a contract adjusts the price according to supply and demand.\n", "release_dates": []}, {"name": "arb-compiler-evm-archive", "description": null, "language": "Python", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# arb-compiler-evm\n\nA compiler that translates Ethereum VM code to Arbitrum VM code.\n\nArbitrum technologies are patent pending. This repository is offered under the Apache 2.0 license. See LICENSE for details.\n", "release_dates": []}, {"name": "arb-ethers-web3-bridge", "description": "Arbitrum bridge for converting ethers provider into web3", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# arb-provider-web3\n\nArbitrum browser provider for web3\n\nYou can build a browser compatible version of this library using `browserify index.js --standalone ArbProvider -o arb-provider-web3.js`\n\nCredit to https://github.com/ethers-io/ethers-web3-bridge for providing main bridge code used by this module.\n\nArbitrum technologies are patent pending. This repository is offered under the Apache 2.0 license. See LICENSE for details.\n", "release_dates": []}, {"name": "arb-os", "description": "ArbOS operating system, to run at Layer 2 on Arbitrum chains.  Also a compiler for Mini, the language in which ArbOS is written.", "language": "Rust", "license": null, "readme": "# ArbOS and Mini compiler\n\nArbOS is the \"operating system\" that runs at Layer 2 on an Arbitrum chain, to manage the chain's operation, maintain security, isolate contracts from each other, manage contract lifecycles, and account for and charge for resource usage.\n\nArbOS is written in the Mini language. The Mini compiler is also in this repo.  It compiles programs written in Mini, generating code to run on the Arbitrum Virtual Machine.  The compiler is accompanied by an AVM emulator, with associated debugger and profiler.\n\nTo build and test everything, do `make clean` then `make`.\n", "release_dates": ["2021-09-22T02:56:42Z"]}, {"name": "arb-peripheral-template", "description": "An easy to use template to integrate with Arbitrum peripheral contracts", "language": "JavaScript", "license": null, "readme": "## Arbitrum Peripheral Contracts\n\nThis repo provides an easy to use template if you're looking to integrate with Arbitrum peripheral contracts such as the token bridging gateways.\n\n\nInstall dependencies\n\n```bash\ngit submodule update --init --recursive\nyarn install\n```\n\nCompile the contracts\n\n```bash\nyarn compile\n```\n", "release_dates": []}, {"name": "arb-provider-ethers-deprecated-", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "### Deprecation Notice:\n\nThis package is deprecated in favor of [arb-ts](https://www.npmjs.com/package/arb-ts).\n", "release_dates": []}, {"name": "arb-retryables-monitoring", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Arb Retryables Monitoring Tool\n\nThis tool enables you to track retryable tickets that were initiated from a _particular address_ after a _specific day_ but have failed to be automatically redeemed. If you want to learn more about retryables and their functioning, please see [here](https://developer.arbitrum.io/arbos/l1-to-l2-messaging).\n\nNote that the tool relies on subgraphs, which index all the Arbitrum retryables in real-time, to retrieve data for retryables on both L1 (Ethereum) and L2 (Arbitrum One). In rare cases, there might be issues with the graph, causing our L1 and/or L2 subgraph to pause and resulting in data lagging for several hours until the nodes are resynced and all blocks are processed. If this occurs, it may cause tickets to not be detected accurately.\n\n## Prerequisites\n\nInstall the following, if you don't have them already:\n\n- [Node.js](https://nodejs.org/en)\n- [Yarn](https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable)\n\n## Config Environment Variables\n\nSet the values shown in .env-sample as environmental variables. To copy it into a .env file:\n\n```bash\ncp .env-sample .env\n```\n\n(you'll still need to edit some variables, i.e., `L1RPC`, `SENDER_ADDRESS`, and `CREATED_SINCE_DAYS_AGO`)\n\n## Installation\n\nFrom the root directory:\n\n```bash\nyarn install\n```\n\n## Execution\n\nBased on your system's configuration, you may have tickets that are initiated either from an externally owned account (EOA) or a contract that generates retryables. To utilize the script, you simply need to provide the corresponding address as an environmental variable and execute the script, using the following command.\n\n```bash\nyarn failed_autoredeems\n```\n\nThe output will include all the tickets that were initiated from the specified address and generated `x` days in the past, where the value of `x` is defined as an environment variable. Specifically, the script will provide the following information:\n\n- All retryables that have failed to be automatically redeemed.\n- The current status of each ticket.\n- If the ticket has not yet expired, it will display the future expiry time and provide a link for manual redemption.\n- The L1 transaction of the retryable, which refers to the submission transaction of the ticket.\n", "release_dates": []}, {"name": "arbitrum", "description": null, "language": null, "license": null, "readme": "# Arbitrum repository directory\nThis repository serves as an index to the most commonly used repositories within the organisation.\n\n## Common repositories\n- [Arbitrum Nitro](https://github.com/OffchainLabs/nitro/) - Nitro is the latest iteration of the Arbitrum technology\n- [Arbitrum Classic](https://github.com/OffchainLabs/arbitrum-classic) - Old \"classic\" Arbitrum tech stack\n- [Arbitrum SDK](https://github.com/OffchainLabs/arbitrum-sdk) - SDK that provides common helper functionality as well access to the underlying smart contract interfaces of Arbitrum\n- [Arbitrum Developers Documentation](https://github.com/OffchainLabs/arbitrum-docs) - Public documentation for developers available at https://developer.arbitrum.io/\n- [Arbitrum tutorials](https://github.com/OffchainLabs/arbitrum-tutorials) - Tutorials and demos showing and explaining how to interact with Arbitrum\n\n", "release_dates": []}, {"name": "arbitrum-classic", "description": "Powers fast, private, decentralized applications", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p align=\"center\"><img src=\"docs/assets/arbitrum_horizontal_logo.png\" width=\"600\"></p>\n\n# Arbitrum Classic Monorepo\n\nThis repo represents the old \"classic\" Arbitrum tech stack; Arbitrum One was upgraded to use the Nitro tech in August of 2022. \n\nFor the current Arbitrum Nitro codebase, see [Nitro](https://github.com/OffchainLabs/nitro).\n\n- [Discord](https://discord.gg/ZpZuw7p)\n- [Developer guide](https://developer.offchainlabs.com)\n\nThis repository is offered under the Apache 2.0 license. See LICENSE for details.", "release_dates": ["2022-08-31T16:09:26Z", "2022-08-26T03:06:46Z", "2022-08-21T04:59:43Z", "2022-06-02T23:45:54Z", "2022-05-23T19:24:50Z", "2022-04-05T16:32:08Z", "2022-02-28T22:27:29Z", "2021-12-15T02:22:44Z", "2021-12-01T01:54:50Z", "2021-11-29T20:09:51Z", "2021-11-12T21:27:06Z", "2021-10-26T20:26:50Z", "2021-03-30T21:05:03Z", "2020-11-24T21:42:04Z", "2020-10-12T21:51:49Z", "2020-09-04T16:38:32Z", "2020-08-31T21:16:10Z", "2020-06-19T22:55:58Z", "2020-06-09T15:44:14Z", "2020-06-09T00:53:42Z", "2020-05-05T23:21:41Z", "2020-02-14T22:37:31Z", "2020-02-13T00:22:52Z", "2020-02-12T21:26:57Z", "2020-02-11T21:14:24Z", "2020-02-05T03:52:08Z", "2019-09-07T07:49:08Z", "2019-08-28T23:29:18Z"]}, {"name": "arbitrum-cli-tools", "description": null, "language": "TypeScript", "license": null, "readme": "# Arbitrum Tools\n\nThis monorepo contains a suit of tools that may help you build on arbitrum or learn some interesting tings of arbitrum.\n\nThis monorepo's tools will build on [Arbitrum SDK](https://github.com/OffchainLabs/arbitrum-sdk) which is helpful when you want to build on arbitrum.\n\n## Installation\n\nFrom root directory:\n\n```bash\nyarn install\n```\n\n## What's included?\n\n#### Arbitrum batch Transaction handler\n\n- [l1-batch-handler](./packages/batch-tx-handler/README.md#l1-batch-handler)\n- [l2-precompile-handler](./packages/batch-tx-handler/README.md#l2-precompile-handler)\n", "release_dates": []}, {"name": "arbitrum-deployment-website", "description": "Ethers interface form Arbitrum chain deployment", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# arbitrum-deployment-website\nEthers interface form Arbitrum chain deployment\n", "release_dates": []}, {"name": "arbitrum-docs", "description": "Arbitrum Docs! Content + Webapp", "language": "MDX", "license": null, "readme": "# Arbitrum Docs\n\nArbitrum Docs, built with docusaurus; docs are live at https://developer.arbitrum.io/.\n\n[Arbitrum SDK](https://github.com/OffchainLabs/arbitrum-sdk) auto-genned docs are included as submodule.\n\n## Contribution\n\nFor most of the docs content, you can contribute by simply reviewing our [docs contribution guidelines](https://docs.arbitrum.io/for-devs/contribute) and opening a PR!\n\nThe following are the only exceptions:\n\n- Contributing to the three troubleshooting pages \u2014 [nodes](arbitrum-docs/partials/_troubleshooting-nodes-partial.md), [builders](arbitrum-docs/partials/_troubleshooting-building-partial.md), and [users](arbitrum-docs/partials/_troubleshooting-users-partial.md), as well as the [glossary](arbitrum-docs/partials/_glossary-partial.md) page \u2014 requires internal Offchain Labs access. If you'd like to make a suggestion about content on any of those pages, open an [issue ticket](https://github.com/OffchainLabs/arbitrum-docs/issues).\n\n- To request to have your project added to the [3rd party node providers page](arbitrum-docs/node-running/node-providers.mdx), use [this form](https://docs.google.com/forms/d/e/1FAIpQLSc_v8j7sc4ffE6U-lJJyLMdBoIubf7OIhGtCqvK3cGPGoLr7w/viewform).\n\n### Initial set up\n\n```shell\ngit clone git@github.com:OffchainLabs/arbitrum-docs.git\n\ncd arbitrum-docs/\n\ngit submodule update --init --recursive\n\ncd website/\n```\n\nInstall node dependencies\n\n```\nyarn\n```\n\nYou will only need to generate docs once:\n\n```\nyarn generate_sdk_docs\n```\n\n### Dev Build\n\nLive build without generating sdk docs (recommended):\n\n```\nyarn start_nitro_docs\n```\n\n(Re)generate sdk docs and live build:\n\n```\nyarn start\n```\n\n### Update submodules\n\nSdk repo:\n\n```\ngit submodule update --remote arbitrum-sdk\n```\n", "release_dates": []}, {"name": "arbitrum-funds-recovery-tool", "description": "Tool to recover funds that are stuck on an L2 aliased address", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Arbitrum Custom Tool for Funds Recovery\nTool to recover funds that are stuck on an L2 aliased address\n\n## Run Locally\n1. git clone this repository\n2. Set env vars:\n   1. `touch .env`\n   2. In `.env`, add `REACT_APP_INFURA_KEY=my-infura-key`\n3. `yarn install`\n4. `yarn start`\n", "release_dates": []}, {"name": "arbitrum-interop-quickstart", "description": null, "language": "JavaScript", "license": null, "readme": "#### NOTE: The tutorials monorepo now lives at https://github.com/OffchainLabs/arbitrum-tutorials\n", "release_dates": []}, {"name": "arbitrum-orbit-deployment-ui", "description": " Introducing the L3 Orbit Chain Deployment Interface, a user-friendly tool to effortlessly deploy your own Layer 3 Orbit Chain. This repository streamlines the setup process, allowing developers to focus on their decentralized applications.", "language": "TypeScript", "license": null, "readme": "# orbit-deployment-ui\n Introducing the Orbit Chain Deployment Interface, a user-friendly tool to effortlessly deploy your own Orbit chain. This repository streamlines the setup process, allowing developers to focus on their decentralized applications.\n\n## Getting Started\nThis tool utilized Next.JS framework. To run this tool, first start the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n\n```\n\nAlso you can first build the project and then start it:\n\n```bash\nyarn build\n# then\nyarn start\n\n```\n\nNow open [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\n## Deployment Procedure\n\n1. Navigate to the main page where you will find four selectable options. Click on the Parameters tab.\n2. On the Parameters page, you have the ability to specify your desired Configuration Parameters. Once you have adjusted these to your satisfaction, confirm by sending the transaction.\n3. Upon successful deployment, you are presented with two choices: either set a batch poster or define validators.\n4. If you select the Batch Poster option, you will be directed to a new page. Here, you can add the desired address as a new batch poster by signing the transaction and then sending it.\n5. If you choose to Set Validators, you will be led to another page where you can determine the number of validators you wish to add or remove. In the generated box, enter the corresponding addresses. Checking the checkbox next to each address signals your intent to add that particular address to the validator.\n", "release_dates": []}, {"name": "arbitrum-orbit-sdk", "description": "\ud83d\udc99 SDK for building Arbitrum Orbit chains", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Arbitrum Orbit SDK\n\n> [!WARNING]\n> Disclaimer: This project is an Alpha release and should not be used in a production environment. We are working on getting it ready for mainnet deployments, meanwhile please use it at your own discretion.\n\nTypeScript SDK for building [Arbitrum Orbit](https://arbitrum.io/orbit) chains.\n\n## Installation\n\nMake sure you are using Node v18 or greater.\n\n```bash\nyarn add @arbitrum/orbit-sdk viem@^1.20.0\n```\n\n## Run integration tests\n\nClone the branch `main` of [nitro-testnode](https://github.com/OffchainLabs/nitro-testnode), and run the testnode using the following arguments:\n\n```bash\n./test-node.bash --init --tokenbridge --l3node --l3-fee-token --l3-token-bridge\n```\n\nThen, run the integration tests:\n\n```bash\nyarn test:integration\n```\n\n## Examples\n\nSee [examples](./examples).\n", "release_dates": ["2024-02-29T12:44:14Z", "2024-02-27T10:55:30Z", "2024-02-22T12:32:36Z", "2024-02-14T09:44:38Z"]}, {"name": "arbitrum-sdk", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Arbitrum SDK\n\nTypeScript library for client-side interactions with Arbitrum. Arbitrum SDK provides common helper functionality as well as access to the underlying smart contract interfaces.\n\nBelow is an overview of the Arbitrum SDK functionality. See the [tutorials](https://github.com/OffchainLabs/arbitrum-tutorials) for further examples of how to use these classes.\n\n### Quickstart Recipes\n\n- ##### Deposit Ether Into Arbitrum\n\n```ts\nimport { getL2Network, EthBridger } from '@arbitrum/sdk'\n\nconst l2Network = await getL2Network(\n  l2ChainID /** <-- chain id of target Arbitrum chain */\n)\nconst ethBridger = new EthBridger(l2Network)\n\nconst ethDepositTxResponse = await ethBridger.deposit({\n  amount: utils.parseEther('23'),\n  l1Signer: l1Signer /** <-- connected ethers-js Wallet */,\n  l2Provider: l2Provider /** <--- ethers-js Provider */,\n})\n\nconst ethDepositTxReceipt = await ethDepositTxResponse.wait()\n\n/** check ethDepositTxReceipt.status  */\n```\n\n- ##### Redeem an L1 to L2 Message\n\n```ts\nimport { L1TransactionReceipt, L1ToL2MessageStatus } from '@arbitrum/sdk'\n\nconst l1TxnReceipt = new L1TransactionReceipt(\n  txnReceipt /** <-- ethers-js TransactionReceipt of an ethereum tx that triggered an L1 to L2 message (say depositting a token via a bridge)  */\n)\n\nconst l1ToL2Message = (\n  await l1TxnReceipt.getL1ToL2Messages(\n    l2Signer /** <-- connected ethers-js Wallet */\n  )\n)[0]\n\nconst res = await l1ToL2Message.waitForStatus()\n\nif (res.status === L1ToL2MessageStatus.FUNDS_DEPOSITED_ON_L2) {\n  /** Message wasn't auto-redeemed; redeem it now: */\n  const response = await l1ToL2Message.redeem()\n  const receipt = await response.wait()\n} else if (res.status === L1ToL2MessageStatus.REDEEMED) {\n  /** Message succesfully redeeemed */\n}\n```\n\n- ##### Check if sequencer has included a transaction in L1 data\n\n```ts\nimport { L2TransactionReceipt } from '@arbitrum/sdk'\n\nconst l2TxnReceipt = new L2TransactionReceipt(\n  txnReceipt /** <-- ethers-js TransactionReceipt of an arbitrum tx */\n)\n\n/** Wait 3 minutes: */\nawait new Promise(resolve => setTimeout(resolve, 1000 * 60 * 3000))\n\n// if dataIsOnL1, sequencer has posted it and it inherits full rollup/L1 security\nconst dataIsOnL1 = await l2TxnReceipt.isDataAvailable(l2Provider, l1Provider)\n```\n\n### Bridging assets\n\nArbitrum SDK can be used to bridge assets to/from the rollup chain. The following asset bridgers are currently available:\n\n- EthBridger\n- Erc20Bridger\n\nAll asset bridgers have the following methods:\n\n- **deposit** - moves assets from the L1 to the L2\n- **depositEstimateGas** - estimates the gas required to do the deposit\n- **withdraw** - moves assets from the L2 to the L1\n- **withdrawEstimateGas** - estimates the gas required to do the withdrawal\n  Which accept different parameters depending on the asset bridger type\n\n### Cross chain messages\n\nWhen assets are moved by the L1 and L2 cross chain messages are sent. The lifecycles of these messages are encapsulated in the classes `L1ToL2Message` and `L2ToL1Message`. These objects are commonly created from the receipts of transactions that send cross chain messages. A cross chain message will eventually result in a transaction being executed on the destination chain, and these message classes provide the ability to wait for that finalizing transaction to occur.\n\n### Networks\n\nArbitrum SDK comes pre-configured for Mainnet and Goerli, and their Arbitrum counterparts. However, the networks functionality can be used to register networks for custom Arbitrum instances. Most of the classes in Arbitrum SDK depend on network objects so this must be configured before using other Arbitrum SDK functionality.\n\n### Inbox tools\n\nAs part of normal operation the Arbitrum sequencer will send messages into the rollup chain. However, if the sequencer is unavailable and not posting batches, the inbox tools can be used to force the inclusion of transactions into the rollup chain.\n\n### Utils\n\n- **EventFetcher** - A utility to provide typing for the fetching of events\n- **MultiCaller** - A utility for executing multiple calls as part of a single RPC request. This can be useful for reducing round trips.\n- **constants** - A list of useful Arbitrum related constants\n\n### Run Integration tests\n\n1. First, make sure you have a Nitro test node running. Follow the instructions [here](https://docs.arbitrum.io/node-running/how-tos/local-dev-node).\n\n2. After the node has started up (that could take up to 20-30 mins), run `yarn gen:network`.\n\n3. Once done, finally run `yarn test:integration` to run the integration tests.\n\nDefaults to `Arbitrum Goerli`, for custom network use `--network` flag.\n\n`Arbitrum Goerli` expects env var `ARB_KEY` to be prefunded with at least 0.02 ETH, and env var `INFURA_KEY` to be set.\n(see `integration_test/config.ts`)\n\n### Bridge A Standard Token\n\nBridging a new token to L2 (i.e., deploying a new token contract) through the standard gateway is done by simply depositing a token that hasn't yet been bridged. This repo includes a script to trigger this initial deposit/deployment:\n\n1. Clone `arbitrum-sdk`\n\n2. `yarn install` (from root)\n\n3. Set `PRIVKEY` environment variable (you can use .env) to the key of the account from which you'll be deploying (account should have some balance of the token you're bridging).\n\n4. Set MAINNET_RPC environment variable to L1 RPC endpoint (i.e., https://mainnet.infura.io/v3/my-infura-key)\n\n5. `yarn bridgeStandardToken`\n\nRequired CL params:\n`networkID`:number \u2014 Chain ID of L2 network\n`l1TokenAddress`:string \u2014 address of L1 token to be bridged\n\nEx:\n`yarn bridgeStandardToken --networkID 421611 --l1TokenAddress 0xdf032bc4b9dc2782bb09352007d4c57b75160b15 --amount 3`\n", "release_dates": ["2024-02-14T11:29:20Z", "2024-02-05T10:55:19Z", "2023-10-05T09:20:53Z", "2023-09-14T13:13:25Z", "2023-08-31T13:52:29Z", "2023-08-28T09:43:11Z", "2023-08-24T07:59:13Z", "2023-08-18T10:49:08Z", "2023-08-17T11:34:23Z", "2023-06-27T17:07:56Z", "2023-06-20T15:47:57Z", "2023-06-16T14:57:58Z", "2023-05-09T16:05:07Z", "2023-03-10T15:45:12Z", "2023-03-01T17:24:50Z", "2023-02-22T17:06:12Z", "2022-10-19T11:17:48Z"]}, {"name": "arbitrum-subgraphs", "description": null, "language": "TypeScript", "license": null, "readme": "# Arbitrum subgraphs\n\nThis project contains subgraphs to track Arbitrum token bridge and cross chain messaging.\n\n## arb-bridge-eth\n\nTracks ETH and token deposits from L1 to L2, both classic and nitro versions. It also tracks retryable tickets. Entity `sender` field is always original address of the deposit/retryable creator, not aliased or unaliased version of address.\n\n`Nitro`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/gvladika/arb-bridge-eth-nitro  \nPlayground: https://thegraph.com/hosted-service/subgraph/gvladika/arb-bridge-eth-nitro\n\n`Nova`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/gvladika/arb-bridge-eth-nova  \nPlayground: https://thegraph.com/hosted-service/subgraph/gvladika/arb-bridge-eth-nova\n\n`Goerli Nitro`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/gvladika/arb-bridge-eth-goerli  \nPlayground: https://thegraph.com/hosted-service/subgraph/gvladika/arb-bridge-eth-goerli\n\n`Sepolia`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/fionnachan/arb-bridge-eth-sepolia  \nPlayground: https://thegraph.com/hosted-service/subgraph/fionnachan/arb-bridge-eth-sepolia\n\n#### Query example - get first 3 deposits (including Eth deposits and token deposits)\n\n```\n  deposits(first: 3) {\n    type\n    sender\n    receiver\n    ethValue\n    l1Token {\n      id\n      name\n      symbol\n    }\n    sequenceNumber\n    tokenAmount\n    isClassic\n    timestamp\n    transactionHash\n    blockCreatedAt\n  }\n```\n\nResult:\n\n```\n{\n  \"data\": {\n    \"deposits\": [\n      {\n        \"type\": \"EthDeposit\",\n        \"sender\": \"0x3808d4d05ae4d21d20bbd0143e8f41e09b3ce309\",\n        \"receiver\": \"0x3808d4d05ae4d21d20bbd0143e8f41e09b3ce309\",\n        \"ethValue\": \"1000000000000000\",\n        \"l1Token\": null,\n        \"sequenceNumber\": \"9277\",\n        \"tokenAmount\": null,\n        \"isClassic\": false,\n        \"timestamp\": \"1662276473\",\n        \"transactionHash\": \"0x00000947484b2117be463199be889da38caf1a231d29e6128d81d12e6a0a1cee\",\n        \"blockCreatedAt\": \"15470347\"\n      },\n      {\n        \"type\": \"TokenDeposit\",\n        \"sender\": \"0xa2e06c19ee14255889f0ec0ca37f6d0778d06754\",\n        \"receiver\": \"0xa2e06c19ee14255889f0ec0ca37f6d0778d06754\",\n        \"ethValue\": \"0\",\n        \"l1Token\": {\n          \"id\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n          \"name\": \"Wrapped Ether\",\n          \"symbol\": \"WETH\"\n        },\n        \"sequenceNumber\": \"20556\",\n        \"tokenAmount\": \"600000000000000000\",\n        \"isClassic\": false,\n        \"timestamp\": \"1662696576\",\n        \"transactionHash\": \"0x00000a61331187be51ab9ae792d74f601a5a21fb112f5b9ac5bccb23d4d5aaba\",\n        \"blockCreatedAt\": \"15500657\"\n      },\n      {\n        \"type\": \"EthDeposit\",\n        \"sender\": \"0x49211e8da72a9549541c7914f85837b294abf992\",\n        \"receiver\": \"0x49211e8da72a9549541c7914f85837b294abf992\",\n        \"ethValue\": \"24000000000000000\",\n        \"l1Token\": null,\n        \"sequenceNumber\": \"390496\",\n        \"tokenAmount\": null,\n        \"isClassic\": true,\n        \"timestamp\": \"1648568434\",\n        \"transactionHash\": \"0x00000a813d47f2c478dcc3298d5361cb3aed817648f25cace6d0c1a59d2b8309\",\n        \"blockCreatedAt\": \"14481946\"\n      }\n    ]\n  }\n}\n```\n\n## arbitrum-precompiles\n\n// TODO\n\n## arb-retryables\n\nTracks Nitro retryables on L2 side. It includes ticket status for every retryable, execution params as well as retryable submission params (through parsing tx calldata).\n\n`Nitro`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/gvladika/arbitrum-retryables  \nPlayground: https://thegraph.com/hosted-service/subgraph/gvladika/arbitrum-retryables\n\n`Nova`  \nTo be added (Nova is not supported by Graph hosted service atm)\n\n`Goerli Nitro`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/gvladika/arbitrum-retryables-goerli\nPlayground: https://thegraph.com/hosted-service/subgraph/gvladika/arbitrum-retryables-goerli\n\n`Sepolia`  \nQuery endpoint: https://api.thegraph.com/subgraphs/name/fionnachan/arbitrum-retryables-sepolia\nPlayground: https://thegraph.com/hosted-service/subgraph/fionnachan/arbitrum-retryables-sepolia\n\n#### Query example - get last 10 retryables tickets which failed to redeem\n\n```\n{\n  retryables(orderBy: createdAtTimestamp, orderDirection: desc, first:3, where: {status: \"RedeemFailed\"}) {\n    id\n    retryTxHash\n  }\n}\n```\n\nResult:\n\n```\n{\n  \"data\": {\n    \"retryables\": [\n      {\n        \"id\": \"0x97016fdc9ec92b6899ea5b685bbfd21435e5843b19a3d375fce79e08d4c914d1\",\n        \"retryTxHash\": \"0xafdeba836ec4ae1b9234c943bc434069e686773ea8977fefcd16114f17e4251b\"\n      },\n      {\n        \"id\": \"0x9d6c19f5fb9055d64b37b9a58c56806bbc5a973d0cdca18cfbfa7b609d4812f1\",\n        \"retryTxHash\": \"0xdaebe273820c3ab7197682c532f0e112ad2a97680ea3ed9b78710e0adf8b3ea5\"\n      },\n      {\n        \"id\": \"0xc3803fd826e9b834a31c8ef52426292bb3d56bc23695d82657dfe74215e8d94a\",\n        \"retryTxHash\": \"0x2150aaa2a6715b3a0611651f4162191de1aab6c93095956e43f38b553c161343\"\n      }\n    ]\n  }\n}\n```\n\n#### Query example - get total stats\n\n```\n{\n  totalRetryableStats(id: \"NitroStats\") {\n    id\n    totalCreated\n    autoRedeemed\n    successfullyRedeemed\n    failedToRedeem\n    canceled\n  }\n}\n```\n\nResult:\n\n```\n{\n  \"data\": {\n    \"totalRetryableStats\": {\n      \"id\": \"NitroStats\",\n      \"totalCreated\": \"83845\",\n      \"autoRedeemed\": \"83710\",\n      \"successfullyRedeemed\": \"83822\",\n      \"failedToRedeem\": \"21\",\n      \"canceled\": \"0\"\n    }\n  }\n}\n```\n\n#### Query example - get latest 2 retryables including all the fields\n\n```\n{\n  retryables(orderBy: createdAtTimestamp, orderDirection: desc, first:2) {\n    id\n    status\n    retryTxHash\n    timeoutTimestamp\n    createdAtTimestamp\n    createdAtBlockNumber\n    createdAtTxHash\n    redeemedAtTimestamp\n    isAutoRedeemed\n    sequenceNum\n    donatedGas\n    gasDonor\n    maxRefund\n    submissionFeeRefund\n    requestId\n    l1BaseFee\n    deposit\n    callvalue\n    gasFeeCap\n    gasLimit\n    maxSubmissionFee\n    feeRefundAddress\n    beneficiary\n    retryTo\n    retryData\n  }\n}\n```\n\nResult:\n\n```\n{\n  \"data\": {\n    \"retryables\": [\n      {\n        \"id\": \"0xdef8e761a76ee0c466536c5fa7c4d3a13df912cbacb879cfe2d6d9e17a4a8884\",\n        \"status\": \"Redeemed\",\n        \"retryTxHash\": \"0x1dd3570cdb33b954fd0c94c4a37fe1cec2c1a73946df6bf3c8539dfb2153b0b2\",\n        \"timeoutTimestamp\": \"1677077599\",\n        \"createdAtTimestamp\": \"1676472799\",\n        \"createdAtBlockNumber\": \"61174964\",\n        \"createdAtTxHash\": \"0xdef8e761a76ee0c466536c5fa7c4d3a13df912cbacb879cfe2d6d9e17a4a8884\",\n        \"redeemedAtTimestamp\": \"1676472799\",\n        \"isAutoRedeemed\": true,\n        \"sequenceNum\": \"0\",\n        \"donatedGas\": \"284615\",\n        \"gasDonor\": \"0xfd81392229b6252cf761459d370c239be3afc54f\",\n        \"maxRefund\": \"1776913467122000\",\n        \"submissionFeeRefund\": \"84592690642000\",\n        \"requestId\": \"0x000000000000000000000000000000000000000000000000000000000007813b\",\n        \"l1BaseFee\": \"42296345321\",\n        \"deposit\": \"1800859226480000\",\n        \"callvalue\": \"0\",\n        \"gasFeeCap\": \"130000000\",\n        \"gasLimit\": \"284615\",\n        \"maxSubmissionFee\": \"100000000000000\",\n        \"feeRefundAddress\": \"0xfd81392229b6252cf761459d370c239be3afc54f\",\n        \"beneficiary\": \"0xfd81392229b6252cf761459d370c239be3afc54f\",\n        \"retryTo\": \"0xfd81392229b6252cf761459d370c239be3afc54f\",\n        \"retryData\": \"0x4ff746f60000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002054655cabed180b3705ececcde806c0879b5b60ebb4705b013cb80bf3d3960736\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n## layer1-token-gateway\n\n// TODO\n\n## layer2-token-gateway\n\n// TODO\n", "release_dates": []}, {"name": "arbitrum-token-bridge", "description": "\ud83d\udc99 Interface for bridging assets to and from Arbitrum chains", "language": "TypeScript", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# [Arbitrum Token Bridge](https://bridge.arbitrum.io/)\n\n### The canonical token-bridge of [Arbitrum](https://arbitrum.io/)\n\nAre you a developer looking to explore the Arbitrum token bridge and its underlying technology? Then you've come to the right place! We'll walk you through the steps to run the Arbitrum token bridge website locally on your machine.\n\n<br />\n\nOffchain Labs \u2764\ufe0f Open-source\n\nInterested in contributing to this repo? We welcome your contribution.\n[Check out the contribution guidelines and instructions here](CONTRIBUTING.md).\n\n<br />\n\n---\n\n<br />\n\n## Prerequisites for running the code\n\n- Install [Node.js](https://nodejs.org/en/download/) for your platform\n- Install [Node Version Manager (nvm)](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) to setup the correct Node version for the project.\n- Install [VS Code](https://code.visualstudio.com/download) for your platform\n- Install [Yarn (version 1)](https://classic.yarnpkg.com) - Package manager\n\n- Within VS Code, we use a some tools to automate things (e.g. code formatting), maintain consistency and reduce noise for code reviews. For the optimal development experience, install the following tools:\n\n  - [Prettier](https://prettier.io) - Automatic code formatting\n    - Find Prettier integration for your code editor [here](https://prettier.io/docs/en/editors.html)\n  - [EditorConfig](https://editorconfig.org) - Automatic file formatting\n    - Find EditorConfig integration for your code editor [here](https://editorconfig.org/#download)\n  - [ESLint](https://eslint.org) - Static analysis for JavaScript\n    - Find ESLint integration for your code editor [here](https://eslint.org/docs/latest/user-guide/integrations#editors)\n\n<br />\n\n---\n\n<br />\n\n## Steps to run the code locally\n\n1. Clone the Arbitrum token bridge repository from Github onto your local machine\n\n   ```bash\n   $ git clone https://github.com/OffchainLabs/arb-token-bridge\n   ```\n\n2. Use the Node version as per project settings to avoid any errors before project installation.\n\n   ```bash\n   $ nvm use\n   ```\n\n3. Install dependencies in all packages using yarn.\n\n   ```bash\n   $ yarn\n   ```\n\n4. Set env vars:\n\n   1. Copy the existing env.local.sample file present.\n\n      ```bash\n      $ cp ./packages/arb-token-bridge-ui/.env.local.sample  ./packages/arb-token-bridge-ui/.env\n      ```\n\n   2. In `.env` created, add `NEXT_PUBLIC_INFURA_KEY=my-infura-key`\n\n   3. Set `NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID` to your WalletConnect project ID. You can create a new project on the [WalletConnect dashboard](https://cloud.walletconnect.com/app).\n\n   4. For custom urls, set optional vars:\n\n   - `NEXT_PUBLIC_ETHEREUM_RPC_URL=my-eth-node`\n   - `NEXT_PUBLIC_GOERLI_RPC_URL=my-goerli-node`\n     (see [.env.sample](./packages/arb-token-bridge-ui/.env.sample))\n     If no custom URL is provided, Infura will be used by default.\n\n5. Build the project and internal packages\n\n   ```bash\n   $ yarn build\n   ```\n\n6. Finally, running the project\n\n   1. (back in root dir:)\n\n      ```bash\n      $ yarn dev\n      ```\n\n   2. Visit `http://localhost:3000/`\n\n<br />\n\n---\n\n<br />\n\n## Testing changes\n\nIt is important for any code change to pass both unit and end-to-end tests. This is generally done before raising the PR to ensure it doesn't break any existing feature.\n\n<br />\n\n### Run Unit Tests\n\n1. Run the token bridge UI locally on `http://localhost:3000/`\n2. Run the tests\n   ```bash\n   $ yarn test:ci\n   ```\n\n<br />\n\n### Run End-to-End (E2E) Tests\n\n1. Set up the Nitro test node\n\n   1. First, make sure you have a Nitro test node running. Follow the instructions [here](https://docs.arbitrum.io/node-running/how-tos/local-dev-node).\n\n   2. When the Nitro test-node is up and running you should see logs like `sequencer_1` and `staker-unsafe_1` in the terminal. This can take up to 10 minutes.\n\n2. At the root of the token bridge UI:\n\n   1. Run:\n\n   ```bash\n   $ cp ./packages/arb-token-bridge-ui/.e2e.env.sample ./packages/arb-token-bridge-ui/.e2e.env\n   ```\n\n   2. In the newly created file, `.e2e.env`, update your `NEXT_PUBLIC_INFURA_KEY`\n\n3. Run the token bridge UI locally on `http://localhost:3000/` with:\n\n   ```bash\n   $ yarn dev\n   ```\n\n4. Run e2e tests\n\n   ```bash\n   $ yarn test:e2e\n   ```\n\nRead more about the test setup [here](/packages/arb-token-bridge-ui/tests/e2e/README.md).\n\n<br />\n\n---\n\n<br />\n", "release_dates": []}, {"name": "arbitrum-token-lists", "description": null, "language": "TypeScript", "license": null, "readme": "### Setup\n\nFrom root:\n\n1. `yarn install`\n2. `cd packages/cli; cp .env.sample .env`\n3. In `.env`, either set `MAINNET_RPC`, `GOERLI_RPC`, and `SEPOLIA_RPC` var or `INFURA_KEY`\n\n### Arbify an L1 Token List\n\n`yarn arbify --tokenList https://gateway.ipfs.io/ipns/tokens.uniswap.org --l2NetworkID 42161 --newArbifiedList ./src/ArbTokenLists/arbed_uniswap_labs.json`\n\nNote that a local list can also be used, i.e.:\n\n`yarn arbify --tokenList ./src/SourceLists/my_l1_list.json --l2NetworkID 42161`\n\n### Generate Full List\n\n`yarn fullList`\n", "release_dates": []}, {"name": "arbitrum-tutorials", "description": "Get started developing on Arbitrum ", "language": "JavaScript", "license": null, "readme": "# Arbitrum Tutorials\n\nThis monorepo will help you get started with building on Arbitrum. It provides various simple demos showing and explaining how to interact with Arbitrum \u2014 deploying and using contracts directly on L2, moving Ether and tokens betweens L1 and L2, and more.\n\nWe show how you can use broadly supported Ethereum ecosystem tooling (Hardhat, Ethers-js, etc.) as well as our special [Arbitrum SDK](https://github.com/OffchainLabs/arbitrum-sdk) for convenience.\n\n## Installation\n\nFrom root directory:\n\n```bash\nyarn install\n```\n\n## What's included?\n\n#### :white_check_mark: Basics\n\n- \ud83d\udc39 [Pet Shop DApp](./packages/demo-dapp-pet-shop/) (L2 only)\n- \ud83d\uddf3 [Election DApp](./packages/demo-dapp-election/) (L2 only)\n\n#### :white_check_mark: Moving Stuff around\n\n- \u2934\ufe0f \ud83d\udd39 [Deposit Ether](./packages/eth-deposit/)\n- \u2935\ufe0f \ud83d\udd39 [Withdraw Ether](./packages/eth-withdraw/)\n- \u2934\ufe0f \ud83d\udcb8 [Deposit Token](./packages/token-deposit/)\n- \u2935\ufe0f \ud83d\udcb8 [Withdraw token](./packages/token-withdraw/)\n\n#### :white_check_mark: General Interop\n\n- \ud83e\udd1d [Greeter](./packages/greeter/) (L1 to L2)\n- \ud83d\udce4 [Outbox](./packages/outbox-execute/) (L2 to L1)\n- \u23f0 [L1 Confirmation Checker](./packages/l1-confirmation-checker/)\n- \u23f0 [L2 block verification in assertion](./packages/l2-block-verification-in-assertion/)\n\n#### :white_check_mark: Advanced Features\n\n- \u00ae\ufe0f [Arb Address Table](./packages/address-table/)\n- \ud83c\udf09 [Bridging Custom Token](./packages/custom-token-bridging/)\n- \u2708\ufe0f [Delayed inbox message(l2MSG)](./packages/delayedInbox-l2msg/)\n- \ud83c\udf81 [Redeem Retryable Ticket](./packages/redeem-failed-retryable/)\n\n<p align=\"center\"><img src=\"assets/logo.svg\" width=\"300\"></p>\n", "release_dates": []}, {"name": "arbtoken_twitter_faucet", "description": null, "language": "TypeScript", "license": null, "readme": null, "release_dates": []}, {"name": "arb_reddit_community_points", "description": null, "language": "TypeScript", "license": null, "readme": "# Arb-Reddit Points Benchmarks\n\n### Setup\n\n- [Launch arb validator](https://developer.offchainlabs.com/docs/Developer_Quickstart/)\n- Add env variables to .env files; to use sample values, run `cp .env.sample .env`\n- Edit `.env` and add required values:\n\n    - **ETH_PROVIDER_URL**: Ethereum (Layer 1) node / RPC provider url\n    - **ARB_PROVIDER_URL**: Arbitrum aggregator / RPC provider url\n    - **ROLLUP_ADDRESS**: Arbitrum chain address\n    - **MNEMONIC**: MNEMONIC phrase for main ETH account (does not need to be prefunded)\n\n\n- Install dependencies: `yarn install`\n- Deploy contracts: `yarn run deploy`\n\n\n### Dev actions\n- Run benchmarks: `yarn run benchmarks`\n- Launch UI: `yarn run ui_dev`\n- Generate \"request tokens\" twitter response `yarn run generate_response 0xyouraddresss` (outputts url to toking claiming route in UI)\n", "release_dates": []}, {"name": "awesome-stylus", "description": "A curated list of Arbitrum Stylus code examples, libraries and resources", "language": null, "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Awesome Stylus\nA curated list of Arbitrum Stylus code examples, libraries, projects and resources.\n\n<img src=\"./Arbitrum_Stylus-Logomark.svg\" width=\"128\" height=\"128\" />\n\n- [Official Docs](https://docs.arbitrum.io/stylus/stylus-gentle-introduction) - Official docs on Stylus\n- [Rust SDK](https://github.com/OffchainLabs/stylus-sdk-rs) - Rust SDK\n- [Cargo Stylus](https://github.com/OffchainLabs/cargo-stylus) - CLI tool for compiling and deploying Stylus smart contracts\n- [Discord](https://discord.gg/arbitrum) - Check out the #stylus channel in Arbitrum's Discord server\n- [Telegram](https://t.me/arbitrum_stylus) - A dev focused chat for Stylus builders\n- [Offchain Labs Twitter](https://twitter.com/OffchainLabs) - Follow along for Offchain Labs and Arbitrum news and info\n- [Stylus Repo](https://github.com/OffchainLabs/stylus) - The repo hosting the core code\n\n## Guides\n- [A Gentle Introduction: Stylus](https://docs.arbitrum.io/stylus/stylus-gentle-introduction)\n- [Quickstart (Rust, Stylus)](https://docs.arbitrum.io/stylus/stylus-quickstart)\n- [How To Add a New Programming Language To Stylus](https://docs.arbitrum.io/stylus/how-tos/adding-support-for-new-languages)\n- [How To Run a Local Dev Node With Stylus Support](https://docs.arbitrum.io/stylus/how-tos/local-stylus-dev-node)\n- [Stylus Rust SDK: Feature Overview](https://docs.arbitrum.io/stylus/reference/rust-sdk-guide)\n- [Getting Started With Arbitrum Stylus (video)](https://www.youtube.com/watch?v=CF1hLTGnByM)\n- [Building a Stylus Smart Contract (video)](https://www.youtube.com/watch?v=DJjpPWuGKq0)\n- [Using AssemblyScript on Stylus (video)](https://www.youtube.com/watch?v=FdFvZeqeSBI)\n- [Arbitrum Rust Smart Contracts for Solidity Devs (video)](https://www.youtube.com/watch?v=_Z27pN-U0N0)\n\n## Tools\n- [Stylus Playground](https://stylus-playground.vercel.app/) - An online playground for building, compiling and testing Stylus smart contracts\n- [Zig Stylus](https://github.com/Stylish-Stylus/zig-stylus) - Zig SDK for Stylus smart contracts\n- [stylus-toolkit](https://github.com/LimeChain/stylus-toolkit) - A toolkit of Stylus primitives and examples of their usage\n\n## Libraries\n- [Rustmate](https://github.com/cairoeth/rustmate) - Blazing fast, modern, and optimized Rust building blocks for smart contract development using Stylus\n- [OpenStylus](https://github.com/Prabhat1308/OpenStylus) - Modular and gas-optimized smart contract libraries and frameworks for Stylus smart contract development\n\n## Examples\n- [Uniswap V2 In Wasm](https://github.com/evmcheb/univ2-wasm) - A Uniswap v2 proof of concept implementation\n- ERC20 Examples\n  - [Stylus Permit](https://github.com/prestwich/stylus-permit) - An ERC20 Permit example in Rust\n  - [Stylusmate](https://github.com/DeVazzi/stylusmate) - An ERC20 with Ownable module in Rust\n  - [Rustmate ERC20](https://github.com/cairoeth/rustmate/blob/main/src/tokens/erc20.rs) - An ERC20 + EIP-2612 implementation equivalent to Solmate\n- ERC721 Examples\n  - [https://github.com/cygaar/ERC721Stylus/ (Rust)](https://github.com/cygaar/ERC721Stylus/)\n  - [https://github.com/0xcacti/stylus_erc721 (Rust)](https://github.com/0xcacti/stylus_erc721)\n  - [https://github.com/gvladika/stylus-erc721 (Rust)](https://github.com/gvladika/stylus-erc721/tree/main)\n- [Zk-sunade](https://github.com/supernovahs/zk-sunade) - An optimized , handwritten implementation of Groth16 using Arbitrum Stylus\n- [P256 Verification Using Arbitrum Stylus](https://github.com/jake-nyquist/stylus-p256-example) - Example of C code compiled to Stylus to verify an ECDSA signature using a standard P256 Curve\n- [Keccak Looper](https://gist.github.com/cygaar/ee3cf1d1f98a57369717c9d91e076fd1) - A Rust contract that loops n times and hashes an input string repeatedly\n- [Stylus Proxy](https://github.com/byteZorvin/stylus-proxy) - An example contract for implementing minimal proxy pattern in Stylus\n- [Stylus BLST](https://github.com/rauljordan/stylus-blst) - A C based smart contract that verifies BLS signatures onchain\n- [Stylus AssemblyScript Example](https://github.com/OffchainLabs/stylus-as-example) - Sieve of Erathosthenes implemented with AssemblyScript\n- [RKFall NFT](https://github.com/yahgwai/rkfall-nft/) - A Rust based project that uses gravitational field computation for generating NFTs\n- [Pausable Library in Rust](https://github.com/ggonzalez94/stylus-pausable) - A sample implementation of Pausable and Ownable in Rust\n- [Stylus ERC4626](https://github.com/solidoracle/erc4626-rs) - A sample implementation of OpenZeppelin ERC4626 contract in Rust\n- [stylus-benchmark](https://github.com/Daniel-K-Ivanov/stylus-benchmark) - A project benchmarking Stylus vs EVM implementations on their gas consumption\n", "release_dates": []}, {"name": "blockscout", "description": null, "language": "Elixir", "license": {"key": "gpl-3.0", "name": "GNU General Public License v3.0", "spdx_id": "GPL-3.0", "url": "https://api.github.com/licenses/gpl-3.0", "node_id": "MDc6TGljZW5zZTk="}, "readme": "<h1 align=\"center\">BlockScout</h1>\n<p align=\"center\">Blockchain Explorer for inspecting and analyzing EVM Chains.</p>\n<div align=\"center\">\n\n[![Blockscout](https://github.com/blockscout/blockscout/workflows/Blockscout/badge.svg?branch=master)](https://github.com/blockscout/blockscout/actions)\n[![](https://dcbadge.vercel.app/api/server/blockscout?style=flat)](https://discord.gg/blockscout)\n\n</div>\n\n\nBlockScout provides a comprehensive, easy-to-use interface for users to view, confirm, and inspect transactions on EVM (Ethereum Virtual Machine) blockchains. This includes Ethereum Mainnet, Ethereum Classic, Optimism, Gnosis Chain and many other **Ethereum testnets, private networks, L2s and sidechains**.\n\nSee our [project documentation](https://docs.blockscout.com/) for detailed information and setup instructions.\n\nFor questions, comments and feature requests see the [discussions section](https://github.com/blockscout/blockscout/discussions) or via [Discord](https://discord.com/invite/blockscout).\n\n## About BlockScout\n\nBlockScout allows users to search transactions, view accounts and balances, verify and interact with smart contracts and view and interact with applications on the Ethereum network including many forks, sidechains, L2s and testnets.\n\nBlockscout is an open-source alternative to centralized, closed source block explorers such as Etherscan, Etherchain and others.  As Ethereum sidechains and L2s continue to proliferate in both private and public settings, transparent, open-source tools are needed to analyze and validate all transactions.\n\n## Supported Projects\n\nBlockScout currently supports several hundred chains and rollups throughout the greater blockchain ecosystem. Ethereum, Cosmos, Polkadot, Avalanche, Near and many others include Blockscout integrations. [A comprehensive list is available here](https://docs.blockscout.com/about/projects). If your project is not listed, please submit a PR or [contact the team in Discord](https://discord.com/invite/blockscout).\n\n## Getting Started\n\nSee the [project documentation](https://docs.blockscout.com/) for instructions:\n\n- [Requirements](https://docs.blockscout.com/for-developers/information-and-settings/requirements)\n- [Ansible deployment](https://docs.blockscout.com/for-developers/ansible-deployment)\n- [Manual deployment](https://docs.blockscout.com/for-developers/manual-deployment)\n- [ENV variables](https://docs.blockscout.com/for-developers/information-and-settings/env-variables)\n- [Configuration options](https://docs.blockscout.com/for-developers/configuration-options)\n\n## Acknowledgements\n\nWe would like to thank the [EthPrize foundation](http://ethprize.io/) for their funding support.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for contribution and pull request protocol. We expect contributors to follow our [code of conduct](CODE_OF_CONDUCT.md) when submitting code or comments.\n\n## License\n\n[![License: GPL v3.0](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nThis project is licensed under the GNU General Public License v3.0. See the [LICENSE](LICENSE) file for details.\n", "release_dates": ["2022-09-11T18:17:37Z"]}, {"name": "bold", "description": "Efficient, all-vs-all dispute protocol for Optimistic Rollups", "language": "Solidity", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# BOLD\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/OffchainLabs/bold)](https://goreportcard.com/report/github.com/OffchainLabs/bold)\n[![codecov](https://codecov.io/gh/OffchainLabs/bold/branch/main/graph/badge.svg)](https://codecov.io/gh/OffchainLabs/bold)\n\n[![Go](https://github.com/OffchainLabs/bold/actions/workflows/go.yml/badge.svg)](https://github.com/OffchainLabs/bold/actions/workflows/go.yml)\n\nThis repository implements Offchain Labs' BOLD (Bounded Liquidity Delay) Protocol: a dispute system to enable permissionless validation of Arbitrum chains. It is an efficient, all-vs-all challenge protocol that enables anyone on Ethereum to challenge invalid rollup state transitions. Given state transitions are deterministic, this guarantees only one correct result for any given assertion. A **single, honest participant** will always win against malicious entities when challenging assertions posted to the settlement chain. \n\n## Repository Structure\n\nFor detailed information on how our code is architected and how it meets the BOLD specification, see [ARCHITECTURE.md](docs/ARCHITECTURE.md).\n\n```\napi/ \n    API for monitoring and visualizing challenges\nassertions/\n    Logic for scanning and posting assertions\nchain-abstraction/\n    High-level wrappers around Solidity bindings for the Rollup contracts\nchallenge-manager/\n    All logic related to challenging, managing challenges\ncontainers/\n    Data structures used in the repository, including FSMs\ncontracts/\n    All Rollup / challenge smart contracts\ndocs/\n    Diagrams and architecture\nlayer2-state-provider/\n    Interface to request state and proofs from an L2 backend\nmath/\n    Utilities for challenge calculations\nruntime/\n    Tools for managing function lifecycles\nstate-commitments/\n    Proofs, history commitments, and Merkleizatins\ntesting/\n    All non-production code\nthird_party/\n    Build artifacts for dependencies\ntime/\n    Abstract time utilities\n```\n\n## Research Specification\n\nBOLD has an accompanying research specification that outlines the foundations of the protocol in more detail, found under [docs/research-specs/BOLDChallengeProtocol.pdf](./docs/research-specs/BOLDChallengeProtocol.pdf).\n\n## Using BOLD\n\nBOLD is meant to be imported as a dependency in Arbitrum chains' validator software as follows:\n\n```go\nimport (\n    \"github.com/OffchainLabs/bold/challenge-manager\"\n)\n\n...\n\nmanager, err := challengemanager.New(\n    ctx,\n    chain, // Bindings to the challenge manager contracts.\n    client, // Ethereum chain client.\n    stateManager, // L2 state provider.\n    rollupAddress, // Address of the RollupCore contract.\n    challengemanager.WithMode(types.WatchtowerMode), // Validation mode.\n)\nif err != nil {\n    return nil, err\n}\ngo manager.Start(ctx)\n```\n\nWhen provided with an L2 state provider, such as an Arbitrum Nitro validator, the challenge manager\nfrom BOLD can be started as a background routine that is in charge of asserting states on Ethereum,\ninitiating challenges on malicious assertions, confirming assertions, and winning challenges against\nmalicious parties.\n\n## Building\n\n### Go Code\n\nInstall [Go v1.19](https://go.dev/doc/install). Then:\n\n```\ngit clone https://github.com/OffchainLabs/bold.git && cd bold\n```\n\nThe project can be built with either the Go tool or the Bazel build system. We use [Bazel](https://bazel.build) internally because it provides a hermetic, deterministic environment for building our project and gives us access to many tools including a suite of **static analysis checks**, and a great dependency management approach.\n\n##### With Go\n\nTo build, simply do:\n\n``` \ngo build ./...\n```\n\n##### With Bazel\n\nWe recommend getting the [Bazelisk](https://github.com/bazelbuild/bazelisk) tool to install the Bazel build system. Bazelisk can be installed globally using the Go tool:\n\n```\ngo install github.com/bazelbuild/bazelisk@latest\n```\n\nThen, we recommend aliasing the `bazel` command to `bazelisk`\n\n```\nalias bazel=bazelisk\n```\n\nTo build with Bazel, \n```\nbazel build //...\n```\n\nTo build a specific target, do\n\n```\nbazel build //util/prefix-proofs:go_default_library\n```\n\nMore documentation on common Bazel commands can be found [here](https://bazel.build/reference/command-line-reference)\n\nThe project can also be ordinarily built with the Go tool\n\n## Testing\n\n### Running Go Tests\n\nInstall [Foundry](https://book.getfoundry.sh/getting-started/installation) to get the `anvil` command locally, which allows setting up a local Ethereum chain for testing purposes. Next:\n\n```\ngo test ./...\n```\n\nAlternatively, tests can be ran with Bazel as follows:\n\n```\nbazel test //...\n```\n\nTo run a specific target, do:\n\n```\nbazel test //util/prefix-proofs:go_default_library\n```\n\nTo see outputs, run the test multiple times, or pass in specific arguments to the Go test:\n\n```\nbazel test //util/prefix-proofs:go_default_test --runs_per_test=10 --test_filter=<TEST_NAME_HERE> --test_output=streamed\n```\n\n### Running Solidity Tests\n\nSolidity tests can be run using hardhat, but we recommend using [Foundry](https://book.getfoundry.sh/getting-started/installation) as the tool of choice\n\nIn the contracts folder, run:\n\n```\nforge test\n```\n\nOutput:\n\n```\nTest result: ok. 42 passed; 0 failed; finished in 1.60s\n```\n\n## Generating Solidity Bindings\n\nWith node version 14 and npm, install `yarn`\n\n```\nnpm i -g yarn\n```\n\nThen install Node dependencies\n\n```\ncd contracts && yarn install\n```\n\nBuilding the contracts can be done with:\n\n```\nyarn --cwd contracts build\n```\n\nTo generate the Go bindings to the contracts, at the **top-level directory**, run:\n\n```\ngo run ./solgen/main.go\n```\n\nYou should now have Go bindings inside of `solgen/go`\n\n## Documentation\n\nGo doc reference is available at [pkg.go.dev][https://pkg.go.dev/github.com/OffchainLabs/bold], and an architecture guide to the codebase can be found under [ARCHITECTURE.md](./docs/ARCHITECTURE.md).\n\n## Security Audit\n\nBOLD has been audited by [Trail of Bits](https://www.trailofbits.com/) as of commit [60f97068c12cca73c45117a05ba1922f949fd6ae](https://github.com/OffchainLabs/bold/commit/60f97068c12cca73c45117a05ba1922f949fd6ae). All issues found have been resolved.\n\nThe audit report can be found under [docs/audits/TrailOfBitsAudit](./docs/audits/TrailOfBitsAudit.pdf).\n\n## License\n\nBOLD uses [Business Source License 1.1](./LICENSE)\n\n## Credits\n\nHuge credits on this project go to those who created BOLD and were involved in its implementation: Ed Felten, Yafah Edelman, Chris Buckland, Harry Ng, Lee Bousfield, Terence Tsao, Mario Alvarez, Preston Van Loon, Mahimna Kelkar, Aman Sanghi, Daniel Goldman, Raul Jordan", "release_dates": ["2023-08-03T12:16:18Z"]}, {"name": "cargo-stylus", "description": "Cargo subcommand for developing Arbitrum Stylus projects in Rust", "language": "Rust", "license": null, "readme": "# Cargo Stylus \n\n[![linux](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/linux.yml/badge.svg)](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/linux.yml) [![mac](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/mac.yml/badge.svg)](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/mac.yml) [![windows](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/windows.yml/badge.svg)](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/windows.yml) [![lint](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/check.yml/badge.svg)](https://github.com/OffchainLabs/cargo-stylus/actions/workflows/check.yml)\n\nA cargo subcommand for building, verifying, and deploying Arbitrum Stylus WASM programs in Rust.\n\n## Quick Start\n\n![Image](./header.png)\n\n### Installing With Cargo\n\nInstall [Rust](https://www.rust-lang.org/tools/install), and then install the plugin using the Cargo tool:\n\n```\nRUSTFLAGS=\"-C link-args=-rdynamic\" cargo install --force cargo-stylus\n```\n\nAdd the `wasm32-unknown-unknown` build target to your Rust compiler:\n\n```\nrustup target add wasm32-unknown-unknown\n```\n\nYou should now have it available as a Cargo subcommand:\n\n```\ncargo stylus --help\n\nCargo command for developing Arbitrum Stylus projects\n\nUsage: \n    cargo stylus new\n    cargo stylus export-abi\n    cargo stylus check \n    cargo stylus deploy\n```\n\n### Overview\n\nThe cargo stylus command comes with useful commands such as `new`, `check` and `deploy`, and `export-abi` for developing and deploying Stylus programs to Arbitrum chains. Here's a common workflow: \n\nStart a new Stylus project with \n\n```\ncargo stylus new <YOUR_PROJECT_NAME>\n```\n\nThe command above clones a local copy of the [stylus-hello-world](https://github.com/OffchainLabs/stylus-hello-world) starter project, which implements a Counter smart contract in Rust. See the [README](https://github.com/OffchainLabs/stylus-hello-world/blob/main/README.md) of stylus-hello-world for more details. \n\nYou can also use `cargo stylus new --minimal <YOUR_PROJECT_NAME>` to create a more barebones example with a Stylus entrypoint locally.\n\n### Testnet Information\n\nAll testnet information, including faucets and RPC endpoints can be found [here](https://docs.arbitrum.io/stylus/reference/testnet-information).\n\n\n### Developing With Stylus\n\nThen, develop your Rust program normally and take advantage of all the features the [stylus-sdk](https://github.com/OffchainLabs/stylus-sdk-rs) has to offer. To check whether or not your program will successfully deploy and activate onchain, use the `cargo stylus check` subcommand:\n\n```\ncargo stylus check\n```\n\nThis command will attempt to verify that your program can be deployed and activated onchain without requiring a transaction by specifying a JSON-RPC endpoint. By default, it will use the public URL of the Stylus testnet as its endpoint. See [here](https://docs.arbitrum.io/stylus/reference/testnet-information) for available testnet RPC URLs. See `cargo stylus check --help` for more options.\n\nIf the command above fails, you'll see detailed information about why your WASM will be rejected:\n\n```\nReading WASM file at bad-export.wat\nCompressed WASM size: 55 B\nStylus checks failed: program predeployment check failed when checking against \nARB_WASM_ADDRESS 0x0000\u20260071: (code: -32000, message: program activation failed: failed to parse program)\n\nCaused by:\n    binary exports reserved symbol stylus_ink_left\n\nLocation:\n    prover/src/binary.rs:493:9, data: None)\n```\n\nTo read more about what counts as valid vs. invalid user WASM programs, see [VALID_WASM](./VALID_WASM.md).\n\nIf your program succeeds, you'll see the following message:\n\n```\nFinished release [optimized] target(s) in 1.88s\nReading WASM file at hello-stylus/target/wasm32-unknown-unknown/release/hello-stylus.wasm\nCompressed WASM size: 3 KB\nProgram succeeded Stylus onchain activation checks with Stylus version: 1\n```\n\nOnce you're ready to deploy your program onchain, you can use the `cargo stylus deploy` subcommand as follows:\n\nFirst, we can estimate the gas required to perform our deployment and activation with:\n\n```\ncargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH> \\\n  --estimate-gas-only\n```\n\nand see:\n\n```\nCompressed WASM size: 3 KB\nDeploying program to address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 12756792\n```\n\nNext, attempt an actual deployment. Two transactions will be sent onchain.\n\n```\ncargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH>\n```\n\nand see:\n\n```\nCompressed WASM size: 3 KB\nDeploying program to address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 12756792\nSubmitting tx...\nConfirmed tx 0x42db\u20267311, gas used 11657164\nActivating program at address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 14251759\nSubmitting tx...\nConfirmed tx 0x0bdb\u20263307, gas used 14204908\n```\n\n## Compiling and Checking Stylus Programs\n\n**cargo stylus check**\n\nInstruments a Rust project using Stylus. This command runs compiled WASM code through Stylus instrumentation checks and reports any failures. It **verifies the program can compile onchain** by making an eth_call to a Arbitrum chain RPC endpoint.\n\n```\nUsage: cargo stylus check [OPTIONS]\n```\n\nSee `--help` for all available flags and default values.\n\n## Deploying Stylus Programs\n\n**cargo stylus deploy**\n\nInstruments a Rust project using Stylus and by outputting its brotli-compressed WASM code. Then, it submits **two transactions** by default: the first **deploys** the WASM program code to an address and the second triggers an **activation onchain**. Developers can choose to split up the deploy and activate steps via this command as desired.\n\n```\nUsage: cargo stylus deploy [OPTIONS]\n```\n\nSee `--help` for all available flags and default values.\n\n## Deploying Non-Rust WASM Projects\n\nThe Stylus tool can also be used to deploy non-Rust, WASM projects to Stylus by specifying the WASM file directly with the `--wasm-file-path` flag to any of the cargo stylus commands. \n\nEven WebAssembly Text [(WAT)](https://www.webassemblyman.com/wat_webassembly_text_format.html) files are supported. This means projects that are just individual WASM files can be deployed onchain without needing to have been compiled by Rust. WASMs produced by other languages, such as C, can be used with the tool this way.\n\nFor example:\n\n```js\n(module\n    (type $t0 (func (param i32) (result i32)))\n    (func $add_one (export \"add_one\") (type $t0) (param $p0 i32) (result i32)\n        get_local $p0\n        i32.const 1\n        i32.add))\n```\n\ncan be saved as `add.wat` and used as `cargo stylus check --wasm-file-path=add.wat` or `cargo stylus deploy --wasm-file-path=add.wat`.\n\n## Exporting Solidity ABIs\n\nStylus Rust projects that use the [stylus-sdk](https://github.com/OffchainLabs/stylus-sdk-rs) have the option of exporting Solidity ABIs. The cargo stylus tool also makes this easy with the `export-abi` command:\n\n```\ncargo stylus export-abi\n```\n\n## Optimizing Binary Sizes\n\nBrotli-compressed, Stylus program WASM binaries must fit within the **24Kb** [code-size limit](https://ethereum.org/en/developers/tutorials/downsizing-contracts-to-fight-the-contract-size-limit/) of Ethereum smart contracts. By default, the `cargo stylus check` will attempt to compile a Rust program into WASM with reasonable optimizations and verify its compressed size fits within the limit. However, there are additional options available in case a program exceeds the 24Kb limit from using default settings. Deploying smaller binaries onchain is cheaper and better for the overall network, as deployed WASM programs will exist on the Arbitrum chain's storage forever. \n\nWe recommend optimizing your Stylus program's sizes to smaller sizes, but keep in mind the safety tradeoffs of using some of the more advanced optimizations. However, some small programs when compiled to much smaller sizes can suffer performance penalties.\n\nFor a deep-dive into the different options for optimizing binary sizes using cargo stylus, see [OPTIMIZING_BINARIES.md](./OPTIMIZING_BINARIES.md).\n\n## License\n\nCargo Stylus is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\n", "release_dates": ["2023-10-06T16:43:18Z", "2023-09-01T22:07:40Z"]}, {"name": "community-helm-charts", "description": "Community Helm Charts provided by Offchain Labs", "language": "Python", "license": null, "readme": "# The Offchain Labs Community Library for Kubernetes\n\n[Kubernetes Helm Charts](https://github.com/helm/helm), provided by [Offchain Labs](https://www.offchainlabs.com/), to support deployment of Arbitrum and other Offchain Labs products on Kubernetes clusters.\n\nPlease see each chart's README for more details on specific configuration options.\n\n## Instructions\n\n```console\nhelm repo add offchainlabs https://charts.arbitrum.io\n```\n\n```console\nhelm install <my-release> offchainlabs/<chart>\n```\n", "release_dates": []}, {"name": "config-monorepo", "description": null, "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Eslint\n\n[README](packages/eslint-config-typescript/README.md)\n\n# Prettier\n\n[README](packages/prettier-config/README.md)\n", "release_dates": []}, {"name": "crosschain-oracle-workshop-demo", "description": null, "language": "Solidity", "license": null, "readme": "# Sample Hardhat Project\n\nThis project demonstrates a basic Hardhat use case. It comes with a sample contract, a test for that contract, and a script that deploys that contract.\n\nTry running some of the following tasks:\n\n```shell\nnpx hardhat help\nnpx hardhat test\nREPORT_GAS=true npx hardhat test\nnpx hardhat node\nnpx hardhat run scripts/deploy.ts\n```\n", "release_dates": []}, {"name": "crosschain-tools-chrome-extension", "description": "Chrome extension that offers information on etherscan about Ethereum transactions that send L1->L2 messages to Arbitrum. It creates a new tab on Etherscan for these transactions with information of the L1->L2 messages taken from the appropriate subgraph.", "language": "TypeScript", "license": null, "readme": "# Cross-messaging tools - Chrome extension\n\nChrome extension that offers information on etherscan about Ethereum transactions that send L1->L2 messages to Arbitrum. It creates a new tab on Etherscan for these transactions with information of the L1->L2 messages taken from the appropriate subgraph.\n\n## Installation\n\n1. Clone repository\n\n    `git checkout https://github.com/OffchainLabs/crosschain-tools-chrome-extension.git`\n\n2. Install dependencies\n\n    `npm install`\n\n3. Build extension\n\n    `npm run build`\n\n4. Go to `chrome://extensions/` and activate Developer mode (top-right switch)\n\n5. Click the `Load unpacked` button on the left and select the folder that holds the `manifest.json` file (usually the one where you cloned the repository to)\n\n6. Done. You can now go to etherscan, to the page of a transaction that sent an L1->L2 message to see the new tab", "release_dates": []}, {"name": "cuckoocache", "description": null, "language": "Go", "license": null, "readme": "This implements an on-chain cache index, and corresponding off-chain local node cache, to allow better pricing of accesses to read-only data, \nsuch as contract code, from the Ethereum state tree. \n\n### On-chain and off-chain components\n\nOn-chain we store a cache index, which tracks a set of items\nthat are deemed to be in-cache. The on-chain index does not\nstore the actual data, just a data structure allowing to\ndetermine whether a particular item is in-cache. The state of\nthe on-chain index is part of the consensus state of the \nArbitrum chain.\n\nOff-chain we store an actual cache, which will be managed\nseparately by each node's execution engine. Different nodes \ncan have differently sized caches.\n\nThe mechanism maintains an *inclusion property* which \nguarantees that if an item is in the on-chain index, then it\nis in the cache of every local node. This makes it safe to\ncharge less gas for accesses to items that are in-cache.\n\n### How to use this\n\nTo use the mechanism with an Arbitrum Nitro chain, you need\nto implement three interfaces:\n\n`onChainStorage.OnChainStorage` is called by the cache to \nread and write the on-chain storage that backs the on-chain\ncache index. The interface provides a key-value store\nwith both keys and values having type `common.Hash`.\n\n`cacheKeys.LocalNodeCacheKey` is the type of key used to index the \nlocal node's cache. For example, if cache items are indexed\nby `common.Address` then you should provide an implementation\nof `cacheKeys.LocalNodeCacheKey` that contains a `common.Address`.\n(For `common.Address` this is already provided, as type\ntype `cacheKeys.AddressLocalCacheKey`)\nImplementations of this interface must provide \na `ToCacheKey()` method that returns a 24-byte digest of \nthe key, which will typically be a truncated hash of the key.\nThe digest should be a hash or similar pseudorandom-like\nfunction of the key, to get the best efficiency from the\ncache.\n\n`cacheBackingStore.CacheBackingStore` is called by the cache \nto fetch an item (presumably from some database) that is \ngoing to be cached.\n\nThe main configuration choice is how large the cache will be.\nFirst, choose the capacity of the on-chain index. Then each\nnode can choose the capacity of its own local cache.\n\n*The capacity of every local node cache must be greater than or\nequal to the capacity of the on-chain index.* This is required\nin order to guarantee the inclusion property. So you should\nchoose the capacity of the on-chain index to be the capacity\nthat you're willing to force upon the minimally-resourced\nnode.\n\n### Code examples\n\nTo connect to the on-chain cache index, do\n\n`cacheIndex := onChainIndex.OpenOnChainCuckooTable(storage, capacity)`\n\nwhere `storage` is an instance of `onChainStorage.OnChainStorage` usable\nfor reading and writing the index's on-chain state, and `capacity` is the\nmaxmimum number of items you'll allow in the index.\n\nNote that `OpenOnChainCuckooTable` assumes that it is connecting to an on-chain\nstructure that is already initialized and might be non-empty. If you need to\ninitialize a fresh on-chain index, do \n\n`cacheIndex.Initialize(capacity)`.\n\nHaving opened the on-chain index, you can now initialize the local node cache \nby doing\n\n`cache := NewLocalNodeCache[CacheKeyType](capacity, onChainIndex, backingStore)`\n\nHere `capacity` is the capacity you want for the local node cache, which\ncan be different on different nodes, but must be greater than or equal to\nthe capacity of the on-chain index. If you pass in a `capacity` less than\nthe capacity of `onChainIndex.Capacity` then `cache` will silently use\na capacity equal to `onChainIndex.Capacity`.  So it's safe to pass in \na `capacity` of zero, and you'll get the smallest local node cache that is\nsafe.\n\nHaving set up your local node cache, you can now read items:\n\n`data, wasCacheHit := ReadItemFromLocalCache(cache, itemKey)`\n\n`data` is a byte slice containing the item's data, and `wasCacheHit` will\nbe true iff the access was a hit in the on-chain index.\n\nIf you need to flush the caches, do\n\n`FlushLocalNodeCache(cache, alsoFlushOnChain)`\n\nThe will make the local node cache empty, and if `alsoFlushOnChain` is true\nit will also make the on-chain index empty. You can also flush a single\nitem by doing\n\n`FlushOneItemFromLocalNodeCache(cache, itemKey, alsoFlushOnChain)`\n\n### Cache replacement policies\n\nThe local node cache uses an LRU (Least Recently Used)\nreplacement policy.\n\nThe on-chain index uses a generational cache replacement\npolicy, in order to reduce the number of accesses to storage.\n(This is sufficient to guarantee the inclusion property, because\nwe can prove that a generational cache of capacity `N` always\ncontains a subset of the items that would be in an LRU cache\nof capacity `N` or greater.)\n\nGenerational caching keeps a current generation number, which\nincrements occasionally. Every item is tagged with the latest\ngeneration in which it was accessed. If the current generation \nis `G` then an item is in-cache if its latest access was in \ngeneration `G` or `G-1`. For a cache of capacity `C`,\nthe generation number increments if an access would cause the\nnumber of in-cache items to be greater than `C` or \nthe number of items in the current generation to be\ngreater than `3C/4`.\n\nGenerational replacement can be seen as an approximation to\nLRU. The main advantage of generational over LRU is that\ngenerational makes many fewer writes to storage. With\ngenerational, an access to an item in the latest generation \nrequires no changes to the index, and any other access requires\nonly one item in the index to be created or modified.\nBy contrast, a typical implementation of LRU would require \nmodifying at least three places in storage on every access\n(except for accesses to the most recently used item). So we\noptimize by using generational in the on-chain index, where\nstate changes are expensive because the state is in consensus;\nbut we use LRU in the local node cache where state changes are\ncheaper.\n", "release_dates": []}, {"name": "demo-dapp-election", "description": null, "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Election - DAPP Tutorial\n\nBuild your first decentralized application, or Dapp, on the Ethereum Network with this tutorial!\n\n**Full Free Video Tutorial:**\nhttps://youtu.be/3681ZYbDSSk\n\nFollow the steps below to download, install, and run this project.\n\n## Dependencies\n\nInstall these prerequisites to follow along with the tutorial. See free video tutorial or a full explanation of each prerequisite.\n\n-   NPM: https://nodejs.org\n-   Truffle: https://github.com/trufflesuite/truffle\n-   Ganache: http://truffleframework.com/ganache/\n-   Metamask: https://metamask.io/\n\n## Step 1. Clone the project\n\n`git clone https://github.com/dappuniversity/election`\n\n## Step 2. Install dependencies\n\n```\n$ cd election\n$ npm install\n```\n\n## Step 3. Start Ganache\n\nOpen the Ganache GUI client that you downloaded and installed. This will start your local blockchain instance. See free video tutorial for full explanation.\n\n## Step 4. Compile & Deploy Election Smart Contract\n\n`$ truffle migrate --reset`\nYou must migrate the election smart contract each time your restart ganache.\n\n## Step 5. Configure Metamask\n\nSee free video tutorial for full explanation of these steps:\n\n-   Unlock Metamask\n-   Connect metamask to your local Etherum blockchain provided by Ganache.\n-   Import an account provided by ganache.\n\n## Step 6. Run the Front End Application\n\n`$ npm run dev`\nVisit this URL in your browser: http://localhost:3000\n\nIf you get stuck, please reference the free video tutorial.\n", "release_dates": ["2019-06-04T17:31:01Z"]}, {"name": "demo-dapp-pet-shop", "description": "Pet shop dapp, for use as an Arbitrum demo", "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# demo-dapp-pet-shop\n\nThis pet shop dapp has been adapted for use as an Arbitrum demo. For instructions, see the developer quickstart guide at https://developer.offchainlabs.com.\n\nArbitrum technologies are patent pending. This repository is offered under the Apache 2.0 license. See License.txt for details.\n", "release_dates": ["2019-06-28T17:27:10Z"]}, {"name": "deposits_tracker", "description": null, "language": "TypeScript", "license": null, "readme": "\n## Arb-Monitor \ud83d\udd35 \ud83d\udc40\n\n### Set Up Env Variables\n\nSet up env vars in `.env.sample.` Can use .env.sample as-is for mainnet:\n\n```\ncp .env.sample .env\n```\n\n(Note that `PRIVKEY` is only required for wallet instantiation - no chain writing occurs; a throwaway key can/should be used. Key in .env.sample is public / in testnet docs and so can be used).\n\n### Install\n\n```\nyarn install\n```\n\n### Run\n\n```\nyarn deposits\n```", "release_dates": []}, {"name": "encode-workshop-crosschain-messaging", "description": null, "language": "JavaScript", "license": null, "readme": "## Demystifying Arbitrum L1 To L2 Messaging\n\n> DISCLAIMER: For workshop / demo / testnet purposes only; has not been audited, don't use this on mainnet, etc.\n\n### What we'll do today?\n\nwe write up a simple demo of Arbitrum's L1-to-L2 message passing system (aka \"retryable tickets\"). we'll be using Goerli / Arbitrum Goerli Rollup Testnet. Throughout the workshop, we'll learn the concepts of interacting with contracts on different layers, retryable tickets, and how to handle potential issues that might arise during the process. The script and contracts will demonstrate how to interact with Arbitrum's core bridge contracts, enabling us to create these retryable messages effectively. We'll delve into the intricacies of calculating and forwarding the appropriate fees from L1 to L2, ensuring smooth and seamless transactions across layers. Moreover, we'll explore how to utilize Arbitrum's L1-to-L2 message address aliasing feature to simplify message communication between layers.\n\nBy the end of the session, you'll not only be proficient in managing messages between layers and performing retryable transactions confidently but also gain a comprehensive understanding of Arbitrum's unique functionalities. Let's have some fun while exploring the fascinating world of L1 and L2 interactions!\n\n## Flow\n\n**1- Deployment of Contracts:**\n\n- We start by deploying two contracts: L1 Greeter on Layer 1 and L2 Greeter on Layer 2. Each contract has a unique \"greeting\" message set.\n\n**2- Modifying L2 Greeting from L1:**\n\n- We proceed to modify the greeting message on L2 Greeter directly from L1 by sending a specific message.\n\n**3- First Approach - Demonstrating Potential Failure:**\n\n- As a learning experience, we first attempt to modify the L2 greeting using one approach.\n- I'll show you how providing the wrong parameters when submitting the retryable data can lead to a failed transaction.\n- We'll then verify the status of our L1-L2 message on the Arb retryable dashboard to see the failed attempt.\n\n**4- Second Approach - Correct Method:**\n\n- Now, we'll follow the correct approach to modify the L2 greeting.\n- I'll demonstrate the proper way of submitting retryable data to ensure a successful transaction this time.\n\n## Setup / Commands\n\n1. `git clone` this repo\n1. `yarn install`\n1. Add env variables (i.e., to a .env file):\n\n   ```\n   TESTNET_PRIVKEY=xyzxyz\n   L1RPC=https://goerli.infura.io/v3/<your_infura_key>\n   ```\n\n1. Complete function bodies in scripts (i.e., do all the `\"// DO!\"` things)\n1. Deploy contracts:\n   ```\n   yarn run deploy\n   ```\n1. Test out a L1-L2 message:\n   ```\n   yarn run greet\n   ```\n\n## Useful links\n\n- Arbitum L1-L2 messaging documentation - https://docs.arbitrum.io/arbos/l1-to-l2-messaging\n- Arbitrum retryables transaction panel - https://retryable-dashboard.arbitrum.io/tx\n- Arbitrum SDK - https://github.com/OffchainLabs/arbitrum-sdk\n", "release_dates": []}, {"name": "eth-pos-devnet", "description": null, "language": "Shell", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Ethereum Proof-of-Stake Devnet\n\nThis repository provides a docker-compose file to run a fully-functional, local development network for Ethereum with proof-of-stake enabled. This configuration uses [Prysm](https://github.com/prysmaticlabs/prysm) as a consensus client and [go-ethereum](https://github.com/ethereum/go-ethereum) for execution. **It starts from proof-of-stake** and does not go through the Ethereum merge.\n\nThis sets up a single node development network with 64 deterministically-generated validator keys to drive the creation of blocks in an Ethereum proof-of-stake chain. Here's how it works:\n\n1. We initialize a go-ethereum, proof-of-work development node from a genesis config\n2. We initialize a Prysm beacon chain, proof-of-stake development node from a genesis config\n\nThe development net is fully functional and allows for the deployment of smart contracts and all the features that also come with the Prysm consensus client such as its rich set of APIs for retrieving data from the blockchain. This development net is a great way to understand the internals of Ethereum proof-of-stake and to mess around with the different settings that make the system possible.\n\n## Using\n\nFirst, install Docker. Then, run:\n\n```\ngit clone https://github.com/rauljordan/eth-pos-devnet && cd eth-pos-devnet\n./clean.sh\ndocker compose up -d\n```\n\nYou will see the following:\n\n```\n$ docker compose up -d\n[+] Running 7/7\n \u283f Network eth-pos-devnet_default                          Created\n \u283f Container eth-pos-devnet-geth-genesis-1                 Started\n \u283f Container eth-pos-devnet-create-beacon-chain-genesis-1  Started\n \u283f Container eth-pos-devnet-geth-account-1                 Started\n \u283f Container eth-pos-devnet-geth-1                         Started\n \u283f Container eth-pos-devnet-beacon-chain-1                 Started\n \u283f Container eth-pos-devnet-validator-1                    Started\n```\n\nEach time you restart, you can wipe the old data using `./clean.sh`.\n\nNext, you can inspect the logs of the different services launched. \n\n```\ndocker logs eth-pos-devnet-geth-1 -f\n```\n\nand see:\n\n```\nINFO [08-19|00:44:30.956] Imported new potential chain segment     blocks=1 txs=0 mgas=0.000 elapsed=1.356ms     mgasps=0.000 number=50 hash=e0bd7f..497d27 dirty=0.00B\nINFO [08-19|00:44:31.030] Chain head was updated                   number=50 hash=e0bd7f..497d27 root=815538..801014 elapsed=1.49025ms\nINFO [08-19|00:44:35.215] Imported new potential chain segment     blocks=1 txs=0 mgas=0.000 elapsed=3.243ms     mgasps=0.000 number=51 hash=a5fb7c..5e844b dirty=0.00B\nINFO [08-19|00:44:35.311] Chain head was updated                   number=51 hash=a5fb7c..5e844b root=815538..801014 elapsed=1.73475ms\nINFO [08-19|00:44:39.435] Imported new potential chain segment     blocks=1 txs=0 mgas=0.000 elapsed=1.355ms     mgasps=0.000 number=52 hash=b2fd97..22e230 dirty=0.00B\nINFO [08-19|00:44:39.544] Chain head was updated                   number=52 hash=b2fd97..22e230 root=815538..801014 elapsed=1.167959ms\nINFO [08-19|00:44:42.733] Imported new potential chain segment     blocks=1 txs=0 mgas=0.000 elapsed=2.453ms     mgasps=0.000 number=53 hash=ee046e..e56b0c dirty=0.00B\nINFO [08-19|00:44:42.747] Chain head was updated                   number=53 hash=ee046e..e56b0c root=815538..801014 elapsed=\"821.084\u00b5s\"\n```\n\n# Available Features\n\n- Starts from the Capella Ethereum hard fork\n- The network launches with a [Validator Deposit Contract](https://github.com/ethereum/consensus-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol) deployed at address `0x4242424242424242424242424242424242424242`. This can be used to onboard new validators into the network by depositing 32 ETH into the contract\n- The default account used in the go-ethereum node is address `0x123463a4b065722e99115d6c222f267d9cabb524` which comes seeded with ETH for use in the network. This can be used to send transactions, deploy contracts, and more\n- The default account, `0x123463a4b065722e99115d6c222f267d9cabb524` is also set as the fee recipient for transaction fees proposed validators in Prysm. This address will be receiving the fees of all proposer activity\n- The go-ethereum JSON-RPC API is available at http://geth:8545\n- The Prysm client's REST APIs are available at http://beacon-chain:3500. For more info on what these APIs are, see [here](https://ethereum.github.io/beacon-APIs/)\n- The Prysm client also exposes a gRPC API at http://beacon-chain:4000\n\n<img width=\"1631\" alt=\"5\" src=\"https://user-images.githubusercontent.com/5572669/186052294-70909835-210f-4b13-86a3-cf1f568bb8a3.png\">\n<img width=\"1693\" alt=\"3\" src=\"https://user-images.githubusercontent.com/5572669/186052298-54b82ff2-a901-482e-9e5a-a7c265605ad6.png\">\n<img width=\"1426\" alt=\"1\" src=\"https://user-images.githubusercontent.com/5572669/186052301-dd487b50-183a-4fa6-bbec-216f32d6f03a.png\">\n", "release_dates": []}, {"name": "ethers-bls-signer", "description": null, "language": "TypeScript", "license": null, "readme": null, "release_dates": []}, {"name": "fastcache", "description": null, "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "[![Build Status](https://github.com/VictoriaMetrics/fastcache/workflows/main/badge.svg)](https://github.com/VictoriaMetrics/fastcache/actions)\n[![GoDoc](https://godoc.org/github.com/VictoriaMetrics/fastcache?status.svg)](http://godoc.org/github.com/VictoriaMetrics/fastcache)\n[![Go Report](https://goreportcard.com/badge/github.com/VictoriaMetrics/fastcache)](https://goreportcard.com/report/github.com/VictoriaMetrics/fastcache)\n[![codecov](https://codecov.io/gh/VictoriaMetrics/fastcache/branch/master/graph/badge.svg)](https://codecov.io/gh/VictoriaMetrics/fastcache)\n\n# fastcache - fast thread-safe inmemory cache for big number of entries in Go\n\n### Features\n\n* Fast. Performance scales on multi-core CPUs. See benchmark results below.\n* Thread-safe. Concurrent goroutines may read and write into a single\n  cache instance.\n* The fastcache is designed for storing big number of entries without\n  [GC overhead](https://syslog.ravelin.com/further-dangers-of-large-heaps-in-go-7a267b57d487).\n* Fastcache automatically evicts old entries when reaching the maximum cache size\n  set on its creation.\n* [Simple API](http://godoc.org/github.com/VictoriaMetrics/fastcache).\n* Simple source code.\n* Cache may be [saved to file](https://godoc.org/github.com/VictoriaMetrics/fastcache#Cache.SaveToFile)\n  and [loaded from file](https://godoc.org/github.com/VictoriaMetrics/fastcache#LoadFromFile).\n* Works on [Google AppEngine](https://cloud.google.com/appengine/docs/go/).\n\n\n### Benchmarks\n\n`Fastcache` performance is compared with [BigCache](https://github.com/allegro/bigcache), standard Go map\nand [sync.Map](https://golang.org/pkg/sync/#Map).\n\n```\nGOMAXPROCS=4 go test github.com/VictoriaMetrics/fastcache -bench='Set|Get' -benchtime=10s\ngoos: linux\ngoarch: amd64\npkg: github.com/VictoriaMetrics/fastcache\nBenchmarkBigCacheSet-4      \t    2000\t  10566656 ns/op\t   6.20 MB/s\t 4660369 B/op\t       6 allocs/op\nBenchmarkBigCacheGet-4      \t    2000\t   6902694 ns/op\t   9.49 MB/s\t  684169 B/op\t  131076 allocs/op\nBenchmarkBigCacheSetGet-4   \t    1000\t  17579118 ns/op\t   7.46 MB/s\t 5046744 B/op\t  131083 allocs/op\nBenchmarkCacheSet-4         \t    5000\t   3808874 ns/op\t  17.21 MB/s\t    1142 B/op\t       2 allocs/op\nBenchmarkCacheGet-4         \t    5000\t   3293849 ns/op\t  19.90 MB/s\t    1140 B/op\t       2 allocs/op\nBenchmarkCacheSetGet-4      \t    2000\t   8456061 ns/op\t  15.50 MB/s\t    2857 B/op\t       5 allocs/op\nBenchmarkStdMapSet-4        \t    2000\t  10559382 ns/op\t   6.21 MB/s\t  268413 B/op\t   65537 allocs/op\nBenchmarkStdMapGet-4        \t    5000\t   2687404 ns/op\t  24.39 MB/s\t    2558 B/op\t      13 allocs/op\nBenchmarkStdMapSetGet-4     \t     100\t 154641257 ns/op\t   0.85 MB/s\t  387405 B/op\t   65558 allocs/op\nBenchmarkSyncMapSet-4       \t     500\t  24703219 ns/op\t   2.65 MB/s\t 3426543 B/op\t  262411 allocs/op\nBenchmarkSyncMapGet-4       \t    5000\t   2265892 ns/op\t  28.92 MB/s\t    2545 B/op\t      79 allocs/op\nBenchmarkSyncMapSetGet-4    \t    1000\t  14595535 ns/op\t   8.98 MB/s\t 3417190 B/op\t  262277 allocs/op\n```\n\n`MB/s` column here actually means `millions of operations per second`.\nAs you can see, `fastcache` is faster than the `BigCache` in all the cases.\n`fastcache` is faster than the standard Go map and `sync.Map` on workloads\nwith inserts.\n\n\n### Limitations\n\n* Keys and values must be byte slices. Other types must be marshaled before\n  storing them in the cache.\n* Big entries with sizes exceeding 64KB must be stored via [distinct API](http://godoc.org/github.com/VictoriaMetrics/fastcache#Cache.SetBig).\n* There is no cache expiration. Entries are evicted from the cache only\n  on cache size overflow. Entry deadline may be stored inside the value in order\n  to implement cache expiration.\n\n\n### Architecture details\n\nThe cache uses ideas from [BigCache](https://github.com/allegro/bigcache):\n\n* The cache consists of many buckets, each with its own lock.\n  This helps scaling the performance on multi-core CPUs, since multiple\n  CPUs may concurrently access distinct buckets.\n* Each bucket consists of a `hash(key) -> (key, value) position` map\n  and 64KB-sized byte slices (chunks) holding encoded `(key, value)` entries.\n  Each bucket contains only `O(chunksCount)` pointers. For instance, 64GB cache\n  would contain ~1M pointers, while similarly-sized `map[string][]byte`\n  would contain ~1B pointers for short keys and values. This would lead to\n  [huge GC overhead](https://syslog.ravelin.com/further-dangers-of-large-heaps-in-go-7a267b57d487).\n\n64KB-sized chunks reduce memory fragmentation and the total memory usage comparing\nto a single big chunk per bucket.\nChunks are allocated off-heap if possible. This reduces total memory usage because\nGC collects unused memory more frequently without the need in `GOGC` tweaking.\n\n\n### Users\n\n* `Fastcache` has been extracted from [VictoriaMetrics](https://github.com/VictoriaMetrics/VictoriaMetrics) sources.\n  See [this article](https://medium.com/devopslinks/victoriametrics-creating-the-best-remote-storage-for-prometheus-5d92d66787ac)\n  for more info about `VictoriaMetrics`.\n\n\n### FAQ\n\n#### What is the difference between `fastcache` and other similar caches like [BigCache](https://github.com/allegro/bigcache) or [FreeCache](https://github.com/coocood/freecache)?\n\n* `Fastcache` is faster. See benchmark results above.\n* `Fastcache` uses less memory due to lower heap fragmentation. This allows\n  saving many GBs of memory on multi-GB caches.\n* `Fastcache` API [is simpler](http://godoc.org/github.com/VictoriaMetrics/fastcache).\n  The API is designed to be used in zero-allocation mode.\n\n\n#### Why `fastcache` doesn't support cache expiration?\n\nBecause we don't need cache expiration in [VictoriaMetrics](https://github.com/VictoriaMetrics/VictoriaMetrics).\nCached entries inside `VictoriaMetrics` never expire. They are automatically evicted on cache size overflow.\n\nIt is easy to implement cache expiration on top of `fastcache` by caching values\nwith marshaled deadlines and verifying deadlines after reading these values\nfrom the cache.\n\n\n#### Why `fastcache` doesn't support advanced features such as [thundering herd protection](https://en.wikipedia.org/wiki/Thundering_herd_problem) or callbacks on entries' eviction?\n\nBecause these features would complicate the code and would make it slower.\n`Fastcache` source code is simple - just copy-paste it and implement the feature you want\non top of it.\n", "release_dates": []}, {"name": "fund-distribution-contracts", "description": "Contracts for distributing rewards data availability committee members", "language": "Solidity", "license": null, "readme": "# DAC-REWARDS\n\nA smart contract that pushes the funds that accrued in it to a group of addresses.\nYou can use this contract to distribute ether evenly between the participants.\nThe participants are managed by an owner - but owner is only able to deny them from of future rewards (not rewards that have already accrued).\nIf a particular recipient is not able to recieve funds at their address, the payment will fallback to the owner.\nThis contract is expected to handle ether simply appearing in its balance (opposed to having an explicit `receive` function called).\n\nThe current system assumes the block gas limit will not decrease below 16m (but has a conservative margin is still kept to ensure transfers are always possible).\n\n## Installation\n\n1. Install [Foundry](https://github.com/foundry-rs/foundry):\n\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n2. Download dependency\n\n```\nmake install\n```\n\n### Dependencies\n\n```\nmake update\n```\n\n### Compilation\n\n```\nmake build\n```\n\n### Testing\n\n```\nmake test\n```\n\n### Code Coverage\n\n```\nmake coverage\n```\n\n### Gas Report\n\n```\nmake gas\n```\n\n### Gas Snapshot\n\n```\nmake snapshot\n```\n\n### Compare with Gas Snapshot\n\n```\nmake gas-check\n```\n", "release_dates": []}, {"name": "gnosis-safe-contracts", "description": null, "language": "TypeScript", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "Gnosis Safe Contracts\n=====================\n\n[![npm version](https://badge.fury.io/js/%40gnosis.pm%2Fsafe-contracts.svg)](https://badge.fury.io/js/%40gnosis.pm%2Fsafe-contracts)\n[![Build Status](https://github.com/gnosis/safe-contracts/workflows/safe-contracts/badge.svg?branch=development)](https://github.com/gnosis/safe-contracts/actions)\n[![Coverage Status](https://coveralls.io/repos/github/gnosis/safe-contracts/badge.svg?branch=development)](https://coveralls.io/github/gnosis/safe-contracts)\n\nUsage\n-----\n### Install requirements with yarn:\n\n```bash\nyarn\n```\n\n### Run all tests:\n\n```bash\nyarn build\nyarn test\n```\n\n### Deployments\n\nA collection of the different Safe contract deployments and their addresses can be found in the [Safe deployments](https://github.com/gnosis/safe-deployments) repository.\n\nTo add support for a new network follow the steps of the ``Deploy`` section and create a PR in the [Safe deployments](https://github.com/gnosis/safe-deployments) repository. \n\n### Deploy\n\n> :warning: **Make sure to use the correct commit when deploying the contracts.** Any change (even comments) within the contract files will result in different addresses. The tagged versions that are used by the Gnosis Safe team can be found in the [releases](https://github.com/gnosis/safe-contracts/releases).\n\nThis will deploy the contracts deterministically and verify the contracts on etherscan using [Solidity 0.7.6](https://github.com/ethereum/solidity/releases/tag/v0.7.6) by default.\n\nPreparation:\n- Set `MNEMONIC` in `.env`\n- Set `INFURA_KEY` in `.env`\n\n```bash\nyarn deploy-all <network>\n```\n\nThis will perform the following steps\n\n```bash\nyarn build\nyarn hardhat --network <network> deploy\nyarn hardhat --network <network> etherscan-verify\nyarn hardhat --network <network> local-verify\n```\n\n#### Custom Networks\n\nIt is possible to use the `NODE_URL` env var to connect to any EVM based network via an RPC endpoint. This connection then can be used with the `custom` network.\n\nE.g. to deploy the Safe contract suite on that network you would run `yarn deploy-all custom`. \n\nThe resulting addresses should be on all networks the same.\n\nNote: Address will vary if contract code is changed or a different Solidity version is used.\n\n### Verify contract\n\nThis command will use the deployment artifacts to compile the contracts and compare them to the onchain code\n```bash\nyarn hardhat --network <network> local-verify\n```\n\nThis command will upload the contract source to Etherescan\n```bash\nyarn hardhat --network <network> etherscan-verify\n```\n\nDocumentation\n-------------\n- [Safe developer portal](http://docs.gnosis.io/safe)\n- [Error codes](docs/error_codes.md)\n- [Coding guidelines](docs/guidelines.md)\n\nAudits/ Formal Verification\n---------\n- [for Version 1.3.0 by G0 Group](docs/audit_1_3_0.md)\n- [for Version 1.2.0 by G0 Group](docs/audit_1_2_0.md)\n- [for Version 1.1.1 by G0 Group](docs/audit_1_1_1.md)\n- [for Version 1.0.0 by Runtime Verification](docs/rv_1_0_0.md)\n- [for Version 0.0.1 by Alexey Akhunov](docs/alexey_audit.md)\n\nSecurity and Liability\n----------------------\nAll contracts are WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nLicense\n-------\nAll smart contracts are released under LGPL-3.0\n", "release_dates": []}, {"name": "go-ethereum", "description": null, "language": "Go", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "## Go Ethereum\n\nOfficial Golang execution layer implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.com/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.com/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\nAutomated builds are available for stable releases and the unstable master branch. Binary\narchives are published at https://geth.ethereum.org/downloads/.\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the [Installation Instructions](https://geth.ethereum.org/docs/getting-started/installing-geth).\n\nBuilding `geth` requires both a Go (version 1.19 or later) and a C compiler. You can install\nthem using your favourite package manager. Once the dependencies are installed, run\n\n```shell\nmake geth\n```\n\nor, to build the full suite of utilities:\n\n```shell\nmake all\n```\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd`\ndirectory.\n\n|  Command   | Description|\n| :--------: ||\n| **`geth`** | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI page](https://geth.ethereum.org/docs/fundamentals/command-line-options) for command line options. |\n|   `clef`   | Stand-alone signing tool, which can be used as a backend signer for `geth`.                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|  `devp2p`  | Utilities to interact with nodes on the networking layer, without running a full blockchain.                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n|  `abigen`  | Source code generator to convert Ethereum contract definitions into easy-to-use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://docs.soliditylang.org/en/develop/abi-spec.html) with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings) page for details.                                  |\n| `bootnode` | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.                                                                                                                                                                                                                                               |\n|   `evm`    | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug run`).                                                                                                                                                                                                                                               |\n| `rlpdump`  | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`).                                                                                                                                                                                |\n\n## Running `geth`\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://geth.ethereum.org/docs/fundamentals/command-line-options)),\nbut we've enumerated a few common parameter combos to get you up to speed quickly\non how you can run your own `geth` instance.\n\n### Hardware Requirements\n\nMinimum:\n\n* CPU with 2+ cores\n* 4GB RAM\n* 1TB free storage space to sync the Mainnet\n* 8 MBit/sec download Internet service\n\nRecommended:\n\n* Fast CPU with 4+ cores\n* 16GB+ RAM\n* High-performance SSD with at least 1TB of free space\n* 25+ MBit/sec download Internet service\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum\nnetwork: create accounts; transfer funds; deploy and interact with contracts. For this\nparticular use case, the user doesn't care about years-old historical data, so we can\nsync quickly to the current state of the network. To do so:\n\n```shell\n$ geth console\n```\n\nThis command will:\n * Start `geth` in snap sync mode (default, can be changed with the `--syncmode` flag),\n   causing it to download more data in exchange for avoiding processing the entire history\n   of the Ethereum network, which is very CPU intensive.\n * Start the built-in interactive [JavaScript console](https://geth.ethereum.org/docs/interacting-with-geth/javascript-console),\n   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md) \n   (note: the `web3` version bundled within `geth` is very old, and not up to date with official docs),\n   as well as `geth`'s own [management APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc).\n   This tool is optional and if you leave it out you can always attach it to an already running\n   `geth` instance with `geth attach`.\n\n### A Full node on the G\u00f6rli test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum\ncontracts, you almost certainly would like to do that without any real money involved until\nyou get the hang of the entire system. In other words, instead of attaching to the main\nnetwork, you want to join the **test** network with your node, which is fully equivalent to\nthe main network, but with play-Ether only.\n\n```shell\n$ geth --goerli console\n```\n\nThe `console` subcommand has the same meaning as above and is equally\nuseful on the testnet too.\n\nSpecifying the `--goerli` flag, however, will reconfigure your `geth` instance a bit:\n\n * Instead of connecting to the main Ethereum network, the client will connect to the G\u00f6rli\n   test network, which uses different P2P bootnodes, different network IDs and genesis\n   states.\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), `geth`\n   will nest itself one level deeper into a `goerli` subfolder (`~/.ethereum/goerli` on\n   Linux). Note, on OSX and Linux this also means that attaching to a running testnet node\n   requires the use of a custom endpoint since `geth attach` will try to attach to a\n   production node endpoint by default, e.g.,\n   `geth attach <datadir>/goerli/geth.ipc`. Windows users are not affected by\n   this.\n\n*Note: Although some internal protective measures prevent transactions from\ncrossing over between the main network and test network, you should always\nuse separate accounts for play and real money. Unless you manually move\naccounts, `geth` will by default correctly separate the two networks and will not make any\naccounts available between them.*\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a\nconfiguration file via:\n\n```shell\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea of how the file should look like you can use the `dumpconfig` subcommand to\nexport your existing configuration:\n\n```shell\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with `geth` v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using\nDocker:\n\n```shell\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start `geth` in snap-sync mode with a DB memory allowance of 1GB, as the\nabove command does.  It will also create a persistent volume in your home directory for\nsaving your blockchain as well as map the default ports. There is also an `alpine` tag\navailable for a slim version of the image.\n\nDo not forget `--http.addr 0.0.0.0`, if you want to access RPC from other containers\nand/or hosts. By default, `geth` binds to the local interface and RPC endpoints are not\naccessible from the outside.\n\n### Programmatically interfacing `geth` nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with `geth` and the\nEthereum network via your own programs and not manually through the console. To aid\nthis, `geth` has built-in support for a JSON-RPC based APIs ([standard APIs](https://ethereum.github.io/execution-apis/api-documentation/)\nand [`geth` specific APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc)).\nThese can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based\nplatforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by `geth`,\nwhereas the HTTP and WS interfaces need to manually be enabled and only expose a\nsubset of APIs due to security reasons. These can be turned on/off and configured as\nyou'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--http` Enable the HTTP-RPC server\n  * `--http.addr` HTTP-RPC server listening interface (default: `localhost`)\n  * `--http.port` HTTP-RPC server listening port (default: `8545`)\n  * `--http.api` API's offered over the HTTP-RPC interface (default: `eth,net,web3`)\n  * `--http.corsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--ws.addr` WS-RPC server listening interface (default: `localhost`)\n  * `--ws.port` WS-RPC server listening port (default: `8546`)\n  * `--ws.api` API's offered over the WS-RPC interface (default: `eth,net,web3`)\n  * `--ws.origins` Origins from which to accept WebSocket requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: `admin,debug,eth,miner,net,personal,txpool,web3`)\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to\nconnect via HTTP, WS or IPC to a `geth` node configured with the above flags and you'll\nneed to speak [JSON-RPC](https://www.jsonrpc.org/specification) on all transports. You\ncan reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based\ntransport before doing so! Hackers on the internet are actively trying to subvert\nEthereum nodes with exposed APIs! Further, all browser tabs can access locally\nrunning web servers, so malicious web pages could try to subvert locally available\nAPIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for\ngranted in the official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be\naware of and agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n    \"chainId\": <arbitrary positive integer>,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0\n  },\n  \"alloc\": {},\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\": \"0x20000\",\n  \"extraData\": \"\",\n  \"gasLimit\": \"0x2fefd8\",\n  \"nonce\": \"0x0000000000000042\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\": \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing\nthe `nonce` to some random value so you prevent unknown remote nodes from being able\nto connect to you. If you'd like to pre-fund some accounts for easier testing, create\nthe accounts and populate the `alloc` field with their addresses.\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\n    \"balance\": \"111111111\"\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    \"balance\": \"222222222\"\n  }\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every**\n`geth` node with it prior to starting it up to ensure all blockchain parameters are correctly\nset:\n\n```shell\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to\nstart a bootstrap node that others can use to find each other in your network and/or over\nthe internet. The clean way is to configure and run a dedicated bootnode:\n\n```shell\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://ethereum.org/en/developers/docs/networking-layer/network-addresses/#enode)\nthat other nodes can use to connect to it and exchange peer information. Make sure to\nreplace the displayed IP address information (most probably `[::]`) with your externally\naccessible IP to get the actual `enode` URL.\n\n*Note: You could also use a full-fledged `geth` node as a bootnode, but it's the less\nrecommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try\n`telnet <ip> <port>` to ensure it's indeed reachable), start every subsequent `geth`\nnode pointed to the bootnode for peer discovery via the `--bootnodes` flag. It will\nprobably also be desirable to keep the data directory of your private network separated, so\ndo also specify a custom `--datadir` flag.\n\n```shell\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll\nalso need to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\n\nIn a private network setting a single CPU miner instance is more than enough for\npractical purposes as it can produce a stable stream of blocks at the correct intervals\nwithout needing heavy resources (consider running on a single thread, no need for multiple\nones either). To start a `geth` instance for mining, run it with all your usual flags, extended\nby:\n\n```shell\n$ geth <usual-flags> --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all\nproceedings to the account specified by `--miner.etherbase`. You can further tune the mining\nby changing the default gas limit blocks converge to (`--miner.targetgaslimit`) and the price\ntransactions are accepted at (`--miner.gasprice`).\n\n## Contribution\n\nThank you for considering helping out with the source code! We welcome contributions\nfrom anyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit\nmore complex changes though, please check up with the core devs first on [our Discord Server](https://discord.gg/invite/nthXNEv)\nto ensure those changes are in line with the general philosophy of the project and/or get\nsome early feedback which can make both your efforts much lighter as well as our review\nand merge procedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting)\n   guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary)\n   guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://geth.ethereum.org/docs/developers/geth-developer/dev-guide)\nfor more details on configuring your environment, managing project dependencies, and\ntesting procedures.\n\n### Contributing to geth.ethereum.org\n\nFor contributions to the [go-ethereum website](https://geth.ethereum.org), please checkout and raise pull requests against the `website` branch.\nFor more detailed instructions please see the `website` branch [README](https://github.com/ethereum/go-ethereum/tree/website#readme) or the \n[contributing](https://geth.ethereum.org/docs/developers/geth-developer/contributing) page of the website.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html),\nalso included in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) are licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also\nincluded in our repository in the `COPYING` file.\n", "release_dates": ["2022-09-08T18:40:15Z"]}, {"name": "go-ethereum-hdwallet", "description": "Ethereum HD Wallet derivations in Go (golang)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<h3 align=\"center\">\n  <br />\n  <img src=\"https://user-images.githubusercontent.com/168240/51436479-a4cf9e80-1c42-11e9-9af3-3bb827b8f2de.png\" alt=\"logo\" width=\"600\" />\n  <br />\n  <br />\n  <br />\n</h3>\n\n# go-ethereum-hdwallet\n\n> Ethereum HD Wallet derivations from [mnemonic] seed in Go (golang). Implements the [go-ethereum](https://github.com/ethereum/go-ethereum) [`accounts.Wallet`](https://github.com/ethereum/go-ethereum/blob/master/accounts/accounts.go) interface.\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/miguelmota/go-ethereum-hdwallet/master/LICENSE)\n[![Build Status](https://travis-ci.org/miguelmota/go-ethereum-hdwallet.svg?branch=master)](https://travis-ci.org/miguelmota/go-ethereum-hdwallet)\n[![Go Report Card](https://goreportcard.com/badge/github.com/miguelmota/go-ethereum-hdwallet?)](https://goreportcard.com/report/github.com/miguelmota/go-ethereum-hdwallet)\n[![GoDoc](https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet?status.svg)](https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](#contributing)\n\n## Install\n\n```bash\ngo get -u github.com/miguelmota/go-ethereum-hdwallet\n```\n\n## Documenation\n\n[https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet](https://godoc.org/github.com/miguelmota/go-ethereum-hdwallet)\n\n## Getting started\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/miguelmota/go-ethereum-hdwallet\"\n)\n\nfunc main() {\n\tmnemonic := \"tag volcano eight thank tide danger coast health above argue embrace heavy\"\n\twallet, err := hdwallet.NewFromMnemonic(mnemonic)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpath := hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/0\")\n\taccount, err := wallet.Derive(path, false)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(account.Address.Hex()) // 0xC49926C4124cEe1cbA0Ea94Ea31a6c12318df947\n\n\tpath = hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/1\")\n\taccount, err = wallet.Derive(path, false)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(account.Address.Hex()) // 0x8230645aC28A4EdD1b0B53E7Cd8019744E9dD559\n}\n```\n\n### Signing transaction\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"math/big\"\n\n\t\"github.com/davecgh/go-spew/spew\"\n\t\"github.com/ethereum/go-ethereum/common\"\n\t\"github.com/ethereum/go-ethereum/core/types\"\n\t\"github.com/miguelmota/go-ethereum-hdwallet\"\n)\n\nfunc main() {\n\tmnemonic := \"tag volcano eight thank tide danger coast health above argue embrace heavy\"\n\twallet, err := hdwallet.NewFromMnemonic(mnemonic)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpath := hdwallet.MustParseDerivationPath(\"m/44'/60'/0'/0/0\")\n\taccount, err := wallet.Derive(path, true)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tnonce := uint64(0)\n\tvalue := big.NewInt(1000000000000000000)\n\ttoAddress := common.HexToAddress(\"0x0\")\n\tgasLimit := uint64(21000)\n\tgasPrice := big.NewInt(21000000000)\n\tvar data []byte\n\n\ttx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)\n\tsignedTx, err := wallet.SignTx(account, tx, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tspew.Dump(signedTx)\n}\n```\n\n## CLI\n\n```bash\ngo get -u github.com/miguelmota/go-ethereum-hdwallet/cmd/geth-hdwallet\n```\n\n```bash\n$ geth-hdwallet -mnemonic \"tag volcano eight thank tide danger coast health above argue embrace heavy\" -path \"m/44'/60'/0'/0/0\"\n\npublic address: 0xC49926C4124cEe1cbA0Ea94Ea31a6c12318df947\nprivate key: 63e21d10fd50155dbba0e7d3f7431a400b84b4c2ac1ee38872f82448fe3ecfb9\n```\n\n## Test\n\n```bash\nmake test\n```\n\n## Contributing\n\nPull requests are welcome!\n\nFor contributions please create a new branch and submit a pull request for review.\n\n## License\n\n[MIT](LICENSE)\n", "release_dates": []}, {"name": "go-solidity-sha3", "description": "Generate Solidity SHA3 (Keccak256) hashes in Go (golang)", "language": "Go", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<h3 align=\"center\">\n  <br />\n  <img src=\"https://user-images.githubusercontent.com/168240/51433394-10dbe380-1bfe-11e9-86c8-d4d57f77fb11.png\" alt=\"logo\" width=\"700\" />\n  <br />\n  <br />\n  <br />\n</h3>\n\n# go-solidity-sha3\n\n> Generate Solidity SHA3 (Keccak256) hashes in Go.\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/miguelmota/go-solidity-sha3/master/LICENSE.md) [![Build Status](https://travis-ci.org/miguelmota/go-solidity-sha3.svg?branch=master)](https://travis-ci.org/miguelmota/go-solidity-sha3) [![Go Report Card](https://goreportcard.com/badge/github.com/miguelmota/go-solidity-sha3?)](https://goreportcard.com/report/github.com/miguelmota/go-solidity-sha3) [![GoDoc](https://godoc.org/github.com/miguelmota/go-solidity-sha3?status.svg)](https://godoc.org/github.com/miguelmota/go-solidity-sha3)\n\nThis package is the Go equivalent of `require('ethers').utils.solidityKeccak256` [NPM module](https://www.npmjs.com/package/ethers).\n\n## Install\n\n```bash\ngo get -u github.com/miguelmota/go-solidity-sha3\n```\n\n## Documentation\n\n[Documentation on GoDoc](https://godoc.org/github.com/miguelmota/go-solidity-sha3)\n\n## Getting started\n\nSimple example:\n\n```go\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\n\t\"github.com/miguelmota/go-solidity-sha3\"\n)\n\nfunc main() {\n\thash := solsha3.SoliditySHA3(\n\t\t// types\n\t\t[]string{\"address\", \"uint256\"},\n\n\t\t// values\n\t\t[]interface{}{\n\t\t\t\"0x935F7770265D0797B621c49A5215849c333Cc3ce\",\n\t\t\t\"100000000000000000\",\n\t\t},\n\t)\n\n\tfmt.Println(hex.EncodeToString(hash))\n}\n```\n\nOutput:\n\n```bash\n0a3844b522d9e3a837ae56d4c57d668feb26325834bf4ba49e153d84ed7ad53d\n```\n\nMore complex example:\n\n```go\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\n\t\"github.com/miguelmota/go-solidity-sha3\"\n)\n\nfunc main() {\n\ttypes := []string{\"address\", \"bytes1\", \"uint8[]\", \"bytes32\", \"uint256\", \"address[]\", \"uint32\"}\n\tvalues := []interface{}{\n\t\t\"0x935F7770265D0797B621c49A5215849c333Cc3ce\",\n\t\t\"0xa\",\n\t\t[]uint8{128, 255},\n\t\t\"100000000000000000\",\n\t\t[]string{\n\t\t\t\"0x13D94859b23AF5F610aEfC2Ae5254D4D7E3F191a\",\n\t\t\t\"0x473029549e9d898142a169d7234c59068EDcBB33\",\n\t\t},\n\t\t123456789,\n\t}\n\n\thash := solsha3.SoliditySHA3(types, values)\n\n\tfmt.Println(hex.EncodeToString(hash))\n}\n```\n\nOutput:\n\n```bash\nad390a98c1c32cdb1f046f6887a4109f12290b690127e6e15da4ca210235510e\n```\n\n## License\n\nMIT\n", "release_dates": ["2020-05-15T05:21:38Z"]}, {"name": "keccak-const", "description": null, "language": "Rust", "license": null, "readme": "# keccak-const\n\n[![Build status](https://github.com/OffchainLabs/keccak-const/workflows/CI/badge.svg)](https://github.com/OffchainLabs/keccak-const/actions)\n[![Crate](https://img.shields.io/crates/v/keccak-const.svg)](https://crates.io/crates/keccak-const)\n[![Documentation](https://docs.rs/keccak-const/badge.svg)](https://docs.rs/keccak-const)\n\n`const fn` implementation of the SHA-3 family of hash and extendable-output functions (inspired by [sha2-const](https://crates.io/crates/sha2-const)). This crate allows you to use use the Sha3 hash functions as constant expressions in rust. For all other usages, the [sha3](https://crates.io/crates/sha3) crate includes more optimized implementations of these hash functions.\n\nBased on the [Keccak specification implementations](https://keccak.team/keccak_specs_summary.html).\n\nA fork of the excellent [sha3-const](https://github.com/andrewmilson/sha3-const) that uses purely stable Rust.\n\n## License\n\n&copy; 2023 Offchain Labs, Inc.\n\nThis project is licensed under either of\n\n- [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([licenses/Apache-2.0](licenses/Apache-2.0))\n- [MIT license](https://opensource.org/licenses/MIT) ([licenses/MIT](licenses/MIT))\n\nat your option.\n\nThe [SPDX](https://spdx.dev) license identifier for this project is `MIT OR Apache-2.0`.\n", "release_dates": []}, {"name": "l1-l3-teleport-contracts", "description": null, "language": "Solidity", "license": null, "readme": "# L1 -> L3 ERC20 Teleportation\n\nContracts enabling direct L1 to L3 ERC20 bridging. Teleportations are ERC20 deposits from L1 through any Arbitrum L2 to any Arbitrum L3 on the L2.\n\n## Summary\n\nThere are 3 steps to an L1 -> L3 teleportation:\n1. Send funds from L1 to a personal `L2Forwarder` whose address depends on its parameters\n2. Create the `L2Forwarder` if it doesn't already exist and start the third step\n3. Send tokens and ETH from the `L2Forwarder` to the recipient on L3\n\nFor more information see [info.md](./docs/info.md)\n\n## Testing and Deploying\n\nTo test: \n```\nforge test\n```\n\nTo deploy:\n```\n./deploy.sh $L1_URL $L2_URL $OTHER_L2_URL ...\n```\n", "release_dates": ["2023-11-16T17:31:25Z"]}, {"name": "l3tx", "description": null, "language": "C++", "license": null, "readme": null, "release_dates": []}, {"name": "methodical-ssz", "description": "Code generation tool for adding Ethereum SimpleSerialiZe support methods to existing go types", "language": "Go", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "methodical-ssz\n--------------\n\nThis tool generates code that uses the [prysm fork](https://github.com/prysmaticlabs/fastssz/) of the [fastssz api](https://github.com/ferranbt/fastssz/) (with bindings for [go-hashtree](https://github.com/prysmaticlabs/gohashtree) coming very soon!), for marshaling, unmarshaling and merkleization of go types.\n\nGenerate ssz methodsets\n-----------------------\n\n The source types are parsed using `go/types`, which locates the source code for a given package path through go's local package discovery utilities, so a current limitation is that you need to fetch the package to your go package tree before using the tool. This can be done with go get:\n```\ngo get github.com/prysmaticlabs/prysm/v3@v3.2.1\n```\n\nOnce this is done, code generation can be run against go types in the desired package:\n```\ngo run ./cmd/ssz gen --output=beacon-state.ssz.go --type-names BeaconState,BeaconStateAltair,BeaconStateBellatrix github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1\nGenerating methods for github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1/BeaconState\nGenerating methods for github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1/BeaconStateAltair\nGenerating methods for github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1/BeaconStateBellatrix\n```\n\nThe generated file can then be placed in a local directory for the source package so that the generated methods become part of the methodset of the source type.\n\nGenerate spectests for a package\n--------------------------------\n\nThis tool has a subcommand to generate go tests from the `ssz_static` tests in the ethereum/consensus-spec-tests repository. The generated tests can be run as normal go tests, which is helpful in identifying specific failure cases and walking through generated code with a debugger.\n\nspectest tarball\n================\n\nTo get the spec test fixtures for codegen, go to the [consensus-spec-test repository releases page](https://github.com/ethereum/consensus-spec-tests/releases) and download the most recent `pre-release` or `latest` spec tests release.\n```\ncurl -L https://github.com/ethereum/consensus-spec-tests/releases/download/v1.3.0-rc.2-hotfix/mainnet.tar.gz > mainnet-v1.3.0-rc.2.tar.gz\n```\n\nyaml config\n===========\n\nThe spectest generation tool needs a mapping between go types and consensus spec container types. This mapping is described as a yaml config file. The mappings for prysm types are committed to the repo in a go `testdata` fixture directory, in `specs/testdata/prysm.yaml`. The following snippet illustrates the format:\n```\npackage: github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1\npreset: mainnet\ndefs:\n  - fork: phase0\n    types:\n      - name: AggregateAndProof\n        type_name: AggregateAttestationAndProof\n      - name: Attestation\n      # ...\n      - name: BeaconBlock\n      # ...\n  - fork: altair\n    types:\n      - name: BeaconBlock\n        type_name: BeaconBlockAltair\n      - name: BeaconBlockBody\n        type_name: BeaconBlockBodyAltair\n```\n`package` is the go package containing the types for code generation. Each yaml holds the description for one go package. `preset` is one of mainnet or minimal. At this time only mainnet is supported as preset customization is specific to an implementation's build tooling. `defs` contains a list of yaml objects, with the `fork` key matching the fork directory in the spectest layout, and the `types` key containing a list of objects connecting the `name` of the type from consensus specs / spectest directory names, to the `type_name` found in the `package`. If `type_name` is not present, `name` is the default, so for go types with the same spelling and capitalization as the consensus type, the `name` field alone is all that's needed to specify the type.\n\nThe config reader processes type mappings in canonical fork order, so if a type's schema has not changed since the previous fork, it does not need to be redeclared. For instance the mapping for `Attestation` is only described once in the `phase0` mapping; the same go type will be used to execute the spectest for the Attestation value for all subsequent forks. `BeaconBlock`, on the other hand, has been redefined at every fork, so tests will use `BeaconBlockAltair` for spectests in the `altair` tree and so on. Any types observed in the tarball that don't have an entry defined in the config yaml will be skipped with a warning.\n\nspectest subcommand\n===================\n\nThe `generated` directory is a good place to stick generated tests as it is already in the .gitignore for the project. Assuming the tarball in the example above has been downloaded to the repo directory, running the following command there will generate spectests for all prysm types described in the test fixture yaml config:\n```\ngo run ./cmd/ssz spectest --release-uri=file://$PWD/mainnet-v1.3.0-rc.2.tar.gz --config=$PWD/specs/testdata/prysm.yaml --output=$PWD/generated\n```\n\nRun the spectest like normal go tests:\n```\ngo test ./generated\nok  \tgithub.com/OffchainLabs/methodical-ssz/generated\t1.003s\n```\n", "release_dates": []}, {"name": "monocypher", "description": null, "language": "C", "license": null, "readme": null, "release_dates": []}, {"name": "multicall", "description": "Multicall: Aggregate multiple constant function call results into one", "language": "Solidity", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# Multicall <img width=\"100\" align=\"right\" alt=\"Multicall\" src=\"https://user-images.githubusercontent.com/304108/55666937-320cb180-5888-11e9-907b-48ba66150523.png\" />\n\nMulticall aggregates results from multiple contract constant function calls.\n\nThis reduces the number of separate JSON RPC requests that need to be sent\n(especially useful if using remote nodes like Infura), while also providing the\nguarantee that all values returned are from the same block (like an atomic read)\nand returning the block number the values are from (giving them important\ncontext so that results from old blocks can be ignored if they're from an\nout-of-date node).\n\nFor use in front-end dapps, this smart contract is intended to be used with\n[Multicall.js](https://github.com/makerdao/multicall.js).\n\n### Contract Addresses\n| Chain   | Address |\n| ------- | ------- |\n| Mainnet | [0xeefba1e63905ef1d7acba5a8513c70307c1ce441](https://etherscan.io/address/0xeefba1e63905ef1d7acba5a8513c70307c1ce441#contracts) |\n| Kovan   | [0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a](https://kovan.etherscan.io/address/0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a#contracts) |\n| Rinkeby | [0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821](https://rinkeby.etherscan.io/address/0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821#contracts) |\n| G\u00f6rli   | [0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e](https://goerli.etherscan.io/address/0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e#contracts) |\n| Ropsten | [0x53c43764255c17bd724f74c4ef150724ac50a3ed](https://ropsten.etherscan.io/address/0x53c43764255c17bd724f74c4ef150724ac50a3ed#code) |\n| xDai    | [0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a](https://blockscout.com/poa/dai/address/0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a) |\n", "release_dates": []}, {"name": "navigator", "description": null, "language": "HTML", "license": null, "readme": null, "release_dates": []}, {"name": "nft-bridge-workshop-demo", "description": null, "language": "TypeScript", "license": null, "readme": "## Ethereum / Arbitrum NFT Bridge Workshop!\n\n> DISCLAIMER: For workshop / demo / testnet purposes only; has not been audited, don't use this on mainnet, etc. \n\nToday we'll be building an ERC-721 bridge!\n\n\n#### Arbitrum\nArbitrum is a layer 2 Optimistic Rollup chain that runs on top of Ethereum. It suppots arbitrary asynchronous contract calls:\n\nL1 to L2:\n\n``` sol\n    function createRetryableTicket(\n        address to,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 gasLimit,\n        uint256 maxFeePerGas,\n        bytes calldata data\n    ) external payable returns (uint256);\n```\n\n\nL2 To L1:\n``` solidity\n\n\ninterface ArbSys {\n\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n}\n\n```\n\nWe will use these arbitrary cross-chain message affordances to build our bridge; we'll be using Goerli / Arbitrum Goerli Rollup Testnet.\n\n\n### Minimum Viable NFT Bridge\n\nThe NFT bridge will have similar architecture to Arbitrum [\"Custom ERC20 Bridge.\"](\nhttps://developer.arbitrum.io/asset-bridging#the-arbitrum-generic-custom-gateway)\n\n2 \"Gateway\" contracts \u2013 one at L1 and one at L2 \u2014 are responsible for mapping L1 ERC721s to their L2 ERC721s counterparts, and for enabling deposits and withdrawals.\n\n\n#### Flow\n1. ERC721 is deployted on L1 with affordance to register its L2 token address to L1 gateway.\n1. ERC721 is deployed on L2 with affordance for L2 gateway to mint/burn.\n1. **X chain message**: L1 ERC721 registers its L2 address on L1 and L2 via retryable ticket.\n1. **X chain message** Deposit to L2 via retryable ticket (escrow token in L1 gateway and mint L2 token at L2).\n1. **X chain message** Withdraw via ArbSys/Outbox (burn token at L2 and transfer from escrow at L1.)\n\n\n### Setup / Commands\n1. `git clone` this repo\n1. `yarn install`\n1. Add env variables (i.e., to a .env file):\n\n    ```\n    TESTNET_PRIVKEY=xyzxyz\n    GOERLI_RPC=https://goerli.infura.io/v3/infura_key\n    ```\n1. Complete function bodies in contracts (i.e., do all the `\"// DO!\"` things)\n1. Deploy contracts:\n    ```bash\n    yarn hardhat deploy-all\n    ```bash\n1. Test out a register / deposit:\n    ```\n    yarn hardhat register-and-deposit\n    ```\n\n", "release_dates": []}, {"name": "nitro", "description": "Nitro goes vroom and fixes everything", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/arbitrum/logo_color.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n  </a>\n\n  <h3 align=\"center\">Arbitrum Nitro</h3>\n\n  <p align=\"center\">\n    <a href=\"https://developer.arbitrum.io/\"><strong>Next Generation Ethereum L2 Technology \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## About Arbitrum Nitro\n\n<img src=\"https://arbitrum.io/assets/arbitrum/logo_color.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n\nNitro is the latest iteration of the Arbitrum technology. It is a fully integrated, complete\nlayer 2 optimistic rollup system, including fraud proofs, the sequencer, the token bridges, \nadvanced calldata compression, and more.\n\nSee the live docs-site [here](https://developer.arbitrum.io/) (or [here](https://github.com/OffchainLabs/arbitrum-docs) for markdown docs source.)\n\nSee [here](./audits) for security audit reports.\n\nThe Nitro stack is built on several innovations. At its core is a new prover, which can do Arbitrum\u2019s classic \ninteractive fraud proofs over WASM code. That means the L2 Arbitrum engine can be written and compiled using \nstandard languages and tools, replacing the custom-designed language and compiler used in previous Arbitrum\nversions. In normal execution, \nvalidators and nodes run the Nitro engine compiled to native code, switching to WASM if a fraud proof is needed. \nWe compile the core of Geth, the EVM engine that practically defines the Ethereum standard, right into Arbitrum. \nSo the previous custom-built EVM emulator is replaced by Geth, the most popular and well-supported Ethereum client.\n\nThe last piece of the stack is a slimmed-down version of our ArbOS component, rewritten in Go, which provides the \nrest of what\u2019s needed to run an L2 chain: things like cross-chain communication, and a new and improved batching \nand compression system to minimize L1 costs.\n\nEssentially, Nitro runs Geth at layer 2 on top of Ethereum, and can prove fraud over the core engine of Geth \ncompiled to WASM.\n\nArbitrum One successfully migrated from the Classic Arbitrum stack onto Nitro on 8/31/22. (See [state migration](https://developer.arbitrum.io/migration/state-migration) and [dapp migration](https://developer.arbitrum.io/migration/dapp_migration) for more info).\n\n## License\n\nNitro is currently licensed under a [Business Source License](./LICENSE), similar to our friends at Uniswap and Aave, with an \"Additional Use Grant\" to ensure that everyone can have full comfort using and running nodes on all public Arbitrum chains.\n\nThe Additional Use Grant also permits the deployment of the Nitro software, in a permissionless fashion and without cost, as a new blockchain provided that the chain settles to either Arbitrum One or Arbitrum Nova. \n\nFor those that prefer to deploy the Nitro software either directly on Ethereum (i.e. an L2) or have it settle to another Layer-2 on top of Ethereum, the [Arbitrum Expansion Program (the \"AEP\")](https://docs.arbitrum.foundation/assets/files/Arbitrum%20Expansion%20Program%20Jan182024-4f08b0c2cb476a55dc153380fa3e64b0.pdf) was recently established. The AEP allows for the permissionless deployment in the aforementioned fashion provided that 10% of net revenue (as more fully described in the AEP) is contributed back to the Arbitrum community in accordance with the requirements of the AEP. \n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n\n\n", "release_dates": ["2024-03-02T00:58:24Z", "2024-03-01T23:18:00Z", "2024-03-01T21:10:03Z", "2024-02-22T02:42:46Z", "2024-02-16T20:20:01Z", "2024-02-16T18:19:12Z", "2024-02-12T20:24:21Z", "2024-02-07T06:05:54Z", "2024-02-04T05:07:24Z", "2024-01-26T20:02:42Z", "2024-01-23T01:42:31Z", "2023-12-27T20:20:04Z", "2023-12-24T19:44:07Z", "2023-12-24T18:54:00Z", "2023-12-23T22:54:57Z", "2023-12-23T04:48:17Z", "2023-12-19T00:47:54Z", "2023-12-18T17:46:15Z", "2023-12-16T19:26:35Z", "2023-12-16T06:37:53Z", "2023-12-13T00:16:28Z", "2023-12-10T22:20:14Z", "2023-12-10T21:54:25Z", "2023-11-29T21:52:13Z", "2023-11-21T17:40:01Z", "2023-11-16T21:32:46Z", "2023-11-16T00:44:34Z", "2023-11-15T17:53:14Z", "2023-11-03T20:02:24Z", "2023-11-02T16:43:46Z"]}, {"name": "nitro-1", "description": "Nitro goes vroom and fixes everything", "language": null, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/wp-content/uploads/2021/08/Arbitrum_Symbol-Full-color-White-background-768x840.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n  </a>\n\n  <h3 align=\"center\">Arbitrum Nitro</h3>\n\n  <p align=\"center\">\n    <a href=\"https://developer.arbitrum.io/\"><strong>Next Generation Ethereum L2 Technology \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## About Arbitrum Nitro\n\n<img src=\"https://arbitrum.io/wp-content/uploads/2021/08/Arbitrum_Symbol-Full-color-White-background-768x840.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n\nNitro is the latest iteration of the Arbitrum technology. It is a fully integrated, complete\nlayer 2 optimistic rollup system, including fraud proofs, the sequencer, the token bridges, \nadvanced calldata compression, and more.\n\nSee the live docs-site [here](https://developer.arbitrum.io/) (or [here](https://github.com/OffchainLabs/arbitrum-docs) for markdown docs source.)\n\nThe Nitro stack is built on several innovations. At its core is a new prover, which can do Arbitrum\u2019s classic \ninteractive fraud proofs over WASM code. That means the L2 Arbitrum engine can be written and compiled using \nstandard languages and tools, replacing the custom-designed language and compiler used in previous Arbitrum\nversions. In normal execution, \nvalidators and nodes run the Nitro engine compiled to native code, switching to WASM if a fraud proof is needed. \nWe compile the core of Geth, the EVM engine that practically defines the Ethereum standard, right into Arbitrum. \nSo the previous custom-built EVM emulator is replaced by Geth, the most popular and well-supported Ethereum client.\n\nThe last piece of the stack is a slimmed-down version of our ArbOS component, rewritten in Go, which provides the \nrest of what\u2019s needed to run an L2 chain: things like cross-chain communication, and a new and improved batching \nand compression system to minimize L1 costs.\n\nEssentially, Nitro runs Geth at layer 2 on top of Ethereum, and can prove fraud over the core engine of Geth \ncompiled to WASM.\n\nArbitrum One successfully migrated from the Classic Arbitrum stack onto Nitro on 8/31/22. (See [state migration](https://developer.arbitrum.io/migration/state-migration) and [dapp migration](https://developer.arbitrum.io/migration/dapp_migration) for more info).\n\n## License\n\nWe currently have Nitro [licensed](./LICENSE) under a Business Source License, similar to our friends at Uniswap and Aave, with an \"Additional Use Grant\" to ensure that everyone can have full comfort using and running nodes on all public Arbitrum chains.\n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n\n\n", "release_dates": []}, {"name": "nitro-contracts", "description": "The core Arbitrum Nitro contracts deployed to the base chain to host the rollup", "language": "Solidity", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Arbitrum Nitro Rollup Contracts\n\nThis is the package with the smart contract code that powers Arbitrum Nitro.\nIt includes the rollup and fraud proof smart contracts, as well as interfaces for interacting with precompiles.\n\nFor more information see https://developer.arbitrum.io/intro\n\nFor the deployed addresses of these contracts for Arbitrum chains see https://developer.arbitrum.io/useful-addresses\n\nFor the token bridge contracts see https://github.com/OffchainLabs/token-bridge-contracts\n\nCompile these contracts locally by running\n\n```bash\ngit clone https://github.com/offchainlabs/nitro-contracts\ncd nitro-contracts\nyarn install\nyarn build\n```\n\n## License\n\nNitro is currently licensed under a [Business Source License](./LICENSE), similar to our friends at Uniswap and Aave, with an \"Additional Use Grant\" to ensure that everyone can have full comfort using and running nodes on all public Arbitrum chains.\n\nThe Additional Use Grant also permits the deployment of the Nitro software, in a permissionless fashion and without cost, as a new blockchain provided that the chain settles to either Arbitrum One or Arbitrum Nova.\n\nFor those that prefer to deploy the Nitro software either directly on Ethereum (i.e. an L2) or have it settle to another Layer-2 on top of Ethereum, the [Arbitrum Expansion Program (the \"AEP\")](https://docs.arbitrum.foundation/assets/files/Arbitrum%20Expansion%20Program%20Jan182024-4f08b0c2cb476a55dc153380fa3e64b0.pdf) was recently established. The AEP allows for the permissionless deployment in the aforementioned fashion provided that 10% of net revenue is contributed back to the Arbitrum community in accordance with the requirements of the AEP.\n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n", "release_dates": ["2024-02-15T12:57:33Z", "2024-02-15T11:33:05Z", "2024-02-05T13:55:16Z", "2023-10-26T16:41:58Z", "2023-10-24T15:47:59Z", "2023-10-17T14:07:46Z", "2023-10-11T15:36:12Z", "2023-09-11T16:14:23Z", "2023-08-01T23:16:09Z", "2023-09-11T16:57:05Z", "2023-07-11T15:02:40Z", "2023-05-10T16:04:09Z"]}, {"name": "nitro-testnode", "description": "A complete environment for nitro-based service including sequencer, batch-poster, validator, and a coordinator.", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Nitro Testnode\n\nNitro-testnode brings up a full environment for local nitro testing (with or without Stylus support) including a dev-mode geth L1, and multiple instances with different roles.\n\n### Requirements\n\n* bash shell\n* docker and docker-compose\n\nAll must be installed in PATH.\n\n## Using latest nitro release (recommended)\n\n### Without Stylus support\n\nCheck out the release branch of the repository.\n\n> Notice: release branch may be force-pushed at any time.\n\n```bash\ngit clone -b release --recurse-submodules https://github.com/OffchainLabs/nitro-testnode.git\ncd nitro-testnode\n```\n\nInitialize the node\n\n```bash\n./test-node.bash --init\n```\nTo see more options, use `--help`.\n\n### With Stylus support\n\nCheck out the stylus branch of the repository.\n> Notice: stylus branch may be force-pushed at any time.\n\n```bash\ngit clone -b stylus --recurse-submodules https://github.com/OffchainLabs/nitro-testnode.git\ncd nitro-testnode\n```\n\nInitialize the node\n\n```bash\n./test-node.bash --init\n```\nTo see more options, use `--help`.\n\n## Using current nitro code (local compilation)\n\nCheck out the nitro or stylus repository. Use the test-node submodule of nitro repository.\n\n> Notice: testnode may not always be up-to-date with config options of current nitro node, and is not considered stable when operated in that way.\n\n### Without Stylus support\n```bash\ngit clone --recurse-submodules https://github.com/OffchainLabs/nitro.git\ncd nitro/nitro-testnode\n```\n\nInitialize the node in dev-mode (this will build the docker images from source)\n```bash\n./test-node.bash --init --dev\n```\nTo see more options, use `--help`.\n\n### With Stylus support\n```bash\ngit clone --recurse-submodules https://github.com/OffchainLabs/stylus.git\ncd stylus/nitro-testnode\n```\n\nInitialize the node in dev-mode (this will build the docker images from source)\n```bash\n./test-node.bash --init --dev\n```\nTo see more options, use `--help`.\n\n## Further information\n\n### Working with docker containers\n\n**sequencer** is the main docker to be used to access the nitro testchain. It's http and websocket interfaces are exposed at localhost ports 8547 and 8548 ports, respectively.\n\nStopping, restarting nodes can be done with docker-compose.\n\n### Helper scripts\n\nSome helper scripts are provided for simple testing of basic actions.\n\nTo fund the address 0x1111222233334444555566667777888899990000 on l2, use:\n\n```bash\n./test-node.bash script send-l2 --to address_0x1111222233334444555566667777888899990000\n```\n\nFor help and further scripts, see:\n\n```bash\n./test-node.bash script --help\n```\n\n## Named accounts\n\n```bash\n./test-node.bash script print-address --account sequencer\n```\n```\nsequencer:                  0xe2148eE53c0755215Df69b2616E552154EdC584f\nvalidator:                  0x6A568afe0f82d34759347bb36F14A6bB171d2CBe\nl2owner:                    0x5E1497dD1f08C87b2d8FE23e9AAB6c1De833D927\nl3owner:                    0x863c904166E801527125D8672442D736194A3362\nl3sequencer:                0x3E6134aAD4C4d422FF2A4391Dc315c4DDf98D1a5\nuser_l1user:                0x058E6C774025ade66153C65672219191c72c7095\nuser_token_bridge_deployer: 0x3EaCb30f025630857aDffac9B2366F953eFE4F98\nuser_fee_token_deployer:    0x2AC5278D230f88B481bBE4A94751d7188ef48Ca2\n```\n\nWhile not a named account, 0x3f1eae7d46d88f08fc2f8ed27fcb2ab183eb2d0e is funded on all test chains.\n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n\n\n", "release_dates": []}, {"name": "notion-docs-generator", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# notion-docs-generator\n\nThis library can be used to generate docusaurus style markdown documents from a notion database", "release_dates": []}, {"name": "openzeppelin-contracts", "description": "OpenZeppelin Contracts is a library for secure smart contract development.", "language": "JavaScript", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "# <img src=\"logo.svg\" alt=\"OpenZeppelin\" height=\"40px\">\n\n[![Docs](https://img.shields.io/badge/docs-%F0%9F%93%84-blue)](https://docs.openzeppelin.com/contracts)\n[![NPM Package](https://img.shields.io/npm/v/@openzeppelin/contracts.svg)](https://www.npmjs.org/package/@openzeppelin/contracts)\n[![Coverage Status](https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts/graph/badge.svg)](https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts)\n\n**A library for secure smart contract development.** Build on a solid foundation of community-vetted code.\n\n * Implementations of standards like [ERC20](https://docs.openzeppelin.com/contracts/erc20) and [ERC721](https://docs.openzeppelin.com/contracts/erc721).\n * Flexible [role-based permissioning](https://docs.openzeppelin.com/contracts/access-control) scheme.\n * Reusable [Solidity components](https://docs.openzeppelin.com/contracts/utilities) to build custom contracts and complex decentralized systems.\n * First-class integration with the [Gas Station Network](https://docs.openzeppelin.com/contracts/gsn) for systems with no gas fees!\n * [Audited](https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/audit) by leading security firms (_last full audit on v2.0.0_).\n\n## Overview\n\n### Installation\n\n```console\n$ npm install @openzeppelin/contracts\n```\n\nOpenZeppelin Contracts features a [stable API](https://docs.openzeppelin.com/contracts/releases-stability#api-stability), which means your contracts won't break unexpectedly when upgrading to a newer minor version.\n\n### Usage\n\nOnce installed, you can use the contracts in the library by importing them:\n\n```solidity\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MyCollectible is ERC721 {\n    constructor() ERC721(\"MyCollectible\", \"MCO\") public {\n    }\n}\n```\n\n_If you're new to smart contract development, head to [Developing Smart Contracts](https://docs.openzeppelin.com/learn/developing-smart-contracts) to learn about creating a new project and compiling your contracts._\n\nTo keep your system secure, you should **always** use the installed code as-is, and neither copy-paste it from online sources, nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.\n\n## Learn More\n\nThe guides in the [docs site](https://docs.openzeppelin.com/contracts) will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:\n\n* [Access Control](https://docs.openzeppelin.com/contracts/access-control): decide who can perform each of the actions on your system.\n* [Tokens](https://docs.openzeppelin.com/contracts/tokens): create tradeable assets or collectives, and distribute them via [Crowdsales](https://docs.openzeppelin.com/contracts/crowdsales).\n* [Gas Station Network](https://docs.openzeppelin.com/contracts/gsn): let your users interact with your contracts without having to pay for gas themselves.\n* [Utilities](https://docs.openzeppelin.com/contracts/utilities): generic useful tools, including non-overflowing math, signature verification, and trustless paying systems.\n\nThe [full API](https://docs.openzeppelin.com/contracts/api/token/ERC20) is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts's development in the [community forum](https://forum.openzeppelin.com).\n\nFinally, you may want to take a look at the [guides on our blog](https://blog.openzeppelin.com/guides), which cover several common use cases and good practices.. The following articles provide great background reading, though please note, some of the referenced tools have changed as the tooling in the ecosystem continues to rapidly evolve.\n\n* [The Hitchhiker\u2019s Guide to Smart Contracts in Ethereum](https://blog.openzeppelin.com/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05) will help you get an overview of the various tools available for smart contract development, and help you set up your environment.\n* [A Gentle Introduction to Ethereum Programming, Part 1](https://blog.openzeppelin.com/a-gentle-introduction-to-ethereum-programming-part-1-783cc7796094) provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.\n* For a more in-depth dive, you may read the guide [Designing the Architecture for Your Ethereum Application](https://blog.openzeppelin.com/designing-the-architecture-for-your-ethereum-application-9cec086f8317), which discusses how to better structure your application and its relationship to the real world.\n\n## Security\n\nThis project is maintained by [OpenZeppelin](https://openzeppelin.com), and developed following our high standards for code quality and security. OpenZeppelin is meant to provide tested and community-audited code, but please use common sense when doing anything that deals with real money! We take no responsibility for your implementation decisions and any security problems you might experience.\n\nThe core development principles and strategies that OpenZeppelin is based on include: security in depth, simple and modular code, clarity-driven naming conventions, comprehensive unit testing, pre-and-post-condition sanity checks, code consistency, and regular audits.\n\nThe latest audit was done on October 2018 on version 2.0.0.\n\nPlease report any security issues you find to security@openzeppelin.org.\n\n## Contribute\n\nOpenZeppelin exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the [contribution guide](CONTRIBUTING.md)!\n\n## License\n\nOpenZeppelin is released under the [MIT License](LICENSE).\n", "release_dates": []}, {"name": "orbit-monitoring-tools", "description": null, "language": "TypeScript", "license": null, "readme": "# Orbit monitoring tools\n\nTools to help monitor Orbit chains\n\nAvailable tools:\n- Find new rollups\n- Find pending retryables\n\n## Find new rollups\n\nUsage\n\n```shell\nyarn findRollups\n```\n\nAvailable options:\n- showInactive (true/false, default false): Also shows inactive rollups\n- fromBlockEth, fromBlockArbOne, fromBlockArbNova (default 0): Specifies from which block to search for new rollups\n\nExample:\n\n```shell\nyarn findRollups --showInactive=true --fromBlockEth=18913723\n```\n\n## Find pending retryables\n\nUsage\n\n```shell\nyarn findPendingRetryables\n```\n\nAvailable options:\n- fromBlock, toBlock: Range of blocks in the parent chain to search SubmitRetryable events\n- showOnlyPending: If true, it will only show the pending retraybles and not the successfully redeemed one (default false)\n\n\n```shell\nyarn findPendingRetryables --fromBlock=166757506\n```\n", "release_dates": []}, {"name": "Orbit-retryable-tracker", "description": "A tool for identifying and reporting the status of retryable transactions from a parent chain (like Arbitrum) to the Orbit chain.", "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Orbit-retryables-tracker\n\nThis tool is designed to assist in identifying and displaying the status of retryable tickets sent from a parent chain (any of the Arbitrum chains) to the Orbit chain. Read more about retryable tickets [here](https://docs.arbitrum.io/arbos/l1-to-l2-messaging).\n\n## Prerequisites\n\nBefore using this tool, make sure you have the following installed:\n\n- [Node.js](https://nodejs.org/en)\n- [Yarn](https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable)\n\nAdditionally, ensure that you have added your L3 network configuration to the `config.json` file in the `lib` directory; the `xai` mainnet network is included as an example.\n\n## Installation\n\nFrom the root directory of the project, run the following command to install dependencies:\n\n```bash\nyarn install\n```\n\n## Execution\n\n### One-off Check\n\nTo find retryable tickets and display their status for a specific block range, execute the following command:\n\n```bash\nyarn findRetryables --fromBlock=<FROM_BLOCK> --toBlock=<TO_BLOCK> [--configPath=<CONFIG_PATH>]\n```\n\n- Replace <FROM_BLOCK>, <TO_BLOCK>, and <CONFIG_PATH> with the desired block numbers and the path to your configuration file.\n- If `--configPath` is not provided, it defaults to `config.json`.\n- This command will identify all retryable tickets initiated or created from the parent chain to your Orbit chain within the specified block range.\n\n### Continuous Update\n\nTo continuously monitor and update the status of retryable tickets for multiple Orbit chains concurrently, execute the following command:\n\n```bash\nyarn findRetryables --continuous [--configPath=<CONFIG_PATH>]\n```\n\n- - Replace <CONFIG_PATH> with the path to your configuration file.\n- If `--configPath` is not provided, it defaults to `config.json`.\n- This command will initiate continuous monitoring, dynamically determining the block range based on the latest block on the parent chain. The tool will automatically fetch and display the status of retryable tickets for all configured Orbit chains within the `config.json` file at regular intervals.\n", "release_dates": []}, {"name": "orbit-setup-script", "description": null, "language": "TypeScript", "license": null, "readme": "# orbit-setup-script\n\nThese scripts will help you fund newly generated batch-poster and validator addresses, configure an Orbit chain, and deploy bridge contracts on both L2 and L3 chains.\n\n## Instructions\n\nOnce you\u2019ve downloaded both config files from the [Orbit Deployment UI](https://orbit.arbitrum.io/), please follow the steps below to complete local deployment of your Orbit chain. For more details and step-by-step instructions, check out the [documentation](https://developer.arbitrum.io/launch-orbit-chain/orbit-quickstart).\n\n1. Clone the\u00a0https://github.com/OffchainLabs/orbit-setup-script repository, and run\u00a0`yarn install`. Then, move\u00a0both the `nodeConfig.json`\u00a0and `orbitSetupScriptConfig.json` files into the\u00a0`config`\u00a0directory within the cloned repository\n2. Launch Docker, and in the base directory, run\u00a0`docker-compose up -d`. This will launch the node with a public RPC reachable at\u00a0http://localhost:8449/\u00a0 and a corresponding BlockScout explorer instance, viewable at\u00a0http://localhost/\n3. Then, add the private key for the wallet you used to deploy the rollup contracts earlier in the following command, and run it:\u00a0`PRIVATE_KEY=\"0xYourPrivateKey\" L2_RPC_URL=\"<https://sepolia-rollup.arbitrum.io/rpc>\" L3_RPC_URL=\"http://localhost:8449\" yarn run setup`\n4. The Orbit chain is now up. You can find all information about the newly deployed chain in the `outputInfo.json` file which is created in the main directory of script folder\n5. Optionally, to track logs, run the following command within the base directory:\u00a0`docker-compose logs -f nitro`\n", "release_dates": []}, {"name": "RescuETH", "description": null, "language": "TypeScript", "license": null, "readme": "## RescuETH\n\nTo be used by the deployer of a contract at address A on chain X, to rescue the ETH of a user who accidentally sent ETH to address A on some other chain Y.\n\nChecks that ETH is still recoverable (i.e., nonce for deployer address is still available) and recovers Eth by deploying a RecoverBags contract if so.\n\n### Set up\n\nSee hardhat config; ensure relevant network RPC urls / pks are configed (i.e., see .env.sample).\n\n### Run\n\n`yarn hardhat recover --targetaddress <0x-targetAddress> --recoveryaddress <0x-recovery-adddress> --network <network-name>`\n\n**targetaddress**: address from which to recover ETH\n**recoveryaddress**: address to which recovered eth will be sent\n((noncestotry)) (optional): of nonces to try (defaults to 50\")\n.addOptionalParam(\"\", \"# of nonces to try (defaults to 50\")\n", "release_dates": []}, {"name": "retryable-tx-panel", "description": null, "language": "TypeScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# Arbitrum Retryable Dashboard\n\n## Run Locally\n\n1. Clone\n\n   ```bash\n   $ git clone https://github.com/OffchainLabs/retryable-tx-panel\n   ```\n\n2. Set env vars:\n\n   ```bash\n   $ cp .env.sample .env\n   ```\n\n3. In `.env`, add your infura key to `NEXT_PUBLIC_INFURA_KEY`\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n```bash\n$ yarn dev\n```\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n## Run End-to-End (E2E) Tests\n\n1. Set up the Nitro node\n\n   1. Download and install [Docker](https://www.docker.com/)\n\n   2. Check out the [Nitro repo](https://github.com/OffchainLabs/nitro)\n\n   3. Run in nitro repo: (only the first time)\n\n      ```bash\n      $ git submodule update --init --recursive\n      ```\n\n   4. Run: (Make sure your Docker App is running)\n\n      ```bash\n      $ ./test-node.bash --init\n      ```\n\n   5. When the Nitro node is up and running you should see logs like `sequencer_1` and `staker-unsafe_1` in the terminal. This can take up to 10 minutes\n\n2. Setup env files:\n\n   1. Run:\n\n      ```bash\n      $ cp .e2e.env.sample .e2e.env\n      ```\n\n   2. In the newly created file, `.e2e.env`, update your `NEXT_PUBLIC_INFURA_KEY`\n\n3. Run the retryables-panel locally on [http://localhost:3000](http://localhost:3000) with:\n\n   ```bash\n   $ yarn dev\n   ```\n\n4. Run e2e tests\n\n   ```bash\n   $ yarn e2e:run\n   ```\n", "release_dates": []}, {"name": "retryables_tracker", "description": null, "language": "TypeScript", "license": null, "readme": "# Retryables Tracker\n\n### Set up\n\n1. Install psql and create db\n1. `yarn install`\n1. Set env variables (see .env.sample)\n1. Init / seed db:\n   - See `db/initChains.ts`; add or remove chains as needed\n   - `yarn init_db`\n\n## Processes\n\n1. **Sync**: continuously sync target chain ID to tip, saving failed/redeemable retryables in db: e.g.\n\n   - `yarn sync --chainid 42161`\n   - run `yarn sync --help` to view all optional / default params\n\n2. **Update**: check if redeemable retryables are stored in db, and check/update their status if so, e.g.\n\n   - `yarn update --chainid 42161`\n   - run `yarn update --help` to view all optional / default params\n\n3. **Report** Periodically report unredeemed retryables to slack for target chain ids, e.g.,\n\n   - yarn report --chainids 42161 42170\n     - run `yarn report --help` to view all optional / default params\n\n4. **Server** Start server for `/unredeemed/mainnet` endpoint (PORT specified in ENV Var).\n   - `yarn start_server`\n\n### Exclude Target Retryable From Reporting\n\nIf a retryable ticket is, e.g., diagnosed as expected to fail and shouldn't be reported, you can flag it as such, and `report` will ignore it.\n\n- `yarn set_dont_report --help` for details\n\n### run with docker\n\nTo run this docker, we should run a postgresql database docker first:\n\n```\ndocker run --name postgresql -e POSTGRES_USER=SuperCoder -e POSTGRES_PASSWORD=mypassword -p 5432:5432 -v /data:/var/lib/postgresql/data -d postgres\n```\n\nThen we can build the docker image:\n\n```\ndocker build -t retryables-v2 .\n```\n\nWhen finish building, we shoud run set our env file(noted: change the env according to your db):\n\n```\nmv .env.sample env_docker\n```\n\nThen start init db:\n\n```\ndocker run --name=init_db --network host --env-file=./env_docker -d retryables-v2 --action init_db\n```\n\ncheck db init:\n\n```\ndocker logs init_db\n```\n\nonce we see `Done in xx s`, then we can keep on starting others containers\n\n```\ndocker run --name=retryable-v2-sync-networkId --network host --env-file=./env_docker -d retryables-v2 --action sync --chainid 42161\n```\n\nand so others process.\n", "release_dates": []}, {"name": "safe-contracts", "description": "Gnosis Safe allows secure management of blockchain assets. ", "language": null, "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "Gnosis Safe Contracts\n=====================\n\n[![npm version](https://badge.fury.io/js/%40gnosis.pm%2Fsafe-contracts.svg)](https://badge.fury.io/js/%40gnosis.pm%2Fsafe-contracts)\n[![Build Status](https://github.com/gnosis/safe-contracts/workflows/safe-contracts/badge.svg?branch=development)](https://github.com/gnosis/safe-contracts/actions)\n[![Coverage Status](https://coveralls.io/repos/github/gnosis/safe-contracts/badge.svg?branch=development)](https://coveralls.io/github/gnosis/safe-contracts)\n\n> :warning: **This branch contains changes that are under development** To use the latest audited version make sure to use the correct commit. The tagged versions that are used by the Gnosis Safe team can be found in the [releases](https://github.com/gnosis/safe-contracts/releases).\n\nUsage\n-----\n### Install requirements with yarn:\n\n```bash\nyarn\n```\n\n### Run all tests:\n\n```bash\nyarn build\nyarn test\n```\n\n### Deployments\n\nA collection of the different Safe contract deployments and their addresses can be found in the [Safe deployments](https://github.com/gnosis/safe-deployments) repository.\n\nTo add support for a new network follow the steps of the ``Deploy`` section and create a PR in the [Safe deployments](https://github.com/gnosis/safe-deployments) repository. \n\n### Deploy\n\n> :warning: **Make sure to use the correct commit when deploying the contracts.** Any change (even comments) within the contract files will result in different addresses. The tagged versions that are used by the Gnosis Safe team can be found in the [releases](https://github.com/gnosis/safe-contracts/releases).\n\n> **Current version:** The latest release is [v1.3.0-libs.0](https://github.com/gnosis/safe-contracts/tree/v1.3.0-libs.0) on the commit [767ef36](https://github.com/gnosis/safe-contracts/commit/767ef36bba88bdbc0c9fe3708a4290cabef4c376)\n\nThis will deploy the contracts deterministically and verify the contracts on etherscan using [Solidity 0.7.6](https://github.com/ethereum/solidity/releases/tag/v0.7.6) by default.\n\nPreparation:\n- Set `MNEMONIC` in `.env`\n- Set `INFURA_KEY` in `.env`\n\n```bash\nyarn deploy-all <network>\n```\n\nThis will perform the following steps\n\n```bash\nyarn build\nyarn hardhat --network <network> deploy\nyarn hardhat --network <network> sourcify\nyarn hardhat --network <network> etherscan-verify\nyarn hardhat --network <network> local-verify\n```\n\n#### Custom Networks\n\nIt is possible to use the `NODE_URL` env var to connect to any EVM based network via an RPC endpoint. This connection then can be used with the `custom` network.\n\nE.g. to deploy the Safe contract suite on that network you would run `yarn deploy-all custom`. \n\nThe resulting addresses should be on all networks the same.\n\nNote: Address will vary if contract code is changed or a different Solidity version is used.\n\n#### Replay protection (EIP-155)\n\nSome networks require replay protection. This is not possible with the default deployment process as it relies on a presigned transaction without replay protection (see https://github.com/Arachnid/deterministic-deployment-proxy). \n\nIt is possible to enable deployment via a different determinisitic deployment proxy (https://github.com/gnosis/safe-singleton-factory). To enable this the `CUSTOM_DETERMINISTIC_DEPLOYMENT` env var has to be set to `true` (see `.env.sample`). To make sure that the latest version of this package is install, make sure to run `yarn add @gnosis.pm/safe-singleton-factory` before deployment.\n\nNote: This will result in different addresses compared to the default deployment process.\n\n### Verify contract\n\nThis command will use the deployment artifacts to compile the contracts and compare them to the onchain code\n```bash\nyarn hardhat --network <network> local-verify\n```\n\nThis command will upload the contract source to Etherescan\n```bash\nyarn hardhat --network <network> etherscan-verify\n```\n\nDocumentation\n-------------\n- [Safe developer portal](http://docs.gnosis.io/safe)\n- [Error codes](docs/error_codes.md)\n- [Coding guidelines](docs/guidelines.md)\n\nAudits/ Formal Verification\n---------\n- [for Version 1.3.0 by G0 Group](docs/audit_1_3_0.md)\n- [for Version 1.2.0 by G0 Group](docs/audit_1_2_0.md)\n- [for Version 1.1.1 by G0 Group](docs/audit_1_1_1.md)\n- [for Version 1.0.0 by Runtime Verification](docs/rv_1_0_0.md)\n- [for Version 0.0.1 by Alexey Akhunov](docs/alexey_audit.md)\n\nSecurity and Liability\n----------------------\nAll contracts are WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nLicense\n-------\nAll smart contracts are released under LGPL-3.0\n", "release_dates": []}, {"name": "sneks", "description": null, "language": "Rust", "license": null, "readme": "## Overview\n\nThis crate provides simple proc macros for naming enum variants.\n\n```rs\n#[derive(SimpleSnakeNames)]\nenum Animal {\n    HoneyBee,\n    GreatWhiteShark(usize),\n    PoisonDartFrog { spotted: bool },\n}\n\n// expands to\nimpl Animal {\n    fn name(&self) -> &'static str {\n        match self {\n            HoneyBee => \"honey_bee\",\n            GreatWhiteShark(..) => \"great_white_shark\",\n            PoisonDartFrog { .. } => \"poison_dart_frog\",\n        }\n    }\n}\n```\n\n## License\n\n&copy; 2022-2023 Offchain Labs, Inc.\n\nThis project is licensed under either of\n\n- [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([licenses/Apache-2.0](licenses/Apache-2.0))\n- [MIT license](https://opensource.org/licenses/MIT) ([licenses/MIT](licenses/MIT))\n\nat your option.\n\nThe [SPDX](https://spdx.dev) license identifier for this project is `MIT OR Apache-2.0`.\n", "release_dates": []}, {"name": "SoftFloat", "description": "SoftFloat-3e with WASM build support", "language": "C", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "\nPackage Overview for Berkeley SoftFloat Release 3e\n==================================================\n\nJohn R. Hauser<br>\n2018 January 20\n\n\nBerkeley SoftFloat is a software implementation of binary floating-point\nthat conforms to the IEEE Standard for Floating-Point Arithmetic.  SoftFloat\nis distributed in the form of C source code.  Building the SoftFloat sources\ngenerates a library file (typically `softfloat.a` or `libsoftfloat.a`)\ncontaining the floating-point subroutines.\n\n\nThe SoftFloat package is documented in the following files in the `doc`\nsubdirectory:\n\n* [SoftFloat.html](http://www.jhauser.us/arithmetic/SoftFloat-3/doc/SoftFloat.html) Documentation for using the SoftFloat functions.\n* [SoftFloat-source.html](http://www.jhauser.us/arithmetic/SoftFloat-3/doc/SoftFloat-source.html) Documentation for building SoftFloat.\n* [SoftFloat-history.html](http://www.jhauser.us/arithmetic/SoftFloat-3/doc/SoftFloat-history.html) History of the major changes to SoftFloat.\n\nOther files in the package comprise the source code for SoftFloat.\n\n", "release_dates": []}, {"name": "sszpp", "description": "C++ SSZ library", "language": "C++", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "# SSZ++\nA fast SSZ library focused on minimal memory allocations and fast hashing. \n\nIt is focused on templated polymorphism, with no dynamic dispatching and performing the minimal number of memory copies. \n\n**WARNING** This project is in very early implementation status, it is surely filled with bugs and security issues, it should not be used in production code.\n## Requirements\n- A compiler supporting C++23, tested only with GCC 13.1 (clang will fail due to lack of C++20 concepts)\n- [Hashtree](https://github.com/prysmaticlabs/hashtree) is used for hashing.\n- Cmake for building.\n- [intx](https://github.com/chfast/intx) for extended precision integers.\n- Optional for the spectest suite\n    - [Yaml-cpp](https://github.com/jbeder/yaml-cpp)\n    - [Snappy](https://github.com/google/snappy)\n\n## Tests\n\n1. Install all requirements. \n2. Clone the repo: `git clone https://github.com/potuz/sszpp.git`\n3. Build the project. This will download the spectests tarball, will take a while.\n```bash\n$ cd sszpp\n$ mkdir build\n$ cd build\n$ cmake ../\n$ make\n```\n4. Run spectests `./spectests` \n5. Run some simple benchmarks. In the same directory `build` place a file named `state.ssz` with the ssz binary representation of a Capella Beacon State. Then run the benchmark with `./bench_beacon_state`.\n\n## Benchmarks\n\nThese are results on a Dell XPS 9320\n```\n$ ./bench_beacon_state\nDeserialization: 28ms\nHashing: 62ms\nRoot: 0x5422c2fe46f4fa5719f91b353371428125f04ba684264c4bd2b25967258e66d9\n```\nCompared with Prysm using ADX on BLST and fully parallelized GoHashtree for hashing\n```\nDeserialize Duration: 100.248102ms, Hashing Duration: 139.618937ms HTR: 0x5422c2fe46f4fa5719f91b353371428125f04ba684264c4bd2b25967258e66d9\n```\nThese are on a Ryzen 9 7950X\n```\nDeserialization: 27ms\nHashing: 23ms\nRoot: 0x5422c2fe46f4fa5719f91b353371428125f04ba684264c4bd2b25967258e66d9\n```\n\nThese on a Ryzen 9 5900HX without any paralellization (courtesy of E. Del Fante)\n```\nDeserialization: 35ms\nHashing: 349ms\n```\nCompared to native Teku on the same computer deserializing at `130ms` and cold hashing at `1 500ms`. \n\n## Usage\n\nYou can use basic types like `bool`, `std::byte`, `std::uintX_t` with `X=8,16,32,64,128` and `256`. \n\nTo model bitvectors use `std::bitset`, to model arbitrary vectors use `std::array` or `std::vector`. The library provides a wrapper `ssz::list<T, N>` to model the SSZ type `List[T,N]`. That list uses internally a `std::vector<T>` as container. \n\nTo define a custom container unfortunately until `C++26` with static introspection we need to use a macro. You can define them as follows\n```c++\nstruct indexed_attestation_t : ssz::ssz_variable_size_container {\n    ssz::list<std::uint64_t, MAX_VALIDATORS_PER_COMMITEE> attesting_indices;\n    attestation_data_t data;\n    signature_t signature;\n\n    constexpr auto operator<=>(const indexed_attestation_t& rhs) const noexcept = default;\n    constexpr bool operator==(const indexed_attestation_t& rhs) const noexcept = default;\n\n    SSZ_CONT(attesting_indices, data, signature);\n};\n```\nYou only need to inherit from `ssz::ssz_container` or `ssz::ssz_variable_size_container` depending on whether this is a container where all members are fixed sizes or not. These bases classes are empty classes just there for the type traits until reflection comes to C++. \n\nTo deserialize an object of type `T` you would use\n```c++\nstd::vector<std::byte> vec{bytes};\nauto object = ssz::deserialize<T>(vec);\n```\n\nTo deserialize in place you can use\n```c++\nT object{};\nssz::deserialize(vec, object);\n```\n\nTo deserialize an object allocated in the heap you can use\n```c++\nstd::unique_ptr object_ptr = ssz::deserialize<T*>(vec);\n```\n\nTo serialize your object is simply\n```c++\nstd::vector<std::byte> vec = ssz::serialize(object);\n```\n\nTo get the hash tree root you would try\n```c++\nstd::array<std::byte, 32> htr = ssz::hash_tree_root(object, cpu_count);\n```\nwhere `cpu_count` is the number of threads that you want to use. Using `0` (the default) will use all available cores. \n\nThe library comes with all the consensus layer structures used in the `Capella`  fork, you can copy those as templates, or simply wrap your structures around them.\n\n## License\nLicenced under the [Apache License version 2.0](https://apache.org/licenses/LICENSE-2.0.txt) except for [acutest](https://github.com/mity/acutest) (included) that is licenced MIT. \n", "release_dates": []}, {"name": "stylus", "description": "Stylus VM and Fraud Prover", "language": "Go", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/stylus/stylus_with_paint_bg.png\" alt=\"Logo\" width=\"100%\">\n  </a>\n\n  <p align=\"center\">\n    <a href=\"https://developer.arbitrum.io/\"><strong>Next Generation Ethereum L2 Technology \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## About Arbitrum Stylus\n\nStylus is a next-gen programming environment for Arbitrum chains. Through the power of WebAssembly smart contracts, users can deploy programs written in their favorite programming languages, including Rust, C, and C++, to run alongside EVM smart contracts on Arbitrum. It's over an order of magnitude faster, slashes fees, and is fully interoperable with the Ethereum Virtual Machine.\n\nThis repo is a fork of [Arbitrum Nitro][Nitro] and is designed as an upgrade for all Arbitrum chains. Included is the Stylus VM and working fraud prover. If you are looking to write and deploy Stylus programs, please see the following SDKs.\n\n| Repo                           | Use cases                   | License           |\n|:-------------------------------|:----------------------------|:------------------|\n| [Rust SDK][Rust]               | Everything!                 | Apache 2.0 or MIT |\n| [C/C++ SDK][C]                 | Cryptography and algorithms | Apache 2.0 or MIT |\n| [Bf SDK][Bf]                   | Educational                 | Apache 2.0 or MIT |\n| [Cargo Stylus CLI Tool][Cargo] | Program deployment          | Apache 2.0 or MIT |\n\n[Nitro]: https://github.com/OffchainLabs/nitro\n[Orbit]: https://docs.arbitrum.io/launch-orbit-chain/orbit-gentle-introduction\n\nStylus is entirely opt-in. Devs familiar with Solidity can continue to enjoy Arbitrum's EVM-equivalent experience without any changes. This is because Stylus is entirely additive &mdash; a model we call EVM+. Stylus introduces a second, fully composible virtual machine for executing WebAssembly that coordinates with the EVM to produce state transitions. And since the Stylus SDK uses solidity ABIs, a contract written in one language can call out to any other.\n\nFor example, existing Solidity DEXs can &mdash; without modifications &mdash; list Rust ERC20 tokens, which might call out to C programs to do cryptography. Everything is fully interoperable, so users never have to care about the specific language or implementation details of the contracts they call.\n\n## Roadmap\n\nStylus is currently testnet-only and not recommended for production use. This will change as we complete an audit and add additional features.\n\nArbitrum [Orbit L3s][Orbit] may opt into Stylus at any time. Arbitrum One and Arbitrum Nova will upgrade to Stylus should the DAO vote for it.\n\nIf you'd like to be a part of this journey, join us in the `#stylus` channel on [Discord][discord]!\n\n## Gas Pricing\n\nStylus introduces new pricing models for WASM programs. Intended for high-compute applications, Stylus makes the following more affordable:\n\n- Compute, which is generally **10-100x** cheaper depending on the program. This is primarily due to the efficiency of the WASM runtime relative to the EVM, and the quality of the code produced by Rust, C, and C++ compilers. Another factor that matters is the quality of the code itself. For example, highly optimized and audited C libraries that implement a particular cryptographic operation are usually deployable without modification and perform exceptionally well. The fee reduction may be smaller for highly optimized Solidity that makes heavy use of native precompiles vs an unoptimized Stylus equivalent that doesn't do the same.\n\n- Memory, which is **100-500x** cheaper due to Stylus's novel exponential pricing mechanism intended to address Vitalik's concerns with the EVM's per-call, [quadratic memory][quadratic] pricing policy. For the first time ever, high-memory applications are possible on an EVM-equivalent chain.\n\n- Storage, for which the Rust SDK promotes better access patterns and type choices. Note that while the underlying [`SLOAD`][SLOAD] and [`SSTORE`][SSTORE] operations cost as they do in the EVM, the Rust SDK implements an optimal caching policy that minimizes their use. Exact savings depends on the program.\n\n- VM affordances, including common operations like keccak and reentrancy detection. No longer is it expensive to make safety the default.\n\nThere are, however, minor overheads to using Stylus that may matter to your application:\n\n- The first time a WASM is deployed, it must be _activated_. This is generally a few million gas, though to avoid testnet DoS, we've set it to a fixed 14 million. Note that you do not have to activate future copies of the same program. For example, the same NFT template can be deployed many times without paying this cost more than once. We will soon make the fees paid depend on the program, so that the gas used is based on the complexity of the WASM instead of this very conservative, worst-case estimate.\n\n- Calling a Stylus program costs 200-2000 gas. We're working with Wasmer to improve setup costs, but there will likely always be some amount of gas one pays to jump into WASM execution. This means that if a contract does next to nothing, it may be cheaper in Solidity. However if a contract starts doing interesting work, the dynamic fees will quickly make up for this fixed-cost overhead.\n\nThough conservative bounds have been chosen for testnet, all of this is subject to change as pricing models mature and further optimizations are made. Since gas numbers will vary across updates, it may make more sense to clock the time it takes to perform an operation rather than going solely by the numbers reported in receipts.\n\n[quadratic]: https://notes.ethereum.org/@vbuterin/proposals_to_adjust_memory_gas_costs\n[SLOAD]: https://www.evm.codes/#54\n[SSTORE]: https://www.evm.codes/#55\n\n## License\n\nWe currently have the Stylus VM and fraud prover (the contents of this repo) [licensed](./LICENSE) under a Business Source License, similar to our friends at Uniswap and Aave, with an \"Additional Use Grant\" to ensure that everyone can have full comfort using and running nodes on all public Arbitrum chains.\n\nThe Stylus SDK, however, is licensed under different terms. Please see each repo below for more information.\n\n| Repo                           | Use cases                   | License           |\n|:-------------------------------|:----------------------------|:------------------|\n| [Rust SDK][Rust]               | Everything!                 | Apache 2.0 or MIT |\n| [C/C++ SDK][C]                 | Cryptography and algorithms | Apache 2.0 or MIT |\n| [Bf SDK][Bf]                   | Educational                 | Apache 2.0 or MIT |\n| [Cargo Stylus CLI Tool][Cargo] | Program deployment          | Apache 2.0 or MIT |\n\n[Rust]: https://github.com/OffchainLabs/stylus-sdk-rs\n[C]: https://github.com/OffchainLabs/stylus-sdk-c\n[Bf]: https://github.com/OffchainLabs/stylus-sdk-bf\n[Cargo]: https://github.com/OffchainLabs/cargo-stylus\n\n## Contact\n\nDiscord - [Arbitrum][discord]\n\nTwitter - [OffchainLabs](https://twitter.com/OffchainLabs)\n\n[discord]: https://discord.com/invite/5KE54JwyTs\n", "release_dates": ["2023-10-06T20:49:35Z", "2023-10-06T19:20:59Z", "2023-09-09T23:57:37Z"]}, {"name": "stylus-as-example", "description": "AssemblyScript - Stylus tests", "language": "TypeScript", "license": null, "readme": "# Stylus - AssemblyScript example program (Sieve of Erathosthenes)\n\nExample of a basic smart contract written in AssemblyScript and compiled to WebAssembly (WASM) to be used on Arbitrum Stylus. It contains an implementation of the [sieve of Erathosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) algorithm.\n\nStylus is is an upgrade to Arbitrum, an Ethereum-focused, smart contract blockchain that scales the network. In addition to supporting Ethereum smart contracts written in Solidity, Stylus supports programs written in WebAssembly. Because AssemblyScript compiles to WASM, it can be used to create smart contracts to be used on Stylus.\n\n## Overview\n\nIn order to make your AS program work on Stylus, there are a few things to keep in mind:\n- The main entry point for the WASM program has to be a specific function called user_entrypoint. There's no need to make any configuration options, but that function must exist, and should receive an i32 (the length of the byte stream received by input) and return another i32 (0 on success, and 1 on error).\n- Input data is read from memory by calling the Stylus function `read_args`\n- Output data is written in the memory by calling the Stylus function `write_result`\n- `bulk-memory` needs to be disabled. When using it, AS will use the DataCountSection of WASM, which is not supported by Stylus yet\n- The runtime variant to use must be `minimal` or `stub`, otherwise Stylus won't be able to handle memory instructions effectively\n- A custom abort function needs to be declared\n- It is recommended to use the optimization options available on AS\n\nThis repository holds all these changes and also wraps the Stylus specific flow into its own folder, `stylus`, so the developer only needs to worry about working from the `main()` function in the `app.ts` file. That `main()` function takes the bytes received by the smart contract in Uint8Array form, and has to return the bytes that the smart contract will output, also in Uint8Array form.\n\n## Installation of the Stylus Cargo subcommand\n\nInstall the latest version of [Rust](https://www.rust-lang.org/tools/install), and then install the Stylus CLI tool with Cargo\n```bash\ncargo install cargo-stylus\n```\n\nAdd the wasm32-unknown-unknown build target to your Rust compiler:\n```bash\nrustup target add wasm32-unknown-unknown\n```\n\nYou should now have it available as a Cargo subcommand:\n```bash\ncargo stylus --help\n```\n\n## Steps to build and test\n\nInstall dependencies\n```bash\nnpm ci\n```\n\nCompile to WASM\n```bash\nnpm run asbuild\n```\n\nTest locally (optional)\n```bash\nnpm run test:local 56\n```\n\nCheck WASM program with stylus\n```bash\ncargo stylus check --wasm-file-path ./build/release.wasm\n```\n\nEstimate gas usage for deployment\n```bash\ncargo stylus deploy --wasm-file-path ./build/release.wasm --private-key=YOUR_PRIVATE_KEY --estimate-gas-only\n```\n\nDeploy smart contract\n```bash\ncargo stylus deploy --wasm-file-path ./build/release.wasm --private-key=YOUR_PRIVATE_KEY\n```\n\nTest on-chain\n```bash\nnpm run test:onchain 56\n```\n\n## A note on the local testing file\n\nThe file `test/local.js` contains a very basic simulation of how `read_args` and `write_result` behave on Stylus. This file is included only as an example of how one could build a local testing environment fully on JS before deploying the smart contract on Stylus.\n\n## Algorithm implementation\n\nThe implementation of the sieve of Erathosthenes algorithm is a slightly modified version of t-katsumura's implementation, available at https://github.com/t-katsumura/webassembly-examples-eratosthenes.\n\n## License\n\nThis project is fully open source, including an Apache-2.0 or MIT license at your choosing under your own copyright.", "release_dates": []}, {"name": "stylus-by-example", "description": "Simple examples of Arbitrum Stylus Rust & WASM smart contracts", "language": "TypeScript", "license": null, "readme": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\npnpm dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.\n", "release_dates": []}, {"name": "stylus-chess", "description": null, "language": "Rust", "license": null, "readme": "![Image](./header.png)\n\n# Stylus Chess\n\nDemonstrates the usage of an off-the-shelf chess engine from the Rust crates.io package registry to quickly build an onchain chess contract.\n\n## Requirements For Deployment\n\n- [Rust lang](https://www.rust-lang.org/tools/install)\n- [nitro testnode](https://docs.arbitrum.io/stylus/how-tos/local-stylus-dev-node) (requires docker)\n- [cargo stylus](https://docs.arbitrum.io/stylus/stylus-quickstart#creating-a-stylus-project)\n- [cast](https://book.getfoundry.sh/getting-started/installation) (part of the Foundry CLI suite)\n\n## ABI\n\n### `totalGames()(uint256)`\n\nReturns total number of games that have been created on this contract.\n\n`cast call --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"totalGames()(uint256)\" GAME_NUMBER_HERE`\n\n### `getTurnColor(uint256 game_number)(uint256)`\n\nGets the turn color for a given game number. Can either be 0 for WHITE or 1 for BLACK.\n\n`cast call --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"getTurnColor(uint256)(uint256)\" GAME_NUMBER_HERE`\n\n### `getCurrentPlayer(uint256 game_number)(address)`\n\nReturns the address of the current player who has next move for a given game number.\n\n`cast call --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"getCurrentPlayer(uint256)(address)\" GAME_NUMBER_HERE`\n\n### `playMove(uint256 game_number, uint256 from_row, uint256 from_col, uint256 to_row, uint256 to_col)(uint256)`\n\nAttempts to play a move for a given game number. Must pass in the current row and column for the piece and the desired row and column. Will return a status code for the attempted move, which will either be 1 for CONTINUING, 2 for ILLEGAL_MOVE, 3 for STALE_MATE or 4 for VICTORY.\n\nNOTE: This mutates state, so it must be written to the chain with a send.\n\n`cast send --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"playMove(uint256, uint256, uint256, uint256, uint256)(uint256)\" GAME_NUMBER_HERE FROM_ROW_HERE FROM_COL_HERE TO_ROW_HERE TO_COL_HERE`\n\n### `printGameState(uint256 game_number)`\n\nNOTE: This will only work locally and should be removed for any public testnet or mainnet.\n\nThis will print the state of the chess board to the Stylus console window when running an Arbitrum Nitro testnode locally. It uses unicode symbols to present an 8x8 grid in the console window.\n\n`cast call --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"printGameState(uint256)()\" GAME_NUMBER_HERE`\n\n### `boardStateByGameNumber(uint256 game_number)(uint256)`\n\nReturns the uint256 that represents the board state for a given game number.\n\n`cast call --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"boardStateByGameNumber(uint256)(uint256)\" GAME_NUMBER_HERE`\n\n### `createOrJoin()(uint256)`\n\nNOTE: This mutates state so it must be sent as an actual transaction.\n\nThis will either create a pending game to await a second player or will join the currently existing pending game.\n\n`cast send --rpc-url 'http://localhost:8547' --private-key PRIVATE_KEY_HERE DEPLOYMENT_ADDRESS_HERE \"createOrJoin()(uint256)\"`\n\n## Other Stylus Resources\n\n- [Stylus Rust SDK](https://docs.arbitrum.io/stylus/reference/rust-sdk-guide)\n- [Stylus By Example](https://arbitrum-stylus-by-example.vercel.app/basic_examples/hello_world)\n- [Awesome Stylus](https://github.com/OffchainLabs/awesome-stylus)\n- [Arbitrum Stylus Devs Telegram](https://t.me/arbitrum_stylus)\n", "release_dates": []}, {"name": "stylus-contracts", "description": null, "language": "Solidity", "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "readme": "# Arbitrum Nitro Rollup Contracts\n\nThis is the package with the smart contract code that powers Arbitrum Nitro.\nIt includes the rollup and fraud proof smart contracts, as well as interfaces for interacting with precompiles.\n\nFor more information see https://developer.arbitrum.io/intro\n\nFor the deployed addresses of these contracts for Arbitrum chains see https://developer.arbitrum.io/useful-addresses\n\nFor the token bridge contracts see https://github.com/OffchainLabs/token-bridge-contracts\n\nCompile these contracts locally by running\n\n```bash\ngit clone https://github.com/offchainlabs/nitro-contracts\ncd nitro-contracts\nyarn install\nyarn build\n```\n", "release_dates": []}, {"name": "stylus-geth", "description": null, "language": "Go", "license": {"key": "lgpl-3.0", "name": "GNU Lesser General Public License v3.0", "spdx_id": "LGPL-3.0", "url": "https://api.github.com/licenses/lgpl-3.0", "node_id": "MDc6TGljZW5zZTEy"}, "readme": "## Go Ethereum\n\nOfficial Golang execution layer implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.com/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.com/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\nAutomated builds are available for stable releases and the unstable master branch. Binary\narchives are published at https://geth.ethereum.org/downloads/.\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the [Installation Instructions](https://geth.ethereum.org/docs/getting-started/installing-geth).\n\nBuilding `geth` requires both a Go (version 1.19 or later) and a C compiler. You can install\nthem using your favourite package manager. Once the dependencies are installed, run\n\n```shell\nmake geth\n```\n\nor, to build the full suite of utilities:\n\n```shell\nmake all\n```\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd`\ndirectory.\n\n|  Command   | Description|\n| :--------: ||\n| **`geth`** | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI page](https://geth.ethereum.org/docs/fundamentals/command-line-options) for command line options. |\n|   `clef`   | Stand-alone signing tool, which can be used as a backend signer for `geth`.                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|  `devp2p`  | Utilities to interact with nodes on the networking layer, without running a full blockchain.                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n|  `abigen`  | Source code generator to convert Ethereum contract definitions into easy-to-use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://docs.soliditylang.org/en/develop/abi-spec.html) with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings) page for details.                                  |\n| `bootnode` | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.                                                                                                                                                                                                                                               |\n|   `evm`    | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug run`).                                                                                                                                                                                                                                               |\n| `rlpdump`  | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`).                                                                                                                                                                                |\n\n## Running `geth`\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://geth.ethereum.org/docs/fundamentals/command-line-options)),\nbut we've enumerated a few common parameter combos to get you up to speed quickly\non how you can run your own `geth` instance.\n\n### Hardware Requirements\n\nMinimum:\n\n* CPU with 2+ cores\n* 4GB RAM\n* 1TB free storage space to sync the Mainnet\n* 8 MBit/sec download Internet service\n\nRecommended:\n\n* Fast CPU with 4+ cores\n* 16GB+ RAM\n* High-performance SSD with at least 1TB of free space\n* 25+ MBit/sec download Internet service\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum\nnetwork: create accounts; transfer funds; deploy and interact with contracts. For this\nparticular use case, the user doesn't care about years-old historical data, so we can\nsync quickly to the current state of the network. To do so:\n\n```shell\n$ geth console\n```\n\nThis command will:\n * Start `geth` in snap sync mode (default, can be changed with the `--syncmode` flag),\n   causing it to download more data in exchange for avoiding processing the entire history\n   of the Ethereum network, which is very CPU intensive.\n * Start the built-in interactive [JavaScript console](https://geth.ethereum.org/docs/interacting-with-geth/javascript-console),\n   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md) \n   (note: the `web3` version bundled within `geth` is very old, and not up to date with official docs),\n   as well as `geth`'s own [management APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc).\n   This tool is optional and if you leave it out you can always attach it to an already running\n   `geth` instance with `geth attach`.\n\n### A Full node on the G\u00f6rli test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum\ncontracts, you almost certainly would like to do that without any real money involved until\nyou get the hang of the entire system. In other words, instead of attaching to the main\nnetwork, you want to join the **test** network with your node, which is fully equivalent to\nthe main network, but with play-Ether only.\n\n```shell\n$ geth --goerli console\n```\n\nThe `console` subcommand has the same meaning as above and is equally\nuseful on the testnet too.\n\nSpecifying the `--goerli` flag, however, will reconfigure your `geth` instance a bit:\n\n * Instead of connecting to the main Ethereum network, the client will connect to the G\u00f6rli\n   test network, which uses different P2P bootnodes, different network IDs and genesis\n   states.\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), `geth`\n   will nest itself one level deeper into a `goerli` subfolder (`~/.ethereum/goerli` on\n   Linux). Note, on OSX and Linux this also means that attaching to a running testnet node\n   requires the use of a custom endpoint since `geth attach` will try to attach to a\n   production node endpoint by default, e.g.,\n   `geth attach <datadir>/goerli/geth.ipc`. Windows users are not affected by\n   this.\n\n*Note: Although some internal protective measures prevent transactions from\ncrossing over between the main network and test network, you should always\nuse separate accounts for play and real money. Unless you manually move\naccounts, `geth` will by default correctly separate the two networks and will not make any\naccounts available between them.*\n\n### Full node on the Rinkeby test network\n\nGo Ethereum also supports connecting to the older proof-of-authority based test network\ncalled [*Rinkeby*](https://www.rinkeby.io) which is operated by members of the community.\n\n```shell\n$ geth --rinkeby console\n```\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a\nconfiguration file via:\n\n```shell\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea of how the file should look like you can use the `dumpconfig` subcommand to\nexport your existing configuration:\n\n```shell\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with `geth` v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using\nDocker:\n\n```shell\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start `geth` in snap-sync mode with a DB memory allowance of 1GB, as the\nabove command does.  It will also create a persistent volume in your home directory for\nsaving your blockchain as well as map the default ports. There is also an `alpine` tag\navailable for a slim version of the image.\n\nDo not forget `--http.addr 0.0.0.0`, if you want to access RPC from other containers\nand/or hosts. By default, `geth` binds to the local interface and RPC endpoints are not\naccessible from the outside.\n\n### Programmatically interfacing `geth` nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with `geth` and the\nEthereum network via your own programs and not manually through the console. To aid\nthis, `geth` has built-in support for a JSON-RPC based APIs ([standard APIs](https://ethereum.github.io/execution-apis/api-documentation/)\nand [`geth` specific APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc)).\nThese can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based\nplatforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by `geth`,\nwhereas the HTTP and WS interfaces need to manually be enabled and only expose a\nsubset of APIs due to security reasons. These can be turned on/off and configured as\nyou'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--http` Enable the HTTP-RPC server\n  * `--http.addr` HTTP-RPC server listening interface (default: `localhost`)\n  * `--http.port` HTTP-RPC server listening port (default: `8545`)\n  * `--http.api` API's offered over the HTTP-RPC interface (default: `eth,net,web3`)\n  * `--http.corsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--ws.addr` WS-RPC server listening interface (default: `localhost`)\n  * `--ws.port` WS-RPC server listening port (default: `8546`)\n  * `--ws.api` API's offered over the WS-RPC interface (default: `eth,net,web3`)\n  * `--ws.origins` Origins from which to accept WebSocket requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: `admin,debug,eth,miner,net,personal,txpool,web3`)\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to\nconnect via HTTP, WS or IPC to a `geth` node configured with the above flags and you'll\nneed to speak [JSON-RPC](https://www.jsonrpc.org/specification) on all transports. You\ncan reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based\ntransport before doing so! Hackers on the internet are actively trying to subvert\nEthereum nodes with exposed APIs! Further, all browser tabs can access locally\nrunning web servers, so malicious web pages could try to subvert locally available\nAPIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for\ngranted in the official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be\naware of and agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n    \"chainId\": <arbitrary positive integer>,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"berlinBlock\": 0,\n    \"londonBlock\": 0\n  },\n  \"alloc\": {},\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\": \"0x20000\",\n  \"extraData\": \"\",\n  \"gasLimit\": \"0x2fefd8\",\n  \"nonce\": \"0x0000000000000042\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\": \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing\nthe `nonce` to some random value so you prevent unknown remote nodes from being able\nto connect to you. If you'd like to pre-fund some accounts for easier testing, create\nthe accounts and populate the `alloc` field with their addresses.\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\n    \"balance\": \"111111111\"\n  },\n  \"0x0000000000000000000000000000000000000002\": {\n    \"balance\": \"222222222\"\n  }\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every**\n`geth` node with it prior to starting it up to ensure all blockchain parameters are correctly\nset:\n\n```shell\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to\nstart a bootstrap node that others can use to find each other in your network and/or over\nthe internet. The clean way is to configure and run a dedicated bootnode:\n\n```shell\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://ethereum.org/en/developers/docs/networking-layer/network-addresses/#enode)\nthat other nodes can use to connect to it and exchange peer information. Make sure to\nreplace the displayed IP address information (most probably `[::]`) with your externally\naccessible IP to get the actual `enode` URL.\n\n*Note: You could also use a full-fledged `geth` node as a bootnode, but it's the less\nrecommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try\n`telnet <ip> <port>` to ensure it's indeed reachable), start every subsequent `geth`\nnode pointed to the bootnode for peer discovery via the `--bootnodes` flag. It will\nprobably also be desirable to keep the data directory of your private network separated, so\ndo also specify a custom `--datadir` flag.\n\n```shell\n$ geth --datadir=path/to/custom/data/folder --bootnodes=<bootnode-enode-url-from-above>\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll\nalso need to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\n\nIn a private network setting a single CPU miner instance is more than enough for\npractical purposes as it can produce a stable stream of blocks at the correct intervals\nwithout needing heavy resources (consider running on a single thread, no need for multiple\nones either). To start a `geth` instance for mining, run it with all your usual flags, extended\nby:\n\n```shell\n$ geth <usual-flags> --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all\nproceedings to the account specified by `--miner.etherbase`. You can further tune the mining\nby changing the default gas limit blocks converge to (`--miner.targetgaslimit`) and the price\ntransactions are accepted at (`--miner.gasprice`).\n\n## Contribution\n\nThank you for considering helping out with the source code! We welcome contributions\nfrom anyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit\nmore complex changes though, please check up with the core devs first on [our Discord Server](https://discord.gg/invite/nthXNEv)\nto ensure those changes are in line with the general philosophy of the project and/or get\nsome early feedback which can make both your efforts much lighter as well as our review\nand merge procedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting)\n   guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary)\n   guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://geth.ethereum.org/docs/developers/geth-developer/dev-guide)\nfor more details on configuring your environment, managing project dependencies, and\ntesting procedures.\n\n### Contributing to geth.ethereum.org\n\nFor contributions to the [go-ethereum website](https://geth.ethereum.org), please checkout and raise pull requests against the `website` branch.\nFor more detailed instructions please see the `website` branch [README](https://github.com/ethereum/go-ethereum/tree/website#readme) or the \n[contributing](https://geth.ethereum.org/docs/developers/geth-developer/contributing) page of the website.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html),\nalso included in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) are licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also\nincluded in our repository in the `COPYING` file.\n", "release_dates": []}, {"name": "stylus-hello-world", "description": "Project starter template for writing Arbitrum Stylus programs in Rust", "language": "Rust", "license": null, "readme": "![Image](./header.png)\n\n# Stylus Hello World\n\nProject starter template for writing Arbitrum Stylus programs in Rust using the [stylus-sdk](https://github.com/OffchainLabs/stylus-sdk-rs). It includes a Rust implementation of a basic counter Ethereum smart contract:\n\n```js\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n    }\n\n    function increment() public {\n        number++;\n    }\n}\n```\n\nTo set up more minimal example that still uses the Stylus SDK, use `cargo stylus new --minimal <YOUR_PROJECT_NAME>` under [OffchainLabs/cargo-stylus](https://github.com/OffchainLabs/cargo-stylus).\n\n## Quick Start \n\nInstall [Rust](https://www.rust-lang.org/tools/install), and then install the Stylus CLI tool with Cargo\n\n```bash\nRUSTFLAGS=\"-C link-args=-rdynamic\" cargo install --force cargo-stylus\n```\n\nAdd the `wasm32-unknown-unknown` build target to your Rust compiler:\n\n```\nrustup target add wasm32-unknown-unknown\n```\n\nYou should now have it available as a Cargo subcommand:\n\n```bash\ncargo stylus --help\n```\n\nThen, clone the template:\n\n```\ngit clone https://github.com/OffchainLabs/stylus-hello-world && cd stylus-hello-world\n```\n\n### Testnet Information\n\nAll testnet information, including faucets and RPC endpoints can be found [here](https://docs.arbitrum.io/stylus/reference/testnet-information).\n\n### ABI Export\n\nYou can export the Solidity ABI for your program by using the `cargo stylus` tool as follows:\n\n```bash\ncargo stylus export-abi\n```\n\nwhich outputs:\n\n```js\n/**\n * This file was automatically generated by Stylus and represents a Rust program.\n * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).\n */\n\ninterface Counter {\n    function setNumber(uint256 new_number) external;\n\n    function increment() external;\n}\n```\n\nExporting ABIs uses a feature that is enabled by default in your Cargo.toml:\n\n```toml\n[features]\nexport-abi = [\"stylus-sdk/export-abi\"]\n```\n\n## Deploying\n\nYou can use the `cargo stylus` command to also deploy your program to the Stylus testnet. We can use the tool to first check\nour program compiles to valid WASM for Stylus and will succeed a deployment onchain without transacting. By default, this will use the Stylus testnet public RPC endpoint. See here for [Stylus testnet information](https://docs.arbitrum.io/stylus/reference/testnet-information)\n\n```bash\ncargo stylus check\n```\n\nIf successful, you should see:\n\n```bash\nFinished release [optimized] target(s) in 1.88s\nReading WASM file at stylus-hello-world/target/wasm32-unknown-unknown/release/stylus-hello-world.wasm\nCompressed WASM size: 8.9 KB\nProgram succeeded Stylus onchain activation checks with Stylus version: 1\n```\n\nNext, we can estimate the gas costs to deploy and activate our program before we send our transaction. Check out the [cargo-stylus](https://github.com/OffchainLabs/cargo-stylus) README to see the different wallet options for this step:\n\n```bash\ncargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH> \\\n  --estimate-gas-only\n```\n\nYou will then see the estimated gas cost for deploying before transacting:\n\n```bash\nDeploying program to address e43a32b54e48c7ec0d3d9ed2d628783c23d65020\nEstimated gas for deployment: 1874876\n```\n\nThe above only estimates gas for the deployment tx by default. To estimate gas for activation, first deploy your program using `--mode=deploy-only`, and then run `cargo stylus deploy` with the `--estimate-gas-only` flag, `--mode=activate-only`, and specify `--activate-program-address`.\n\n\nHere's how to deploy:\n\n```bash\ncargo stylus deploy \\\n  --private-key-path=<PRIVKEY_FILE_PATH>\n```\n\nThe CLI will send 2 transactions to deploy and activate your program onchain.\n\n```bash\nCompressed WASM size: 8.9 KB\nDeploying program to address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 1973450\nSubmitting tx...\nConfirmed tx 0x42db\u20267311, gas used 1973450\nActivating program at address 0x457b1ba688e9854bdbed2f473f7510c476a3da09\nEstimated gas: 14044638\nSubmitting tx...\nConfirmed tx 0x0bdb\u20263307, gas used 14044638\n```\n\nOnce both steps are successful, you can interact with your program as you would with any Ethereum smart contract.\n\n## Calling Your Program\n\nThis template includes an example of how to call and transact with your program in Rust using [ethers-rs](https://github.com/gakonst/ethers-rs) under the `examples/counter.rs`. However, your programs are also Ethereum ABI equivalent if using the Stylus SDK. **They can be called and transacted with using any other Ethereum tooling.**\n\nBy using the program address from your deployment step above, and your wallet, you can attempt to call the counter program and increase its value in storage:\n\n```rs\nabigen!(\n    Counter,\n    r#\"[\n        function number() external view returns (uint256)\n        function setNumber(uint256 number) external\n        function increment() external\n    ]\"#\n);\nlet counter = Counter::new(address, client);\nlet num = counter.number().call().await;\nprintln!(\"Counter number value = {:?}\", num);\n\nlet _ = counter.increment().send().await?.await?;\nprintln!(\"Successfully incremented counter via a tx\");\n\nlet num = counter.number().call().await;\nprintln!(\"New counter number value = {:?}\", num);\n```\n\nTo run it, set the following env vars or place them in a `.env` file this project, then:\n\n```\nSTYLUS_PROGRAM_ADDRESS=<the onchain address of your deployed program>\nPRIV_KEY_PATH=<the file path for your priv key to transact with>\nRPC_URL=https://stylus-testnet.arbitrum.io/rpc\n```\n\nNext, run:\n\n```\ncargo run --example counter --target=<YOUR_ARCHITECTURE>\n```\n\nWhere you can find `YOUR_ARCHITECTURE` by running `rustc -vV | grep host`. For M1 Apple computers, for example, this is `aarch64-apple-darwin` and for most Linux x86 it is `x86_64-unknown-linux-gnu`\n\n## Build Options\n\nBy default, the cargo stylus tool will build your project for WASM using sensible optimizations, but you can control how this gets compiled by seeing the full README for [cargo stylus](https://github.com/OffchainLabs/cargo-stylus). If you wish to optimize the size of your compiled WASM, see the different options available [here](https://github.com/OffchainLabs/cargo-stylus/blob/main/OPTIMIZING_BINARIES.md).\n\n## Peeking Under the Hood\n\nThe [stylus-sdk](https://github.com/OffchainLabs/stylus-sdk-rs) contains many features for writing Stylus programs in Rust. It also provides helpful macros to make the experience for Solidity developers easier. These macros expand your code into pure Rust code that can then be compiled to WASM. If you want to see what the `stylus-hello-world` boilerplate expands into, you can use `cargo expand` to see the pure Rust code that will be deployed onchain.\n\nFirst, run `cargo install cargo-expand` if you don't have the subcommand already, then:\n\n```\ncargo expand --all-features --release --target=<YOUR_ARCHITECTURE>\n```\n\nWhere you can find `YOUR_ARCHITECTURE` by running `rustc -vV | grep host`. For M1 Apple computers, for example, this is `aarch64-apple-darwin`.\n\n## License\n\nThis project is fully open source, including an Apache-2.0 or MIT license at your choosing under your own copyright.\n", "release_dates": ["2023-08-31T12:38:04Z"]}, {"name": "stylus-hello-world-minimal", "description": null, "language": "Rust", "license": null, "readme": null, "release_dates": []}, {"name": "stylus-sdk-bf", "description": "Bf Smart Contracts on Arbitrum \ud83d\ude05", "language": "WebAssembly", "license": null, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/stylus/stylus_with_paint_bg.png\" alt=\"Logo\" width=\"100%\">\n  </a>\n\n  <h3 align=\"center\">The Stylus SDK</h3>\n\n  <p align=\"center\">\n    <a href=\"https://docs.arbitrum.io/stylus/stylus-gentle-introduction\"><strong>Bf contracts on Arbitrum \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## Overview\n\n[Bf][wiki] is a humorous, esoteric programming language lauded for its minimalism, difficulty, and ability to produce inscrutable code for even the simplest of programs. For example, here's the shortest known implementation of [Hello World][hello], by KSab.\n\n```brainfuck\n+[>>>->-[>->----<<<]>>]>.---.>+..+++.>>.<.>>---.<<<.+++.------.<-.>>+.\n```\n\nThe 8 symbols seen in the above constitute the entirety of the Bf programming language. Because their operations simulate a [Turing Machine][Turing], Bf can be used to write any computable function. That is, anything you can do in C, Rust, etc, you can do in Bf &mdash; if you can figure out how to write it!\n\nFor better or worse, this repo includes a Bf-to-WebAssembly compiler, which allows Bf programs to run at near-native speeds on Arbitrum chains. The symbols are interpreted as follows.\n\n| Op  | Effect                                                          |\n|:---:|:----------------------------------------------------------------|\n| `>` | Move the machine's head 1 cell to the right.                    |\n| `<` | Move the machine's head 1 cell to the left.                     |\n| `+` | Increment the byte stored in the current cell.                  |\n| `-` | Decrement the byte stored in the current cell.                  |\n| `.` | Append the current cell's byte to the EVM return data.          |\n| `,` | Read the next byte of calldata into the current cell.           |\n| `[` | Jump to the matching `]` if the current cell's byte is `0`.     |\n| `]` | Jump to the matching `[` if the current cell's byte is not `0`. |\n\n[wiki]: https://esolangs.org/wiki/Brainfuck\n[hello]: https://tio.run/##HYpBCoAwEAMftGxeEPKR0oMWCiJ4EHz/mnYOQ0hyvsf1zG/cVdEkpbItGZJd6oIzFEBEQAKtVXnfVW5An/yq@gE\n[Turing]: https://en.wikipedia.org/wiki/Turing_machine\n\n## Usage\n\nTo invoke the compiler, run\n```sh\ncargo run <input.b> -o <output.wat>\n```\n\nTo upload the `.wat` to a Stylus-enabled Arbitrum chain, see [`cargo stylus`][cargo].\n\n[cargo]: https://github.com/OffchainLabs/stylus-sdk-bf\n\n## Why does this exist?\n\nThough seemingly just for fun, we hope this repo will be of educational value to framework developers. Creating Stylus SDKs for new languages is surprisingly straightforward, and uses the same building blocks seen in the generated `.wat` files this Bf compiler produces. One can even deploy hand-written `.wat` files using the imports seen in [`prelude.wat`][prelude];\n\n```wat\n(module\n    (import \"vm_hooks\" \"read_args\"    (func $read_args   (param i32    )))\n    (import \"vm_hooks\" \"write_result\" (func $return_data (param i32 i32)))\n\n    (func $main (export \"user_entrypoint\") (param $args_len i32) (result i32)\n        ;; your code here\n    )\n)\n```\n\nAll it takes is a WebAssembly-enabled compiler and a few imports, the full list of which can be found [here][hostios]. The table below includes our official SDKs built on the same ideas.\n\n| Repo             | Use cases                   | License           |\n|:-----------------|:----------------------------|:------------------|\n| [Rust SDK][Rust] | Everything!                 | Apache 2.0 or MIT |\n| [C/C++ SDK][C]   | Cryptography and algorithms | Apache 2.0 or MIT |\n| [Bf SDK][Bf]     | Educational                 | Apache 2.0 or MIT |\n\nWant to write your own? Join us in the `#stylus` channel on [discord][discord]!\n\n[prelude]: https://github.com/OffchainLabs/stylus-sdk-bf/blob/stylus/src/prelude.wat\n[hostios]: https://github.com/OffchainLabs/stylus-sdk-rs/blob/stylus/stylus-sdk/src/hostio.rs\n\n[Rust]: https://github.com/OffchainLabs/stylus-sdk-rs\n[C]: https://github.com/OffchainLabs/stylus-sdk-c\n[Bf]: https://github.com/OffchainLabs/stylus-sdk-bf\n\n[discord]: https://discord.com/invite/5KE54JwyTs\n\n## License\n\n&copy; 2022-2023 Offchain Labs, Inc.\n\nThis project is licensed under either of\n\n- [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([licenses/Apache-2.0](licenses/Apache-2.0))\n- [MIT license](https://opensource.org/licenses/MIT) ([licenses/MIT](licenses/MIT))\n\nat your option.\n\nThe [SPDX](https://spdx.dev) license identifier for this project is `MIT OR Apache-2.0`.\n", "release_dates": ["2023-08-31T12:11:40Z"]}, {"name": "stylus-sdk-c", "description": "C/C++ Smart Contracts on Arbitrum", "language": "C", "license": null, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/stylus/stylus_with_paint_bg.png\" alt=\"Logo\" width=\"100%\">\n  </a>\n\n  <h3 align=\"center\">The Stylus SDK</h3>\n\n  <p align=\"center\">\n    <a href=\"https://docs.arbitrum.io/stylus/stylus-gentle-introduction\"><strong>C/C++ contracts on Arbitrum \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## General\n\nThe C/C++ SDK allows you to take full control of the underlying web-assembly executed in your smart contract.\n\n## Required Tools\n\nThe Stylus VM executes WebAssembly, so you'll need a C/C++ compiler with support for wasm32 targets. Support for this varies, so some users may have to build `clang` or `gcc` from source. Your package manager may also include a compatible version.\n\nWe suggest using these tools:\n\n* [`llvm`](https://releases.llvm.org/) must include clang and have WebAssembly support, including the common `bulk-memory` extension. Make sure that clang accepts `--target=wasm32` and that llvm ships with the `wasm-ld` binary. Availability varies between distributions, but package managers commonly include these preconfigured in their \"llvm\" and/or \"clang\" recipies.\n* [`cargo-stylus`](https://github.com/OffchainLabs/cargo-stylus) is used to generate c-code, and to check and deploy contracts. Rust support is not required.\n* `make`, `git`\n\n## C/C++ SDK library\n\nThis SDK is neither audited, nor stable. Future versions may ship with backward incompatible changes.\n\n| Header                                     | Info                                                                                                           |\n|:-------------------------------------------|:---------------------------------------------------------------------------------------------------------------|\n| [`stylus_types.h`](include/stylus_types.h) | Types used by the wasm entrypoint to define return values from stylus                                          |\n| [`stylus_entry.h`](include/stylus_entry.h) | Includes used to generate stylus entrypoints                                                                   |\n| [`hostio.h`](include/hostio.h)             | Functions supplied by the stylus environment to change and access the VM state (see Host I/O)                  |\n| [`stylus_debug.h`](include/stylus_debug.h) | Host I/Os only available in debug mode. The best way to get a debug-enabled node is to [run one locally][node] |\n| [`bebi.h`](include/bebi.h)                 | Tools for handling Big-Endian Big Integers in wasm-32                                                          |\n| [`storage.h`](include/storage.h)           | Contract storage utilities                                                                                     |\n| [`stylus_utils.h`](include/stylus_utils.h) | Higher-level utils that might help smart contract developers                                                   |\n| [`string.h`](include/string.h)             | Minimal (and incomplete) implementation of the standard `string.h`                                             |\n| [`stdlib.h`](include/stdlib.h)             | Minimal (and incomplete) implementation of the standard `stdlib.h`                                             |\n\n[node]: https://docs.arbitrum.io/stylus/how-tos/local-stylus-dev-node\n\n## Examples\n\nThe library includes two examples, each with a makefile that builds a wasm from source using the command `make`. Both are annotated, and users are encouraged to read through the code.\n\n### siphash\n\nDemonstrates a custom precompile, compute-only smart contract that processes input bytes and returns their hash. This minimal example uses very little of the SDK library.\n\n### erc20\n\nProvides an erc20-like smart contract implementation. This example uses the library as well as the c-code generation capabilities of cargo-stylus.\n\n## Host I/Os\n\n[`include/hostios.h`](hostios.h). There you can call VM hooks directly, which allows you to do everything from looking up the current block number to calling other contracts.\n\nFor example, the VM provides an efficient implementation of [keccak256][keccak256] via\n```c\nvoid native_keccak256(const uint8_t * bytes, size_t len, uint8_t * output)\n```\n\nUnlike with the Rust SDK, however, you will have to work with raw pointers and deserialize arguments manually. This makes [`stylus.h`](stylus.h) an ideal environment for bytes-in bytes-out programming, but not general smart contract development.\n\nFor a comprehensive list of hostios, please see [The Host I/O Reference][hostios].\n\n[hostios]: TODO\n[keccak256]: https://en.wikipedia.org/wiki/SHA-3\n[siphash]: examples/siphash/main.c\n\n## Notes about using C to build wasm32\n\n### Clang flags\n\nThe table below includes `clang` flags commonly used to build Stylus contracts. The [siphash][siphash] example uses most of the following, and is a great starting point for programs that opt out of the standard library.\n\n| Flag                    | Info                                                          | Optional |\n|:------------------------|---------------------------------------------------------------|:---------|\n| --target=wasm32         | compile to wasm                                               |          |\n| --no-standard-libraries | opt out of the stdandard library                              | \u2705       |\n| -mbulk-memory           | enable bulk-memory operations (accelerates memset and memcpy) | \u2705       |\n| -O2 / -O3 / -Oz         | optimize for speed or size                                    | \u2705       |\n\n### Wasm-ld flags\n\nFlags that should be used when linking a wasm file with wasm-ld.\n\n| Flag                    | Info                                                          | Optional |\n|:------------------------|---------------------------------------------------------------|:---------|\n| --no-entry              | let Stylus decide the entrypoint                              |          |\n| --stack-first           | puts the shadow-stack at the beginning of the memory          | \u2705       |\n| -z stack-size=...       | sets size for the shadow-stack                                | \u2705       |\n\n\n### Performance\nC binaries are both small and very efficient. The [`siphash`][siphash] example is only **609 bytes** onchain and costs **22 gas** to execute a 32-byte input. By contrast, 22 gas only buys 7 ADD instructions in Solidity.\n\nHow did we achieve this efficiency? All we had to do was Google for an example siphash program and add a simple entrypoint. In the Stylus model, you can deploy highly-optimized and thouroughly-audited, industry-standard reference implementations as-is. With the Stylus SDK, cryptography, algorithms, and other high-compute applications are both straightforward and economically viable.\n\n## Roadmap\n\nStylus is currently testnet-only and not recommended for production use. This will change as we complete an audit and add additional features.\n\nArbitrum [Orbit L3s][Orbit] may opt into Stylus at any time. Arbitrum One and Arbitrum Nova will upgrade to Stylus should the DAO vote for it.\n\nIf you'd like to be a part of this journey, join us in the `#stylus` channel on [Discord][discord]!\n\n[Orbit]: https://docs.arbitrum.io/launch-orbit-chain/orbit-gentle-introduction\n\n## Don't know C?\n\nThe Stylus VM supports more than just C. In fact, any programming language that compiles down to WebAssembly could in principle be deployed to Stylus-enabled chains. The table below includes the official ports of the SDK, with more coming soon.\n\n| Repo             | Use cases                   | License           |\n|:-----------------|:----------------------------|:------------------|\n| [Rust SDK][Rust] | Everything!                 | Apache 2.0 or MIT |\n| [C/C++ SDK][C]   | Cryptography and algorithms | Apache 2.0 or MIT |\n| [Bf SDK][Bf]     | Educational                 | Apache 2.0 or MIT |\n\nWant to write your own? Join us in the `#stylus` channel on [discord][discord]!\n\n[Rust]: https://github.com/OffchainLabs/stylus-sdk-rs\n[C]: https://github.com/OffchainLabs/stylus-sdk-c\n[Bf]: https://github.com/OffchainLabs/stylus-sdk-bf\n\n[discord]: https://discord.com/invite/5KE54JwyTs\n\n## License\n\n&copy; 2022-2023 Offchain Labs, Inc.\n\nThis project is licensed under either of\n\n- [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([licenses/Apache-2.0](licenses/Apache-2.0))\n- [MIT license](https://opensource.org/licenses/MIT) ([licenses/MIT](licenses/MIT))\n\nat your option.\n\nThe [SPDX](https://spdx.dev) license identifier for this project is `MIT OR Apache-2.0`.\n", "release_dates": ["2023-08-31T12:32:29Z"]}, {"name": "stylus-sdk-rs", "description": "Rust Smart Contracts on Arbitrum", "language": "Rust", "license": null, "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://arbitrum.io/\">\n    <img src=\"https://arbitrum.io/assets/stylus/stylus_with_paint_bg.png\" alt=\"Logo\" width=\"100%\">\n  </a>\n\n  <h3 align=\"center\">The Stylus SDK</h3>\n\n  <p align=\"center\">\n    <a href=\"https://docs.arbitrum.io/stylus/stylus-gentle-introduction\"><strong>Rust contracts on Arbitrum \u00bb</strong></a>\n    <br />\n  </p>\n</p>\n\n## Overview\n\nThe Stylus SDK enables smart contract developers to write programs for **Arbitrum chains** written in the [Rust](https://www.rust-lang.org/tools/install) programming language. Stylus programs are compiled to [WebAssembly](https://webassembly.org/) and can then be deployed on-chain to execute alongside Solidity smart contracts. Stylus programs are not only orders of magnitude cheaper and faster but also enable what was thought to be previously impossible for WebAssembly: **EVM-interoperability**.\n\nFor information about deploying Rust smart contracts, see the [Cargo Stylus CLI Tool](https://github.com/OffchainLabs/cargo-stylus). For more information about Stylus, see [Stylus: A Gentle Introduction](https://docs.arbitrum.io/stylus/stylus-gentle-introduction). For a simpler intro to Stylus Rust development, see the [Quick Start guide](https://docs.arbitrum.io/stylus/stylus-quickstart).\n\nComprehensive documentation on the Rust SDK can be found [here](https://docs.arbitrum.io/stylus/rust-sdk-guide).\n\n## Feature highlights\n\nThe SDK makes it easy to develop Ethereum ABI-equivalent Stylus contracts in Rust. It provides a full suite of types and shortcuts that abstract away the details of Ethereum's storage layout, making it easy to _just write Rust_. For an in depth exploration of the features, please see comprehensive [Feature Overview][overview].\n\nSome of the features available in the SDK include:\n\n- **Generic**, storage-backed Rust types for programming **Solidity-equivalent** smart contracts with optimal storage caching.\n- Simple macros for writing **language-agnostic** methods and entrypoints.\n- Automatic export of Solidity interfaces for interoperability across programming languages.\n- Powerful **primitive types** backed by the feature-rich Alloy.\n\nRust programs written with the Stylus SDK can call and be called by Solidity smart contracts due to ABI equivalence with Ethereum programming languages. In fact, existing Solidity DEXs can list Rust tokens without modification, and vice versa.\n\n```rust\nuse stylus_sdk::{alloy_primitives::U256, prelude::*};\n\n// Generate Solidity-equivalent, Rust structs backed by storage.\nsol_storage! {\n  #[entrypoint]\n  pub struct Counter {\n    uint256 number;\n  }\n}\n\n#[external]\nimpl Counter {\n  // Gets the number value from storage.\n  pub fn number(&self) -> Result<U256, Vec<u8>> {\n    Ok(self.number.get())\n  }\n\n  // Sets a number in storage to a user-specified value.\n  pub fn set_number(&mut self, new_number: U256) -> Result<(), Vec<u8>> {\n    self.number.set(new_number);\n    Ok(())\n  }\n}\n```\n\nAdditionally, the Stylus SDK supports `#[no_std]` for contracts that wish to opt out of the standard library. In fact, the entire SDK is available from `#[no_std]`, so no special feature flag is required. This can be helpful for reducing binary size, and may be preferable in pure-compute use cases like cryptography.\n\nMost users will want to use the standard library, which is available since the Stylus VM supports `rustc`'s `wasm32-unknown-unknown` target triple. In the future we may add `wasm32-wasi` too, along with floating point and SIMD, which the Stylus VM does not yet support.\n\n[overview]: https://docs.arbitrum.io/stylus/reference/rust-sdk-guide\n\n## Don't know Rust?\n\nThe Stylus VM supports more than just Rust. In fact, any programming language that compiles down to WebAssembly could in principle be deployed to Stylus-enabled chains. The table below includes the official ports of the SDK, with more coming soon.\n\n| Repo             | Use cases                   | License           |\n|:-----------------|:----------------------------|:------------------|\n| [Rust SDK][Rust] | Everything!                 | Apache 2.0 or MIT |\n| [C/C++ SDK][C]   | Cryptography and algorithms | Apache 2.0 or MIT |\n| [Bf SDK][Bf]     | Educational                 | Apache 2.0 or MIT |\n| [Cargo Stylus][CargoStylus]     | Deploying Stylus programs | Apache 2.0 or MIT |\n\nWant to write your own? [Join us in the `#stylus` channel on discord][discord]!\n\n[Rust]: https://github.com/OffchainLabs/stylus-sdk-rs\n[C]: https://github.com/OffchainLabs/stylus-sdk-c\n[Bf]: https://github.com/OffchainLabs/stylus-sdk-bf\n\n[discord]: https://discord.com/invite/5KE54JwyTs\n\n## Developing Stylus Programs\n\nThe Stylus SDK is just one of the building blocks in creating and deploying WebAssembly programs to Arbitrum chains. To create a new Stylus project from a hello-world example and deploy it onchain, check out some of our tools below:\n\n| Repo             | Use cases                   | License           |\n|:-----------------|:----------------------------|:------------------|\n| [Stylus Hello World][HelloWorld]     | Rust Stylus starter template | Apache 2.0 or MIT |\n| [Cargo Stylus CLI][CargoStylus]     | Deploying Stylus programs | Apache 2.0 or MIT |\n\n[HelloWorld]: https://github.com/OffchainLabs/stylus-hello-world\n[CargoStylus]: https://github.com/OffchainLabs/cargo-stylus\n\n## License\n\n&copy; 2022-2023 Offchain Labs, Inc.\n\nThis project is licensed under either of\n\n- [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([licenses/Apache-2.0](licenses/Apache-2.0))\n- [MIT license](https://opensource.org/licenses/MIT) ([licenses/MIT](licenses/MIT))\n\nat your option.\n\nThe [SPDX](https://spdx.dev) license identifier for this project is `MIT OR Apache-2.0`.\n", "release_dates": ["2024-02-23T19:22:26Z", "2023-11-28T21:00:07Z", "2023-09-17T22:02:02Z", "2023-09-12T00:29:47Z", "2023-09-07T19:32:12Z", "2023-09-07T00:38:50Z", "2023-09-06T21:22:42Z", "2023-09-01T23:29:56Z", "2023-08-31T12:17:58Z"]}, {"name": "stylus-workshop-nft", "description": null, "language": "Rust", "license": null, "readme": "# ETHGlobal NFT Workshop\n\nThis repo provides an example ERC-721 generative art project. Included are methods for designing, debugging, and viewing NFTs using the Rust programming language.\n\nThough this code has **not** been audited, these NFTs may be listed on platforms on OpenSea, and are entirely on-chain since they use procedural generation. This is made possible by the [Stylus SDK][SDK], which provides a Solidity-equivalent experience when writing Rust smart contracts.\n\n## Getting started\n\nIn order to build and deploy your NFT, we'll need a few things.\n\n### [Rust][rust]\n\nThe compiler, along with the build tool `cargo` can be installed [here][rust].\n\nNote that you may need to update your Rust version and add the `wasm32` target.\n\n```sh\nrustup upgrade\nrustup target add wasm32-unknown-unknown\n```\n\n### The [Stylus CLI Tool][cli]\n\nThe following installs `cargo stylus`, the standard tool for deploying Stylus contracts.\n\n```sh\ncargo install --force cargo-stylus\n```\n\n### [Stylus Testnet Ether][eth]\n\nYou'll need testnet eth to pay for gas, which you can get from [this faucet][eth].\n\nNote that you may need to add the Stylus testnet to your wallet.\n\n| Name           | RPC                                    | Chain ID | Symbol | Block explorer                               | Parent chain     |   |\n|:---------------|:---------------------------------------|:---------|:-------|:---------------------------------------------|:-----------------|---|\n| Stylus testnet | https://stylus-testnet.arbitrum.io/rpc | 23011913 | ETH    | https://stylus-testnet-explorer.arbitrum.io/ | Arbitrum Sepolia |   |\n\nFor more information on wallets and testnet ether, please refer to the [Stylus Quickstart][quick].\n\n## Create your NFT\n\nWe'll want to clone this repo to start building.\n\n```sh\ngit clone https://github.com/OffchainLabs/stylus-workshop-nft.git\ncd stylus-workshop-nft\n```\n\nYou'll notice the following source files in the `src/` directory. Each has a purpose, and relevent documentation within each file.\n\n| File                               | Info                                       |\n|:-----------------------------------|:-------------------------------------------|\n| [`erc721.rs`][erc721.rs]           | Implements the [ERC-721 standard][erc721]. |\n| [`main.rs`](src/main.rs)           | Defines the entrypoint.                    |\n| [`utils.rs`](src/utils.rs)         | Utilities for generating onchain pngs.     |\n| [`print_art.rs`](src/print_art.rs) | Prints your NFT to the console \ud83d\udc40          |\n| [`art.rs`][art.rs]                 | **Where to draw your NFT \ud83d\ude04**              |\n\nFor today's workshop, two files are of interest: [`erc721`][erc721.rs], which provides an implementation of the [ERC-721 standard][erc721], and [`art`][art.rs], where'll you can draw your NFT!\n\nIf your a Solidity expert and familiar with the 721 standard, you may find [erc721][erc721.rs] particularly educational. Included are all the methods, which work exactly as you'd expect in Solidity. They're even callable by other contracts written in other languages, since the Stylus SDK uses the Solidity ABI!\n\nIt's time to make some art though, so we'll turn our focus to [`art.rs`][art.rs]. There you'll see a method named `generate_nft` at the bottom.\n\n```rs\npub fn generate_nft(address: Address, token_id: U256) -> Image<32, 32> {\n    let mut hasher = FnvHasher::new();\n    hasher.update(token_id.as_le_slice());\n    hasher.update(address.as_slice());\n    let mut rng = Rng::with_seed(hasher.output());\n\n    let bg_color = Color::from_hex(0xe3066e);\n    let fg_color = Color {\n        red: rng.u8(..),\n        green: rng.u8(..),\n        blue: rng.u8(..),\n    };\n\n    let mut image = Image::new(bg_color);\n\n    image.draw_gradient(Color::from_hex(0xff0000), Color::from_hex(0x0000ff));\n    image.draw_line(Cell::new(4, 4), Cell::new(4, 6), fg_color);\n    image.draw_line(Cell::new(10, 4), Cell::new(10, 6), fg_color);\n    image.draw_ellipse(Cell::new(7, 9), 3, 3, [false, false, true, true], fg_color);\n    image\n}\n```\n\nThe above takes in a sequential `token_id`, which you can use to seed your NFT, and builds an image via the various draw methods like `draw_line` and `draw_elipse`.\n\nYou can modify the above in various ways.\n\n- Change or add call methods to draw different shapes.\n- The return result is a 32x32 grid. You can change the dimensions by editing the `-> Image<32, 32>` part.\n- The `token_id` is unique to each NFT. You should condition what you draw based on it.\n\nIn Stylus, execution is 10-100x cheaper. The drawing methods can do large amounts of work with negligible fees. As a consequence, Stylus NFTs can be highly generative and entirely onchain. In fact, the contract in this repo can even produce PNGs and terminal images on the fly without having to include any offchain data. Try it out!\n\n```sh\ncargo test print_art -- --nocapture\n```\n\n<img src=\".example.png\" height=\"300\">\n\n## Deploy your NFT\n\nYou can check the readiness of your NFT as follows.\n\n```sh\ncargo stylus check --nightly\n```\n\nIf everything checks out, you're ready to deploy!\n\n```sh\ncargo stylus deploy --nightly --private-key 0x<your private key>\n```\n\nNote that it's generally better to use `--private-key-path` for security reasons.\n\nSee `cargo stylus deploy --help` for more information.\n\n[SDK]: https://github.com/OffchainLabs/stylus-sdk-rs\n[eth]: https://bwarelabs.com/faucets/arbitrum-stylus-testnet\n[rust]: https://www.rust-lang.org/tools/install\n[cli]: https://github.com/OffchainLabs/cargo-stylus\n[quick]: https://docs.arbitrum.io/stylus/stylus-quickstart\n[erc721]: https://eips.ethereum.org/EIPS/eip-721\n\n[art.rs]: src/art.rs\n[erc721.rs]: src/erc721.rs\n", "release_dates": []}, {"name": "token-bridge-contracts", "description": "Arbitrum token bridge and peripheral contracts", "language": "Solidity", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<p align=\"center\"><img src=\"docs/assets/arbitrum_horizontal_logo.png\" width=\"600\"></p>\n\n# Arbitrum Token Bridge Contracts\n\nThe Arbitrum Token Bridge is a decentralized application that uses [Nitro's](https://github.com/OffchainLabs/nitro) arbitrary cross-chain messaging system to implement an ERC20 token bridge between an EVM compatible base-chain and an Arbitrum chain.\n\nAll public Arbitrum chains include a [canonical token bridge deployment](https://developer.arbitrum.io/useful-addresses#token-bridge).\n\nThe Token Bridge includes \"Gateway\" contracts \u2014 pairs of contracts that implement a particular token-bridging flow \u2014 as well as \"Gateway Router\" contracts, which map tokens to their respective gateways.\n\nSee the [developer documentation](https://developer.arbitrum.io/asset-bridging) for more info.\n\nSee security audit reports [here](./audits).\n\nThis repository is offered under the Apache 2.0 license. See LICENSE for details.\n\n## Deployment\nCheck [this doc](./docs/deployment.md) for instructions on deployment and verification of token bridge.\n\n## Contact\n\nDiscord - [Arbitrum](https://discord.com/invite/5KE54JwyTs)\n\nTwitter: [Arbitrum](https://twitter.com/arbitrum)\n", "release_dates": ["2024-02-13T18:49:00Z", "2023-12-27T18:52:30Z", "2023-12-05T11:39:59Z", "2023-11-16T16:33:42Z", "2023-10-26T16:55:53Z", "2023-10-20T13:17:52Z", "2023-10-12T16:28:01Z", "2023-10-11T15:20:09Z", "2023-08-23T05:09:49Z", "2023-07-11T15:00:00Z"]}, {"name": "token-bridge-sdk", "description": null, "language": "TypeScript", "license": null, "readme": "## DEPRECATION NOTICE\n\nThe `token-bridge-sdk` package has been moved to the [this monorepo](https://github.com/OffchainLabs/arb-token-bridge)\n", "release_dates": []}, {"name": "token-bridge-sdk-old", "description": null, "language": "TypeScript", "license": null, "readme": "", "release_dates": []}, {"name": "token-mock", "description": null, "language": "JavaScript", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": null, "release_dates": []}, {"name": "upgrade-executor", "description": "Support system for performing contract upgrades  ", "language": "Solidity", "license": null, "readme": "Includes implementation of UpgradeExecutor - a reusable smart contract which can be used to set up a system for performing upgrades on Orbit chains.\n", "release_dates": ["2023-08-24T04:15:38Z", "2023-08-24T04:07:58Z", "2023-08-08T20:51:49Z"]}, {"name": "wasm-tools", "description": null, "language": "Rust", "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "readme": "<div align=\"center\">\n  <h1><code>wasm-tools</code></h1>\n\n<strong>A <a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a> project</strong>\n\n  <p>\n    <strong>Rust tooling for low-level manipulation of WebAssembly modules</strong>\n  </p>\n</div>\n\n# Installation\n\nThis project can be installed and compiled from source with this Cargo command:\n\n```\n$ cargo install wasm-tools\n```\n\nInstallation can be confirmed with:\n\n```\n$ wasm-tools --version\n```\n\nSubcommands can be explored with:\n\n```\n$ wasm-tools help\n```\n\n# Tools included\n\nThe `wasm-tools` binary internally contains a number of subcommands for working\nwith wasm modules. Many subcommands also come with Rust crates that can be use\nprogrammatically as well:\n\n| Tool | Crate | Description |\n|------|------|------------|\n| `wasm-tools validate` | [wasmparser] | Validate a WebAssembly file |\n| `wasm-tools parser` | [wat] and [wast] | Translate the WebAssembly text format to binary |\n| `wasm-tools print` | [wasmprinter] | Translate the WebAssembly binary format to text |\n| `wasm-tools smith` | [wasm-smith] | Generate a \"random\" valid WebAssembly module |\n| `wasm-tools mutate` | [wasm-mutate] | Mutate an input wasm file into a new valid wasm file |\n| `wasm-tools shrink` | [wasm-shrink] | Shrink a wasm file while preserving a predicate |\n| `wasm-tools dump` |   | Print debugging information about the binary format |\n| `wasm-tools objdump` |   | Print debugging information about section headers |\n| `wasm-tools strip` |   | Remove custom sections from a WebAssembly file |\n\n[wasmparser]: https://crates.io/crates/wasmparser\n[wat]: https://crates.io/crates/wat\n[wast]: https://crates.io/crates/wast\n[wasmprinter]: https://crates.io/crates/wasmprinter\n[wasm-smith]: https://crates.io/crates/wasm-smith\n[wasm-mutate]: https://crates.io/crates/wasm-mutate\n[wasm-shrink]: https://crates.io/crates/wasm-shrink\n\nThe `wasm-tools` CLI is primarily intended to be a debugging aid. The various\nsubcommands all have `--help` explainer texts to describe more about their\nfunctionality as well.\n\n# Libraries\n\nAs mentioned above many of the tools of the `wasm-tools` CLI have libraries\nimplemented in this repository as well. These libraries are:\n\n* [**`wasmparser`**](crates/wasmparser) - a library to parse WebAssembly binaries\n* [**`wat`**](crates/wat) - a library to parse the WebAssembly text format\n* [**`wast`**](crates/wast) - like `wat`, except provides an AST\n* [**`wasmprinter`**](crates/wasmprinter) - prints WebAssembly binaries in their\n  string form\n* [**`wasm-mutate`**](crates/wasm-mutate) - a WebAssembly test case mutator\n* [**`wasm-shrink`**](crates/wasm-shrink) - a WebAssembly test case shrinker\n* [**`wasm-smith`**](crates/wasm-smith) - a WebAssembly test case generator\n* [**`wasm-encoder`**](crates/wasm-encoder) - a crate to generate a binary\n  WebAssembly module\n\nIt's recommended to use the libraries directly rather than the CLI tooling when\nembedding into a separate project.\n\n# C/C++ bindings\n\nUsing the `CMakeLists.txt` in `crates/c-api`, `wasm-tools` can be used from the [`wasm-tools.h` header](crates/c-api/include/wasm-tools.h).\n\n# License\n\nThis project is licensed under the Apache 2.0 license with the LLVM exception.\nSee [LICENSE](LICENSE) for more details.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be licensed as above, without any additional terms or conditions.\n", "release_dates": []}, {"name": "wasmer", "description": null, "language": "Rust", "license": {"key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit", "node_id": "MDc6TGljZW5zZTEz"}, "readme": "<div align=\"center\">\n  <a href=\"https://wasmer.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img width=\"300\" src=\"https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png\" alt=\"Wasmer logo\">\n  </a>\n\n  <p>\n    <a href=\"https://github.com/wasmerio/wasmer/actions?query=workflow%3Abuild\">\n      <img src=\"https://github.com/wasmerio/wasmer/workflows/build/badge.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://github.com/wasmerio/wasmer/blob/master/LICENSE\">\n      <img src=\"https://img.shields.io/github/license/wasmerio/wasmer.svg\" alt=\"License\">\n    </a>\n    <a href=\"https://docs.wasmer.io\">\n      <img src=\"https://img.shields.io/static/v1?label=Docs&message=docs.wasmer.io&color=blue\" alt=\"Wasmer Docs\">\n    </a>\n    <a href=\"https://slack.wasmer.io\">\n      <img src=\"https://img.shields.io/static/v1?label=Slack&message=join%20us!&color=brighgreen\" alt=\"Slack channel\">\n    </a>\n  </p>\n</div>\n\n<br />\n\nWasmer is a _fast_ and _secure_ [**WebAssembly**](https://webassembly.org) runtime that enables super\n_lightweight containers_ to run anywhere: from *Desktop* to the *Cloud*, *Edge* and *IoT* devices.\n\n> _This document is also available in:\n[\ud83c\udde8\ud83c\uddf3 \u4e2d \u6587 -Chinese](https://github.com/wasmerio/wasmer/blob/master/docs/cn/README.md) \u2022 \n[\ud83c\udde9\ud83c\uddea Deutsch-German](https://github.com/wasmerio/wasmer/blob/master/docs/de/README.md) \u2022 \n[\ud83c\uddea\ud83c\uddf8 Espa\u00f1ol-Spanish](https://github.com/wasmerio/wasmer/blob/master/docs/es/README.md) \u2022 \n[\ud83c\uddeb\ud83c\uddf7 Fran\u00e7ais-French](https://github.com/wasmerio/wasmer/blob/master/docs/fr/README.md) \u2022 \n[\ud83c\uddef\ud83c\uddf5 \u65e5\u672c \u8a9e -Japanese](https://github.com/wasmerio/wasmer/blob/master/docs/ja/README.md) \u2022 \n[\ud83c\uddf0\ud83c\uddf7 \ud55c\uad6d\uc5b4 -Korean](https://github.com/wasmerio/wasmer/blob/master/docs/ko/README.md)_.\n\n### Features\n\n* Secure by default. No file, network, or environment access, unless explicitly enabled.\n* Supports [WASI](https://github.com/WebAssembly/WASI) and [Emscripten](https://emscripten.org/) out of the box.\n* Fast. Run WebAssembly at near-native speeds.\n* Embeddable in [multiple programming languages](https://github.com/wasmerio/wasmer/#-language-integrations)\n* Compliant with latest WebAssembly Proposals (SIMD, Reference Types, Threads, ...)\n\n### Install\n\nWasmer CLI ships as a single executable with no dependencies.\n\n```sh\ncurl https://get.wasmer.io -sSfL | sh\n```\n\n\n<details>\n  <summary>Other installation options (Powershell, Brew, Cargo, ...)</summary>\n  \n  _Wasmer can be installed from various package managers. Choose the one that fits best for your environment:_\n  \n  * Powershell (Windows)\n    ```powershell\n    iwr https://win.wasmer.io -useb | iex\n    ```\n\n  * <a href=\"https://formulae.brew.sh/formula/wasmer\">Homebrew</a> (macOS, Linux)\n\n    ```sh\n    brew install wasmer\n    ```\n\n  * <a href=\"https://github.com/ScoopInstaller/Main/blob/master/bucket/wasmer.json\">Scoop</a> (Windows)\n\n    ```sh\n    scoop install wasmer\n    ```\n\n  * <a href=\"https://chocolatey.org/packages/wasmer\">Chocolatey</a> (Windows)\n\n    ```sh\n    choco install wasmer\n    ```\n\n  * <a href=\"https://crates.io/crates/cargo-binstall/\">Cargo binstall</a>\n  \n    ```sh\n    cargo binstall wasmer-cli\n    ```\n\n  * <a href=\"https://crates.io/crates/wasmer-cli/\">Cargo</a>\n\n    _Note: All the available\n    features are described in the [`wasmer-cli`\n    crate docs](https://github.com/wasmerio/wasmer/tree/master/lib/cli/README.md)_\n\n    ```sh\n    cargo install wasmer-cli\n    ```\n\n  > Looking for more installation options? See [the `wasmer-install`\n  repository](https://github.com/wasmerio/wasmer-install) to learn\n  more!\n</details>\n\n### Quickstart\n\nYou can start by running\n[QuickJS](https://wapm.io/saghul/quickjs), a small and\nembeddable Javascript engine compiled as a WebAssembly module ([`qjs.wasm`](https://registry-cdn.wapm.io/contents/_/quickjs/0.0.3/build/qjs.wasm)):\n\n```bash\n$ wasmer qjs.wasm\nQuickJS - Type \"\\h\" for help\nqjs > const i = 1 + 2;\nqjs > console.log(\"hello \" + i);\nhello 3\n```\n\n#### Here is what you can do next:\n\n- [Use Wasmer from your Rust application](https://docs.wasmer.io/integrations/rust)\n- [Publish a Wasm package on WAPM](https://docs.wasmer.io/ecosystem/wapm/publishing-your-package)\n- [Read more about Wasmer](https://medium.com/wasmer/)\n\n## \ud83d\udce6 Language Integrations\n\nThe Wasmer runtime can be used as a library **embedded in different\nlanguages**, so you can use WebAssembly _anywhere_.\n\n| | Language | Package | Documentation |\n|-|-|-|-|\n| ![Rust logo] | [**Rust**][Rust integration] | [`wasmer` Rust crate] | [Learn][rust docs]\n| ![C logo] | [**C**][C integration] | [`wasm.h` header] | [Learn][c docs] |\n| ![C++ logo] | [**C++**][C integration] | [`wasm.hh` header] | [Learn][c docs] |\n| ![C# logo] | [**C#**][C# integration] | [`WasmerSharp` NuGet package] | [Learn][c# docs] |\n| ![D logo] | [**D**][D integration] | [`wasmer` Dub package] | [Learn][d docs] |\n| ![Python logo] | [**Python**][Python integration] | [`wasmer` PyPI package] | [Learn][python docs] |\n| ![JS logo] | [**Javascript**][JS integration] | [`@wasmerio` NPM packages] | [Learn][js docs] |\n| ![Go logo] | [**Go**][Go integration] | [`wasmer` Go package] | [Learn][go docs] |\n| ![PHP logo] | [**PHP**][PHP integration] | [`wasm` PECL package] | [Learn][php docs] |\n| ![Ruby logo] | [**Ruby**][Ruby integration] | [`wasmer` Ruby Gem] | [Learn][ruby docs] |\n| ![Java logo] | [**Java**][Java integration] | [`wasmer/wasmer-jni` Bintray package] | [Learn][java docs] |\n| ![Elixir logo] | [**Elixir**][Elixir integration] | [`wasmex` hex package] | [Learn][elixir docs] |\n| ![R logo] | [**R**][R integration] | *no published package* | [Learn][r docs] |\n| ![Postgres logo] | [**Postgres**][Postgres integration] | *no published package* | [Learn][postgres docs] |\n| ![Swift logo] | [**Swift**][Swift integration] | *no published package* | |\n| ![Zig logo] | [**Zig**][Zig integration] | *no published package* | |\n| ![Dart logo] | [**Dart**][Dart integration] | [`wasm` pub package] | |\n| ![Crystal logo] | [**Crystal**][Crystal integration] | *no published package* | [Learn][crystal docs] |\n| ![Lisp logo] | [**Lisp**][Lisp integration] | *no published package* | |\n| ![Julia logo] | [**Julia**][Julia integration] | *no published package* | |\n| ![VLang logo] | [**V**][vlang integration] | *no published package* | |\n| ![Ocaml logo] | [**OCaml**][OCaml integration] | [`wasmer` OCaml package] | |\n\n[\ud83d\udc4b&nbsp;&nbsp;Missing a language?](https://github.com/wasmerio/wasmer/issues/new?assignees=&labels=%F0%9F%8E%89+enhancement&template=---feature-request.md&title=)\n\n[rust logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/rust.svg\n[rust integration]: https://github.com/wasmerio/wasmer/tree/master/lib/api\n[`wasmer` rust crate]: https://crates.io/crates/wasmer/\n[rust docs]: https://docs.rs/wasmer/\n\n[c logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/c.svg\n[c integration]: https://github.com/wasmerio/wasmer/tree/master/lib/c-api\n[`wasm.h` header]: https://github.com/wasmerio/wasmer/blob/master/lib/c-api/tests/wasm-c-api/include/wasm.h\n[c docs]: https://docs.rs/wasmer-c-api/*/wasmer/wasm_c_api/index.html\n\n[c++ logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/cpp.svg\n[`wasm.hh` header]: https://github.com/wasmerio/wasmer/blob/master/lib/c-api/tests/wasm-c-api/include/wasm.hh\n\n[c# logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/csharp.svg\n[c# integration]: https://github.com/migueldeicaza/WasmerSharp\n[`wasmersharp` nuget package]: https://www.nuget.org/packages/WasmerSharp/\n[c# docs]: https://migueldeicaza.github.io/WasmerSharp/\n\n[d logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/d.svg\n[d integration]: https://github.com/chances/wasmer-d\n[`wasmer` Dub package]: https://code.dlang.org/packages/wasmer\n[d docs]: https://chances.github.io/wasmer-d\n\n[python logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/python.svg\n[python integration]: https://github.com/wasmerio/wasmer-python\n[`wasmer` pypi package]: https://pypi.org/project/wasmer/\n[python docs]: https://wasmerio.github.io/wasmer-python/api/wasmer\n\n[go logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/go.svg\n[go integration]: https://github.com/wasmerio/wasmer-go\n[`wasmer` go package]: https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer\n[go docs]: https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer?tab=doc\n\n[php logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/php.svg\n[php integration]: https://github.com/wasmerio/wasmer-php\n[`wasm` pecl package]: https://pecl.php.net/package/wasm\n[php docs]: https://wasmerio.github.io/wasmer-php/\n\n[js logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/js.svg\n[js integration]: https://github.com/wasmerio/wasmer-js\n[`@wasmerio` npm packages]: https://www.npmjs.com/org/wasmer\n[js docs]: https://docs.wasmer.io/integrations/js/reference-api\n\n[ruby logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/ruby.svg\n[ruby integration]: https://github.com/wasmerio/wasmer-ruby\n[`wasmer` ruby gem]: https://rubygems.org/gems/wasmer\n[ruby docs]: https://wasmerio.github.io/wasmer-ruby/wasmer_ruby/index.html\n\n[java logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/java.svg\n[java integration]: https://github.com/wasmerio/wasmer-java\n[`wasmer/wasmer-jni` bintray package]: https://bintray.com/wasmer/wasmer-jni/wasmer-jni\n[java docs]: https://github.com/wasmerio/wasmer-java/#api-of-the-wasmer-library\n\n[elixir logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/elixir.svg\n[elixir integration]: https://github.com/tessi/wasmex\n[elixir docs]: https://hexdocs.pm/wasmex/api-reference.html\n[`wasmex` hex package]: https://hex.pm/packages/wasmex\n\n[r logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/r.svg\n[r integration]: https://github.com/dirkschumacher/wasmr\n[r docs]: https://github.com/dirkschumacher/wasmr#example\n\n[postgres logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/postgres.svg\n[postgres integration]: https://github.com/wasmerio/wasmer-postgres\n[postgres docs]: https://github.com/wasmerio/wasmer-postgres#usage--documentation\n\n[swift logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/swift.svg\n[swift integration]: https://github.com/AlwaysRightInstitute/SwiftyWasmer\n\n[zig logo]: https://raw.githubusercontent.com/ziglang/logo/master/zig-favicon.png\n[zig integration]: https://github.com/zigwasm/wasmer-zig\n\n[dart logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/dart.svg\n[dart integration]: https://github.com/dart-lang/wasm\n[`wasm` pub package]: https://pub.dev/packages/wasm\n\n[lisp logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/lisp.svg\n[lisp integration]: https://github.com/helmutkian/cl-wasm-runtime\n\n[crystal logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/crystal.svg\n[crystal integration]: https://github.com/naqvis/wasmer-crystal\n[crystal docs]: https://naqvis.github.io/wasmer-crystal/\n\n[julia logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/julia.svg\n[julia integration]: https://github.com/Pangoraw/Wasmer.jl\n\n[vlang logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/vlang.svg\n[vlang integration]: https://github.com/vlang/wasmer\n\n[OCaml logo]: https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/languages/ocaml.svg\n[OCaml integration]: https://github.com/wasmerio/wasmer-ocaml\n[`wasmer` OCaml package]: https://opam.ocaml.org/packages/wasmer/\n\n## Contribute\n\nWe appreciate your help! \ud83d\udc9c\n\nWe recommend reading the following guide on how to contribute into a complex project successfully: \nhttps://mitchellh.com/writing/contributing-to-complex-projects\n\nCheck our docs on how to [build Wasmer from\nsource](https://docs.wasmer.io/ecosystem/wasmer/building-from-source) or [test your changes](https://docs.wasmer.io/ecosystem/wasmer/building-from-source/testing).\n\n## Community\n\nWasmer has an amazing community of developers and contributors. Welcome, please join us! \ud83d\udc4b\n\n- [Wasmer Community Slack](https://slack.wasmer.io/)\n- [Wasmer on Twitter](https://twitter.com/wasmerio)\n- [Wasmer on Facebook](https://www.facebook.com/wasmerio)\n- [Email](mailto:hello@wasmer.io)\n", "release_dates": []}, {"name": "zig-on-stylus", "description": "EVM-interoperable smart contracts written in Zig!", "language": "Zig", "license": null, "readme": "# Ethereum Compatible Smart Contracts In Zig \n\n**NOTE: This repo is a demo showing how smart contracts can be written in Zig. It is not an SDK**\n\nThis repo implements a demo smart contract using the [sieve of erathosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) algorithm to compute prime numbers in the [Zig](https://ziglang.org) programming language. This code can be deployed as a WASM smart contract to [Arbitrum Stylus](https://arbitrum.io/stylus).\n\nArbitrum is an Ethereum scaling solution which allows developers to write EVM and WASM smart contracts. Stylus is a new technology developed for [Arbitrum](https://arbitrum.io) chains which gives smart contract developers superpowers. With Stylus, developers can write EVM-compatible smart contracts in many different programming languages, and reap massive performance gains. Stylus slashes fees, with performance gains ranging from **10-70x**, and memory efficiency gains as high as **100-500x**.\n\n```zig\nfn sieve_of_erathosthenes(comptime limit: usize, nth: u16) bool {\n    var prime = [_]bool{true} ** limit;\n    prime[0] = false;\n    prime[1] = false;\n    var i: usize = 2;\n    while (i * i < limit) : (i += 1) {\n        if (prime[i]) {\n            var j = i * i;\n            while (j < limit) : (j += i)\n                prime[j] = false;\n        }\n    }\n    return prime[nth];\n}\n```\n\n\n## Walkthrough\n\nSee our full guide on how we added support for Zig on Arbitrum Stylus in [WALKTHROUGH.md](./WALKTHROUGH.md)\n\n## How and Why\n\nBeing able to deploy smart contracts to an Ethereum-based chain is thanks to [WebAssembly](https://www.infoworld.com/article/3291780/what-is-webassembly-the-next-generation-web-platform-explained.html) technology, which all Stylus programs compile to. Stylus smart contracts live under the **same Ethereum state trie** in Arbitrum nodes, and can fully interoperate with Solidity or Vyper EVM smart contracts. With Stylus, developers can write smart contracts in Rust that talk to Solidity and vice versa without any limitations.\n\nToday, the Stylus testnet also comes with 2 officially supported SDKs for developers to write contracts in the [Rust](https://github.com/OffchainLabs/stylus-sdk-rs) or [C](https://github.com/OffchainLabs/stylus-sdk-c) programming languages. \n\nHowever, _anyone_ can add support for new languages in Stylus. **As long as a programming language can compile to WebAssembly**, fit under 24Kb brotli-compressed, and meets some of the gas metering requirements of Stylus, it can be deployed and used onchain.\n\nWhy Zig?\n\n1. Zig contains **memory safety guardrails**, requiring developers to think hard about manual memory allocation in a prudent manner\n2. Zig is a **C equivalent** language, and its tooling is also a C compiler. This means C projects can incrementally adopt Zig when refactoring \n3. Zig is **lightning fast** and produces **small binaries**, making it suitable for blockchain applications\n\nPrograms written in Zig and deployed to Stylus have a tiny footprint and will have gas costs comparable, if not equal to, C programs.\n\n## License\n\nThis project is fully open source, including an Apache-2.0 or MIT license at your choosing under your own copyright.\n", "release_dates": []}]